
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,96,96,97,102,104,106,91,98,102],
[115,0,101,104,110,107,108,103,115,108],
[115,110,0,116,118,104,104,104,102,103],
[114,107,95,0,116,105,110,106,101,109],
[109,101,93,95,0,105,104,98,100,112],
[107,104,107,106,106,0,112,100,110,109],
[105,103,107,101,107,99,0,99,106,107],
[120,108,107,105,113,111,112,0,108,105],
[113,96,109,110,111,101,105,103,0,105],
[109,103,108,102,99,102,104,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,84,103,101,84,90,99,96,94],
[110,0,106,117,125,107,93,115,109,110],
[127,105,0,116,118,106,105,123,120,116],
[108,94,95,0,114,97,90,101,97,99],
[110,86,93,97,0,101,90,110,99,99],
[127,104,105,114,110,0,106,122,102,107],
[121,118,106,121,121,105,0,132,119,116],
[112,96,88,110,101,89,79,0,103,99],
[115,102,91,114,112,109,92,108,0,102],
[117,101,95,112,112,104,95,112,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,117,85,92,101,105,93,95,108],
[123,0,142,105,119,118,117,135,122,114],
[94,69,0,83,95,91,108,109,99,106],
[126,106,128,0,107,104,116,125,136,123],
[119,92,116,104,0,113,109,102,103,115],
[110,93,120,107,98,0,107,104,104,106],
[106,94,103,95,102,104,0,98,108,116],
[118,76,102,86,109,107,113,0,97,115],
[116,89,112,75,108,107,103,114,0,107],
[103,97,105,88,96,105,95,96,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,103,105,115,114,106,95,99,108],
[87,0,95,103,97,89,87,104,99,94],
[108,116,0,110,115,104,105,101,105,105],
[106,108,101,0,122,106,115,110,98,115],
[96,114,96,89,0,97,92,93,86,107],
[97,122,107,105,114,0,103,91,110,113],
[105,124,106,96,119,108,0,94,102,101],
[116,107,110,101,118,120,117,0,96,106],
[112,112,106,113,125,101,109,115,0,111],
[103,117,106,96,104,98,110,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,88,99,111,120,110,97,92,112],
[88,0,84,91,69,97,76,70,80,90],
[123,127,0,112,115,113,116,109,98,121],
[112,120,99,0,96,100,87,101,101,122],
[100,142,96,115,0,131,114,98,100,113],
[91,114,98,111,80,0,103,78,91,104],
[101,135,95,124,97,108,0,102,108,128],
[114,141,102,110,113,133,109,0,128,123],
[119,131,113,110,111,120,103,83,0,112],
[99,121,90,89,98,107,83,88,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,100,93,103,92,124,168,89,112],
[120,0,93,103,112,111,92,129,88,103],
[111,118,0,95,118,125,102,171,124,116],
[118,108,116,0,116,106,120,190,136,97],
[108,99,93,95,0,89,96,145,100,116],
[119,100,86,105,122,0,112,142,99,115],
[87,119,109,91,115,99,0,130,113,121],
[43,82,40,21,66,69,81,0,53,84],
[122,123,87,75,111,112,98,158,0,89],
[99,108,95,114,95,96,90,127,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,125,123,122,142,123,127,105,113],
[95,0,104,125,106,114,108,131,121,100],
[86,107,0,115,116,126,133,133,108,118],
[88,86,96,0,104,103,94,138,145,107],
[89,105,95,107,0,102,98,110,99,114],
[69,97,85,108,109,0,133,115,77,97],
[88,103,78,117,113,78,0,104,109,100],
[84,80,78,73,101,96,107,0,115,108],
[106,90,103,66,112,134,102,96,0,111],
[98,111,93,104,97,114,111,103,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,99,112,130,108,112,135,139,126],
[100,0,88,96,117,96,93,134,110,124],
[112,123,0,98,119,129,108,145,125,111],
[99,115,113,0,132,109,117,154,132,122],
[81,94,92,79,0,91,101,127,126,86],
[103,115,82,102,120,0,121,145,121,111],
[99,118,103,94,110,90,0,130,131,107],
[76,77,66,57,84,66,81,0,99,79],
[72,101,86,79,85,90,80,112,0,108],
[85,87,100,89,125,100,104,132,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,125,116,130,78,118,114,135,101],
[83,0,94,102,84,97,98,81,118,88],
[86,117,0,105,136,110,91,116,112,130],
[95,109,106,0,135,114,106,84,125,106],
[81,127,75,76,0,99,80,76,110,105],
[133,114,101,97,112,0,108,115,134,93],
[93,113,120,105,131,103,0,119,137,120],
[97,130,95,127,135,96,92,0,141,98],
[76,93,99,86,101,77,74,70,0,95],
[110,123,81,105,106,118,91,113,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,90,68,128,96,105,83,116,62],
[154,0,106,104,95,138,119,145,131,107],
[121,105,0,110,88,105,86,132,109,101],
[143,107,101,0,93,135,129,150,117,91],
[83,116,123,118,0,110,121,115,127,90],
[115,73,106,76,101,0,97,126,95,81],
[106,92,125,82,90,114,0,108,94,71],
[128,66,79,61,96,85,103,0,111,84],
[95,80,102,94,84,116,117,100,0,73],
[149,104,110,120,121,130,140,127,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,114,115,123,103,127,104,99,106],
[102,0,89,103,97,105,100,93,96,99],
[97,122,0,117,111,86,101,100,104,105],
[96,108,94,0,116,97,104,94,95,105],
[88,114,100,95,0,105,98,90,102,93],
[108,106,125,114,106,0,107,91,105,104],
[84,111,110,107,113,104,0,94,106,99],
[107,118,111,117,121,120,117,0,104,111],
[112,115,107,116,109,106,105,107,0,114],
[105,112,106,106,118,107,112,100,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,101,105,105,107,95,101,111,102],
[113,0,98,117,104,111,109,105,114,110],
[110,113,0,114,112,109,98,117,118,105],
[106,94,97,0,98,103,101,94,107,107],
[106,107,99,113,0,110,117,113,108,107],
[104,100,102,108,101,0,105,97,107,107],
[116,102,113,110,94,106,0,117,110,108],
[110,106,94,117,98,114,94,0,107,102],
[100,97,93,104,103,104,101,104,0,110],
[109,101,106,104,104,104,103,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,112,77,84,92,152,123,143,79],
[130,0,115,117,77,128,139,97,139,90],
[99,96,0,138,91,110,140,111,155,56],
[134,94,73,0,64,79,181,114,126,72],
[127,134,120,147,0,107,171,100,140,112],
[119,83,101,132,104,0,165,155,179,111],
[59,72,71,30,40,46,0,96,93,11],
[88,114,100,97,111,56,115,0,104,79],
[68,72,56,85,71,32,118,107,0,38],
[132,121,155,139,99,100,200,132,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,118,104,99,122,107,92,109,101],
[110,0,102,113,105,132,108,116,117,111],
[93,109,0,95,101,119,113,93,109,105],
[107,98,116,0,93,122,116,117,110,106],
[112,106,110,118,0,126,107,102,118,105],
[89,79,92,89,85,0,99,86,95,73],
[104,103,98,95,104,112,0,95,97,89],
[119,95,118,94,109,125,116,0,106,91],
[102,94,102,101,93,116,114,105,0,95],
[110,100,106,105,106,138,122,120,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,114,118,97,114,115,99,103,121],
[94,0,102,99,93,108,109,108,114,106],
[97,109,0,95,91,101,97,92,91,109],
[93,112,116,0,105,121,112,102,109,116],
[114,118,120,106,0,103,104,105,97,119],
[97,103,110,90,108,0,109,91,108,115],
[96,102,114,99,107,102,0,104,110,121],
[112,103,119,109,106,120,107,0,99,108],
[108,97,120,102,114,103,101,112,0,120],
[90,105,102,95,92,96,90,103,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,107,107,106,111,108,105,108,113],
[99,0,102,99,118,109,115,106,103,120],
[104,109,0,102,100,101,106,101,103,119],
[104,112,109,0,107,111,114,110,109,113],
[105,93,111,104,0,109,107,104,100,107],
[100,102,110,100,102,0,105,108,101,103],
[103,96,105,97,104,106,0,106,97,106],
[106,105,110,101,107,103,105,0,106,113],
[103,108,108,102,111,110,114,105,0,107],
[98,91,92,98,104,108,105,98,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,125,129,92,126,152,120,117,144],
[82,0,93,100,107,107,117,114,94,122],
[86,118,0,111,100,117,128,94,88,128],
[82,111,100,0,86,115,127,109,95,108],
[119,104,111,125,0,118,147,137,120,137],
[85,104,94,96,93,0,119,93,96,99],
[59,94,83,84,64,92,0,107,86,112],
[91,97,117,102,74,118,104,0,90,128],
[94,117,123,116,91,115,125,121,0,128],
[67,89,83,103,74,112,99,83,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,106,128,121,115,115,103,117,113],
[81,0,97,106,104,91,101,96,110,106],
[105,114,0,126,126,115,109,118,130,108],
[83,105,85,0,114,102,102,94,112,100],
[90,107,85,97,0,93,102,97,103,102],
[96,120,96,109,118,0,112,95,117,98],
[96,110,102,109,109,99,0,107,109,104],
[108,115,93,117,114,116,104,0,125,100],
[94,101,81,99,108,94,102,86,0,102],
[98,105,103,111,109,113,107,111,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,97,101,106,108,104,114,104,106],
[105,0,110,100,104,109,103,106,108,103],
[114,101,0,112,120,110,106,105,122,105],
[110,111,99,0,118,126,117,115,113,113],
[105,107,91,93,0,100,98,103,103,96],
[103,102,101,85,111,0,100,110,105,101],
[107,108,105,94,113,111,0,103,112,96],
[97,105,106,96,108,101,108,0,110,104],
[107,103,89,98,108,106,99,101,0,108],
[105,108,106,98,115,110,115,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,100,54,78,164,152,105,104],
[106,0,93,78,66,64,130,134,79,86],
[106,118,0,166,87,117,130,148,103,117],
[111,133,45,0,81,68,133,148,106,106],
[157,145,124,130,0,67,157,159,106,107],
[133,147,94,143,144,0,155,142,132,107],
[47,81,81,78,54,56,0,132,83,111],
[59,77,63,63,52,69,79,0,39,119],
[106,132,108,105,105,79,128,172,0,133],
[107,125,94,105,104,104,100,92,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,108,105,122,101,99,112,106],
[102,0,108,110,117,114,107,103,113,111],
[109,103,0,104,120,121,116,109,123,112],
[103,101,107,0,115,112,109,108,109,121],
[106,94,91,96,0,127,114,108,103,101],
[89,97,90,99,84,0,103,93,87,103],
[110,104,95,102,97,108,0,113,112,101],
[112,108,102,103,103,118,98,0,105,124],
[99,98,88,102,108,124,99,106,0,98],
[105,100,99,90,110,108,110,87,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,87,112,103,95,109,112,103,109],
[109,0,108,118,106,113,104,124,121,115],
[124,103,0,111,107,115,109,112,116,124],
[99,93,100,0,107,88,99,111,105,114],
[108,105,104,104,0,114,108,115,112,113],
[116,98,96,123,97,0,100,112,106,114],
[102,107,102,112,103,111,0,115,110,109],
[99,87,99,100,96,99,96,0,109,101],
[108,90,95,106,99,105,101,102,0,115],
[102,96,87,97,98,97,102,110,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,87,91,55,147,108,69,135,123],
[182,0,126,169,140,144,144,105,140,147],
[124,85,0,147,70,153,111,120,94,150],
[120,42,64,0,87,118,120,87,106,150],
[156,71,141,124,0,121,82,91,103,153],
[64,67,58,93,90,0,137,81,106,123],
[103,67,100,91,129,74,0,117,82,147],
[142,106,91,124,120,130,94,0,139,138],
[76,71,117,105,108,105,129,72,0,111],
[88,64,61,61,58,88,64,73,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,91,86,96,118,89,93,96,112],
[120,0,98,84,101,106,93,109,108,99],
[120,113,0,111,110,113,106,100,120,114],
[125,127,100,0,116,109,99,110,120,108],
[115,110,101,95,0,95,91,109,118,97],
[93,105,98,102,116,0,89,101,112,99],
[122,118,105,112,120,122,0,106,121,108],
[118,102,111,101,102,110,105,0,123,105],
[115,103,91,91,93,99,90,88,0,89],
[99,112,97,103,114,112,103,106,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,110,108,103,111,121,104,94,103],
[117,0,100,109,114,107,120,109,109,109],
[101,111,0,110,105,95,111,107,109,99],
[103,102,101,0,105,107,125,104,105,110],
[108,97,106,106,0,115,124,97,109,111],
[100,104,116,104,96,0,116,98,100,109],
[90,91,100,86,87,95,0,86,86,94],
[107,102,104,107,114,113,125,0,110,113],
[117,102,102,106,102,111,125,101,0,114],
[108,102,112,101,100,102,117,98,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,97,105,95,94,108,92,89,87],
[102,0,99,113,97,99,109,102,114,92],
[114,112,0,104,108,97,107,99,107,110],
[106,98,107,0,86,88,112,95,96,98],
[116,114,103,125,0,114,122,112,112,111],
[117,112,114,123,97,0,108,109,123,100],
[103,102,104,99,89,103,0,103,106,90],
[119,109,112,116,99,102,108,0,106,101],
[122,97,104,115,99,88,105,105,0,94],
[124,119,101,113,100,111,121,110,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,103,152,119,135,132,123,97,108],
[81,0,125,135,134,99,133,140,100,93],
[108,86,0,151,118,112,122,135,114,118],
[59,76,60,0,96,71,96,77,64,72],
[92,77,93,115,0,130,119,101,120,83],
[76,112,99,140,81,0,119,113,86,113],
[79,78,89,115,92,92,0,72,84,109],
[88,71,76,134,110,98,139,0,75,81],
[114,111,97,147,91,125,127,136,0,140],
[103,118,93,139,128,98,102,130,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,98,85,84,62,86,84,77,118],
[116,0,121,95,103,87,109,88,107,133],
[113,90,0,122,95,108,85,116,123,130],
[126,116,89,0,71,74,66,109,83,123],
[127,108,116,140,0,103,94,129,103,133],
[149,124,103,137,108,0,115,124,123,135],
[125,102,126,145,117,96,0,107,87,122],
[127,123,95,102,82,87,104,0,91,127],
[134,104,88,128,108,88,124,120,0,129],
[93,78,81,88,78,76,89,84,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,127,105,125,100,112,97,115,129],
[92,0,77,93,106,90,80,80,91,105],
[84,134,0,91,120,89,115,104,126,120],
[106,118,120,0,120,106,105,117,132,122],
[86,105,91,91,0,82,90,93,109,106],
[111,121,122,105,129,0,109,104,127,129],
[99,131,96,106,121,102,0,96,100,116],
[114,131,107,94,118,107,115,0,115,117],
[96,120,85,79,102,84,111,96,0,98],
[82,106,91,89,105,82,95,94,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,100,112,95,101,112,102,108,99],
[91,0,102,112,94,95,97,98,99,92],
[111,109,0,109,101,106,112,101,104,107],
[99,99,102,0,95,99,99,94,108,97],
[116,117,110,116,0,107,115,103,108,105],
[110,116,105,112,104,0,105,106,110,101],
[99,114,99,112,96,106,0,99,104,95],
[109,113,110,117,108,105,112,0,120,105],
[103,112,107,103,103,101,107,91,0,101],
[112,119,104,114,106,110,116,106,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,56,0,0,102,0,102,0],
[211,0,53,211,155,155,155,155,155,155],
[211,158,0,211,155,155,155,155,211,102],
[155,0,0,0,102,102,102,102,102,102],
[211,56,56,109,0,56,158,56,158,102],
[211,56,56,109,155,0,158,56,211,102],
[109,56,56,109,53,53,0,109,211,0],
[211,56,56,109,155,155,102,0,211,102],
[109,56,0,109,53,0,0,0,0,0],
[211,56,109,109,109,109,211,109,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,98,89,100,101,104,97,118,102],
[113,0,93,91,96,124,104,101,107,100],
[113,118,0,90,113,107,109,104,101,108],
[122,120,121,0,118,127,125,91,123,102],
[111,115,98,93,0,114,92,92,108,94],
[110,87,104,84,97,0,104,82,95,90],
[107,107,102,86,119,107,0,74,127,99],
[114,110,107,120,119,129,137,0,119,96],
[93,104,110,88,103,116,84,92,0,86],
[109,111,103,109,117,121,112,115,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,107,118,123,98,88,105,83],
[113,0,97,106,100,111,109,95,108,102],
[106,114,0,90,110,114,101,120,112,100],
[104,105,121,0,120,106,99,115,104,112],
[93,111,101,91,0,117,95,95,100,89],
[88,100,97,105,94,0,90,89,89,90],
[113,102,110,112,116,121,0,101,97,99],
[123,116,91,96,116,122,110,0,96,111],
[106,103,99,107,111,122,114,115,0,86],
[128,109,111,99,122,121,112,100,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,100,110,101,105,106,112,111,102],
[109,0,99,107,96,109,106,102,101,104],
[111,112,0,107,111,115,100,106,108,105],
[101,104,104,0,93,107,107,97,101,107],
[110,115,100,118,0,104,111,109,118,110],
[106,102,96,104,107,0,97,100,105,102],
[105,105,111,104,100,114,0,100,105,113],
[99,109,105,114,102,111,111,0,113,100],
[100,110,103,110,93,106,106,98,0,106],
[109,107,106,104,101,109,98,111,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,169,128,64,134,97,126,118,141],
[108,0,151,116,106,129,110,99,97,122],
[42,60,0,61,59,77,57,54,46,98],
[83,95,150,0,66,124,62,109,91,156],
[147,105,152,145,0,125,136,140,104,159],
[77,82,134,87,86,0,63,92,65,116],
[114,101,154,149,75,148,0,141,131,169],
[85,112,157,102,71,119,70,0,101,113],
[93,114,165,120,107,146,80,110,0,162],
[70,89,113,55,52,95,42,98,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,145,84,118,113,99,87,129,125],
[97,0,141,102,135,100,120,105,137,97],
[66,70,0,75,84,95,81,78,113,100],
[127,109,136,0,132,106,106,80,141,115],
[93,76,127,79,0,84,94,88,122,95],
[98,111,116,105,127,0,123,109,151,115],
[112,91,130,105,117,88,0,78,144,106],
[124,106,133,131,123,102,133,0,146,111],
[82,74,98,70,89,60,67,65,0,79],
[86,114,111,96,116,96,105,100,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,104,96,94,107,115,99,97,122],
[114,0,116,112,108,107,124,105,100,129],
[107,95,0,106,98,95,120,103,95,109],
[115,99,105,0,108,93,114,96,98,141],
[117,103,113,103,0,98,120,106,107,127],
[104,104,116,118,113,0,117,99,100,132],
[96,87,91,97,91,94,0,103,89,115],
[112,106,108,115,105,112,108,0,108,124],
[114,111,116,113,104,111,122,103,0,127],
[89,82,102,70,84,79,96,87,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,123,105,107,113,109,110,91,105],
[105,0,129,118,110,96,111,108,115,117],
[88,82,0,75,88,82,91,89,83,87],
[106,93,136,0,120,121,118,104,93,112],
[104,101,123,91,0,94,110,95,98,99],
[98,115,129,90,117,0,105,99,113,97],
[102,100,120,93,101,106,0,111,103,101],
[101,103,122,107,116,112,100,0,93,118],
[120,96,128,118,113,98,108,118,0,98],
[106,94,124,99,112,114,110,93,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,83,100,84,91,90,100,90,85],
[133,0,101,123,112,115,110,133,109,114],
[128,110,0,118,111,104,110,123,119,109],
[111,88,93,0,102,107,95,119,104,102],
[127,99,100,109,0,100,100,111,115,107],
[120,96,107,104,111,0,96,121,102,118],
[121,101,101,116,111,115,0,125,105,107],
[111,78,88,92,100,90,86,0,105,98],
[121,102,92,107,96,109,106,106,0,106],
[126,97,102,109,104,93,104,113,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,116,125,117,118,109,115,117,70],
[79,0,119,103,127,108,76,94,83,86],
[95,92,0,104,127,105,108,86,106,101],
[86,108,107,0,114,92,78,88,91,64],
[94,84,84,97,0,117,97,94,83,79],
[93,103,106,119,94,0,87,85,106,68],
[102,135,103,133,114,124,0,107,105,107],
[96,117,125,123,117,126,104,0,100,88],
[94,128,105,120,128,105,106,111,0,95],
[141,125,110,147,132,143,104,123,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,111,105,123,108,123,116,94],
[104,0,107,127,108,113,106,114,116,94],
[100,104,0,121,106,130,116,113,107,111],
[100,84,90,0,110,112,95,105,104,94],
[106,103,105,101,0,102,91,101,107,97],
[88,98,81,99,109,0,98,113,107,90],
[103,105,95,116,120,113,0,112,103,94],
[88,97,98,106,110,98,99,0,113,92],
[95,95,104,107,104,104,108,98,0,95],
[117,117,100,117,114,121,117,119,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,76,111,91,111,100,118,111,101],
[115,0,99,111,127,105,119,139,115,127],
[135,112,0,139,105,127,112,149,106,117],
[100,100,72,0,86,120,107,138,86,113],
[120,84,106,125,0,111,98,110,91,103],
[100,106,84,91,100,0,96,109,102,91],
[111,92,99,104,113,115,0,126,77,119],
[93,72,62,73,101,102,85,0,84,80],
[100,96,105,125,120,109,134,127,0,98],
[110,84,94,98,108,120,92,131,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,114,104,112,107,122,93,113,109],
[98,0,108,110,109,108,122,112,109,103],
[97,103,0,94,110,101,114,99,108,100],
[107,101,117,0,118,106,122,101,105,102],
[99,102,101,93,0,94,106,94,104,106],
[104,103,110,105,117,0,121,103,118,100],
[89,89,97,89,105,90,0,91,95,95],
[118,99,112,110,117,108,120,0,108,104],
[98,102,103,106,107,93,116,103,0,110],
[102,108,111,109,105,111,116,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,107,84,99,98,116,104,115,88],
[113,0,120,104,107,115,116,106,122,125],
[104,91,0,79,99,96,110,105,120,109],
[127,107,132,0,104,128,126,122,123,114],
[112,104,112,107,0,113,128,102,124,123],
[113,96,115,83,98,0,121,88,129,100],
[95,95,101,85,83,90,0,94,98,93],
[107,105,106,89,109,123,117,0,135,109],
[96,89,91,88,87,82,113,76,0,101],
[123,86,102,97,88,111,118,102,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,101,105,99,119,93,101,93,97],
[103,0,115,105,107,116,90,103,110,102],
[110,96,0,105,109,116,97,98,99,104],
[106,106,106,0,113,126,104,106,96,111],
[112,104,102,98,0,114,105,100,107,103],
[92,95,95,85,97,0,95,104,87,95],
[118,121,114,107,106,116,0,104,105,117],
[110,108,113,105,111,107,107,0,107,104],
[118,101,112,115,104,124,106,104,0,119],
[114,109,107,100,108,116,94,107,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,105,102,90,112,79,107,103,71],
[93,0,92,89,85,111,81,97,99,64],
[106,119,0,115,104,124,83,107,84,106],
[109,122,96,0,94,124,112,133,106,85],
[121,126,107,117,0,129,80,117,112,86],
[99,100,87,87,82,0,82,98,80,63],
[132,130,128,99,131,129,0,126,126,97],
[104,114,104,78,94,113,85,0,128,72],
[108,112,127,105,99,131,85,83,0,92],
[140,147,105,126,125,148,114,139,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,115,104,101,112,113,113,119,100],
[100,0,98,99,93,98,108,107,102,94],
[96,113,0,99,105,106,109,109,111,103],
[107,112,112,0,115,104,108,101,116,100],
[110,118,106,96,0,112,104,114,117,106],
[99,113,105,107,99,0,99,109,112,96],
[98,103,102,103,107,112,0,107,108,103],
[98,104,102,110,97,102,104,0,117,104],
[92,109,100,95,94,99,103,94,0,99],
[111,117,108,111,105,115,108,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,123,119,98,120,102,111,119,120],
[87,0,122,100,102,100,115,104,94,92],
[88,89,0,89,90,86,89,94,83,98],
[92,111,122,0,107,108,103,100,88,90],
[113,109,121,104,0,107,107,105,93,96],
[91,111,125,103,104,0,89,102,95,98],
[109,96,122,108,104,122,0,106,94,97],
[100,107,117,111,106,109,105,0,106,95],
[92,117,128,123,118,116,117,105,0,99],
[91,119,113,121,115,113,114,116,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,117,106,104,107,94,99,116,121],
[115,0,118,104,106,102,100,102,117,125],
[94,93,0,108,87,92,92,91,98,113],
[105,107,103,0,105,104,99,100,107,110],
[107,105,124,106,0,111,100,106,114,123],
[104,109,119,107,100,0,104,99,111,111],
[117,111,119,112,111,107,0,103,124,125],
[112,109,120,111,105,112,108,0,113,124],
[95,94,113,104,97,100,87,98,0,116],
[90,86,98,101,88,100,86,87,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,132,102,138,127,127,143,108,121],
[79,0,102,49,105,72,97,103,98,73],
[79,109,0,84,114,73,52,111,89,91],
[109,162,127,0,127,122,92,146,145,139],
[73,106,97,84,0,68,67,86,102,66],
[84,139,138,89,143,0,84,160,120,120],
[84,114,159,119,144,127,0,116,88,82],
[68,108,100,65,125,51,95,0,111,68],
[103,113,122,66,109,91,123,100,0,74],
[90,138,120,72,145,91,129,143,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,84,118,119,107,98,87,98,124],
[116,0,75,137,143,124,125,129,109,118],
[127,136,0,156,158,125,116,115,100,143],
[93,74,55,0,116,96,103,99,75,99],
[92,68,53,95,0,94,98,105,68,95],
[104,87,86,115,117,0,107,102,94,89],
[113,86,95,108,113,104,0,76,66,87],
[124,82,96,112,106,109,135,0,81,122],
[113,102,111,136,143,117,145,130,0,131],
[87,93,68,112,116,122,124,89,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,110,103,105,100,101,105,107],
[111,0,112,106,107,111,106,103,111,107],
[101,99,0,99,102,97,96,92,93,90],
[101,105,112,0,102,109,99,102,106,106],
[108,104,109,109,0,107,101,101,105,100],
[106,100,114,102,104,0,104,101,106,108],
[111,105,115,112,110,107,0,99,110,111],
[110,108,119,109,110,110,112,0,104,122],
[106,100,118,105,106,105,101,107,0,106],
[104,104,121,105,111,103,100,89,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,111,107,105,123,120,123,97,124],
[96,0,99,69,113,116,98,97,92,113],
[100,112,0,88,95,125,99,108,83,123],
[104,142,123,0,120,122,130,147,137,142],
[106,98,116,91,0,119,101,116,115,112],
[88,95,86,89,92,0,103,106,86,119],
[91,113,112,81,110,108,0,120,99,113],
[88,114,103,64,95,105,91,0,98,111],
[114,119,128,74,96,125,112,113,0,137],
[87,98,88,69,99,92,98,100,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,115,109,111,117,120,96,96,117],
[79,0,93,76,80,92,101,89,88,86],
[96,118,0,102,108,114,123,108,112,113],
[102,135,109,0,111,119,116,108,121,113],
[100,131,103,100,0,113,117,91,105,107],
[94,119,97,92,98,0,90,86,87,89],
[91,110,88,95,94,121,0,86,106,96],
[115,122,103,103,120,125,125,0,120,109],
[115,123,99,90,106,124,105,91,0,107],
[94,125,98,98,104,122,115,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,107,90,89,111,94,73,81,115],
[123,0,110,139,86,121,82,84,95,137],
[104,101,0,133,116,142,119,97,90,117],
[121,72,78,0,107,119,76,76,69,82],
[122,125,95,104,0,108,100,83,97,112],
[100,90,69,92,103,0,94,109,76,114],
[117,129,92,135,111,117,0,118,85,142],
[138,127,114,135,128,102,93,0,111,103],
[130,116,121,142,114,135,126,100,0,140],
[96,74,94,129,99,97,69,108,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,74,69,66,91,71,71,64,90],
[137,0,74,92,81,110,63,56,81,83],
[137,137,0,98,142,143,109,111,115,118],
[142,119,113,0,130,111,96,86,93,111],
[145,130,69,81,0,106,79,71,80,92],
[120,101,68,100,105,0,78,58,62,76],
[140,148,102,115,132,133,0,104,101,93],
[140,155,100,125,140,153,107,0,88,110],
[147,130,96,118,131,149,110,123,0,117],
[121,128,93,100,119,135,118,101,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,104,100,98,114,103,102,103],
[108,0,108,105,98,108,109,93,101,103],
[99,103,0,105,98,105,116,99,104,101],
[107,106,106,0,100,108,119,100,111,111],
[111,113,113,111,0,112,114,112,103,109],
[113,103,106,103,99,0,110,106,98,101],
[97,102,95,92,97,101,0,87,100,94],
[108,118,112,111,99,105,124,0,100,110],
[109,110,107,100,108,113,111,111,0,106],
[108,108,110,100,102,110,117,101,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,116,114,116,106,89,106,109,99],
[86,0,105,107,108,93,83,85,92,91],
[95,106,0,89,104,105,78,108,92,80],
[97,104,122,0,114,114,83,104,105,94],
[95,103,107,97,0,95,95,113,104,78],
[105,118,106,97,116,0,90,103,98,109],
[122,128,133,128,116,121,0,121,126,104],
[105,126,103,107,98,108,90,0,107,97],
[102,119,119,106,107,113,85,104,0,104],
[112,120,131,117,133,102,107,114,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,104,121,99,121,110,115,115,112],
[70,0,90,86,87,93,86,96,94,84],
[107,121,0,102,92,96,103,98,114,92],
[90,125,109,0,101,108,101,113,105,114],
[112,124,119,110,0,110,101,101,126,107],
[90,118,115,103,101,0,103,104,115,104],
[101,125,108,110,110,108,0,121,118,108],
[96,115,113,98,110,107,90,0,102,94],
[96,117,97,106,85,96,93,109,0,99],
[99,127,119,97,104,107,103,117,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,129,88,140,92,121,109,101,103],
[101,0,122,86,99,86,85,103,85,123],
[82,89,0,88,127,90,127,93,92,98],
[123,125,123,0,131,99,120,132,104,157],
[71,112,84,80,0,103,85,103,77,132],
[119,125,121,112,108,0,121,118,95,123],
[90,126,84,91,126,90,0,125,113,134],
[102,108,118,79,108,93,86,0,83,108],
[110,126,119,107,134,116,98,128,0,127],
[108,88,113,54,79,88,77,103,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,114,109,112,112,127,107,130,102],
[105,0,116,116,111,120,114,113,106,101],
[97,95,0,105,101,111,109,105,101,101],
[102,95,106,0,104,116,121,124,107,108],
[99,100,110,107,0,112,108,103,102,101],
[99,91,100,95,99,0,107,89,109,101],
[84,97,102,90,103,104,0,108,95,96],
[104,98,106,87,108,122,103,0,95,106],
[81,105,110,104,109,102,116,116,0,101],
[109,110,110,103,110,110,115,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,40,118,130,71,47,76,40,123],
[88,0,71,90,175,88,135,57,85,168],
[171,140,0,90,135,135,104,93,45,128],
[93,121,121,0,133,57,57,121,85,121],
[81,36,76,78,0,45,92,36,45,36],
[140,123,76,154,166,0,128,76,121,123],
[164,76,107,154,119,83,0,76,40,76],
[135,154,118,90,175,135,135,0,116,168],
[171,126,166,126,166,90,171,95,0,135],
[88,43,83,90,175,88,135,43,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,99,104,104,100,105,115,78,111],
[103,0,89,106,80,84,110,113,71,97],
[112,122,0,94,114,100,105,124,108,106],
[107,105,117,0,91,110,89,112,88,101],
[107,131,97,120,0,113,98,121,99,106],
[111,127,111,101,98,0,109,111,86,102],
[106,101,106,122,113,102,0,123,97,99],
[96,98,87,99,90,100,88,0,67,112],
[133,140,103,123,112,125,114,144,0,124],
[100,114,105,110,105,109,112,99,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,89,99,76,95,98,103,104,115],
[106,0,75,113,74,110,115,96,101,103],
[122,136,0,122,93,125,114,102,125,119],
[112,98,89,0,78,91,129,107,119,99],
[135,137,118,133,0,133,121,102,121,132],
[116,101,86,120,78,0,116,103,108,106],
[113,96,97,82,90,95,0,94,96,106],
[108,115,109,104,109,108,117,0,121,114],
[107,110,86,92,90,103,115,90,0,84],
[96,108,92,112,79,105,105,97,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,110,114,127,108,105,100,107,124],
[97,0,123,107,140,91,107,116,122,124],
[101,88,0,109,114,97,78,105,109,106],
[97,104,102,0,120,113,93,88,104,126],
[84,71,97,91,0,100,73,75,109,115],
[103,120,114,98,111,0,94,108,101,116],
[106,104,133,118,138,117,0,112,115,136],
[111,95,106,123,136,103,99,0,112,127],
[104,89,102,107,102,110,96,99,0,116],
[87,87,105,85,96,95,75,84,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,103,108,126,114,122,118,117,102],
[88,0,76,98,93,104,84,100,97,70],
[108,135,0,108,116,111,100,120,117,104],
[103,113,103,0,116,101,109,113,117,115],
[85,118,95,95,0,105,114,109,118,108],
[97,107,100,110,106,0,99,108,100,99],
[89,127,111,102,97,112,0,119,112,117],
[93,111,91,98,102,103,92,0,99,92],
[94,114,94,94,93,111,99,112,0,110],
[109,141,107,96,103,112,94,119,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,113,123,102,122,125,121,115,125],
[112,0,106,103,109,114,142,110,111,92],
[98,105,0,113,84,91,109,106,94,102],
[88,108,98,0,89,86,93,104,93,104],
[109,102,127,122,0,98,124,121,103,102],
[89,97,120,125,113,0,115,125,111,119],
[86,69,102,118,87,96,0,90,111,99],
[90,101,105,107,90,86,121,0,111,103],
[96,100,117,118,108,100,100,100,0,114],
[86,119,109,107,109,92,112,108,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,120,94,121,105,122,116,97,107],
[122,0,127,126,130,101,129,110,108,108],
[91,84,0,97,112,94,98,74,98,100],
[117,85,114,0,122,104,136,103,83,107],
[90,81,99,89,0,105,102,109,77,110],
[106,110,117,107,106,0,119,109,112,98],
[89,82,113,75,109,92,0,104,78,97],
[95,101,137,108,102,102,107,0,95,100],
[114,103,113,128,134,99,133,116,0,118],
[104,103,111,104,101,113,114,111,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,131,121,131,93,102,125,126,113],
[116,0,149,105,107,112,145,163,128,142],
[80,62,0,86,105,106,119,116,102,105],
[90,106,125,0,86,97,136,166,95,125],
[80,104,106,125,0,71,128,139,87,120],
[118,99,105,114,140,0,119,149,111,117],
[109,66,92,75,83,92,0,135,92,97],
[86,48,95,45,72,62,76,0,83,62],
[85,83,109,116,124,100,119,128,0,116],
[98,69,106,86,91,94,114,149,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,141,124,116,119,82,108,106,103],
[119,0,155,130,115,102,101,124,78,119],
[70,56,0,120,100,91,87,118,87,127],
[87,81,91,0,96,96,71,90,75,118],
[95,96,111,115,0,83,115,86,76,104],
[92,109,120,115,128,0,99,107,88,112],
[129,110,124,140,96,112,0,107,98,124],
[103,87,93,121,125,104,104,0,80,100],
[105,133,124,136,135,123,113,131,0,123],
[108,92,84,93,107,99,87,111,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,117,98,101,105,101,107,98,110],
[112,0,106,101,106,107,111,108,108,125],
[94,105,0,98,99,92,106,101,111,111],
[113,110,113,0,103,104,111,107,105,108],
[110,105,112,108,0,107,115,114,110,125],
[106,104,119,107,104,0,108,109,106,118],
[110,100,105,100,96,103,0,103,114,107],
[104,103,110,104,97,102,108,0,102,108],
[113,103,100,106,101,105,97,109,0,119],
[101,86,100,103,86,93,104,103,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,105,93,107,123,101,83,107,129],
[140,0,104,123,102,120,112,104,101,111],
[106,107,0,110,121,123,103,84,103,108],
[118,88,101,0,106,116,85,77,109,110],
[104,109,90,105,0,108,103,88,97,104],
[88,91,88,95,103,0,96,69,98,99],
[110,99,108,126,108,115,0,81,99,122],
[128,107,127,134,123,142,130,0,94,119],
[104,110,108,102,114,113,112,117,0,108],
[82,100,103,101,107,112,89,92,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,108,84,105,117,108,101,95,98],
[96,0,99,84,90,118,101,100,95,95],
[103,112,0,106,117,119,96,104,98,102],
[127,127,105,0,118,132,112,118,101,104],
[106,121,94,93,0,122,101,102,95,86],
[94,93,92,79,89,0,92,81,77,83],
[103,110,115,99,110,119,0,116,110,101],
[110,111,107,93,109,130,95,0,99,99],
[116,116,113,110,116,134,101,112,0,108],
[113,116,109,107,125,128,110,112,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,116,111,105,105,110,100,106,109],
[118,0,104,120,107,109,111,105,121,110],
[95,107,0,95,92,110,95,94,106,102],
[100,91,116,0,103,90,123,98,112,114],
[106,104,119,108,0,98,126,100,111,115],
[106,102,101,121,113,0,126,116,114,110],
[101,100,116,88,85,85,0,99,109,103],
[111,106,117,113,111,95,112,0,114,119],
[105,90,105,99,100,97,102,97,0,97],
[102,101,109,97,96,101,108,92,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,91,103,97,90,118,102,81,108],
[105,0,98,102,97,105,102,84,91,117],
[120,113,0,124,114,107,110,101,114,131],
[108,109,87,0,92,103,106,101,90,111],
[114,114,97,119,0,115,108,112,111,126],
[121,106,104,108,96,0,108,98,102,112],
[93,109,101,105,103,103,0,103,87,111],
[109,127,110,110,99,113,108,0,82,127],
[130,120,97,121,100,109,124,129,0,140],
[103,94,80,100,85,99,100,84,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,118,118,113,116,124,130,120,120],
[111,0,112,96,117,112,117,107,115,111],
[93,99,0,116,115,115,112,106,114,105],
[93,115,95,0,110,100,117,110,117,107],
[98,94,96,101,0,101,107,103,98,101],
[95,99,96,111,110,0,106,113,123,106],
[87,94,99,94,104,105,0,98,107,109],
[81,104,105,101,108,98,113,0,107,112],
[91,96,97,94,113,88,104,104,0,108],
[91,100,106,104,110,105,102,99,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,120,101,41,98,87,148,110,122],
[116,0,127,94,102,116,80,127,103,135],
[91,84,0,85,116,121,56,102,97,138],
[110,117,126,0,91,149,118,121,121,165],
[170,109,95,120,0,135,95,141,110,141],
[113,95,90,62,76,0,67,139,124,96],
[124,131,155,93,116,144,0,156,122,156],
[63,84,109,90,70,72,55,0,89,121],
[101,108,114,90,101,87,89,122,0,106],
[89,76,73,46,70,115,55,90,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,107,115,106,106,98,118,127,96],
[101,0,96,106,105,110,101,125,118,101],
[104,115,0,112,116,115,104,116,122,108],
[96,105,99,0,114,101,97,114,107,102],
[105,106,95,97,0,94,106,120,118,90],
[105,101,96,110,117,0,108,117,122,99],
[113,110,107,114,105,103,0,123,127,106],
[93,86,95,97,91,94,88,0,107,89],
[84,93,89,104,93,89,84,104,0,95],
[115,110,103,109,121,112,105,122,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,96,74,103,92,97,103,106,94],
[142,0,131,106,118,126,125,105,122,121],
[115,80,0,96,95,113,100,98,109,109],
[137,105,115,0,119,123,120,129,112,121],
[108,93,116,92,0,94,100,99,107,100],
[119,85,98,88,117,0,108,100,97,100],
[114,86,111,91,111,103,0,102,98,102],
[108,106,113,82,112,111,109,0,111,114],
[105,89,102,99,104,114,113,100,0,102],
[117,90,102,90,111,111,109,97,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,116,109,108,118,97,109,111,118],
[114,0,109,99,88,104,106,102,99,113],
[95,102,0,87,106,108,85,90,95,96],
[102,112,124,0,96,119,99,102,98,110],
[103,123,105,115,0,124,95,106,111,116],
[93,107,103,92,87,0,75,94,80,101],
[114,105,126,112,116,136,0,109,109,118],
[102,109,121,109,105,117,102,0,109,112],
[100,112,116,113,100,131,102,102,0,115],
[93,98,115,101,95,110,93,99,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,130,154,114,187,143,127,154,132],
[114,0,158,141,126,172,119,104,202,138],
[81,53,0,108,87,114,101,105,128,129],
[57,70,103,0,104,162,94,84,129,90],
[97,85,124,107,0,166,115,141,144,126],
[24,39,97,49,45,0,48,87,121,59],
[68,92,110,117,96,163,0,96,163,63],
[84,107,106,127,70,124,115,0,153,82],
[57,9,83,82,67,90,48,58,0,41],
[79,73,82,121,85,152,148,129,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,110,118,104,104,109,112,116,127],
[107,0,105,96,102,100,103,99,99,113],
[101,106,0,95,102,88,111,93,101,107],
[93,115,116,0,110,106,106,88,89,105],
[107,109,109,101,0,103,113,94,98,115],
[107,111,123,105,108,0,111,96,107,118],
[102,108,100,105,98,100,0,93,105,111],
[99,112,118,123,117,115,118,0,103,137],
[95,112,110,122,113,104,106,108,0,127],
[84,98,104,106,96,93,100,74,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,117,115,112,127,105,88,124,128],
[83,0,89,105,100,108,104,83,91,101],
[94,122,0,117,104,103,88,77,125,82],
[96,106,94,0,106,119,99,80,111,124],
[99,111,107,105,0,116,127,112,111,118],
[84,103,108,92,95,0,111,86,111,108],
[106,107,123,112,84,100,0,94,122,94],
[123,128,134,131,99,125,117,0,123,137],
[87,120,86,100,100,100,89,88,0,110],
[83,110,129,87,93,103,117,74,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,104,112,118,106,111,134,108,87],
[120,0,118,112,122,117,133,135,129,95],
[107,93,0,107,125,109,118,128,115,94],
[99,99,104,0,120,101,121,138,98,91],
[93,89,86,91,0,99,110,108,86,83],
[105,94,102,110,112,0,126,127,95,98],
[100,78,93,90,101,85,0,124,90,78],
[77,76,83,73,103,84,87,0,95,75],
[103,82,96,113,125,116,121,116,0,112],
[124,116,117,120,128,113,133,136,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,109,119,103,103,107,109,98,105],
[113,0,111,130,102,108,110,113,102,109],
[102,100,0,114,115,100,100,96,107,100],
[92,81,97,0,91,80,91,94,77,85],
[108,109,96,120,0,89,99,89,95,100],
[108,103,111,131,122,0,100,92,106,94],
[104,101,111,120,112,111,0,101,96,113],
[102,98,115,117,122,119,110,0,109,114],
[113,109,104,134,116,105,115,102,0,113],
[106,102,111,126,111,117,98,97,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,132,120,119,86,115,113,115,73],
[90,0,99,75,77,71,28,78,65,34],
[79,112,0,73,101,89,48,101,109,87],
[91,136,138,0,93,68,85,126,140,83],
[92,134,110,118,0,89,115,93,82,59],
[125,140,122,143,122,0,105,126,150,80],
[96,183,163,126,96,106,0,97,98,129],
[98,133,110,85,118,85,114,0,130,106],
[96,146,102,71,129,61,113,81,0,92],
[138,177,124,128,152,131,82,105,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,72,70,114,111,78,88,90,121],
[122,0,106,119,127,125,130,114,105,122],
[139,105,0,105,94,122,108,114,106,102],
[141,92,106,0,121,150,128,131,115,107],
[97,84,117,90,0,124,129,90,87,102],
[100,86,89,61,87,0,85,89,71,79],
[133,81,103,83,82,126,0,118,82,111],
[123,97,97,80,121,122,93,0,92,128],
[121,106,105,96,124,140,129,119,0,138],
[90,89,109,104,109,132,100,83,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,115,127,122,117,117,101,127,125],
[95,0,101,111,120,116,109,106,117,110],
[96,110,0,104,121,121,110,110,107,111],
[84,100,107,0,109,110,113,107,107,107],
[89,91,90,102,0,118,93,92,104,99],
[94,95,90,101,93,0,91,83,104,95],
[94,102,101,98,118,120,0,103,116,112],
[110,105,101,104,119,128,108,0,117,108],
[84,94,104,104,107,107,95,94,0,107],
[86,101,100,104,112,116,99,103,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,129,120,106,110,135,111,157,103],
[103,0,126,129,115,128,131,127,125,106],
[82,85,0,116,80,83,119,81,94,103],
[91,82,95,0,90,102,111,86,122,97],
[105,96,131,121,0,115,123,104,116,104],
[101,83,128,109,96,0,112,113,110,118],
[76,80,92,100,88,99,0,75,101,79],
[100,84,130,125,107,98,136,0,128,106],
[54,86,117,89,95,101,110,83,0,90],
[108,105,108,114,107,93,132,105,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,118,89,99,99,96,114,105,111],
[100,0,109,100,111,110,105,115,97,117],
[93,102,0,111,114,104,101,110,102,118],
[122,111,100,0,107,112,111,120,111,120],
[112,100,97,104,0,108,100,106,100,99],
[112,101,107,99,103,0,96,105,103,105],
[115,106,110,100,111,115,0,118,99,102],
[97,96,101,91,105,106,93,0,96,110],
[106,114,109,100,111,108,112,115,0,115],
[100,94,93,91,112,106,109,101,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,122,113,116,102,113,116,122,105],
[101,0,97,105,95,94,90,108,111,107],
[89,114,0,94,107,106,97,114,122,99],
[98,106,117,0,110,105,114,122,119,109],
[95,116,104,101,0,101,106,114,120,100],
[109,117,105,106,110,0,111,120,121,114],
[98,121,114,97,105,100,0,119,122,103],
[95,103,97,89,97,91,92,0,108,88],
[89,100,89,92,91,90,89,103,0,86],
[106,104,112,102,111,97,108,123,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,105,117,122,91,102,123,108,91],
[100,0,98,94,88,102,111,132,105,88],
[106,113,0,110,107,102,109,128,98,94],
[94,117,101,0,111,107,102,124,113,104],
[89,123,104,100,0,108,101,114,116,106],
[120,109,109,104,103,0,107,124,116,90],
[109,100,102,109,110,104,0,124,111,94],
[88,79,83,87,97,87,87,0,85,70],
[103,106,113,98,95,95,100,126,0,87],
[120,123,117,107,105,121,117,141,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,96,102,103,100,105,99,93,106],
[100,0,99,81,102,97,107,100,86,101],
[115,112,0,110,107,109,110,116,105,115],
[109,130,101,0,99,100,105,106,104,114],
[108,109,104,112,0,106,103,105,103,110],
[111,114,102,111,105,0,110,106,108,113],
[106,104,101,106,108,101,0,100,96,116],
[112,111,95,105,106,105,111,0,100,102],
[118,125,106,107,108,103,115,111,0,113],
[105,110,96,97,101,98,95,109,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,89,99,74,73,106,78,141,78],
[119,0,111,106,102,92,117,78,112,95],
[122,100,0,121,108,100,131,83,123,82],
[112,105,90,0,69,89,115,84,122,95],
[137,109,103,142,0,83,139,111,150,94],
[138,119,111,122,128,0,123,91,126,130],
[105,94,80,96,72,88,0,88,132,107],
[133,133,128,127,100,120,123,0,134,116],
[70,99,88,89,61,85,79,77,0,76],
[133,116,129,116,117,81,104,95,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,118,106,106,109,102,104,106,112],
[98,0,105,105,102,102,101,101,105,101],
[93,106,0,100,109,102,97,98,108,97],
[105,106,111,0,101,98,107,97,99,97],
[105,109,102,110,0,111,99,102,102,108],
[102,109,109,113,100,0,110,110,105,116],
[109,110,114,104,112,101,0,101,102,110],
[107,110,113,114,109,101,110,0,100,115],
[105,106,103,112,109,106,109,111,0,114],
[99,110,114,114,103,95,101,96,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,112,102,109,101,115,114,109],
[99,0,108,107,101,101,100,99,104,101],
[103,103,0,101,97,102,99,108,99,99],
[99,104,110,0,103,99,95,106,105,102],
[109,110,114,108,0,109,94,99,105,109],
[102,110,109,112,102,0,101,111,117,108],
[110,111,112,116,117,110,0,112,104,111],
[96,112,103,105,112,100,99,0,103,98],
[97,107,112,106,106,94,107,108,0,106],
[102,110,112,109,102,103,100,113,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,107,110,143,106,95,85,93,104],
[83,0,105,105,114,66,119,83,86,119],
[104,106,0,121,105,70,90,97,94,84],
[101,106,90,0,114,92,99,104,101,95],
[68,97,106,97,0,77,97,84,89,97],
[105,145,141,119,134,0,140,111,117,103],
[116,92,121,112,114,71,0,72,117,83],
[126,128,114,107,127,100,139,0,123,96],
[118,125,117,110,122,94,94,88,0,99],
[107,92,127,116,114,108,128,115,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,115,106,82,108,101,118,75,108],
[132,0,131,116,110,111,101,114,97,115],
[96,80,0,80,85,87,75,106,82,90],
[105,95,131,0,101,102,93,119,96,108],
[129,101,126,110,0,121,110,121,95,109],
[103,100,124,109,90,0,98,107,103,101],
[110,110,136,118,101,113,0,121,107,115],
[93,97,105,92,90,104,90,0,88,90],
[136,114,129,115,116,108,104,123,0,121],
[103,96,121,103,102,110,96,121,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,90,110,97,88,85,85,92,97],
[117,0,107,98,111,97,90,104,99,109],
[121,104,0,93,110,86,93,102,101,109],
[101,113,118,0,103,113,110,110,113,108],
[114,100,101,108,0,97,108,108,101,111],
[123,114,125,98,114,0,103,120,98,110],
[126,121,118,101,103,108,0,103,80,127],
[126,107,109,101,103,91,108,0,97,116],
[119,112,110,98,110,113,131,114,0,114],
[114,102,102,103,100,101,84,95,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,113,116,114,99,107,87,111,121],
[97,0,104,112,117,109,110,106,116,116],
[98,107,0,115,123,102,102,110,112,115],
[95,99,96,0,103,98,104,104,113,107],
[97,94,88,108,0,101,87,99,100,105],
[112,102,109,113,110,0,100,116,111,109],
[104,101,109,107,124,111,0,108,119,115],
[124,105,101,107,112,95,103,0,120,119],
[100,95,99,98,111,100,92,91,0,103],
[90,95,96,104,106,102,96,92,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,113,112,113,117,112,106,103,110],
[101,0,99,100,119,99,102,110,101,112],
[98,112,0,109,113,114,96,114,104,113],
[99,111,102,0,105,104,100,102,97,109],
[98,92,98,106,0,101,101,106,99,96],
[94,112,97,107,110,0,96,97,107,101],
[99,109,115,111,110,115,0,108,106,109],
[105,101,97,109,105,114,103,0,108,110],
[108,110,107,114,112,104,105,103,0,106],
[101,99,98,102,115,110,102,101,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,111,83,50,61,128,50,83,111],
[161,0,156,173,111,61,166,161,111,128],
[100,55,0,138,50,88,183,105,138,166],
[128,38,73,0,78,61,166,116,116,166],
[161,100,161,133,0,161,183,150,211,211],
[150,150,123,150,50,0,183,150,150,166],
[83,45,28,45,28,28,0,133,95,128],
[161,50,106,95,61,61,78,0,61,128],
[128,100,73,95,0,61,116,150,0,128],
[100,83,45,45,0,45,83,83,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,123,125,102,119,106,107,113,119],
[94,0,101,110,91,98,95,109,94,110],
[88,110,0,94,91,110,95,95,105,106],
[86,101,117,0,96,109,96,107,94,103],
[109,120,120,115,0,112,104,118,113,115],
[92,113,101,102,99,0,89,106,97,122],
[105,116,116,115,107,122,0,99,104,117],
[104,102,116,104,93,105,112,0,109,113],
[98,117,106,117,98,114,107,102,0,113],
[92,101,105,108,96,89,94,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,103,92,90,98,100,111,112],
[97,0,93,105,80,103,95,99,102,97],
[99,118,0,100,90,90,88,91,105,89],
[108,106,111,0,92,102,96,103,108,108],
[119,131,121,119,0,114,101,117,132,115],
[121,108,121,109,97,0,107,106,117,116],
[113,116,123,115,110,104,0,121,126,117],
[111,112,120,108,94,105,90,0,111,103],
[100,109,106,103,79,94,85,100,0,103],
[99,114,122,103,96,95,94,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,91,86,86,74,99,93,96,81],
[113,0,101,106,102,115,115,92,83,75],
[120,110,0,97,84,105,77,87,98,67],
[125,105,114,0,103,94,113,94,105,105],
[125,109,127,108,0,114,114,98,107,99],
[137,96,106,117,97,0,100,101,92,97],
[112,96,134,98,97,111,0,93,98,111],
[118,119,124,117,113,110,118,0,103,85],
[115,128,113,106,104,119,113,108,0,93],
[130,136,144,106,112,114,100,126,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,112,104,98,116,133,103,104,97],
[122,0,141,111,127,117,146,130,136,102],
[99,70,0,80,105,119,114,106,114,115],
[107,100,131,0,120,136,138,127,117,100],
[113,84,106,91,0,120,139,106,123,107],
[95,94,92,75,91,0,101,102,101,71],
[78,65,97,73,72,110,0,77,60,87],
[108,81,105,84,105,109,134,0,97,94],
[107,75,97,94,88,110,151,114,0,97],
[114,109,96,111,104,140,124,117,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,119,111,111,119,121,110,118,113],
[111,0,123,106,110,109,121,104,117,115],
[92,88,0,96,102,106,97,99,100,98],
[100,105,115,0,105,116,120,108,105,114],
[100,101,109,106,0,115,119,103,112,115],
[92,102,105,95,96,0,116,104,108,112],
[90,90,114,91,92,95,0,92,104,101],
[101,107,112,103,108,107,119,0,114,112],
[93,94,111,106,99,103,107,97,0,98],
[98,96,113,97,96,99,110,99,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,118,107,109,115,91,91,109,118],
[91,0,96,90,90,95,74,96,89,103],
[93,115,0,83,96,87,88,97,87,111],
[104,121,128,0,96,109,103,109,117,118],
[102,121,115,115,0,113,107,98,90,119],
[96,116,124,102,98,0,89,111,107,113],
[120,137,123,108,104,122,0,118,123,119],
[120,115,114,102,113,100,93,0,112,113],
[102,122,124,94,121,104,88,99,0,117],
[93,108,100,93,92,98,92,98,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,120,134,102,114,112,97,99,102],
[125,0,133,126,117,115,119,110,92,113],
[91,78,0,100,82,79,94,86,63,95],
[77,85,111,0,97,96,111,89,79,98],
[109,94,129,114,0,117,117,105,96,111],
[97,96,132,115,94,0,116,97,85,114],
[99,92,117,100,94,95,0,103,92,92],
[114,101,125,122,106,114,108,0,109,106],
[112,119,148,132,115,126,119,102,0,118],
[109,98,116,113,100,97,119,105,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,110,94,87,98,90,91,104,109],
[126,0,120,99,100,92,113,117,113,118],
[101,91,0,85,95,72,85,108,100,93],
[117,112,126,0,100,104,101,116,111,105],
[124,111,116,111,0,98,106,134,112,111],
[113,119,139,107,113,0,104,129,128,121],
[121,98,126,110,105,107,0,114,112,121],
[120,94,103,95,77,82,97,0,99,96],
[107,98,111,100,99,83,99,112,0,99],
[102,93,118,106,100,90,90,115,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,109,104,102,107,89,105,104],
[106,0,110,114,109,108,104,101,99,118],
[105,101,0,96,107,112,105,92,108,118],
[102,97,115,0,102,103,109,94,106,121],
[107,102,104,109,0,104,107,96,98,117],
[109,103,99,108,107,0,109,107,104,110],
[104,107,106,102,104,102,0,90,99,113],
[122,110,119,117,115,104,121,0,114,122],
[106,112,103,105,113,107,112,97,0,127],
[107,93,93,90,94,101,98,89,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,114,118,98,107,90,94,120,119],
[92,0,98,89,101,116,85,71,108,107],
[97,113,0,105,100,117,97,99,110,103],
[93,122,106,0,107,135,102,76,120,104],
[113,110,111,104,0,99,89,102,111,100],
[104,95,94,76,112,0,63,70,88,66],
[121,126,114,109,122,148,0,102,122,130],
[117,140,112,135,109,141,109,0,99,102],
[91,103,101,91,100,123,89,112,0,92],
[92,104,108,107,111,145,81,109,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,99,106,103,98,95,95,103,111],
[117,0,94,109,104,104,108,107,107,110],
[112,117,0,120,102,103,113,112,118,113],
[105,102,91,0,89,95,96,86,112,97],
[108,107,109,122,0,102,105,106,103,105],
[113,107,108,116,109,0,97,108,119,109],
[116,103,98,115,106,114,0,111,112,103],
[116,104,99,125,105,103,100,0,118,114],
[108,104,93,99,108,92,99,93,0,102],
[100,101,98,114,106,102,108,97,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,108,113,115,84,103,102,127,112],
[117,0,110,117,132,115,111,112,125,96],
[103,101,0,121,132,103,111,109,109,117],
[98,94,90,0,99,93,103,85,112,115],
[96,79,79,112,0,95,87,87,104,104],
[127,96,108,118,116,0,125,120,134,124],
[108,100,100,108,124,86,0,107,120,108],
[109,99,102,126,124,91,104,0,123,128],
[84,86,102,99,107,77,91,88,0,102],
[99,115,94,96,107,87,103,83,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,107,98,103,104,99,106,106,105],
[109,0,107,113,103,99,107,111,113,103],
[104,104,0,108,95,98,95,102,100,104],
[113,98,103,0,103,96,107,100,102,97],
[108,108,116,108,0,105,104,119,114,111],
[107,112,113,115,106,0,102,121,105,108],
[112,104,116,104,107,109,0,111,105,109],
[105,100,109,111,92,90,100,0,101,97],
[105,98,111,109,97,106,106,110,0,101],
[106,108,107,114,100,103,102,114,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,107,103,106,110,104,98,99,106],
[128,0,110,104,119,130,107,115,104,116],
[104,101,0,109,103,106,94,98,104,109],
[108,107,102,0,104,113,105,112,112,102],
[105,92,108,107,0,113,91,105,91,100],
[101,81,105,98,98,0,107,100,100,101],
[107,104,117,106,120,104,0,103,101,114],
[113,96,113,99,106,111,108,0,96,114],
[112,107,107,99,120,111,110,115,0,116],
[105,95,102,109,111,110,97,97,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,102,106,119,96,98,116,121,120],
[98,0,102,116,125,104,91,110,131,121],
[109,109,0,116,122,124,102,123,120,115],
[105,95,95,0,109,89,87,91,108,93],
[92,86,89,102,0,99,89,101,108,111],
[115,107,87,122,112,0,112,116,128,112],
[113,120,109,124,122,99,0,116,137,139],
[95,101,88,120,110,95,95,0,131,107],
[90,80,91,103,103,83,74,80,0,87],
[91,90,96,118,100,99,72,104,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,112,100,110,115,123,115,107,104],
[102,0,107,106,112,104,119,118,115,108],
[99,104,0,97,100,116,116,102,105,106],
[111,105,114,0,117,111,130,121,129,117],
[101,99,111,94,0,105,109,106,113,103],
[96,107,95,100,106,0,105,104,119,104],
[88,92,95,81,102,106,0,91,99,82],
[96,93,109,90,105,107,120,0,111,104],
[104,96,106,82,98,92,112,100,0,96],
[107,103,105,94,108,107,129,107,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,163,137,116,130,89,133,147,158],
[120,0,168,140,140,88,117,134,106,140],
[48,43,0,40,75,40,69,113,85,40],
[74,71,171,0,96,110,59,142,155,167],
[95,71,136,115,0,109,71,112,126,154],
[81,123,171,101,102,0,130,121,85,148],
[122,94,142,152,140,81,0,83,125,152],
[78,77,98,69,99,90,128,0,129,108],
[64,105,126,56,85,126,86,82,0,106],
[53,71,171,44,57,63,59,103,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,107,107,101,102,105,93,95,126],
[90,0,93,96,89,79,82,88,78,113],
[104,118,0,113,110,101,110,95,93,123],
[104,115,98,0,103,87,97,76,93,94],
[110,122,101,108,0,91,89,108,104,125],
[109,132,110,124,120,0,110,103,113,136],
[106,129,101,114,122,101,0,102,110,125],
[118,123,116,135,103,108,109,0,112,126],
[116,133,118,118,107,98,101,99,0,118],
[85,98,88,117,86,75,86,85,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,116,107,94,93,122,100,111,81],
[101,0,117,92,98,95,109,101,113,88],
[95,94,0,93,101,119,114,94,122,86],
[104,119,118,0,108,100,112,101,114,107],
[117,113,110,103,0,103,104,112,109,101],
[118,116,92,111,108,0,111,104,117,97],
[89,102,97,99,107,100,0,87,104,94],
[111,110,117,110,99,107,124,0,123,105],
[100,98,89,97,102,94,107,88,0,76],
[130,123,125,104,110,114,117,106,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,108,136,113,130,97,107,142,114],
[79,0,89,130,92,112,90,84,116,88],
[103,122,0,130,123,120,107,118,129,104],
[75,81,81,0,74,80,85,83,94,76],
[98,119,88,137,0,102,113,106,127,109],
[81,99,91,131,109,0,111,89,115,81],
[114,121,104,126,98,100,0,100,113,107],
[104,127,93,128,105,122,111,0,132,93],
[69,95,82,117,84,96,98,79,0,93],
[97,123,107,135,102,130,104,118,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,111,121,75,100,91,13,63,120],
[178,0,158,142,157,119,145,81,130,162],
[100,53,0,68,102,84,104,66,102,88],
[90,69,143,0,137,77,115,62,123,97],
[136,54,109,74,0,84,75,51,83,96],
[111,92,127,134,127,0,132,111,115,173],
[120,66,107,96,136,79,0,89,130,120],
[198,130,145,149,160,100,122,0,153,205],
[148,81,109,88,128,96,81,58,0,123],
[91,49,123,114,115,38,91,6,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,118,114,122,110,108,150,152,141],
[107,0,92,99,99,90,109,121,122,129],
[93,119,0,101,124,114,115,106,137,136],
[97,112,110,0,101,98,117,96,125,128],
[89,112,87,110,0,105,106,136,149,126],
[101,121,97,113,106,0,130,127,136,119],
[103,102,96,94,105,81,0,101,115,102],
[61,90,105,115,75,84,110,0,107,115],
[59,89,74,86,62,75,96,104,0,105],
[70,82,75,83,85,92,109,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,97,79,96,96,103,99,97,102],
[100,0,95,86,111,87,86,91,98,91],
[114,116,0,101,119,87,116,109,116,114],
[132,125,110,0,102,109,109,112,100,108],
[115,100,92,109,0,91,96,93,115,105],
[115,124,124,102,120,0,114,111,109,122],
[108,125,95,102,115,97,0,105,104,98],
[112,120,102,99,118,100,106,0,99,112],
[114,113,95,111,96,102,107,112,0,92],
[109,120,97,103,106,89,113,99,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,127,113,112,123,101,110,128,120],
[94,0,94,100,107,109,104,84,95,114],
[84,117,0,100,93,104,82,103,93,131],
[98,111,111,0,113,101,99,99,102,103],
[99,104,118,98,0,116,117,97,95,122],
[88,102,107,110,95,0,98,101,110,122],
[110,107,129,112,94,113,0,92,108,135],
[101,127,108,112,114,110,119,0,95,119],
[83,116,118,109,116,101,103,116,0,125],
[91,97,80,108,89,89,76,92,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,61,109,103,90,151,85,73,104],
[111,0,88,115,128,98,120,117,106,122],
[150,123,0,113,134,118,145,121,97,117],
[102,96,98,0,112,93,133,114,86,110],
[108,83,77,99,0,127,146,86,89,117],
[121,113,93,118,84,0,138,118,88,112],
[60,91,66,78,65,73,0,82,75,77],
[126,94,90,97,125,93,129,0,100,109],
[138,105,114,125,122,123,136,111,0,126],
[107,89,94,101,94,99,134,102,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,103,111,97,89,101,102,85,90],
[122,0,118,135,113,123,132,138,128,105],
[108,93,0,118,92,93,105,109,95,104],
[100,76,93,0,89,82,92,106,77,80],
[114,98,119,122,0,108,102,125,118,102],
[122,88,118,129,103,0,96,106,108,107],
[110,79,106,119,109,115,0,109,102,84],
[109,73,102,105,86,105,102,0,89,88],
[126,83,116,134,93,103,109,122,0,103],
[121,106,107,131,109,104,127,123,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,115,95,103,125,112,77,75,100],
[130,0,113,113,104,122,88,81,100,92],
[96,98,0,84,87,111,88,87,76,76],
[116,98,127,0,103,122,97,122,90,109],
[108,107,124,108,0,124,94,104,97,97],
[86,89,100,89,87,0,61,94,101,88],
[99,123,123,114,117,150,0,104,97,113],
[134,130,124,89,107,117,107,0,86,91],
[136,111,135,121,114,110,114,125,0,93],
[111,119,135,102,114,123,98,120,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,127,60,92,84,118,113,125,91],
[58,0,100,85,61,55,58,26,81,48],
[84,111,0,111,87,81,84,52,81,61],
[151,126,100,0,127,99,151,119,159,104],
[119,150,124,84,0,86,83,88,173,88],
[127,156,130,112,125,0,149,97,181,42],
[93,153,127,60,128,62,0,89,156,16],
[98,185,159,92,123,114,122,0,178,127],
[86,130,130,52,38,30,55,33,0,46],
[120,163,150,107,123,169,195,84,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,67,105,78,106,122,79,57,84],
[157,0,118,109,97,98,152,122,100,101],
[144,93,0,99,86,100,136,126,100,139],
[106,102,112,0,121,136,143,109,102,100],
[133,114,125,90,0,113,137,116,128,134],
[105,113,111,75,98,0,114,124,122,86],
[89,59,75,68,74,97,0,73,85,110],
[132,89,85,102,95,87,138,0,84,129],
[154,111,111,109,83,89,126,127,0,124],
[127,110,72,111,77,125,101,82,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,90,103,97,96,102,100,100,97],
[109,0,105,104,105,104,112,109,95,119],
[121,106,0,102,113,109,119,96,114,108],
[108,107,109,0,105,102,111,100,99,113],
[114,106,98,106,0,100,116,108,108,114],
[115,107,102,109,111,0,114,106,104,117],
[109,99,92,100,95,97,0,98,96,93],
[111,102,115,111,103,105,113,0,104,108],
[111,116,97,112,103,107,115,107,0,123],
[114,92,103,98,97,94,118,103,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,120,112,102,104,107,110,112,110],
[88,0,106,107,95,91,100,95,100,92],
[91,105,0,108,88,93,94,95,103,102],
[99,104,103,0,97,94,100,96,112,107],
[109,116,123,114,0,104,110,103,117,109],
[107,120,118,117,107,0,99,100,110,110],
[104,111,117,111,101,112,0,111,111,112],
[101,116,116,115,108,111,100,0,111,114],
[99,111,108,99,94,101,100,100,0,105],
[101,119,109,104,102,101,99,97,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,116,114,114,109,109,108,114],
[105,0,101,108,110,105,104,103,99,109],
[106,110,0,108,111,108,100,113,115,105],
[95,103,103,0,112,109,101,104,106,108],
[97,101,100,99,0,104,102,105,110,110],
[97,106,103,102,107,0,99,108,112,99],
[102,107,111,110,109,112,0,108,109,121],
[102,108,98,107,106,103,103,0,110,107],
[103,112,96,105,101,99,102,101,0,110],
[97,102,106,103,101,112,90,104,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,100,106,108,109,108,103,116,108],
[104,0,115,96,103,106,110,105,102,110],
[111,96,0,105,106,102,108,91,105,112],
[105,115,106,0,99,104,99,107,113,105],
[103,108,105,112,0,111,106,99,109,106],
[102,105,109,107,100,0,106,98,113,101],
[103,101,103,112,105,105,0,111,113,108],
[108,106,120,104,112,113,100,0,114,118],
[95,109,106,98,102,98,98,97,0,99],
[103,101,99,106,105,110,103,93,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,107,101,98,93,108,93,113,89],
[101,0,98,95,98,88,93,92,107,101],
[104,113,0,95,101,95,99,93,106,99],
[110,116,116,0,109,99,109,112,116,100],
[113,113,110,102,0,110,105,112,113,98],
[118,123,116,112,101,0,107,105,116,103],
[103,118,112,102,106,104,0,102,107,108],
[118,119,118,99,99,106,109,0,107,99],
[98,104,105,95,98,95,104,104,0,100],
[122,110,112,111,113,108,103,112,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,89,88,91,99,80,93,99,106],
[100,0,98,109,98,114,105,93,107,103],
[122,113,0,109,97,108,111,109,109,111],
[123,102,102,0,93,98,98,96,113,102],
[120,113,114,118,0,137,99,98,108,105],
[112,97,103,113,74,0,104,97,99,104],
[131,106,100,113,112,107,0,97,101,101],
[118,118,102,115,113,114,114,0,114,120],
[112,104,102,98,103,112,110,97,0,106],
[105,108,100,109,106,107,110,91,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,117,114,106,109,108,103,112,99],
[106,0,112,105,106,103,107,109,108,101],
[94,99,0,101,99,95,102,98,98,91],
[97,106,110,0,99,107,112,93,106,97],
[105,105,112,112,0,111,115,109,107,108],
[102,108,116,104,100,0,113,104,110,106],
[103,104,109,99,96,98,0,102,112,97],
[108,102,113,118,102,107,109,0,116,105],
[99,103,113,105,104,101,99,95,0,97],
[112,110,120,114,103,105,114,106,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,110,114,106,105,116,112,105,112],
[102,0,99,109,106,109,119,109,107,111],
[101,112,0,101,110,110,119,109,116,119],
[97,102,110,0,104,94,109,91,98,105],
[105,105,101,107,0,104,110,104,111,109],
[106,102,101,117,107,0,117,101,111,106],
[95,92,92,102,101,94,0,108,96,112],
[99,102,102,120,107,110,103,0,101,106],
[106,104,95,113,100,100,115,110,0,126],
[99,100,92,106,102,105,99,105,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,100,110,101,110,95,105,112,105],
[117,0,112,110,102,108,102,114,115,124],
[111,99,0,104,104,115,111,112,109,125],
[101,101,107,0,112,108,97,112,117,119],
[110,109,107,99,0,101,102,103,134,117],
[101,103,96,103,110,0,99,114,121,122],
[116,109,100,114,109,112,0,107,130,119],
[106,97,99,99,108,97,104,0,116,116],
[99,96,102,94,77,90,81,95,0,105],
[106,87,86,92,94,89,92,95,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,131,139,136,136,134,138,132,99],
[96,0,115,128,72,104,89,91,128,80],
[80,96,0,87,84,108,87,92,117,105],
[72,83,124,0,94,131,120,112,110,69],
[75,139,127,117,0,83,97,83,116,76],
[75,107,103,80,128,0,92,130,141,100],
[77,122,124,91,114,119,0,86,118,83],
[73,120,119,99,128,81,125,0,148,116],
[79,83,94,101,95,70,93,63,0,96],
[112,131,106,142,135,111,128,95,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,108,87,112,119,110,124,116,116],
[82,0,103,101,102,108,92,137,100,82],
[103,108,0,129,109,116,119,138,118,119],
[124,110,82,0,100,106,114,143,122,89],
[99,109,102,111,0,117,97,121,115,95],
[92,103,95,105,94,0,105,120,122,117],
[101,119,92,97,114,106,0,148,122,124],
[87,74,73,68,90,91,63,0,91,92],
[95,111,93,89,96,89,89,120,0,103],
[95,129,92,122,116,94,87,119,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,78,93,95,113,104,93,76,97],
[122,0,91,118,106,131,121,104,125,124],
[133,120,0,129,111,128,106,95,114,126],
[118,93,82,0,99,111,120,81,76,116],
[116,105,100,112,0,102,110,93,105,102],
[98,80,83,100,109,0,121,97,102,87],
[107,90,105,91,101,90,0,90,84,95],
[118,107,116,130,118,114,121,0,106,104],
[135,86,97,135,106,109,127,105,0,133],
[114,87,85,95,109,124,116,107,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,107,110,115,107,106,106,104,106],
[99,0,98,97,101,107,102,98,92,96],
[104,113,0,106,106,106,103,95,98,112],
[101,114,105,0,106,112,102,111,103,103],
[96,110,105,105,0,108,104,108,98,101],
[104,104,105,99,103,0,100,103,100,106],
[105,109,108,109,107,111,0,110,110,112],
[105,113,116,100,103,108,101,0,109,106],
[107,119,113,108,113,111,101,102,0,100],
[105,115,99,108,110,105,99,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,119,101,110,120,118,109,113],
[99,0,98,112,103,103,104,102,100,110],
[101,113,0,106,105,118,110,114,107,117],
[92,99,105,0,97,114,107,118,99,110],
[110,108,106,114,0,121,105,114,109,106],
[101,108,93,97,90,0,111,115,113,105],
[91,107,101,104,106,100,0,112,93,108],
[93,109,97,93,97,96,99,0,98,101],
[102,111,104,112,102,98,118,113,0,106],
[98,101,94,101,105,106,103,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,87,78,82,89,110,111,112,100],
[99,0,114,93,109,85,133,99,109,106],
[124,97,0,102,119,100,121,109,110,101],
[133,118,109,0,108,102,129,126,117,117],
[129,102,92,103,0,102,119,107,114,108],
[122,126,111,109,109,0,127,105,124,112],
[101,78,90,82,92,84,0,82,99,97],
[100,112,102,85,104,106,129,0,115,126],
[99,102,101,94,97,87,112,96,0,105],
[111,105,110,94,103,99,114,85,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,101,98,111,104,95,94,108,95],
[93,0,94,93,110,103,99,97,114,88],
[110,117,0,110,123,108,115,110,105,96],
[113,118,101,0,123,108,104,103,116,106],
[100,101,88,88,0,88,91,90,103,75],
[107,108,103,103,123,0,117,102,111,93],
[116,112,96,107,120,94,0,97,102,100],
[117,114,101,108,121,109,114,0,107,104],
[103,97,106,95,108,100,109,104,0,88],
[116,123,115,105,136,118,111,107,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,105,112,84,79,89,103,79,80],
[124,0,88,133,88,107,123,119,90,102],
[106,123,0,149,119,70,133,141,97,112],
[99,78,62,0,66,55,99,91,77,70],
[127,123,92,145,0,76,130,95,83,81],
[132,104,141,156,135,0,124,144,114,115],
[122,88,78,112,81,87,0,118,86,86],
[108,92,70,120,116,67,93,0,70,87],
[132,121,114,134,128,97,125,141,0,93],
[131,109,99,141,130,96,125,124,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,97,114,107,114,116,110,105],
[105,0,105,112,118,109,105,118,104,101],
[103,106,0,107,102,107,118,109,103,97],
[114,99,104,0,112,100,104,110,101,92],
[97,93,109,99,0,94,117,101,101,108],
[104,102,104,111,117,0,118,113,115,105],
[97,106,93,107,94,93,0,105,94,101],
[95,93,102,101,110,98,106,0,100,94],
[101,107,108,110,110,96,117,111,0,100],
[106,110,114,119,103,106,110,117,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,111,112,99,98,106,87,105,110],
[109,0,120,100,98,84,107,109,94,112],
[100,91,0,102,90,94,95,102,96,105],
[99,111,109,0,109,89,125,108,110,115],
[112,113,121,102,0,106,105,121,118,132],
[113,127,117,122,105,0,133,101,109,107],
[105,104,116,86,106,78,0,99,81,102],
[124,102,109,103,90,110,112,0,96,110],
[106,117,115,101,93,102,130,115,0,117],
[101,99,106,96,79,104,109,101,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,103,121,114,121,126,117,107,117],
[94,0,92,107,101,97,114,100,97,98],
[108,119,0,109,112,117,112,115,101,101],
[90,104,102,0,104,109,110,105,95,104],
[97,110,99,107,0,109,107,104,97,106],
[90,114,94,102,102,0,101,107,103,104],
[85,97,99,101,104,110,0,103,86,95],
[94,111,96,106,107,104,108,0,91,98],
[104,114,110,116,114,108,125,120,0,117],
[94,113,110,107,105,107,116,113,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,118,102,116,121,115,105,121,110],
[103,0,110,105,103,109,95,96,120,106],
[93,101,0,104,113,104,101,110,112,110],
[109,106,107,0,113,117,101,99,118,110],
[95,108,98,98,0,117,91,94,95,100],
[90,102,107,94,94,0,101,92,107,106],
[96,116,110,110,120,110,0,116,128,117],
[106,115,101,112,117,119,95,0,120,114],
[90,91,99,93,116,104,83,91,0,103],
[101,105,101,101,111,105,94,97,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,100,108,120,93,89,81,120,92],
[120,0,108,106,112,109,100,108,110,95],
[111,103,0,98,104,95,96,105,122,89],
[103,105,113,0,112,118,110,99,105,108],
[91,99,107,99,0,81,97,83,97,85],
[118,102,116,93,130,0,101,109,108,116],
[122,111,115,101,114,110,0,102,125,102],
[130,103,106,112,128,102,109,0,104,92],
[91,101,89,106,114,103,86,107,0,107],
[119,116,122,103,126,95,109,119,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,115,88,110,93,97,92,82],
[97,0,104,89,92,102,108,90,97,81],
[99,107,0,94,83,98,105,104,82,99],
[96,122,117,0,91,129,110,118,106,107],
[123,119,128,120,0,135,93,110,101,121],
[101,109,113,82,76,0,98,98,86,113],
[118,103,106,101,118,113,0,104,96,94],
[114,121,107,93,101,113,107,0,90,104],
[119,114,129,105,110,125,115,121,0,115],
[129,130,112,104,90,98,117,107,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,100,75,102,78,79,94,99,89],
[133,0,110,98,126,103,95,107,118,104],
[111,101,0,95,113,97,96,96,111,94],
[136,113,116,0,120,98,118,111,113,119],
[109,85,98,91,0,79,83,89,101,94],
[133,108,114,113,132,0,99,123,109,109],
[132,116,115,93,128,112,0,116,119,115],
[117,104,115,100,122,88,95,0,104,105],
[112,93,100,98,110,102,92,107,0,106],
[122,107,117,92,117,102,96,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,118,105,111,87,97,96,121,91],
[119,0,121,124,131,83,109,116,136,114],
[93,90,0,95,109,83,79,96,113,74],
[106,87,116,0,113,93,78,96,123,102],
[100,80,102,98,0,80,99,104,111,90],
[124,128,128,118,131,0,106,126,151,97],
[114,102,132,133,112,105,0,117,131,102],
[115,95,115,115,107,85,94,0,138,96],
[90,75,98,88,100,60,80,73,0,86],
[120,97,137,109,121,114,109,115,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,108,125,82,112,108,128,107],
[108,0,119,92,113,100,95,102,124,104],
[106,92,0,80,91,92,76,83,120,99],
[103,119,131,0,108,89,82,110,135,106],
[86,98,120,103,0,83,95,98,118,83],
[129,111,119,122,128,0,103,115,134,104],
[99,116,135,129,116,108,0,118,137,101],
[103,109,128,101,113,96,93,0,116,87],
[83,87,91,76,93,77,74,95,0,86],
[104,107,112,105,128,107,110,124,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,121,111,83,73,123,91,81,80],
[104,0,106,137,66,83,99,89,83,79],
[90,105,0,92,77,76,105,89,99,79],
[100,74,119,0,75,76,92,86,92,91],
[128,145,134,136,0,87,136,112,122,74],
[138,128,135,135,124,0,127,98,113,114],
[88,112,106,119,75,84,0,98,101,67],
[120,122,122,125,99,113,113,0,119,108],
[130,128,112,119,89,98,110,92,0,83],
[131,132,132,120,137,97,144,103,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,99,91,87,124,95,112,95,93],
[135,0,62,96,107,117,62,96,100,67],
[112,149,0,146,125,104,106,133,109,147],
[120,115,65,0,89,105,94,113,83,97],
[124,104,86,122,0,102,95,138,94,98],
[87,94,107,106,109,0,64,122,138,114],
[116,149,105,117,116,147,0,121,131,106],
[99,115,78,98,73,89,90,0,85,77],
[116,111,102,128,117,73,80,126,0,114],
[118,144,64,114,113,97,105,134,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,111,108,118,107,111,103,95,105],
[100,0,113,113,99,113,100,112,95,114],
[100,98,0,99,113,107,104,111,100,107],
[103,98,112,0,100,109,93,93,107,104],
[93,112,98,111,0,109,105,100,106,111],
[104,98,104,102,102,0,97,95,103,99],
[100,111,107,118,106,114,0,112,111,122],
[108,99,100,118,111,116,99,0,107,106],
[116,116,111,104,105,108,100,104,0,111],
[106,97,104,107,100,112,89,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,114,90,91,111,121,115,98,106],
[120,0,107,99,123,108,122,94,75,92],
[97,104,0,100,97,102,125,132,90,110],
[121,112,111,0,105,107,118,120,75,81],
[120,88,114,106,0,107,111,110,101,100],
[100,103,109,104,104,0,135,145,90,92],
[90,89,86,93,100,76,0,90,78,97],
[96,117,79,91,101,66,121,0,95,88],
[113,136,121,136,110,121,133,116,0,103],
[105,119,101,130,111,119,114,123,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,0,84,0,109,109,109,51,96],
[153,0,51,108,96,166,133,51,51,120],
[211,160,0,108,78,211,211,166,108,153],
[127,103,103,0,45,127,154,103,45,69],
[211,115,133,166,0,166,166,166,75,120],
[102,45,0,84,45,0,154,51,51,120],
[102,78,0,57,45,57,0,0,0,69],
[102,160,45,108,45,160,211,0,120,69],
[160,160,103,166,136,160,211,91,0,102],
[115,91,58,142,91,91,142,142,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,127,102,104,97,111,124,111,107],
[105,0,115,113,108,101,107,107,110,102],
[84,96,0,93,110,100,101,111,109,96],
[109,98,118,0,114,110,106,116,108,101],
[107,103,101,97,0,94,104,104,98,94],
[114,110,111,101,117,0,104,113,117,98],
[100,104,110,105,107,107,0,113,113,104],
[87,104,100,95,107,98,98,0,96,109],
[100,101,102,103,113,94,98,115,0,94],
[104,109,115,110,117,113,107,102,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,99,121,99,88,113,120,109],
[108,0,111,93,118,105,93,103,125,106],
[108,100,0,97,109,115,113,112,120,121],
[112,118,114,0,128,116,97,101,136,115],
[90,93,102,83,0,96,88,93,103,96],
[112,106,96,95,115,0,72,105,112,106],
[123,118,98,114,123,139,0,116,128,123],
[98,108,99,110,118,106,95,0,122,114],
[91,86,91,75,108,99,83,89,0,103],
[102,105,90,96,115,105,88,97,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,94,108,103,99,89,101,87,100],
[118,0,111,99,102,95,106,103,102,104],
[117,100,0,108,109,103,114,92,102,114],
[103,112,103,0,96,101,113,125,98,118],
[108,109,102,115,0,106,108,106,92,111],
[112,116,108,110,105,0,111,103,106,118],
[122,105,97,98,103,100,0,100,92,117],
[110,108,119,86,105,108,111,0,102,118],
[124,109,109,113,119,105,119,109,0,127],
[111,107,97,93,100,93,94,93,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,132,132,131,112,105,122,108,109],
[109,0,108,127,101,96,107,103,106,97],
[79,103,0,106,108,97,106,95,106,99],
[79,84,105,0,103,80,97,86,90,85],
[80,110,103,108,0,87,93,78,95,82],
[99,115,114,131,124,0,123,106,109,108],
[106,104,105,114,118,88,0,97,106,100],
[89,108,116,125,133,105,114,0,100,114],
[103,105,105,121,116,102,105,111,0,109],
[102,114,112,126,129,103,111,97,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,107,106,119,92,100,98,91,105],
[97,0,95,109,99,83,101,96,83,101],
[104,116,0,116,121,97,103,103,102,102],
[105,102,95,0,113,100,106,102,106,106],
[92,112,90,98,0,82,99,90,92,95],
[119,128,114,111,129,0,114,115,105,100],
[111,110,108,105,112,97,0,94,96,102],
[113,115,108,109,121,96,117,0,105,116],
[120,128,109,105,119,106,115,106,0,114],
[106,110,109,105,116,111,109,95,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,96,72,89,57,64,71,98,87],
[150,0,144,127,112,125,113,85,115,112],
[115,67,0,87,102,104,76,78,84,100],
[139,84,124,0,140,113,80,89,89,122],
[122,99,109,71,0,82,81,64,78,92],
[154,86,107,98,129,0,88,101,76,126],
[147,98,135,131,130,123,0,112,91,121],
[140,126,133,122,147,110,99,0,101,122],
[113,96,127,122,133,135,120,110,0,92],
[124,99,111,89,119,85,90,89,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,121,113,114,102,100,99,140,106],
[85,0,128,96,100,104,101,113,112,114],
[90,83,0,82,107,116,82,77,106,92],
[98,115,129,0,120,117,112,112,119,114],
[97,111,104,91,0,96,91,89,102,93],
[109,107,95,94,115,0,105,104,115,111],
[111,110,129,99,120,106,0,109,114,108],
[112,98,134,99,122,107,102,0,116,103],
[71,99,105,92,109,96,97,95,0,107],
[105,97,119,97,118,100,103,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,117,112,107,112,113,112,96,117],
[96,0,109,115,98,109,105,113,93,101],
[94,102,0,100,102,110,105,102,92,95],
[99,96,111,0,97,107,97,110,104,101],
[104,113,109,114,0,105,107,112,99,99],
[99,102,101,104,106,0,104,110,96,94],
[98,106,106,114,104,107,0,104,100,113],
[99,98,109,101,99,101,107,0,94,97],
[115,118,119,107,112,115,111,117,0,104],
[94,110,116,110,112,117,98,114,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,102,116,120,108,116,109,106,114],
[101,0,100,105,102,109,110,106,103,116],
[109,111,0,116,105,119,118,121,113,110],
[95,106,95,0,104,95,116,107,94,105],
[91,109,106,107,0,97,99,99,93,111],
[103,102,92,116,114,0,102,122,101,113],
[95,101,93,95,112,109,0,108,106,108],
[102,105,90,104,112,89,103,0,110,113],
[105,108,98,117,118,110,105,101,0,112],
[97,95,101,106,100,98,103,98,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,126,74,103,86,94,115,164,99],
[121,0,64,94,94,95,116,81,104,75],
[85,147,0,67,117,122,150,125,200,107],
[137,117,144,0,95,123,120,123,200,125],
[108,117,94,116,0,86,96,82,179,64],
[125,116,89,88,125,0,148,104,129,113],
[117,95,61,91,115,63,0,101,148,59],
[96,130,86,88,129,107,110,0,147,99],
[47,107,11,11,32,82,63,64,0,25],
[112,136,104,86,147,98,152,112,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,123,101,109,109,106,134,105,130],
[82,0,99,101,74,90,100,111,100,99],
[88,112,0,99,105,109,100,105,103,111],
[110,110,112,0,104,115,114,116,93,123],
[102,137,106,107,0,116,111,125,113,115],
[102,121,102,96,95,0,101,106,111,112],
[105,111,111,97,100,110,0,122,119,114],
[77,100,106,95,86,105,89,0,96,98],
[106,111,108,118,98,100,92,115,0,110],
[81,112,100,88,96,99,97,113,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,112,113,119,112,110,120,99,109],
[89,0,99,91,109,104,82,95,92,94],
[99,112,0,98,111,101,96,102,100,88],
[98,120,113,0,110,109,98,108,107,95],
[92,102,100,101,0,100,91,95,90,82],
[99,107,110,102,111,0,100,105,91,89],
[101,129,115,113,120,111,0,116,106,104],
[91,116,109,103,116,106,95,0,86,95],
[112,119,111,104,121,120,105,125,0,108],
[102,117,123,116,129,122,107,116,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,85,93,82,87,79,73,74,74],
[126,0,102,102,106,114,98,109,120,105],
[126,109,0,115,112,103,107,91,106,108],
[118,109,96,0,100,110,87,105,97,113],
[129,105,99,111,0,95,93,101,103,111],
[124,97,108,101,116,0,87,92,103,106],
[132,113,104,124,118,124,0,115,117,95],
[138,102,120,106,110,119,96,0,120,101],
[137,91,105,114,108,108,94,91,0,113],
[137,106,103,98,100,105,116,110,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,108,105,102,114,108,103,93,86],
[120,0,116,121,109,124,112,119,109,99],
[103,95,0,102,84,110,113,110,82,100],
[106,90,109,0,107,118,117,106,102,105],
[109,102,127,104,0,108,107,109,92,102],
[97,87,101,93,103,0,101,104,86,92],
[103,99,98,94,104,110,0,102,95,97],
[108,92,101,105,102,107,109,0,93,91],
[118,102,129,109,119,125,116,118,0,106],
[125,112,111,106,109,119,114,120,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,76,114,80,68,118,119,93,66],
[118,0,119,109,99,104,140,135,109,93],
[135,92,0,122,113,97,153,131,100,113],
[97,102,89,0,100,101,130,125,112,90],
[131,112,98,111,0,110,158,132,118,128],
[143,107,114,110,101,0,133,138,94,95],
[93,71,58,81,53,78,0,114,98,69],
[92,76,80,86,79,73,97,0,84,89],
[118,102,111,99,93,117,113,127,0,92],
[145,118,98,121,83,116,142,122,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,114,119,103,122,117,117,105,118],
[94,0,92,102,96,92,110,102,107,106],
[97,119,0,101,109,113,128,111,111,119],
[92,109,110,0,97,97,114,107,93,105],
[108,115,102,114,0,111,108,110,108,124],
[89,119,98,114,100,0,113,105,104,103],
[94,101,83,97,103,98,0,90,92,97],
[94,109,100,104,101,106,121,0,105,105],
[106,104,100,118,103,107,119,106,0,113],
[93,105,92,106,87,108,114,106,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,90,85,105,97,98,62,114],
[104,0,119,76,89,96,106,84,99,108],
[106,92,0,83,95,93,132,93,83,86],
[121,135,128,0,102,131,121,114,100,128],
[126,122,116,109,0,99,118,99,119,120],
[106,115,118,80,112,0,106,95,78,135],
[114,105,79,90,93,105,0,103,101,97],
[113,127,118,97,112,116,108,0,106,103],
[149,112,128,111,92,133,110,105,0,124],
[97,103,125,83,91,76,114,108,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,102,100,105,112,117,106,98,113],
[118,0,111,109,119,121,117,117,99,122],
[109,100,0,105,103,100,105,123,100,120],
[111,102,106,0,112,104,107,117,108,113],
[106,92,108,99,0,103,120,116,94,106],
[99,90,111,107,108,0,113,110,100,106],
[94,94,106,104,91,98,0,108,95,101],
[105,94,88,94,95,101,103,0,91,114],
[113,112,111,103,117,111,116,120,0,110],
[98,89,91,98,105,105,110,97,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,102,99,92,107,103,110,97,114],
[125,0,114,110,115,123,102,109,107,114],
[109,97,0,107,100,112,112,107,103,109],
[112,101,104,0,109,106,100,109,104,116],
[119,96,111,102,0,116,87,91,98,94],
[104,88,99,105,95,0,100,107,108,107],
[108,109,99,111,124,111,0,104,100,112],
[101,102,104,102,120,104,107,0,99,114],
[114,104,108,107,113,103,111,112,0,111],
[97,97,102,95,117,104,99,97,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,130,107,119,100,104,98,113,108],
[97,0,111,89,103,87,102,87,105,101],
[81,100,0,92,94,92,85,83,105,95],
[104,122,119,0,120,103,112,99,123,111],
[92,108,117,91,0,99,102,91,106,108],
[111,124,119,108,112,0,114,96,116,109],
[107,109,126,99,109,97,0,106,112,108],
[113,124,128,112,120,115,105,0,129,110],
[98,106,106,88,105,95,99,82,0,101],
[103,110,116,100,103,102,103,101,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,87,80,85,131,67,82,106,123],
[120,0,69,123,86,128,105,59,91,108],
[124,142,0,142,147,125,124,168,84,153],
[131,88,69,0,112,110,101,133,96,114],
[126,125,64,99,0,119,124,50,108,99],
[80,83,86,101,92,0,92,107,134,108],
[144,106,87,110,87,119,0,90,164,100],
[129,152,43,78,161,104,121,0,116,116],
[105,120,127,115,103,77,47,95,0,111],
[88,103,58,97,112,103,111,95,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,110,107,107,119,102,116,104,112],
[97,0,100,104,103,110,104,115,102,106],
[101,111,0,104,100,112,110,97,109,118],
[104,107,107,0,109,100,111,107,106,105],
[104,108,111,102,0,116,111,116,117,116],
[92,101,99,111,95,0,105,108,108,112],
[109,107,101,100,100,106,0,104,93,107],
[95,96,114,104,95,103,107,0,101,107],
[107,109,102,105,94,103,118,110,0,104],
[99,105,93,106,95,99,104,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,94,91,106,94,105,115,93,84],
[98,0,82,93,108,101,93,130,101,115],
[117,129,0,115,112,100,117,143,120,120],
[120,118,96,0,107,99,103,129,109,110],
[105,103,99,104,0,115,101,110,84,105],
[117,110,111,112,96,0,92,106,93,86],
[106,118,94,108,110,119,0,106,95,108],
[96,81,68,82,101,105,105,0,110,97],
[118,110,91,102,127,118,116,101,0,106],
[127,96,91,101,106,125,103,114,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,111,102,112,108,111,114,100,97],
[100,0,113,94,107,106,113,99,89,101],
[100,98,0,92,98,99,92,93,93,101],
[109,117,119,0,102,112,102,106,108,96],
[99,104,113,109,0,96,111,100,97,102],
[103,105,112,99,115,0,104,100,109,103],
[100,98,119,109,100,107,0,95,98,90],
[97,112,118,105,111,111,116,0,107,106],
[111,122,118,103,114,102,113,104,0,104],
[114,110,110,115,109,108,121,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,120,118,118,119,112,104,112,127],
[104,0,97,107,103,117,112,105,106,108],
[91,114,0,102,102,108,106,101,95,113],
[93,104,109,0,95,101,104,87,98,102],
[93,108,109,116,0,114,109,104,105,114],
[92,94,103,110,97,0,94,101,93,111],
[99,99,105,107,102,117,0,99,97,109],
[107,106,110,124,107,110,112,0,101,120],
[99,105,116,113,106,118,114,110,0,119],
[84,103,98,109,97,100,102,91,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,121,114,109,102,110,109,97,113],
[100,0,123,117,101,103,102,115,102,109],
[90,88,0,98,101,86,96,96,98,101],
[97,94,113,0,93,98,104,110,100,108],
[102,110,110,118,0,104,99,108,102,114],
[109,108,125,113,107,0,105,112,104,118],
[101,109,115,107,112,106,0,115,107,112],
[102,96,115,101,103,99,96,0,104,106],
[114,109,113,111,109,107,104,107,0,116],
[98,102,110,103,97,93,99,105,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,98,104,97,99,88,107,112,106],
[129,0,113,125,104,108,115,119,94,100],
[113,98,0,107,111,107,106,109,112,105],
[107,86,104,0,116,102,110,111,104,116],
[114,107,100,95,0,98,104,112,101,110],
[112,103,104,109,113,0,104,121,105,113],
[123,96,105,101,107,107,0,113,93,114],
[104,92,102,100,99,90,98,0,103,110],
[99,117,99,107,110,106,118,108,0,114],
[105,111,106,95,101,98,97,101,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,101,104,101,121,111,89,110],
[101,0,90,100,107,88,110,99,89,96],
[108,121,0,117,113,109,125,102,102,103],
[110,111,94,0,99,96,114,100,93,101],
[107,104,98,112,0,102,115,109,100,109],
[110,123,102,115,109,0,122,109,106,99],
[90,101,86,97,96,89,0,99,93,95],
[100,112,109,111,102,102,112,0,101,108],
[122,122,109,118,111,105,118,110,0,107],
[101,115,108,110,102,112,116,103,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,104,113,118,109,110,116,123,110],
[87,0,110,116,98,119,98,111,114,96],
[107,101,0,127,120,125,107,116,131,96],
[98,95,84,0,99,124,90,116,110,95],
[93,113,91,112,0,117,88,110,109,81],
[102,92,86,87,94,0,87,97,108,76],
[101,113,104,121,123,124,0,119,126,110],
[95,100,95,95,101,114,92,0,112,95],
[88,97,80,101,102,103,85,99,0,95],
[101,115,115,116,130,135,101,116,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,100,106,120,110,105,108,107,118],
[105,0,102,106,120,113,106,110,111,112],
[111,109,0,101,121,111,109,112,106,110],
[105,105,110,0,125,120,110,113,116,114],
[91,91,90,86,0,95,94,102,94,96],
[101,98,100,91,116,0,100,105,104,98],
[106,105,102,101,117,111,0,115,106,120],
[103,101,99,98,109,106,96,0,109,111],
[104,100,105,95,117,107,105,102,0,110],
[93,99,101,97,115,113,91,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,109,94,109,100,102,96,88,109],
[97,0,105,95,98,95,105,94,99,90],
[102,106,0,99,105,101,102,101,90,102],
[117,116,112,0,124,103,111,102,104,111],
[102,113,106,87,0,92,100,103,100,100],
[111,116,110,108,119,0,120,115,110,101],
[109,106,109,100,111,91,0,101,99,99],
[115,117,110,109,108,96,110,0,108,107],
[123,112,121,107,111,101,112,103,0,113],
[102,121,109,100,111,110,112,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,124,97,105,108,88,85,103,80],
[119,0,100,96,96,109,103,113,96,68],
[87,111,0,101,122,112,96,116,82,85],
[114,115,110,0,121,105,112,127,114,89],
[106,115,89,90,0,96,119,122,97,90],
[103,102,99,106,115,0,122,125,116,110],
[123,108,115,99,92,89,0,117,98,78],
[126,98,95,84,89,86,94,0,64,89],
[108,115,129,97,114,95,113,147,0,75],
[131,143,126,122,121,101,133,122,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,96,83,89,87,82,104,87,94],
[117,0,102,96,92,104,88,99,100,99],
[115,109,0,101,103,95,95,116,101,102],
[128,115,110,0,112,103,107,110,117,109],
[122,119,108,99,0,98,110,117,119,114],
[124,107,116,108,113,0,100,115,118,112],
[129,123,116,104,101,111,0,107,115,118],
[107,112,95,101,94,96,104,0,106,105],
[124,111,110,94,92,93,96,105,0,101],
[117,112,109,102,97,99,93,106,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,111,113,114,114,115,114,110,111],
[110,0,100,104,111,105,112,110,111,96],
[100,111,0,110,107,111,102,105,109,106],
[98,107,101,0,110,109,111,112,112,104],
[97,100,104,101,0,103,106,102,101,102],
[97,106,100,102,108,0,107,100,120,100],
[96,99,109,100,105,104,0,114,102,95],
[97,101,106,99,109,111,97,0,99,106],
[101,100,102,99,110,91,109,112,0,104],
[100,115,105,107,109,111,116,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,95,89,95,102,97,107,89,102],
[106,0,113,113,105,102,106,108,97,113],
[116,98,0,98,101,113,110,119,108,124],
[122,98,113,0,100,107,108,112,105,123],
[116,106,110,111,0,103,116,117,104,125],
[109,109,98,104,108,0,107,104,101,118],
[114,105,101,103,95,104,0,105,106,114],
[104,103,92,99,94,107,106,0,96,104],
[122,114,103,106,107,110,105,115,0,114],
[109,98,87,88,86,93,97,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,137,107,133,101,103,112,101,110],
[91,0,101,107,111,87,89,99,76,100],
[74,110,0,96,139,79,82,102,91,90],
[104,104,115,0,123,91,88,109,92,101],
[78,100,72,88,0,86,81,90,83,101],
[110,124,132,120,125,0,97,123,119,109],
[108,122,129,123,130,114,0,116,101,101],
[99,112,109,102,121,88,95,0,81,112],
[110,135,120,119,128,92,110,130,0,122],
[101,111,121,110,110,102,110,99,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,92,80,51,77,54,103,43,52],
[130,0,117,95,68,112,37,132,105,108],
[119,94,0,94,70,74,73,103,80,78],
[131,116,117,0,126,112,92,139,68,139],
[160,143,141,85,0,80,116,150,94,175],
[134,99,137,99,131,0,94,138,78,130],
[157,174,138,119,95,117,0,185,128,160],
[108,79,108,72,61,73,26,0,58,75],
[168,106,131,143,117,133,83,153,0,137],
[159,103,133,72,36,81,51,136,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,116,111,99,109,110,117,118],
[107,0,101,116,102,105,101,101,115,117],
[110,110,0,118,103,104,117,104,119,121],
[95,95,93,0,93,98,108,100,115,118],
[100,109,108,118,0,111,109,107,109,114],
[112,106,107,113,100,0,113,106,110,119],
[102,110,94,103,102,98,0,98,113,128],
[101,110,107,111,104,105,113,0,116,122],
[94,96,92,96,102,101,98,95,0,102],
[93,94,90,93,97,92,83,89,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,125,110,102,110,103,115,110,103],
[94,0,99,102,98,91,97,96,90,98],
[86,112,0,116,111,112,105,119,97,120],
[101,109,95,0,82,101,92,95,94,121],
[109,113,100,129,0,101,93,104,94,112],
[101,120,99,110,110,0,100,118,111,118],
[108,114,106,119,118,111,0,115,104,110],
[96,115,92,116,107,93,96,0,99,91],
[101,121,114,117,117,100,107,112,0,109],
[108,113,91,90,99,93,101,120,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,98,101,102,104,103,111,114,104],
[103,0,108,109,110,102,96,107,110,101],
[113,103,0,106,111,106,108,116,116,109],
[110,102,105,0,110,101,105,114,113,94],
[109,101,100,101,0,103,105,109,113,100],
[107,109,105,110,108,0,101,107,114,102],
[108,115,103,106,106,110,0,107,110,99],
[100,104,95,97,102,104,104,0,101,108],
[97,101,95,98,98,97,101,110,0,98],
[107,110,102,117,111,109,112,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,98,102,90,98,108,119,90,112],
[79,0,81,64,80,76,69,98,70,84],
[113,130,0,94,91,91,103,121,92,76],
[109,147,117,0,85,94,122,118,88,97],
[121,131,120,126,0,110,126,106,119,105],
[113,135,120,117,101,0,92,110,97,99],
[103,142,108,89,85,119,0,109,70,114],
[92,113,90,93,105,101,102,0,87,95],
[121,141,119,123,92,114,141,124,0,110],
[99,127,135,114,106,112,97,116,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,121,114,119,124,126,134,104,130],
[86,0,114,95,138,105,123,118,106,110],
[90,97,0,88,120,120,108,116,109,106],
[97,116,123,0,126,127,117,120,100,122],
[92,73,91,85,0,80,108,84,104,95],
[87,106,91,84,131,0,117,135,108,97],
[85,88,103,94,103,94,0,108,93,94],
[77,93,95,91,127,76,103,0,113,103],
[107,105,102,111,107,103,118,98,0,121],
[81,101,105,89,116,114,117,108,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,115,119,95,110,108,102,124,117],
[106,0,112,112,109,118,115,101,124,111],
[96,99,0,102,88,104,103,107,106,104],
[92,99,109,0,95,110,113,106,104,106],
[116,102,123,116,0,121,110,125,123,118],
[101,93,107,101,90,0,100,111,106,95],
[103,96,108,98,101,111,0,105,108,100],
[109,110,104,105,86,100,106,0,101,98],
[87,87,105,107,88,105,103,110,0,96],
[94,100,107,105,93,116,111,113,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,112,104,134,97,113,82,131,107],
[120,0,79,118,115,92,114,104,90,125],
[99,132,0,105,126,110,89,128,139,92],
[107,93,106,0,115,44,82,97,102,136],
[77,96,85,96,0,71,118,59,107,134],
[114,119,101,167,140,0,95,130,159,165],
[98,97,122,129,93,116,0,108,128,133],
[129,107,83,114,152,81,103,0,119,117],
[80,121,72,109,104,52,83,92,0,112],
[104,86,119,75,77,46,78,94,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,130,85,94,92,115,118,117,114],
[102,0,112,110,110,105,134,113,124,113],
[81,99,0,78,88,76,89,95,95,101],
[126,101,133,0,102,114,121,131,142,132],
[117,101,123,109,0,103,100,116,119,123],
[119,106,135,97,108,0,124,118,125,138],
[96,77,122,90,111,87,0,120,103,110],
[93,98,116,80,95,93,91,0,105,107],
[94,87,116,69,92,86,108,106,0,92],
[97,98,110,79,88,73,101,104,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,116,122,99,103,123,124,125,111],
[96,0,105,110,101,105,109,109,105,99],
[95,106,0,95,85,97,110,112,103,106],
[89,101,116,0,109,97,109,111,111,97],
[112,110,126,102,0,117,122,119,125,117],
[108,106,114,114,94,0,110,115,122,112],
[88,102,101,102,89,101,0,106,97,110],
[87,102,99,100,92,96,105,0,110,112],
[86,106,108,100,86,89,114,101,0,95],
[100,112,105,114,94,99,101,99,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,111,103,114,102,114,119,109,120],
[98,0,100,97,111,97,116,105,105,111],
[100,111,0,109,114,102,112,109,114,106],
[108,114,102,0,113,110,107,110,108,111],
[97,100,97,98,0,101,108,108,107,109],
[109,114,109,101,110,0,119,106,119,119],
[97,95,99,104,103,92,0,108,99,106],
[92,106,102,101,103,105,103,0,107,103],
[102,106,97,103,104,92,112,104,0,105],
[91,100,105,100,102,92,105,108,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,109,104,99,100,101,99,107],
[106,0,117,108,96,110,91,105,125,93],
[109,94,0,108,104,118,101,106,86,102],
[102,103,103,0,95,115,89,113,87,109],
[107,115,107,116,0,120,113,106,120,95],
[112,101,93,96,91,0,87,79,85,98],
[111,120,110,122,98,124,0,104,108,107],
[110,106,105,98,105,132,107,0,105,112],
[112,86,125,124,91,126,103,106,0,99],
[104,118,109,102,116,113,104,99,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,108,99,104,116,110,117,113,108],
[93,0,90,97,95,107,100,122,118,101],
[103,121,0,108,111,107,108,113,119,101],
[112,114,103,0,120,122,115,114,124,110],
[107,116,100,91,0,109,104,113,112,98],
[95,104,104,89,102,0,100,111,111,106],
[101,111,103,96,107,111,0,116,111,107],
[94,89,98,97,98,100,95,0,106,83],
[98,93,92,87,99,100,100,105,0,95],
[103,110,110,101,113,105,104,128,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,94,119,83,89,107,91,95,107],
[106,0,102,111,96,92,108,97,105,112],
[117,109,0,120,98,114,109,104,97,108],
[92,100,91,0,75,93,108,94,89,98],
[128,115,113,136,0,107,123,94,113,118],
[122,119,97,118,104,0,124,107,104,117],
[104,103,102,103,88,87,0,92,96,111],
[120,114,107,117,117,104,119,0,91,119],
[116,106,114,122,98,107,115,120,0,129],
[104,99,103,113,93,94,100,92,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,104,106,112,93,104,99,100,115],
[112,0,93,106,109,87,102,107,96,103],
[107,118,0,106,104,98,96,100,107,108],
[105,105,105,0,107,104,105,107,107,114],
[99,102,107,104,0,100,107,114,118,115],
[118,124,113,107,111,0,103,112,112,127],
[107,109,115,106,104,108,0,112,115,128],
[112,104,111,104,97,99,99,0,119,127],
[111,115,104,104,93,99,96,92,0,99],
[96,108,103,97,96,84,83,84,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,117,102,115,106,105,112,113,101],
[100,0,115,95,106,105,85,96,106,97],
[94,96,0,97,92,85,88,95,98,98],
[109,116,114,0,115,107,111,118,121,101],
[96,105,119,96,0,101,106,115,107,97],
[105,106,126,104,110,0,100,113,111,108],
[106,126,123,100,105,111,0,104,121,105],
[99,115,116,93,96,98,107,0,114,103],
[98,105,113,90,104,100,90,97,0,101],
[110,114,113,110,114,103,106,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,147,151,150,78,155,113,126,94],
[60,0,112,92,115,121,77,89,67,100],
[64,99,0,125,128,107,108,98,51,115],
[60,119,86,0,99,59,116,79,80,74],
[61,96,83,112,0,97,131,48,88,96],
[133,90,104,152,114,0,108,91,118,126],
[56,134,103,95,80,103,0,63,106,98],
[98,122,113,132,163,120,148,0,106,128],
[85,144,160,131,123,93,105,105,0,108],
[117,111,96,137,115,85,113,83,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,112,102,98,100,84,90,79,102],
[123,0,113,95,118,122,99,120,111,122],
[99,98,0,69,94,87,88,92,76,117],
[109,116,142,0,113,123,110,123,100,115],
[113,93,117,98,0,99,86,96,99,114],
[111,89,124,88,112,0,88,101,100,108],
[127,112,123,101,125,123,0,119,111,125],
[121,91,119,88,115,110,92,0,99,106],
[132,100,135,111,112,111,100,112,0,114],
[109,89,94,96,97,103,86,105,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,71,111,145,112,151,112,136,111],
[99,0,71,87,100,77,113,93,113,96],
[140,140,0,106,141,111,136,103,137,111],
[100,124,105,0,117,94,140,119,136,138],
[66,111,70,94,0,82,109,87,113,94],
[99,134,100,117,129,0,136,117,133,126],
[60,98,75,71,102,75,0,94,97,82],
[99,118,108,92,124,94,117,0,127,100],
[75,98,74,75,98,78,114,84,0,99],
[100,115,100,73,117,85,129,111,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,114,107,85,98,99,103,105],
[107,0,101,114,108,97,103,102,93,104],
[104,110,0,96,105,111,93,115,95,100],
[97,97,115,0,113,97,104,103,96,100],
[104,103,106,98,0,109,98,105,107,108],
[126,114,100,114,102,0,111,114,101,112],
[113,108,118,107,113,100,0,105,119,113],
[112,109,96,108,106,97,106,0,116,106],
[108,118,116,115,104,110,92,95,0,106],
[106,107,111,111,103,99,98,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,110,112,101,117,101,119,114],
[103,0,114,130,120,105,127,116,132,114],
[111,97,0,114,113,95,100,99,124,119],
[101,81,97,0,94,105,113,103,113,109],
[99,91,98,117,0,106,111,94,113,110],
[110,106,116,106,105,0,100,107,122,105],
[94,84,111,98,100,111,0,102,110,101],
[110,95,112,108,117,104,109,0,118,92],
[92,79,87,98,98,89,101,93,0,106],
[97,97,92,102,101,106,110,119,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,106,114,109,112,113,100,105,108],
[92,0,101,86,107,88,92,91,93,92],
[105,110,0,98,110,102,105,106,108,104],
[97,125,113,0,112,110,103,108,105,100],
[102,104,101,99,0,102,96,100,100,101],
[99,123,109,101,109,0,95,98,108,98],
[98,119,106,108,115,116,0,111,109,103],
[111,120,105,103,111,113,100,0,104,105],
[106,118,103,106,111,103,102,107,0,98],
[103,119,107,111,110,113,108,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,88,102,91,101,96,94,105,107],
[116,0,94,99,109,99,101,105,112,105],
[123,117,0,124,117,98,113,111,116,121],
[109,112,87,0,101,106,101,102,105,106],
[120,102,94,110,0,100,97,108,93,97],
[110,112,113,105,111,0,103,104,111,109],
[115,110,98,110,114,108,0,110,109,111],
[117,106,100,109,103,107,101,0,117,110],
[106,99,95,106,118,100,102,94,0,110],
[104,106,90,105,114,102,100,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,98,118,106,136,99,96,105,114],
[100,0,110,108,116,125,122,108,123,119],
[113,101,0,77,123,120,100,93,105,107],
[93,103,134,0,122,125,116,106,117,111],
[105,95,88,89,0,117,107,113,103,95],
[75,86,91,86,94,0,89,85,82,98],
[112,89,111,95,104,122,0,122,103,107],
[115,103,118,105,98,126,89,0,96,101],
[106,88,106,94,108,129,108,115,0,113],
[97,92,104,100,116,113,104,110,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,132,107,124,90,103,78,108,108],
[128,0,158,140,102,128,112,140,125,158],
[79,53,0,61,66,99,33,36,62,83],
[104,71,150,0,94,108,83,96,97,143],
[87,109,145,117,0,87,133,58,105,167],
[121,83,112,103,124,0,91,92,91,179],
[108,99,178,128,78,120,0,91,128,187],
[133,71,175,115,153,119,120,0,116,175],
[103,86,149,114,106,120,83,95,0,183],
[103,53,128,68,44,32,24,36,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,92,99,101,101,103,90,96,93],
[119,0,108,116,99,114,113,103,111,109],
[119,103,0,113,107,105,113,94,109,94],
[112,95,98,0,99,116,100,96,108,90],
[110,112,104,112,0,98,105,105,113,91],
[110,97,106,95,113,0,98,110,114,105],
[108,98,98,111,106,113,0,86,115,107],
[121,108,117,115,106,101,125,0,117,97],
[115,100,102,103,98,97,96,94,0,101],
[118,102,117,121,120,106,104,114,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,97,95,115,116,89,101,135,113],
[88,0,102,87,95,100,71,103,121,93],
[114,109,0,94,106,94,108,109,119,126],
[116,124,117,0,105,108,96,132,130,115],
[96,116,105,106,0,108,64,98,114,103],
[95,111,117,103,103,0,93,109,136,108],
[122,140,103,115,147,118,0,120,142,114],
[110,108,102,79,113,102,91,0,118,83],
[76,90,92,81,97,75,69,93,0,87],
[98,118,85,96,108,103,97,128,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,103,89,100,99,101,100,98,104],
[97,0,99,89,109,98,108,106,95,110],
[108,112,0,100,110,98,110,107,104,106],
[122,122,111,0,113,114,126,124,105,111],
[111,102,101,98,0,100,101,101,90,111],
[112,113,113,97,111,0,108,111,108,101],
[110,103,101,85,110,103,0,107,93,108],
[111,105,104,87,110,100,104,0,94,102],
[113,116,107,106,121,103,118,117,0,119],
[107,101,105,100,100,110,103,109,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,106,107,103,93,98,112,106,93],
[93,0,91,109,94,95,99,102,109,94],
[105,120,0,101,114,112,117,105,127,104],
[104,102,110,0,100,106,120,94,108,106],
[108,117,97,111,0,90,105,98,112,115],
[118,116,99,105,121,0,122,112,119,101],
[113,112,94,91,106,89,0,99,95,90],
[99,109,106,117,113,99,112,0,117,99],
[105,102,84,103,99,92,116,94,0,82],
[118,117,107,105,96,110,121,112,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,91,112,101,98,100,98,92,103],
[109,0,101,96,107,98,103,100,91,114],
[120,110,0,109,109,108,102,115,103,108],
[99,115,102,0,111,111,99,91,107,105],
[110,104,102,100,0,89,90,91,100,96],
[113,113,103,100,122,0,112,115,112,114],
[111,108,109,112,121,99,0,98,103,103],
[113,111,96,120,120,96,113,0,109,114],
[119,120,108,104,111,99,108,102,0,112],
[108,97,103,106,115,97,108,97,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,123,105,103,111,103,122,134,132],
[66,0,82,85,79,87,72,81,109,95],
[88,129,0,94,99,109,111,95,126,127],
[106,126,117,0,102,108,107,109,122,119],
[108,132,112,109,0,100,94,121,127,132],
[100,124,102,103,111,0,102,106,107,114],
[108,139,100,104,117,109,0,127,117,113],
[89,130,116,102,90,105,84,0,127,118],
[77,102,85,89,84,104,94,84,0,106],
[79,116,84,92,79,97,98,93,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,123,116,119,116,113,110,110,103],
[107,0,113,135,124,117,127,128,115,105],
[88,98,0,111,102,97,102,101,114,107],
[95,76,100,0,113,96,102,98,99,100],
[92,87,109,98,0,101,112,104,102,96],
[95,94,114,115,110,0,110,99,112,111],
[98,84,109,109,99,101,0,117,100,99],
[101,83,110,113,107,112,94,0,100,103],
[101,96,97,112,109,99,111,111,0,108],
[108,106,104,111,115,100,112,108,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,90,113,97,84,103,84,89,94],
[99,0,106,88,98,102,89,87,97,86],
[121,105,0,95,106,115,92,91,119,110],
[98,123,116,0,104,111,88,104,101,103],
[114,113,105,107,0,98,108,82,94,104],
[127,109,96,100,113,0,99,91,92,116],
[108,122,119,123,103,112,0,109,112,112],
[127,124,120,107,129,120,102,0,107,125],
[122,114,92,110,117,119,99,104,0,117],
[117,125,101,108,107,95,99,86,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,104,94,101,107,108,103,108,97],
[113,0,110,108,101,110,106,106,113,106],
[107,101,0,110,107,103,114,100,113,114],
[117,103,101,0,103,104,113,108,117,106],
[110,110,104,108,0,111,113,108,115,108],
[104,101,108,107,100,0,104,98,110,105],
[103,105,97,98,98,107,0,99,110,97],
[108,105,111,103,103,113,112,0,109,101],
[103,98,98,94,96,101,101,102,0,99],
[114,105,97,105,103,106,114,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,110,111,133,118,100,121,83,99],
[106,0,119,110,125,118,107,129,100,77],
[101,92,0,122,100,105,90,112,67,89],
[100,101,89,0,94,96,75,105,80,87],
[78,86,111,117,0,104,89,125,84,88],
[93,93,106,115,107,0,61,110,69,82],
[111,104,121,136,122,150,0,134,110,118],
[90,82,99,106,86,101,77,0,82,72],
[128,111,144,131,127,142,101,129,0,101],
[112,134,122,124,123,129,93,139,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,113,105,117,85,110,94,91,104],
[91,0,89,87,97,102,96,100,94,105],
[98,122,0,100,136,101,91,114,95,83],
[106,124,111,0,139,99,78,116,114,96],
[94,114,75,72,0,92,78,92,83,84],
[126,109,110,112,119,0,109,109,100,98],
[101,115,120,133,133,102,0,99,123,108],
[117,111,97,95,119,102,112,0,100,103],
[120,117,116,97,128,111,88,111,0,93],
[107,106,128,115,127,113,103,108,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,106,109,123,111,105,119,105,108],
[113,0,104,101,102,99,108,108,104,115],
[105,107,0,111,111,111,113,114,119,115],
[102,110,100,0,111,106,112,110,109,93],
[88,109,100,100,0,88,97,103,100,96],
[100,112,100,105,123,0,112,99,104,103],
[106,103,98,99,114,99,0,109,106,103],
[92,103,97,101,108,112,102,0,111,108],
[106,107,92,102,111,107,105,100,0,100],
[103,96,96,118,115,108,108,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,113,109,122,102,134,128,103,95],
[121,0,108,85,100,99,116,127,102,110],
[98,103,0,105,107,106,108,140,96,109],
[102,126,106,0,111,107,113,125,109,110],
[89,111,104,100,0,92,103,121,92,91],
[109,112,105,104,119,0,119,127,102,114],
[77,95,103,98,108,92,0,113,85,92],
[83,84,71,86,90,84,98,0,89,99],
[108,109,115,102,119,109,126,122,0,123],
[116,101,102,101,120,97,119,112,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,110,99,101,100,92,101,112,112],
[107,0,122,115,99,112,111,106,113,122],
[101,89,0,101,101,103,104,102,107,94],
[112,96,110,0,106,117,111,110,122,107],
[110,112,110,105,0,118,101,103,111,117],
[111,99,108,94,93,0,87,99,113,94],
[119,100,107,100,110,124,0,121,130,119],
[110,105,109,101,108,112,90,0,118,102],
[99,98,104,89,100,98,81,93,0,97],
[99,89,117,104,94,117,92,109,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,91,88,115,103,145,105,105,104],
[106,0,108,110,131,104,124,110,99,119],
[120,103,0,111,136,123,142,113,119,115],
[123,101,100,0,125,113,138,112,105,100],
[96,80,75,86,0,92,117,90,106,103],
[108,107,88,98,119,0,133,114,90,111],
[66,87,69,73,94,78,0,87,88,101],
[106,101,98,99,121,97,124,0,93,108],
[106,112,92,106,105,121,123,118,0,111],
[107,92,96,111,108,100,110,103,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,99,112,110,100,101,105,114,113],
[105,0,107,106,108,96,111,106,112,106],
[112,104,0,112,113,99,105,111,113,104],
[99,105,99,0,102,102,106,101,107,111],
[101,103,98,109,0,96,104,98,111,116],
[111,115,112,109,115,0,109,105,112,117],
[110,100,106,105,107,102,0,102,109,111],
[106,105,100,110,113,106,109,0,108,110],
[97,99,98,104,100,99,102,103,0,97],
[98,105,107,100,95,94,100,101,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,99,98,89,112,114,91,80,105],
[102,0,86,118,103,97,107,111,88,120],
[112,125,0,101,125,106,105,115,102,119],
[113,93,110,0,105,110,106,123,111,126],
[122,108,86,106,0,113,117,123,98,112],
[99,114,105,101,98,0,100,110,98,108],
[97,104,106,105,94,111,0,103,93,115],
[120,100,96,88,88,101,108,0,89,129],
[131,123,109,100,113,113,118,122,0,143],
[106,91,92,85,99,103,96,82,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,108,95,113,108,110,107,100],
[106,0,110,103,103,117,109,120,108,97],
[98,101,0,95,97,108,104,106,104,98],
[103,108,116,0,92,118,110,110,100,100],
[116,108,114,119,0,121,101,118,99,107],
[98,94,103,93,90,0,89,107,89,90],
[103,102,107,101,110,122,0,124,110,100],
[101,91,105,101,93,104,87,0,98,94],
[104,103,107,111,112,122,101,113,0,111],
[111,114,113,111,104,121,111,117,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,91,113,109,78,106,97,105,96],
[104,0,108,106,111,95,95,77,107,102],
[120,103,0,110,103,98,94,95,98,107],
[98,105,101,0,120,103,103,111,104,113],
[102,100,108,91,0,79,91,91,91,109],
[133,116,113,108,132,0,96,103,116,127],
[105,116,117,108,120,115,0,97,110,112],
[114,134,116,100,120,108,114,0,113,127],
[106,104,113,107,120,95,101,98,0,109],
[115,109,104,98,102,84,99,84,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,93,100,97,105,94,88,93,103],
[105,0,93,103,96,110,104,98,103,97],
[118,118,0,114,102,119,113,102,117,110],
[111,108,97,0,103,110,98,89,109,101],
[114,115,109,108,0,112,104,96,112,104],
[106,101,92,101,99,0,98,89,96,97],
[117,107,98,113,107,113,0,111,115,120],
[123,113,109,122,115,122,100,0,115,107],
[118,108,94,102,99,115,96,96,0,101],
[108,114,101,110,107,114,91,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,121,107,113,111,100,115,105],
[101,0,97,103,102,95,96,90,99,100],
[105,114,0,115,116,107,101,106,106,110],
[90,108,96,0,95,99,94,93,106,102],
[104,109,95,116,0,105,112,107,112,116],
[98,116,104,112,106,0,106,106,110,111],
[100,115,110,117,99,105,0,104,107,110],
[111,121,105,118,104,105,107,0,112,100],
[96,112,105,105,99,101,104,99,0,104],
[106,111,101,109,95,100,101,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,96,84,92,94,89,95,95,95],
[121,0,109,108,113,115,106,116,103,102],
[115,102,0,101,110,110,105,133,115,110],
[127,103,110,0,122,112,109,112,110,114],
[119,98,101,89,0,99,97,109,98,100],
[117,96,101,99,112,0,105,113,114,111],
[122,105,106,102,114,106,0,106,112,110],
[116,95,78,99,102,98,105,0,108,94],
[116,108,96,101,113,97,99,103,0,98],
[116,109,101,97,111,100,101,117,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,83,79,160,81,169,88,151,116],
[92,0,155,144,122,81,144,111,135,127],
[128,56,0,119,86,106,95,116,119,86],
[132,67,92,0,92,123,128,100,166,106],
[51,89,125,119,0,90,128,61,124,128],
[130,130,105,88,121,0,152,77,101,88],
[42,67,116,83,83,59,0,39,85,25],
[123,100,95,111,150,134,172,0,163,139],
[60,76,92,45,87,110,126,48,0,73],
[95,84,125,105,83,123,186,72,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,111,94,69,112,99,105,59,112],
[92,0,109,132,117,149,135,127,94,86],
[100,102,0,102,84,126,108,92,71,87],
[117,79,109,0,61,117,120,127,88,92],
[142,94,127,150,0,155,168,130,131,104],
[99,62,85,94,56,0,113,94,84,70],
[112,76,103,91,43,98,0,81,70,70],
[106,84,119,84,81,117,130,0,54,113],
[152,117,140,123,80,127,141,157,0,97],
[99,125,124,119,107,141,141,98,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,111,89,112,111,108,97,97],
[104,0,108,115,103,107,96,99,95,115],
[104,103,0,111,100,103,109,104,82,103],
[100,96,100,0,99,100,104,100,83,96],
[122,108,111,112,0,111,114,112,103,95],
[99,104,108,111,100,0,104,95,88,101],
[100,115,102,107,97,107,0,94,93,96],
[103,112,107,111,99,116,117,0,107,108],
[114,116,129,128,108,123,118,104,0,108],
[114,96,108,115,116,110,115,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,109,126,99,107,105,118,98],
[97,0,113,101,114,111,103,99,120,116],
[99,98,0,119,114,111,107,131,118,101],
[102,110,92,0,109,102,95,126,106,98],
[85,97,97,102,0,96,98,93,87,75],
[112,100,100,109,115,0,98,109,117,99],
[104,108,104,116,113,113,0,105,120,97],
[106,112,80,85,118,102,106,0,115,106],
[93,91,93,105,124,94,91,96,0,82],
[113,95,110,113,136,112,114,105,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,108,105,114,119,114,108,104,102],
[100,0,120,96,106,130,107,125,106,97],
[103,91,0,103,119,106,87,96,87,95],
[106,115,108,0,107,111,97,113,91,108],
[97,105,92,104,0,113,113,102,99,91],
[92,81,105,100,98,0,95,105,78,104],
[97,104,124,114,98,116,0,118,80,107],
[103,86,115,98,109,106,93,0,86,102],
[107,105,124,120,112,133,131,125,0,111],
[109,114,116,103,120,107,104,109,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,97,99,88,98,86,90,77,120],
[105,0,115,95,112,107,100,110,99,119],
[114,96,0,105,134,123,108,115,116,127],
[112,116,106,0,121,125,98,118,123,122],
[123,99,77,90,0,97,78,112,95,98],
[113,104,88,86,114,0,94,106,92,108],
[125,111,103,113,133,117,0,108,105,118],
[121,101,96,93,99,105,103,0,104,103],
[134,112,95,88,116,119,106,107,0,118],
[91,92,84,89,113,103,93,108,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,95,98,113,102,103,105,100,106],
[97,0,108,104,107,104,105,111,108,108],
[116,103,0,104,105,106,106,116,98,113],
[113,107,107,0,108,109,101,111,107,111],
[98,104,106,103,0,104,103,109,101,107],
[109,107,105,102,107,0,117,115,102,110],
[108,106,105,110,108,94,0,106,106,103],
[106,100,95,100,102,96,105,0,89,110],
[111,103,113,104,110,109,105,122,0,101],
[105,103,98,100,104,101,108,101,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,96,97,97,95,98,98,97],
[110,0,110,102,97,115,106,99,107,98],
[114,101,0,97,107,114,108,102,108,98],
[115,109,114,0,101,112,108,112,103,106],
[114,114,104,110,0,108,110,106,113,105],
[114,96,97,99,103,0,112,101,97,96],
[116,105,103,103,101,99,0,107,110,102],
[113,112,109,99,105,110,104,0,107,94],
[113,104,103,108,98,114,101,104,0,91],
[114,113,113,105,106,115,109,117,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,121,126,106,111,101,95,143,116],
[113,0,114,144,97,111,102,117,116,126],
[90,97,0,101,93,101,88,67,101,84],
[85,67,110,0,93,95,96,95,100,94],
[105,114,118,118,0,107,94,99,101,103],
[100,100,110,116,104,0,101,97,132,104],
[110,109,123,115,117,110,0,96,121,114],
[116,94,144,116,112,114,115,0,142,132],
[68,95,110,111,110,79,90,69,0,86],
[95,85,127,117,108,107,97,79,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,95,111,100,100,123,88,92,107],
[120,0,110,113,91,111,124,97,114,120],
[116,101,0,103,95,101,123,101,117,114],
[100,98,108,0,85,101,122,112,99,116],
[111,120,116,126,0,106,129,112,107,105],
[111,100,110,110,105,0,130,104,115,114],
[88,87,88,89,82,81,0,87,89,90],
[123,114,110,99,99,107,124,0,115,118],
[119,97,94,112,104,96,122,96,0,110],
[104,91,97,95,106,97,121,93,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,91,103,107,116,101,114,95,96],
[109,0,90,97,106,114,103,122,92,92],
[120,121,0,95,99,139,111,107,124,98],
[108,114,116,0,108,113,98,110,109,111],
[104,105,112,103,0,94,108,102,100,98],
[95,97,72,98,117,0,94,99,106,87],
[110,108,100,113,103,117,0,104,110,103],
[97,89,104,101,109,112,107,0,115,100],
[116,119,87,102,111,105,101,96,0,101],
[115,119,113,100,113,124,108,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,118,110,112,101,113,99,103,112],
[95,0,110,97,105,103,108,101,101,109],
[93,101,0,97,111,96,107,97,105,93],
[101,114,114,0,108,102,115,92,110,103],
[99,106,100,103,0,94,112,101,85,93],
[110,108,115,109,117,0,112,90,108,99],
[98,103,104,96,99,99,0,98,94,91],
[112,110,114,119,110,121,113,0,110,105],
[108,110,106,101,126,103,117,101,0,97],
[99,102,118,108,118,112,120,106,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,106,110,118,141,117,111,142,101],
[102,0,100,118,126,112,118,120,142,110],
[105,111,0,100,112,138,132,118,144,72],
[101,93,111,0,113,100,113,77,131,89],
[93,85,99,98,0,118,132,120,127,135],
[70,99,73,111,93,0,112,86,140,92],
[94,93,79,98,79,99,0,116,133,98],
[100,91,93,134,91,125,95,0,131,92],
[69,69,67,80,84,71,78,80,0,73],
[110,101,139,122,76,119,113,119,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,118,117,123,103,125,113,113,107],
[94,0,109,97,106,99,103,116,102,92],
[93,102,0,101,105,92,112,101,103,87],
[94,114,110,0,108,101,106,111,92,101],
[88,105,106,103,0,84,101,104,109,94],
[108,112,119,110,127,0,111,107,107,100],
[86,108,99,105,110,100,0,111,102,99],
[98,95,110,100,107,104,100,0,111,96],
[98,109,108,119,102,104,109,100,0,103],
[104,119,124,110,117,111,112,115,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,105,101,110,110,116,105,98,104],
[117,0,112,105,115,98,129,112,99,113],
[106,99,0,104,105,99,111,100,98,105],
[110,106,107,0,115,110,119,109,111,101],
[101,96,106,96,0,96,109,90,91,110],
[101,113,112,101,115,0,116,109,103,111],
[95,82,100,92,102,95,0,86,88,97],
[106,99,111,102,121,102,125,0,102,113],
[113,112,113,100,120,108,123,109,0,119],
[107,98,106,110,101,100,114,98,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,105,95,99,104,93,94,104,103],
[109,0,120,105,109,110,97,110,95,105],
[106,91,0,106,97,111,93,100,96,108],
[116,106,105,0,96,97,93,96,103,100],
[112,102,114,115,0,105,89,101,98,104],
[107,101,100,114,106,0,77,94,95,101],
[118,114,118,118,122,134,0,103,111,111],
[117,101,111,115,110,117,108,0,120,108],
[107,116,115,108,113,116,100,91,0,106],
[108,106,103,111,107,110,100,103,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,86,97,91,90,100,106,90,89],
[121,0,115,104,116,104,96,108,94,111],
[125,96,0,102,98,104,110,109,101,112],
[114,107,109,0,109,102,102,114,94,101],
[120,95,113,102,0,100,114,111,111,109],
[121,107,107,109,111,0,105,107,96,109],
[111,115,101,109,97,106,0,95,104,107],
[105,103,102,97,100,104,116,0,103,101],
[121,117,110,117,100,115,107,108,0,117],
[122,100,99,110,102,102,104,110,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,98,107,102,102,96,100,103],
[105,0,98,102,100,100,107,100,112,95],
[106,113,0,107,113,114,113,101,116,106],
[113,109,104,0,106,105,102,108,107,100],
[104,111,98,105,0,105,106,100,103,94],
[109,111,97,106,106,0,111,98,102,96],
[109,104,98,109,105,100,0,105,113,107],
[115,111,110,103,111,113,106,0,112,110],
[111,99,95,104,108,109,98,99,0,102],
[108,116,105,111,117,115,104,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,108,112,95,96,104,118,102,104],
[118,0,114,126,105,114,107,118,116,114],
[103,97,0,109,97,106,102,110,105,98],
[99,85,102,0,96,101,94,103,104,99],
[116,106,114,115,0,117,105,120,106,111],
[115,97,105,110,94,0,103,111,111,106],
[107,104,109,117,106,108,0,120,112,108],
[93,93,101,108,91,100,91,0,96,101],
[109,95,106,107,105,100,99,115,0,95],
[107,97,113,112,100,105,103,110,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,100,98,103,96,107,105,107,101],
[99,0,108,104,93,88,98,91,103,91],
[111,103,0,112,103,89,113,109,110,108],
[113,107,99,0,108,99,106,96,114,98],
[108,118,108,103,0,87,108,106,106,100],
[115,123,122,112,124,0,123,118,118,104],
[104,113,98,105,103,88,0,101,109,98],
[106,120,102,115,105,93,110,0,109,107],
[104,108,101,97,105,93,102,102,0,92],
[110,120,103,113,111,107,113,104,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,64,98,81,89,116,73,89,142],
[121,0,106,123,141,89,121,99,85,178],
[147,105,0,174,165,61,124,141,112,134],
[113,88,37,0,134,89,73,64,141,137],
[130,70,46,77,0,61,52,53,85,61],
[122,122,150,122,150,0,157,159,84,122],
[95,90,87,138,159,54,0,114,129,122],
[138,112,70,147,158,52,97,0,112,141],
[122,126,99,70,126,127,82,99,0,141],
[69,33,77,74,150,89,89,70,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,96,105,105,107,110,100,108,118],
[104,0,111,100,99,108,99,112,104,102],
[115,100,0,101,115,100,112,106,102,106],
[106,111,110,0,104,97,101,101,106,110],
[106,112,96,107,0,98,106,110,105,109],
[104,103,111,114,113,0,120,115,111,118],
[101,112,99,110,105,91,0,100,102,115],
[111,99,105,110,101,96,111,0,109,103],
[103,107,109,105,106,100,109,102,0,112],
[93,109,105,101,102,93,96,108,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,88,84,124,113,98,78,117,90],
[113,0,113,109,63,113,37,63,57,131],
[123,98,0,87,104,93,98,36,117,139],
[127,102,124,0,88,93,80,60,121,102],
[87,148,107,123,0,157,35,107,35,149],
[98,98,118,118,54,0,46,20,46,114],
[113,174,113,131,176,165,0,78,159,175],
[133,148,175,151,104,191,133,0,83,157],
[94,154,94,90,176,165,52,128,0,140],
[121,80,72,109,62,97,36,54,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,113,111,105,110,113,113,122,116],
[95,0,111,106,108,112,97,123,113,99],
[98,100,0,113,102,98,116,120,120,121],
[100,105,98,0,101,87,105,109,124,92],
[106,103,109,110,0,103,109,116,120,107],
[101,99,113,124,108,0,99,109,114,112],
[98,114,95,106,102,112,0,109,110,104],
[98,88,91,102,95,102,102,0,127,100],
[89,98,91,87,91,97,101,84,0,109],
[95,112,90,119,104,99,107,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,135,119,90,82,102,77,117,104],
[111,0,100,91,123,123,123,85,126,121],
[76,111,0,97,110,92,109,76,72,87],
[92,120,114,0,88,107,113,117,117,89],
[121,88,101,123,0,82,123,99,95,74],
[129,88,119,104,129,0,138,129,119,136],
[109,88,102,98,88,73,0,94,110,95],
[134,126,135,94,112,82,117,0,99,117],
[94,85,139,94,116,92,101,112,0,118],
[107,90,124,122,137,75,116,94,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,125,129,111,119,106,100,100,125],
[107,0,97,128,96,85,129,90,111,120],
[86,114,0,119,107,112,118,97,115,138],
[82,83,92,0,113,105,99,91,97,112],
[100,115,104,98,0,108,113,107,97,114],
[92,126,99,106,103,0,119,112,97,114],
[105,82,93,112,98,92,0,93,93,95],
[111,121,114,120,104,99,118,0,103,125],
[111,100,96,114,114,114,118,108,0,117],
[86,91,73,99,97,97,116,86,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,114,109,100,119,115,114,118,106],
[85,0,102,88,106,102,106,94,99,101],
[97,109,0,94,103,104,110,111,102,112],
[102,123,117,0,121,102,118,115,119,123],
[111,105,108,90,0,99,100,106,100,114],
[92,109,107,109,112,0,108,108,108,112],
[96,105,101,93,111,103,0,113,99,103],
[97,117,100,96,105,103,98,0,112,110],
[93,112,109,92,111,103,112,99,0,115],
[105,110,99,88,97,99,108,101,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,105,117,98,110,109,104,92,96],
[87,0,102,89,74,102,88,86,77,90],
[106,109,0,98,96,101,102,97,90,107],
[94,122,113,0,90,98,102,90,105,108],
[113,137,115,121,0,119,110,103,109,96],
[101,109,110,113,92,0,100,109,98,102],
[102,123,109,109,101,111,0,99,96,105],
[107,125,114,121,108,102,112,0,103,110],
[119,134,121,106,102,113,115,108,0,103],
[115,121,104,103,115,109,106,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,101,122,109,126,98,114,131,138],
[82,0,97,86,96,94,79,101,70,78],
[110,114,0,104,118,103,73,117,121,99],
[89,125,107,0,108,93,84,102,92,92],
[102,115,93,103,0,99,104,104,113,118],
[85,117,108,118,112,0,88,98,96,105],
[113,132,138,127,107,123,0,125,99,115],
[97,110,94,109,107,113,86,0,105,103],
[80,141,90,119,98,115,112,106,0,114],
[73,133,112,119,93,106,96,108,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,103,128,116,116,113,109,114,122],
[89,0,98,115,116,102,99,97,95,98],
[108,113,0,115,115,109,104,114,99,109],
[83,96,96,0,106,93,80,90,104,87],
[95,95,96,105,0,98,89,89,92,107],
[95,109,102,118,113,0,112,108,111,116],
[98,112,107,131,122,99,0,107,120,120],
[102,114,97,121,122,103,104,0,100,103],
[97,116,112,107,119,100,91,111,0,110],
[89,113,102,124,104,95,91,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,96,115,96,92,106,106,106],
[99,0,99,86,90,91,95,99,106,95],
[101,112,0,100,90,93,101,99,109,100],
[115,125,111,0,108,103,106,113,109,102],
[96,121,121,103,0,99,104,115,111,107],
[115,120,118,108,112,0,107,124,120,104],
[119,116,110,105,107,104,0,112,114,111],
[105,112,112,98,96,87,99,0,103,108],
[105,105,102,102,100,91,97,108,0,103],
[105,116,111,109,104,107,100,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,93,104,97,98,99,103,92,104],
[107,0,101,112,106,96,101,106,93,105],
[118,110,0,114,111,106,107,110,105,119],
[107,99,97,0,104,98,96,103,90,97],
[114,105,100,107,0,105,98,100,91,100],
[113,115,105,113,106,0,101,103,106,104],
[112,110,104,115,113,110,0,109,77,105],
[108,105,101,108,111,108,102,0,96,101],
[119,118,106,121,120,105,134,115,0,109],
[107,106,92,114,111,107,106,110,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,92,93,111,117,98,106,104],
[101,0,97,102,106,97,112,119,120,111],
[108,114,0,110,113,99,120,111,107,119],
[119,109,101,0,97,103,108,118,104,102],
[118,105,98,114,0,118,103,142,111,114],
[100,114,112,108,93,0,103,112,89,110],
[94,99,91,103,108,108,0,110,85,110],
[113,92,100,93,69,99,101,0,83,109],
[105,91,104,107,100,122,126,128,0,121],
[107,100,92,109,97,101,101,102,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,101,111,101,107,96,100,112,107],
[97,0,95,99,93,100,86,111,108,99],
[110,116,0,98,102,107,102,106,112,113],
[100,112,113,0,103,117,117,118,122,125],
[110,118,109,108,0,112,114,117,112,104],
[104,111,104,94,99,0,99,97,102,109],
[115,125,109,94,97,112,0,111,119,112],
[111,100,105,93,94,114,100,0,113,105],
[99,103,99,89,99,109,92,98,0,99],
[104,112,98,86,107,102,99,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,106,109,111,105,107,112,105],
[99,0,105,110,99,98,104,104,114,105],
[103,106,0,103,107,98,102,105,114,105],
[105,101,108,0,109,101,106,100,117,103],
[102,112,104,102,0,104,112,105,109,104],
[100,113,113,110,107,0,106,95,117,108],
[106,107,109,105,99,105,0,96,110,103],
[104,107,106,111,106,116,115,0,113,105],
[99,97,97,94,102,94,101,98,0,93],
[106,106,106,108,107,103,108,106,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,104,100,97,115,104,102,108,100],
[112,0,112,101,115,116,102,99,114,97],
[107,99,0,100,107,116,109,108,113,102],
[111,110,111,0,102,108,105,99,111,110],
[114,96,104,109,0,119,99,103,110,115],
[96,95,95,103,92,0,103,99,109,97],
[107,109,102,106,112,108,0,103,112,96],
[109,112,103,112,108,112,108,0,114,114],
[103,97,98,100,101,102,99,97,0,101],
[111,114,109,101,96,114,115,97,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,175,141,136,72,114,163,72,105],
[70,0,106,0,136,30,84,106,42,36],
[36,105,0,63,36,36,72,99,36,63],
[70,211,148,0,136,72,84,136,48,127],
[75,75,175,75,0,99,111,69,75,75],
[139,181,175,139,112,0,111,133,112,97],
[97,127,139,127,100,100,0,169,70,127],
[48,105,112,75,142,78,42,0,48,105],
[139,169,175,163,136,99,141,163,0,169],
[106,175,148,84,136,114,84,106,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,132,108,115,118,86,100,96,111],
[96,0,121,93,96,115,79,95,96,112],
[79,90,0,80,99,95,81,87,89,89],
[103,118,131,0,132,125,94,110,113,106],
[96,115,112,79,0,123,77,104,92,101],
[93,96,116,86,88,0,76,96,93,93],
[125,132,130,117,134,135,0,106,101,108],
[111,116,124,101,107,115,105,0,112,112],
[115,115,122,98,119,118,110,99,0,117],
[100,99,122,105,110,118,103,99,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,102,85,96,98,92,93,88,95],
[127,0,119,100,112,108,98,113,95,97],
[109,92,0,90,106,101,91,95,89,84],
[126,111,121,0,117,120,97,116,103,111],
[115,99,105,94,0,99,95,84,94,100],
[113,103,110,91,112,0,101,92,101,94],
[119,113,120,114,116,110,0,107,100,102],
[118,98,116,95,127,119,104,0,97,112],
[123,116,122,108,117,110,111,114,0,104],
[116,114,127,100,111,117,109,99,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,107,143,101,108,130,120,129,97],
[110,0,87,117,91,140,108,101,109,135],
[104,124,0,123,108,159,142,129,125,124],
[68,94,88,0,67,103,89,85,108,68],
[110,120,103,144,0,158,125,107,126,122],
[103,71,52,108,53,0,123,84,88,82],
[81,103,69,122,86,88,0,93,125,73],
[91,110,82,126,104,127,118,0,96,98],
[82,102,86,103,85,123,86,115,0,85],
[114,76,87,143,89,129,138,113,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,119,116,109,101,132,128,159,115],
[101,0,106,124,115,116,137,125,172,107],
[92,105,0,110,101,114,118,124,139,107],
[95,87,101,0,125,113,126,104,144,104],
[102,96,110,86,0,109,111,94,122,113],
[110,95,97,98,102,0,114,100,146,114],
[79,74,93,85,100,97,0,83,115,89],
[83,86,87,107,117,111,128,0,146,103],
[52,39,72,67,89,65,96,65,0,82],
[96,104,104,107,98,97,122,108,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,94,96,110,97,96,95,92,87],
[115,0,88,104,110,101,107,111,91,85],
[117,123,0,119,108,106,115,120,92,101],
[115,107,92,0,107,100,126,105,71,101],
[101,101,103,104,0,103,117,115,84,93],
[114,110,105,111,108,0,106,117,94,106],
[115,104,96,85,94,105,0,114,86,103],
[116,100,91,106,96,94,97,0,91,88],
[119,120,119,140,127,117,125,120,0,104],
[124,126,110,110,118,105,108,123,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,136,110,98,112,133,120,117,136],
[81,0,119,129,68,82,131,103,58,126],
[75,92,0,52,80,80,104,112,75,87],
[101,82,159,0,109,118,138,152,116,108],
[113,143,131,102,0,112,143,157,121,112],
[99,129,131,93,99,0,127,184,111,156],
[78,80,107,73,68,84,0,118,67,90],
[91,108,99,59,54,27,93,0,75,80],
[94,153,136,95,90,100,144,136,0,116],
[75,85,124,103,99,55,121,131,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,101,101,115,124,106,93,109],
[102,0,101,110,105,111,110,109,99,111],
[104,110,0,114,102,102,112,95,109,102],
[110,101,97,0,99,97,114,100,88,104],
[110,106,109,112,0,111,124,100,121,111],
[96,100,109,114,100,0,120,101,95,93],
[87,101,99,97,87,91,0,100,96,97],
[105,102,116,111,111,110,111,0,101,108],
[118,112,102,123,90,116,115,110,0,108],
[102,100,109,107,100,118,114,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,105,115,94,134,97,106,109,106],
[135,0,142,144,118,142,110,108,129,96],
[106,69,0,129,98,103,79,96,111,89],
[96,67,82,0,96,117,83,100,87,70],
[117,93,113,115,0,120,105,130,124,80],
[77,69,108,94,91,0,68,81,85,85],
[114,101,132,128,106,143,0,98,112,117],
[105,103,115,111,81,130,113,0,107,99],
[102,82,100,124,87,126,99,104,0,89],
[105,115,122,141,131,126,94,112,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,117,97,109,112,120,119,104],
[105,0,89,110,107,98,111,104,118,99],
[102,122,0,111,115,105,116,116,109,110],
[94,101,100,0,88,101,102,115,104,100],
[114,104,96,123,0,113,111,126,126,105],
[102,113,106,110,98,0,112,111,111,100],
[99,100,95,109,100,99,0,116,110,98],
[91,107,95,96,85,100,95,0,107,89],
[92,93,102,107,85,100,101,104,0,95],
[107,112,101,111,106,111,113,122,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,92,116,114,114,119,105,117,113],
[107,0,101,103,98,116,104,103,103,109],
[119,110,0,105,116,116,127,108,118,101],
[95,108,106,0,103,104,110,101,118,107],
[97,113,95,108,0,109,112,103,119,106],
[97,95,95,107,102,0,114,98,122,91],
[92,107,84,101,99,97,0,93,94,101],
[106,108,103,110,108,113,118,0,116,114],
[94,108,93,93,92,89,117,95,0,109],
[98,102,110,104,105,120,110,97,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,116,87,114,142,105,93,113,101],
[90,0,108,96,110,118,104,103,93,105],
[95,103,0,95,92,143,114,110,110,86],
[124,115,116,0,124,135,89,120,122,124],
[97,101,119,87,0,149,113,112,117,83],
[69,93,68,76,62,0,74,69,75,85],
[106,107,97,122,98,137,0,112,105,112],
[118,108,101,91,99,142,99,0,123,116],
[98,118,101,89,94,136,106,88,0,112],
[110,106,125,87,128,126,99,95,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,97,110,123,126,112,113,127],
[108,0,109,103,107,109,119,102,102,115],
[99,102,0,95,102,113,90,100,117,123],
[114,108,116,0,98,118,111,102,93,135],
[101,104,109,113,0,112,95,102,101,130],
[88,102,98,93,99,0,94,96,99,100],
[85,92,121,100,116,117,0,99,104,106],
[99,109,111,109,109,115,112,0,105,121],
[98,109,94,118,110,112,107,106,0,131],
[84,96,88,76,81,111,105,90,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,122,117,110,100,122,95,112,114],
[105,0,114,114,114,101,113,105,100,119],
[89,97,0,104,102,93,104,101,90,109],
[94,97,107,0,101,101,114,99,100,119],
[101,97,109,110,0,110,112,110,105,109],
[111,110,118,110,101,0,117,116,112,123],
[89,98,107,97,99,94,0,103,106,113],
[116,106,110,112,101,95,108,0,107,130],
[99,111,121,111,106,99,105,104,0,115],
[97,92,102,92,102,88,98,81,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,119,106,101,96,106,108,117],
[100,0,98,127,101,98,115,119,107,103],
[102,113,0,121,106,121,134,122,122,120],
[92,84,90,0,107,84,87,102,97,107],
[105,110,105,104,0,103,114,99,113,101],
[110,113,90,127,108,0,106,119,99,111],
[115,96,77,124,97,105,0,110,110,116],
[105,92,89,109,112,92,101,0,109,121],
[103,104,89,114,98,112,101,102,0,120],
[94,108,91,104,110,100,95,90,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,113,124,120,85,112,103,99,100],
[101,0,110,107,85,106,99,106,92,93],
[98,101,0,108,117,93,95,81,102,85],
[87,104,103,0,118,72,91,110,91,88],
[91,126,94,93,0,102,98,99,91,85],
[126,105,118,139,109,0,116,119,113,111],
[99,112,116,120,113,95,0,119,97,88],
[108,105,130,101,112,92,92,0,104,98],
[112,119,109,120,120,98,114,107,0,121],
[111,118,126,123,126,100,123,113,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,71,133,91,74,65,105,114,130],
[116,0,98,112,88,123,89,123,119,138],
[140,113,0,174,130,136,145,117,92,134],
[78,99,37,0,101,75,77,84,60,141],
[120,123,81,110,0,99,59,103,117,142],
[137,88,75,136,112,0,89,107,95,176],
[146,122,66,134,152,122,0,132,128,153],
[106,88,94,127,108,104,79,0,130,164],
[97,92,119,151,94,116,83,81,0,144],
[81,73,77,70,69,35,58,47,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,117,117,129,119,123,118,117,96],
[103,0,107,102,115,101,108,104,105,90],
[94,104,0,99,112,89,118,105,91,99],
[94,109,112,0,114,104,120,110,101,98],
[82,96,99,97,0,89,112,107,98,95],
[92,110,122,107,122,0,117,108,103,108],
[88,103,93,91,99,94,0,108,92,89],
[93,107,106,101,104,103,103,0,104,100],
[94,106,120,110,113,108,119,107,0,104],
[115,121,112,113,116,103,122,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,106,103,110,106,113,102,105,119],
[95,0,107,93,88,93,92,100,87,100],
[105,104,0,96,109,101,102,105,101,107],
[108,118,115,0,116,105,101,102,111,114],
[101,123,102,95,0,101,111,116,109,112],
[105,118,110,106,110,0,114,115,107,108],
[98,119,109,110,100,97,0,114,105,115],
[109,111,106,109,95,96,97,0,96,106],
[106,124,110,100,102,104,106,115,0,110],
[92,111,104,97,99,103,96,105,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,96,89,94,88,87,92,72,93],
[110,0,116,126,127,98,118,103,84,116],
[115,95,0,102,112,83,97,85,82,97],
[122,85,109,0,114,93,117,98,115,122],
[117,84,99,97,0,69,96,98,87,116],
[123,113,128,118,142,0,128,97,105,145],
[124,93,114,94,115,83,0,102,98,132],
[119,108,126,113,113,114,109,0,93,129],
[139,127,129,96,124,106,113,118,0,112],
[118,95,114,89,95,66,79,82,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,118,113,103,114,116,104,100],
[109,0,100,114,110,100,109,117,108,107],
[109,111,0,121,109,106,122,116,105,114],
[93,97,90,0,95,88,95,110,100,95],
[98,101,102,116,0,94,107,108,109,101],
[108,111,105,123,117,0,122,120,112,106],
[97,102,89,116,104,89,0,101,99,109],
[95,94,95,101,103,91,110,0,94,99],
[107,103,106,111,102,99,112,117,0,106],
[111,104,97,116,110,105,102,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,99,106,111,104,109,88,116,102],
[103,0,87,119,105,92,96,107,106,107],
[112,124,0,109,119,119,114,102,119,116],
[105,92,102,0,91,100,93,96,103,101],
[100,106,92,120,0,113,106,99,109,113],
[107,119,92,111,98,0,116,108,122,115],
[102,115,97,118,105,95,0,98,113,116],
[123,104,109,115,112,103,113,0,104,107],
[95,105,92,108,102,89,98,107,0,100],
[109,104,95,110,98,96,95,104,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,99,102,100,103,96,94,95],
[112,0,104,103,101,101,98,103,104,99],
[112,107,0,98,103,98,101,94,98,92],
[112,108,113,0,107,104,104,110,109,98],
[109,110,108,104,0,112,113,105,98,101],
[111,110,113,107,99,0,117,110,110,107],
[108,113,110,107,98,94,0,106,103,104],
[115,108,117,101,106,101,105,0,95,99],
[117,107,113,102,113,101,108,116,0,104],
[116,112,119,113,110,104,107,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,90,109,89,103,113,110,121,111],
[93,0,101,115,79,84,88,110,102,104],
[121,110,0,117,109,99,107,118,130,124],
[102,96,94,0,90,90,83,101,94,96],
[122,132,102,121,0,97,113,120,108,124],
[108,127,112,121,114,0,102,124,110,123],
[98,123,104,128,98,109,0,119,107,115],
[101,101,93,110,91,87,92,0,104,98],
[90,109,81,117,103,101,104,107,0,114],
[100,107,87,115,87,88,96,113,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,82,93,91,101,102,133,100,101],
[104,0,89,107,85,108,110,132,86,107],
[129,122,0,109,105,97,98,136,97,115],
[118,104,102,0,128,97,103,137,98,105],
[120,126,106,83,0,89,104,152,106,99],
[110,103,114,114,122,0,126,151,91,124],
[109,101,113,108,107,85,0,147,91,104],
[78,79,75,74,59,60,64,0,54,64],
[111,125,114,113,105,120,120,157,0,126],
[110,104,96,106,112,87,107,147,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,109,107,121,113,108,96,110,134],
[96,0,114,121,105,111,104,98,96,125],
[102,97,0,119,94,115,118,99,111,138],
[104,90,92,0,107,107,92,102,98,123],
[90,106,117,104,0,115,104,109,92,131],
[98,100,96,104,96,0,93,105,89,130],
[103,107,93,119,107,118,0,108,111,149],
[115,113,112,109,102,106,103,0,89,131],
[101,115,100,113,119,122,100,122,0,132],
[77,86,73,88,80,81,62,80,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,90,96,98,97,100,97,111,117],
[112,0,100,123,106,101,110,108,119,129],
[121,111,0,111,95,135,134,113,120,116],
[115,88,100,0,95,101,101,119,109,121],
[113,105,116,116,0,119,121,130,116,120],
[114,110,76,110,92,0,110,115,96,116],
[111,101,77,110,90,101,0,115,110,122],
[114,103,98,92,81,96,96,0,112,130],
[100,92,91,102,95,115,101,99,0,110],
[94,82,95,90,91,95,89,81,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,86,69,92,93,82,102,74,108],
[101,0,97,85,98,98,89,108,94,114],
[125,114,0,91,101,112,98,116,107,95],
[142,126,120,0,96,125,106,103,96,130],
[119,113,110,115,0,101,106,96,98,117],
[118,113,99,86,110,0,84,87,79,112],
[129,122,113,105,105,127,0,110,121,124],
[109,103,95,108,115,124,101,0,85,103],
[137,117,104,115,113,132,90,126,0,115],
[103,97,116,81,94,99,87,108,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,112,133,131,87,152,97,122,92],
[85,0,121,117,92,65,151,80,91,74],
[99,90,0,104,144,77,151,92,115,98],
[78,94,107,0,109,68,136,107,100,70],
[80,119,67,102,0,82,127,99,81,64],
[124,146,134,143,129,0,151,100,98,102],
[59,60,60,75,84,60,0,76,48,67],
[114,131,119,104,112,111,135,0,128,123],
[89,120,96,111,130,113,163,83,0,98],
[119,137,113,141,147,109,144,88,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,110,99,96,105,103,99,98,110],
[113,0,105,98,99,104,105,102,111,115],
[101,106,0,88,93,93,93,101,93,103],
[112,113,123,0,113,107,104,98,106,125],
[115,112,118,98,0,114,113,107,124,120],
[106,107,118,104,97,0,109,105,119,115],
[108,106,118,107,98,102,0,97,113,124],
[112,109,110,113,104,106,114,0,104,124],
[113,100,118,105,87,92,98,107,0,108],
[101,96,108,86,91,96,87,87,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,100,112,103,99,114,93,104],
[112,0,100,97,113,99,100,113,109,91],
[109,111,0,104,117,111,112,120,111,111],
[111,114,107,0,112,105,101,115,113,116],
[99,98,94,99,0,100,109,120,99,98],
[108,112,100,106,111,0,106,107,115,112],
[112,111,99,110,102,105,0,117,102,106],
[97,98,91,96,91,104,94,0,113,102],
[118,102,100,98,112,96,109,98,0,105],
[107,120,100,95,113,99,105,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,123,115,106,111,102,122,117,125],
[104,0,114,115,106,100,105,121,111,117],
[88,97,0,100,97,94,99,108,109,110],
[96,96,111,0,97,101,83,104,106,120],
[105,105,114,114,0,106,108,121,105,126],
[100,111,117,110,105,0,108,108,112,124],
[109,106,112,128,103,103,0,114,108,123],
[89,90,103,107,90,103,97,0,94,125],
[94,100,102,105,106,99,103,117,0,122],
[86,94,101,91,85,87,88,86,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,90,107,83,74,96,93,82,121],
[111,0,117,115,108,86,124,89,121,148],
[121,94,0,108,125,89,124,96,110,119],
[104,96,103,0,90,101,106,101,99,98],
[128,103,86,121,0,125,95,122,109,112],
[137,125,122,110,86,0,121,121,100,108],
[115,87,87,105,116,90,0,103,106,120],
[118,122,115,110,89,90,108,0,100,103],
[129,90,101,112,102,111,105,111,0,117],
[90,63,92,113,99,103,91,108,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,115,104,98,115,108,110,106],
[106,0,100,109,115,91,102,103,107,118],
[108,111,0,109,117,88,106,102,115,103],
[96,102,102,0,114,94,104,99,115,110],
[107,96,94,97,0,98,108,96,110,99],
[113,120,123,117,113,0,102,101,124,119],
[96,109,105,107,103,109,0,94,126,106],
[103,108,109,112,115,110,117,0,106,120],
[101,104,96,96,101,87,85,105,0,99],
[105,93,108,101,112,92,105,91,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,105,107,116,104,102,101,117,97],
[116,0,103,120,112,107,113,105,125,92],
[106,108,0,118,112,104,114,101,114,97],
[104,91,93,0,106,107,104,97,111,79],
[95,99,99,105,0,102,118,112,116,93],
[107,104,107,104,109,0,114,109,111,96],
[109,98,97,107,93,97,0,105,111,106],
[110,106,110,114,99,102,106,0,119,99],
[94,86,97,100,95,100,100,92,0,88],
[114,119,114,132,118,115,105,112,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,88,96,88,107,103,97,99,114],
[115,0,93,105,88,105,111,112,112,109],
[123,118,0,105,120,93,107,101,120,111],
[115,106,106,0,106,89,105,105,116,118],
[123,123,91,105,0,110,120,102,109,145],
[104,106,118,122,101,0,114,81,124,129],
[108,100,104,106,91,97,0,103,105,113],
[114,99,110,106,109,130,108,0,129,123],
[112,99,91,95,102,87,106,82,0,122],
[97,102,100,93,66,82,98,88,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,94,101,103,106,93,105,97],
[103,0,109,86,108,98,105,90,105,96],
[102,102,0,78,89,83,106,93,92,90],
[117,125,133,0,100,114,119,125,131,100],
[110,103,122,111,0,107,117,102,110,99],
[108,113,128,97,104,0,107,118,112,107],
[105,106,105,92,94,104,0,103,107,98],
[118,121,118,86,109,93,108,0,113,94],
[106,106,119,80,101,99,104,98,0,98],
[114,115,121,111,112,104,113,117,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,100,107,119,106,106,110,109,109],
[99,0,112,105,115,97,95,107,96,97],
[111,99,0,106,118,105,93,107,101,107],
[104,106,105,0,119,93,94,112,103,106],
[92,96,93,92,0,95,98,107,97,98],
[105,114,106,118,116,0,101,115,112,112],
[105,116,118,117,113,110,0,124,104,115],
[101,104,104,99,104,96,87,0,93,107],
[102,115,110,108,114,99,107,118,0,110],
[102,114,104,105,113,99,96,104,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,96,100,106,92,96,91,109],
[106,0,102,104,102,106,100,107,103,114],
[110,109,0,97,99,108,96,107,102,118],
[115,107,114,0,115,112,108,102,109,120],
[111,109,112,96,0,106,113,114,104,107],
[105,105,103,99,105,0,90,102,92,99],
[119,111,115,103,98,121,0,109,103,123],
[115,104,104,109,97,109,102,0,109,115],
[120,108,109,102,107,119,108,102,0,121],
[102,97,93,91,104,112,88,96,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,106,90,88,101,88,100,89,106],
[128,0,128,114,112,118,105,120,114,136],
[105,83,0,90,90,85,94,106,101,97],
[121,97,121,0,117,112,116,116,113,118],
[123,99,121,94,0,114,104,109,101,101],
[110,93,126,99,97,0,93,102,110,116],
[123,106,117,95,107,118,0,110,102,114],
[111,91,105,95,102,109,101,0,100,116],
[122,97,110,98,110,101,109,111,0,113],
[105,75,114,93,110,95,97,95,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,117,123,116,110,119,109,105,116],
[101,0,108,107,104,108,108,102,103,108],
[94,103,0,113,108,110,112,112,105,114],
[88,104,98,0,96,95,94,96,91,99],
[95,107,103,115,0,104,101,99,97,104],
[101,103,101,116,107,0,108,108,112,103],
[92,103,99,117,110,103,0,102,90,99],
[102,109,99,115,112,103,109,0,106,107],
[106,108,106,120,114,99,121,105,0,116],
[95,103,97,112,107,108,112,104,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,106,107,101,98,112,104,100,102],
[104,0,99,103,104,97,109,110,98,109],
[105,112,0,110,100,121,128,115,112,120],
[104,108,101,0,114,114,120,119,115,110],
[110,107,111,97,0,97,120,117,116,117],
[113,114,90,97,114,0,107,107,104,114],
[99,102,83,91,91,104,0,101,108,93],
[107,101,96,92,94,104,110,0,95,100],
[111,113,99,96,95,107,103,116,0,111],
[109,102,91,101,94,97,118,111,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,111,100,102,105,105,99,108],
[112,0,110,106,105,118,116,105,105,103],
[105,101,0,101,104,114,110,111,100,103],
[100,105,110,0,98,104,115,106,102,114],
[111,106,107,113,0,106,117,104,114,107],
[109,93,97,107,105,0,99,106,107,95],
[106,95,101,96,94,112,0,101,112,106],
[106,106,100,105,107,105,110,0,116,110],
[112,106,111,109,97,104,99,95,0,95],
[103,108,108,97,104,116,105,101,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,98,83,90,89,97,102,93,91],
[148,0,111,118,101,122,101,137,134,100],
[113,100,0,118,100,114,107,112,99,101],
[128,93,93,0,97,110,91,111,98,91],
[121,110,111,114,0,102,115,114,112,112],
[122,89,97,101,109,0,106,125,105,96],
[114,110,104,120,96,105,0,119,108,102],
[109,74,99,100,97,86,92,0,100,103],
[118,77,112,113,99,106,103,111,0,103],
[120,111,110,120,99,115,109,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,99,95,92,101,94,102,104,113],
[106,0,98,104,101,99,120,104,113,108],
[112,113,0,110,99,106,112,115,106,117],
[116,107,101,0,105,100,111,99,103,111],
[119,110,112,106,0,108,104,103,104,112],
[110,112,105,111,103,0,101,103,103,104],
[117,91,99,100,107,110,0,102,109,121],
[109,107,96,112,108,108,109,0,110,117],
[107,98,105,108,107,108,102,101,0,128],
[98,103,94,100,99,107,90,94,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,107,112,116,124,107,93,103,90],
[90,0,103,102,108,111,106,84,96,97],
[104,108,0,86,103,113,97,92,83,109],
[99,109,125,0,104,113,93,102,124,99],
[95,103,108,107,0,133,106,113,93,111],
[87,100,98,98,78,0,93,103,101,114],
[104,105,114,118,105,118,0,102,122,135],
[118,127,119,109,98,108,109,0,97,116],
[108,115,128,87,118,110,89,114,0,111],
[121,114,102,112,100,97,76,95,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,120,91,110,98,115,103,96,85],
[76,0,104,88,83,86,104,92,96,104],
[91,107,0,101,111,110,84,84,107,113],
[120,123,110,0,98,112,118,114,117,114],
[101,128,100,113,0,104,108,89,101,104],
[113,125,101,99,107,0,108,92,110,86],
[96,107,127,93,103,103,0,104,114,120],
[108,119,127,97,122,119,107,0,114,129],
[115,115,104,94,110,101,97,97,0,109],
[126,107,98,97,107,125,91,82,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,104,115,101,113,91,94,101,107],
[89,0,112,113,111,104,111,91,104,107],
[107,99,0,119,116,107,107,91,105,104],
[96,98,92,0,97,99,88,84,95,91],
[110,100,95,114,0,103,103,97,110,102],
[98,107,104,112,108,0,106,91,99,99],
[120,100,104,123,108,105,0,109,109,95],
[117,120,120,127,114,120,102,0,120,122],
[110,107,106,116,101,112,102,91,0,98],
[104,104,107,120,109,112,116,89,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,97,91,79,100,110,92,104,97],
[116,0,122,85,107,110,123,114,111,107],
[114,89,0,101,109,101,100,97,111,93],
[120,126,110,0,101,117,126,107,120,103],
[132,104,102,110,0,117,125,103,104,114],
[111,101,110,94,94,0,113,89,109,103],
[101,88,111,85,86,98,0,94,98,98],
[119,97,114,104,108,122,117,0,115,114],
[107,100,100,91,107,102,113,96,0,89],
[114,104,118,108,97,108,113,97,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,105,116,97,106,109,112,101,105],
[97,0,98,103,99,93,108,95,94,93],
[106,113,0,99,104,104,102,105,106,109],
[95,108,112,0,96,115,99,103,106,105],
[114,112,107,115,0,115,107,113,116,104],
[105,118,107,96,96,0,100,111,97,110],
[102,103,109,112,104,111,0,115,103,111],
[99,116,106,108,98,100,96,0,97,102],
[110,117,105,105,95,114,108,114,0,100],
[106,118,102,106,107,101,100,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,74,82,106,149,83,117,78,88],
[142,0,121,98,154,147,114,153,102,130],
[137,90,0,63,117,126,105,143,112,83],
[129,113,148,0,127,151,113,169,91,113],
[105,57,94,84,0,127,44,150,101,90],
[62,64,85,60,84,0,70,126,71,73],
[128,97,106,98,167,141,0,143,115,115],
[94,58,68,42,61,85,68,0,51,39],
[133,109,99,120,110,140,96,160,0,108],
[123,81,128,98,121,138,96,172,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,105,125,116,110,106,108,108,134],
[94,0,94,95,119,91,116,97,97,96],
[106,117,0,95,108,112,116,95,120,119],
[86,116,116,0,121,95,128,102,118,122],
[95,92,103,90,0,96,99,82,110,98],
[101,120,99,116,115,0,111,108,110,115],
[105,95,95,83,112,100,0,100,105,99],
[103,114,116,109,129,103,111,0,98,127],
[103,114,91,93,101,101,106,113,0,107],
[77,115,92,89,113,96,112,84,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,117,103,98,105,98,110,114],
[103,0,96,113,94,98,97,97,97,112],
[111,115,0,113,110,100,110,96,100,106],
[94,98,98,0,97,85,96,90,92,102],
[108,117,101,114,0,97,114,109,98,104],
[113,113,111,126,114,0,112,103,111,118],
[106,114,101,115,97,99,0,102,99,108],
[113,114,115,121,102,108,109,0,105,120],
[101,114,111,119,113,100,112,106,0,124],
[97,99,105,109,107,93,103,91,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,98,95,105,108,107,99,92,96],
[104,0,98,93,99,112,105,106,101,95],
[113,113,0,100,103,118,116,114,101,105],
[116,118,111,0,113,124,121,116,103,107],
[106,112,108,98,0,106,111,101,104,105],
[103,99,93,87,105,0,94,100,87,91],
[104,106,95,90,100,117,0,99,81,105],
[112,105,97,95,110,111,112,0,100,106],
[119,110,110,108,107,124,130,111,0,104],
[115,116,106,104,106,120,106,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,95,97,112,98,101,99,101,97],
[110,0,101,92,106,81,94,96,95,104],
[116,110,0,96,107,92,105,100,104,102],
[114,119,115,0,116,108,108,103,110,111],
[99,105,104,95,0,101,102,102,96,101],
[113,130,119,103,110,0,107,108,109,109],
[110,117,106,103,109,104,0,103,95,111],
[112,115,111,108,109,103,108,0,107,115],
[110,116,107,101,115,102,116,104,0,107],
[114,107,109,100,110,102,100,96,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,114,116,120,108,115,105,101,126],
[95,0,105,100,127,85,99,105,92,101],
[97,106,0,102,109,89,101,95,82,97],
[95,111,109,0,109,109,92,95,109,117],
[91,84,102,102,0,99,88,98,105,117],
[103,126,122,102,112,0,109,108,111,121],
[96,112,110,119,123,102,0,113,113,122],
[106,106,116,116,113,103,98,0,91,102],
[110,119,129,102,106,100,98,120,0,123],
[85,110,114,94,94,90,89,109,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,107,117,116,106,107,125,112],
[106,0,108,112,110,109,98,102,117,112],
[98,103,0,110,103,105,97,101,107,107],
[104,99,101,0,105,104,103,101,120,96],
[94,101,108,106,0,98,98,99,99,98],
[95,102,106,107,113,0,103,96,99,100],
[105,113,114,108,113,108,0,108,108,99],
[104,109,110,110,112,115,103,0,108,107],
[86,94,104,91,112,112,103,103,0,103],
[99,99,104,115,113,111,112,104,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,111,100,115,124,130,118,106,106],
[135,0,135,123,100,114,136,162,99,132],
[100,76,0,89,121,97,138,122,116,113],
[111,88,122,0,113,109,114,127,110,113],
[96,111,90,98,0,106,105,115,101,102],
[87,97,114,102,105,0,109,100,95,104],
[81,75,73,97,106,102,0,97,87,107],
[93,49,89,84,96,111,114,0,87,101],
[105,112,95,101,110,116,124,124,0,116],
[105,79,98,98,109,107,104,110,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,130,149,130,122,121,114,98,126],
[100,0,112,126,135,116,112,108,125,117],
[81,99,0,100,99,83,112,91,88,97],
[62,85,111,0,94,95,88,59,88,81],
[81,76,112,117,0,104,103,81,105,98],
[89,95,128,116,107,0,105,93,106,110],
[90,99,99,123,108,106,0,101,90,95],
[97,103,120,152,130,118,110,0,116,122],
[113,86,123,123,106,105,121,95,0,122],
[85,94,114,130,113,101,116,89,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,107,99,106,111,106,120,93,111],
[112,0,104,101,110,111,113,108,102,101],
[104,107,0,111,104,105,115,112,106,108],
[112,110,100,0,110,105,125,110,107,116],
[105,101,107,101,0,108,95,115,100,102],
[100,100,106,106,103,0,110,106,103,102],
[105,98,96,86,116,101,0,102,102,113],
[91,103,99,101,96,105,109,0,86,105],
[118,109,105,104,111,108,109,125,0,99],
[100,110,103,95,109,109,98,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,102,100,108,111,111,112,106,105],
[100,0,99,104,112,105,106,105,104,111],
[109,112,0,115,120,105,117,111,119,112],
[111,107,96,0,108,95,115,97,106,114],
[103,99,91,103,0,92,103,93,98,96],
[100,106,106,116,119,0,117,101,102,111],
[100,105,94,96,108,94,0,102,93,106],
[99,106,100,114,118,110,109,0,111,104],
[105,107,92,105,113,109,118,100,0,105],
[106,100,99,97,115,100,105,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,105,92,104,109,86,108,104,97],
[103,0,96,91,88,103,85,104,106,96],
[106,115,0,101,84,93,92,87,101,90],
[119,120,110,0,95,120,90,88,106,103],
[107,123,127,116,0,115,116,104,119,102],
[102,108,118,91,96,0,89,101,107,98],
[125,126,119,121,95,122,0,95,106,110],
[103,107,124,123,107,110,116,0,113,108],
[107,105,110,105,92,104,105,98,0,97],
[114,115,121,108,109,113,101,103,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,111,67,147,78,50,68,114,139],
[66,0,67,74,103,102,73,82,91,63],
[100,144,0,91,123,86,35,122,85,127],
[144,137,120,0,159,145,129,102,133,97],
[64,108,88,52,0,56,28,46,59,118],
[133,109,125,66,155,0,76,107,76,120],
[161,138,176,82,183,135,0,171,156,120],
[143,129,89,109,165,104,40,0,109,127],
[97,120,126,78,152,135,55,102,0,125],
[72,148,84,114,93,91,91,84,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,123,126,114,113,125,138,134,103],
[102,0,114,97,114,91,101,98,112,100],
[88,97,0,108,118,108,114,112,140,98],
[85,114,103,0,119,117,127,108,116,117],
[97,97,93,92,0,102,122,94,99,98],
[98,120,103,94,109,0,115,109,132,116],
[86,110,97,84,89,96,0,98,116,104],
[73,113,99,103,117,102,113,0,149,102],
[77,99,71,95,112,79,95,62,0,88],
[108,111,113,94,113,95,107,109,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,115,107,125,103,116,110,111,109],
[99,0,109,104,107,92,110,98,100,100],
[96,102,0,101,122,94,112,101,106,104],
[104,107,110,0,113,108,115,106,108,102],
[86,104,89,98,0,86,102,81,98,93],
[108,119,117,103,125,0,116,104,116,115],
[95,101,99,96,109,95,0,88,106,103],
[101,113,110,105,130,107,123,0,111,111],
[100,111,105,103,113,95,105,100,0,105],
[102,111,107,109,118,96,108,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,118,125,111,111,96,103,107,94],
[108,0,111,120,98,98,103,91,109,87],
[93,100,0,117,106,99,100,108,108,94],
[86,91,94,0,95,98,83,96,98,87],
[100,113,105,116,0,109,103,111,101,103],
[100,113,112,113,102,0,106,107,101,95],
[115,108,111,128,108,105,0,109,115,100],
[108,120,103,115,100,104,102,0,104,108],
[104,102,103,113,110,110,96,107,0,102],
[117,124,117,124,108,116,111,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,91,52,72,96,70,63,87,93],
[139,0,94,68,92,130,97,98,136,111],
[120,117,0,60,100,136,99,137,107,121],
[159,143,151,0,121,129,100,150,133,140],
[139,119,111,90,0,118,110,138,142,108],
[115,81,75,82,93,0,82,101,75,106],
[141,114,112,111,101,129,0,106,98,128],
[148,113,74,61,73,110,105,0,109,95],
[124,75,104,78,69,136,113,102,0,113],
[118,100,90,71,103,105,83,116,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,116,97,117,104,110,94,90,113],
[92,0,111,99,95,111,90,71,107,108],
[95,100,0,104,74,88,88,82,90,79],
[114,112,107,0,93,105,112,109,105,107],
[94,116,137,118,0,108,91,96,115,107],
[107,100,123,106,103,0,98,86,107,103],
[101,121,123,99,120,113,0,97,95,133],
[117,140,129,102,115,125,114,0,122,121],
[121,104,121,106,96,104,116,89,0,99],
[98,103,132,104,104,108,78,90,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,99,101,99,100,95,108,92,90],
[110,0,108,95,100,112,110,112,106,109],
[112,103,0,92,105,98,113,107,108,96],
[110,116,119,0,103,103,118,104,105,102],
[112,111,106,108,0,103,97,114,106,103],
[111,99,113,108,108,0,106,116,108,100],
[116,101,98,93,114,105,0,120,101,100],
[103,99,104,107,97,95,91,0,92,100],
[119,105,103,106,105,103,110,119,0,102],
[121,102,115,109,108,111,111,111,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,110,111,97,115,117,110,99,93],
[113,0,113,116,114,103,129,121,107,116],
[101,98,0,102,88,102,114,118,98,97],
[100,95,109,0,91,116,133,117,120,104],
[114,97,123,120,0,105,130,118,117,107],
[96,108,109,95,106,0,106,102,103,97],
[94,82,97,78,81,105,0,90,82,80],
[101,90,93,94,93,109,121,0,106,102],
[112,104,113,91,94,108,129,105,0,97],
[118,95,114,107,104,114,131,109,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,118,91,133,101,120,117,134,136],
[74,0,129,67,133,82,150,116,99,137],
[93,82,0,54,93,91,108,102,114,128],
[120,144,157,0,138,106,141,135,92,155],
[78,78,118,73,0,58,99,86,78,103],
[110,129,120,105,153,0,142,146,121,146],
[91,61,103,70,112,69,0,92,81,116],
[94,95,109,76,125,65,119,0,104,139],
[77,112,97,119,133,90,130,107,0,137],
[75,74,83,56,108,65,95,72,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,108,100,114,102,112,97,112],
[106,0,96,102,100,111,101,108,100,117],
[113,115,0,111,101,117,110,116,115,115],
[103,109,100,0,107,105,107,122,115,114],
[111,111,110,104,0,119,109,118,107,115],
[97,100,94,106,92,0,95,97,98,99],
[109,110,101,104,102,116,0,111,116,124],
[99,103,95,89,93,114,100,0,99,118],
[114,111,96,96,104,113,95,112,0,112],
[99,94,96,97,96,112,87,93,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,94,104,117,103,113,110,101],
[108,0,130,100,107,95,91,93,123,87],
[109,81,0,102,95,74,96,103,85,92],
[117,111,109,0,112,115,97,123,110,118],
[107,104,116,99,0,98,109,96,93,90],
[94,116,137,96,113,0,111,116,103,101],
[108,120,115,114,102,100,0,121,120,112],
[98,118,108,88,115,95,90,0,115,106],
[101,88,126,101,118,108,91,96,0,80],
[110,124,119,93,121,110,99,105,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,85,71,86,91,133,91,94,105],
[82,0,131,110,132,113,108,112,108,120],
[126,80,0,117,85,75,97,105,78,100],
[140,101,94,0,113,117,134,110,97,102],
[125,79,126,98,0,47,95,79,107,90],
[120,98,136,94,164,0,104,116,121,124],
[78,103,114,77,116,107,0,95,126,90],
[120,99,106,101,132,95,116,0,98,89],
[117,103,133,114,104,90,85,113,0,115],
[106,91,111,109,121,87,121,122,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,93,98,114,105,117,93,114,101],
[107,0,107,92,103,107,127,107,120,113],
[118,104,0,110,122,124,118,111,124,114],
[113,119,101,0,101,129,126,120,125,105],
[97,108,89,110,0,124,115,92,111,104],
[106,104,87,82,87,0,100,101,112,95],
[94,84,93,85,96,111,0,97,105,96],
[118,104,100,91,119,110,114,0,115,114],
[97,91,87,86,100,99,106,96,0,92],
[110,98,97,106,107,116,115,97,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,106,93,99,116,119,100,100,93],
[97,0,107,97,77,104,101,114,105,109],
[105,104,0,84,106,122,95,97,93,94],
[118,114,127,0,109,131,121,101,110,107],
[112,134,105,102,0,123,119,111,116,104],
[95,107,89,80,88,0,88,85,94,87],
[92,110,116,90,92,123,0,106,123,97],
[111,97,114,110,100,126,105,0,107,84],
[111,106,118,101,95,117,88,104,0,94],
[118,102,117,104,107,124,114,127,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,107,92,96,106,101,99,93,100],
[112,0,111,113,99,96,106,120,90,106],
[104,100,0,105,102,94,98,108,105,108],
[119,98,106,0,100,97,100,103,94,115],
[115,112,109,111,0,99,110,112,117,117],
[105,115,117,114,112,0,110,114,111,119],
[110,105,113,111,101,101,0,105,106,108],
[112,91,103,108,99,97,106,0,103,115],
[118,121,106,117,94,100,105,108,0,115],
[111,105,103,96,94,92,103,96,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,110,126,101,122,113,124,117],
[109,0,104,122,121,99,119,115,124,103],
[112,107,0,122,118,104,119,119,122,118],
[101,89,89,0,103,91,103,98,108,103],
[85,90,93,108,0,106,95,101,105,103],
[110,112,107,120,105,0,109,108,115,113],
[89,92,92,108,116,102,0,109,118,103],
[98,96,92,113,110,103,102,0,120,116],
[87,87,89,103,106,96,93,91,0,90],
[94,108,93,108,108,98,108,95,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,96,103,108,97,114,109,113,100],
[101,0,115,108,109,109,114,101,117,108],
[115,96,0,111,110,97,109,100,112,102],
[108,103,100,0,101,85,112,102,110,98],
[103,102,101,110,0,102,102,96,101,108],
[114,102,114,126,109,0,109,103,117,115],
[97,97,102,99,109,102,0,98,105,102],
[102,110,111,109,115,108,113,0,111,110],
[98,94,99,101,110,94,106,100,0,105],
[111,103,109,113,103,96,109,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,81,99,111,118,90,91,127,98],
[84,0,123,89,90,102,93,104,129,114],
[130,88,0,93,68,113,100,68,147,89],
[112,122,118,0,109,132,130,127,129,99],
[100,121,143,102,0,123,123,116,135,111],
[93,109,98,79,88,0,81,98,119,108],
[121,118,111,81,88,130,0,119,121,111],
[120,107,143,84,95,113,92,0,136,108],
[84,82,64,82,76,92,90,75,0,98],
[113,97,122,112,100,103,100,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,94,104,109,104,109,114,108],
[103,0,92,90,96,111,104,108,114,98],
[108,119,0,105,103,113,111,122,118,108],
[117,121,106,0,110,117,121,125,121,104],
[107,115,108,101,0,107,111,115,113,110],
[102,100,98,94,104,0,91,115,106,104],
[107,107,100,90,100,120,0,113,103,110],
[102,103,89,86,96,96,98,0,97,107],
[97,97,93,90,98,105,108,114,0,102],
[103,113,103,107,101,107,101,104,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,107,109,98,126,114,112,114,108],
[85,0,108,105,103,121,137,106,98,125],
[104,103,0,117,104,130,120,109,113,110],
[102,106,94,0,107,142,112,106,119,123],
[113,108,107,104,0,120,124,104,113,124],
[85,90,81,69,91,0,120,100,99,91],
[97,74,91,99,87,91,0,96,96,78],
[99,105,102,105,107,111,115,0,91,119],
[97,113,98,92,98,112,115,120,0,104],
[103,86,101,88,87,120,133,92,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,94,121,107,109,102,112,113,109],
[106,0,104,118,111,110,110,124,112,124],
[117,107,0,120,121,116,105,107,110,122],
[90,93,91,0,98,99,92,110,91,122],
[104,100,90,113,0,106,108,135,104,116],
[102,101,95,112,105,0,106,116,106,128],
[109,101,106,119,103,105,0,117,100,123],
[99,87,104,101,76,95,94,0,89,109],
[98,99,101,120,107,105,111,122,0,123],
[102,87,89,89,95,83,88,102,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,107,98,109,132,124,112,87,123],
[87,0,123,107,108,146,126,97,122,131],
[104,88,0,107,118,144,135,110,99,125],
[113,104,104,0,95,146,114,114,94,121],
[102,103,93,116,0,146,134,108,108,157],
[79,65,67,65,65,0,82,74,68,94],
[87,85,76,97,77,129,0,67,103,107],
[99,114,101,97,103,137,144,0,107,141],
[124,89,112,117,103,143,108,104,0,127],
[88,80,86,90,54,117,104,70,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,108,104,99,108,105,126,107],
[97,0,104,101,104,98,113,110,130,89],
[99,107,0,110,99,105,114,103,128,98],
[103,110,101,0,108,104,104,108,133,114],
[107,107,112,103,0,93,109,88,125,97],
[112,113,106,107,118,0,104,106,120,105],
[103,98,97,107,102,107,0,109,119,100],
[106,101,108,103,123,105,102,0,118,103],
[85,81,83,78,86,91,92,93,0,86],
[104,122,113,97,114,106,111,108,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,108,124,147,109,124,93,100,121],
[145,0,94,123,135,95,100,123,103,128],
[103,117,0,144,145,144,126,121,89,151],
[87,88,67,0,123,126,85,84,121,121],
[64,76,66,88,0,110,98,72,95,103],
[102,116,67,85,101,0,127,116,84,130],
[87,111,85,126,113,84,0,110,109,108],
[118,88,90,127,139,95,101,0,108,96],
[111,108,122,90,116,127,102,103,0,142],
[90,83,60,90,108,81,103,115,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,98,103,109,117,114,126,106,99],
[112,0,107,105,120,113,102,130,103,101],
[113,104,0,107,118,118,115,132,113,117],
[108,106,104,0,99,110,90,132,123,116],
[102,91,93,112,0,121,104,122,107,112],
[94,98,93,101,90,0,100,123,103,110],
[97,109,96,121,107,111,0,126,119,120],
[85,81,79,79,89,88,85,0,99,82],
[105,108,98,88,104,108,92,112,0,103],
[112,110,94,95,99,101,91,129,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,122,107,66,115,97,68,116],
[103,0,90,127,104,78,110,108,101,118],
[108,121,0,120,111,75,86,92,90,92],
[89,84,91,0,99,77,102,90,81,89],
[104,107,100,112,0,84,89,104,115,98],
[145,133,136,134,127,0,123,97,114,156],
[96,101,125,109,122,88,0,101,90,109],
[114,103,119,121,107,114,110,0,95,103],
[143,110,121,130,96,97,121,116,0,126],
[95,93,119,122,113,55,102,108,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,103,101,109,119,104,108,107],
[109,0,117,108,100,106,114,104,108,108],
[99,94,0,99,96,103,106,102,105,90],
[108,103,112,0,105,107,116,109,102,100],
[110,111,115,106,0,115,118,108,105,104],
[102,105,108,104,96,0,115,112,108,104],
[92,97,105,95,93,96,0,102,100,95],
[107,107,109,102,103,99,109,0,105,97],
[103,103,106,109,106,103,111,106,0,93],
[104,103,121,111,107,107,116,114,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,96,101,105,99,99,89,108,93],
[103,0,105,99,102,104,102,99,103,101],
[115,106,0,99,95,104,110,90,110,104],
[110,112,112,0,121,110,107,103,120,102],
[106,109,116,90,0,108,108,112,103,106],
[112,107,107,101,103,0,97,109,106,108],
[112,109,101,104,103,114,0,109,116,100],
[122,112,121,108,99,102,102,0,110,97],
[103,108,101,91,108,105,95,101,0,103],
[118,110,107,109,105,103,111,114,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,100,86,90,111,95,93,103,96],
[118,0,124,107,98,126,90,114,110,102],
[111,87,0,101,108,100,108,95,101,87],
[125,104,110,0,115,121,96,112,124,114],
[121,113,103,96,0,107,91,96,115,87],
[100,85,111,90,104,0,80,106,97,86],
[116,121,103,115,120,131,0,119,122,112],
[118,97,116,99,115,105,92,0,109,115],
[108,101,110,87,96,114,89,102,0,103],
[115,109,124,97,124,125,99,96,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,101,96,102,97,102,110,94,95],
[112,0,113,108,110,104,100,108,94,108],
[110,98,0,116,126,115,94,98,78,116],
[115,103,95,0,104,103,100,98,95,104],
[109,101,85,107,0,98,102,94,93,101],
[114,107,96,108,113,0,114,116,102,97],
[109,111,117,111,109,97,0,109,119,120],
[101,103,113,113,117,95,102,0,94,109],
[117,117,133,116,118,109,92,117,0,123],
[116,103,95,107,110,114,91,102,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,170,85,102,127,157,122,138,111],
[96,0,99,92,76,89,89,80,81,87],
[41,112,0,17,34,55,89,86,98,37],
[126,119,194,0,118,137,165,151,159,87],
[109,135,177,93,0,145,138,108,133,150],
[84,122,156,74,66,0,124,119,99,89],
[54,122,122,46,73,87,0,93,74,87],
[89,131,125,60,103,92,118,0,91,92],
[73,130,113,52,78,112,137,120,0,83],
[100,124,174,124,61,122,124,119,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,110,113,128,103,89,99,92],
[112,0,110,116,111,105,97,104,103,100],
[109,101,0,112,117,121,112,102,105,114],
[101,95,99,0,98,103,91,98,91,87],
[98,100,94,113,0,116,93,95,97,97],
[83,106,90,108,95,0,97,93,92,82],
[108,114,99,120,118,114,0,104,113,107],
[122,107,109,113,116,118,107,0,103,102],
[112,108,106,120,114,119,98,108,0,109],
[119,111,97,124,114,129,104,109,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,93,96,94,108,109,85,112],
[109,0,123,104,96,100,100,121,88,106],
[110,88,0,98,96,106,103,111,105,110],
[118,107,113,0,99,104,109,114,109,123],
[115,115,115,112,0,99,106,114,91,116],
[117,111,105,107,112,0,112,109,107,122],
[103,111,108,102,105,99,0,117,97,112],
[102,90,100,97,97,102,94,0,84,102],
[126,123,106,102,120,104,114,127,0,112],
[99,105,101,88,95,89,99,109,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,95,93,95,108,98,121,96,92],
[94,0,85,69,98,73,88,103,109,100],
[116,126,0,111,104,103,116,113,115,109],
[118,142,100,0,108,113,105,134,104,111],
[116,113,107,103,0,95,98,126,95,101],
[103,138,108,98,116,0,95,127,119,91],
[113,123,95,106,113,116,0,120,108,101],
[90,108,98,77,85,84,91,0,88,104],
[115,102,96,107,116,92,103,123,0,95],
[119,111,102,100,110,120,110,107,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,86,82,97,73,100,93,87,94],
[118,0,105,96,120,99,108,128,126,120],
[125,106,0,118,105,106,119,116,118,121],
[129,115,93,0,118,111,104,115,119,122],
[114,91,106,93,0,90,112,98,107,106],
[138,112,105,100,121,0,112,130,129,117],
[111,103,92,107,99,99,0,120,109,120],
[118,83,95,96,113,81,91,0,88,106],
[124,85,93,92,104,82,102,123,0,105],
[117,91,90,89,105,94,91,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,109,113,103,131,96,129,106,106],
[89,0,93,76,81,113,77,76,111,120],
[102,118,0,112,85,98,116,99,114,117],
[98,135,99,0,108,116,81,86,98,106],
[108,130,126,103,0,129,98,86,140,114],
[80,98,113,95,82,0,84,73,81,124],
[115,134,95,130,113,127,0,110,127,137],
[82,135,112,125,125,138,101,0,111,138],
[105,100,97,113,71,130,84,100,0,116],
[105,91,94,105,97,87,74,73,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,91,106,111,107,100,112,99,100],
[105,0,95,107,98,103,100,108,96,99],
[120,116,0,122,113,110,110,120,103,104],
[105,104,89,0,110,104,93,109,98,97],
[100,113,98,101,0,103,99,113,100,97],
[104,108,101,107,108,0,108,105,107,101],
[111,111,101,118,112,103,0,118,104,120],
[99,103,91,102,98,106,93,0,100,87],
[112,115,108,113,111,104,107,111,0,101],
[111,112,107,114,114,110,91,124,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,120,119,105,111,118,110,110,108],
[100,0,102,106,101,95,108,108,100,103],
[91,109,0,107,105,104,109,102,108,101],
[92,105,104,0,101,104,118,106,94,106],
[106,110,106,110,0,112,120,107,95,102],
[100,116,107,107,99,0,106,104,104,112],
[93,103,102,93,91,105,0,100,87,85],
[101,103,109,105,104,107,111,0,97,103],
[101,111,103,117,116,107,124,114,0,111],
[103,108,110,105,109,99,126,108,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,115,115,123,110,104,114,118,112],
[105,0,112,108,113,109,100,99,104,107],
[96,99,0,102,106,99,107,102,101,107],
[96,103,109,0,110,103,105,109,107,103],
[88,98,105,101,0,95,88,97,95,98],
[101,102,112,108,116,0,101,111,112,102],
[107,111,104,106,123,110,0,115,113,114],
[97,112,109,102,114,100,96,0,99,108],
[93,107,110,104,116,99,98,112,0,102],
[99,104,104,108,113,109,97,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,115,128,121,125,119,110,114,108],
[119,0,128,116,112,126,98,97,116,106],
[96,83,0,101,97,106,103,95,96,98],
[83,95,110,0,115,102,105,89,97,109],
[90,99,114,96,0,109,101,91,107,107],
[86,85,105,109,102,0,111,115,94,98],
[92,113,108,106,110,100,0,90,87,114],
[101,114,116,122,120,96,121,0,95,111],
[97,95,115,114,104,117,124,116,0,98],
[103,105,113,102,104,113,97,100,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,103,106,98,97,109,101,98,104],
[105,0,101,109,105,98,108,98,104,104],
[108,110,0,112,112,103,120,114,105,105],
[105,102,99,0,103,102,106,103,102,98],
[113,106,99,108,0,104,112,96,101,100],
[114,113,108,109,107,0,112,107,104,105],
[102,103,91,105,99,99,0,89,100,89],
[110,113,97,108,115,104,122,0,112,117],
[113,107,106,109,110,107,111,99,0,110],
[107,107,106,113,111,106,122,94,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,104,110,99,92,96,104,89,108],
[128,0,110,118,125,103,114,115,99,99],
[107,101,0,105,101,99,88,96,108,100],
[101,93,106,0,96,102,106,96,95,105],
[112,86,110,115,0,108,92,116,100,99],
[119,108,112,109,103,0,103,105,95,96],
[115,97,123,105,119,108,0,112,110,110],
[107,96,115,115,95,106,99,0,111,102],
[122,112,103,116,111,116,101,100,0,108],
[103,112,111,106,112,115,101,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,96,109,103,96,107,97,91,109],
[111,0,101,114,90,91,102,110,105,108],
[115,110,0,129,99,101,127,115,101,125],
[102,97,82,0,87,89,97,98,97,100],
[108,121,112,124,0,106,105,115,108,117],
[115,120,110,122,105,0,111,121,99,119],
[104,109,84,114,106,100,0,110,111,104],
[114,101,96,113,96,90,101,0,105,105],
[120,106,110,114,103,112,100,106,0,105],
[102,103,86,111,94,92,107,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,106,108,99,113,122,107,109,123],
[94,0,103,98,93,107,97,95,108,103],
[105,108,0,94,95,116,110,95,121,112],
[103,113,117,0,106,100,111,104,130,110],
[112,118,116,105,0,105,123,103,111,117],
[98,104,95,111,106,0,122,95,105,103],
[89,114,101,100,88,89,0,96,105,108],
[104,116,116,107,108,116,115,0,124,115],
[102,103,90,81,100,106,106,87,0,106],
[88,108,99,101,94,108,103,96,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,114,110,109,107,99,111,109,110],
[93,0,98,95,103,111,103,101,102,105],
[97,113,0,95,114,115,106,109,106,102],
[101,116,116,0,109,120,112,117,99,103],
[102,108,97,102,0,113,107,97,100,104],
[104,100,96,91,98,0,103,99,93,99],
[112,108,105,99,104,108,0,110,103,105],
[100,110,102,94,114,112,101,0,103,98],
[102,109,105,112,111,118,108,108,0,113],
[101,106,109,108,107,112,106,113,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,116,105,119,120,125,105,126,114],
[98,0,97,95,100,102,111,107,117,111],
[95,114,0,104,113,128,127,106,112,114],
[106,116,107,0,126,125,130,103,127,115],
[92,111,98,85,0,120,114,98,120,107],
[91,109,83,86,91,0,110,98,103,92],
[86,100,84,81,97,101,0,96,102,103],
[106,104,105,108,113,113,115,0,116,101],
[85,94,99,84,91,108,109,95,0,101],
[97,100,97,96,104,119,108,110,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,99,126,113,106,111,122,95,97],
[93,0,91,115,126,97,101,95,85,99],
[112,120,0,137,109,121,109,97,109,110],
[85,96,74,0,103,123,87,86,79,67],
[98,85,102,108,0,106,82,99,97,94],
[105,114,90,88,105,0,75,100,83,99],
[100,110,102,124,129,136,0,99,80,110],
[89,116,114,125,112,111,112,0,108,115],
[116,126,102,132,114,128,131,103,0,107],
[114,112,101,144,117,112,101,96,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,113,109,112,108,110,112,112,116],
[107,0,133,105,115,116,107,113,115,121],
[98,78,0,95,114,117,93,122,107,105],
[102,106,116,0,119,100,108,120,126,116],
[99,96,97,92,0,105,102,102,103,109],
[103,95,94,111,106,0,95,109,120,110],
[101,104,118,103,109,116,0,120,117,122],
[99,98,89,91,109,102,91,0,107,107],
[99,96,104,85,108,91,94,104,0,108],
[95,90,106,95,102,101,89,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,127,127,106,93,145,89,102,86],
[95,0,127,83,110,93,145,54,19,74],
[84,84,0,95,142,96,162,70,63,64],
[84,128,116,0,94,119,151,105,105,74],
[105,101,69,117,0,127,170,80,92,85],
[118,118,115,92,84,0,103,54,63,42],
[66,66,49,60,41,108,0,20,20,41],
[122,157,141,106,131,157,191,0,116,97],
[109,192,148,106,119,148,191,95,0,129],
[125,137,147,137,126,169,170,114,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,104,105,103,109,111,119,109,112],
[109,0,110,100,96,118,98,118,115,110],
[107,101,0,104,99,105,107,111,105,117],
[106,111,107,0,102,114,111,110,115,109],
[108,115,112,109,0,107,98,126,114,112],
[102,93,106,97,104,0,92,118,98,103],
[100,113,104,100,113,119,0,121,103,97],
[92,93,100,101,85,93,90,0,95,95],
[102,96,106,96,97,113,108,116,0,103],
[99,101,94,102,99,108,114,116,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,98,119,103,79,118,83,116,113],
[121,0,103,119,123,97,96,131,155,132],
[113,108,0,113,108,91,127,97,134,117],
[92,92,98,0,85,55,78,87,102,132],
[108,88,103,126,0,93,111,117,133,131],
[132,114,120,156,118,0,148,103,129,134],
[93,115,84,133,100,63,0,103,139,116],
[128,80,114,124,94,108,108,0,142,128],
[95,56,77,109,78,82,72,69,0,99],
[98,79,94,79,80,77,95,83,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,115,93,112,122,98,112,117,107],
[96,0,86,82,108,99,101,104,121,100],
[96,125,0,110,123,118,105,116,111,117],
[118,129,101,0,108,133,126,104,106,121],
[99,103,88,103,0,106,102,88,103,91],
[89,112,93,78,105,0,91,105,84,108],
[113,110,106,85,109,120,0,100,118,113],
[99,107,95,107,123,106,111,0,98,98],
[94,90,100,105,108,127,93,113,0,102],
[104,111,94,90,120,103,98,113,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,105,93,96,99,95,99,113],
[110,0,96,103,98,97,103,98,90,108],
[107,115,0,100,101,94,100,93,102,113],
[106,108,111,0,95,102,107,103,102,103],
[118,113,110,116,0,97,104,98,104,104],
[115,114,117,109,114,0,110,108,105,119],
[112,108,111,104,107,101,0,107,108,122],
[116,113,118,108,113,103,104,0,101,120],
[112,121,109,109,107,106,103,110,0,117],
[98,103,98,108,107,92,89,91,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,82,74,121,94,120,103,115,83],
[138,0,139,123,101,75,97,116,92,85],
[129,72,0,75,98,87,84,93,109,82],
[137,88,136,0,131,119,127,98,129,98],
[90,110,113,80,0,58,84,78,82,76],
[117,136,124,92,153,0,112,110,133,104],
[91,114,127,84,127,99,0,88,119,115],
[108,95,118,113,133,101,123,0,135,82],
[96,119,102,82,129,78,92,76,0,94],
[128,126,129,113,135,107,96,129,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,95,102,121,99,88,109,126,118],
[111,0,144,107,139,102,133,146,156,132],
[116,67,0,58,87,80,79,78,107,113],
[109,104,153,0,115,131,124,143,128,154],
[90,72,124,96,0,102,85,116,88,107],
[112,109,131,80,109,0,126,129,88,146],
[123,78,132,87,126,85,0,93,117,103],
[102,65,133,68,95,82,118,0,126,132],
[85,55,104,83,123,123,94,85,0,121],
[93,79,98,57,104,65,108,79,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,92,82,97,85,85,85,90,75],
[108,0,82,84,116,98,100,78,110,83],
[119,129,0,101,116,101,131,86,94,127],
[129,127,110,0,115,104,118,93,133,112],
[114,95,95,96,0,109,139,87,105,113],
[126,113,110,107,102,0,129,118,117,113],
[126,111,80,93,72,82,0,71,111,87],
[126,133,125,118,124,93,140,0,99,128],
[121,101,117,78,106,94,100,112,0,104],
[136,128,84,99,98,98,124,83,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,114,137,113,110,67,122,102,112],
[89,0,88,84,106,110,87,110,134,97],
[97,123,0,115,118,85,110,89,120,119],
[74,127,96,0,87,104,103,101,115,86],
[98,105,93,124,0,110,80,82,102,98],
[101,101,126,107,101,0,91,106,98,112],
[144,124,101,108,131,120,0,137,129,116],
[89,101,122,110,129,105,74,0,159,145],
[109,77,91,96,109,113,82,52,0,133],
[99,114,92,125,113,99,95,66,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,91,99,96,97,105,114,97,121],
[116,0,92,112,117,115,105,104,99,118],
[120,119,0,108,107,103,113,117,111,140],
[112,99,103,0,107,107,109,107,104,108],
[115,94,104,104,0,95,112,100,88,131],
[114,96,108,104,116,0,129,113,108,141],
[106,106,98,102,99,82,0,101,103,108],
[97,107,94,104,111,98,110,0,94,97],
[114,112,100,107,123,103,108,117,0,122],
[90,93,71,103,80,70,103,114,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,99,98,104,105,99,95,100,95],
[119,0,100,109,106,118,107,108,121,103],
[112,111,0,104,105,106,102,116,115,121],
[113,102,107,0,108,102,105,105,110,109],
[107,105,106,103,0,107,96,109,109,105],
[106,93,105,109,104,0,111,109,102,100],
[112,104,109,106,115,100,0,105,120,106],
[116,103,95,106,102,102,106,0,102,107],
[111,90,96,101,102,109,91,109,0,102],
[116,108,90,102,106,111,105,104,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,91,99,88,98,96,102,94,96],
[125,0,111,112,105,101,108,120,97,118],
[120,100,0,100,114,106,108,114,112,123],
[112,99,111,0,111,104,108,109,87,104],
[123,106,97,100,0,96,115,109,91,110],
[113,110,105,107,115,0,121,109,96,113],
[115,103,103,103,96,90,0,114,88,103],
[109,91,97,102,102,102,97,0,96,100],
[117,114,99,124,120,115,123,115,0,115],
[115,93,88,107,101,98,108,111,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,113,102,98,112,135,129,118],
[101,0,98,131,89,107,142,122,133,104],
[106,113,0,85,131,104,119,100,132,105],
[98,80,126,0,94,94,110,129,122,101],
[109,122,80,117,0,106,116,109,133,104],
[113,104,107,117,105,0,112,143,133,94],
[99,69,92,101,95,99,0,117,109,84],
[76,89,111,82,102,68,94,0,99,68],
[82,78,79,89,78,78,102,112,0,80],
[93,107,106,110,107,117,127,143,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,100,92,115,95,104,93,91,109],
[110,0,98,111,112,97,106,106,98,119],
[111,113,0,103,93,103,90,108,89,110],
[119,100,108,0,96,108,114,99,114,117],
[96,99,118,115,0,105,115,104,109,114],
[116,114,108,103,106,0,102,108,103,106],
[107,105,121,97,96,109,0,114,114,110],
[118,105,103,112,107,103,97,0,107,112],
[120,113,122,97,102,108,97,104,0,117],
[102,92,101,94,97,105,101,99,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,83,133,105,104,118,103,116,127],
[104,0,129,144,91,127,105,102,105,124],
[128,82,0,117,103,113,93,106,119,115],
[78,67,94,0,84,100,84,78,88,85],
[106,120,108,127,0,121,117,76,128,136],
[107,84,98,111,90,0,104,94,121,92],
[93,106,118,127,94,107,0,109,92,130],
[108,109,105,133,135,117,102,0,113,131],
[95,106,92,123,83,90,119,98,0,150],
[84,87,96,126,75,119,81,80,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,79,93,88,89,84,68,84,84],
[118,0,114,123,115,118,110,92,98,112],
[132,97,0,116,115,119,122,107,97,97],
[118,88,95,0,107,111,107,98,103,94],
[123,96,96,104,0,101,99,89,91,92],
[122,93,92,100,110,0,98,84,96,98],
[127,101,89,104,112,113,0,90,98,108],
[143,119,104,113,122,127,121,0,120,106],
[127,113,114,108,120,115,113,91,0,103],
[127,99,114,117,119,113,103,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,126,114,110,129,110,127,99,134],
[95,0,120,110,89,121,100,132,93,97],
[85,91,0,99,98,94,88,101,88,96],
[97,101,112,0,93,115,105,103,85,100],
[101,122,113,118,0,118,99,124,107,108],
[82,90,117,96,93,0,87,106,94,102],
[101,111,123,106,112,124,0,127,102,115],
[84,79,110,108,87,105,84,0,79,92],
[112,118,123,126,104,117,109,132,0,111],
[77,114,115,111,103,109,96,119,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,98,101,90,100,93,106,104,107],
[117,0,112,118,102,115,105,116,108,92],
[113,99,0,116,97,118,108,119,108,101],
[110,93,95,0,95,99,106,99,99,95],
[121,109,114,116,0,116,108,113,102,102],
[111,96,93,112,95,0,98,107,96,94],
[118,106,103,105,103,113,0,110,108,103],
[105,95,92,112,98,104,101,0,108,99],
[107,103,103,112,109,115,103,103,0,102],
[104,119,110,116,109,117,108,112,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,101,84,116,87,102,117,84,108],
[116,0,113,81,107,118,111,100,83,79],
[110,98,0,91,94,93,99,95,83,78],
[127,130,120,0,117,122,123,135,109,100],
[95,104,117,94,0,96,95,119,85,92],
[124,93,118,89,115,0,106,122,78,101],
[109,100,112,88,116,105,0,114,94,85],
[94,111,116,76,92,89,97,0,86,89],
[127,128,128,102,126,133,117,125,0,97],
[103,132,133,111,119,110,126,122,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,109,122,102,141,115,98,78,136],
[94,0,97,138,115,116,116,99,93,132],
[102,114,0,109,94,130,76,99,94,97],
[89,73,102,0,86,113,82,72,64,112],
[109,96,117,125,0,130,109,95,115,118],
[70,95,81,98,81,0,76,56,75,89],
[96,95,135,129,102,135,0,78,95,111],
[113,112,112,139,116,155,133,0,93,123],
[133,118,117,147,96,136,116,118,0,129],
[75,79,114,99,93,122,100,88,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,110,103,118,104,113,113,112,107],
[106,0,101,116,116,106,112,106,102,111],
[101,110,0,110,125,112,103,118,101,104],
[108,95,101,0,98,112,118,110,98,109],
[93,95,86,113,0,99,116,107,95,104],
[107,105,99,99,112,0,107,111,109,100],
[98,99,108,93,95,104,0,111,94,104],
[98,105,93,101,104,100,100,0,100,102],
[99,109,110,113,116,102,117,111,0,110],
[104,100,107,102,107,111,107,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,120,113,112,93,122,111,119],
[108,0,105,106,125,100,110,115,113,134],
[108,106,0,107,103,108,115,116,114,124],
[91,105,104,0,94,94,89,119,99,110],
[98,86,108,117,0,105,94,96,113,118],
[99,111,103,117,106,0,98,118,103,103],
[118,101,96,122,117,113,0,139,102,132],
[89,96,95,92,115,93,72,0,79,90],
[100,98,97,112,98,108,109,132,0,113],
[92,77,87,101,93,108,79,121,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,131,110,101,142,125,122,136,150],
[98,0,129,100,104,125,129,111,135,134],
[80,82,0,102,91,103,114,109,126,114],
[101,111,109,0,107,127,137,107,128,125],
[110,107,120,104,0,113,126,107,137,113],
[69,86,108,84,98,0,112,106,114,112],
[86,82,97,74,85,99,0,85,134,106],
[89,100,102,104,104,105,126,0,131,119],
[75,76,85,83,74,97,77,80,0,90],
[61,77,97,86,98,99,105,92,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,98,86,91,95,102,88,90,88],
[118,0,107,109,101,103,106,113,110,104],
[113,104,0,104,93,107,110,104,105,104],
[125,102,107,0,106,115,108,104,118,103],
[120,110,118,105,0,104,106,106,109,112],
[116,108,104,96,107,0,107,100,115,106],
[109,105,101,103,105,104,0,107,99,106],
[123,98,107,107,105,111,104,0,100,108],
[121,101,106,93,102,96,112,111,0,108],
[123,107,107,108,99,105,105,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,101,111,115,113,106,114,109,103],
[119,0,106,104,113,108,100,118,115,106],
[110,105,0,120,118,119,106,107,118,113],
[100,107,91,0,100,108,94,103,111,106],
[96,98,93,111,0,107,101,111,98,97],
[98,103,92,103,104,0,95,118,113,90],
[105,111,105,117,110,116,0,112,110,107],
[97,93,104,108,100,93,99,0,99,94],
[102,96,93,100,113,98,101,112,0,98],
[108,105,98,105,114,121,104,117,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,104,85,98,100,104,104,109,91],
[105,0,125,99,96,103,110,93,102,101],
[107,86,0,89,97,98,114,91,97,86],
[126,112,122,0,101,103,119,107,122,101],
[113,115,114,110,0,107,113,100,105,93],
[111,108,113,108,104,0,111,104,125,107],
[107,101,97,92,98,100,0,86,99,102],
[107,118,120,104,111,107,125,0,121,98],
[102,109,114,89,106,86,112,90,0,103],
[120,110,125,110,118,104,109,113,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,86,106,77,104,101,108,82],
[110,0,91,92,96,90,110,103,117,95],
[113,120,0,86,121,99,114,99,117,108],
[125,119,125,0,117,104,121,109,138,98],
[105,115,90,94,0,96,111,96,108,103],
[134,121,112,107,115,0,110,123,128,95],
[107,101,97,90,100,101,0,99,113,96],
[110,108,112,102,115,88,112,0,113,113],
[103,94,94,73,103,83,98,98,0,89],
[129,116,103,113,108,116,115,98,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,95,113,105,98,103,75,109,130],
[112,0,107,97,101,98,90,86,101,118],
[116,104,0,109,101,118,106,96,109,123],
[98,114,102,0,101,97,109,104,112,120],
[106,110,110,110,0,100,101,99,105,110],
[113,113,93,114,111,0,102,105,105,132],
[108,121,105,102,110,109,0,107,104,120],
[136,125,115,107,112,106,104,0,124,131],
[102,110,102,99,106,106,107,87,0,117],
[81,93,88,91,101,79,91,80,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,99,93,109,94,95,98,103],
[107,0,107,97,95,110,104,93,110,104],
[106,104,0,89,95,103,100,95,101,101],
[112,114,122,0,106,120,107,101,116,113],
[118,116,116,105,0,114,113,116,111,105],
[102,101,108,91,97,0,97,103,98,103],
[117,107,111,104,98,114,0,108,101,109],
[116,118,116,110,95,108,103,0,100,104],
[113,101,110,95,100,113,110,111,0,106],
[108,107,110,98,106,108,102,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,111,122,107,120,126,124,100,109],
[113,0,120,131,113,132,104,130,88,93],
[100,91,0,101,98,134,105,124,96,89],
[89,80,110,0,93,112,115,109,69,91],
[104,98,113,118,0,128,119,147,80,110],
[91,79,77,99,83,0,107,139,83,92],
[85,107,106,96,92,104,0,114,92,97],
[87,81,87,102,64,72,97,0,85,87],
[111,123,115,142,131,128,119,126,0,100],
[102,118,122,120,101,119,114,124,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,116,125,104,107,114,114,106,109],
[109,0,123,120,121,117,115,107,103,128],
[95,88,0,100,107,109,108,110,109,105],
[86,91,111,0,100,102,109,97,95,117],
[107,90,104,111,0,95,114,113,98,123],
[104,94,102,109,116,0,97,100,117,122],
[97,96,103,102,97,114,0,117,104,114],
[97,104,101,114,98,111,94,0,104,102],
[105,108,102,116,113,94,107,107,0,116],
[102,83,106,94,88,89,97,109,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,96,92,89,81,106,90,83,92],
[102,0,101,92,85,82,94,88,86,93],
[115,110,0,96,106,92,104,94,91,99],
[119,119,115,0,101,97,118,115,98,101],
[122,126,105,110,0,110,108,118,106,105],
[130,129,119,114,101,0,115,123,96,109],
[105,117,107,93,103,96,0,111,98,100],
[121,123,117,96,93,88,100,0,90,105],
[128,125,120,113,105,115,113,121,0,126],
[119,118,112,110,106,102,111,106,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,108,127,105,101,111,119,106],
[103,0,110,112,110,106,108,110,108,110],
[95,101,0,105,115,107,98,107,97,110],
[103,99,106,0,113,113,95,107,111,105],
[84,101,96,98,0,89,98,115,99,102],
[106,105,104,98,122,0,103,95,99,96],
[110,103,113,116,113,108,0,117,105,107],
[100,101,104,104,96,116,94,0,102,104],
[92,103,114,100,112,112,106,109,0,110],
[105,101,101,106,109,115,104,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,124,125,123,116,115,132,98,130],
[107,0,127,101,114,101,129,122,119,121],
[87,84,0,104,90,78,105,94,96,96],
[86,110,107,0,99,87,106,106,98,104],
[88,97,121,112,0,90,121,99,107,123],
[95,110,133,124,121,0,126,130,106,120],
[96,82,106,105,90,85,0,126,115,116],
[79,89,117,105,112,81,85,0,107,109],
[113,92,115,113,104,105,96,104,0,104],
[81,90,115,107,88,91,95,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,98,82,107,111,104,109,108,96],
[116,0,96,95,106,112,102,108,97,100],
[113,115,0,111,108,110,122,114,108,104],
[129,116,100,0,116,106,120,110,116,104],
[104,105,103,95,0,108,107,108,110,110],
[100,99,101,105,103,0,107,108,105,102],
[107,109,89,91,104,104,0,104,106,104],
[102,103,97,101,103,103,107,0,122,124],
[103,114,103,95,101,106,105,89,0,112],
[115,111,107,107,101,109,107,87,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,117,106,108,110,115,113,105,113],
[93,0,100,101,99,103,97,98,106,100],
[94,111,0,94,98,98,100,94,91,103],
[105,110,117,0,111,116,107,113,102,120],
[103,112,113,100,0,97,99,107,111,104],
[101,108,113,95,114,0,102,104,98,97],
[96,114,111,104,112,109,0,109,106,107],
[98,113,117,98,104,107,102,0,101,109],
[106,105,120,109,100,113,105,110,0,105],
[98,111,108,91,107,114,104,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,106,105,111,113,110,115,115,102],
[96,0,108,100,104,117,104,108,111,97],
[105,103,0,112,99,104,107,100,104,97],
[106,111,99,0,97,113,115,112,107,93],
[100,107,112,114,0,112,108,97,115,92],
[98,94,107,98,99,0,107,97,103,90],
[101,107,104,96,103,104,0,94,102,99],
[96,103,111,99,114,114,117,0,107,110],
[96,100,107,104,96,108,109,104,0,87],
[109,114,114,118,119,121,112,101,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,106,107,117,108,95,109,93],
[101,0,104,98,96,118,105,92,99,97],
[105,107,0,108,106,118,121,110,109,104],
[105,113,103,0,96,114,107,100,98,110],
[104,115,105,115,0,126,111,103,115,102],
[94,93,93,97,85,0,94,91,89,101],
[103,106,90,104,100,117,0,87,106,102],
[116,119,101,111,108,120,124,0,117,106],
[102,112,102,113,96,122,105,94,0,95],
[118,114,107,101,109,110,109,105,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,124,117,124,117,99,109,126,96],
[89,0,129,102,99,102,101,111,118,93],
[87,82,0,106,109,95,109,91,109,90],
[94,109,105,0,105,118,92,98,125,93],
[87,112,102,106,0,111,91,86,112,84],
[94,109,116,93,100,0,102,101,102,102],
[112,110,102,119,120,109,0,119,125,109],
[102,100,120,113,125,110,92,0,117,114],
[85,93,102,86,99,109,86,94,0,99],
[115,118,121,118,127,109,102,97,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,85,120,98,107,87,100,128,97],
[98,0,75,90,102,87,83,84,102,88],
[126,136,0,117,145,115,92,107,150,119],
[91,121,94,0,121,108,80,96,111,81],
[113,109,66,90,0,84,100,87,92,66],
[104,124,96,103,127,0,94,99,113,113],
[124,128,119,131,111,117,0,130,134,91],
[111,127,104,115,124,112,81,0,123,99],
[83,109,61,100,119,98,77,88,0,87],
[114,123,92,130,145,98,120,112,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,104,99,105,98,96,91,106,96],
[120,0,117,110,106,119,106,110,100,106],
[107,94,0,101,108,109,97,102,97,99],
[112,101,110,0,102,106,107,101,105,108],
[106,105,103,109,0,92,100,105,104,98],
[113,92,102,105,119,0,92,102,106,105],
[115,105,114,104,111,119,0,104,109,116],
[120,101,109,110,106,109,107,0,111,108],
[105,111,114,106,107,105,102,100,0,118],
[115,105,112,103,113,106,95,103,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,86,102,111,100,100,95,105,113],
[115,0,111,92,121,124,123,108,120,108],
[125,100,0,100,119,114,110,106,116,104],
[109,119,111,0,121,123,110,102,129,118],
[100,90,92,90,0,102,96,89,108,109],
[111,87,97,88,109,0,95,105,108,121],
[111,88,101,101,115,116,0,96,108,121],
[116,103,105,109,122,106,115,0,113,116],
[106,91,95,82,103,103,103,98,0,108],
[98,103,107,93,102,90,90,95,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,109,112,135,116,103,125,113,123],
[90,0,110,114,119,102,98,115,107,115],
[102,101,0,111,124,113,106,108,108,111],
[99,97,100,0,115,100,99,113,105,115],
[76,92,87,96,0,93,89,103,99,105],
[95,109,98,111,118,0,102,117,111,121],
[108,113,105,112,122,109,0,123,121,121],
[86,96,103,98,108,94,88,0,100,104],
[98,104,103,106,112,100,90,111,0,114],
[88,96,100,96,106,90,90,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,107,112,109,120,105,108,123],
[101,0,105,112,119,107,120,112,108,116],
[100,106,0,109,107,99,113,90,100,111],
[104,99,102,0,109,109,117,104,107,113],
[99,92,104,102,0,98,116,101,100,109],
[102,104,112,102,113,0,112,107,106,114],
[91,91,98,94,95,99,0,89,93,100],
[106,99,121,107,110,104,122,0,114,114],
[103,103,111,104,111,105,118,97,0,116],
[88,95,100,98,102,97,111,97,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,95,61,156,51,78,72,100,49],
[155,0,116,136,185,119,134,89,146,112],
[116,95,0,110,144,88,109,81,135,76],
[150,75,101,0,187,101,133,86,119,68],
[55,26,67,24,0,37,61,46,78,11],
[160,92,123,110,174,0,130,81,79,63],
[133,77,102,78,150,81,0,68,105,84],
[139,122,130,125,165,130,143,0,131,95],
[111,65,76,92,133,132,106,80,0,50],
[162,99,135,143,200,148,127,116,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,124,117,117,112,132,100,94,110],
[100,0,99,113,91,91,105,106,75,102],
[87,112,0,103,100,109,114,113,97,119],
[94,98,108,0,86,92,103,97,80,92],
[94,120,111,125,0,105,131,120,107,93],
[99,120,102,119,106,0,120,122,83,108],
[79,106,97,108,80,91,0,84,77,90],
[111,105,98,114,91,89,127,0,74,98],
[117,136,114,131,104,128,134,137,0,102],
[101,109,92,119,118,103,121,113,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,113,91,83,100,91,97,97,101],
[119,0,121,109,106,124,111,113,98,144],
[98,90,0,101,86,88,97,86,87,122],
[120,102,110,0,91,97,100,90,98,113],
[128,105,125,120,0,116,119,117,101,137],
[111,87,123,114,95,0,111,110,114,123],
[120,100,114,111,92,100,0,102,91,112],
[114,98,125,121,94,101,109,0,88,113],
[114,113,124,113,110,97,120,123,0,138],
[110,67,89,98,74,88,99,98,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,88,101,94,100,100,102,82,92],
[100,0,87,103,92,105,103,99,97,102],
[123,124,0,122,108,114,110,117,106,102],
[110,108,89,0,104,102,97,104,89,102],
[117,119,103,107,0,108,113,117,106,97],
[111,106,97,109,103,0,108,114,91,99],
[111,108,101,114,98,103,0,112,100,105],
[109,112,94,107,94,97,99,0,96,91],
[129,114,105,122,105,120,111,115,0,119],
[119,109,109,109,114,112,106,120,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,106,110,99,99,119,70,96,94],
[113,0,111,110,119,97,119,77,91,116],
[105,100,0,140,97,113,123,114,92,93],
[101,101,71,0,106,119,111,113,86,106],
[112,92,114,105,0,93,117,84,90,100],
[112,114,98,92,118,0,116,120,106,101],
[92,92,88,100,94,95,0,99,69,91],
[141,134,97,98,127,91,112,0,81,104],
[115,120,119,125,121,105,142,130,0,131],
[117,95,118,105,111,110,120,107,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,111,98,117,94,100,100,103,114],
[103,0,91,102,99,84,101,94,88,96],
[100,120,0,103,129,99,117,112,110,105],
[113,109,108,0,105,107,122,118,98,107],
[94,112,82,106,0,102,113,103,97,101],
[117,127,112,104,109,0,117,115,103,113],
[111,110,94,89,98,94,0,100,99,100],
[111,117,99,93,108,96,111,0,107,113],
[108,123,101,113,114,108,112,104,0,121],
[97,115,106,104,110,98,111,98,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,104,103,113,106,122,105,121,106],
[87,0,105,89,93,92,102,84,102,77],
[107,106,0,99,112,101,95,96,97,97],
[108,122,112,0,115,101,122,112,124,103],
[98,118,99,96,0,80,109,117,103,103],
[105,119,110,110,131,0,113,110,114,110],
[89,109,116,89,102,98,0,106,99,94],
[106,127,115,99,94,101,105,0,112,105],
[90,109,114,87,108,97,112,99,0,82],
[105,134,114,108,108,101,117,106,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,114,77,94,120,56,75,107,88],
[137,0,150,103,114,160,102,96,110,145],
[97,61,0,95,80,102,65,89,98,121],
[134,108,116,0,90,127,66,105,79,136],
[117,97,131,121,0,143,79,111,90,141],
[91,51,109,84,68,0,52,92,52,132],
[155,109,146,145,132,159,0,139,103,148],
[136,115,122,106,100,119,72,0,93,132],
[104,101,113,132,121,159,108,118,0,146],
[123,66,90,75,70,79,63,79,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,109,111,120,125,109,102,107,113],
[101,0,114,121,118,129,113,107,122,118],
[102,97,0,104,123,122,115,98,118,109],
[100,90,107,0,121,128,112,105,110,105],
[91,93,88,90,0,105,97,97,103,96],
[86,82,89,83,106,0,107,92,99,92],
[102,98,96,99,114,104,0,92,118,100],
[109,104,113,106,114,119,119,0,117,105],
[104,89,93,101,108,112,93,94,0,95],
[98,93,102,106,115,119,111,106,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,112,126,101,110,107,149,138,120],
[72,0,102,87,87,75,77,89,73,104],
[99,109,0,107,73,77,72,100,90,91],
[85,124,104,0,96,91,96,106,110,92],
[110,124,138,115,0,101,101,90,119,124],
[101,136,134,120,110,0,114,128,133,81],
[104,134,139,115,110,97,0,121,121,111],
[62,122,111,105,121,83,90,0,137,82],
[73,138,121,101,92,78,90,74,0,111],
[91,107,120,119,87,130,100,129,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,108,112,101,94,100,101,107],
[108,0,107,115,103,94,94,100,108,107],
[107,104,0,106,101,104,96,94,96,108],
[103,96,105,0,109,99,98,92,101,97],
[99,108,110,102,0,98,97,105,103,101],
[110,117,107,112,113,0,107,108,105,115],
[117,117,115,113,114,104,0,99,110,114],
[111,111,117,119,106,103,112,0,108,115],
[110,103,115,110,108,106,101,103,0,104],
[104,104,103,114,110,96,97,96,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,101,100,108,111,104,106,105,116],
[102,0,104,107,117,104,99,110,111,117],
[110,107,0,107,119,111,99,105,106,109],
[111,104,104,0,115,105,101,102,101,116],
[103,94,92,96,0,102,97,100,95,105],
[100,107,100,106,109,0,111,101,109,111],
[107,112,112,110,114,100,0,107,101,114],
[105,101,106,109,111,110,104,0,103,109],
[106,100,105,110,116,102,110,108,0,116],
[95,94,102,95,106,100,97,102,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,111,106,106,110,112,109,103,99],
[112,0,105,114,114,123,108,121,110,105],
[100,106,0,110,94,107,106,103,99,97],
[105,97,101,0,108,116,113,126,103,108],
[105,97,117,103,0,118,108,114,97,109],
[101,88,104,95,93,0,100,109,93,101],
[99,103,105,98,103,111,0,106,106,99],
[102,90,108,85,97,102,105,0,93,93],
[108,101,112,108,114,118,105,118,0,112],
[112,106,114,103,102,110,112,118,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,115,101,103,100,99,95,110,97],
[109,0,117,100,109,111,107,102,110,114],
[96,94,0,91,93,86,98,90,105,99],
[110,111,120,0,115,99,108,101,112,109],
[108,102,118,96,0,95,102,111,117,104],
[111,100,125,112,116,0,117,105,115,111],
[112,104,113,103,109,94,0,108,112,110],
[116,109,121,110,100,106,103,0,123,114],
[101,101,106,99,94,96,99,88,0,98],
[114,97,112,102,107,100,101,97,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,92,98,101,99,101,97,97,107],
[108,0,100,113,110,111,103,103,100,113],
[119,111,0,108,114,115,105,109,110,110],
[113,98,103,0,104,105,95,102,95,98],
[110,101,97,107,0,96,94,98,106,102],
[112,100,96,106,115,0,98,100,102,103],
[110,108,106,116,117,113,0,105,101,108],
[114,108,102,109,113,111,106,0,111,104],
[114,111,101,116,105,109,110,100,0,108],
[104,98,101,113,109,108,103,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,118,105,108,113,120,111,124,115],
[98,0,112,91,96,108,95,105,108,99],
[93,99,0,103,114,123,109,113,112,104],
[106,120,108,0,105,109,117,109,117,107],
[103,115,97,106,0,117,111,111,108,107],
[98,103,88,102,94,0,101,107,105,111],
[91,116,102,94,100,110,0,109,112,91],
[100,106,98,102,100,104,102,0,108,100],
[87,103,99,94,103,106,99,103,0,105],
[96,112,107,104,104,100,120,111,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,115,98,109,96,100,105,94],
[101,0,103,110,103,100,96,98,100,98],
[100,108,0,112,100,99,101,89,109,93],
[96,101,99,0,94,106,98,95,114,95],
[113,108,111,117,0,109,107,108,119,96],
[102,111,112,105,102,0,103,114,115,108],
[115,115,110,113,104,108,0,102,114,107],
[111,113,122,116,103,97,109,0,118,104],
[106,111,102,97,92,96,97,93,0,99],
[117,113,118,116,115,103,104,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,96,102,96,89,110,92,106],
[106,0,122,106,101,95,105,103,102,122],
[105,89,0,96,99,94,85,111,96,108],
[115,105,115,0,107,103,106,118,113,118],
[109,110,112,104,0,108,87,112,101,135],
[115,116,117,108,103,0,101,105,107,118],
[122,106,126,105,124,110,0,117,112,131],
[101,108,100,93,99,106,94,0,101,105],
[119,109,115,98,110,104,99,110,0,117],
[105,89,103,93,76,93,80,106,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,105,115,119,112,101,110,117],
[98,0,101,91,109,113,109,105,102,115],
[104,110,0,108,109,114,111,112,109,121],
[106,120,103,0,116,115,119,100,111,111],
[96,102,102,95,0,112,112,101,101,107],
[92,98,97,96,99,0,99,94,100,101],
[99,102,100,92,99,112,0,98,106,115],
[110,106,99,111,110,117,113,0,102,108],
[101,109,102,100,110,111,105,109,0,117],
[94,96,90,100,104,110,96,103,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,94,140,134,122,145,130,111,120],
[84,0,117,134,125,84,123,125,90,102],
[117,94,0,132,113,99,135,106,107,118],
[71,77,79,0,89,98,126,92,89,92],
[77,86,98,122,0,85,100,105,93,124],
[89,127,112,113,126,0,133,116,128,109],
[66,88,76,85,111,78,0,60,78,86],
[81,86,105,119,106,95,151,0,107,103],
[100,121,104,122,118,83,133,104,0,129],
[91,109,93,119,87,102,125,108,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,93,147,33,60,64,133,64,60],
[153,0,139,153,113,66,99,139,70,126],
[118,72,0,145,47,31,84,155,78,111],
[64,58,66,0,33,0,70,101,64,97],
[178,98,164,178,0,127,128,197,128,95],
[151,145,180,211,84,0,84,182,142,111],
[147,112,127,141,83,127,0,178,98,104],
[78,72,56,110,14,29,33,0,60,27],
[147,141,133,147,83,69,113,151,0,133],
[151,85,100,114,116,100,107,184,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,108,102,117,108,117,96,105,95],
[93,0,101,100,98,110,108,86,103,110],
[103,110,0,96,115,115,129,96,112,110],
[109,111,115,0,112,116,129,112,116,105],
[94,113,96,99,0,109,118,93,112,110],
[103,101,96,95,102,0,122,98,110,111],
[94,103,82,82,93,89,0,86,95,96],
[115,125,115,99,118,113,125,0,118,117],
[106,108,99,95,99,101,116,93,0,108],
[116,101,101,106,101,100,115,94,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,95,101,88,94,94,109,101,111],
[92,0,107,109,91,95,112,104,90,107],
[116,104,0,128,108,109,112,115,109,99],
[110,102,83,0,99,86,93,117,96,106],
[123,120,103,112,0,93,103,116,110,112],
[117,116,102,125,118,0,92,110,108,99],
[117,99,99,118,108,119,0,125,105,111],
[102,107,96,94,95,101,86,0,111,98],
[110,121,102,115,101,103,106,100,0,115],
[100,104,112,105,99,112,100,113,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,92,115,97,115,103,122,98,86],
[117,0,113,133,116,101,104,122,101,104],
[119,98,0,102,102,108,118,120,92,87],
[96,78,109,0,87,97,80,111,92,91],
[114,95,109,124,0,110,95,124,80,120],
[96,110,103,114,101,0,95,126,95,108],
[108,107,93,131,116,116,0,133,95,110],
[89,89,91,100,87,85,78,0,75,89],
[113,110,119,119,131,116,116,136,0,104],
[125,107,124,120,91,103,101,122,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,95,86,84,124,129,100,96],
[107,0,88,78,55,81,101,112,94,101],
[102,123,0,118,72,107,117,100,83,115],
[116,133,93,0,93,78,134,126,106,129],
[125,156,139,118,0,124,153,115,102,124],
[127,130,104,133,87,0,116,118,138,125],
[87,110,94,77,58,95,0,109,95,98],
[82,99,111,85,96,93,102,0,97,107],
[111,117,128,105,109,73,116,114,0,108],
[115,110,96,82,87,86,113,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,114,111,108,106,109,107,112,104],
[95,0,94,94,105,94,98,111,109,98],
[97,117,0,100,108,96,109,118,108,105],
[100,117,111,0,111,103,117,107,117,107],
[103,106,103,100,0,98,103,110,108,105],
[105,117,115,108,113,0,104,116,118,101],
[102,113,102,94,108,107,0,103,109,108],
[104,100,93,104,101,95,108,0,108,99],
[99,102,103,94,103,93,102,103,0,99],
[107,113,106,104,106,110,103,112,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,107,105,112,110,111,102,97,97],
[94,0,105,100,102,97,96,102,91,100],
[104,106,0,105,109,118,104,104,107,100],
[106,111,106,0,106,105,105,108,99,110],
[99,109,102,105,0,100,101,107,96,86],
[101,114,93,106,111,0,100,106,93,97],
[100,115,107,106,110,111,0,104,97,100],
[109,109,107,103,104,105,107,0,101,96],
[114,120,104,112,115,118,114,110,0,103],
[114,111,111,101,125,114,111,115,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,100,108,111,73,139,95,109,93],
[107,0,127,131,94,97,86,79,81,85],
[111,84,0,118,102,87,109,80,83,81],
[103,80,93,0,96,108,94,73,86,85],
[100,117,109,115,0,95,125,77,78,98],
[138,114,124,103,116,0,136,108,104,118],
[72,125,102,117,86,75,0,97,93,77],
[116,132,131,138,134,103,114,0,105,102],
[102,130,128,125,133,107,118,106,0,108],
[118,126,130,126,113,93,134,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,98,104,117,98,103,111,106,91],
[114,0,96,117,126,118,99,101,104,102],
[113,115,0,123,118,122,129,102,104,109],
[107,94,88,0,94,113,103,87,91,83],
[94,85,93,117,0,87,107,94,105,102],
[113,93,89,98,124,0,92,99,94,105],
[108,112,82,108,104,119,0,96,96,91],
[100,110,109,124,117,112,115,0,115,100],
[105,107,107,120,106,117,115,96,0,105],
[120,109,102,128,109,106,120,111,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,101,95,116,107,106,100,101,110],
[116,0,107,113,108,113,126,123,105,114],
[110,104,0,105,107,114,115,104,107,104],
[116,98,106,0,98,97,110,97,105,94],
[95,103,104,113,0,105,119,103,98,103],
[104,98,97,114,106,0,119,101,99,98],
[105,85,96,101,92,92,0,94,92,99],
[111,88,107,114,108,110,117,0,101,105],
[110,106,104,106,113,112,119,110,0,118],
[101,97,107,117,108,113,112,106,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,90,99,101,107,115,111,123,111],
[113,0,110,110,101,116,122,108,124,126],
[121,101,0,105,111,111,136,120,123,115],
[112,101,106,0,109,116,121,113,129,106],
[110,110,100,102,0,121,130,117,120,113],
[104,95,100,95,90,0,113,106,106,112],
[96,89,75,90,81,98,0,98,106,97],
[100,103,91,98,94,105,113,0,116,97],
[88,87,88,82,91,105,105,95,0,104],
[100,85,96,105,98,99,114,114,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,117,119,105,128,99,118,109,133],
[125,0,139,134,115,131,130,108,113,89],
[94,72,0,104,101,110,121,114,116,102],
[92,77,107,0,111,114,94,99,101,108],
[106,96,110,100,0,112,112,108,94,133],
[83,80,101,97,99,0,103,62,76,105],
[112,81,90,117,99,108,0,122,95,106],
[93,103,97,112,103,149,89,0,99,133],
[102,98,95,110,117,135,116,112,0,117],
[78,122,109,103,78,106,105,78,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,104,105,116,93,118,115,114,118],
[114,0,93,111,122,100,102,95,107,113],
[107,118,0,127,118,102,105,107,112,119],
[106,100,84,0,116,101,106,102,106,113],
[95,89,93,95,0,78,97,101,100,99],
[118,111,109,110,133,0,113,107,102,119],
[93,109,106,105,114,98,0,106,96,116],
[96,116,104,109,110,104,105,0,108,112],
[97,104,99,105,111,109,115,103,0,122],
[93,98,92,98,112,92,95,99,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,106,99,106,106,107,124,124,114],
[79,0,91,87,82,88,80,97,98,84],
[105,120,0,107,96,115,97,108,121,114],
[112,124,104,0,107,110,114,121,128,120],
[105,129,115,104,0,112,102,124,127,112],
[105,123,96,101,99,0,88,116,122,118],
[104,131,114,97,109,123,0,129,127,109],
[87,114,103,90,87,95,82,0,118,105],
[87,113,90,83,84,89,84,93,0,96],
[97,127,97,91,99,93,102,106,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,103,105,112,86,103,110,110,98],
[115,0,102,101,106,80,83,111,113,106],
[108,109,0,96,99,69,77,121,97,84],
[106,110,115,0,127,118,110,103,117,107],
[99,105,112,84,0,82,102,101,105,99],
[125,131,142,93,129,0,117,129,125,108],
[108,128,134,101,109,94,0,120,120,115],
[101,100,90,108,110,82,91,0,118,100],
[101,98,114,94,106,86,91,93,0,81],
[113,105,127,104,112,103,96,111,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,131,102,127,137,116,107,106,118],
[101,0,117,107,126,122,115,112,110,124],
[80,94,0,101,112,107,104,102,100,115],
[109,104,110,0,125,126,103,119,113,116],
[84,85,99,86,0,103,94,92,85,86],
[74,89,104,85,108,0,95,92,76,92],
[95,96,107,108,117,116,0,99,111,118],
[104,99,109,92,119,119,112,0,107,107],
[105,101,111,98,126,135,100,104,0,121],
[93,87,96,95,125,119,93,104,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,116,112,110,110,118,103,108,108],
[107,0,102,111,109,113,115,119,118,108],
[95,109,0,109,107,98,113,107,103,104],
[99,100,102,0,103,101,101,109,109,92],
[101,102,104,108,0,100,114,116,99,102],
[101,98,113,110,111,0,113,112,112,113],
[93,96,98,110,97,98,0,104,105,99],
[108,92,104,102,95,99,107,0,107,100],
[103,93,108,102,112,99,106,104,0,109],
[103,103,107,119,109,98,112,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,105,107,99,113,107,109,92],
[109,0,100,95,107,99,112,107,114,101],
[99,111,0,102,93,101,102,115,97,98],
[106,116,109,0,102,101,117,114,111,108],
[104,104,118,109,0,108,123,123,115,99],
[112,112,110,110,103,0,114,116,107,95],
[98,99,109,94,88,97,0,100,106,99],
[104,104,96,97,88,95,111,0,110,99],
[102,97,114,100,96,104,105,101,0,107],
[119,110,113,103,112,116,112,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,94,84,103,98,105,89,98,99],
[111,0,94,100,111,91,103,101,99,84],
[117,117,0,86,121,89,98,115,113,117],
[127,111,125,0,111,128,105,115,108,111],
[108,100,90,100,0,89,114,101,118,87],
[113,120,122,83,122,0,114,106,111,106],
[106,108,113,106,97,97,0,116,109,101],
[122,110,96,96,110,105,95,0,107,99],
[113,112,98,103,93,100,102,104,0,94],
[112,127,94,100,124,105,110,112,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,115,115,113,99,104,113,120,110],
[92,0,113,113,101,101,106,100,112,100],
[96,98,0,110,93,103,98,96,102,98],
[96,98,101,0,104,98,102,98,113,109],
[98,110,118,107,0,102,106,104,106,118],
[112,110,108,113,109,0,103,101,120,101],
[107,105,113,109,105,108,0,100,111,109],
[98,111,115,113,107,110,111,0,114,109],
[91,99,109,98,105,91,100,97,0,90],
[101,111,113,102,93,110,102,102,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,77,113,83,97,72,64,98,89],
[119,0,112,100,93,126,83,70,62,103],
[134,99,0,119,119,118,89,79,98,139],
[98,111,92,0,91,94,69,83,77,94],
[128,118,92,120,0,128,103,96,122,111],
[114,85,93,117,83,0,98,89,87,105],
[139,128,122,142,108,113,0,94,126,138],
[147,141,132,128,115,122,117,0,97,134],
[113,149,113,134,89,124,85,114,0,108],
[122,108,72,117,100,106,73,77,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,95,116,114,121,107,105,123,113],
[92,0,82,109,98,90,101,96,117,92],
[116,129,0,123,129,101,109,114,140,123],
[95,102,88,0,118,97,92,102,107,104],
[97,113,82,93,0,91,101,92,110,94],
[90,121,110,114,120,0,105,99,118,126],
[104,110,102,119,110,106,0,109,119,114],
[106,115,97,109,119,112,102,0,116,109],
[88,94,71,104,101,93,92,95,0,109],
[98,119,88,107,117,85,97,102,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,99,111,115,110,104,104,113,108],
[103,0,98,117,116,112,85,115,89,104],
[112,113,0,114,114,111,112,109,99,111],
[100,94,97,0,113,113,94,117,92,106],
[96,95,97,98,0,100,90,93,99,102],
[101,99,100,98,111,0,94,111,99,99],
[107,126,99,117,121,117,0,122,100,109],
[107,96,102,94,118,100,89,0,103,99],
[98,122,112,119,112,112,111,108,0,108],
[103,107,100,105,109,112,102,112,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,128,109,108,131,106,139,110,84],
[108,0,117,115,99,118,106,135,103,109],
[83,94,0,108,98,115,90,109,94,96],
[102,96,103,0,100,129,94,115,107,93],
[103,112,113,111,0,123,113,131,102,111],
[80,93,96,82,88,0,83,111,108,89],
[105,105,121,117,98,128,0,110,102,108],
[72,76,102,96,80,100,101,0,97,85],
[101,108,117,104,109,103,109,114,0,102],
[127,102,115,118,100,122,103,126,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,108,102,110,111,116,102,109,116],
[97,0,89,94,99,91,90,91,104,102],
[103,122,0,105,114,113,109,118,113,115],
[109,117,106,0,115,108,111,100,113,111],
[101,112,97,96,0,104,101,105,106,99],
[100,120,98,103,107,0,118,109,116,106],
[95,121,102,100,110,93,0,97,110,105],
[109,120,93,111,106,102,114,0,110,111],
[102,107,98,98,105,95,101,101,0,100],
[95,109,96,100,112,105,106,100,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,86,95,89,92,94,102,92,97],
[123,0,97,102,110,105,109,109,105,115],
[125,114,0,114,106,113,118,112,101,116],
[116,109,97,0,90,107,94,111,98,108],
[122,101,105,121,0,111,121,109,106,123],
[119,106,98,104,100,0,119,109,105,114],
[117,102,93,117,90,92,0,115,99,113],
[109,102,99,100,102,102,96,0,99,113],
[119,106,110,113,105,106,112,112,0,119],
[114,96,95,103,88,97,98,98,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,121,127,129,119,100,115,121,110],
[119,0,124,114,111,112,102,122,135,116],
[90,87,0,113,111,119,100,103,108,98],
[84,97,98,0,122,114,83,104,129,106],
[82,100,100,89,0,105,89,111,123,103],
[92,99,92,97,106,0,124,99,106,82],
[111,109,111,128,122,87,0,117,107,112],
[96,89,108,107,100,112,94,0,107,89],
[90,76,103,82,88,105,104,104,0,98],
[101,95,113,105,108,129,99,122,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,115,89,101,114,95,120,105,116],
[98,0,109,106,102,114,95,113,104,114],
[96,102,0,95,88,103,92,111,101,105],
[122,105,116,0,106,106,99,117,107,113],
[110,109,123,105,0,107,109,126,100,113],
[97,97,108,105,104,0,87,115,99,103],
[116,116,119,112,102,124,0,123,115,118],
[91,98,100,94,85,96,88,0,86,97],
[106,107,110,104,111,112,96,125,0,106],
[95,97,106,98,98,108,93,114,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,131,107,123,124,136,132,105],
[108,0,104,122,108,123,115,121,123,120],
[99,107,0,110,117,126,121,121,135,112],
[80,89,101,0,102,125,123,110,129,99],
[104,103,94,109,0,105,117,133,113,98],
[88,88,85,86,106,0,117,114,103,87],
[87,96,90,88,94,94,0,98,108,107],
[75,90,90,101,78,97,113,0,96,77],
[79,88,76,82,98,108,103,115,0,96],
[106,91,99,112,113,124,104,134,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,110,101,115,103,105,115,106,110],
[105,0,106,90,117,107,116,96,113,98],
[101,105,0,96,90,100,111,103,113,104],
[110,121,115,0,102,101,114,114,120,103],
[96,94,121,109,0,110,100,122,113,98],
[108,104,111,110,101,0,118,99,114,113],
[106,95,100,97,111,93,0,105,124,106],
[96,115,108,97,89,112,106,0,111,106],
[105,98,98,91,98,97,87,100,0,100],
[101,113,107,108,113,98,105,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,99,119,121,151,93,150,147],
[109,0,166,149,102,123,149,140,134,164],
[112,45,0,107,85,115,138,94,75,108],
[112,62,104,0,112,105,120,66,61,81],
[92,109,126,99,0,73,139,120,112,88],
[90,88,96,106,138,0,138,99,109,134],
[60,62,73,91,72,73,0,20,106,122],
[118,71,117,145,91,112,191,0,113,161],
[61,77,136,150,99,102,105,98,0,113],
[64,47,103,130,123,77,89,50,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,84,95,87,81,89,80,100,80],
[116,0,95,110,105,80,104,105,94,113],
[127,116,0,111,101,102,122,92,103,100],
[116,101,100,0,96,91,95,107,97,96],
[124,106,110,115,0,88,106,102,92,105],
[130,131,109,120,123,0,125,91,118,123],
[122,107,89,116,105,86,0,99,89,87],
[131,106,119,104,109,120,112,0,124,98],
[111,117,108,114,119,93,122,87,0,111],
[131,98,111,115,106,88,124,113,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,149,135,197,173,135,187,149,96],
[0,0,91,0,101,77,135,91,91,38],
[62,120,0,96,139,197,173,187,211,134],
[76,211,115,0,153,211,197,153,153,76],
[14,110,72,58,0,72,58,72,72,96],
[38,134,14,0,139,0,96,52,14,76],
[76,76,38,14,153,115,0,52,38,38],
[24,120,24,58,139,159,159,0,96,38],
[62,120,0,58,139,197,173,115,0,62],
[115,173,77,135,115,135,173,173,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,102,87,113,102,103,90,69,93],
[101,0,83,106,129,105,126,80,79,112],
[109,128,0,90,115,108,109,87,80,107],
[124,105,121,0,143,115,105,88,108,103],
[98,82,96,68,0,90,105,80,67,105],
[109,106,103,96,121,0,117,72,78,104],
[108,85,102,106,106,94,0,62,63,92],
[121,131,124,123,131,139,149,0,95,132],
[142,132,131,103,144,133,148,116,0,144],
[118,99,104,108,106,107,119,79,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,102,114,122,117,123,99,111,115],
[98,0,111,127,120,114,120,111,125,130],
[109,100,0,95,94,108,84,88,95,95],
[97,84,116,0,107,119,111,105,120,111],
[89,91,117,104,0,119,110,111,101,127],
[94,97,103,92,92,0,112,97,111,107],
[88,91,127,100,101,99,0,103,103,122],
[112,100,123,106,100,114,108,0,104,109],
[100,86,116,91,110,100,108,107,0,112],
[96,81,116,100,84,104,89,102,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,106,96,107,98,97,94,89,112],
[124,0,106,116,111,104,105,102,89,122],
[105,105,0,120,95,105,104,117,110,128],
[115,95,91,0,100,96,98,82,101,110],
[104,100,116,111,0,108,116,95,91,111],
[113,107,106,115,103,0,103,109,96,112],
[114,106,107,113,95,108,0,90,84,97],
[117,109,94,129,116,102,121,0,98,117],
[122,122,101,110,120,115,127,113,0,121],
[99,89,83,101,100,99,114,94,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,127,118,127,96,133,121,146],
[106,0,95,119,117,113,100,109,102,103],
[99,116,0,152,121,121,111,110,101,120],
[84,92,59,0,99,92,82,88,98,91],
[93,94,90,112,0,117,109,109,122,111],
[84,98,90,119,94,0,107,108,129,116],
[115,111,100,129,102,104,0,116,115,113],
[78,102,101,123,102,103,95,0,106,116],
[90,109,110,113,89,82,96,105,0,115],
[65,108,91,120,100,95,98,95,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,126,103,114,107,105,128,119,103],
[88,0,124,111,105,98,117,119,120,107],
[85,87,0,81,83,72,85,106,94,89],
[108,100,130,0,97,84,105,124,105,105],
[97,106,128,114,0,94,104,116,113,114],
[104,113,139,127,117,0,125,121,122,114],
[106,94,126,106,107,86,0,118,108,108],
[83,92,105,87,95,90,93,0,101,90],
[92,91,117,106,98,89,103,110,0,90],
[108,104,122,106,97,97,103,121,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,106,100,101,115,112,99,112],
[99,0,99,127,99,108,110,106,105,107],
[101,112,0,109,94,109,111,98,106,125],
[105,84,102,0,96,91,108,105,74,102],
[111,112,117,115,0,119,120,116,93,103],
[110,103,102,120,92,0,122,108,108,113],
[96,101,100,103,91,89,0,101,80,106],
[99,105,113,106,95,103,110,0,78,112],
[112,106,105,137,118,103,131,133,0,132],
[99,104,86,109,108,98,105,99,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,89,108,115,106,91,108,98],
[108,0,126,106,110,109,112,96,105,116],
[99,85,0,100,82,99,107,76,106,79],
[122,105,111,0,99,104,109,95,128,82],
[103,101,129,112,0,115,115,101,125,90],
[96,102,112,107,96,0,105,96,113,100],
[105,99,104,102,96,106,0,91,98,100],
[120,115,135,116,110,115,120,0,113,102],
[103,106,105,83,86,98,113,98,0,97],
[113,95,132,129,121,111,111,109,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,98,123,84,98,88,88,113,85],
[134,0,114,130,118,107,105,118,113,113],
[113,97,0,131,113,99,91,105,128,84],
[88,81,80,0,79,63,90,94,92,77],
[127,93,98,132,0,105,93,123,120,104],
[113,104,112,148,106,0,100,109,131,90],
[123,106,120,121,118,111,0,133,129,105],
[123,93,106,117,88,102,78,0,120,81],
[98,98,83,119,91,80,82,91,0,67],
[126,98,127,134,107,121,106,130,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,117,114,107,102,96,109,104,112],
[114,0,102,150,110,123,110,102,120,95],
[94,109,0,99,108,100,108,97,102,97],
[97,61,112,0,103,103,93,87,112,83],
[104,101,103,108,0,108,89,89,111,95],
[109,88,111,108,103,0,98,107,96,89],
[115,101,103,118,122,113,0,103,107,80],
[102,109,114,124,122,104,108,0,126,97],
[107,91,109,99,100,115,104,85,0,86],
[99,116,114,128,116,122,131,114,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,128,113,112,117,107,109,114,104],
[107,0,116,112,107,102,97,103,109,94],
[83,95,0,85,99,100,79,91,92,90],
[98,99,126,0,104,108,88,94,105,101],
[99,104,112,107,0,102,95,90,91,98],
[94,109,111,103,109,0,95,95,106,91],
[104,114,132,123,116,116,0,103,118,111],
[102,108,120,117,121,116,108,0,111,102],
[97,102,119,106,120,105,93,100,0,101],
[107,117,121,110,113,120,100,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,99,99,113,99,103,93,99,109],
[111,0,101,114,113,102,107,102,103,123],
[112,110,0,120,121,98,114,111,110,125],
[112,97,91,0,112,106,110,97,103,113],
[98,98,90,99,0,100,110,84,92,109],
[112,109,113,105,111,0,112,98,100,117],
[108,104,97,101,101,99,0,89,96,115],
[118,109,100,114,127,113,122,0,115,116],
[112,108,101,108,119,111,115,96,0,120],
[102,88,86,98,102,94,96,95,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,105,101,95,100,103,113,96],
[102,0,101,117,103,110,96,103,108,101],
[102,110,0,106,93,94,108,105,113,104],
[106,94,105,0,96,107,105,110,114,101],
[110,108,118,115,0,111,105,94,110,109],
[116,101,117,104,100,0,111,116,117,102],
[111,115,103,106,106,100,0,99,114,103],
[108,108,106,101,117,95,112,0,115,100],
[98,103,98,97,101,94,97,96,0,94],
[115,110,107,110,102,109,108,111,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,112,107,122,113,105,114,114,113],
[87,0,107,97,108,96,95,92,98,102],
[99,104,0,103,115,95,98,104,95,106],
[104,114,108,0,113,97,93,99,100,115],
[89,103,96,98,0,89,88,88,83,95],
[98,115,116,114,122,0,87,107,108,118],
[106,116,113,118,123,124,0,101,103,122],
[97,119,107,112,123,104,110,0,107,111],
[97,113,116,111,128,103,108,104,0,113],
[98,109,105,96,116,93,89,100,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,126,114,80,76,102,135,80,107],
[111,0,149,135,109,105,100,146,89,122],
[85,62,0,91,85,72,67,101,78,71],
[97,76,120,0,92,70,83,101,94,88],
[131,102,126,119,0,113,83,133,91,110],
[135,106,139,141,98,0,118,117,119,126],
[109,111,144,128,128,93,0,127,108,143],
[76,65,110,110,78,94,84,0,83,86],
[131,122,133,117,120,92,103,128,0,122],
[104,89,140,123,101,85,68,125,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,95,83,100,106,92,95,91,94],
[111,0,88,76,89,97,94,104,107,80],
[116,123,0,103,100,95,106,103,98,111],
[128,135,108,0,111,112,112,112,106,101],
[111,122,111,100,0,107,112,121,107,108],
[105,114,116,99,104,0,98,115,103,124],
[119,117,105,99,99,113,0,105,109,91],
[116,107,108,99,90,96,106,0,92,108],
[120,104,113,105,104,108,102,119,0,97],
[117,131,100,110,103,87,120,103,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,113,121,122,129,102,133,100,105],
[109,0,112,119,116,124,105,123,102,100],
[98,99,0,105,117,110,106,124,111,111],
[90,92,106,0,98,108,107,117,97,108],
[89,95,94,113,0,124,106,108,100,107],
[82,87,101,103,87,0,89,92,87,99],
[109,106,105,104,105,122,0,115,102,105],
[78,88,87,94,103,119,96,0,92,100],
[111,109,100,114,111,124,109,119,0,114],
[106,111,100,103,104,112,106,111,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,120,111,89,126,93,121,102,101],
[120,0,105,117,104,110,111,115,120,108],
[91,106,0,112,108,100,109,123,113,98],
[100,94,99,0,89,105,103,110,123,111],
[122,107,103,122,0,106,113,133,134,114],
[85,101,111,106,105,0,93,99,102,101],
[118,100,102,108,98,118,0,109,107,107],
[90,96,88,101,78,112,102,0,105,103],
[109,91,98,88,77,109,104,106,0,94],
[110,103,113,100,97,110,104,108,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,125,119,125,117,93,86,84,99],
[106,0,117,113,117,135,109,105,90,123],
[86,94,0,90,100,92,78,89,86,92],
[92,98,121,0,103,115,90,100,72,106],
[86,94,111,108,0,104,88,93,98,95],
[94,76,119,96,107,0,76,76,97,81],
[118,102,133,121,123,135,0,111,113,121],
[125,106,122,111,118,135,100,0,86,117],
[127,121,125,139,113,114,98,125,0,107],
[112,88,119,105,116,130,90,94,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,114,102,104,111,101,106,116],
[102,0,112,116,113,116,111,112,118,119],
[102,99,0,110,100,109,103,106,108,116],
[97,95,101,0,99,101,95,89,97,101],
[109,98,111,112,0,111,105,101,113,115],
[107,95,102,110,100,0,99,106,113,102],
[100,100,108,116,106,112,0,104,111,117],
[110,99,105,122,110,105,107,0,108,123],
[105,93,103,114,98,98,100,103,0,104],
[95,92,95,110,96,109,94,88,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,112,120,112,98,111,110,126,109],
[89,0,107,110,111,122,116,109,112,107],
[99,104,0,100,97,103,111,104,103,105],
[91,101,111,0,101,100,110,107,113,115],
[99,100,114,110,0,115,117,110,109,114],
[113,89,108,111,96,0,109,102,115,118],
[100,95,100,101,94,102,0,101,91,94],
[101,102,107,104,101,109,110,0,101,116],
[85,99,108,98,102,96,120,110,0,105],
[102,104,106,96,97,93,117,95,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,95,93,103,95,103,104,103,98],
[113,0,103,109,107,94,118,111,105,106],
[116,108,0,103,104,107,107,115,112,98],
[118,102,108,0,110,106,109,107,112,116],
[108,104,107,101,0,104,109,115,112,115],
[116,117,104,105,107,0,110,114,113,112],
[108,93,104,102,102,101,0,110,116,97],
[107,100,96,104,96,97,101,0,103,100],
[108,106,99,99,99,98,95,108,0,94],
[113,105,113,95,96,99,114,111,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,101,99,90,121,99,97,96,101],
[117,0,97,120,100,127,99,112,106,110],
[110,114,0,116,114,131,116,104,118,108],
[112,91,95,0,90,110,105,96,100,99],
[121,111,97,121,0,121,114,106,114,104],
[90,84,80,101,90,0,81,86,78,101],
[112,112,95,106,97,130,0,120,104,116],
[114,99,107,115,105,125,91,0,108,105],
[115,105,93,111,97,133,107,103,0,101],
[110,101,103,112,107,110,95,106,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,110,101,105,115,122,92,114,102],
[113,0,120,108,110,100,120,116,112,115],
[101,91,0,104,112,107,104,96,99,92],
[110,103,107,0,110,111,109,103,114,112],
[106,101,99,101,0,112,114,103,119,104],
[96,111,104,100,99,0,111,98,114,118],
[89,91,107,102,97,100,0,93,100,104],
[119,95,115,108,108,113,118,0,110,107],
[97,99,112,97,92,97,111,101,0,96],
[109,96,119,99,107,93,107,104,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,81,68,102,73,76,75,83,25],
[123,0,147,151,123,94,98,165,115,110],
[130,64,0,119,96,75,97,119,112,94],
[143,60,92,0,113,88,134,159,110,101],
[109,88,115,98,0,91,109,126,104,86],
[138,117,136,123,120,0,125,177,88,114],
[135,113,114,77,102,86,0,112,63,63],
[136,46,92,52,85,34,99,0,73,26],
[128,96,99,101,107,123,148,138,0,78],
[186,101,117,110,125,97,148,185,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,125,110,110,96,103,112,129,111],
[112,0,118,108,100,87,96,113,134,121],
[86,93,0,87,86,87,84,116,127,101],
[101,103,124,0,103,94,110,105,123,113],
[101,111,125,108,0,109,98,114,119,122],
[115,124,124,117,102,0,105,119,134,127],
[108,115,127,101,113,106,0,116,135,125],
[99,98,95,106,97,92,95,0,126,110],
[82,77,84,88,92,77,76,85,0,80],
[100,90,110,98,89,84,86,101,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,110,113,95,109,110,88,112,102],
[102,0,86,83,85,70,77,89,97,112],
[101,125,0,81,134,96,88,103,106,103],
[98,128,130,0,108,108,95,108,115,101],
[116,126,77,103,0,110,111,98,109,101],
[102,141,115,103,101,0,97,124,99,118],
[101,134,123,116,100,114,0,80,115,119],
[123,122,108,103,113,87,131,0,108,128],
[99,114,105,96,102,112,96,103,0,101],
[109,99,108,110,110,93,92,83,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,108,102,123,85,106,135,105,107],
[58,0,57,51,50,38,67,52,77,88],
[103,154,0,81,100,87,103,112,129,111],
[109,160,130,0,104,98,102,128,124,113],
[88,161,111,107,0,76,96,61,119,105],
[126,173,124,113,135,0,110,91,152,113],
[105,144,108,109,115,101,0,96,120,110],
[76,159,99,83,150,120,115,0,135,123],
[106,134,82,87,92,59,91,76,0,84],
[104,123,100,98,106,98,101,88,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,121,104,73,144,168,157,163,136],
[83,0,102,113,43,142,106,111,101,126],
[90,109,0,31,148,118,89,149,86,151],
[107,98,180,0,130,135,157,166,152,133],
[138,168,63,81,0,153,110,104,105,114],
[67,69,93,76,58,0,102,102,97,113],
[43,105,122,54,101,109,0,122,82,147],
[54,100,62,45,107,109,89,0,77,84],
[48,110,125,59,106,114,129,134,0,156],
[75,85,60,78,97,98,64,127,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,107,99,109,99,104,112,112,106],
[109,0,96,91,95,84,103,113,97,102],
[104,115,0,105,96,85,103,105,122,110],
[112,120,106,0,100,102,98,123,104,109],
[102,116,115,111,0,112,107,114,122,115],
[112,127,126,109,99,0,113,128,127,137],
[107,108,108,113,104,98,0,115,115,112],
[99,98,106,88,97,83,96,0,105,108],
[99,114,89,107,89,84,96,106,0,114],
[105,109,101,102,96,74,99,103,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,100,97,109,107,121,123,98,108],
[98,0,97,105,94,91,98,103,99,94],
[111,114,0,118,111,116,114,122,111,96],
[114,106,93,0,110,113,105,122,103,103],
[102,117,100,101,0,108,103,115,117,98],
[104,120,95,98,103,0,100,106,103,94],
[90,113,97,106,108,111,0,112,106,87],
[88,108,89,89,96,105,99,0,105,87],
[113,112,100,108,94,108,105,106,0,91],
[103,117,115,108,113,117,124,124,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,97,93,94,81,73,109,97,87],
[136,0,105,126,127,124,125,140,119,114],
[114,106,0,99,97,91,111,136,107,90],
[118,85,112,0,87,93,96,113,107,94],
[117,84,114,124,0,117,95,96,111,98],
[130,87,120,118,94,0,111,97,118,98],
[138,86,100,115,116,100,0,115,119,116],
[102,71,75,98,115,114,96,0,117,109],
[114,92,104,104,100,93,92,94,0,82],
[124,97,121,117,113,113,95,102,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,98,102,104,108,113,121,91,107],
[88,0,75,101,101,107,102,98,89,97],
[113,136,0,108,103,122,117,102,109,100],
[109,110,103,0,104,98,116,115,105,104],
[107,110,108,107,0,89,100,99,93,107],
[103,104,89,113,122,0,124,111,101,110],
[98,109,94,95,111,87,0,100,89,111],
[90,113,109,96,112,100,111,0,100,112],
[120,122,102,106,118,110,122,111,0,108],
[104,114,111,107,104,101,100,99,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,108,96,95,106,109,98,104,101],
[112,0,97,98,87,106,111,109,97,91],
[103,114,0,100,106,102,120,107,107,90],
[115,113,111,0,121,109,131,115,97,108],
[116,124,105,90,0,104,122,110,113,109],
[105,105,109,102,107,0,120,120,104,105],
[102,100,91,80,89,91,0,96,101,97],
[113,102,104,96,101,91,115,0,104,98],
[107,114,104,114,98,107,110,107,0,92],
[110,120,121,103,102,106,114,113,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,97,118,99,107,107,103,111,105],
[102,0,114,107,106,109,105,99,110,110],
[114,97,0,102,107,104,109,107,114,110],
[93,104,109,0,97,102,105,97,102,104],
[112,105,104,114,0,105,95,100,111,108],
[104,102,107,109,106,0,105,102,108,104],
[104,106,102,106,116,106,0,106,104,112],
[108,112,104,114,111,109,105,0,106,108],
[100,101,97,109,100,103,107,105,0,106],
[106,101,101,107,103,107,99,103,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,89,90,99,83,86,102,101,101],
[112,0,99,103,97,111,126,114,111,118],
[122,112,0,109,114,99,109,99,100,103],
[121,108,102,0,106,117,118,112,129,112],
[112,114,97,105,0,102,98,95,110,110],
[128,100,112,94,109,0,129,129,105,96],
[125,85,102,93,113,82,0,116,102,117],
[109,97,112,99,116,82,95,0,115,107],
[110,100,111,82,101,106,109,96,0,112],
[110,93,108,99,101,115,94,104,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,115,119,104,110,108,115,120,115],
[96,0,104,108,102,99,103,105,117,104],
[96,107,0,112,103,111,99,101,108,101],
[92,103,99,0,97,102,98,105,106,101],
[107,109,108,114,0,101,107,111,116,114],
[101,112,100,109,110,0,106,110,105,112],
[103,108,112,113,104,105,0,103,105,99],
[96,106,110,106,100,101,108,0,103,106],
[91,94,103,105,95,106,106,108,0,95],
[96,107,110,110,97,99,112,105,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,95,93,110,88,102,99,94,88],
[115,0,114,104,132,105,109,106,110,96],
[116,97,0,108,123,96,96,117,102,86],
[118,107,103,0,126,110,111,123,120,106],
[101,79,88,85,0,84,91,90,87,76],
[123,106,115,101,127,0,107,113,103,102],
[109,102,115,100,120,104,0,97,100,85],
[112,105,94,88,121,98,114,0,91,80],
[117,101,109,91,124,108,111,120,0,88],
[123,115,125,105,135,109,126,131,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,107,99,98,113,110,93,88,84],
[96,0,88,85,84,110,90,79,90,84],
[104,123,0,122,108,110,105,104,112,112],
[112,126,89,0,107,125,110,109,104,85],
[113,127,103,104,0,131,112,90,98,121],
[98,101,101,86,80,0,114,81,77,107],
[101,121,106,101,99,97,0,93,92,93],
[118,132,107,102,121,130,118,0,109,115],
[123,121,99,107,113,134,119,102,0,108],
[127,127,99,126,90,104,118,96,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,76,86,86,84,75,71,79],
[143,0,110,103,121,88,112,114,120,111],
[141,101,0,112,127,105,120,92,96,102],
[135,108,99,0,107,96,106,95,107,109],
[125,90,84,104,0,89,115,99,92,102],
[125,123,106,115,122,0,105,112,109,109],
[127,99,91,105,96,106,0,76,94,94],
[136,97,119,116,112,99,135,0,112,102],
[140,91,115,104,119,102,117,99,0,98],
[132,100,109,102,109,102,117,109,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,100,110,112,86,93,81,114],
[111,0,102,98,97,115,105,91,98,100],
[110,109,0,106,105,114,120,104,100,95],
[111,113,105,0,115,105,105,111,109,113],
[101,114,106,96,0,109,99,104,103,98],
[99,96,97,106,102,0,102,95,93,106],
[125,106,91,106,112,109,0,89,96,100],
[118,120,107,100,107,116,122,0,89,110],
[130,113,111,102,108,118,115,122,0,113],
[97,111,116,98,113,105,111,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,109,98,103,105,104,99,100,96],
[118,0,109,117,108,111,118,104,107,103],
[102,102,0,98,105,103,103,100,101,97],
[113,94,113,0,104,107,106,104,109,94],
[108,103,106,107,0,101,113,106,88,106],
[106,100,108,104,110,0,105,96,93,89],
[107,93,108,105,98,106,0,102,101,92],
[112,107,111,107,105,115,109,0,111,103],
[111,104,110,102,123,118,110,100,0,99],
[115,108,114,117,105,122,119,108,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,97,101,109,87,108,114,122,104],
[93,0,88,84,105,88,97,96,103,79],
[114,123,0,100,115,98,122,121,130,104],
[110,127,111,0,122,110,129,117,119,100],
[102,106,96,89,0,89,103,98,105,94],
[124,123,113,101,122,0,132,124,120,114],
[103,114,89,82,108,79,0,109,105,74],
[97,115,90,94,113,87,102,0,107,85],
[89,108,81,92,106,91,106,104,0,97],
[107,132,107,111,117,97,137,126,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,128,128,55,146,78,143,109,67],
[97,0,91,103,94,143,13,129,142,84],
[83,120,0,109,49,96,52,96,128,101],
[83,108,102,0,56,89,33,143,137,87],
[156,117,162,155,0,109,110,115,155,81],
[65,68,115,122,102,0,19,177,122,30],
[133,198,159,178,101,192,0,177,197,164],
[68,82,115,68,96,34,34,0,86,19],
[102,69,83,74,56,89,14,125,0,59],
[144,127,110,124,130,181,47,192,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,99,108,104,117,103,97,102,90],
[124,0,117,134,112,110,108,105,116,119],
[112,94,0,116,114,115,106,107,105,91],
[103,77,95,0,100,102,95,95,104,79],
[107,99,97,111,0,109,102,100,105,78],
[94,101,96,109,102,0,89,93,99,87],
[108,103,105,116,109,122,0,102,112,105],
[114,106,104,116,111,118,109,0,125,116],
[109,95,106,107,106,112,99,86,0,92],
[121,92,120,132,133,124,106,95,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,110,104,110,115,105,117,115,102],
[89,0,108,101,97,106,101,122,97,94],
[101,103,0,93,100,113,103,127,111,102],
[107,110,118,0,105,117,112,115,104,103],
[101,114,111,106,0,121,116,131,121,104],
[96,105,98,94,90,0,86,123,116,97],
[106,110,108,99,95,125,0,117,112,110],
[94,89,84,96,80,88,94,0,92,82],
[96,114,100,107,90,95,99,119,0,112],
[109,117,109,108,107,114,101,129,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,110,118,117,116,115,111,104,115],
[104,0,109,125,121,112,119,109,107,110],
[101,102,0,111,114,112,117,109,99,114],
[93,86,100,0,107,106,106,96,91,94],
[94,90,97,104,0,99,100,88,92,93],
[95,99,99,105,112,0,104,94,96,96],
[96,92,94,105,111,107,0,89,92,101],
[100,102,102,115,123,117,122,0,104,111],
[107,104,112,120,119,115,119,107,0,105],
[96,101,97,117,118,115,110,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,94,94,82,87,101,115,97,90],
[105,0,89,92,100,91,100,109,98,85],
[117,122,0,118,105,108,113,118,108,105],
[117,119,93,0,87,84,104,114,104,94],
[129,111,106,124,0,96,125,126,107,95],
[124,120,103,127,115,0,111,128,104,113],
[110,111,98,107,86,100,0,120,116,89],
[96,102,93,97,85,83,91,0,90,85],
[114,113,103,107,104,107,95,121,0,92],
[121,126,106,117,116,98,122,126,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,100,96,93,94,91,91,100,106],
[128,0,120,103,118,116,112,105,131,127],
[111,91,0,95,100,95,93,105,101,122],
[115,108,116,0,111,99,109,118,119,119],
[118,93,111,100,0,115,99,104,122,114],
[117,95,116,112,96,0,107,114,117,121],
[120,99,118,102,112,104,0,111,109,111],
[120,106,106,93,107,97,100,0,113,109],
[111,80,110,92,89,94,102,98,0,105],
[105,84,89,92,97,90,100,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,119,105,122,104,119,104,118],
[105,0,110,123,112,118,105,115,108,110],
[99,101,0,107,95,101,90,106,97,88],
[92,88,104,0,102,109,97,110,102,106],
[106,99,116,109,0,121,106,108,107,103],
[89,93,110,102,90,0,85,90,104,98],
[107,106,121,114,105,126,0,122,117,113],
[92,96,105,101,103,121,89,0,107,102],
[107,103,114,109,104,107,94,104,0,106],
[93,101,123,105,108,113,98,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,124,127,127,113,141,102,101,111],
[67,0,101,105,99,116,128,110,94,80],
[87,110,0,113,108,98,134,112,100,105],
[84,106,98,0,109,104,144,85,83,69],
[84,112,103,102,0,94,140,106,112,78],
[98,95,113,107,117,0,138,109,107,83],
[70,83,77,67,71,73,0,99,72,80],
[109,101,99,126,105,102,112,0,92,101],
[110,117,111,128,99,104,139,119,0,100],
[100,131,106,142,133,128,131,110,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,75,91,92,100,91,97,95,104],
[120,0,82,123,91,124,113,114,87,115],
[136,129,0,118,101,117,122,120,107,133],
[120,88,93,0,85,104,95,99,102,112],
[119,120,110,126,0,127,127,100,120,135],
[111,87,94,107,84,0,99,96,104,109],
[120,98,89,116,84,112,0,103,102,108],
[114,97,91,112,111,115,108,0,97,136],
[116,124,104,109,91,107,109,114,0,125],
[107,96,78,99,76,102,103,75,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,132,137,143,88,137,131,120,105],
[77,0,88,106,96,90,116,118,105,76],
[79,123,0,102,126,110,127,102,83,86],
[74,105,109,0,143,88,116,125,96,104],
[68,115,85,68,0,80,99,105,84,71],
[123,121,101,123,131,0,110,142,104,111],
[74,95,84,95,112,101,0,109,102,86],
[80,93,109,86,106,69,102,0,98,105],
[91,106,128,115,127,107,109,113,0,111],
[106,135,125,107,140,100,125,106,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,65,95,116,108,101,94,95,102],
[105,0,78,71,95,106,104,93,75,87],
[146,133,0,110,135,130,122,130,111,90],
[116,140,101,0,117,122,119,109,126,113],
[95,116,76,94,0,99,101,91,98,69],
[103,105,81,89,112,0,81,100,92,71],
[110,107,89,92,110,130,0,107,125,86],
[117,118,81,102,120,111,104,0,84,102],
[116,136,100,85,113,119,86,127,0,90],
[109,124,121,98,142,140,125,109,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,128,93,122,138,137,120,119,151],
[96,0,83,83,104,99,139,89,116,114],
[83,128,0,86,83,105,123,78,110,113],
[118,128,125,0,110,115,143,104,126,152],
[89,107,128,101,0,100,125,85,114,119],
[73,112,106,96,111,0,126,75,98,111],
[74,72,88,68,86,85,0,92,82,84],
[91,122,133,107,126,136,119,0,122,132],
[92,95,101,85,97,113,129,89,0,95],
[60,97,98,59,92,100,127,79,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,118,103,108,111,105,105,101,109],
[102,0,102,97,102,95,95,99,96,103],
[93,109,0,108,98,105,106,106,97,96],
[108,114,103,0,103,102,101,101,105,102],
[103,109,113,108,0,104,102,99,106,107],
[100,116,106,109,107,0,101,108,99,99],
[106,116,105,110,109,110,0,104,110,111],
[106,112,105,110,112,103,107,0,102,106],
[110,115,114,106,105,112,101,109,0,103],
[102,108,115,109,104,112,100,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,85,101,123,119,112,108,114,113],
[122,0,87,106,108,117,114,109,109,107],
[126,124,0,85,122,127,84,107,125,87],
[110,105,126,0,119,114,125,88,123,85],
[88,103,89,92,0,103,95,86,126,89],
[92,94,84,97,108,0,119,70,131,100],
[99,97,127,86,116,92,0,81,126,110],
[103,102,104,123,125,141,130,0,114,95],
[97,102,86,88,85,80,85,97,0,86],
[98,104,124,126,122,111,101,116,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,111,116,110,117,110,95,93],
[104,0,112,127,114,115,106,101,90,102],
[106,99,0,102,112,92,103,100,86,99],
[100,84,109,0,109,101,93,96,93,94],
[95,97,99,102,0,99,103,93,92,94],
[101,96,119,110,112,0,101,118,96,104],
[94,105,108,118,108,110,0,106,102,99],
[101,110,111,115,118,93,105,0,107,99],
[116,121,125,118,119,115,109,104,0,115],
[118,109,112,117,117,107,112,112,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,101,102,97,105,105,109,106,110],
[114,0,110,106,105,110,110,111,107,111],
[110,101,0,111,106,118,120,117,107,104],
[109,105,100,0,101,109,108,110,94,96],
[114,106,105,110,0,111,112,123,107,114],
[106,101,93,102,100,0,114,110,96,105],
[106,101,91,103,99,97,0,106,103,108],
[102,100,94,101,88,101,105,0,101,105],
[105,104,104,117,104,115,108,110,0,105],
[101,100,107,115,97,106,103,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,85,105,103,106,110,101,97,104],
[106,0,112,102,113,119,114,98,101,106],
[126,99,0,118,123,126,113,106,116,105],
[106,109,93,0,122,124,122,103,105,116],
[108,98,88,89,0,104,106,90,101,109],
[105,92,85,87,107,0,103,84,97,102],
[101,97,98,89,105,108,0,95,95,95],
[110,113,105,108,121,127,116,0,107,108],
[114,110,95,106,110,114,116,104,0,100],
[107,105,106,95,102,109,116,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,102,96,112,109,103,115,104,117],
[99,0,104,96,110,108,102,120,104,105],
[109,107,0,90,120,113,106,108,102,103],
[115,115,121,0,120,118,103,127,112,114],
[99,101,91,91,0,100,90,116,108,104],
[102,103,98,93,111,0,92,111,103,103],
[108,109,105,108,121,119,0,119,104,112],
[96,91,103,84,95,100,92,0,97,100],
[107,107,109,99,103,108,107,114,0,102],
[94,106,108,97,107,108,99,111,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,97,98,121,99,105,105,117,118],
[102,0,113,104,104,103,125,112,109,104],
[114,98,0,84,114,93,117,107,126,111],
[113,107,127,0,108,93,130,116,135,125],
[90,107,97,103,0,99,108,99,116,97],
[112,108,118,118,112,0,132,118,101,127],
[106,86,94,81,103,79,0,83,91,93],
[106,99,104,95,112,93,128,0,121,112],
[94,102,85,76,95,110,120,90,0,98],
[93,107,100,86,114,84,118,99,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,65,70,33,33,35,100,67,103],
[173,0,160,49,82,141,84,160,84,160],
[146,51,0,87,50,101,103,211,122,120],
[141,162,124,0,111,141,108,156,84,166],
[178,129,161,100,0,179,135,161,122,198],
[178,70,110,70,32,0,105,148,105,146],
[176,127,108,103,76,106,0,146,103,146],
[111,51,0,55,50,63,65,0,122,88],
[144,127,89,127,89,106,108,89,0,114],
[108,51,91,45,13,65,65,123,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,107,112,105,108,118,105,108,114],
[110,0,108,112,120,113,118,107,102,114],
[104,103,0,106,103,110,114,105,112,116],
[99,99,105,0,105,105,104,109,110,117],
[106,91,108,106,0,104,102,100,109,102],
[103,98,101,106,107,0,112,109,119,110],
[93,93,97,107,109,99,0,98,106,110],
[106,104,106,102,111,102,113,0,120,114],
[103,109,99,101,102,92,105,91,0,112],
[97,97,95,94,109,101,101,97,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,101,114,104,103,108,103,109,109],
[100,0,111,99,95,100,119,100,99,103],
[110,100,0,116,90,98,104,104,114,119],
[97,112,95,0,92,106,104,102,107,109],
[107,116,121,119,0,104,114,112,108,108],
[108,111,113,105,107,0,119,103,102,118],
[103,92,107,107,97,92,0,121,110,102],
[108,111,107,109,99,108,90,0,119,102],
[102,112,97,104,103,109,101,92,0,101],
[102,108,92,102,103,93,109,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,143,108,147,114,98,119,99,118],
[109,0,114,117,157,91,103,103,108,112],
[68,97,0,63,111,87,97,101,96,115],
[103,94,148,0,151,109,103,115,113,122],
[64,54,100,60,0,75,73,74,94,93],
[97,120,124,102,136,0,101,78,126,126],
[113,108,114,108,138,110,0,116,97,113],
[92,108,110,96,137,133,95,0,123,116],
[112,103,115,98,117,85,114,88,0,113],
[93,99,96,89,118,85,98,95,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,116,126,106,109,101,112,110,99],
[97,0,126,128,99,115,114,115,101,118],
[95,85,0,115,98,101,87,81,85,89],
[85,83,96,0,85,95,88,83,80,94],
[105,112,113,126,0,116,109,111,107,103],
[102,96,110,116,95,0,85,95,103,94],
[110,97,124,123,102,126,0,102,94,106],
[99,96,130,128,100,116,109,0,114,128],
[101,110,126,131,104,108,117,97,0,112],
[112,93,122,117,108,117,105,83,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,118,125,97,124,98,93,117,115],
[98,0,85,111,107,91,109,89,113,112],
[93,126,0,98,90,104,108,109,105,110],
[86,100,113,0,84,105,86,95,89,129],
[114,104,121,127,0,105,102,87,96,133],
[87,120,107,106,106,0,87,102,94,119],
[113,102,103,125,109,124,0,105,102,123],
[118,122,102,116,124,109,106,0,108,118],
[94,98,106,122,115,117,109,103,0,103],
[96,99,101,82,78,92,88,93,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,138,89,136,178,103,120,129,120],
[72,0,72,58,70,100,100,42,51,100],
[73,139,0,56,56,138,136,82,124,120],
[122,153,155,0,113,211,113,82,162,120],
[75,141,155,98,0,178,138,82,129,155],
[33,111,73,0,33,0,113,42,124,92],
[108,111,75,98,73,98,0,68,124,78],
[91,169,129,129,129,169,143,0,197,169],
[82,160,87,49,82,87,87,14,0,127],
[91,111,91,91,56,119,133,42,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,154,139,126,124,121,115,129,92],
[87,0,109,116,94,94,94,101,102,68],
[57,102,0,95,84,75,87,64,91,52],
[72,95,116,0,70,99,108,69,71,70],
[85,117,127,141,0,113,131,87,116,70],
[87,117,136,112,98,0,104,109,126,110],
[90,117,124,103,80,107,0,75,91,109],
[96,110,147,142,124,102,136,0,126,71],
[82,109,120,140,95,85,120,85,0,81],
[119,143,159,141,141,101,102,140,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,108,112,109,119,97,108,102],
[106,0,108,98,114,93,101,95,99,100],
[110,103,0,96,110,100,109,101,105,101],
[103,113,115,0,119,101,111,104,111,111],
[99,97,101,92,0,92,94,93,95,88],
[102,118,111,110,119,0,128,107,104,116],
[92,110,102,100,117,83,0,106,104,95],
[114,116,110,107,118,104,105,0,114,98],
[103,112,106,100,116,107,107,97,0,107],
[109,111,110,100,123,95,116,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,89,111,91,75,89,91,86,107],
[131,0,122,123,111,111,99,118,117,115],
[122,89,0,120,120,96,94,116,94,107],
[100,88,91,0,111,85,103,102,98,118],
[120,100,91,100,0,97,95,101,124,105],
[136,100,115,126,114,0,116,123,96,131],
[122,112,117,108,116,95,0,113,111,117],
[120,93,95,109,110,88,98,0,99,105],
[125,94,117,113,87,115,100,112,0,124],
[104,96,104,93,106,80,94,106,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,95,111,106,125,106,106,106],
[102,0,101,107,102,109,115,98,114,93],
[104,110,0,103,113,102,121,116,104,107],
[116,104,108,0,115,104,112,111,113,107],
[100,109,98,96,0,98,111,101,117,95],
[105,102,109,107,113,0,116,105,110,104],
[86,96,90,99,100,95,0,98,94,88],
[105,113,95,100,110,106,113,0,112,103],
[105,97,107,98,94,101,117,99,0,96],
[105,118,104,104,116,107,123,108,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,105,102,110,111,98,108,98,101],
[100,0,102,104,116,108,98,98,103,103],
[106,109,0,101,111,124,107,108,112,113],
[109,107,110,0,112,109,92,103,109,104],
[101,95,100,99,0,107,93,93,98,88],
[100,103,87,102,104,0,88,105,88,93],
[113,113,104,119,118,123,0,103,112,109],
[103,113,103,108,118,106,108,0,104,103],
[113,108,99,102,113,123,99,107,0,108],
[110,108,98,107,123,118,102,108,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,112,102,121,119,126,117,109,110],
[101,0,107,112,113,117,112,111,108,102],
[99,104,0,105,117,116,112,105,105,109],
[109,99,106,0,108,106,102,106,104,106],
[90,98,94,103,0,112,103,101,94,94],
[92,94,95,105,99,0,95,91,99,94],
[85,99,99,109,108,116,0,114,106,103],
[94,100,106,105,110,120,97,0,103,99],
[102,103,106,107,117,112,105,108,0,105],
[101,109,102,105,117,117,108,112,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,116,106,106,116,95,103,90,106],
[93,0,94,90,101,109,107,89,88,114],
[95,117,0,115,99,118,101,116,82,120],
[105,121,96,0,103,119,100,101,93,93],
[105,110,112,108,0,108,103,101,68,103],
[95,102,93,92,103,0,106,87,81,100],
[116,104,110,111,108,105,0,105,97,115],
[108,122,95,110,110,124,106,0,107,105],
[121,123,129,118,143,130,114,104,0,128],
[105,97,91,118,108,111,96,106,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,99,104,94,103,96,97,97,93],
[103,0,101,111,96,106,114,100,104,106],
[112,110,0,107,106,112,115,105,106,112],
[107,100,104,0,105,119,108,109,107,104],
[117,115,105,106,0,108,111,105,108,105],
[108,105,99,92,103,0,103,103,108,100],
[115,97,96,103,100,108,0,103,97,102],
[114,111,106,102,106,108,108,0,109,110],
[114,107,105,104,103,103,114,102,0,100],
[118,105,99,107,106,111,109,101,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,111,124,116,130,123,100,138,109],
[75,0,83,119,96,100,78,79,109,85],
[100,128,0,127,128,140,119,116,127,126],
[87,92,84,0,76,91,91,85,93,38],
[95,115,83,135,0,145,108,117,106,113],
[81,111,71,120,66,0,77,87,87,84],
[88,133,92,120,103,134,0,120,122,100],
[111,132,95,126,94,124,91,0,99,89],
[73,102,84,118,105,124,89,112,0,95],
[102,126,85,173,98,127,111,122,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,105,75,71,83,144,78,78,114],
[162,0,123,159,116,123,159,118,92,124],
[106,88,0,167,115,95,127,92,98,128],
[136,52,44,0,74,60,76,93,94,94],
[140,95,96,137,0,94,130,130,135,92],
[128,88,116,151,117,0,150,47,84,85],
[67,52,84,135,81,61,0,95,66,128],
[133,93,119,118,81,164,116,0,92,115],
[133,119,113,117,76,127,145,119,0,118],
[97,87,83,117,119,126,83,96,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,100,99,104,114,103,98,111,107],
[104,0,92,111,109,117,116,103,113,112],
[111,119,0,98,122,110,107,103,113,114],
[112,100,113,0,113,104,102,99,119,102],
[107,102,89,98,0,102,104,98,114,111],
[97,94,101,107,109,0,102,97,110,104],
[108,95,104,109,107,109,0,95,115,100],
[113,108,108,112,113,114,116,0,111,105],
[100,98,98,92,97,101,96,100,0,104],
[104,99,97,109,100,107,111,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,87,108,96,97,106,98,110],
[112,0,116,102,102,100,106,105,89,108],
[109,95,0,91,85,89,76,91,87,91],
[124,109,120,0,119,115,104,112,107,117],
[103,109,126,92,0,116,102,108,100,115],
[115,111,122,96,95,0,108,101,103,107],
[114,105,135,107,109,103,0,104,98,111],
[105,106,120,99,103,110,107,0,104,106],
[113,122,124,104,111,108,113,107,0,104],
[101,103,120,94,96,104,100,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,101,107,114,111,105,99,95,99],
[104,0,103,95,102,104,93,97,108,117],
[110,108,0,115,106,114,110,98,103,116],
[104,116,96,0,116,109,106,87,101,112],
[97,109,105,95,0,107,99,91,95,93],
[100,107,97,102,104,0,95,87,88,100],
[106,118,101,105,112,116,0,110,109,110],
[112,114,113,124,120,124,101,0,107,121],
[116,103,108,110,116,123,102,104,0,114],
[112,94,95,99,118,111,101,90,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,107,109,98,110,99,84,104,98],
[119,0,105,100,109,107,103,124,107,113],
[104,106,0,92,107,100,105,110,110,111],
[102,111,119,0,87,96,110,100,104,103],
[113,102,104,124,0,93,95,90,94,101],
[101,104,111,115,118,0,94,88,112,108],
[112,108,106,101,116,117,0,91,113,99],
[127,87,101,111,121,123,120,0,106,103],
[107,104,101,107,117,99,98,105,0,113],
[113,98,100,108,110,103,112,108,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,102,107,102,111,107,99,102],
[107,0,102,109,97,104,96,105,95,98],
[104,109,0,116,116,99,102,102,112,106],
[109,102,95,0,107,89,100,95,95,101],
[104,114,95,104,0,103,109,93,97,98],
[109,107,112,122,108,0,113,103,115,104],
[100,115,109,111,102,98,0,114,106,103],
[104,106,109,116,118,108,97,0,101,103],
[112,116,99,116,114,96,105,110,0,122],
[109,113,105,110,113,107,108,108,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,104,114,111,115,112,108,114,100],
[97,0,90,103,103,109,101,111,95,102],
[107,121,0,109,118,120,115,118,120,104],
[97,108,102,0,106,124,90,108,106,105],
[100,108,93,105,0,114,104,115,105,103],
[96,102,91,87,97,0,93,108,99,96],
[99,110,96,121,107,118,0,110,113,121],
[103,100,93,103,96,103,101,0,108,103],
[97,116,91,105,106,112,98,103,0,92],
[111,109,107,106,108,115,90,108,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,111,97,90,96,94,108,97,98],
[117,0,112,116,122,105,113,118,120,104],
[100,99,0,94,99,88,101,105,93,101],
[114,95,117,0,111,108,101,119,103,104],
[121,89,112,100,0,103,114,105,98,92],
[115,106,123,103,108,0,118,111,120,112],
[117,98,110,110,97,93,0,109,103,99],
[103,93,106,92,106,100,102,0,100,93],
[114,91,118,108,113,91,108,111,0,107],
[113,107,110,107,119,99,112,118,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,111,103,101,102,94,115,89,109],
[119,0,127,113,103,111,109,129,112,112],
[100,84,0,101,92,84,93,105,79,96],
[108,98,110,0,109,102,95,122,97,124],
[110,108,119,102,0,83,96,127,97,119],
[109,100,127,109,128,0,105,123,100,129],
[117,102,118,116,115,106,0,126,116,123],
[96,82,106,89,84,88,85,0,77,96],
[122,99,132,114,114,111,95,134,0,124],
[102,99,115,87,92,82,88,115,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,93,133,108,118,110,101,112,127],
[106,0,121,128,97,111,121,104,110,116],
[118,90,0,107,89,96,113,104,99,100],
[78,83,104,0,83,81,101,68,109,100],
[103,114,122,128,0,125,122,117,116,125],
[93,100,115,130,86,0,110,102,119,115],
[101,90,98,110,89,101,0,93,101,104],
[110,107,107,143,94,109,118,0,114,128],
[99,101,112,102,95,92,110,97,0,108],
[84,95,111,111,86,96,107,83,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,109,117,123,114,114,105,111,108],
[112,0,110,124,115,110,125,99,113,105],
[102,101,0,113,106,102,106,98,94,105],
[94,87,98,0,114,108,91,96,95,108],
[88,96,105,97,0,99,89,104,95,101],
[97,101,109,103,112,0,112,106,107,108],
[97,86,105,120,122,99,0,90,110,118],
[106,112,113,115,107,105,121,0,102,115],
[100,98,117,116,116,104,101,109,0,107],
[103,106,106,103,110,103,93,96,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,113,151,108,111,100,120,146,111],
[90,0,93,123,120,106,91,120,115,101],
[98,118,0,102,105,89,86,110,119,99],
[60,88,109,0,102,99,86,108,93,84],
[103,91,106,109,0,91,97,124,110,88],
[100,105,122,112,120,0,116,129,128,106],
[111,120,125,125,114,95,0,147,140,108],
[91,91,101,103,87,82,64,0,98,77],
[65,96,92,118,101,83,71,113,0,92],
[100,110,112,127,123,105,103,134,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,106,92,94,118,110,101,94,102],
[95,0,103,93,107,110,99,120,106,89],
[105,108,0,99,102,114,94,104,101,86],
[119,118,112,0,117,127,108,115,111,103],
[117,104,109,94,0,117,114,112,94,108],
[93,101,97,84,94,0,91,98,80,91],
[101,112,117,103,97,120,0,121,98,97],
[110,91,107,96,99,113,90,0,88,93],
[117,105,110,100,117,131,113,123,0,111],
[109,122,125,108,103,120,114,118,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,92,116,98,85,125,102,78,102],
[96,0,79,106,111,84,110,86,99,97],
[119,132,0,140,121,103,102,144,121,110],
[95,105,71,0,111,98,81,101,50,92],
[113,100,90,100,0,93,100,79,85,71],
[126,127,108,113,118,0,121,118,116,100],
[86,101,109,130,111,90,0,115,96,124],
[109,125,67,110,132,93,96,0,58,94],
[133,112,90,161,126,95,115,153,0,104],
[109,114,101,119,140,111,87,117,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,119,108,67,98,57,85,119,74],
[123,0,127,98,94,112,82,113,120,129],
[92,84,0,100,89,101,83,78,115,115],
[103,113,111,0,110,109,97,81,131,94],
[144,117,122,101,0,124,106,108,130,121],
[113,99,110,102,87,0,75,74,112,95],
[154,129,128,114,105,136,0,125,135,138],
[126,98,133,130,103,137,86,0,132,131],
[92,91,96,80,81,99,76,79,0,105],
[137,82,96,117,90,116,73,80,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,96,99,95,99,94,97,107],
[112,0,108,105,101,106,111,90,112,116],
[112,103,0,97,97,106,106,115,105,109],
[115,106,114,0,115,117,125,96,106,126],
[112,110,114,96,0,114,118,90,98,117],
[116,105,105,94,97,0,105,95,99,112],
[112,100,105,86,93,106,0,98,96,102],
[117,121,96,115,121,116,113,0,111,118],
[114,99,106,105,113,112,115,100,0,116],
[104,95,102,85,94,99,109,93,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,105,115,104,113,95,100,91,97],
[116,0,121,116,116,109,106,115,101,120],
[106,90,0,130,109,98,92,88,99,99],
[96,95,81,0,98,103,101,89,92,97],
[107,95,102,113,0,106,101,103,100,113],
[98,102,113,108,105,0,99,86,92,109],
[116,105,119,110,110,112,0,105,113,104],
[111,96,123,122,108,125,106,0,95,100],
[120,110,112,119,111,119,98,116,0,119],
[114,91,112,114,98,102,107,111,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,95,93,137,71,134,124,116,73],
[96,0,98,103,117,84,129,98,112,73],
[116,113,0,95,105,120,105,116,101,87],
[118,108,116,0,113,98,157,143,144,96],
[74,94,106,98,0,76,135,115,90,89],
[140,127,91,113,135,0,135,122,111,86],
[77,82,106,54,76,76,0,108,98,91],
[87,113,95,68,96,89,103,0,115,89],
[95,99,110,67,121,100,113,96,0,113],
[138,138,124,115,122,125,120,122,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,116,105,37,108,108,98,59,149],
[174,0,143,118,104,152,133,111,89,162],
[95,68,0,97,105,150,105,75,114,105],
[106,93,114,0,106,128,144,86,92,106],
[174,107,106,105,0,177,120,118,59,158],
[103,59,61,83,34,0,126,96,51,96],
[103,78,106,67,91,85,0,83,29,96],
[113,100,136,125,93,115,128,0,79,166],
[152,122,97,119,152,160,182,132,0,152],
[62,49,106,105,53,115,115,45,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,97,112,97,96,104,98,113],
[110,0,110,106,114,101,99,104,112,111],
[102,101,0,100,102,103,111,106,90,117],
[114,105,111,0,112,104,101,110,97,124],
[99,97,109,99,0,92,94,101,108,108],
[114,110,108,107,119,0,103,106,108,129],
[115,112,100,110,117,108,0,108,107,128],
[107,107,105,101,110,105,103,0,100,113],
[113,99,121,114,103,103,104,111,0,117],
[98,100,94,87,103,82,83,98,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,106,111,114,106,111,112,101],
[103,0,103,111,115,109,111,115,109,101],
[105,108,0,110,117,112,103,111,102,105],
[105,100,101,0,105,99,108,110,107,102],
[100,96,94,106,0,103,100,103,104,90],
[97,102,99,112,108,0,99,115,99,99],
[105,100,108,103,111,112,0,115,102,107],
[100,96,100,101,108,96,96,0,103,96],
[99,102,109,104,107,112,109,108,0,92],
[110,110,106,109,121,112,104,115,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,116,103,105,115,115,99,102],
[106,0,92,90,99,96,108,95,94,94],
[113,119,0,116,104,115,120,125,113,121],
[95,121,95,0,114,112,108,113,116,105],
[108,112,107,97,0,127,106,111,107,100],
[106,115,96,99,84,0,98,95,101,104],
[96,103,91,103,105,113,0,107,107,112],
[96,116,86,98,100,116,104,0,93,110],
[112,117,98,95,104,110,104,118,0,114],
[109,117,90,106,111,107,99,101,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,90,75,108,93,112,123,96,108],
[106,0,90,100,107,102,114,117,91,87],
[121,121,0,122,120,104,121,144,114,132],
[136,111,89,0,120,105,129,133,100,117],
[103,104,91,91,0,100,111,115,85,101],
[118,109,107,106,111,0,101,143,107,123],
[99,97,90,82,100,110,0,103,96,134],
[88,94,67,78,96,68,108,0,66,98],
[115,120,97,111,126,104,115,145,0,121],
[103,124,79,94,110,88,77,113,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,123,112,109,94,107,98,94,106],
[111,0,121,112,107,99,98,112,101,98],
[88,90,0,83,93,81,100,85,84,91],
[99,99,128,0,122,90,91,110,96,117],
[102,104,118,89,0,87,100,95,90,89],
[117,112,130,121,124,0,101,105,94,105],
[104,113,111,120,111,110,0,91,96,110],
[113,99,126,101,116,106,120,0,100,120],
[117,110,127,115,121,117,115,111,0,103],
[105,113,120,94,122,106,101,91,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,105,99,115,109,110,108,112,108],
[95,0,107,97,117,110,98,107,112,98],
[106,104,0,95,120,110,112,106,115,100],
[112,114,116,0,123,116,102,109,124,107],
[96,94,91,88,0,100,100,105,101,91],
[102,101,101,95,111,0,98,108,113,100],
[101,113,99,109,111,113,0,113,112,100],
[103,104,105,102,106,103,98,0,115,108],
[99,99,96,87,110,98,99,96,0,90],
[103,113,111,104,120,111,111,103,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,101,120,105,108,107,109,119,128],
[101,0,97,107,95,109,98,95,100,106],
[110,114,0,118,111,112,112,108,105,106],
[91,104,93,0,95,105,98,102,101,102],
[106,116,100,116,0,99,108,109,106,116],
[103,102,99,106,112,0,109,98,109,110],
[104,113,99,113,103,102,0,114,110,108],
[102,116,103,109,102,113,97,0,108,112],
[92,111,106,110,105,102,101,103,0,115],
[83,105,105,109,95,101,103,99,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,109,121,103,111,110,102,101,107],
[87,0,91,113,90,101,117,105,98,114],
[102,120,0,111,108,107,124,106,92,124],
[90,98,100,0,103,97,107,98,106,96],
[108,121,103,108,0,115,118,104,99,115],
[100,110,104,114,96,0,106,110,102,108],
[101,94,87,104,93,105,0,97,82,101],
[109,106,105,113,107,101,114,0,102,125],
[110,113,119,105,112,109,129,109,0,127],
[104,97,87,115,96,103,110,86,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,85,95,104,105,110,105,95,102],
[105,0,101,105,108,120,122,95,98,99],
[126,110,0,112,114,120,123,98,110,112],
[116,106,99,0,92,105,114,99,111,88],
[107,103,97,119,0,115,132,115,113,111],
[106,91,91,106,96,0,117,99,97,89],
[101,89,88,97,79,94,0,88,98,95],
[106,116,113,112,96,112,123,0,109,98],
[116,113,101,100,98,114,113,102,0,109],
[109,112,99,123,100,122,116,113,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,89,94,111,109,91,94,102,96],
[118,0,102,105,120,121,113,108,115,96],
[122,109,0,90,111,119,100,106,123,109],
[117,106,121,0,122,126,118,107,121,104],
[100,91,100,89,0,101,93,97,105,103],
[102,90,92,85,110,0,91,95,103,97],
[120,98,111,93,118,120,0,106,121,103],
[117,103,105,104,114,116,105,0,103,110],
[109,96,88,90,106,108,90,108,0,103],
[115,115,102,107,108,114,108,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,95,100,104,112,105,114,109,107],
[104,0,106,105,101,103,106,94,115,104],
[116,105,0,115,112,115,98,107,121,109],
[111,106,96,0,106,107,97,99,112,98],
[107,110,99,105,0,115,106,106,117,108],
[99,108,96,104,96,0,103,91,109,100],
[106,105,113,114,105,108,0,108,120,102],
[97,117,104,112,105,120,103,0,110,108],
[102,96,90,99,94,102,91,101,0,93],
[104,107,102,113,103,111,109,103,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,118,117,122,106,118,99,118,119],
[103,0,87,100,95,98,99,99,100,106],
[93,124,0,107,99,102,104,98,108,108],
[94,111,104,0,120,104,101,103,110,111],
[89,116,112,91,0,106,104,102,114,109],
[105,113,109,107,105,0,94,106,112,123],
[93,112,107,110,107,117,0,114,114,118],
[112,112,113,108,109,105,97,0,110,113],
[93,111,103,101,97,99,97,101,0,113],
[92,105,103,100,102,88,93,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,119,108,118,103,92,108,110,149],
[106,0,142,108,137,100,102,105,128,151],
[92,69,0,93,96,90,80,71,80,139],
[103,103,118,0,119,110,119,104,125,152],
[93,74,115,92,0,104,96,100,108,149],
[108,111,121,101,107,0,123,101,125,163],
[119,109,131,92,115,88,0,112,129,138],
[103,106,140,107,111,110,99,0,138,142],
[101,83,131,86,103,86,82,73,0,137],
[62,60,72,59,62,48,73,69,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,102,115,110,99,97,92,120,107],
[107,0,87,110,104,101,106,95,112,98],
[109,124,0,113,121,98,107,90,105,116],
[96,101,98,0,115,112,108,97,102,96],
[101,107,90,96,0,95,98,86,96,106],
[112,110,113,99,116,0,114,110,100,105],
[114,105,104,103,113,97,0,108,107,110],
[119,116,121,114,125,101,103,0,109,118],
[91,99,106,109,115,111,104,102,0,101],
[104,113,95,115,105,106,101,93,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,106,101,109,102,119,102,102,106],
[93,0,110,94,95,99,101,107,106,107],
[105,101,0,89,96,96,119,113,94,103],
[110,117,122,0,110,112,122,116,100,106],
[102,116,115,101,0,90,107,107,92,113],
[109,112,115,99,121,0,112,120,96,111],
[92,110,92,89,104,99,0,101,100,99],
[109,104,98,95,104,91,110,0,102,94],
[109,105,117,111,119,115,111,109,0,117],
[105,104,108,105,98,100,112,117,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,100,97,103,109,113,94,112,111],
[105,0,101,98,106,107,107,110,115,103],
[111,110,0,101,97,113,98,98,103,99],
[114,113,110,0,98,112,96,100,101,105],
[108,105,114,113,0,112,101,112,107,115],
[102,104,98,99,99,0,105,88,108,107],
[98,104,113,115,110,106,0,98,106,109],
[117,101,113,111,99,123,113,0,118,107],
[99,96,108,110,104,103,105,93,0,106],
[100,108,112,106,96,104,102,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,122,95,143,79,127,98,94,117],
[83,0,110,108,144,91,118,96,110,93],
[89,101,0,87,122,79,117,68,90,92],
[116,103,124,0,136,86,111,103,111,103],
[68,67,89,75,0,84,98,66,101,89],
[132,120,132,125,127,0,126,112,105,113],
[84,93,94,100,113,85,0,97,115,84],
[113,115,143,108,145,99,114,0,107,110],
[117,101,121,100,110,106,96,104,0,91],
[94,118,119,108,122,98,127,101,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,124,106,100,125,98,96,110,113],
[98,0,112,107,121,93,93,102,100,101],
[87,99,0,90,93,102,98,77,92,101],
[105,104,121,0,116,117,118,109,110,116],
[111,90,118,95,0,116,109,90,105,109],
[86,118,109,94,95,0,110,84,93,109],
[113,118,113,93,102,101,0,91,98,118],
[115,109,134,102,121,127,120,0,120,124],
[101,111,119,101,106,118,113,91,0,97],
[98,110,110,95,102,102,93,87,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,121,103,116,130,109,112,119,120],
[97,0,122,101,101,107,113,108,106,108],
[90,89,0,98,91,102,91,101,92,98],
[108,110,113,0,115,113,104,114,122,115],
[95,110,120,96,0,106,103,111,113,116],
[81,104,109,98,105,0,97,102,100,105],
[102,98,120,107,108,114,0,112,113,114],
[99,103,110,97,100,109,99,0,101,110],
[92,105,119,89,98,111,98,110,0,110],
[91,103,113,96,95,106,97,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,128,95,114,122,123,71,129,128],
[105,0,115,102,63,99,108,69,124,127],
[83,96,0,91,92,123,127,63,118,130],
[116,109,120,0,102,136,133,111,110,122],
[97,148,119,109,0,127,129,113,139,126],
[89,112,88,75,84,0,106,102,103,101],
[88,103,84,78,82,105,0,86,106,63],
[140,142,148,100,98,109,125,0,140,140],
[82,87,93,101,72,108,105,71,0,107],
[83,84,81,89,85,110,148,71,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,117,124,109,107,126,104,108,117],
[104,0,106,113,106,105,112,101,108,102],
[94,105,0,118,92,103,101,107,103,114],
[87,98,93,0,97,91,100,88,97,96],
[102,105,119,114,0,115,115,106,110,113],
[104,106,108,120,96,0,109,95,111,112],
[85,99,110,111,96,102,0,94,91,104],
[107,110,104,123,105,116,117,0,105,104],
[103,103,108,114,101,100,120,106,0,114],
[94,109,97,115,98,99,107,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,105,103,93,138,106,145,164,135],
[75,0,123,88,81,97,94,78,107,67],
[106,88,0,107,109,120,107,106,107,111],
[108,123,104,0,91,133,116,104,117,115],
[118,130,102,120,0,162,122,127,123,120],
[73,114,91,78,49,0,89,93,81,43],
[105,117,104,95,89,122,0,132,120,82],
[66,133,105,107,84,118,79,0,105,94],
[47,104,104,94,88,130,91,106,0,92],
[76,144,100,96,91,168,129,117,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,124,112,110,114,107,98,116,102],
[108,0,138,110,109,116,121,121,127,103],
[87,73,0,84,95,101,107,91,96,94],
[99,101,127,0,114,127,107,101,105,104],
[101,102,116,97,0,108,107,90,118,99],
[97,95,110,84,103,0,107,90,104,95],
[104,90,104,104,104,104,0,92,103,109],
[113,90,120,110,121,121,119,0,124,100],
[95,84,115,106,93,107,108,87,0,110],
[109,108,117,107,112,116,102,111,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,100,154,81,92,138,103,117,113],
[112,0,100,139,125,117,138,127,111,99],
[111,111,0,169,92,117,141,107,76,108],
[57,72,42,0,39,62,63,63,70,56],
[130,86,119,172,0,87,131,121,126,106],
[119,94,94,149,124,0,134,127,119,115],
[73,73,70,148,80,77,0,103,73,91],
[108,84,104,148,90,84,108,0,106,110],
[94,100,135,141,85,92,138,105,0,99],
[98,112,103,155,105,96,120,101,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,89,127,116,88,110,117,88,107],
[116,0,95,94,105,101,131,97,93,124],
[122,116,0,115,119,93,155,126,91,114],
[84,117,96,0,101,82,122,121,119,114],
[95,106,92,110,0,83,100,102,104,129],
[123,110,118,129,128,0,149,153,99,118],
[101,80,56,89,111,62,0,72,62,78],
[94,114,85,90,109,58,139,0,74,88],
[123,118,120,92,107,112,149,137,0,122],
[104,87,97,97,82,93,133,123,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,95,110,93,97,100,95,88,110],
[113,0,97,113,114,106,121,120,101,131],
[116,114,0,122,103,105,103,110,92,127],
[101,98,89,0,88,94,118,93,93,111],
[118,97,108,123,0,90,114,119,107,113],
[114,105,106,117,121,0,130,105,110,121],
[111,90,108,93,97,81,0,97,91,109],
[116,91,101,118,92,106,114,0,83,118],
[123,110,119,118,104,101,120,128,0,131],
[101,80,84,100,98,90,102,93,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,86,120,98,98,77,98,81,102],
[112,0,93,111,117,118,115,107,105,124],
[125,118,0,124,122,123,99,113,132,112],
[91,100,87,0,116,98,108,90,94,114],
[113,94,89,95,0,104,90,97,101,98],
[113,93,88,113,107,0,104,110,89,112],
[134,96,112,103,121,107,0,121,118,113],
[113,104,98,121,114,101,90,0,102,88],
[130,106,79,117,110,122,93,109,0,107],
[109,87,99,97,113,99,98,123,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,98,103,113,98,119,107,112,107],
[107,0,107,111,116,105,105,116,98,104],
[113,104,0,110,115,110,117,113,115,113],
[108,100,101,0,108,105,115,103,111,111],
[98,95,96,103,0,111,119,102,108,110],
[113,106,101,106,100,0,122,113,93,105],
[92,106,94,96,92,89,0,99,104,97],
[104,95,98,108,109,98,112,0,98,100],
[99,113,96,100,103,118,107,113,0,107],
[104,107,98,100,101,106,114,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,82,89,79,61,86,84,87,60],
[125,0,127,140,94,107,94,108,98,102],
[129,84,0,126,81,83,121,105,92,89],
[122,71,85,0,42,61,93,76,73,69],
[132,117,130,169,0,106,108,124,100,123],
[150,104,128,150,105,0,130,106,108,118],
[125,117,90,118,103,81,0,94,80,87],
[127,103,106,135,87,105,117,0,103,106],
[124,113,119,138,111,103,131,108,0,125],
[151,109,122,142,88,93,124,105,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,109,99,107,108,104,108,108,103],
[113,0,107,100,101,102,110,107,111,110],
[102,104,0,97,100,106,103,107,112,103],
[112,111,114,0,119,114,104,109,119,108],
[104,110,111,92,0,103,102,108,114,100],
[103,109,105,97,108,0,114,105,106,108],
[107,101,108,107,109,97,0,106,107,103],
[103,104,104,102,103,106,105,0,108,108],
[103,100,99,92,97,105,104,103,0,105],
[108,101,108,103,111,103,108,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,109,97,107,109,103,100,103,104],
[124,0,106,111,111,115,111,101,118,119],
[102,105,0,105,111,107,98,106,106,116],
[114,100,106,0,109,107,104,107,103,108],
[104,100,100,102,0,106,89,96,105,105],
[102,96,104,104,105,0,101,109,105,106],
[108,100,113,107,122,110,0,108,116,124],
[111,110,105,104,115,102,103,0,104,109],
[108,93,105,108,106,106,95,107,0,108],
[107,92,95,103,106,105,87,102,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,102,100,99,99,113,107,92,91],
[114,0,129,121,120,104,111,91,99,113],
[109,82,0,112,116,102,111,95,97,81],
[111,90,99,0,104,94,93,103,90,85],
[112,91,95,107,0,109,106,94,101,82],
[112,107,109,117,102,0,108,108,108,105],
[98,100,100,118,105,103,0,98,88,97],
[104,120,116,108,117,103,113,0,108,104],
[119,112,114,121,110,103,123,103,0,98],
[120,98,130,126,129,106,114,107,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,115,131,133,119,118,122,98,120],
[97,0,90,89,118,112,105,106,90,104],
[96,121,0,118,123,105,117,114,77,112],
[80,122,93,0,140,120,104,104,69,114],
[78,93,88,71,0,114,103,104,72,103],
[92,99,106,91,97,0,106,99,85,110],
[93,106,94,107,108,105,0,93,91,122],
[89,105,97,107,107,112,118,0,110,130],
[113,121,134,142,139,126,120,101,0,141],
[91,107,99,97,108,101,89,81,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,103,100,99,99,115,115,100,94],
[110,0,88,108,90,99,103,100,109,98],
[108,123,0,110,109,107,118,108,114,98],
[111,103,101,0,98,101,111,109,101,95],
[112,121,102,113,0,116,114,127,112,108],
[112,112,104,110,95,0,107,114,115,108],
[96,108,93,100,97,104,0,115,91,103],
[96,111,103,102,84,97,96,0,108,100],
[111,102,97,110,99,96,120,103,0,100],
[117,113,113,116,103,103,108,111,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,104,99,105,107,123,105,108,110],
[91,0,98,96,98,99,108,97,101,102],
[107,113,0,105,110,111,117,110,116,110],
[112,115,106,0,106,106,120,93,110,107],
[106,113,101,105,0,106,115,99,115,101],
[104,112,100,105,105,0,111,95,112,104],
[88,103,94,91,96,100,0,94,102,94],
[106,114,101,118,112,116,117,0,113,113],
[103,110,95,101,96,99,109,98,0,102],
[101,109,101,104,110,107,117,98,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,120,100,115,113,104,105,112],
[101,0,105,113,104,109,110,106,105,116],
[108,106,0,128,109,124,114,120,104,118],
[91,98,83,0,97,106,98,103,100,108],
[111,107,102,114,0,107,115,105,92,106],
[96,102,87,105,104,0,95,105,85,107],
[98,101,97,113,96,116,0,107,102,115],
[107,105,91,108,106,106,104,0,107,105],
[106,106,107,111,119,126,109,104,0,120],
[99,95,93,103,105,104,96,106,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,106,109,115,104,90,109,110,94],
[93,0,101,107,101,98,101,89,94,78],
[105,110,0,111,108,106,105,104,113,102],
[102,104,100,0,103,105,112,103,115,93],
[96,110,103,108,0,96,95,98,115,85],
[107,113,105,106,115,0,96,98,100,101],
[121,110,106,99,116,115,0,110,106,106],
[102,122,107,108,113,113,101,0,119,111],
[101,117,98,96,96,111,105,92,0,103],
[117,133,109,118,126,110,105,100,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,112,107,96,119,102,119,111,106],
[104,0,111,110,110,113,104,107,105,101],
[99,100,0,103,102,110,106,98,116,103],
[104,101,108,0,96,121,101,106,113,104],
[115,101,109,115,0,114,94,116,113,107],
[92,98,101,90,97,0,100,98,108,97],
[109,107,105,110,117,111,0,106,111,107],
[92,104,113,105,95,113,105,0,115,109],
[100,106,95,98,98,103,100,96,0,95],
[105,110,108,107,104,114,104,102,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,130,100,116,105,89,112,117,89],
[98,0,107,117,110,109,100,119,106,88],
[81,104,0,81,96,94,77,113,92,65],
[111,94,130,0,118,115,121,138,137,103],
[95,101,115,93,0,98,95,85,91,71],
[106,102,117,96,113,0,117,118,117,109],
[122,111,134,90,116,94,0,125,142,92],
[99,92,98,73,126,93,86,0,100,85],
[94,105,119,74,120,94,69,111,0,85],
[122,123,146,108,140,102,119,126,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,116,102,97,122,99,118,110],
[101,0,113,131,88,101,88,108,120,124],
[107,98,0,130,87,97,94,109,130,122],
[95,80,81,0,76,93,98,102,92,111],
[109,123,124,135,0,118,101,124,121,135],
[114,110,114,118,93,0,105,126,128,132],
[89,123,117,113,110,106,0,118,117,121],
[112,103,102,109,87,85,93,0,101,116],
[93,91,81,119,90,83,94,110,0,143],
[101,87,89,100,76,79,90,95,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,134,106,106,121,130,103,88,128],
[65,0,124,81,79,92,121,85,76,102],
[77,87,0,93,82,81,97,99,72,79],
[105,130,118,0,107,118,122,128,114,129],
[105,132,129,104,0,104,114,131,107,135],
[90,119,130,93,107,0,113,110,87,116],
[81,90,114,89,97,98,0,122,71,131],
[108,126,112,83,80,101,89,0,92,134],
[123,135,139,97,104,124,140,119,0,134],
[83,109,132,82,76,95,80,77,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,95,100,105,103,107,100,91],
[103,0,116,117,95,110,105,97,107,95],
[103,95,0,104,97,98,112,101,96,95],
[116,94,107,0,105,109,104,105,93,97],
[111,116,114,106,0,111,112,104,106,96],
[106,101,113,102,100,0,108,104,103,96],
[108,106,99,107,99,103,0,103,97,90],
[104,114,110,106,107,107,108,0,102,98],
[111,104,115,118,105,108,114,109,0,108],
[120,116,116,114,115,115,121,113,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,97,105,102,102,97,100,100,108],
[97,0,95,99,102,98,95,95,102,92],
[114,116,0,107,117,117,107,101,108,109],
[106,112,104,0,101,98,98,101,106,110],
[109,109,94,110,0,102,98,90,94,106],
[109,113,94,113,109,0,99,110,109,102],
[114,116,104,113,113,112,0,103,110,109],
[111,116,110,110,121,101,108,0,102,106],
[111,109,103,105,117,102,101,109,0,105],
[103,119,102,101,105,109,102,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,92,105,95,107,101,105,115,102],
[105,0,112,107,105,120,102,95,109,111],
[119,99,0,99,106,117,108,108,112,108],
[106,104,112,0,100,115,112,99,112,102],
[116,106,105,111,0,109,106,97,113,98],
[104,91,94,96,102,0,96,92,90,90],
[110,109,103,99,105,115,0,100,99,99],
[106,116,103,112,114,119,111,0,115,114],
[96,102,99,99,98,121,112,96,0,94],
[109,100,103,109,113,121,112,97,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,96,77,78,79,96,94,99,102],
[94,0,114,96,96,88,104,102,112,107],
[115,97,0,101,74,85,118,113,112,110],
[134,115,110,0,110,85,125,114,96,119],
[133,115,137,101,0,115,124,128,117,125],
[132,123,126,126,96,0,138,128,122,145],
[115,107,93,86,87,73,0,105,116,110],
[117,109,98,97,83,83,106,0,103,110],
[112,99,99,115,94,89,95,108,0,110],
[109,104,101,92,86,66,101,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,53,111,158,21,79,141,160,111],
[155,0,111,155,116,79,123,141,148,155],
[158,100,0,109,158,165,123,141,190,123],
[100,56,102,0,100,77,79,197,102,111],
[53,95,53,111,0,21,79,141,102,111],
[190,132,46,134,190,0,148,134,204,148],
[132,88,88,132,132,63,0,197,88,97],
[70,70,70,14,70,77,14,0,70,21],
[51,63,21,109,109,7,123,141,0,123],
[100,56,88,100,100,63,114,190,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,35,89,72,31,111,79,125,61],
[93,0,71,99,105,67,80,83,111,91],
[176,140,0,144,90,60,182,90,200,66],
[122,112,67,0,78,57,119,86,129,93],
[139,106,121,133,0,146,107,103,139,81],
[180,144,151,154,65,0,157,125,160,108],
[100,131,29,92,104,54,0,103,94,38],
[132,128,121,125,108,86,108,0,168,93],
[86,100,11,82,72,51,117,43,0,37],
[150,120,145,118,130,103,173,118,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,109,105,101,97,102,86,87,97],
[111,0,102,107,107,87,99,89,102,93],
[102,109,0,116,99,94,106,105,99,104],
[106,104,95,0,89,98,113,99,101,96],
[110,104,112,122,0,98,107,111,104,110],
[114,124,117,113,113,0,112,100,96,103],
[109,112,105,98,104,99,0,98,97,109],
[125,122,106,112,100,111,113,0,111,101],
[124,109,112,110,107,115,114,100,0,107],
[114,118,107,115,101,108,102,110,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,126,118,106,133,106,109,109,107],
[109,0,113,116,99,95,109,97,101,102],
[85,98,0,100,86,116,92,85,75,94],
[93,95,111,0,96,130,97,109,99,107],
[105,112,125,115,0,116,112,109,118,111],
[78,116,95,81,95,0,104,100,95,111],
[105,102,119,114,99,107,0,120,94,113],
[102,114,126,102,102,111,91,0,97,98],
[102,110,136,112,93,116,117,114,0,106],
[104,109,117,104,100,100,98,113,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,114,105,116,114,106,122,118,117],
[101,0,107,102,103,98,105,122,100,104],
[97,104,0,98,104,98,97,108,109,116],
[106,109,113,0,104,105,103,125,110,107],
[95,108,107,107,0,110,100,113,93,96],
[97,113,113,106,101,0,91,111,104,100],
[105,106,114,108,111,120,0,124,111,110],
[89,89,103,86,98,100,87,0,98,95],
[93,111,102,101,118,107,100,113,0,112],
[94,107,95,104,115,111,101,116,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,149,117,111,88,141,115,111,168],
[87,0,137,81,93,84,150,100,79,129],
[62,74,0,120,84,62,108,89,82,153],
[94,130,91,0,95,92,127,100,115,152],
[100,118,127,116,0,107,131,93,112,156],
[123,127,149,119,104,0,139,130,101,155],
[70,61,103,84,80,72,0,79,91,110],
[96,111,122,111,118,81,132,0,94,128],
[100,132,129,96,99,110,120,117,0,140],
[43,82,58,59,55,56,101,83,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,100,106,108,96,117,105,118,102],
[100,0,109,113,95,95,110,112,108,94],
[111,102,0,117,111,110,108,115,114,106],
[105,98,94,0,95,95,96,118,103,99],
[103,116,100,116,0,105,118,120,122,104],
[115,116,101,116,106,0,112,120,118,99],
[94,101,103,115,93,99,0,109,109,101],
[106,99,96,93,91,91,102,0,99,98],
[93,103,97,108,89,93,102,112,0,93],
[109,117,105,112,107,112,110,113,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,94,136,102,83,100,83,106,94],
[98,0,102,109,93,85,98,83,85,76],
[117,109,0,128,92,88,90,96,89,87],
[75,102,83,0,70,95,91,94,80,93],
[109,118,119,141,0,126,131,112,105,99],
[128,126,123,116,85,0,107,101,101,118],
[111,113,121,120,80,104,0,94,101,84],
[128,128,115,117,99,110,117,0,106,140],
[105,126,122,131,106,110,110,105,0,118],
[117,135,124,118,112,93,127,71,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,99,95,86,96,99,105,97,89],
[121,0,105,107,114,106,115,119,115,110],
[112,106,0,98,106,97,99,104,106,102],
[116,104,113,0,112,97,107,108,107,109],
[125,97,105,99,0,90,109,107,111,100],
[115,105,114,114,121,0,115,115,112,99],
[112,96,112,104,102,96,0,101,99,99],
[106,92,107,103,104,96,110,0,94,105],
[114,96,105,104,100,99,112,117,0,103],
[122,101,109,102,111,112,112,106,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,96,107,100,114,107,105,108,118],
[92,0,85,91,95,111,96,97,95,106],
[115,126,0,104,102,120,119,121,115,119],
[104,120,107,0,111,115,116,121,110,127],
[111,116,109,100,0,117,120,123,114,117],
[97,100,91,96,94,0,105,100,92,97],
[104,115,92,95,91,106,0,114,93,117],
[106,114,90,90,88,111,97,0,94,104],
[103,116,96,101,97,119,118,117,0,114],
[93,105,92,84,94,114,94,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,108,108,129,93,97,114,126,101],
[97,0,95,112,130,108,112,106,120,105],
[103,116,0,101,113,108,123,121,140,102],
[103,99,110,0,121,114,104,113,125,112],
[82,81,98,90,0,94,78,96,118,86],
[118,103,103,97,117,0,108,108,113,98],
[114,99,88,107,133,103,0,109,129,115],
[97,105,90,98,115,103,102,0,116,115],
[85,91,71,86,93,98,82,95,0,84],
[110,106,109,99,125,113,96,96,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,101,109,108,104,110,103,112],
[103,0,103,109,104,99,110,100,105,106],
[103,108,0,111,108,101,98,116,107,106],
[110,102,100,0,106,96,104,103,103,101],
[102,107,103,105,0,102,99,99,107,99],
[103,112,110,115,109,0,103,98,105,104],
[107,101,113,107,112,108,0,107,103,110],
[101,111,95,108,112,113,104,0,112,113],
[108,106,104,108,104,106,108,99,0,105],
[99,105,105,110,112,107,101,98,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,111,107,98,108,93,100,109,97],
[123,0,121,115,108,119,107,104,107,115],
[100,90,0,110,92,105,96,86,95,98],
[104,96,101,0,114,113,107,98,95,113],
[113,103,119,97,0,107,101,116,97,102],
[103,92,106,98,104,0,94,100,105,91],
[118,104,115,104,110,117,0,104,103,100],
[111,107,125,113,95,111,107,0,100,111],
[102,104,116,116,114,106,108,111,0,119],
[114,96,113,98,109,120,111,100,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,131,134,113,122,102,121,101,114],
[74,0,98,93,85,98,98,97,90,84],
[80,113,0,105,84,101,110,103,90,96],
[77,118,106,0,93,96,103,92,83,92],
[98,126,127,118,0,120,113,111,115,106],
[89,113,110,115,91,0,89,98,94,99],
[109,113,101,108,98,122,0,109,99,103],
[90,114,108,119,100,113,102,0,96,99],
[110,121,121,128,96,117,112,115,0,110],
[97,127,115,119,105,112,108,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,87,105,115,112,103,111,104,107],
[97,0,100,111,112,103,106,112,98,96],
[124,111,0,116,128,105,121,129,114,106],
[106,100,95,0,110,103,106,102,104,103],
[96,99,83,101,0,93,103,99,86,96],
[99,108,106,108,118,0,107,116,107,109],
[108,105,90,105,108,104,0,110,99,108],
[100,99,82,109,112,95,101,0,99,102],
[107,113,97,107,125,104,112,112,0,105],
[104,115,105,108,115,102,103,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,98,110,105,96,114,109,96,97],
[108,0,92,105,96,100,121,106,91,103],
[113,119,0,113,107,110,133,121,103,113],
[101,106,98,0,92,109,110,116,92,96],
[106,115,104,119,0,111,120,117,103,123],
[115,111,101,102,100,0,111,114,102,107],
[97,90,78,101,91,100,0,108,96,101],
[102,105,90,95,94,97,103,0,84,88],
[115,120,108,119,108,109,115,127,0,99],
[114,108,98,115,88,104,110,123,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,107,111,113,99,96,98,104],
[108,0,118,107,97,100,102,95,107,94],
[104,93,0,90,82,89,103,95,94,100],
[104,104,121,0,106,110,102,96,96,112],
[100,114,129,105,0,116,117,97,106,124],
[98,111,122,101,95,0,114,98,107,91],
[112,109,108,109,94,97,0,96,92,102],
[115,116,116,115,114,113,115,0,103,111],
[113,104,117,115,105,104,119,108,0,111],
[107,117,111,99,87,120,109,100,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,111,111,114,104,109,106,108,113],
[100,0,112,112,107,102,110,110,98,109],
[100,99,0,99,101,95,107,99,93,99],
[100,99,112,0,113,103,112,102,105,111],
[97,104,110,98,0,99,105,99,95,102],
[107,109,116,108,112,0,101,95,108,107],
[102,101,104,99,106,110,0,104,103,104],
[105,101,112,109,112,116,107,0,104,97],
[103,113,118,106,116,103,108,107,0,113],
[98,102,112,100,109,104,107,114,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,92,97,97,104,103,104,97,116],
[76,0,77,98,87,94,91,98,77,90],
[119,134,0,95,123,108,121,127,114,115],
[114,113,116,0,115,103,109,111,100,103],
[114,124,88,96,0,90,105,96,83,90],
[107,117,103,108,121,0,127,117,105,116],
[108,120,90,102,106,84,0,102,99,93],
[107,113,84,100,115,94,109,0,102,112],
[114,134,97,111,128,106,112,109,0,116],
[95,121,96,108,121,95,118,99,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,111,64,104,113,111,114,94,111],
[121,0,100,124,126,141,120,110,122,89],
[100,111,0,82,99,127,123,116,107,96],
[147,87,129,0,106,122,103,113,123,90],
[107,85,112,105,0,124,118,122,114,98],
[98,70,84,89,87,0,110,113,93,100],
[100,91,88,108,93,101,0,110,100,90],
[97,101,95,98,89,98,101,0,83,87],
[117,89,104,88,97,118,111,128,0,95],
[100,122,115,121,113,111,121,124,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,111,105,103,117,114,99,111,113],
[96,0,93,105,101,106,101,95,101,97],
[100,118,0,97,107,111,113,95,104,101],
[106,106,114,0,113,128,118,103,102,118],
[108,110,104,98,0,118,111,107,105,108],
[94,105,100,83,93,0,96,92,97,99],
[97,110,98,93,100,115,0,99,103,103],
[112,116,116,108,104,119,112,0,116,111],
[100,110,107,109,106,114,108,95,0,112],
[98,114,110,93,103,112,108,100,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,110,111,104,113,113,98,103],
[104,0,90,114,98,101,107,109,90,101],
[104,121,0,121,114,116,116,119,110,102],
[101,97,90,0,91,92,113,95,86,97],
[100,113,97,120,0,112,129,108,101,113],
[107,110,95,119,99,0,104,104,85,105],
[98,104,95,98,82,107,0,99,98,89],
[98,102,92,116,103,107,112,0,92,96],
[113,121,101,125,110,126,113,119,0,105],
[108,110,109,114,98,106,122,115,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,88,71,133,52,69,65,100,46],
[139,0,83,76,167,87,97,115,146,46],
[123,128,0,117,130,124,77,108,108,109],
[140,135,94,0,146,119,95,94,119,82],
[78,44,81,65,0,30,59,75,44,45],
[159,124,87,92,181,0,97,136,143,120],
[142,114,134,116,152,114,0,97,135,66],
[146,96,103,117,136,75,114,0,82,84],
[111,65,103,92,167,68,76,129,0,37],
[165,165,102,129,166,91,145,127,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,110,98,103,84,99,81,93,110],
[115,0,119,101,100,122,108,106,120,135],
[101,92,0,91,114,107,125,108,123,104],
[113,110,120,0,107,106,112,88,137,122],
[108,111,97,104,0,109,137,107,134,129],
[127,89,104,105,102,0,115,94,137,127],
[112,103,86,99,74,96,0,93,106,100],
[130,105,103,123,104,117,118,0,113,121],
[118,91,88,74,77,74,105,98,0,84],
[101,76,107,89,82,84,111,90,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,108,110,112,105,103,99,109],
[105,0,98,106,112,109,99,109,96,106],
[109,113,0,113,102,111,102,113,97,103],
[103,105,98,0,101,97,97,100,97,88],
[101,99,109,110,0,99,102,111,103,108],
[99,102,100,114,112,0,88,96,98,94],
[106,112,109,114,109,123,0,123,99,105],
[108,102,98,111,100,115,88,0,96,102],
[112,115,114,114,108,113,112,115,0,105],
[102,105,108,123,103,117,106,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,120,95,118,95,110,109,124,103],
[118,0,69,141,87,96,123,114,85,76],
[91,142,0,118,111,70,115,94,92,60],
[116,70,93,0,98,92,111,101,116,96],
[93,124,100,113,0,90,101,71,88,74],
[116,115,141,119,121,0,126,92,105,92],
[101,88,96,100,110,85,0,98,92,95],
[102,97,117,110,140,119,113,0,135,127],
[87,126,119,95,123,106,119,76,0,73],
[108,135,151,115,137,119,116,84,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,108,109,105,99,103,104,100,102],
[114,0,108,105,104,102,104,96,104,104],
[103,103,0,103,111,99,93,87,106,100],
[102,106,108,0,99,108,108,92,102,104],
[106,107,100,112,0,105,103,94,102,113],
[112,109,112,103,106,0,107,109,110,121],
[108,107,118,103,108,104,0,106,106,122],
[107,115,124,119,117,102,105,0,110,119],
[111,107,105,109,109,101,105,101,0,112],
[109,107,111,107,98,90,89,92,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,82,95,93,102,93,101,94,79],
[121,0,97,108,109,112,109,108,91,98],
[129,114,0,100,104,114,120,120,114,109],
[116,103,111,0,96,115,112,119,120,107],
[118,102,107,115,0,121,109,116,103,112],
[109,99,97,96,90,0,90,101,93,90],
[118,102,91,99,102,121,0,125,107,107],
[110,103,91,92,95,110,86,0,98,99],
[117,120,97,91,108,118,104,113,0,104],
[132,113,102,104,99,121,104,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,111,98,103,108,111,114,118,122],
[112,0,115,117,101,120,97,105,122,137],
[100,96,0,95,96,119,88,98,106,117],
[113,94,116,0,108,108,124,122,99,122],
[108,110,115,103,0,129,119,97,87,135],
[103,91,92,103,82,0,96,93,92,122],
[100,114,123,87,92,115,0,106,112,116],
[97,106,113,89,114,118,105,0,111,117],
[93,89,105,112,124,119,99,100,0,114],
[89,74,94,89,76,89,95,94,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,106,62,140,93,102,89,96,78],
[131,0,104,77,128,94,115,111,95,86],
[105,107,0,82,121,93,90,115,110,108],
[149,134,129,0,120,111,134,103,109,114],
[71,83,90,91,0,95,110,77,103,75],
[118,117,118,100,116,0,130,99,107,135],
[109,96,121,77,101,81,0,100,74,84],
[122,100,96,108,134,112,111,0,89,99],
[115,116,101,102,108,104,137,122,0,67],
[133,125,103,97,136,76,127,112,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,112,99,101,103,108,100,107,114],
[101,0,110,105,98,104,98,94,106,119],
[99,101,0,109,104,96,89,86,109,100],
[112,106,102,0,98,91,108,107,117,117],
[110,113,107,113,0,110,110,98,129,106],
[108,107,115,120,101,0,99,107,113,113],
[103,113,122,103,101,112,0,99,123,111],
[111,117,125,104,113,104,112,0,118,106],
[104,105,102,94,82,98,88,93,0,100],
[97,92,111,94,105,98,100,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,121,107,102,94,102,110,116],
[99,0,115,120,108,109,106,112,113,117],
[106,96,0,120,99,108,91,107,109,108],
[90,91,91,0,103,98,91,101,106,101],
[104,103,112,108,0,109,101,98,102,118],
[109,102,103,113,102,0,90,112,109,105],
[117,105,120,120,110,121,0,109,113,114],
[109,99,104,110,113,99,102,0,110,108],
[101,98,102,105,109,102,98,101,0,108],
[95,94,103,110,93,106,97,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,113,90,96,84,110,110,123,111],
[107,0,103,93,97,91,117,113,113,114],
[98,108,0,97,96,93,113,113,106,108],
[121,118,114,0,100,110,117,123,115,113],
[115,114,115,111,0,100,118,110,113,126],
[127,120,118,101,111,0,99,128,123,110],
[101,94,98,94,93,112,0,110,105,104],
[101,98,98,88,101,83,101,0,105,97],
[88,98,105,96,98,88,106,106,0,97],
[100,97,103,98,85,101,107,114,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,156,136,188,127,55,156,179,179],
[81,0,162,81,162,133,81,162,162,185],
[55,49,0,32,162,101,26,130,78,75],
[75,130,179,0,130,124,107,153,130,104],
[23,49,49,81,0,150,26,153,78,101],
[84,78,110,87,61,0,55,133,78,130],
[156,130,185,104,185,156,0,185,179,153],
[55,49,81,58,58,78,26,0,49,101],
[32,49,133,81,133,133,32,162,0,124],
[32,26,136,107,110,81,58,110,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,111,95,97,92,115,93,101],
[99,0,103,95,92,88,96,100,101,92],
[103,108,0,102,97,95,97,102,95,99],
[100,116,109,0,106,102,96,108,108,99],
[116,119,114,105,0,97,101,121,116,108],
[114,123,116,109,114,0,107,118,103,107],
[119,115,114,115,110,104,0,120,111,111],
[96,111,109,103,90,93,91,0,102,100],
[118,110,116,103,95,108,100,109,0,109],
[110,119,112,112,103,104,100,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,101,108,100,101,105,106,112,110],
[88,0,96,100,86,97,97,98,102,102],
[110,115,0,112,96,107,103,108,117,105],
[103,111,99,0,104,100,102,109,114,108],
[111,125,115,107,0,102,108,109,120,111],
[110,114,104,111,109,0,118,105,116,109],
[106,114,108,109,103,93,0,99,118,103],
[105,113,103,102,102,106,112,0,113,110],
[99,109,94,97,91,95,93,98,0,99],
[101,109,106,103,100,102,108,101,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,91,86,103,102,95,94,96,110],
[91,0,101,91,89,112,103,83,101,116],
[120,110,0,102,111,125,121,109,118,125],
[125,120,109,0,100,117,118,97,114,131],
[108,122,100,111,0,102,94,113,100,117],
[109,99,86,94,109,0,96,112,92,103],
[116,108,90,93,117,115,0,100,108,121],
[117,128,102,114,98,99,111,0,115,103],
[115,110,93,97,111,119,103,96,0,112],
[101,95,86,80,94,108,90,108,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,98,102,94,96,94,100,104,98],
[109,0,112,106,112,111,101,108,116,112],
[113,99,0,107,104,108,103,99,109,106],
[109,105,104,0,107,107,108,113,105,106],
[117,99,107,104,0,105,103,114,107,101],
[115,100,103,104,106,0,98,101,95,94],
[117,110,108,103,108,113,0,106,106,96],
[111,103,112,98,97,110,105,0,107,104],
[107,95,102,106,104,116,105,104,0,97],
[113,99,105,105,110,117,115,107,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,103,99,112,101,106,113,122,102],
[113,0,104,95,94,84,98,79,105,90],
[108,107,0,96,98,85,104,97,101,81],
[112,116,115,0,93,117,117,112,118,121],
[99,117,113,118,0,104,97,99,113,97],
[110,127,126,94,107,0,110,113,124,100],
[105,113,107,94,114,101,0,102,103,105],
[98,132,114,99,112,98,109,0,131,114],
[89,106,110,93,98,87,108,80,0,110],
[109,121,130,90,114,111,106,97,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,84,93,95,99,97,97,108,103],
[111,0,105,101,95,104,111,97,101,115],
[127,106,0,107,111,112,127,101,95,120],
[118,110,104,0,103,118,114,114,100,106],
[116,116,100,108,0,112,112,100,103,105],
[112,107,99,93,99,0,112,93,105,107],
[114,100,84,97,99,99,0,87,94,92],
[114,114,110,97,111,118,124,0,107,116],
[103,110,116,111,108,106,117,104,0,115],
[108,96,91,105,106,104,119,95,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,108,105,83,69,83,121,94],
[101,0,74,71,74,81,75,51,130,122],
[106,137,0,113,99,104,93,93,128,105],
[103,140,98,0,110,114,116,99,137,127],
[106,137,112,101,0,125,82,118,103,131],
[128,130,107,97,86,0,130,87,134,144],
[142,136,118,95,129,81,0,113,122,101],
[128,160,118,112,93,124,98,0,143,137],
[90,81,83,74,108,77,89,68,0,73],
[117,89,106,84,80,67,110,74,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,164,164,128,159,133,162,88,167],
[65,0,138,143,142,154,167,142,109,120],
[47,73,0,49,55,106,60,89,76,114],
[47,68,162,0,55,101,80,89,76,175],
[83,69,156,156,0,148,172,180,72,125],
[52,57,105,110,63,0,68,63,76,100],
[78,44,151,131,39,143,0,87,78,151],
[49,69,122,122,31,148,124,0,69,143],
[123,102,135,135,139,135,133,142,0,112],
[44,91,97,36,86,111,60,68,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,112,115,109,113,107,109,121,105],
[85,0,104,92,83,105,88,92,106,79],
[99,107,0,84,94,97,101,103,104,96],
[96,119,127,0,102,110,112,119,122,112],
[102,128,117,109,0,103,108,111,123,100],
[98,106,114,101,108,0,94,105,107,85],
[104,123,110,99,103,117,0,108,117,90],
[102,119,108,92,100,106,103,0,110,101],
[90,105,107,89,88,104,94,101,0,93],
[106,132,115,99,111,126,121,110,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,79,98,100,108,98,120,115,108],
[87,0,74,79,85,86,75,99,110,90],
[132,137,0,106,118,116,105,132,123,121],
[113,132,105,0,107,112,112,122,122,114],
[111,126,93,104,0,106,111,116,118,106],
[103,125,95,99,105,0,94,107,91,106],
[113,136,106,99,100,117,0,108,113,105],
[91,112,79,89,95,104,103,0,112,97],
[96,101,88,89,93,120,98,99,0,94],
[103,121,90,97,105,105,106,114,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,112,103,150,51,112,150,86,150],
[172,0,176,103,211,176,73,211,150,150],
[99,35,0,138,111,86,35,99,47,150],
[108,108,73,0,108,73,73,172,108,211],
[61,0,100,103,0,100,61,199,74,138],
[160,35,125,138,111,0,61,160,35,138],
[99,138,176,138,150,150,0,150,150,150],
[61,0,112,39,12,51,61,0,51,150],
[125,61,164,103,137,176,61,160,0,211],
[61,61,61,0,73,73,61,61,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,105,137,89,112,88,122,97,114],
[112,0,105,123,98,110,94,109,103,93],
[106,106,0,126,98,118,90,101,101,114],
[74,88,85,0,84,98,71,97,72,93],
[122,113,113,127,0,125,113,135,112,99],
[99,101,93,113,86,0,97,100,82,84],
[123,117,121,140,98,114,0,126,119,113],
[89,102,110,114,76,111,85,0,90,96],
[114,108,110,139,99,129,92,121,0,99],
[97,118,97,118,112,127,98,115,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,131,137,118,136,125,109,105,106],
[98,0,131,136,106,129,123,117,113,116],
[80,80,0,98,90,118,117,103,101,87],
[74,75,113,0,87,99,113,103,109,82],
[93,105,121,124,0,123,105,106,113,96],
[75,82,93,112,88,0,78,90,80,70],
[86,88,94,98,106,133,0,105,99,94],
[102,94,108,108,105,121,106,0,100,90],
[106,98,110,102,98,131,112,111,0,94],
[105,95,124,129,115,141,117,121,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,108,130,112,109,92,108,109,127],
[91,0,116,121,103,84,89,93,107,106],
[103,95,0,103,90,80,73,67,118,91],
[81,90,108,0,116,103,86,112,101,134],
[99,108,121,95,0,99,92,99,99,123],
[102,127,131,108,112,0,89,121,118,136],
[119,122,138,125,119,122,0,107,103,141],
[103,118,144,99,112,90,104,0,110,121],
[102,104,93,110,112,93,108,101,0,125],
[84,105,120,77,88,75,70,90,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,122,122,111,125,101,100,108],
[107,0,114,123,101,114,124,102,104,105],
[104,97,0,111,103,71,119,99,115,87],
[89,88,100,0,93,95,104,83,103,92],
[89,110,108,118,0,112,114,100,105,91],
[100,97,140,116,99,0,125,103,110,96],
[86,87,92,107,97,86,0,93,106,79],
[110,109,112,128,111,108,118,0,98,101],
[111,107,96,108,106,101,105,113,0,97],
[103,106,124,119,120,115,132,110,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,89,74,155,64,201,99,119,64],
[102,0,101,74,167,56,147,145,55,44],
[122,110,0,74,211,66,157,165,119,64],
[137,137,137,0,137,46,137,137,101,92],
[56,44,0,74,0,0,46,99,10,44],
[147,155,145,165,211,0,137,145,99,135],
[10,64,54,74,165,74,0,99,54,64],
[112,66,46,74,112,66,112,0,30,20],
[92,156,92,110,201,112,157,181,0,156],
[147,167,147,119,167,76,147,191,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,97,102,104,101,106,94,107,113],
[116,0,99,107,114,112,117,113,97,119],
[114,112,0,110,108,99,122,103,112,111],
[109,104,101,0,109,105,115,100,110,118],
[107,97,103,102,0,112,108,98,93,110],
[110,99,112,106,99,0,106,101,102,111],
[105,94,89,96,103,105,0,99,94,107],
[117,98,108,111,113,110,112,0,105,119],
[104,114,99,101,118,109,117,106,0,112],
[98,92,100,93,101,100,104,92,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,120,114,104,126,132,117,120,120],
[93,0,91,90,99,111,108,115,119,105],
[91,120,0,108,85,101,107,110,97,94],
[97,121,103,0,106,124,121,100,114,102],
[107,112,126,105,0,120,113,116,127,122],
[85,100,110,87,91,0,102,93,107,91],
[79,103,104,90,98,109,0,92,113,90],
[94,96,101,111,95,118,119,0,119,109],
[91,92,114,97,84,104,98,92,0,96],
[91,106,117,109,89,120,121,102,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,106,115,113,93,110,100,111,98],
[122,0,124,121,113,102,112,113,122,106],
[105,87,0,112,107,100,111,114,95,96],
[96,90,99,0,101,93,101,107,103,96],
[98,98,104,110,0,108,107,109,107,97],
[118,109,111,118,103,0,109,117,121,106],
[101,99,100,110,104,102,0,99,105,90],
[111,98,97,104,102,94,112,0,114,87],
[100,89,116,108,104,90,106,97,0,98],
[113,105,115,115,114,105,121,124,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,112,87,110,125,126,127,107,112],
[95,0,102,103,88,124,111,112,96,100],
[99,109,0,103,99,109,108,103,109,102],
[124,108,108,0,93,120,121,119,121,114],
[101,123,112,118,0,134,124,128,122,124],
[86,87,102,91,77,0,94,109,103,101],
[85,100,103,90,87,117,0,98,91,99],
[84,99,108,92,83,102,113,0,108,93],
[104,115,102,90,89,108,120,103,0,106],
[99,111,109,97,87,110,112,118,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,114,99,106,113,96,113,106,105],
[111,0,98,106,118,107,99,119,107,112],
[97,113,0,110,119,99,102,114,99,105],
[112,105,101,0,114,123,112,95,91,118],
[105,93,92,97,0,105,95,112,93,104],
[98,104,112,88,106,0,100,103,103,99],
[115,112,109,99,116,111,0,124,109,108],
[98,92,97,116,99,108,87,0,96,112],
[105,104,112,120,118,108,102,115,0,108],
[106,99,106,93,107,112,103,99,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,95,102,89,105,80,100,108],
[108,0,114,94,93,94,98,104,99,116],
[109,97,0,96,100,88,103,94,99,99],
[116,117,115,0,100,115,111,101,100,119],
[109,118,111,111,0,98,114,102,101,113],
[122,117,123,96,113,0,113,102,106,127],
[106,113,108,100,97,98,0,96,98,106],
[131,107,117,110,109,109,115,0,92,112],
[111,112,112,111,110,105,113,119,0,116],
[103,95,112,92,98,84,105,99,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,86,104,100,118,104,112,116],
[99,0,96,93,91,83,108,99,89,87],
[106,115,0,101,102,107,112,119,105,91],
[125,118,110,0,110,105,115,106,95,113],
[107,120,109,101,0,110,131,107,110,102],
[111,128,104,106,101,0,107,111,100,107],
[93,103,99,96,80,104,0,94,100,95],
[107,112,92,105,104,100,117,0,106,107],
[99,122,106,116,101,111,111,105,0,101],
[95,124,120,98,109,104,116,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,135,82,67,82,124,98,117,112],
[117,0,176,102,124,95,114,106,139,122],
[76,35,0,82,84,57,113,58,83,84],
[129,109,129,0,113,94,103,89,132,145],
[144,87,127,98,0,106,103,102,137,129],
[129,116,154,117,105,0,113,122,151,144],
[87,97,98,108,108,98,0,94,116,116],
[113,105,153,122,109,89,117,0,123,120],
[94,72,128,79,74,60,95,88,0,107],
[99,89,127,66,82,67,95,91,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,95,114,98,103,104,97,96,98],
[108,0,99,109,97,93,99,101,109,96],
[116,112,0,118,99,109,109,103,112,114],
[97,102,93,0,103,99,108,99,107,101],
[113,114,112,108,0,110,114,103,99,109],
[108,118,102,112,101,0,106,100,110,103],
[107,112,102,103,97,105,0,99,103,102],
[114,110,108,112,108,111,112,0,109,98],
[115,102,99,104,112,101,108,102,0,104],
[113,115,97,110,102,108,109,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,86,114,103,92,102,113,104,107],
[107,0,106,108,107,111,102,109,112,102],
[125,105,0,122,113,110,115,118,120,113],
[97,103,89,0,102,96,99,106,99,89],
[108,104,98,109,0,98,110,112,111,105],
[119,100,101,115,113,0,104,125,112,102],
[109,109,96,112,101,107,0,108,108,107],
[98,102,93,105,99,86,103,0,102,98],
[107,99,91,112,100,99,103,109,0,109],
[104,109,98,122,106,109,104,113,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,105,111,103,112,113,102,114,115],
[94,0,95,112,89,103,107,97,99,104],
[106,116,0,117,92,107,119,105,106,101],
[100,99,94,0,89,106,98,98,106,101],
[108,122,119,122,0,114,113,99,124,116],
[99,108,104,105,97,0,98,99,96,97],
[98,104,92,113,98,113,0,103,106,101],
[109,114,106,113,112,112,108,0,111,101],
[97,112,105,105,87,115,105,100,0,105],
[96,107,110,110,95,114,110,110,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,126,81,127,131,119,128,150,115],
[110,0,120,110,102,138,109,127,128,124],
[85,91,0,81,93,106,59,92,105,95],
[130,101,130,0,115,130,115,134,125,122],
[84,109,118,96,0,124,100,96,124,98],
[80,73,105,81,87,0,86,110,103,76],
[92,102,152,96,111,125,0,114,140,100],
[83,84,119,77,115,101,97,0,122,102],
[61,83,106,86,87,108,71,89,0,73],
[96,87,116,89,113,135,111,109,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,111,102,96,110,101,102,104],
[105,0,99,103,93,86,96,97,93,95],
[105,112,0,116,103,99,105,99,103,98],
[100,108,95,0,95,98,103,95,93,92],
[109,118,108,116,0,99,108,107,113,100],
[115,125,112,113,112,0,115,114,115,105],
[101,115,106,108,103,96,0,100,117,101],
[110,114,112,116,104,97,111,0,106,100],
[109,118,108,118,98,96,94,105,0,108],
[107,116,113,119,111,106,110,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,85,93,95,92,102,103,105,104],
[122,0,107,109,104,107,119,117,109,107],
[126,104,0,105,111,104,105,108,116,112],
[118,102,106,0,101,102,114,107,117,104],
[116,107,100,110,0,105,109,107,98,110],
[119,104,107,109,106,0,112,109,106,106],
[109,92,106,97,102,99,0,104,108,105],
[108,94,103,104,104,102,107,0,112,101],
[106,102,95,94,113,105,103,99,0,111],
[107,104,99,107,101,105,106,110,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,108,107,107,130,112,121,108,98],
[94,0,97,111,92,118,95,108,97,96],
[103,114,0,131,103,138,130,118,111,116],
[104,100,80,0,97,121,109,99,87,102],
[104,119,108,114,0,129,114,106,117,116],
[81,93,73,90,82,0,85,94,71,79],
[99,116,81,102,97,126,0,98,97,101],
[90,103,93,112,105,117,113,0,91,90],
[103,114,100,124,94,140,114,120,0,102],
[113,115,95,109,95,132,110,121,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,114,121,119,108,135,118,105,126],
[87,0,87,122,112,88,95,105,96,98],
[97,124,0,121,118,90,116,95,107,108],
[90,89,90,0,112,74,103,91,102,108],
[92,99,93,99,0,87,101,88,94,109],
[103,123,121,137,124,0,96,113,118,120],
[76,116,95,108,110,115,0,115,118,79],
[93,106,116,120,123,98,96,0,110,120],
[106,115,104,109,117,93,93,101,0,101],
[85,113,103,103,102,91,132,91,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,102,119,107,98,118,97,104,118],
[96,0,106,102,106,106,98,95,94,96],
[109,105,0,115,131,99,117,107,96,102],
[92,109,96,0,106,91,107,91,96,95],
[104,105,80,105,0,93,104,95,93,94],
[113,105,112,120,118,0,97,99,99,113],
[93,113,94,104,107,114,0,106,107,108],
[114,116,104,120,116,112,105,0,114,113],
[107,117,115,115,118,112,104,97,0,117],
[93,115,109,116,117,98,103,98,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,97,107,96,95,90,87,89,106],
[120,0,119,109,103,112,112,103,113,117],
[114,92,0,111,90,103,101,100,102,109],
[104,102,100,0,91,99,90,92,105,116],
[115,108,121,120,0,107,103,111,108,114],
[116,99,108,112,104,0,105,104,104,113],
[121,99,110,121,108,106,0,105,106,122],
[124,108,111,119,100,107,106,0,106,117],
[122,98,109,106,103,107,105,105,0,113],
[105,94,102,95,97,98,89,94,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,106,109,104,96,90,93,104,78],
[95,0,114,86,98,77,89,87,89,92],
[105,97,0,99,100,83,89,77,92,90],
[102,125,112,0,103,86,97,96,84,93],
[107,113,111,108,0,94,111,89,95,87],
[115,134,128,125,117,0,111,100,91,116],
[121,122,122,114,100,100,0,112,103,118],
[118,124,134,115,122,111,99,0,122,103],
[107,122,119,127,116,120,108,89,0,101],
[133,119,121,118,124,95,93,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,120,106,104,104,114,109,135,115],
[101,0,119,102,98,104,114,109,123,121],
[91,92,0,91,92,104,102,96,106,100],
[105,109,120,0,114,116,112,108,112,115],
[107,113,119,97,0,111,114,101,129,119],
[107,107,107,95,100,0,116,104,123,114],
[97,97,109,99,97,95,0,93,112,104],
[102,102,115,103,110,107,118,0,115,109],
[76,88,105,99,82,88,99,96,0,106],
[96,90,111,96,92,97,107,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,102,108,101,107,95,102,108],
[105,0,125,96,115,120,119,107,115,105],
[104,86,0,92,98,112,107,95,101,90],
[109,115,119,0,108,110,121,104,110,105],
[103,96,113,103,0,98,113,107,109,106],
[110,91,99,101,113,0,123,95,101,111],
[104,92,104,90,98,88,0,82,100,103],
[116,104,116,107,104,116,129,0,116,111],
[109,96,110,101,102,110,111,95,0,104],
[103,106,121,106,105,100,108,100,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,116,107,111,122,104,105,109,108],
[101,0,118,99,103,114,105,112,110,106],
[95,93,0,92,99,115,100,98,100,105],
[104,112,119,0,115,123,109,106,117,108],
[100,108,112,96,0,117,104,103,108,111],
[89,97,96,88,94,0,91,103,84,89],
[107,106,111,102,107,120,0,110,110,107],
[106,99,113,105,108,108,101,0,99,91],
[102,101,111,94,103,127,101,112,0,117],
[103,105,106,103,100,122,104,120,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,119,114,105,111,110,126,114,116],
[87,0,91,107,98,101,93,113,114,100],
[92,120,0,95,119,100,104,120,99,98],
[97,104,116,0,87,91,90,118,97,111],
[106,113,92,124,0,111,96,120,110,105],
[100,110,111,120,100,0,83,107,101,106],
[101,118,107,121,115,128,0,112,108,96],
[85,98,91,93,91,104,99,0,97,79],
[97,97,112,114,101,110,103,114,0,95],
[95,111,113,100,106,105,115,132,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,90,104,94,97,96,96,93,93],
[107,0,85,107,89,103,106,91,81,92],
[121,126,0,119,100,114,115,108,109,116],
[107,104,92,0,99,114,109,101,90,111],
[117,122,111,112,0,114,114,103,106,111],
[114,108,97,97,97,0,109,103,103,102],
[115,105,96,102,97,102,0,99,102,104],
[115,120,103,110,108,108,112,0,102,116],
[118,130,102,121,105,108,109,109,0,118],
[118,119,95,100,100,109,107,95,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,99,122,124,90,109,154,104,105],
[70,0,72,103,73,50,83,115,72,88],
[112,139,0,102,134,80,119,146,119,100],
[89,108,109,0,98,82,111,149,90,94],
[87,138,77,113,0,56,99,140,88,103],
[121,161,131,129,155,0,93,144,99,122],
[102,128,92,100,112,118,0,144,103,120],
[57,96,65,62,71,67,67,0,74,75],
[107,139,92,121,123,112,108,137,0,114],
[106,123,111,117,108,89,91,136,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,110,116,112,101,117,115,120,128],
[96,0,106,111,103,106,104,114,114,104],
[101,105,0,124,96,104,112,107,104,99],
[95,100,87,0,88,93,91,108,110,104],
[99,108,115,123,0,107,110,98,121,111],
[110,105,107,118,104,0,108,125,124,113],
[94,107,99,120,101,103,0,100,111,116],
[96,97,104,103,113,86,111,0,107,101],
[91,97,107,101,90,87,100,104,0,98],
[83,107,112,107,100,98,95,110,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,109,93,94,115,91,109,96,104],
[111,0,101,92,101,103,86,117,103,106],
[102,110,0,119,99,105,102,114,97,102],
[118,119,92,0,103,116,101,121,120,102],
[117,110,112,108,0,116,104,115,107,105],
[96,108,106,95,95,0,103,120,107,94],
[120,125,109,110,107,108,0,133,103,117],
[102,94,97,90,96,91,78,0,91,97],
[115,108,114,91,104,104,108,120,0,109],
[107,105,109,109,106,117,94,114,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,125,70,128,103,100,90,109,120],
[105,0,118,106,108,84,79,113,90,78],
[86,93,0,63,113,93,102,113,112,108],
[141,105,148,0,137,143,114,130,128,120],
[83,103,98,74,0,86,86,108,75,76],
[108,127,118,68,125,0,112,137,123,119],
[111,132,109,97,125,99,0,120,122,111],
[121,98,98,81,103,74,91,0,87,97],
[102,121,99,83,136,88,89,124,0,96],
[91,133,103,91,135,92,100,114,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,98,115,101,101,115,101,101],
[103,0,107,100,103,104,93,114,89,99],
[101,104,0,107,116,111,111,114,99,105],
[113,111,104,0,117,111,112,115,110,115],
[96,108,95,94,0,109,103,106,94,112],
[110,107,100,100,102,0,115,115,89,105],
[110,118,100,99,108,96,0,110,93,98],
[96,97,97,96,105,96,101,0,90,93],
[110,122,112,101,117,122,118,121,0,102],
[110,112,106,96,99,106,113,118,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,97,102,101,110,123,115,88,112],
[112,0,83,96,99,98,112,100,88,111],
[114,128,0,116,104,119,117,109,112,128],
[109,115,95,0,111,111,136,102,101,107],
[110,112,107,100,0,122,135,115,95,112],
[101,113,92,100,89,0,116,118,84,112],
[88,99,94,75,76,95,0,91,66,96],
[96,111,102,109,96,93,120,0,101,103],
[123,123,99,110,116,127,145,110,0,104],
[99,100,83,104,99,99,115,108,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,120,114,133,114,100,111,108,109],
[88,0,117,103,114,94,105,106,106,100],
[91,94,0,105,105,85,76,91,97,97],
[97,108,106,0,116,102,100,88,111,113],
[78,97,106,95,0,64,62,85,85,64],
[97,117,126,109,147,0,99,88,96,100],
[111,106,135,111,149,112,0,117,99,102],
[100,105,120,123,126,123,94,0,109,100],
[103,105,114,100,126,115,112,102,0,106],
[102,111,114,98,147,111,109,111,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,107,87,104,113,92,107,103],
[107,0,114,110,104,100,106,103,98,99],
[99,97,0,96,111,102,93,107,104,95],
[104,101,115,0,94,100,98,99,102,95],
[124,107,100,117,0,107,99,111,106,110],
[107,111,109,111,104,0,92,104,116,100],
[98,105,118,113,112,119,0,102,106,99],
[119,108,104,112,100,107,109,0,124,112],
[104,113,107,109,105,95,105,87,0,103],
[108,112,116,116,101,111,112,99,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,106,118,112,109,113,122,102,109],
[92,0,88,101,104,92,95,106,96,92],
[105,123,0,101,104,106,103,115,100,109],
[93,110,110,0,111,100,105,115,100,132],
[99,107,107,100,0,106,106,103,101,114],
[102,119,105,111,105,0,109,115,95,109],
[98,116,108,106,105,102,0,104,108,100],
[89,105,96,96,108,96,107,0,100,114],
[109,115,111,111,110,116,103,111,0,118],
[102,119,102,79,97,102,111,97,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,99,94,80,85,108,65,109,96],
[115,0,111,103,91,116,117,89,134,105],
[112,100,0,91,90,98,98,88,102,96],
[117,108,120,0,100,107,116,110,120,105],
[131,120,121,111,0,122,111,99,121,106],
[126,95,113,104,89,0,100,92,103,102],
[103,94,113,95,100,111,0,84,112,91],
[146,122,123,101,112,119,127,0,135,123],
[102,77,109,91,90,108,99,76,0,91],
[115,106,115,106,105,109,120,88,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,118,112,114,109,106,104,120,106],
[104,0,123,111,111,95,106,104,110,105],
[93,88,0,99,104,91,103,100,111,105],
[99,100,112,0,109,102,110,112,116,101],
[97,100,107,102,0,94,101,106,106,97],
[102,116,120,109,117,0,103,98,112,107],
[105,105,108,101,110,108,0,112,109,114],
[107,107,111,99,105,113,99,0,108,107],
[91,101,100,95,105,99,102,103,0,105],
[105,106,106,110,114,104,97,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,143,103,97,102,119,106,103,104],
[120,0,134,93,108,99,114,123,125,100],
[68,77,0,71,90,62,86,70,74,85],
[108,118,140,0,106,113,113,102,116,104],
[114,103,121,105,0,102,98,96,86,103],
[109,112,149,98,109,0,122,103,107,129],
[92,97,125,98,113,89,0,98,98,99],
[105,88,141,109,115,108,113,0,119,111],
[108,86,137,95,125,104,113,92,0,100],
[107,111,126,107,108,82,112,100,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,82,101,108,97,94,66,84,110],
[112,0,94,103,87,96,93,78,95,107],
[129,117,0,126,122,98,116,103,112,135],
[110,108,85,0,100,98,102,93,86,110],
[103,124,89,111,0,107,120,70,120,110],
[114,115,113,113,104,0,136,109,97,129],
[117,118,95,109,91,75,0,98,89,130],
[145,133,108,118,141,102,113,0,123,109],
[127,116,99,125,91,114,122,88,0,130],
[101,104,76,101,101,82,81,102,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,99,88,120,123,136,105,108,116],
[94,0,77,82,103,88,106,105,102,99],
[112,134,0,104,120,125,120,123,107,125],
[123,129,107,0,134,104,131,134,108,133],
[91,108,91,77,0,100,101,110,95,91],
[88,123,86,107,111,0,108,102,98,118],
[75,105,91,80,110,103,0,105,88,94],
[106,106,88,77,101,109,106,0,93,102],
[103,109,104,103,116,113,123,118,0,102],
[95,112,86,78,120,93,117,109,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,178,53,90,133,147,103,103,98],
[105,0,105,35,37,111,107,109,109,64],
[33,106,0,33,31,112,147,109,101,98],
[158,176,178,0,131,203,203,101,142,131],
[121,174,180,80,0,180,174,136,144,110],
[78,100,99,8,31,0,131,107,99,78],
[64,104,64,8,37,80,0,107,103,37],
[108,102,102,110,75,104,104,0,133,83],
[108,102,110,69,67,112,108,78,0,108],
[113,147,113,80,101,133,174,128,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,109,94,99,99,98,106,106,100],
[119,0,120,108,105,106,102,111,110,108],
[102,91,0,98,108,92,96,97,111,96],
[117,103,113,0,108,102,109,106,107,104],
[112,106,103,103,0,103,106,101,109,107],
[112,105,119,109,108,0,101,105,111,101],
[113,109,115,102,105,110,0,100,111,106],
[105,100,114,105,110,106,111,0,111,97],
[105,101,100,104,102,100,100,100,0,109],
[111,103,115,107,104,110,105,114,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,108,104,108,119,110,111,111,109],
[108,0,109,103,94,100,109,101,105,106],
[103,102,0,91,101,99,104,105,104,101],
[107,108,120,0,117,118,113,120,103,113],
[103,117,110,94,0,105,107,103,111,106],
[92,111,112,93,106,0,99,108,96,107],
[101,102,107,98,104,112,0,116,99,105],
[100,110,106,91,108,103,95,0,96,103],
[100,106,107,108,100,115,112,115,0,109],
[102,105,110,98,105,104,106,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,99,93,100,89,95,92,91,102],
[116,0,107,102,114,113,102,111,99,110],
[112,104,0,87,100,103,101,105,87,96],
[118,109,124,0,106,105,112,121,105,103],
[111,97,111,105,0,97,94,102,99,106],
[122,98,108,106,114,0,115,115,111,103],
[116,109,110,99,117,96,0,107,96,112],
[119,100,106,90,109,96,104,0,105,106],
[120,112,124,106,112,100,115,106,0,104],
[109,101,115,108,105,108,99,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,95,101,101,99,108,94,96,91],
[104,0,95,95,106,98,109,108,107,105],
[116,116,0,107,107,104,110,111,103,108],
[110,116,104,0,110,109,119,106,109,99],
[110,105,104,101,0,103,104,105,101,95],
[112,113,107,102,108,0,123,119,110,99],
[103,102,101,92,107,88,0,103,84,89],
[117,103,100,105,106,92,108,0,113,99],
[115,104,108,102,110,101,127,98,0,96],
[120,106,103,112,116,112,122,112,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,121,114,122,106,103,94,112,111],
[106,0,122,113,119,81,92,87,111,95],
[90,89,0,95,102,79,79,90,104,102],
[97,98,116,0,120,91,90,104,100,100],
[89,92,109,91,0,74,95,95,98,96],
[105,130,132,120,137,0,120,93,137,111],
[108,119,132,121,116,91,0,114,109,103],
[117,124,121,107,116,118,97,0,125,99],
[99,100,107,111,113,74,102,86,0,86],
[100,116,109,111,115,100,108,112,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,115,104,120,104,104,104,107,110],
[117,0,114,122,114,100,112,122,115,119],
[96,97,0,104,109,102,99,107,101,108],
[107,89,107,0,110,104,101,107,108,111],
[91,97,102,101,0,92,98,103,95,103],
[107,111,109,107,119,0,111,116,104,120],
[107,99,112,110,113,100,0,110,110,113],
[107,89,104,104,108,95,101,0,109,104],
[104,96,110,103,116,107,101,102,0,104],
[101,92,103,100,108,91,98,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,94,101,114,106,105,112,90,101],
[107,0,103,101,114,95,121,122,94,96],
[117,108,0,102,119,113,120,111,99,105],
[110,110,109,0,117,100,116,111,115,107],
[97,97,92,94,0,100,93,108,86,100],
[105,116,98,111,111,0,114,117,101,99],
[106,90,91,95,118,97,0,107,86,91],
[99,89,100,100,103,94,104,0,90,106],
[121,117,112,96,125,110,125,121,0,116],
[110,115,106,104,111,112,120,105,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,98,111,100,110,100,112,100,112],
[108,0,95,107,101,102,102,115,92,101],
[113,116,0,122,110,117,118,124,105,106],
[100,104,89,0,97,98,94,114,96,99],
[111,110,101,114,0,113,108,116,114,112],
[101,109,94,113,98,0,109,107,106,108],
[111,109,93,117,103,102,0,116,105,107],
[99,96,87,97,95,104,95,0,99,100],
[111,119,106,115,97,105,106,112,0,108],
[99,110,105,112,99,103,104,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,115,114,110,91,101,106,100],
[109,0,110,118,108,104,106,98,111,88],
[109,101,0,114,105,111,99,99,104,107],
[96,93,97,0,90,102,89,89,97,84],
[97,103,106,121,0,97,99,97,108,103],
[101,107,100,109,114,0,94,102,113,94],
[120,105,112,122,112,117,0,103,113,107],
[110,113,112,122,114,109,108,0,110,99],
[105,100,107,114,103,98,98,101,0,103],
[111,123,104,127,108,117,104,112,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,103,97,108,110,112,113,116,113],
[105,0,113,105,108,107,122,121,113,115],
[108,98,0,117,107,116,111,119,105,102],
[114,106,94,0,109,112,123,113,113,101],
[103,103,104,102,0,102,112,114,109,102],
[101,104,95,99,109,0,119,109,109,108],
[99,89,100,88,99,92,0,106,99,90],
[98,90,92,98,97,102,105,0,100,104],
[95,98,106,98,102,102,112,111,0,105],
[98,96,109,110,109,103,121,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,100,103,114,117,117,115,112,117],
[116,0,111,110,117,129,117,122,104,141],
[111,100,0,94,110,117,102,107,109,129],
[108,101,117,0,115,126,115,114,120,121],
[97,94,101,96,0,104,115,94,93,109],
[94,82,94,85,107,0,112,115,89,97],
[94,94,109,96,96,99,0,112,90,101],
[96,89,104,97,117,96,99,0,121,102],
[99,107,102,91,118,122,121,90,0,117],
[94,70,82,90,102,114,110,109,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,113,93,97,107,102,99,102,89],
[107,0,113,114,106,109,113,110,114,105],
[98,98,0,105,92,89,90,94,110,102],
[118,97,106,0,92,105,107,107,106,109],
[114,105,119,119,0,115,103,109,110,125],
[104,102,122,106,96,0,105,102,104,97],
[109,98,121,104,108,106,0,100,113,113],
[112,101,117,104,102,109,111,0,104,106],
[109,97,101,105,101,107,98,107,0,93],
[122,106,109,102,86,114,98,105,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,127,92,131,83,132,103,105,106],
[77,0,149,75,139,97,136,118,104,130],
[84,62,0,36,85,71,119,109,78,88],
[119,136,175,0,155,112,169,160,104,133],
[80,72,126,56,0,78,130,110,75,96],
[128,114,140,99,133,0,135,101,116,116],
[79,75,92,42,81,76,0,88,66,52],
[108,93,102,51,101,110,123,0,105,97],
[106,107,133,107,136,95,145,106,0,102],
[105,81,123,78,115,95,159,114,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,89,84,90,109,73,107,91,85],
[137,0,109,118,104,104,102,142,100,97],
[122,102,0,124,97,94,121,138,106,96],
[127,93,87,0,91,92,101,113,88,88],
[121,107,114,120,0,103,114,129,102,107],
[102,107,117,119,108,0,95,127,110,108],
[138,109,90,110,97,116,0,128,94,82],
[104,69,73,98,82,84,83,0,72,66],
[120,111,105,123,109,101,117,139,0,102],
[126,114,115,123,104,103,129,145,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,112,123,109,110,109,116,126],
[106,0,101,107,106,105,99,111,105,118],
[110,110,0,104,104,114,109,106,115,125],
[99,104,107,0,112,104,104,106,124,122],
[88,105,107,99,0,99,107,95,100,107],
[102,106,97,107,112,0,100,102,93,115],
[101,112,102,107,104,111,0,103,97,120],
[102,100,105,105,116,109,108,0,116,108],
[95,106,96,87,111,118,114,95,0,121],
[85,93,86,89,104,96,91,103,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,100,111,106,104,102,102,109,104],
[111,0,108,126,113,114,110,98,110,119],
[111,103,0,118,103,94,114,96,108,126],
[100,85,93,0,101,100,98,89,105,94],
[105,98,108,110,0,110,113,99,112,114],
[107,97,117,111,101,0,116,96,114,108],
[109,101,97,113,98,95,0,109,112,107],
[109,113,115,122,112,115,102,0,117,116],
[102,101,103,106,99,97,99,94,0,104],
[107,92,85,117,97,103,104,95,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,92,92,94,86,73,145,107,166],
[148,0,85,29,169,131,122,145,121,171],
[119,126,0,61,143,105,93,135,137,185],
[119,182,150,0,169,131,93,116,121,192],
[117,42,68,42,0,42,135,116,63,171],
[125,80,106,80,169,0,143,145,77,192],
[138,89,118,118,76,68,0,142,89,148],
[66,66,76,95,95,66,69,0,47,167],
[104,90,74,90,148,134,122,164,0,190],
[45,40,26,19,40,19,63,44,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,105,102,107,99,100,102,112,102],
[110,0,121,96,119,106,110,107,116,101],
[106,90,0,96,104,96,92,101,97,99],
[109,115,115,0,99,93,96,104,112,108],
[104,92,107,112,0,89,104,98,100,108],
[112,105,115,118,122,0,99,105,110,105],
[111,101,119,115,107,112,0,113,117,121],
[109,104,110,107,113,106,98,0,115,110],
[99,95,114,99,111,101,94,96,0,95],
[109,110,112,103,103,106,90,101,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,119,102,110,109,110,111,124,109],
[110,0,126,109,115,105,114,114,114,100],
[92,85,0,88,113,86,100,99,111,91],
[109,102,123,0,127,104,118,107,133,112],
[101,96,98,84,0,90,98,89,116,91],
[102,106,125,107,121,0,121,112,122,114],
[101,97,111,93,113,90,0,113,119,99],
[100,97,112,104,122,99,98,0,112,99],
[87,97,100,78,95,89,92,99,0,101],
[102,111,120,99,120,97,112,112,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,110,134,121,107,101,106,102],
[99,0,107,112,108,116,96,95,94,90],
[105,104,0,105,119,109,100,98,109,99],
[101,99,106,0,115,109,89,95,101,95],
[77,103,92,96,0,97,82,88,87,87],
[90,95,102,102,114,0,101,104,103,95],
[104,115,111,122,129,110,0,108,114,116],
[110,116,113,116,123,107,103,0,109,98],
[105,117,102,110,124,108,97,102,0,99],
[109,121,112,116,124,116,95,113,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,96,101,101,85,99,110,94,87],
[114,0,86,90,90,95,96,85,91,100],
[115,125,0,93,97,96,114,111,104,116],
[110,121,118,0,126,96,120,110,106,107],
[110,121,114,85,0,99,125,100,102,105],
[126,116,115,115,112,0,125,111,104,106],
[112,115,97,91,86,86,0,93,91,104],
[101,126,100,101,111,100,118,0,100,104],
[117,120,107,105,109,107,120,111,0,108],
[124,111,95,104,106,105,107,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,108,114,100,98,98,90,110,112],
[114,0,102,122,111,111,107,106,118,121],
[103,109,0,113,96,103,107,94,109,107],
[97,89,98,0,86,100,93,92,109,106],
[111,100,115,125,0,115,114,103,110,112],
[113,100,108,111,96,0,110,94,120,116],
[113,104,104,118,97,101,0,108,119,106],
[121,105,117,119,108,117,103,0,121,116],
[101,93,102,102,101,91,92,90,0,101],
[99,90,104,105,99,95,105,95,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,198,127,74,167,198,123,115,130],
[100,0,159,131,109,96,122,127,115,146],
[13,52,0,44,43,65,50,55,84,43],
[84,80,167,0,43,136,111,111,103,136],
[137,102,168,168,0,102,159,72,128,137],
[44,115,146,75,109,0,146,127,90,109],
[13,89,161,100,52,65,0,96,93,93],
[88,84,156,100,139,84,115,0,100,115],
[96,96,127,108,83,121,118,111,0,127],
[81,65,168,75,74,102,118,96,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,90,85,99,98,82,109,96,91],
[111,0,98,95,110,104,101,114,94,112],
[121,113,0,101,116,121,107,125,106,132],
[126,116,110,0,120,118,106,102,103,130],
[112,101,95,91,0,101,93,98,98,117],
[113,107,90,93,110,0,80,95,89,107],
[129,110,104,105,118,131,0,118,105,118],
[102,97,86,109,113,116,93,0,103,107],
[115,117,105,108,113,122,106,108,0,117],
[120,99,79,81,94,104,93,104,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,108,113,107,105,110,107,102,104],
[113,0,105,113,111,111,112,122,110,106],
[103,106,0,106,101,113,117,114,102,109],
[98,98,105,0,96,96,108,107,105,108],
[104,100,110,115,0,101,105,114,103,105],
[106,100,98,115,110,0,108,105,104,108],
[101,99,94,103,106,103,0,102,98,99],
[104,89,97,104,97,106,109,0,98,97],
[109,101,109,106,108,107,113,113,0,107],
[107,105,102,103,106,103,112,114,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,96,94,107,95,97,97,104,106],
[111,0,100,85,91,92,100,93,88,101],
[115,111,0,106,122,105,112,102,104,117],
[117,126,105,0,121,111,96,102,113,116],
[104,120,89,90,0,103,96,103,109,107],
[116,119,106,100,108,0,114,113,105,109],
[114,111,99,115,115,97,0,111,107,109],
[114,118,109,109,108,98,100,0,113,119],
[107,123,107,98,102,106,104,98,0,106],
[105,110,94,95,104,102,102,92,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,103,98,101,98,91,114,114,117],
[109,0,115,106,121,99,109,109,121,117],
[108,96,0,102,109,100,83,99,115,105],
[113,105,109,0,101,101,103,118,123,117],
[110,90,102,110,0,101,93,106,120,106],
[113,112,111,110,110,0,103,111,117,116],
[120,102,128,108,118,108,0,113,121,126],
[97,102,112,93,105,100,98,0,115,102],
[97,90,96,88,91,94,90,96,0,111],
[94,94,106,94,105,95,85,109,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,121,111,106,123,102,111,105,105],
[109,0,114,124,107,113,104,105,106,112],
[90,97,0,95,85,97,102,111,98,96],
[100,87,116,0,98,103,98,123,93,90],
[105,104,126,113,0,115,107,113,118,103],
[88,98,114,108,96,0,101,108,90,106],
[109,107,109,113,104,110,0,112,99,105],
[100,106,100,88,98,103,99,0,97,90],
[106,105,113,118,93,121,112,114,0,93],
[106,99,115,121,108,105,106,121,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,106,101,104,112,100,110,112,111],
[94,0,109,87,85,88,92,96,99,106],
[105,102,0,96,94,93,90,89,100,98],
[110,124,115,0,109,105,100,110,108,114],
[107,126,117,102,0,104,109,116,111,107],
[99,123,118,106,107,0,111,118,115,107],
[111,119,121,111,102,100,0,102,109,108],
[101,115,122,101,95,93,109,0,108,110],
[99,112,111,103,100,96,102,103,0,106],
[100,105,113,97,104,104,103,101,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,105,91,98,114,98,107,99],
[106,0,111,100,103,115,107,109,124,102],
[98,100,0,93,92,104,112,92,107,100],
[106,111,118,0,98,107,131,100,114,110],
[120,108,119,113,0,118,120,100,122,120],
[113,96,107,104,93,0,120,102,100,100],
[97,104,99,80,91,91,0,94,106,90],
[113,102,119,111,111,109,117,0,126,99],
[104,87,104,97,89,111,105,85,0,91],
[112,109,111,101,91,111,121,112,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,118,121,118,117,108,94,130,94],
[94,0,100,101,99,88,89,87,122,103],
[93,111,0,106,111,98,101,90,109,96],
[90,110,105,0,100,108,82,91,111,87],
[93,112,100,111,0,96,101,84,124,93],
[94,123,113,103,115,0,92,84,110,103],
[103,122,110,129,110,119,0,90,112,114],
[117,124,121,120,127,127,121,0,131,102],
[81,89,102,100,87,101,99,80,0,98],
[117,108,115,124,118,108,97,109,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,93,110,120,71,87,68,93,96],
[105,0,84,110,146,103,110,72,91,111],
[118,127,0,135,127,103,100,107,131,121],
[101,101,76,0,121,97,104,65,95,88],
[91,65,84,90,0,71,66,53,90,85],
[140,108,108,114,140,0,94,80,117,119],
[124,101,111,107,145,117,0,87,113,111],
[143,139,104,146,158,131,124,0,106,135],
[118,120,80,116,121,94,98,105,0,105],
[115,100,90,123,126,92,100,76,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,106,122,118,117,112,107,103],
[103,0,115,98,117,116,114,109,104,119],
[102,96,0,106,101,116,119,101,96,87],
[105,113,105,0,115,118,123,101,95,97],
[89,94,110,96,0,112,122,109,93,107],
[93,95,95,93,99,0,118,101,88,96],
[94,97,92,88,89,93,0,95,82,86],
[99,102,110,110,102,110,116,0,98,101],
[104,107,115,116,118,123,129,113,0,99],
[108,92,124,114,104,115,125,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,113,115,99,105,99,112,108,93],
[110,0,90,113,90,86,78,81,87,93],
[98,121,0,129,110,99,108,92,112,99],
[96,98,82,0,90,77,64,103,88,68],
[112,121,101,121,0,83,105,112,89,110],
[106,125,112,134,128,0,111,120,123,97],
[112,133,103,147,106,100,0,121,112,109],
[99,130,119,108,99,91,90,0,107,94],
[103,124,99,123,122,88,99,104,0,92],
[118,118,112,143,101,114,102,117,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,99,120,97,94,98,103,111,110],
[101,0,103,92,105,95,112,93,111,109],
[112,108,0,125,96,98,85,98,96,106],
[91,119,86,0,74,115,96,87,98,95],
[114,106,115,137,0,121,119,96,100,133],
[117,116,113,96,90,0,108,108,114,129],
[113,99,126,115,92,103,0,104,113,117],
[108,118,113,124,115,103,107,0,105,124],
[100,100,115,113,111,97,98,106,0,114],
[101,102,105,116,78,82,94,87,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,94,101,99,97,83,89,109,93],
[100,0,104,102,97,112,91,97,111,108],
[117,107,0,105,97,107,94,98,92,98],
[110,109,106,0,98,103,103,105,100,99],
[112,114,114,113,0,111,96,97,96,105],
[114,99,104,108,100,0,94,96,112,106],
[128,120,117,108,115,117,0,114,104,117],
[122,114,113,106,114,115,97,0,109,116],
[102,100,119,111,115,99,107,102,0,105],
[118,103,113,112,106,105,94,95,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,117,105,108,109,113,109,107],
[104,0,103,109,106,103,101,119,113,104],
[100,108,0,109,107,105,108,100,114,113],
[94,102,102,0,106,97,112,122,98,102],
[106,105,104,105,0,98,104,106,99,104],
[103,108,106,114,113,0,111,115,114,110],
[102,110,103,99,107,100,0,116,109,112],
[98,92,111,89,105,96,95,0,103,103],
[102,98,97,113,112,97,102,108,0,106],
[104,107,98,109,107,101,99,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,97,117,111,101,106,98,112,101],
[99,0,99,91,100,84,100,90,112,113],
[114,112,0,102,112,99,108,108,118,91],
[94,120,109,0,107,97,106,122,124,103],
[100,111,99,104,0,113,100,128,105,109],
[110,127,112,114,98,0,107,103,132,106],
[105,111,103,105,111,104,0,105,124,115],
[113,121,103,89,83,108,106,0,106,105],
[99,99,93,87,106,79,87,105,0,98],
[110,98,120,108,102,105,96,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,119,108,103,112,111,112,120,127],
[96,0,105,102,107,112,103,108,119,118],
[92,106,0,104,109,106,95,90,109,108],
[103,109,107,0,107,114,108,95,113,114],
[108,104,102,104,0,102,105,94,109,116],
[99,99,105,97,109,0,101,105,102,110],
[100,108,116,103,106,110,0,113,119,129],
[99,103,121,116,117,106,98,0,120,112],
[91,92,102,98,102,109,92,91,0,100],
[84,93,103,97,95,101,82,99,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,121,107,107,109,117,96,113,111],
[105,0,129,89,114,106,114,107,114,110],
[90,82,0,87,103,95,102,96,92,103],
[104,122,124,0,111,114,103,98,115,108],
[104,97,108,100,0,100,114,108,102,93],
[102,105,116,97,111,0,112,116,115,111],
[94,97,109,108,97,99,0,105,107,100],
[115,104,115,113,103,95,106,0,99,94],
[98,97,119,96,109,96,104,112,0,112],
[100,101,108,103,118,100,111,117,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,106,95,102,100,98,115,98,90],
[115,0,112,107,111,110,119,111,100,93],
[105,99,0,106,108,117,114,103,108,96],
[116,104,105,0,110,107,124,114,113,107],
[109,100,103,101,0,91,116,103,109,99],
[111,101,94,104,120,0,114,93,101,99],
[113,92,97,87,95,97,0,101,87,88],
[96,100,108,97,108,118,110,0,108,103],
[113,111,103,98,102,110,124,103,0,103],
[121,118,115,104,112,112,123,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,94,108,93,105,87,94,95,87],
[111,0,96,99,114,94,111,99,92,103],
[117,115,0,119,108,111,94,103,107,115],
[103,112,92,0,100,107,91,96,96,106],
[118,97,103,111,0,109,97,99,108,109],
[106,117,100,104,102,0,101,100,105,113],
[124,100,117,120,114,110,0,111,111,111],
[117,112,108,115,112,111,100,0,104,109],
[116,119,104,115,103,106,100,107,0,110],
[124,108,96,105,102,98,100,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,85,101,94,112,77,115,84,93],
[98,0,87,130,106,108,113,148,96,113],
[126,124,0,125,128,92,105,140,122,122],
[110,81,86,0,88,90,109,122,101,109],
[117,105,83,123,0,122,88,132,97,101],
[99,103,119,121,89,0,98,134,114,104],
[134,98,106,102,123,113,0,133,109,87],
[96,63,71,89,79,77,78,0,107,81],
[127,115,89,110,114,97,102,104,0,111],
[118,98,89,102,110,107,124,130,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,139,117,108,119,116,115,98,127],
[89,0,111,90,75,87,98,93,80,105],
[72,100,0,90,87,100,100,108,81,108],
[94,121,121,0,109,102,93,119,95,114],
[103,136,124,102,0,130,106,109,113,106],
[92,124,111,109,81,0,101,110,92,105],
[95,113,111,118,105,110,0,107,92,120],
[96,118,103,92,102,101,104,0,78,105],
[113,131,130,116,98,119,119,133,0,118],
[84,106,103,97,105,106,91,106,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,118,109,113,134,115,126,105,89],
[92,0,112,77,108,107,72,109,93,81],
[93,99,0,63,127,112,121,86,120,89],
[102,134,148,0,128,124,135,109,125,127],
[98,103,84,83,0,113,94,90,106,79],
[77,104,99,87,98,0,117,118,102,102],
[96,139,90,76,117,94,0,95,98,71],
[85,102,125,102,121,93,116,0,103,98],
[106,118,91,86,105,109,113,108,0,95],
[122,130,122,84,132,109,140,113,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,99,120,108,126,93,113,117,117],
[74,0,104,124,98,118,107,85,110,123],
[112,107,0,90,100,106,113,91,101,105],
[91,87,121,0,115,131,119,81,98,110],
[103,113,111,96,0,103,114,90,89,95],
[85,93,105,80,108,0,95,95,95,103],
[118,104,98,92,97,116,0,123,100,99],
[98,126,120,130,121,116,88,0,113,111],
[94,101,110,113,122,116,111,98,0,96],
[94,88,106,101,116,108,112,100,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,103,89,105,106,91,101,102,101],
[100,0,93,100,105,110,98,95,112,102],
[108,118,0,95,119,118,99,107,110,116],
[122,111,116,0,119,122,103,105,120,118],
[106,106,92,92,0,108,103,95,94,103],
[105,101,93,89,103,0,98,94,100,105],
[120,113,112,108,108,113,0,104,118,105],
[110,116,104,106,116,117,107,0,110,108],
[109,99,101,91,117,111,93,101,0,104],
[110,109,95,93,108,106,106,103,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,95,130,125,112,108,124,123],
[99,0,107,94,130,127,92,99,109,110],
[100,104,0,92,113,104,108,92,97,95],
[116,117,119,0,143,140,118,102,128,139],
[81,81,98,68,0,108,100,100,106,83],
[86,84,107,71,103,0,80,104,87,100],
[99,119,103,93,111,131,0,103,108,115],
[103,112,119,109,111,107,108,0,120,104],
[87,102,114,83,105,124,103,91,0,113],
[88,101,116,72,128,111,96,107,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,107,104,104,103,113,116,101],
[100,0,113,105,102,109,109,114,105,104],
[107,98,0,107,106,111,110,116,111,104],
[104,106,104,0,111,101,99,113,107,108],
[107,109,105,100,0,106,109,106,119,92],
[107,102,100,110,105,0,105,108,104,105],
[108,102,101,112,102,106,0,108,110,111],
[98,97,95,98,105,103,103,0,101,99],
[95,106,100,104,92,107,101,110,0,102],
[110,107,107,103,119,106,100,112,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,93,73,94,103,83,94,92,95],
[131,0,109,101,111,130,116,125,98,117],
[118,102,0,104,99,117,88,95,105,106],
[138,110,107,0,110,122,93,108,97,117],
[117,100,112,101,0,119,87,114,102,114],
[108,81,94,89,92,0,84,106,90,104],
[128,95,123,118,124,127,0,125,117,120],
[117,86,116,103,97,105,86,0,92,110],
[119,113,106,114,109,121,94,119,0,118],
[116,94,105,94,97,107,91,101,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,118,106,120,114,113,123,109],
[104,0,99,102,103,118,112,100,114,106],
[109,112,0,113,117,108,107,111,114,102],
[93,109,98,0,104,112,103,104,99,109],
[105,108,94,107,0,110,96,113,102,108],
[91,93,103,99,101,0,94,103,95,104],
[97,99,104,108,115,117,0,113,113,107],
[98,111,100,107,98,108,98,0,109,102],
[88,97,97,112,109,116,98,102,0,97],
[102,105,109,102,103,107,104,109,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,109,116,106,98,124,117,126,121],
[93,0,88,98,98,96,109,97,108,94],
[102,123,0,125,114,104,121,109,128,122],
[95,113,86,0,96,103,114,106,113,107],
[105,113,97,115,0,114,109,98,120,111],
[113,115,107,108,97,0,117,118,130,120],
[87,102,90,97,102,94,0,104,105,112],
[94,114,102,105,113,93,107,0,114,118],
[85,103,83,98,91,81,106,97,0,105],
[90,117,89,104,100,91,99,93,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,116,112,130,111,116,98,114,105],
[96,0,120,117,108,106,105,108,114,106],
[95,91,0,117,112,108,103,93,113,106],
[99,94,94,0,113,113,100,94,107,99],
[81,103,99,98,0,104,90,98,107,105],
[100,105,103,98,107,0,105,102,109,107],
[95,106,108,111,121,106,0,100,108,116],
[113,103,118,117,113,109,111,0,112,109],
[97,97,98,104,104,102,103,99,0,98],
[106,105,105,112,106,104,95,102,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,95,104,99,105,99,96,109],
[102,0,104,91,105,93,99,96,86,112],
[104,107,0,102,92,94,119,96,99,116],
[116,120,109,0,113,106,127,109,96,108],
[107,106,119,98,0,106,113,110,98,116],
[112,118,117,105,105,0,122,98,109,128],
[106,112,92,84,98,89,0,92,83,105],
[112,115,115,102,101,113,119,0,99,127],
[115,125,112,115,113,102,128,112,0,122],
[102,99,95,103,95,83,106,84,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,111,115,104,120,109,109,100,103],
[93,0,106,113,101,109,96,97,95,108],
[100,105,0,103,102,110,96,95,92,105],
[96,98,108,0,101,105,86,109,100,97],
[107,110,109,110,0,118,102,109,110,106],
[91,102,101,106,93,0,98,112,103,96],
[102,115,115,125,109,113,0,110,107,113],
[102,114,116,102,102,99,101,0,97,96],
[111,116,119,111,101,108,104,114,0,113],
[108,103,106,114,105,115,98,115,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,96,77,96,105,97,113,92],
[105,0,103,95,100,91,107,88,105,92],
[105,108,0,110,104,107,117,97,106,99],
[115,116,101,0,107,102,113,103,106,109],
[134,111,107,104,0,100,127,111,106,129],
[115,120,104,109,111,0,113,103,108,100],
[106,104,94,98,84,98,0,91,108,98],
[114,123,114,108,100,108,120,0,102,119],
[98,106,105,105,105,103,103,109,0,101],
[119,119,112,102,82,111,113,92,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,101,119,113,109,112,114,115],
[101,0,106,93,102,102,98,99,108,95],
[100,105,0,103,103,90,99,98,105,96],
[110,118,108,0,124,101,109,105,109,118],
[92,109,108,87,0,89,89,96,92,98],
[98,109,121,110,122,0,115,107,111,105],
[102,113,112,102,122,96,0,105,111,110],
[99,112,113,106,115,104,106,0,113,112],
[97,103,106,102,119,100,100,98,0,102],
[96,116,115,93,113,106,101,99,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,93,89,79,103,100,109,96,89],
[99,0,114,105,93,101,123,133,117,92],
[118,97,0,111,114,102,100,126,118,95],
[122,106,100,0,92,102,113,132,113,87],
[132,118,97,119,0,111,101,126,133,106],
[108,110,109,109,100,0,116,134,115,96],
[111,88,111,98,110,95,0,96,98,85],
[102,78,85,79,85,77,115,0,93,65],
[115,94,93,98,78,96,113,118,0,67],
[122,119,116,124,105,115,126,146,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,96,107,102,111,100,99,97],
[109,0,121,112,105,105,114,98,119,118],
[101,90,0,101,103,114,114,94,104,101],
[115,99,110,0,102,99,107,90,111,102],
[104,106,108,109,0,101,103,105,98,100],
[109,106,97,112,110,0,112,101,102,115],
[100,97,97,104,108,99,0,101,97,96],
[111,113,117,121,106,110,110,0,99,114],
[112,92,107,100,113,109,114,112,0,116],
[114,93,110,109,111,96,115,97,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,131,125,106,99,112,125,137,102],
[81,0,104,115,97,94,106,103,95,94],
[80,107,0,113,90,87,98,106,97,79],
[86,96,98,0,96,91,100,95,91,91],
[105,114,121,115,0,112,121,129,120,107],
[112,117,124,120,99,0,116,128,120,126],
[99,105,113,111,90,95,0,127,118,99],
[86,108,105,116,82,83,84,0,106,84],
[74,116,114,120,91,91,93,105,0,89],
[109,117,132,120,104,85,112,127,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,114,113,110,106,105,115,112,109],
[108,0,102,122,117,99,99,117,116,111],
[97,109,0,99,110,98,91,110,95,94],
[98,89,112,0,116,103,98,104,102,120],
[101,94,101,95,0,100,103,103,99,103],
[105,112,113,108,111,0,110,110,112,115],
[106,112,120,113,108,101,0,112,101,114],
[96,94,101,107,108,101,99,0,102,110],
[99,95,116,109,112,99,110,109,0,107],
[102,100,117,91,108,96,97,101,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,92,85,84,80,83,109,91,70],
[104,0,82,101,117,87,102,107,99,72],
[119,129,0,79,131,93,111,121,103,96],
[126,110,132,0,140,109,105,128,103,86],
[127,94,80,71,0,84,99,102,100,91],
[131,124,118,102,127,0,104,135,131,110],
[128,109,100,106,112,107,0,110,101,96],
[102,104,90,83,109,76,101,0,84,85],
[120,112,108,108,111,80,110,127,0,109],
[141,139,115,125,120,101,115,126,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,98,107,98,109,107,105,111,120],
[109,0,102,119,111,113,110,117,121,123],
[113,109,0,117,117,108,126,103,118,120],
[104,92,94,0,93,97,116,99,125,105],
[113,100,94,118,0,111,105,97,114,127],
[102,98,103,114,100,0,90,90,120,114],
[104,101,85,95,106,121,0,81,108,116],
[106,94,108,112,114,121,130,0,117,122],
[100,90,93,86,97,91,103,94,0,100],
[91,88,91,106,84,97,95,89,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,110,105,111,107,111,105,109,111],
[87,0,104,98,95,97,100,94,101,94],
[101,107,0,116,112,102,106,95,102,108],
[106,113,95,0,99,100,113,106,106,91],
[100,116,99,112,0,108,104,107,117,99],
[104,114,109,111,103,0,99,105,119,104],
[100,111,105,98,107,112,0,104,112,116],
[106,117,116,105,104,106,107,0,113,115],
[102,110,109,105,94,92,99,98,0,101],
[100,117,103,120,112,107,95,96,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,117,112,115,111,138,101,97,111],
[88,0,102,101,118,99,114,106,99,100],
[94,109,0,104,106,96,100,93,104,102],
[99,110,107,0,122,96,117,96,111,96],
[96,93,105,89,0,110,111,100,91,113],
[100,112,115,115,101,0,126,119,105,106],
[73,97,111,94,100,85,0,84,96,92],
[110,105,118,115,111,92,127,0,109,114],
[114,112,107,100,120,106,115,102,0,104],
[100,111,109,115,98,105,119,97,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,108,113,108,100,117,118,116,109],
[118,0,111,122,117,103,121,121,111,112],
[103,100,0,105,101,103,98,111,109,118],
[98,89,106,0,108,108,93,124,108,113],
[103,94,110,103,0,105,106,122,93,104],
[111,108,108,103,106,0,106,113,106,110],
[94,90,113,118,105,105,0,118,108,112],
[93,90,100,87,89,98,93,0,89,95],
[95,100,102,103,118,105,103,122,0,110],
[102,99,93,98,107,101,99,116,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,102,111,81,105,110,105,96,97],
[114,0,105,105,109,112,118,117,110,106],
[109,106,0,123,88,104,117,109,116,86],
[100,106,88,0,83,97,95,98,96,84],
[130,102,123,128,0,118,126,133,109,106],
[106,99,107,114,93,0,108,107,91,96],
[101,93,94,116,85,103,0,110,112,92],
[106,94,102,113,78,104,101,0,114,92],
[115,101,95,115,102,120,99,97,0,90],
[114,105,125,127,105,115,119,119,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,104,84,88,96,96,104,97,113],
[121,0,121,105,106,111,112,126,111,123],
[107,90,0,97,105,90,101,94,94,111],
[127,106,114,0,109,107,115,107,102,112],
[123,105,106,102,0,100,116,116,105,123],
[115,100,121,104,111,0,116,104,112,118],
[115,99,110,96,95,95,0,105,96,116],
[107,85,117,104,95,107,106,0,96,104],
[114,100,117,109,106,99,115,115,0,130],
[98,88,100,99,88,93,95,107,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,82,82,82,89,76,92,90,101],
[121,0,113,120,114,109,100,118,108,116],
[129,98,0,106,90,110,99,138,108,107],
[129,91,105,0,110,93,103,107,103,107],
[129,97,121,101,0,109,93,94,110,111],
[122,102,101,118,102,0,109,122,112,105],
[135,111,112,108,118,102,0,144,107,121],
[119,93,73,104,117,89,67,0,97,107],
[121,103,103,108,101,99,104,114,0,118],
[110,95,104,104,100,106,90,104,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,97,115,124,130,105,105,111,118],
[107,0,113,118,119,99,101,108,109,117],
[114,98,0,130,140,135,122,132,112,130],
[96,93,81,0,133,102,95,95,98,107],
[87,92,71,78,0,101,78,69,94,98],
[81,112,76,109,110,0,115,104,111,108],
[106,110,89,116,133,96,0,104,104,122],
[106,103,79,116,142,107,107,0,109,123],
[100,102,99,113,117,100,107,102,0,111],
[93,94,81,104,113,103,89,88,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,103,101,113,106,109,99,106,107],
[109,0,101,91,90,112,105,93,85,99],
[108,110,0,110,103,124,106,102,98,109],
[110,120,101,0,114,105,108,106,107,113],
[98,121,108,97,0,120,114,107,115,122],
[105,99,87,106,91,0,108,102,92,114],
[102,106,105,103,97,103,0,93,100,106],
[112,118,109,105,104,109,118,0,112,119],
[105,126,113,104,96,119,111,99,0,115],
[104,112,102,98,89,97,105,92,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,154,118,211,144,103,175,165,144],
[10,0,46,82,154,36,10,82,93,108],
[57,165,0,72,165,93,93,129,165,201],
[93,129,139,0,211,129,139,103,129,201],
[0,57,46,0,0,36,10,57,93,108],
[67,175,118,82,175,0,67,139,129,108],
[108,201,118,72,201,144,0,129,165,144],
[36,129,82,108,154,72,82,0,129,144],
[46,118,46,82,118,82,46,82,0,118],
[67,103,10,10,103,103,67,67,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,112,111,120,113,107,122,114,105],
[104,0,101,108,103,109,100,103,110,109],
[99,110,0,105,112,106,91,113,116,108],
[100,103,106,0,114,104,97,105,103,108],
[91,108,99,97,0,92,85,102,105,95],
[98,102,105,107,119,0,99,101,110,106],
[104,111,120,114,126,112,0,122,112,120],
[89,108,98,106,109,110,89,0,108,93],
[97,101,95,108,106,101,99,103,0,100],
[106,102,103,103,116,105,91,118,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,116,77,97,99,91,122,97,78],
[107,0,124,112,98,110,120,134,95,95],
[95,87,0,89,102,102,102,117,86,100],
[134,99,122,0,93,107,108,131,109,103],
[114,113,109,118,0,110,107,124,110,90],
[112,101,109,104,101,0,114,123,111,93],
[120,91,109,103,104,97,0,117,117,106],
[89,77,94,80,87,88,94,0,92,79],
[114,116,125,102,101,100,94,119,0,101],
[133,116,111,108,121,118,105,132,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,106,106,83,102,114,104,107,87],
[150,0,118,121,103,116,130,125,123,111],
[105,93,0,106,110,103,120,96,127,102],
[105,90,105,0,99,119,109,113,117,105],
[128,108,101,112,0,116,133,119,127,123],
[109,95,108,92,95,0,99,100,119,114],
[97,81,91,102,78,112,0,107,116,98],
[107,86,115,98,92,111,104,0,110,110],
[104,88,84,94,84,92,95,101,0,88],
[124,100,109,106,88,97,113,101,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,97,110,114,112,85,115,116],
[97,0,87,99,115,106,104,90,109,102],
[99,124,0,111,99,106,95,112,107,113],
[114,112,100,0,114,112,120,115,106,103],
[101,96,112,97,0,96,107,85,110,96],
[97,105,105,99,115,0,107,115,99,97],
[99,107,116,91,104,104,0,93,91,96],
[126,121,99,96,126,96,118,0,112,105],
[96,102,104,105,101,112,120,99,0,114],
[95,109,98,108,115,114,115,106,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,114,126,113,105,115,110,116,99],
[104,0,100,112,98,95,99,89,102,102],
[97,111,0,110,94,82,97,81,101,91],
[85,99,101,0,97,89,104,91,106,91],
[98,113,117,114,0,116,105,115,108,105],
[106,116,129,122,95,0,109,113,123,114],
[96,112,114,107,106,102,0,93,100,94],
[101,122,130,120,96,98,118,0,116,110],
[95,109,110,105,103,88,111,95,0,98],
[112,109,120,120,106,97,117,101,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,89,95,105,86,110,96,89,95],
[130,0,108,102,116,110,115,93,107,124],
[122,103,0,101,119,113,120,107,120,123],
[116,109,110,0,124,100,133,99,116,125],
[106,95,92,87,0,80,109,87,107,89],
[125,101,98,111,131,0,109,102,105,113],
[101,96,91,78,102,102,0,91,100,100],
[115,118,104,112,124,109,120,0,112,124],
[122,104,91,95,104,106,111,99,0,119],
[116,87,88,86,122,98,111,87,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,52,79,103,80,83,112,84,80],
[139,0,78,83,130,111,123,142,122,107],
[159,133,0,96,149,135,122,143,136,107],
[132,128,115,0,112,107,102,122,128,107],
[108,81,62,99,0,88,90,149,88,100],
[131,100,76,104,123,0,93,134,127,102],
[128,88,89,109,121,118,0,128,136,105],
[99,69,68,89,62,77,83,0,80,85],
[127,89,75,83,123,84,75,131,0,99],
[131,104,104,104,111,109,106,126,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,104,102,103,111,109,96,100,112],
[117,0,98,108,103,113,107,98,96,107],
[107,113,0,110,104,113,107,107,118,119],
[109,103,101,0,102,108,105,104,100,112],
[108,108,107,109,0,109,107,111,105,118],
[100,98,98,103,102,0,106,97,95,104],
[102,104,104,106,104,105,0,112,90,116],
[115,113,104,107,100,114,99,0,108,112],
[111,115,93,111,106,116,121,103,0,122],
[99,104,92,99,93,107,95,99,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,62,92,109,80,88,90,100,107],
[117,0,108,96,105,82,128,107,125,108],
[149,103,0,129,114,107,121,117,144,144],
[119,115,82,0,137,72,114,113,122,110],
[102,106,97,74,0,99,109,105,104,143],
[131,129,104,139,112,0,121,121,149,115],
[123,83,90,97,102,90,0,106,132,137],
[121,104,94,98,106,90,105,0,115,107],
[111,86,67,89,107,62,79,96,0,103],
[104,103,67,101,68,96,74,104,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,105,101,101,90,106,102,92,98],
[121,0,105,110,108,106,118,118,106,113],
[106,106,0,104,105,119,112,113,103,110],
[110,101,107,0,107,114,104,116,101,102],
[110,103,106,104,0,94,117,120,107,113],
[121,105,92,97,117,0,111,115,109,101],
[105,93,99,107,94,100,0,101,97,102],
[109,93,98,95,91,96,110,0,97,94],
[119,105,108,110,104,102,114,114,0,120],
[113,98,101,109,98,110,109,117,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,100,100,107,99,90,104,100,113],
[110,0,112,112,84,117,102,123,96,105],
[111,99,0,92,107,100,98,118,87,102],
[111,99,119,0,114,105,102,106,103,104],
[104,127,104,97,0,114,119,115,120,100],
[112,94,111,106,97,0,114,125,106,104],
[121,109,113,109,92,97,0,126,123,114],
[107,88,93,105,96,86,85,0,99,114],
[111,115,124,108,91,105,88,112,0,97],
[98,106,109,107,111,107,97,97,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,60,151,84,84,0,84,144],
[211,0,151,60,211,84,84,67,211,144],
[211,60,0,60,211,144,84,0,144,144],
[151,151,151,0,151,151,151,151,151,84],
[60,0,0,60,0,0,84,0,0,144],
[127,127,67,60,211,0,84,67,211,144],
[127,127,127,60,127,127,0,67,127,144],
[211,144,211,60,211,144,144,0,211,144],
[127,0,67,60,211,0,84,0,0,144],
[67,67,67,127,67,67,67,67,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,55,92,77,116,97,90,114,111],
[125,0,109,104,91,105,119,100,111,115],
[156,102,0,121,101,133,120,141,125,110],
[119,107,90,0,104,119,105,100,103,102],
[134,120,110,107,0,123,107,107,127,91],
[95,106,78,92,88,0,115,90,87,89],
[114,92,91,106,104,96,0,83,107,66],
[121,111,70,111,104,121,128,0,96,116],
[97,100,86,108,84,124,104,115,0,112],
[100,96,101,109,120,122,145,95,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,87,77,88,92,84,97,73,108],
[126,0,134,117,112,98,124,115,111,141],
[124,77,0,108,105,103,117,109,86,104],
[134,94,103,0,120,116,107,111,112,123],
[123,99,106,91,0,112,105,122,98,126],
[119,113,108,95,99,0,106,120,92,112],
[127,87,94,104,106,105,0,108,94,124],
[114,96,102,100,89,91,103,0,86,117],
[138,100,125,99,113,119,117,125,0,140],
[103,70,107,88,85,99,87,94,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,102,97,109,106,98,102,97,98],
[120,0,124,103,98,114,109,107,113,101],
[109,87,0,97,109,125,109,104,100,101],
[114,108,114,0,106,104,108,109,100,101],
[102,113,102,105,0,104,106,108,94,106],
[105,97,86,107,107,0,88,99,94,94],
[113,102,102,103,105,123,0,109,117,103],
[109,104,107,102,103,112,102,0,109,104],
[114,98,111,111,117,117,94,102,0,103],
[113,110,110,110,105,117,108,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,120,155,88,111,126,140,109,101],
[61,0,82,107,72,95,93,107,74,106],
[91,129,0,138,98,121,129,154,109,134],
[56,104,73,0,63,101,100,144,77,105],
[123,139,113,148,0,133,81,164,126,125],
[100,116,90,110,78,0,88,95,89,103],
[85,118,82,111,130,123,0,149,113,130],
[71,104,57,67,47,116,62,0,89,114],
[102,137,102,134,85,122,98,122,0,116],
[110,105,77,106,86,108,81,97,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,122,118,122,125,125,121,105,126],
[98,0,101,99,98,114,111,116,100,103],
[89,110,0,99,110,110,117,106,107,111],
[93,112,112,0,101,108,114,110,97,114],
[89,113,101,110,0,103,123,105,98,107],
[86,97,101,103,108,0,107,113,99,103],
[86,100,94,97,88,104,0,105,96,86],
[90,95,105,101,106,98,106,0,101,103],
[106,111,104,114,113,112,115,110,0,103],
[85,108,100,97,104,108,125,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,113,102,114,104,113,114,119],
[108,0,116,119,104,118,112,107,114,101],
[99,95,0,112,95,103,97,104,102,90],
[98,92,99,0,103,116,98,104,96,96],
[109,107,116,108,0,114,109,103,119,99],
[97,93,108,95,97,0,91,99,111,92],
[107,99,114,113,102,120,0,114,113,102],
[98,104,107,107,108,112,97,0,105,96],
[97,97,109,115,92,100,98,106,0,95],
[92,110,121,115,112,119,109,115,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,45,112,59,121,62,48,123,56],
[99,0,88,147,118,150,121,136,174,144],
[166,123,0,152,59,150,62,150,115,99],
[99,64,59,0,59,150,121,107,174,19],
[152,93,152,152,0,166,203,99,203,40],
[90,61,61,61,45,0,112,8,123,19],
[149,90,149,90,8,99,0,88,109,48],
[163,75,61,104,112,203,123,0,123,33],
[88,37,96,37,8,88,102,88,0,37],
[155,67,112,192,171,192,163,178,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,109,108,119,113,119,115,112,105],
[92,0,96,96,103,93,104,102,106,98],
[102,115,0,109,110,103,111,110,106,112],
[103,115,102,0,115,108,103,106,106,101],
[92,108,101,96,0,100,93,92,99,93],
[98,118,108,103,111,0,102,104,105,97],
[92,107,100,108,118,109,0,92,109,100],
[96,109,101,105,119,107,119,0,105,103],
[99,105,105,105,112,106,102,106,0,101],
[106,113,99,110,118,114,111,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,124,82,108,114,125,99,95,98],
[122,0,128,107,102,139,109,123,106,111],
[87,83,0,75,94,118,91,99,79,93],
[129,104,136,0,113,126,121,109,102,119],
[103,109,117,98,0,117,105,93,108,104],
[97,72,93,85,94,0,98,80,75,97],
[86,102,120,90,106,113,0,114,77,113],
[112,88,112,102,118,131,97,0,96,102],
[116,105,132,109,103,136,134,115,0,124],
[113,100,118,92,107,114,98,109,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,96,105,118,122,110,104,109,111],
[96,0,106,107,102,107,106,104,106,130],
[115,105,0,120,113,123,121,115,116,121],
[106,104,91,0,106,104,108,104,91,105],
[93,109,98,105,0,102,109,105,98,111],
[89,104,88,107,109,0,108,100,84,98],
[101,105,90,103,102,103,0,89,98,105],
[107,107,96,107,106,111,122,0,102,107],
[102,105,95,120,113,127,113,109,0,105],
[100,81,90,106,100,113,106,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,94,98,90,113,101,106,83],
[106,0,113,112,107,107,101,112,100,99],
[108,98,0,101,105,99,110,100,98,99],
[117,99,110,0,116,111,117,115,110,105],
[113,104,106,95,0,96,102,116,104,107],
[121,104,112,100,115,0,105,108,103,96],
[98,110,101,94,109,106,0,119,105,98],
[110,99,111,96,95,103,92,0,91,89],
[105,111,113,101,107,108,106,120,0,102],
[128,112,112,106,104,115,113,122,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,99,96,99,81,92,97,94],
[104,0,102,99,112,100,84,106,112,96],
[109,109,0,93,110,106,96,93,110,99],
[112,112,118,0,115,119,96,111,120,110],
[115,99,101,96,0,101,90,101,102,95],
[112,111,105,92,110,0,90,105,107,98],
[130,127,115,115,121,121,0,115,124,104],
[119,105,118,100,110,106,96,0,114,101],
[114,99,101,91,109,104,87,97,0,99],
[117,115,112,101,116,113,107,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,100,87,98,99,89,91,83,100],
[126,0,118,108,118,118,118,109,100,108],
[111,93,0,87,98,88,102,96,80,111],
[124,103,124,0,117,106,116,100,102,113],
[113,93,113,94,0,110,102,105,92,102],
[112,93,123,105,101,0,117,87,98,111],
[122,93,109,95,109,94,0,94,101,102],
[120,102,115,111,106,124,117,0,107,115],
[128,111,131,109,119,113,110,104,0,117],
[111,103,100,98,109,100,109,96,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,109,91,98,104,98,102,107,104],
[117,0,133,97,101,108,117,117,128,121],
[102,78,0,97,97,93,91,105,101,100],
[120,114,114,0,98,117,117,106,122,114],
[113,110,114,113,0,103,106,104,116,111],
[107,103,118,94,108,0,97,98,115,109],
[113,94,120,94,105,114,0,114,116,120],
[109,94,106,105,107,113,97,0,117,123],
[104,83,110,89,95,96,95,94,0,103],
[107,90,111,97,100,102,91,88,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,110,99,98,89,108,115,98,108],
[106,0,114,105,111,80,107,119,96,94],
[101,97,0,108,98,89,107,123,80,112],
[112,106,103,0,99,83,101,109,94,87],
[113,100,113,112,0,106,101,111,106,99],
[122,131,122,128,105,0,110,133,122,112],
[103,104,104,110,110,101,0,123,107,103],
[96,92,88,102,100,78,88,0,89,87],
[113,115,131,117,105,89,104,122,0,111],
[103,117,99,124,112,99,108,124,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,130,122,96,116,132,127,118],
[103,0,129,126,104,114,114,135,120,113],
[95,82,0,100,102,95,100,129,96,98],
[81,85,111,0,83,99,123,116,99,88],
[89,107,109,128,0,102,110,122,115,116],
[115,97,116,112,109,0,137,133,118,113],
[95,97,111,88,101,74,0,115,96,96],
[79,76,82,95,89,78,96,0,101,75],
[84,91,115,112,96,93,115,110,0,96],
[93,98,113,123,95,98,115,136,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,118,112,110,107,114,112,103],
[99,0,111,112,117,108,119,116,115,115],
[106,100,0,106,116,107,103,111,111,107],
[93,99,105,0,114,92,106,115,103,105],
[99,94,95,97,0,95,97,113,102,92],
[101,103,104,119,116,0,105,112,114,96],
[104,92,108,105,114,106,0,112,108,97],
[97,95,100,96,98,99,99,0,101,98],
[99,96,100,108,109,97,103,110,0,95],
[108,96,104,106,119,115,114,113,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,117,114,101,110,116,114,120,109],
[115,0,128,117,103,115,116,117,121,120],
[94,83,0,112,104,93,101,103,103,94],
[97,94,99,0,107,98,110,104,129,110],
[110,108,107,104,0,105,121,120,126,114],
[101,96,118,113,106,0,121,120,123,104],
[95,95,110,101,90,90,0,100,100,91],
[97,94,108,107,91,91,111,0,104,93],
[91,90,108,82,85,88,111,107,0,104],
[102,91,117,101,97,107,120,118,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,153,69,75,118,153,75,118,131],
[101,0,176,88,137,163,163,120,137,176],
[58,35,0,43,49,92,49,26,94,56],
[142,123,168,0,120,123,123,88,94,88],
[136,74,162,91,0,117,117,39,88,82],
[93,48,119,88,94,0,93,39,45,82],
[58,48,162,88,94,118,0,39,88,82],
[136,91,185,123,172,172,172,0,172,91],
[93,74,117,117,123,166,123,39,0,82],
[80,35,155,123,129,129,129,120,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,113,106,108,78,93,108,107,101],
[117,0,106,85,116,95,103,122,106,96],
[98,105,0,102,111,95,83,123,99,111],
[105,126,109,0,121,98,126,112,122,113],
[103,95,100,90,0,71,104,104,87,65],
[133,116,116,113,140,0,108,148,131,101],
[118,108,128,85,107,103,0,121,106,80],
[103,89,88,99,107,63,90,0,105,101],
[104,105,112,89,124,80,105,106,0,91],
[110,115,100,98,146,110,131,110,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,122,106,111,98,108,117,112],
[100,0,112,101,137,99,107,128,112,92],
[102,99,0,108,120,99,117,107,116,125],
[89,110,103,0,106,89,112,100,94,110],
[105,74,91,105,0,112,100,117,106,104],
[100,112,112,122,99,0,105,126,126,119],
[113,104,94,99,111,106,0,117,104,101],
[103,83,104,111,94,85,94,0,90,95],
[94,99,95,117,105,85,107,121,0,99],
[99,119,86,101,107,92,110,116,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,100,101,104,99,102,97,98,114],
[100,0,104,101,100,101,104,101,92,106],
[111,107,0,97,105,98,98,100,97,112],
[110,110,114,0,112,101,113,99,110,113],
[107,111,106,99,0,99,104,102,99,110],
[112,110,113,110,112,0,101,101,115,116],
[109,107,113,98,107,110,0,105,103,112],
[114,110,111,112,109,110,106,0,103,112],
[113,119,114,101,112,96,108,108,0,117],
[97,105,99,98,101,95,99,99,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,127,142,41,141,141,117,103,96],
[101,0,127,116,92,116,116,115,101,132],
[84,84,0,39,15,53,77,53,39,46],
[69,95,172,0,53,91,115,38,107,69],
[170,119,196,158,0,115,172,131,93,170],
[70,95,158,120,96,0,119,95,81,120],
[70,95,134,96,39,92,0,69,31,70],
[94,96,158,173,80,116,142,0,173,120],
[108,110,172,104,118,130,180,38,0,134],
[115,79,165,142,41,91,141,91,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,105,95,104,98,101,106,98],
[107,0,100,102,88,98,102,110,107,104],
[100,111,0,109,99,106,101,103,102,112],
[106,109,102,0,105,101,109,109,108,105],
[116,123,112,106,0,110,97,120,119,122],
[107,113,105,110,101,0,101,109,112,111],
[113,109,110,102,114,110,0,103,109,110],
[110,101,108,102,91,102,108,0,113,105],
[105,104,109,103,92,99,102,98,0,106],
[113,107,99,106,89,100,101,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,98,106,100,102,104,110,104,109],
[107,0,111,105,107,111,104,115,107,116],
[113,100,0,98,95,101,99,107,106,106],
[105,106,113,0,108,108,118,111,106,115],
[111,104,116,103,0,112,114,118,113,111],
[109,100,110,103,99,0,109,105,111,105],
[107,107,112,93,97,102,0,104,104,101],
[101,96,104,100,93,106,107,0,104,103],
[107,104,105,105,98,100,107,107,0,96],
[102,95,105,96,100,106,110,108,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,106,117,116,100,102,87,108,112],
[102,0,99,89,101,98,94,96,98,95],
[105,112,0,121,102,99,100,106,95,99],
[94,122,90,0,104,94,99,111,101,96],
[95,110,109,107,0,71,109,103,86,107],
[111,113,112,117,140,0,107,110,101,122],
[109,117,111,112,102,104,0,108,98,102],
[124,115,105,100,108,101,103,0,82,115],
[103,113,116,110,125,110,113,129,0,105],
[99,116,112,115,104,89,109,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,87,108,98,111,120,142,77],
[105,0,122,74,123,90,111,117,145,69],
[100,89,0,60,80,84,118,115,120,107],
[124,137,151,0,119,105,126,136,142,112],
[103,88,131,92,0,114,125,114,145,89],
[113,121,127,106,97,0,137,111,137,111],
[100,100,93,85,86,74,0,119,98,73],
[91,94,96,75,97,100,92,0,109,107],
[69,66,91,69,66,74,113,102,0,56],
[134,142,104,99,122,100,138,104,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,115,122,113,109,107,118,126,119],
[112,0,119,127,117,101,97,133,101,119],
[96,92,0,116,109,105,107,125,106,124],
[89,84,95,0,117,111,97,115,121,132],
[98,94,102,94,0,85,84,97,93,123],
[102,110,106,100,126,0,112,113,115,146],
[104,114,104,114,127,99,0,136,106,146],
[93,78,86,96,114,98,75,0,103,121],
[85,110,105,90,118,96,105,108,0,128],
[92,92,87,79,88,65,65,90,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,122,107,102,112,123,113,107,103],
[98,0,114,106,103,112,110,111,122,102],
[89,97,0,88,106,102,116,103,111,104],
[104,105,123,0,120,106,115,108,126,110],
[109,108,105,91,0,111,107,112,113,105],
[99,99,109,105,100,0,110,114,96,101],
[88,101,95,96,104,101,0,109,106,98],
[98,100,108,103,99,97,102,0,107,101],
[104,89,100,85,98,115,105,104,0,91],
[108,109,107,101,106,110,113,110,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,123,103,142,116,101,131,116,131],
[84,0,115,124,79,108,100,128,115,92],
[88,96,0,125,87,94,80,109,116,102],
[108,87,86,0,96,93,99,130,99,108],
[69,132,124,115,0,97,98,121,111,118],
[95,103,117,118,114,0,123,118,122,126],
[110,111,131,112,113,88,0,105,114,121],
[80,83,102,81,90,93,106,0,72,90],
[95,96,95,112,100,89,97,139,0,115],
[80,119,109,103,93,85,90,121,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,104,107,101,112,117,103,106,114],
[111,0,96,100,94,109,104,104,89,105],
[107,115,0,107,86,109,111,99,91,116],
[104,111,104,0,104,117,112,109,103,120],
[110,117,125,107,0,113,122,101,109,112],
[99,102,102,94,98,0,113,97,98,115],
[94,107,100,99,89,98,0,92,94,92],
[108,107,112,102,110,114,119,0,94,116],
[105,122,120,108,102,113,117,117,0,109],
[97,106,95,91,99,96,119,95,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,88,99,85,117,102,127,138,118],
[108,0,92,91,107,103,116,131,101,124],
[123,119,0,140,94,123,95,101,132,122],
[112,120,71,0,94,117,90,125,97,124],
[126,104,117,117,0,80,79,103,131,105],
[94,108,88,94,131,0,101,145,114,110],
[109,95,116,121,132,110,0,125,137,158],
[84,80,110,86,108,66,86,0,95,109],
[73,110,79,114,80,97,74,116,0,103],
[93,87,89,87,106,101,53,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,105,103,100,97,127,111,106,118],
[93,0,125,100,116,88,109,125,109,113],
[106,86,0,102,91,89,118,103,92,112],
[108,111,109,0,111,103,126,105,98,107],
[111,95,120,100,0,97,113,108,94,130],
[114,123,122,108,114,0,113,102,103,109],
[84,102,93,85,98,98,0,112,100,100],
[100,86,108,106,103,109,99,0,106,119],
[105,102,119,113,117,108,111,105,0,109],
[93,98,99,104,81,102,111,92,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,104,119,117,118,104,111,108,101],
[106,0,103,112,110,117,112,112,110,113],
[107,108,0,114,106,117,106,108,107,99],
[92,99,97,0,101,98,105,106,109,99],
[94,101,105,110,0,100,114,104,103,94],
[93,94,94,113,111,0,108,98,101,92],
[107,99,105,106,97,103,0,99,106,97],
[100,99,103,105,107,113,112,0,101,107],
[103,101,104,102,108,110,105,110,0,103],
[110,98,112,112,117,119,114,104,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,79,93,91,90,114,111,86],
[104,0,96,93,103,103,90,104,108,99],
[107,115,0,94,107,106,75,107,95,96],
[132,118,117,0,134,126,113,117,141,97],
[118,108,104,77,0,100,90,95,103,101],
[120,108,105,85,111,0,100,125,90,83],
[121,121,136,98,121,111,0,121,149,109],
[97,107,104,94,116,86,90,0,113,98],
[100,103,116,70,108,121,62,98,0,98],
[125,112,115,114,110,128,102,113,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,108,107,117,101,115,117,98,106],
[108,0,106,96,118,108,111,106,101,104],
[103,105,0,92,113,113,118,113,99,116],
[104,115,119,0,112,111,122,122,107,113],
[94,93,98,99,0,107,108,97,96,110],
[110,103,98,100,104,0,103,110,95,98],
[96,100,93,89,103,108,0,98,91,91],
[94,105,98,89,114,101,113,0,92,103],
[113,110,112,104,115,116,120,119,0,113],
[105,107,95,98,101,113,120,108,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,98,100,116,105,108,120,117,122],
[101,0,83,94,103,112,104,100,111,105],
[113,128,0,107,103,112,122,106,121,119],
[111,117,104,0,97,116,89,126,112,101],
[95,108,108,114,0,117,83,107,121,122],
[106,99,99,95,94,0,81,138,113,113],
[103,107,89,122,128,130,0,105,119,127],
[91,111,105,85,104,73,106,0,111,94],
[94,100,90,99,90,98,92,100,0,112],
[89,106,92,110,89,98,84,117,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,102,134,101,83,128,116,122,102],
[80,0,98,100,90,91,100,95,98,87],
[109,113,0,113,107,73,97,120,109,99],
[77,111,98,0,70,80,91,100,89,80],
[110,121,104,141,0,121,117,129,124,122],
[128,120,138,131,90,0,125,131,127,126],
[83,111,114,120,94,86,0,102,73,111],
[95,116,91,111,82,80,109,0,104,100],
[89,113,102,122,87,84,138,107,0,115],
[109,124,112,131,89,85,100,111,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,94,129,106,107,96,87,92,94],
[99,0,90,141,106,73,94,95,99,104],
[117,121,0,138,123,107,110,96,115,127],
[82,70,73,0,112,74,93,73,94,80],
[105,105,88,99,0,84,98,81,79,92],
[104,138,104,137,127,0,102,101,104,101],
[115,117,101,118,113,109,0,118,101,111],
[124,116,115,138,130,110,93,0,98,100],
[119,112,96,117,132,107,110,113,0,99],
[117,107,84,131,119,110,100,111,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,99,95,100,100,101,118,120,108],
[105,0,106,107,111,106,108,112,117,113],
[112,105,0,127,107,97,108,117,119,96],
[116,104,84,0,105,97,94,107,118,95],
[111,100,104,106,0,90,102,101,115,90],
[111,105,114,114,121,0,99,114,107,103],
[110,103,103,117,109,112,0,119,120,103],
[93,99,94,104,110,97,92,0,113,98],
[91,94,92,93,96,104,91,98,0,93],
[103,98,115,116,121,108,108,113,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,102,107,113,109,114,108,111],
[107,0,105,107,108,96,101,104,100,108],
[99,106,0,90,102,89,96,100,97,94],
[109,104,121,0,123,105,107,118,107,114],
[104,103,109,88,0,109,111,114,111,110],
[98,115,122,106,102,0,113,111,105,109],
[102,110,115,104,100,98,0,98,107,103],
[97,107,111,93,97,100,113,0,116,108],
[103,111,114,104,100,106,104,95,0,102],
[100,103,117,97,101,102,108,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,88,89,111,90,87,94,93,86],
[127,0,104,115,122,118,114,101,140,110],
[123,107,0,114,109,101,110,101,110,113],
[122,96,97,0,113,108,96,111,103,93],
[100,89,102,98,0,108,90,91,101,90],
[121,93,110,103,103,0,104,92,115,110],
[124,97,101,115,121,107,0,93,112,107],
[117,110,110,100,120,119,118,0,129,120],
[118,71,101,108,110,96,99,82,0,100],
[125,101,98,118,121,101,104,91,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,98,112,86,109,101,77,103,102],
[139,0,125,133,131,151,117,101,117,108],
[113,86,0,118,128,138,114,110,85,94],
[99,78,93,0,107,123,81,78,92,115],
[125,80,83,104,0,118,111,99,114,105],
[102,60,73,88,93,0,83,76,99,106],
[110,94,97,130,100,128,0,100,84,108],
[134,110,101,133,112,135,111,0,98,129],
[108,94,126,119,97,112,127,113,0,116],
[109,103,117,96,106,105,103,82,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,115,136,111,103,81,99,116,96],
[97,0,116,116,93,100,86,90,109,119],
[96,95,0,108,93,110,86,115,98,92],
[75,95,103,0,93,80,79,91,109,101],
[100,118,118,118,0,109,106,113,112,115],
[108,111,101,131,102,0,93,108,118,113],
[130,125,125,132,105,118,0,106,131,97],
[112,121,96,120,98,103,105,0,111,118],
[95,102,113,102,99,93,80,100,0,116],
[115,92,119,110,96,98,114,93,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,115,113,121,101,116,117,117,110],
[89,0,89,96,98,87,98,102,96,98],
[96,122,0,109,109,99,112,108,111,110],
[98,115,102,0,106,98,105,105,104,95],
[90,113,102,105,0,94,97,104,103,99],
[110,124,112,113,117,0,108,114,118,105],
[95,113,99,106,114,103,0,104,104,105],
[94,109,103,106,107,97,107,0,108,107],
[94,115,100,107,108,93,107,103,0,96],
[101,113,101,116,112,106,106,104,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,91,91,106,100,105,96,112,110],
[113,0,97,94,86,103,102,84,106,107],
[120,114,0,121,106,117,114,95,126,110],
[120,117,90,0,89,95,108,89,113,106],
[105,125,105,122,0,105,108,107,110,113],
[111,108,94,116,106,0,114,108,115,122],
[106,109,97,103,103,97,0,89,118,111],
[115,127,116,122,104,103,122,0,115,118],
[99,105,85,98,101,96,93,96,0,111],
[101,104,101,105,98,89,100,93,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,120,90,99,107,115,100,116,103],
[101,0,127,106,111,121,108,119,118,111],
[91,84,0,76,82,89,97,94,75,97],
[121,105,135,0,109,101,101,107,113,131],
[112,100,129,102,0,100,99,101,106,118],
[104,90,122,110,111,0,119,120,104,128],
[96,103,114,110,112,92,0,95,94,107],
[111,92,117,104,110,91,116,0,106,117],
[95,93,136,98,105,107,117,105,0,128],
[108,100,114,80,93,83,104,94,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,142,127,145,128,130,131,137,106],
[106,0,124,129,104,107,119,114,136,115],
[69,87,0,102,83,95,97,77,96,95],
[84,82,109,0,102,103,100,113,112,81],
[66,107,128,109,0,123,134,103,114,106],
[83,104,116,108,88,0,107,95,133,98],
[81,92,114,111,77,104,0,104,100,100],
[80,97,134,98,108,116,107,0,107,102],
[74,75,115,99,97,78,111,104,0,81],
[105,96,116,130,105,113,111,109,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,100,118,105,120,114,146,139,139],
[85,0,103,99,96,121,101,130,104,113],
[111,108,0,115,121,118,103,128,129,137],
[93,112,96,0,88,99,96,100,118,104],
[106,115,90,123,0,86,88,111,124,111],
[91,90,93,112,125,0,103,110,105,94],
[97,110,108,115,123,108,0,128,108,116],
[65,81,83,111,100,101,83,0,119,99],
[72,107,82,93,87,106,103,92,0,91],
[72,98,74,107,100,117,95,112,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,103,118,105,108,110,108,104,123],
[92,0,91,106,95,105,109,99,94,101],
[108,120,0,116,110,116,111,94,111,109],
[93,105,95,0,100,99,103,91,104,102],
[106,116,101,111,0,106,96,101,98,102],
[103,106,95,112,105,0,97,84,103,98],
[101,102,100,108,115,114,0,99,107,113],
[103,112,117,120,110,127,112,0,117,115],
[107,117,100,107,113,108,104,94,0,105],
[88,110,102,109,109,113,98,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,100,107,109,94,103,99,95,104],
[107,0,103,100,102,98,91,90,102,102],
[111,108,0,111,108,109,101,98,97,108],
[104,111,100,0,106,98,102,98,96,107],
[102,109,103,105,0,96,95,102,101,101],
[117,113,102,113,115,0,106,107,104,107],
[108,120,110,109,116,105,0,108,117,108],
[112,121,113,113,109,104,103,0,103,115],
[116,109,114,115,110,107,94,108,0,109],
[107,109,103,104,110,104,103,96,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,98,88,107,114,93,99,92,110],
[111,0,98,112,120,98,103,107,118,123],
[113,113,0,91,118,97,92,134,92,120],
[123,99,120,0,122,110,121,136,128,126],
[104,91,93,89,0,94,101,90,101,116],
[97,113,114,101,117,0,110,116,93,122],
[118,108,119,90,110,101,0,98,91,113],
[112,104,77,75,121,95,113,0,95,101],
[119,93,119,83,110,118,120,116,0,121],
[101,88,91,85,95,89,98,110,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,59,46,116,90,88,93,91,38],
[93,0,111,62,90,131,66,103,70,61],
[152,100,0,97,149,142,107,110,129,116],
[165,149,114,0,153,126,90,160,108,112],
[95,121,62,58,0,106,70,94,51,57],
[121,80,69,85,105,0,95,101,72,83],
[123,145,104,121,141,116,0,186,103,102],
[118,108,101,51,117,110,25,0,58,76],
[120,141,82,103,160,139,108,153,0,61],
[173,150,95,99,154,128,109,135,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,112,114,103,122,113,103,108,108],
[104,0,111,111,108,136,114,115,113,112],
[99,100,0,104,106,105,106,90,97,101],
[97,100,107,0,102,115,112,99,109,107],
[108,103,105,109,0,126,122,109,119,108],
[89,75,106,96,85,0,93,80,96,93],
[98,97,105,99,89,118,0,82,111,115],
[108,96,121,112,102,131,129,0,124,117],
[103,98,114,102,92,115,100,87,0,107],
[103,99,110,104,103,118,96,94,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,97,95,88,88,95,81,105,109],
[132,0,103,110,113,112,110,111,124,102],
[114,108,0,109,102,112,109,102,104,106],
[116,101,102,0,101,111,93,91,112,112],
[123,98,109,110,0,104,112,99,103,105],
[123,99,99,100,107,0,110,99,112,99],
[116,101,102,118,99,101,0,101,107,109],
[130,100,109,120,112,112,110,0,113,119],
[106,87,107,99,108,99,104,98,0,103],
[102,109,105,99,106,112,102,92,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,127,102,107,108,112,114,111,102],
[100,0,121,94,96,89,102,105,95,103],
[84,90,0,73,78,99,101,91,99,84],
[109,117,138,0,103,105,115,106,124,125],
[104,115,133,108,0,103,111,110,106,119],
[103,122,112,106,108,0,128,110,109,115],
[99,109,110,96,100,83,0,106,107,113],
[97,106,120,105,101,101,105,0,95,113],
[100,116,112,87,105,102,104,116,0,110],
[109,108,127,86,92,96,98,98,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,111,102,119,107,117,104,108,108],
[117,0,132,102,135,113,99,129,114,93],
[100,79,0,96,109,122,86,109,86,78],
[109,109,115,0,123,102,109,111,93,104],
[92,76,102,88,0,90,84,101,88,81],
[104,98,89,109,121,0,97,106,93,104],
[94,112,125,102,127,114,0,100,96,100],
[107,82,102,100,110,105,111,0,87,75],
[103,97,125,118,123,118,115,124,0,97],
[103,118,133,107,130,107,111,136,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,103,80,74,64,97,100,86,115],
[121,0,134,87,82,104,112,97,99,98],
[108,77,0,99,60,65,84,99,85,76],
[131,124,112,0,86,126,122,119,128,119],
[137,129,151,125,0,100,117,129,125,125],
[147,107,146,85,111,0,112,118,122,128],
[114,99,127,89,94,99,0,81,119,130],
[111,114,112,92,82,93,130,0,88,122],
[125,112,126,83,86,89,92,123,0,107],
[96,113,135,92,86,83,81,89,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,86,92,115,94,106,84,93,88],
[104,0,103,113,94,123,97,99,108,101],
[125,108,0,128,115,119,131,114,103,117],
[119,98,83,0,122,113,114,109,108,122],
[96,117,96,89,0,107,105,98,92,94],
[117,88,92,98,104,0,118,104,103,112],
[105,114,80,97,106,93,0,85,96,106],
[127,112,97,102,113,107,126,0,103,117],
[118,103,108,103,119,108,115,108,0,121],
[123,110,94,89,117,99,105,94,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,100,165,122,113,103,134,105,110],
[98,0,98,116,95,107,98,114,122,107],
[111,113,0,173,132,121,117,149,124,94],
[46,95,38,0,108,74,69,110,73,67],
[89,116,79,103,0,93,88,106,97,80],
[98,104,90,137,118,0,121,135,116,90],
[108,113,94,142,123,90,0,133,123,92],
[77,97,62,101,105,76,78,0,103,92],
[106,89,87,138,114,95,88,108,0,73],
[101,104,117,144,131,121,119,119,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,97,110,112,115,98,94,102,116],
[115,0,104,116,101,128,118,101,114,126],
[114,107,0,113,100,114,110,114,110,130],
[101,95,98,0,91,115,97,101,106,116],
[99,110,111,120,0,129,104,98,102,117],
[96,83,97,96,82,0,89,98,92,119],
[113,93,101,114,107,122,0,117,109,124],
[117,110,97,110,113,113,94,0,100,118],
[109,97,101,105,109,119,102,111,0,116],
[95,85,81,95,94,92,87,93,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,120,113,103,107,108,102,104,100],
[96,0,106,103,100,92,118,108,126,109],
[91,105,0,96,89,94,110,92,97,118],
[98,108,115,0,110,99,120,88,101,109],
[108,111,122,101,0,105,115,98,127,105],
[104,119,117,112,106,0,116,93,111,113],
[103,93,101,91,96,95,0,104,105,106],
[109,103,119,123,113,118,107,0,124,122],
[107,85,114,110,84,100,106,87,0,98],
[111,102,93,102,106,98,105,89,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,114,130,147,91,91,108,91,41],
[144,0,145,63,121,120,145,104,64,120],
[97,66,0,105,58,90,91,57,40,16],
[81,148,106,0,98,122,132,82,65,97],
[64,90,153,113,0,130,91,24,24,40],
[120,91,121,89,81,0,91,81,40,0],
[120,66,120,79,120,120,0,120,79,120],
[103,107,154,129,187,130,91,0,41,40],
[120,147,171,146,187,171,132,170,0,97],
[170,91,195,114,171,211,91,171,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,114,112,109,95,100,131,92,106],
[114,0,111,100,124,102,103,108,87,110],
[97,100,0,95,117,103,106,117,99,103],
[99,111,116,0,137,103,106,114,113,122],
[102,87,94,74,0,92,101,112,106,100],
[116,109,108,108,119,0,106,102,111,118],
[111,108,105,105,110,105,0,112,110,110],
[80,103,94,97,99,109,99,0,103,110],
[119,124,112,98,105,100,101,108,0,117],
[105,101,108,89,111,93,101,101,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,97,111,90,99,119,107,103],
[103,0,103,106,122,100,102,120,115,128],
[105,108,0,104,122,105,105,119,112,110],
[114,105,107,0,122,108,91,116,106,129],
[100,89,89,89,0,91,91,101,98,109],
[121,111,106,103,120,0,117,130,118,124],
[112,109,106,120,120,94,0,123,108,136],
[92,91,92,95,110,81,88,0,101,108],
[104,96,99,105,113,93,103,110,0,112],
[108,83,101,82,102,87,75,103,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,77,90,94,84,90,105,78,87],
[120,0,97,123,90,99,95,110,83,94],
[134,114,0,110,115,123,122,103,103,125],
[121,88,101,0,107,105,97,113,82,96],
[117,121,96,104,0,89,129,120,110,111],
[127,112,88,106,122,0,107,117,95,79],
[121,116,89,114,82,104,0,124,98,114],
[106,101,108,98,91,94,87,0,94,92],
[133,128,108,129,101,116,113,117,0,102],
[124,117,86,115,100,132,97,119,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,105,88,83,100,85,80,84,92],
[124,0,120,85,118,107,87,103,91,92],
[106,91,0,101,99,105,79,89,93,82],
[123,126,110,0,126,120,89,99,99,95],
[128,93,112,85,0,116,94,98,96,113],
[111,104,106,91,95,0,69,99,79,96],
[126,124,132,122,117,142,0,104,106,137],
[131,108,122,112,113,112,107,0,101,123],
[127,120,118,112,115,132,105,110,0,122],
[119,119,129,116,98,115,74,88,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,71,107,137,105,116,105,90,81],
[130,0,107,114,137,99,151,154,116,125],
[140,104,0,99,154,97,152,159,145,106],
[104,97,112,0,125,96,126,150,110,102],
[74,74,57,86,0,74,138,108,94,70],
[106,112,114,115,137,0,138,148,124,105],
[95,60,59,85,73,73,0,100,99,60],
[106,57,52,61,103,63,111,0,73,39],
[121,95,66,101,117,87,112,138,0,88],
[130,86,105,109,141,106,151,172,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,112,103,104,102,104,95,97,112],
[98,0,110,107,111,98,92,95,90,96],
[99,101,0,93,96,100,100,92,94,109],
[108,104,118,0,107,108,115,114,95,110],
[107,100,115,104,0,94,110,98,104,95],
[109,113,111,103,117,0,110,103,102,99],
[107,119,111,96,101,101,0,97,106,115],
[116,116,119,97,113,108,114,0,107,103],
[114,121,117,116,107,109,105,104,0,114],
[99,115,102,101,116,112,96,108,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,96,99,97,95,102,108,110,114],
[96,0,94,101,105,93,89,106,94,105],
[115,117,0,113,96,100,112,111,116,110],
[112,110,98,0,96,87,97,103,102,106],
[114,106,115,115,0,109,109,102,113,121],
[116,118,111,124,102,0,113,115,110,116],
[109,122,99,114,102,98,0,107,104,111],
[103,105,100,108,109,96,104,0,101,109],
[101,117,95,109,98,101,107,110,0,109],
[97,106,101,105,90,95,100,102,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,102,108,113,107,105,106,107,98],
[101,0,94,97,90,113,102,105,90,93],
[109,117,0,99,109,107,103,115,111,106],
[103,114,112,0,111,112,112,112,113,101],
[98,121,102,100,0,105,93,96,105,96],
[104,98,104,99,106,0,97,104,112,101],
[106,109,108,99,118,114,0,102,100,111],
[105,106,96,99,115,107,109,0,104,99],
[104,121,100,98,106,99,111,107,0,102],
[113,118,105,110,115,110,100,112,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,106,143,113,85,103,115,113,133],
[90,0,103,115,106,109,105,96,104,135],
[105,108,0,119,117,101,103,112,108,117],
[68,96,92,0,104,76,94,84,89,112],
[98,105,94,107,0,110,94,97,111,130],
[126,102,110,135,101,0,92,110,118,133],
[108,106,108,117,117,119,0,116,93,137],
[96,115,99,127,114,101,95,0,101,116],
[98,107,103,122,100,93,118,110,0,131],
[78,76,94,99,81,78,74,95,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,108,110,105,97,123,111,105,101],
[102,0,93,107,101,111,115,103,94,100],
[103,118,0,118,115,116,116,106,99,97],
[101,104,93,0,107,110,97,96,103,111],
[106,110,96,104,0,101,102,111,108,102],
[114,100,95,101,110,0,102,118,93,101],
[88,96,95,114,109,109,0,97,96,105],
[100,108,105,115,100,93,114,0,95,113],
[106,117,112,108,103,118,115,116,0,116],
[110,111,114,100,109,110,106,98,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,108,108,111,117,103,100,129,115],
[94,0,124,119,118,114,111,95,111,102],
[103,87,0,101,99,93,103,90,103,93],
[103,92,110,0,117,112,90,96,116,100],
[100,93,112,94,0,101,109,89,113,98],
[94,97,118,99,110,0,104,96,108,113],
[108,100,108,121,102,107,0,108,129,117],
[111,116,121,115,122,115,103,0,130,114],
[82,100,108,95,98,103,82,81,0,99],
[96,109,118,111,113,98,94,97,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,104,99,107,94,90,105,100],
[98,0,100,98,98,107,105,90,86,89],
[104,111,0,98,102,104,100,100,104,94],
[107,113,113,0,106,104,96,101,104,96],
[112,113,109,105,0,112,96,85,104,101],
[104,104,107,107,99,0,103,100,98,96],
[117,106,111,115,115,108,0,109,106,104],
[121,121,111,110,126,111,102,0,109,108],
[106,125,107,107,107,113,105,102,0,100],
[111,122,117,115,110,115,107,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,122,108,100,97,102,96,100],
[107,0,107,104,110,119,105,108,98,92],
[108,104,0,110,104,106,97,106,97,95],
[89,107,101,0,98,99,88,104,88,90],
[103,101,107,113,0,100,100,110,110,92],
[111,92,105,112,111,0,99,121,101,108],
[114,106,114,123,111,112,0,120,107,99],
[109,103,105,107,101,90,91,0,95,92],
[115,113,114,123,101,110,104,116,0,102],
[111,119,116,121,119,103,112,119,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,116,106,111,103,128,106,100,102],
[105,0,115,103,111,104,119,101,109,109],
[95,96,0,108,103,89,116,75,98,90],
[105,108,103,0,107,104,104,94,103,104],
[100,100,108,104,0,105,124,93,108,93],
[108,107,122,107,106,0,127,91,109,101],
[83,92,95,107,87,84,0,87,83,91],
[105,110,136,117,118,120,124,0,107,108],
[111,102,113,108,103,102,128,104,0,98],
[109,102,121,107,118,110,120,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,124,98,111,114,96,117,103,107],
[85,0,123,121,107,98,98,110,96,108],
[87,88,0,99,101,77,93,91,74,85],
[113,90,112,0,110,101,110,104,71,119],
[100,104,110,101,0,102,94,96,89,102],
[97,113,134,110,109,0,118,107,89,117],
[115,113,118,101,117,93,0,128,114,104],
[94,101,120,107,115,104,83,0,98,111],
[108,115,137,140,122,122,97,113,0,110],
[104,103,126,92,109,94,107,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,101,112,104,111,114,112,96,114],
[120,0,113,126,99,125,120,107,105,121],
[110,98,0,117,108,118,113,105,86,109],
[99,85,94,0,98,104,97,100,90,91],
[107,112,103,113,0,115,125,101,108,113],
[100,86,93,107,96,0,108,111,93,112],
[97,91,98,114,86,103,0,92,89,95],
[99,104,106,111,110,100,119,0,107,113],
[115,106,125,121,103,118,122,104,0,111],
[97,90,102,120,98,99,116,98,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,87,93,92,91,107,99,96,99],
[107,0,98,109,110,96,104,98,114,110],
[124,113,0,101,114,105,121,107,111,108],
[118,102,110,0,105,106,103,104,111,99],
[119,101,97,106,0,109,112,105,106,105],
[120,115,106,105,102,0,109,106,109,108],
[104,107,90,108,99,102,0,96,108,107],
[112,113,104,107,106,105,115,0,111,105],
[115,97,100,100,105,102,103,100,0,88],
[112,101,103,112,106,103,104,106,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,101,96,110,151,97,103,136,126],
[65,0,48,78,102,75,75,109,98,106],
[110,163,0,93,129,138,152,145,150,163],
[115,133,118,0,110,114,107,116,115,99],
[101,109,82,101,0,93,61,132,116,98],
[60,136,73,97,118,0,101,111,112,102],
[114,136,59,104,150,110,0,128,120,107],
[108,102,66,95,79,100,83,0,95,113],
[75,113,61,96,95,99,91,116,0,149],
[85,105,48,112,113,109,104,98,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,91,124,121,102,107,100,108],
[108,0,98,102,116,116,97,101,107,96],
[109,113,0,114,118,111,111,111,112,102],
[120,109,97,0,110,107,108,98,104,104],
[87,95,93,101,0,109,85,100,94,82],
[90,95,100,104,102,0,110,99,92,98],
[109,114,100,103,126,101,0,118,110,110],
[104,110,100,113,111,112,93,0,107,91],
[111,104,99,107,117,119,101,104,0,110],
[103,115,109,107,129,113,101,120,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,86,86,109,87,108,97,97,91],
[106,0,99,132,104,90,113,103,83,98],
[125,112,0,111,100,115,114,119,112,100],
[125,79,100,0,95,91,110,104,75,89],
[102,107,111,116,0,102,136,109,101,106],
[124,121,96,120,109,0,115,123,100,92],
[103,98,97,101,75,96,0,91,87,90],
[114,108,92,107,102,88,120,0,99,88],
[114,128,99,136,110,111,124,112,0,96],
[120,113,111,122,105,119,121,123,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,84,68,84,93,139,78,119,85],
[127,0,89,112,121,81,131,102,111,116],
[127,122,0,121,124,102,131,102,109,96],
[143,99,90,0,95,95,121,107,97,98],
[127,90,87,116,0,86,140,88,118,91],
[118,130,109,116,125,0,105,95,108,98],
[72,80,80,90,71,106,0,95,111,63],
[133,109,109,104,123,116,116,0,105,122],
[92,100,102,114,93,103,100,106,0,74],
[126,95,115,113,120,113,148,89,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,109,110,99,119,108,124,115,103],
[78,0,107,82,97,94,102,123,99,90],
[102,104,0,99,88,98,102,105,106,89],
[101,129,112,0,101,95,99,113,109,92],
[112,114,123,110,0,103,99,109,104,97],
[92,117,113,116,108,0,102,126,110,107],
[103,109,109,112,112,109,0,115,102,97],
[87,88,106,98,102,85,96,0,85,84],
[96,112,105,102,107,101,109,126,0,92],
[108,121,122,119,114,104,114,127,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,100,103,102,111,107,98,98,121],
[99,0,101,108,111,111,113,96,105,122],
[111,110,0,109,111,118,103,100,114,115],
[108,103,102,0,114,118,94,97,100,121],
[109,100,100,97,0,118,98,102,102,111],
[100,100,93,93,93,0,97,96,97,108],
[104,98,108,117,113,114,0,113,90,122],
[113,115,111,114,109,115,98,0,101,116],
[113,106,97,111,109,114,121,110,0,122],
[90,89,96,90,100,103,89,95,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,127,96,110,110,119,107,120,94],
[114,0,120,122,110,117,128,119,136,100],
[84,91,0,92,96,110,105,104,117,90],
[115,89,119,0,112,117,113,113,146,87],
[101,101,115,99,0,96,112,100,102,87],
[101,94,101,94,115,0,97,107,121,93],
[92,83,106,98,99,114,0,112,110,94],
[104,92,107,98,111,104,99,0,116,109],
[91,75,94,65,109,90,101,95,0,83],
[117,111,121,124,124,118,117,102,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,99,114,100,105,117,104,142,118],
[113,0,114,91,92,102,95,97,121,115],
[112,97,0,117,121,111,124,113,139,114],
[97,120,94,0,105,114,116,112,132,118],
[111,119,90,106,0,99,113,102,117,113],
[106,109,100,97,112,0,106,103,119,103],
[94,116,87,95,98,105,0,95,105,94],
[107,114,98,99,109,108,116,0,133,108],
[69,90,72,79,94,92,106,78,0,88],
[93,96,97,93,98,108,117,103,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,73,106,82,138,117,97,115,112],
[92,0,58,136,76,150,117,82,94,97],
[138,153,0,139,91,152,132,138,131,162],
[105,75,72,0,129,117,132,87,90,82],
[129,135,120,82,0,105,141,105,120,136],
[73,61,59,94,106,0,80,128,76,68],
[94,94,79,79,70,131,0,100,96,135],
[114,129,73,124,106,83,111,0,74,99],
[96,117,80,121,91,135,115,137,0,115],
[99,114,49,129,75,143,76,112,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,115,107,104,102,118,101,101,100],
[93,0,98,97,94,88,106,75,98,108],
[96,113,0,99,98,89,107,69,104,103],
[104,114,112,0,93,109,114,87,115,110],
[107,117,113,118,0,113,108,88,109,121],
[109,123,122,102,98,0,122,108,109,111],
[93,105,104,97,103,89,0,81,97,89],
[110,136,142,124,123,103,130,0,124,124],
[110,113,107,96,102,102,114,87,0,109],
[111,103,108,101,90,100,122,87,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,109,111,119,118,106,111,108],
[107,0,113,111,102,104,129,99,101,114],
[102,98,0,105,105,130,120,119,109,113],
[102,100,106,0,97,113,103,113,106,107],
[100,109,106,114,0,117,116,114,100,128],
[92,107,81,98,94,0,101,106,106,107],
[93,82,91,108,95,110,0,95,84,105],
[105,112,92,98,97,105,116,0,102,112],
[100,110,102,105,111,105,127,109,0,109],
[103,97,98,104,83,104,106,99,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,114,107,110,126,117,115,96,103],
[94,0,111,100,86,132,117,98,84,112],
[97,100,0,125,120,121,113,103,87,129],
[104,111,86,0,98,113,107,98,82,94],
[101,125,91,113,0,118,110,112,106,117],
[85,79,90,98,93,0,101,95,76,86],
[94,94,98,104,101,110,0,73,73,96],
[96,113,108,113,99,116,138,0,104,105],
[115,127,124,129,105,135,138,107,0,116],
[108,99,82,117,94,125,115,106,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,114,101,95,102,95,105,97],
[106,0,102,113,95,101,117,96,108,89],
[102,109,0,108,101,113,103,92,113,93],
[97,98,103,0,114,92,92,103,99,92],
[110,116,110,97,0,94,106,98,109,110],
[116,110,98,119,117,0,108,114,116,100],
[109,94,108,119,105,103,0,109,111,95],
[116,115,119,108,113,97,102,0,102,102],
[106,103,98,112,102,95,100,109,0,93],
[114,122,118,119,101,111,116,109,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,120,109,118,109,90,101,85,101],
[103,0,123,110,120,118,82,95,107,108],
[91,88,0,111,117,103,99,111,104,88],
[102,101,100,0,97,87,83,97,89,72],
[93,91,94,114,0,91,105,103,103,93],
[102,93,108,124,120,0,123,109,123,119],
[121,129,112,128,106,88,0,104,113,89],
[110,116,100,114,108,102,107,0,137,102],
[126,104,107,122,108,88,98,74,0,83],
[110,103,123,139,118,92,122,109,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,100,110,110,113,102,116,110,105],
[90,0,100,100,98,99,90,98,96,100],
[111,111,0,104,114,92,88,104,105,93],
[101,111,107,0,116,103,113,120,110,105],
[101,113,97,95,0,105,93,100,101,98],
[98,112,119,108,106,0,105,102,97,102],
[109,121,123,98,118,106,0,114,110,106],
[95,113,107,91,111,109,97,0,108,101],
[101,115,106,101,110,114,101,103,0,107],
[106,111,118,106,113,109,105,110,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,97,115,127,119,111,113,106,111],
[95,0,81,89,98,104,100,76,87,96],
[114,130,0,119,130,116,102,92,118,101],
[96,122,92,0,124,115,102,98,104,98],
[84,113,81,87,0,106,83,88,96,96],
[92,107,95,96,105,0,103,98,93,93],
[100,111,109,109,128,108,0,90,109,115],
[98,135,119,113,123,113,121,0,112,98],
[105,124,93,107,115,118,102,99,0,100],
[100,115,110,113,115,118,96,113,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,112,110,113,113,121,99,99,110],
[93,0,108,113,114,107,116,97,110,121],
[99,103,0,102,105,94,111,97,104,109],
[101,98,109,0,96,114,98,99,87,98],
[98,97,106,115,0,113,115,107,97,102],
[98,104,117,97,98,0,110,100,97,111],
[90,95,100,113,96,101,0,109,96,102],
[112,114,114,112,104,111,102,0,97,105],
[112,101,107,124,114,114,115,114,0,103],
[101,90,102,113,109,100,109,106,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,101,98,87,96,97,86,99,111],
[124,0,113,106,97,113,110,107,106,115],
[110,98,0,102,98,107,102,97,108,116],
[113,105,109,0,107,105,108,103,102,112],
[124,114,113,104,0,109,117,100,117,121],
[115,98,104,106,102,0,113,101,108,113],
[114,101,109,103,94,98,0,110,106,112],
[125,104,114,108,111,110,101,0,115,104],
[112,105,103,109,94,103,105,96,0,116],
[100,96,95,99,90,98,99,107,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,117,114,113,113,110,107,105],
[101,0,101,115,97,106,112,101,115,109],
[106,110,0,121,108,121,124,105,109,118],
[94,96,90,0,97,92,103,87,106,115],
[97,114,103,114,0,120,116,111,107,112],
[98,105,90,119,91,0,118,109,106,108],
[98,99,87,108,95,93,0,94,91,99],
[101,110,106,124,100,102,117,0,101,112],
[104,96,102,105,104,105,120,110,0,107],
[106,102,93,96,99,103,112,99,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,99,110,97,100,103,117,116,98],
[113,0,103,105,98,90,99,96,101,87],
[112,108,0,112,121,109,112,109,111,103],
[101,106,99,0,101,95,102,104,112,105],
[114,113,90,110,0,104,101,117,114,103],
[111,121,102,116,107,0,118,107,130,112],
[108,112,99,109,110,93,0,113,107,111],
[94,115,102,107,94,104,98,0,116,95],
[95,110,100,99,97,81,104,95,0,91],
[113,124,108,106,108,99,100,116,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,98,85,111,102,113,102,121,112],
[112,0,115,112,109,104,118,106,105,130],
[113,96,0,77,119,99,132,110,128,128],
[126,99,134,0,119,110,131,121,125,122],
[100,102,92,92,0,75,109,86,99,101],
[109,107,112,101,136,0,128,104,116,130],
[98,93,79,80,102,83,0,82,103,122],
[109,105,101,90,125,107,129,0,120,116],
[90,106,83,86,112,95,108,91,0,92],
[99,81,83,89,110,81,89,95,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,104,104,92,98,97,118,110,93],
[119,0,97,94,95,109,107,107,112,109],
[107,114,0,110,99,114,109,101,108,103],
[107,117,101,0,107,111,114,116,114,101],
[119,116,112,104,0,123,114,123,126,122],
[113,102,97,100,88,0,106,126,103,110],
[114,104,102,97,97,105,0,108,103,103],
[93,104,110,95,88,85,103,0,118,90],
[101,99,103,97,85,108,108,93,0,102],
[118,102,108,110,89,101,108,121,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,94,103,127,117,115,122,108],
[102,0,104,90,101,109,108,110,104,109],
[106,107,0,97,100,119,106,115,112,111],
[117,121,114,0,104,129,116,113,120,122],
[108,110,111,107,0,136,116,118,104,115],
[84,102,92,82,75,0,94,99,107,102],
[94,103,105,95,95,117,0,112,114,107],
[96,101,96,98,93,112,99,0,112,99],
[89,107,99,91,107,104,97,99,0,108],
[103,102,100,89,96,109,104,112,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,98,112,103,96,96,94,102],
[107,0,108,105,99,114,98,102,100,110],
[105,103,0,96,100,95,94,96,98,103],
[113,106,115,0,106,107,105,107,108,103],
[99,112,111,105,0,106,110,104,102,110],
[108,97,116,104,105,0,93,100,97,92],
[115,113,117,106,101,118,0,112,113,109],
[115,109,115,104,107,111,99,0,106,107],
[117,111,113,103,109,114,98,105,0,113],
[109,101,108,108,101,119,102,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,100,110,102,111,103,97,99],
[108,0,99,107,103,105,110,105,98,102],
[109,112,0,107,106,109,114,112,94,105],
[111,104,104,0,112,104,116,105,92,97],
[101,108,105,99,0,98,112,103,102,100],
[109,106,102,107,113,0,111,112,99,111],
[100,101,97,95,99,100,0,104,99,108],
[108,106,99,106,108,99,107,0,100,101],
[114,113,117,119,109,112,112,111,0,99],
[112,109,106,114,111,100,103,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,115,110,122,112,107,100,96],
[105,0,123,113,114,120,114,96,92,87],
[102,88,0,101,96,90,102,82,92,90],
[96,98,110,0,116,116,104,101,112,99],
[101,97,115,95,0,117,102,98,91,96],
[89,91,121,95,94,0,106,102,99,92],
[99,97,109,107,109,105,0,86,126,94],
[104,115,129,110,113,109,125,0,115,110],
[111,119,119,99,120,112,85,96,0,112],
[115,124,121,112,115,119,117,101,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,120,94,122,121,114,106,105],
[98,0,104,99,97,119,91,105,88,92],
[104,107,0,114,97,105,98,112,94,107],
[91,112,97,0,83,106,100,99,91,91],
[117,114,114,128,0,123,115,118,101,109],
[89,92,106,105,88,0,94,89,102,97],
[90,120,113,111,96,117,0,111,113,115],
[97,106,99,112,93,122,100,0,85,101],
[105,123,117,120,110,109,98,126,0,110],
[106,119,104,120,102,114,96,110,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,109,107,121,126,132,144,117,101],
[86,0,79,85,92,101,111,114,89,105],
[102,132,0,119,137,111,142,140,126,110],
[104,126,92,0,106,117,121,122,112,123],
[90,119,74,105,0,94,117,122,121,91],
[85,110,100,94,117,0,111,115,104,109],
[79,100,69,90,94,100,0,105,80,85],
[67,97,71,89,89,96,106,0,87,83],
[94,122,85,99,90,107,131,124,0,101],
[110,106,101,88,120,102,126,128,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,91,89,105,108,90,138,100,90],
[126,0,126,112,128,117,130,131,113,102],
[120,85,0,95,113,105,109,110,87,92],
[122,99,116,0,121,100,102,124,112,109],
[106,83,98,90,0,86,91,103,94,93],
[103,94,106,111,125,0,98,126,104,88],
[121,81,102,109,120,113,0,132,113,100],
[73,80,101,87,108,85,79,0,88,79],
[111,98,124,99,117,107,98,123,0,110],
[121,109,119,102,118,123,111,132,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,101,109,116,113,109,118,114,117],
[102,0,84,103,102,101,106,110,85,112],
[110,127,0,111,124,117,112,126,99,125],
[102,108,100,0,110,106,99,116,107,108],
[95,109,87,101,0,104,102,99,100,108],
[98,110,94,105,107,0,118,113,111,114],
[102,105,99,112,109,93,0,107,106,108],
[93,101,85,95,112,98,104,0,97,109],
[97,126,112,104,111,100,105,114,0,109],
[94,99,86,103,103,97,103,102,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,109,107,115,102,108,113,110],
[99,0,97,110,104,101,105,104,115,110],
[105,114,0,113,113,124,112,108,123,117],
[102,101,98,0,98,98,94,96,104,106],
[104,107,98,113,0,114,105,99,107,105],
[96,110,87,113,97,0,102,97,99,104],
[109,106,99,117,106,109,0,112,110,96],
[103,107,103,115,112,114,99,0,108,112],
[98,96,88,107,104,112,101,103,0,115],
[101,101,94,105,106,107,115,99,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,114,118,104,107,104,116,112,106],
[91,0,100,98,96,97,88,104,102,92],
[97,111,0,104,107,104,105,103,111,111],
[93,113,107,0,98,108,100,111,106,96],
[107,115,104,113,0,113,110,121,116,102],
[104,114,107,103,98,0,97,106,118,104],
[107,123,106,111,101,114,0,116,107,106],
[95,107,108,100,90,105,95,0,107,102],
[99,109,100,105,95,93,104,104,0,99],
[105,119,100,115,109,107,105,109,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,124,105,96,98,113,115,103,115],
[136,0,107,113,88,111,116,130,113,103],
[87,104,0,108,92,99,119,87,103,123],
[106,98,103,0,115,117,121,105,105,109],
[115,123,119,96,0,89,87,105,84,117],
[113,100,112,94,122,0,98,88,107,122],
[98,95,92,90,124,113,0,101,115,95],
[96,81,124,106,106,123,110,0,129,118],
[108,98,108,106,127,104,96,82,0,87],
[96,108,88,102,94,89,116,93,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,93,71,92,101,96,107,90,102],
[90,0,88,80,72,111,89,92,69,95],
[118,123,0,117,86,92,104,103,89,108],
[140,131,94,0,95,107,111,124,103,119],
[119,139,125,116,0,117,115,118,105,120],
[110,100,119,104,94,0,100,107,82,109],
[115,122,107,100,96,111,0,122,97,112],
[104,119,108,87,93,104,89,0,110,121],
[121,142,122,108,106,129,114,101,0,116],
[109,116,103,92,91,102,99,90,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,105,102,94,95,93,125,96,114],
[97,0,92,89,93,101,93,116,88,102],
[106,119,0,115,106,98,93,119,95,109],
[109,122,96,0,98,98,91,106,102,98],
[117,118,105,113,0,107,90,111,92,118],
[116,110,113,113,104,0,103,116,109,120],
[118,118,118,120,121,108,0,111,105,112],
[86,95,92,105,100,95,100,0,92,108],
[115,123,116,109,119,102,106,119,0,110],
[97,109,102,113,93,91,99,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,119,99,111,94,120,110,117,101],
[100,0,106,93,84,89,91,95,92,88],
[92,105,0,97,90,103,112,104,90,97],
[112,118,114,0,106,98,123,103,100,106],
[100,127,121,105,0,109,103,101,112,105],
[117,122,108,113,102,0,107,119,116,96],
[91,120,99,88,108,104,0,102,103,90],
[101,116,107,108,110,92,109,0,113,102],
[94,119,121,111,99,95,108,98,0,95],
[110,123,114,105,106,115,121,109,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,103,103,99,126,89,91,100,95],
[115,0,112,111,110,122,118,113,96,117],
[108,99,0,104,92,112,96,112,109,110],
[108,100,107,0,92,125,95,101,105,112],
[112,101,119,119,0,120,100,124,100,113],
[85,89,99,86,91,0,103,112,89,96],
[122,93,115,116,111,108,0,119,95,112],
[120,98,99,110,87,99,92,0,88,97],
[111,115,102,106,111,122,116,123,0,103],
[116,94,101,99,98,115,99,114,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,128,104,110,116,106,122,107,111],
[90,0,105,105,99,98,108,121,89,96],
[83,106,0,95,110,104,104,102,89,94],
[107,106,116,0,103,109,108,120,107,104],
[101,112,101,108,0,86,102,121,107,98],
[95,113,107,102,125,0,115,114,106,130],
[105,103,107,103,109,96,0,98,91,88],
[89,90,109,91,90,97,113,0,80,103],
[104,122,122,104,104,105,120,131,0,101],
[100,115,117,107,113,81,123,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,107,101,106,108,111,104,104],
[101,0,106,106,105,105,108,109,112,115],
[100,105,0,100,98,102,99,100,110,103],
[104,105,111,0,100,101,103,109,106,116],
[110,106,113,111,0,111,115,110,110,105],
[105,106,109,110,100,0,106,121,112,110],
[103,103,112,108,96,105,0,109,112,111],
[100,102,111,102,101,90,102,0,89,105],
[107,99,101,105,101,99,99,122,0,115],
[107,96,108,95,106,101,100,106,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,132,89,121,91,118,113,112],
[107,0,83,97,87,97,92,97,123,85],
[103,128,0,109,102,114,121,109,112,110],
[79,114,102,0,71,104,84,52,80,80],
[122,124,109,140,0,125,96,122,98,129],
[90,114,97,107,86,0,85,94,99,79],
[120,119,90,127,115,126,0,121,116,97],
[93,114,102,159,89,117,90,0,105,112],
[98,88,99,131,113,112,95,106,0,106],
[99,126,101,131,82,132,114,99,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,111,99,101,108,102,107,101,105],
[123,0,121,117,99,113,122,111,119,120],
[100,90,0,105,113,117,118,107,99,109],
[112,94,106,0,88,107,105,97,108,106],
[110,112,98,123,0,114,113,115,113,117],
[103,98,94,104,97,0,103,109,99,109],
[109,89,93,106,98,108,0,105,106,106],
[104,100,104,114,96,102,106,0,103,109],
[110,92,112,103,98,112,105,108,0,111],
[106,91,102,105,94,102,105,102,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,113,98,94,104,101,99,104,117],
[89,0,88,73,86,98,110,99,90,95],
[98,123,0,90,104,104,108,100,101,83],
[113,138,121,0,123,104,129,116,120,118],
[117,125,107,88,0,105,121,109,89,108],
[107,113,107,107,106,0,116,102,102,97],
[110,101,103,82,90,95,0,96,93,97],
[112,112,111,95,102,109,115,0,106,105],
[107,121,110,91,122,109,118,105,0,85],
[94,116,128,93,103,114,114,106,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,116,113,112,125,108,102,104,112],
[96,0,106,103,105,114,109,103,101,98],
[95,105,0,107,108,123,68,95,105,95],
[98,108,104,0,102,112,84,94,96,79],
[99,106,103,109,0,107,87,103,105,96],
[86,97,88,99,104,0,84,99,94,98],
[103,102,143,127,124,127,0,124,127,118],
[109,108,116,117,108,112,87,0,108,112],
[107,110,106,115,106,117,84,103,0,95],
[99,113,116,132,115,113,93,99,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,95,85,96,105,89,102,87,86],
[115,0,92,88,109,101,101,94,106,96],
[116,119,0,107,123,111,113,104,98,110],
[126,123,104,0,119,119,108,119,115,115],
[115,102,88,92,0,109,98,101,102,92],
[106,110,100,92,102,0,98,106,103,100],
[122,110,98,103,113,113,0,108,99,99],
[109,117,107,92,110,105,103,0,103,96],
[124,105,113,96,109,108,112,108,0,105],
[125,115,101,96,119,111,112,115,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,106,119,110,109,100,92,103,101],
[97,0,114,110,99,101,96,99,99,99],
[105,97,0,114,102,100,107,90,98,99],
[92,101,97,0,97,89,97,95,99,100],
[101,112,109,114,0,104,110,106,117,103],
[102,110,111,122,107,0,104,100,108,94],
[111,115,104,114,101,107,0,98,104,100],
[119,112,121,116,105,111,113,0,109,100],
[108,112,113,112,94,103,107,102,0,107],
[110,112,112,111,108,117,111,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,97,125,143,125,120,104,102,119],
[77,0,74,96,97,101,97,79,104,85],
[114,137,0,119,120,131,120,128,105,103],
[86,115,92,0,117,124,92,93,78,97],
[68,114,91,94,0,99,93,97,76,90],
[86,110,80,87,112,0,102,87,74,92],
[91,114,91,119,118,109,0,92,111,111],
[107,132,83,118,114,124,119,0,97,106],
[109,107,106,133,135,137,100,114,0,120],
[92,126,108,114,121,119,100,105,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,93,105,100,127,108,99,94,107],
[98,0,93,117,91,98,86,102,106,115],
[118,118,0,97,104,122,109,110,109,104],
[106,94,114,0,78,113,101,110,107,106],
[111,120,107,133,0,109,102,108,115,120],
[84,113,89,98,102,0,110,111,127,104],
[103,125,102,110,109,101,0,104,91,115],
[112,109,101,101,103,100,107,0,96,121],
[117,105,102,104,96,84,120,115,0,110],
[104,96,107,105,91,107,96,90,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,96,106,106,107,112,99,104],
[103,0,118,106,102,114,105,113,105,105],
[101,93,0,92,102,99,107,103,109,105],
[115,105,119,0,116,120,120,117,128,112],
[105,109,109,95,0,107,111,106,110,102],
[105,97,112,91,104,0,96,104,102,110],
[104,106,104,91,100,115,0,106,104,113],
[99,98,108,94,105,107,105,0,101,108],
[112,106,102,83,101,109,107,110,0,102],
[107,106,106,99,109,101,98,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,95,101,100,101,104,108,110,100],
[112,0,90,95,114,99,91,103,102,98],
[116,121,0,124,121,106,92,117,109,107],
[110,116,87,0,116,104,96,95,102,88],
[111,97,90,95,0,103,101,101,95,93],
[110,112,105,107,108,0,104,104,106,109],
[107,120,119,115,110,107,0,118,111,105],
[103,108,94,116,110,107,93,0,108,92],
[101,109,102,109,116,105,100,103,0,88],
[111,113,104,123,118,102,106,119,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,98,110,114,112,111,96,92,108],
[102,0,96,99,89,89,101,81,94,107],
[113,115,0,107,102,109,110,116,116,102],
[101,112,104,0,106,101,115,100,107,111],
[97,122,109,105,0,120,121,106,105,133],
[99,122,102,110,91,0,110,101,104,110],
[100,110,101,96,90,101,0,84,102,106],
[115,130,95,111,105,110,127,0,116,117],
[119,117,95,104,106,107,109,95,0,109],
[103,104,109,100,78,101,105,94,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,96,101,106,107,97,106,99,105],
[102,0,95,98,101,100,96,99,86,103],
[115,116,0,103,107,106,105,108,106,114],
[110,113,108,0,115,101,101,104,92,108],
[105,110,104,96,0,108,100,110,99,106],
[104,111,105,110,103,0,100,106,102,104],
[114,115,106,110,111,111,0,104,96,105],
[105,112,103,107,101,105,107,0,93,105],
[112,125,105,119,112,109,115,118,0,112],
[106,108,97,103,105,107,106,106,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,101,99,96,107,102,103,112,104],
[112,0,111,110,104,108,100,109,101,107],
[110,100,0,99,97,94,100,96,102,98],
[112,101,112,0,96,108,99,110,116,98],
[115,107,114,115,0,118,105,117,107,109],
[104,103,117,103,93,0,95,101,99,101],
[109,111,111,112,106,116,0,103,115,111],
[108,102,115,101,94,110,108,0,114,106],
[99,110,109,95,104,112,96,97,0,112],
[107,104,113,113,102,110,100,105,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,91,105,108,95,99,99,99,87],
[121,0,98,114,107,111,106,104,107,92],
[120,113,0,112,111,126,105,105,118,109],
[106,97,99,0,110,100,96,107,103,98],
[103,104,100,101,0,102,99,104,98,86],
[116,100,85,111,109,0,104,101,106,89],
[112,105,106,115,112,107,0,104,112,92],
[112,107,106,104,107,110,107,0,107,98],
[112,104,93,108,113,105,99,104,0,104],
[124,119,102,113,125,122,119,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,120,135,116,104,127,124,129,142],
[90,0,118,134,90,101,110,112,125,141],
[91,93,0,136,95,84,97,123,103,137],
[76,77,75,0,93,81,109,92,93,117],
[95,121,116,118,0,109,101,121,119,146],
[107,110,127,130,102,0,119,143,112,131],
[84,101,114,102,110,92,0,117,113,146],
[87,99,88,119,90,68,94,0,114,126],
[82,86,108,118,92,99,98,97,0,113],
[69,70,74,94,65,80,65,85,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,115,94,108,104,87,101,109,123],
[94,0,120,87,94,93,83,113,91,115],
[96,91,0,88,117,99,96,86,95,96],
[117,124,123,0,127,91,117,110,129,120],
[103,117,94,84,0,107,93,91,118,102],
[107,118,112,120,104,0,105,103,127,118],
[124,128,115,94,118,106,0,93,107,133],
[110,98,125,101,120,108,118,0,123,143],
[102,120,116,82,93,84,104,88,0,112],
[88,96,115,91,109,93,78,68,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,93,104,112,104,108,104,98,108],
[100,0,94,97,98,103,117,105,104,108],
[118,117,0,110,119,111,107,108,123,105],
[107,114,101,0,117,108,109,112,107,113],
[99,113,92,94,0,101,105,109,110,106],
[107,108,100,103,110,0,110,106,104,108],
[103,94,104,102,106,101,0,105,111,99],
[107,106,103,99,102,105,106,0,106,109],
[113,107,88,104,101,107,100,105,0,107],
[103,103,106,98,105,103,112,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,106,95,97,91,88,110,100,90],
[116,0,120,106,114,109,107,113,110,101],
[105,91,0,94,91,107,102,113,96,87],
[116,105,117,0,105,109,100,115,125,110],
[114,97,120,106,0,115,83,105,108,91],
[120,102,104,102,96,0,95,104,95,102],
[123,104,109,111,128,116,0,111,106,117],
[101,98,98,96,106,107,100,0,96,95],
[111,101,115,86,103,116,105,115,0,88],
[121,110,124,101,120,109,94,116,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,114,123,112,130,120,110,102,110],
[94,0,95,104,90,113,105,104,92,106],
[97,116,0,120,104,118,106,124,112,108],
[88,107,91,0,94,108,110,109,82,97],
[99,121,107,117,0,118,116,111,117,110],
[81,98,93,103,93,0,95,100,91,96],
[91,106,105,101,95,116,0,97,105,98],
[101,107,87,102,100,111,114,0,92,89],
[109,119,99,129,94,120,106,119,0,100],
[101,105,103,114,101,115,113,122,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,116,107,96,110,104,125,80,101],
[112,0,125,112,93,104,96,138,110,90],
[95,86,0,107,87,78,82,106,83,103],
[104,99,104,0,70,82,96,110,65,84],
[115,118,124,141,0,104,105,129,75,108],
[101,107,133,129,107,0,105,105,99,115],
[107,115,129,115,106,106,0,122,99,105],
[86,73,105,101,82,106,89,0,86,78],
[131,101,128,146,136,112,112,125,0,121],
[110,121,108,127,103,96,106,133,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,127,92,89,69,85,86,86],
[110,0,119,122,121,112,97,113,127,113],
[101,92,0,121,90,63,93,109,107,88],
[84,89,90,0,92,72,71,102,95,79],
[119,90,121,119,0,100,89,112,110,124],
[122,99,148,139,111,0,115,140,117,141],
[142,114,118,140,122,96,0,108,122,116],
[126,98,102,109,99,71,103,0,92,112],
[125,84,104,116,101,94,89,119,0,120],
[125,98,123,132,87,70,95,99,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,74,81,77,92,73,89,88,77],
[121,0,91,116,109,95,86,116,102,95],
[137,120,0,121,114,101,106,112,105,107],
[130,95,90,0,117,117,80,121,95,102],
[134,102,97,94,0,115,88,108,91,107],
[119,116,110,94,96,0,90,117,87,114],
[138,125,105,131,123,121,0,116,110,120],
[122,95,99,90,103,94,95,0,91,119],
[123,109,106,116,120,124,101,120,0,115],
[134,116,104,109,104,97,91,92,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,78,126,88,81,122,99,76,132],
[124,0,81,149,89,128,166,72,95,103],
[133,130,0,130,140,100,129,107,116,129],
[85,62,81,0,74,77,125,65,58,104],
[123,122,71,137,0,86,145,83,95,157],
[130,83,111,134,125,0,134,128,130,143],
[89,45,82,86,66,77,0,70,45,88],
[112,139,104,146,128,83,141,0,108,115],
[135,116,95,153,116,81,166,103,0,176],
[79,108,82,107,54,68,123,96,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,104,119,96,113,136,120,103,84],
[72,0,98,129,96,101,107,96,85,107],
[107,113,0,135,119,137,135,101,99,131],
[92,82,76,0,110,88,121,94,83,70],
[115,115,92,101,0,112,96,110,79,108],
[98,110,74,123,99,0,113,77,98,107],
[75,104,76,90,115,98,0,89,99,99],
[91,115,110,117,101,134,122,0,97,106],
[108,126,112,128,132,113,112,114,0,98],
[127,104,80,141,103,104,112,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,105,103,101,110,100,114,100,98],
[111,0,102,106,102,111,88,106,95,95],
[106,109,0,95,101,108,95,108,94,99],
[108,105,116,0,108,102,91,118,106,106],
[110,109,110,103,0,105,98,109,95,96],
[101,100,103,109,106,0,98,99,94,95],
[111,123,116,120,113,113,0,119,102,107],
[97,105,103,93,102,112,92,0,89,93],
[111,116,117,105,116,117,109,122,0,102],
[113,116,112,105,115,116,104,118,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,104,106,106,111,98,99,95],
[107,0,109,122,101,120,116,100,117,109],
[107,102,0,114,106,107,106,112,96,110],
[107,89,97,0,92,96,96,99,90,103],
[105,110,105,119,0,110,114,95,107,112],
[105,91,104,115,101,0,104,92,100,100],
[100,95,105,115,97,107,0,94,86,99],
[113,111,99,112,116,119,117,0,102,105],
[112,94,115,121,104,111,125,109,0,106],
[116,102,101,108,99,111,112,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,73,97,73,90,172,108,129,104],
[46,0,87,112,47,110,112,85,100,106],
[138,124,0,103,75,121,133,92,127,174],
[114,99,108,0,101,121,165,139,145,160],
[138,164,136,110,0,100,133,71,92,111],
[121,101,90,90,111,0,172,121,98,164],
[39,99,78,46,78,39,0,57,78,78],
[103,126,119,72,140,90,154,0,96,147],
[82,111,84,66,119,113,133,115,0,178],
[107,105,37,51,100,47,133,64,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,119,102,113,110,108,103,116,120],
[94,0,98,103,113,103,106,99,104,108],
[92,113,0,108,105,101,105,107,91,111],
[109,108,103,0,114,114,108,106,110,118],
[98,98,106,97,0,103,106,98,100,113],
[101,108,110,97,108,0,104,104,95,109],
[103,105,106,103,105,107,0,111,100,109],
[108,112,104,105,113,107,100,0,96,113],
[95,107,120,101,111,116,111,115,0,114],
[91,103,100,93,98,102,102,98,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,107,115,89,90,103,89,103,93],
[109,0,103,111,76,100,109,93,95,94],
[104,108,0,113,91,88,109,90,94,98],
[96,100,98,0,90,99,112,90,97,100],
[122,135,120,121,0,109,123,102,112,108],
[121,111,123,112,102,0,118,112,106,108],
[108,102,102,99,88,93,0,87,96,87],
[122,118,121,121,109,99,124,0,104,108],
[108,116,117,114,99,105,115,107,0,105],
[118,117,113,111,103,103,124,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,93,95,103,108,106,111,106,109],
[106,0,106,103,101,115,113,109,107,115],
[118,105,0,112,110,133,114,111,111,114],
[116,108,99,0,101,120,114,114,110,116],
[108,110,101,110,0,118,110,107,114,108],
[103,96,78,91,93,0,97,90,101,92],
[105,98,97,97,101,114,0,101,106,107],
[100,102,100,97,104,121,110,0,109,110],
[105,104,100,101,97,110,105,102,0,103],
[102,96,97,95,103,119,104,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,110,109,113,110,109,116,118,118],
[107,0,94,112,108,106,97,114,109,106],
[101,117,0,110,104,106,100,115,108,119],
[102,99,101,0,97,90,104,110,104,112],
[98,103,107,114,0,101,110,113,96,110],
[101,105,105,121,110,0,108,117,107,117],
[102,114,111,107,101,103,0,115,103,116],
[95,97,96,101,98,94,96,0,92,107],
[93,102,103,107,115,104,108,119,0,115],
[93,105,92,99,101,94,95,104,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,99,104,112,120,103,113,98,99],
[103,0,98,104,103,118,108,101,102,93],
[112,113,0,109,102,130,106,113,99,109],
[107,107,102,0,109,122,103,116,105,103],
[99,108,109,102,0,118,104,101,101,88],
[91,93,81,89,93,0,94,95,92,95],
[108,103,105,108,107,117,0,108,103,95],
[98,110,98,95,110,116,103,0,101,103],
[113,109,112,106,110,119,108,110,0,102],
[112,118,102,108,123,116,116,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,112,113,108,128,101,116,108,109],
[85,0,91,96,97,96,86,96,73,92],
[99,120,0,103,104,111,110,98,87,103],
[98,115,108,0,103,128,105,107,100,103],
[103,114,107,108,0,122,96,105,107,111],
[83,115,100,83,89,0,93,111,74,95],
[110,125,101,106,115,118,0,105,102,115],
[95,115,113,104,106,100,106,0,94,107],
[103,138,124,111,104,137,109,117,0,119],
[102,119,108,108,100,116,96,104,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,91,110,90,90,112,128,107,101],
[109,0,107,121,108,103,119,126,112,134],
[120,104,0,104,93,123,118,111,129,112],
[101,90,107,0,113,105,120,111,115,100],
[121,103,118,98,0,112,109,107,109,116],
[121,108,88,106,99,0,114,110,124,95],
[99,92,93,91,102,97,0,107,110,102],
[83,85,100,100,104,101,104,0,110,90],
[104,99,82,96,102,87,101,101,0,106],
[110,77,99,111,95,116,109,121,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,118,127,112,111,119,125,101,101],
[104,0,101,107,105,94,103,106,117,105],
[93,110,0,96,109,82,102,99,111,100],
[84,104,115,0,112,109,94,97,109,102],
[99,106,102,99,0,108,99,112,116,116],
[100,117,129,102,103,0,110,116,109,94],
[92,108,109,117,112,101,0,111,114,111],
[86,105,112,114,99,95,100,0,115,102],
[110,94,100,102,95,102,97,96,0,106],
[110,106,111,109,95,117,100,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,111,109,83,70,79,88,92,82],
[119,0,125,109,113,83,91,91,89,115],
[100,86,0,84,93,77,72,89,81,82],
[102,102,127,0,125,90,107,92,78,103],
[128,98,118,86,0,75,86,101,85,84],
[141,128,134,121,136,0,98,117,108,116],
[132,120,139,104,125,113,0,94,91,127],
[123,120,122,119,110,94,117,0,117,137],
[119,122,130,133,126,103,120,94,0,130],
[129,96,129,108,127,95,84,74,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,77,85,108,96,106,98,75,93],
[137,0,107,102,108,109,109,92,95,113],
[134,104,0,109,127,121,112,104,90,92],
[126,109,102,0,123,102,110,103,107,100],
[103,103,84,88,0,86,101,85,84,75],
[115,102,90,109,125,0,117,107,107,96],
[105,102,99,101,110,94,0,86,80,101],
[113,119,107,108,126,104,125,0,104,99],
[136,116,121,104,127,104,131,107,0,116],
[118,98,119,111,136,115,110,112,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,86,87,108,114,83,89,100,108],
[106,0,79,98,99,134,82,86,98,113],
[125,132,0,117,128,144,105,106,129,133],
[124,113,94,0,117,126,68,103,118,106],
[103,112,83,94,0,111,70,81,122,117],
[97,77,67,85,100,0,87,98,112,108],
[128,129,106,143,141,124,0,99,119,140],
[122,125,105,108,130,113,112,0,110,117],
[111,113,82,93,89,99,92,101,0,118],
[103,98,78,105,94,103,71,94,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,94,100,110,127,99,141,73,115],
[83,0,61,100,97,135,77,96,49,74],
[117,150,0,115,117,150,96,160,121,110],
[111,111,96,0,93,129,77,117,99,96],
[101,114,94,118,0,124,118,143,103,127],
[84,76,61,82,87,0,47,88,64,93],
[112,134,115,134,93,164,0,146,104,123],
[70,115,51,94,68,123,65,0,64,55],
[138,162,90,112,108,147,107,147,0,117],
[96,137,101,115,84,118,88,156,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,104,98,108,103,107,106,105,113],
[113,0,106,105,109,112,103,111,105,105],
[107,105,0,105,114,105,104,109,110,104],
[113,106,106,0,116,109,101,114,110,111],
[103,102,97,95,0,101,100,104,105,97],
[108,99,106,102,110,0,105,110,106,100],
[104,108,107,110,111,106,0,105,107,111],
[105,100,102,97,107,101,106,0,104,93],
[106,106,101,101,106,105,104,107,0,103],
[98,106,107,100,114,111,100,118,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,102,116,106,96,103,113,101,108],
[95,0,93,104,86,79,98,105,94,105],
[109,118,0,112,88,104,105,122,97,120],
[95,107,99,0,97,102,102,120,101,122],
[105,125,123,114,0,112,104,120,119,120],
[115,132,107,109,99,0,105,121,109,124],
[108,113,106,109,107,106,0,117,99,106],
[98,106,89,91,91,90,94,0,85,113],
[110,117,114,110,92,102,112,126,0,117],
[103,106,91,89,91,87,105,98,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,111,103,106,103,106,102,108,114],
[110,0,111,98,101,113,112,102,99,100],
[100,100,0,93,86,100,97,78,85,93],
[108,113,118,0,90,118,123,96,101,114],
[105,110,125,121,0,114,108,102,102,106],
[108,98,111,93,97,0,97,102,88,108],
[105,99,114,88,103,114,0,90,83,103],
[109,109,133,115,109,109,121,0,105,110],
[103,112,126,110,109,123,128,106,0,112],
[97,111,118,97,105,103,108,101,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,113,107,97,97,112,109,111,107],
[96,0,104,91,99,97,98,92,95,102],
[98,107,0,88,102,92,101,90,92,104],
[104,120,123,0,107,107,112,113,108,109],
[114,112,109,104,0,106,107,105,102,94],
[114,114,119,104,105,0,99,114,101,111],
[99,113,110,99,104,112,0,109,102,113],
[102,119,121,98,106,97,102,0,100,101],
[100,116,119,103,109,110,109,111,0,103],
[104,109,107,102,117,100,98,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,97,92,80,97,80,88,90,88],
[115,0,127,106,98,121,95,111,102,94],
[114,84,0,105,90,99,97,93,74,102],
[119,105,106,0,112,116,90,110,101,120],
[131,113,121,99,0,101,106,97,104,104],
[114,90,112,95,110,0,109,95,98,91],
[131,116,114,121,105,102,0,117,119,115],
[123,100,118,101,114,116,94,0,102,117],
[121,109,137,110,107,113,92,109,0,114],
[123,117,109,91,107,120,96,94,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,100,105,116,109,103,95,108,112],
[113,0,97,103,111,110,98,103,108,107],
[111,114,0,116,104,113,107,106,118,114],
[106,108,95,0,113,102,103,105,111,107],
[95,100,107,98,0,92,96,101,100,109],
[102,101,98,109,119,0,111,102,105,102],
[108,113,104,108,115,100,0,99,107,110],
[116,108,105,106,110,109,112,0,114,117],
[103,103,93,100,111,106,104,97,0,107],
[99,104,97,104,102,109,101,94,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,149,91,117,111,123,113,126,107],
[93,0,119,79,97,93,105,98,106,88],
[62,92,0,77,78,69,110,105,92,68],
[120,132,134,0,103,104,143,143,128,129],
[94,114,133,108,0,100,112,124,123,102],
[100,118,142,107,111,0,142,142,135,100],
[88,106,101,68,99,69,0,113,111,62],
[98,113,106,68,87,69,98,0,109,73],
[85,105,119,83,88,76,100,102,0,71],
[104,123,143,82,109,111,149,138,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,113,105,111,113,116,110,109,112],
[111,0,117,121,117,100,114,115,104,125],
[98,94,0,119,105,110,119,111,110,110],
[106,90,92,0,95,99,102,105,96,98],
[100,94,106,116,0,113,109,96,100,106],
[98,111,101,112,98,0,109,102,100,111],
[95,97,92,109,102,102,0,97,94,101],
[101,96,100,106,115,109,114,0,102,112],
[102,107,101,115,111,111,117,109,0,114],
[99,86,101,113,105,100,110,99,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,126,100,108,88,141,132,101,87],
[116,0,113,82,98,91,141,136,88,121],
[85,98,0,96,98,89,123,108,81,104],
[111,129,115,0,123,117,149,135,127,91],
[103,113,113,88,0,101,134,130,112,112],
[123,120,122,94,110,0,170,113,127,113],
[70,70,88,62,77,41,0,86,63,74],
[79,75,103,76,81,98,125,0,93,92],
[110,123,130,84,99,84,148,118,0,107],
[124,90,107,120,99,98,137,119,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,114,93,114,108,112,110,107,112],
[94,0,91,94,105,86,110,96,99,97],
[97,120,0,102,113,99,106,97,94,98],
[118,117,109,0,116,108,127,103,119,106],
[97,106,98,95,0,103,108,101,107,103],
[103,125,112,103,108,0,112,102,109,109],
[99,101,105,84,103,99,0,92,96,107],
[101,115,114,108,110,109,119,0,109,113],
[104,112,117,92,104,102,115,102,0,104],
[99,114,113,105,108,102,104,98,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,100,102,114,102,89,90,102,93],
[119,0,105,102,120,110,104,101,106,97],
[111,106,0,111,122,121,110,105,119,105],
[109,109,100,0,112,112,101,95,102,96],
[97,91,89,99,0,113,86,89,100,93],
[109,101,90,99,98,0,92,87,99,99],
[122,107,101,110,125,119,0,111,114,103],
[121,110,106,116,122,124,100,0,104,106],
[109,105,92,109,111,112,97,107,0,93],
[118,114,106,115,118,112,108,105,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,117,104,110,105,124,108,108,103],
[95,0,104,103,114,103,124,103,113,119],
[94,107,0,109,113,117,111,97,105,108],
[107,108,102,0,112,111,114,101,102,106],
[101,97,98,99,0,98,109,93,98,113],
[106,108,94,100,113,0,112,99,104,108],
[87,87,100,97,102,99,0,97,97,99],
[103,108,114,110,118,112,114,0,107,123],
[103,98,106,109,113,107,114,104,0,115],
[108,92,103,105,98,103,112,88,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,102,97,100,97,84,95,99,84],
[116,0,113,101,115,117,107,106,117,108],
[109,98,0,93,103,101,97,96,101,109],
[114,110,118,0,110,102,104,104,105,127],
[111,96,108,101,0,103,97,97,101,95],
[114,94,110,109,108,0,95,101,107,102],
[127,104,114,107,114,116,0,112,105,110],
[116,105,115,107,114,110,99,0,116,109],
[112,94,110,106,110,104,106,95,0,106],
[127,103,102,84,116,109,101,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,116,105,98,116,113,116,108,120],
[100,0,105,100,97,94,103,108,104,105],
[95,106,0,102,108,97,104,103,95,102],
[106,111,109,0,103,99,98,106,93,96],
[113,114,103,108,0,107,114,108,111,101],
[95,117,114,112,104,0,108,102,109,100],
[98,108,107,113,97,103,0,108,104,103],
[95,103,108,105,103,109,103,0,97,106],
[103,107,116,118,100,102,107,114,0,106],
[91,106,109,115,110,111,108,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,101,111,104,103,95,110,98,108],
[104,0,96,111,104,106,101,108,104,106],
[110,115,0,118,118,120,110,118,103,113],
[100,100,93,0,102,97,96,105,93,103],
[107,107,93,109,0,100,105,105,107,101],
[108,105,91,114,111,0,108,112,105,110],
[116,110,101,115,106,103,0,111,111,104],
[101,103,93,106,106,99,100,0,101,114],
[113,107,108,118,104,106,100,110,0,108],
[103,105,98,108,110,101,107,97,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,110,127,92,94,98,78,127,108],
[118,0,96,130,104,100,98,110,103,100],
[101,115,0,132,80,91,108,101,120,95],
[84,81,79,0,85,61,119,64,70,82],
[119,107,131,126,0,92,122,94,119,96],
[117,111,120,150,119,0,126,114,99,133],
[113,113,103,92,89,85,0,107,102,119],
[133,101,110,147,117,97,104,0,131,124],
[84,108,91,141,92,112,109,80,0,111],
[103,111,116,129,115,78,92,87,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,114,107,106,105,110,121,104,106],
[109,0,100,113,91,102,108,126,109,102],
[97,111,0,114,99,99,123,115,117,99],
[104,98,97,0,99,97,110,107,105,103],
[105,120,112,112,0,109,123,130,118,105],
[106,109,112,114,102,0,124,118,105,102],
[101,103,88,101,88,87,0,104,94,91],
[90,85,96,104,81,93,107,0,105,92],
[107,102,94,106,93,106,117,106,0,104],
[105,109,112,108,106,109,120,119,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,113,116,119,119,110,116,111,113],
[110,0,110,114,105,105,115,105,106,104],
[98,101,0,102,108,102,102,108,102,110],
[95,97,109,0,103,96,102,99,97,101],
[92,106,103,108,0,109,108,111,106,107],
[92,106,109,115,102,0,103,107,107,103],
[101,96,109,109,103,108,0,100,104,109],
[95,106,103,112,100,104,111,0,100,103],
[100,105,109,114,105,104,107,111,0,116],
[98,107,101,110,104,108,102,108,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,99,110,115,92,117,135,123,134],
[75,0,98,116,116,68,70,106,49,112],
[112,113,0,94,108,93,97,99,92,116],
[101,95,117,0,86,86,119,104,69,123],
[96,95,103,125,0,80,91,81,79,112],
[119,143,118,125,131,0,95,109,126,134],
[94,141,114,92,120,116,0,108,106,118],
[76,105,112,107,130,102,103,0,81,136],
[88,162,119,142,132,85,105,130,0,154],
[77,99,95,88,99,77,93,75,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,94,91,73,85,99,80,93,95],
[109,0,104,95,72,96,93,85,98,107],
[117,107,0,100,103,101,119,112,99,99],
[120,116,111,0,94,117,114,112,104,106],
[138,139,108,117,0,116,131,100,118,128],
[126,115,110,94,95,0,111,99,106,119],
[112,118,92,97,80,100,0,79,107,105],
[131,126,99,99,111,112,132,0,120,109],
[118,113,112,107,93,105,104,91,0,96],
[116,104,112,105,83,92,106,102,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,105,102,102,108,96,117,109,117],
[103,0,99,105,108,106,108,114,110,117],
[106,112,0,111,100,99,105,113,106,112],
[109,106,100,0,105,108,107,115,101,100],
[109,103,111,106,0,108,104,118,100,114],
[103,105,112,103,103,0,106,115,109,104],
[115,103,106,104,107,105,0,112,100,111],
[94,97,98,96,93,96,99,0,100,99],
[102,101,105,110,111,102,111,111,0,110],
[94,94,99,111,97,107,100,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,70,71,85,93,96,116,86,93],
[98,0,76,106,98,91,124,123,93,120],
[141,135,0,96,115,113,132,138,116,130],
[140,105,115,0,110,121,123,117,114,127],
[126,113,96,101,0,98,141,123,106,101],
[118,120,98,90,113,0,103,131,108,110],
[115,87,79,88,70,108,0,102,92,86],
[95,88,73,94,88,80,109,0,87,103],
[125,118,95,97,105,103,119,124,0,104],
[118,91,81,84,110,101,125,108,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,101,86,84,102,120,96,97,96],
[99,0,111,115,95,114,116,137,107,115],
[110,100,0,122,87,101,112,119,102,117],
[125,96,89,0,108,92,103,98,100,109],
[127,116,124,103,0,110,109,112,98,114],
[109,97,110,119,101,0,108,102,99,114],
[91,95,99,108,102,103,0,110,98,110],
[115,74,92,113,99,109,101,0,92,108],
[114,104,109,111,113,112,113,119,0,114],
[115,96,94,102,97,97,101,103,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,103,126,118,112,113,113,127,102],
[90,0,104,115,107,96,106,99,111,102],
[108,107,0,117,114,117,106,106,104,116],
[85,96,94,0,97,101,100,102,87,98],
[93,104,97,114,0,98,100,112,102,102],
[99,115,94,110,113,0,110,117,107,115],
[98,105,105,111,111,101,0,116,110,110],
[98,112,105,109,99,94,95,0,104,96],
[84,100,107,124,109,104,101,107,0,107],
[109,109,95,113,109,96,101,115,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,117,111,115,120,120,119,103,100],
[106,0,113,125,119,111,128,125,108,103],
[94,98,0,104,104,108,104,118,87,108],
[100,86,107,0,117,111,120,121,97,106],
[96,92,107,94,0,91,105,102,91,95],
[91,100,103,100,120,0,110,103,85,102],
[91,83,107,91,106,101,0,107,89,92],
[92,86,93,90,109,108,104,0,81,109],
[108,103,124,114,120,126,122,130,0,112],
[111,108,103,105,116,109,119,102,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,106,114,110,109,116,105,107,106],
[95,0,94,108,113,101,106,98,103,106],
[105,117,0,119,126,114,127,107,116,108],
[97,103,92,0,108,89,108,100,102,105],
[101,98,85,103,0,99,110,104,106,96],
[102,110,97,122,112,0,119,103,115,108],
[95,105,84,103,101,92,0,97,102,95],
[106,113,104,111,107,108,114,0,111,100],
[104,108,95,109,105,96,109,100,0,99],
[105,105,103,106,115,103,116,111,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,109,88,85,104,65,99,89,108],
[121,0,83,72,74,94,79,89,91,112],
[102,128,0,97,93,104,108,104,109,97],
[123,139,114,0,120,134,88,89,98,116],
[126,137,118,91,0,139,85,97,149,133],
[107,117,107,77,72,0,79,87,82,99],
[146,132,103,123,126,132,0,122,118,120],
[112,122,107,122,114,124,89,0,112,114],
[122,120,102,113,62,129,93,99,0,128],
[103,99,114,95,78,112,91,97,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,116,108,101,110,99,100,86,94],
[99,0,111,114,105,125,120,120,117,102],
[95,100,0,99,113,118,117,102,98,103],
[103,97,112,0,105,115,103,101,86,94],
[110,106,98,106,0,117,115,118,86,108],
[101,86,93,96,94,0,81,95,84,80],
[112,91,94,108,96,130,0,111,84,101],
[111,91,109,110,93,116,100,0,99,97],
[125,94,113,125,125,127,127,112,0,119],
[117,109,108,117,103,131,110,114,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,97,96,120,157,106,112,142,127],
[89,0,88,93,101,136,67,102,137,104],
[114,123,0,121,94,144,120,79,162,110],
[115,118,90,0,89,162,114,114,121,125],
[91,110,117,122,0,145,84,122,144,124],
[54,75,67,49,66,0,56,78,110,102],
[105,144,91,97,127,155,0,109,149,140],
[99,109,132,97,89,133,102,0,145,128],
[69,74,49,90,67,101,62,66,0,91],
[84,107,101,86,87,109,71,83,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,122,91,105,80,91,92,116,102],
[118,0,122,107,123,106,102,111,127,117],
[89,89,0,83,104,83,84,96,104,102],
[120,104,128,0,121,95,103,114,121,106],
[106,88,107,90,0,92,93,90,102,94],
[131,105,128,116,119,0,115,117,119,112],
[120,109,127,108,118,96,0,101,119,105],
[119,100,115,97,121,94,110,0,121,95],
[95,84,107,90,109,92,92,90,0,98],
[109,94,109,105,117,99,106,116,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,108,111,107,116,114,107,101],
[103,0,103,106,107,111,107,111,105,106],
[109,108,0,105,114,111,112,117,108,107],
[103,105,106,0,108,111,105,117,108,101],
[100,104,97,103,0,110,97,106,109,102],
[104,100,100,100,101,0,106,103,108,99],
[95,104,99,106,114,105,0,104,109,98],
[97,100,94,94,105,108,107,0,110,101],
[104,106,103,103,102,103,102,101,0,101],
[110,105,104,110,109,112,113,110,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,120,114,113,123,103,106,111,109],
[78,0,96,95,94,83,89,105,82,84],
[91,115,0,103,102,88,94,99,103,93],
[97,116,108,0,118,110,115,102,118,109],
[98,117,109,93,0,92,110,97,102,107],
[88,128,123,101,119,0,111,108,105,108],
[108,122,117,96,101,100,0,127,105,110],
[105,106,112,109,114,103,84,0,99,113],
[100,129,108,93,109,106,106,112,0,107],
[102,127,118,102,104,103,101,98,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,77,94,97,133,106,74,124,83],
[98,0,47,68,64,78,117,85,93,73],
[134,164,0,120,116,123,121,88,145,73],
[117,143,91,0,119,119,136,162,145,147],
[114,147,95,92,0,147,146,108,133,81],
[78,133,88,92,64,0,133,112,117,134],
[105,94,90,75,65,78,0,46,104,56],
[137,126,123,49,103,99,165,0,136,96],
[87,118,66,66,78,94,107,75,0,59],
[128,138,138,64,130,77,155,115,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,114,100,125,110,123,119,116,109],
[105,0,107,106,112,116,114,108,115,122],
[97,104,0,98,104,111,110,91,106,110],
[111,105,113,0,117,107,124,109,111,121],
[86,99,107,94,0,106,117,102,108,113],
[101,95,100,104,105,0,113,103,105,112],
[88,97,101,87,94,98,0,95,98,102],
[92,103,120,102,109,108,116,0,105,105],
[95,96,105,100,103,106,113,106,0,117],
[102,89,101,90,98,99,109,106,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,96,102,112,106,102,110,104,114],
[112,0,107,105,107,111,107,98,106,116],
[115,104,0,117,118,106,102,112,102,119],
[109,106,94,0,115,86,96,105,90,112],
[99,104,93,96,0,95,88,102,86,109],
[105,100,105,125,116,0,96,110,101,112],
[109,104,109,115,123,115,0,102,112,121],
[101,113,99,106,109,101,109,0,95,112],
[107,105,109,121,125,110,99,116,0,128],
[97,95,92,99,102,99,90,99,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,94,105,105,97,112,101,97,110],
[111,0,109,110,106,115,116,105,103,112],
[117,102,0,126,118,117,117,111,106,121],
[106,101,85,0,94,101,104,102,97,99],
[106,105,93,117,0,101,99,104,110,100],
[114,96,94,110,110,0,105,106,108,109],
[99,95,94,107,112,106,0,104,97,104],
[110,106,100,109,107,105,107,0,96,109],
[114,108,105,114,101,103,114,115,0,117],
[101,99,90,112,111,102,107,102,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,113,92,98,112,101,97,108,109],
[107,0,105,100,104,113,99,97,98,109],
[98,106,0,94,105,111,103,100,95,108],
[119,111,117,0,108,123,111,102,114,116],
[113,107,106,103,0,128,120,114,100,118],
[99,98,100,88,83,0,97,88,92,103],
[110,112,108,100,91,114,0,100,104,105],
[114,114,111,109,97,123,111,0,115,117],
[103,113,116,97,111,119,107,96,0,115],
[102,102,103,95,93,108,106,94,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,98,91,106,93,96,98,106],
[107,0,110,91,105,115,102,109,111,107],
[102,101,0,102,101,100,99,97,114,106],
[113,120,109,0,105,118,106,118,116,111],
[120,106,110,106,0,98,99,112,109,107],
[105,96,111,93,113,0,106,99,105,99],
[118,109,112,105,112,105,0,113,115,115],
[115,102,114,93,99,112,98,0,106,98],
[113,100,97,95,102,106,96,105,0,107],
[105,104,105,100,104,112,96,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,125,120,112,118,126,142,118,102],
[103,0,119,129,123,114,125,123,116,97],
[86,92,0,88,90,91,96,114,88,75],
[91,82,123,0,106,98,108,125,99,87],
[99,88,121,105,0,107,112,127,104,119],
[93,97,120,113,104,0,124,129,106,108],
[85,86,115,103,99,87,0,127,94,85],
[69,88,97,86,84,82,84,0,93,79],
[93,95,123,112,107,105,117,118,0,92],
[109,114,136,124,92,103,126,132,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,112,104,75,60,62,53,101,72],
[136,0,185,134,152,106,133,103,162,145],
[99,26,0,81,99,80,80,48,125,152],
[107,77,130,0,77,107,139,137,130,146],
[136,59,112,134,0,74,69,60,151,72],
[151,105,131,104,137,0,122,105,200,134],
[149,78,131,72,142,89,0,93,142,109],
[158,108,163,74,151,106,118,0,181,148],
[110,49,86,81,60,11,69,30,0,79],
[139,66,59,65,139,77,102,63,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,96,97,105,103,116,105,97],
[103,0,116,94,109,114,105,116,125,112],
[102,95,0,82,98,89,89,104,100,98],
[115,117,129,0,103,114,114,132,115,121],
[114,102,113,108,0,110,113,120,115,110],
[106,97,122,97,101,0,107,109,116,109],
[108,106,122,97,98,104,0,129,109,106],
[95,95,107,79,91,102,82,0,85,94],
[106,86,111,96,96,95,102,126,0,90],
[114,99,113,90,101,102,105,117,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,103,101,98,90,104,113,116],
[110,0,98,125,125,126,108,110,140,139],
[102,113,0,103,126,100,90,102,104,126],
[108,86,108,0,107,98,80,97,106,118],
[110,86,85,104,0,98,84,87,93,114],
[113,85,111,113,113,0,83,113,101,115],
[121,103,121,131,127,128,0,112,113,139],
[107,101,109,114,124,98,99,0,129,116],
[98,71,107,105,118,110,98,82,0,117],
[95,72,85,93,97,96,72,95,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,103,103,106,106,125,93,75,134],
[67,0,85,111,77,113,113,116,68,116],
[108,126,0,97,98,97,124,115,87,117],
[108,100,114,0,88,109,116,97,80,128],
[105,134,113,123,0,104,114,104,113,115],
[105,98,114,102,107,0,114,143,97,146],
[86,98,87,95,97,97,0,96,95,116],
[118,95,96,114,107,68,115,0,95,96],
[136,143,124,131,98,114,116,116,0,126],
[77,95,94,83,96,65,95,115,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,118,136,107,112,112,122,111,99],
[103,0,113,122,85,100,110,109,111,101],
[93,98,0,113,85,105,118,118,106,102],
[75,89,98,0,89,91,108,105,79,81],
[104,126,126,122,0,109,111,134,113,103],
[99,111,106,120,102,0,122,124,109,83],
[99,101,93,103,100,89,0,104,97,89],
[89,102,93,106,77,87,107,0,89,85],
[100,100,105,132,98,102,114,122,0,107],
[112,110,109,130,108,128,122,126,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,109,108,96,118,88,85,116,109],
[46,0,46,86,66,91,82,51,81,75],
[102,165,0,130,90,124,100,95,117,143],
[103,125,81,0,55,101,75,89,95,97],
[115,145,121,156,0,135,87,118,123,123],
[93,120,87,110,76,0,100,86,113,97],
[123,129,111,136,124,111,0,115,96,104],
[126,160,116,122,93,125,96,0,106,118],
[95,130,94,116,88,98,115,105,0,109],
[102,136,68,114,88,114,107,93,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,115,112,111,100,112,110,107,119],
[95,0,98,95,96,98,91,109,98,104],
[96,113,0,107,105,102,99,112,104,107],
[99,116,104,0,104,100,96,109,121,107],
[100,115,106,107,0,105,99,116,97,102],
[111,113,109,111,106,0,99,126,97,115],
[99,120,112,115,112,112,0,107,112,103],
[101,102,99,102,95,85,104,0,102,94],
[104,113,107,90,114,114,99,109,0,102],
[92,107,104,104,109,96,108,117,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,111,103,93,102,103,85,111,96],
[114,0,113,115,99,110,121,101,100,104],
[100,98,0,94,93,115,94,88,96,107],
[108,96,117,0,98,118,93,92,105,93],
[118,112,118,113,0,112,120,99,104,116],
[109,101,96,93,99,0,119,102,94,111],
[108,90,117,118,91,92,0,85,110,93],
[126,110,123,119,112,109,126,0,103,101],
[100,111,115,106,107,117,101,108,0,105],
[115,107,104,118,95,100,118,110,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,85,117,116,95,94,86,94,97],
[118,0,100,125,111,97,92,88,109,93],
[126,111,0,128,112,111,103,104,108,103],
[94,86,83,0,96,63,85,76,86,89],
[95,100,99,115,0,89,90,102,85,96],
[116,114,100,148,122,0,114,101,113,100],
[117,119,108,126,121,97,0,97,129,121],
[125,123,107,135,109,110,114,0,120,104],
[117,102,103,125,126,98,82,91,0,102],
[114,118,108,122,115,111,90,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,113,107,106,105,118,116,101,134],
[95,0,107,96,96,110,101,111,98,111],
[98,104,0,108,92,102,112,105,96,108],
[104,115,103,0,89,122,115,112,96,110],
[105,115,119,122,0,115,114,108,117,115],
[106,101,109,89,96,0,112,110,100,124],
[93,110,99,96,97,99,0,110,101,104],
[95,100,106,99,103,101,101,0,105,125],
[110,113,115,115,94,111,110,106,0,106],
[77,100,103,101,96,87,107,86,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,116,109,114,108,109,105,120,115],
[118,0,111,104,113,118,108,103,125,129],
[95,100,0,111,99,111,89,101,106,101],
[102,107,100,0,98,114,91,102,115,120],
[97,98,112,113,0,115,121,119,115,116],
[103,93,100,97,96,0,99,99,104,99],
[102,103,122,120,90,112,0,118,119,120],
[106,108,110,109,92,112,93,0,102,110],
[91,86,105,96,96,107,92,109,0,111],
[96,82,110,91,95,112,91,101,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,99,112,102,129,132,105,120,130],
[103,0,107,104,96,112,112,94,112,100],
[112,104,0,104,101,122,125,97,116,107],
[99,107,107,0,96,115,112,105,120,104],
[109,115,110,115,0,108,124,92,119,108],
[82,99,89,96,103,0,103,94,101,98],
[79,99,86,99,87,108,0,95,100,82],
[106,117,114,106,119,117,116,0,121,102],
[91,99,95,91,92,110,111,90,0,94],
[81,111,104,107,103,113,129,109,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,121,119,114,108,121,103,113,115],
[101,0,112,112,111,102,102,115,112,97],
[90,99,0,86,103,101,96,98,107,97],
[92,99,125,0,101,100,99,111,111,99],
[97,100,108,110,0,102,102,114,107,103],
[103,109,110,111,109,0,111,114,114,106],
[90,109,115,112,109,100,0,106,108,112],
[108,96,113,100,97,97,105,0,115,96],
[98,99,104,100,104,97,103,96,0,98],
[96,114,114,112,108,105,99,115,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,117,93,103,102,99,98,110,105],
[104,0,113,105,112,114,110,110,109,112],
[94,98,0,107,106,98,102,111,102,95],
[118,106,104,0,98,113,105,107,114,111],
[108,99,105,113,0,108,104,101,110,115],
[109,97,113,98,103,0,100,100,102,107],
[112,101,109,106,107,111,0,110,107,108],
[113,101,100,104,110,111,101,0,100,94],
[101,102,109,97,101,109,104,111,0,114],
[106,99,116,100,96,104,103,117,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,117,106,105,118,107,106,106,109],
[106,0,111,101,120,123,97,102,107,108],
[94,100,0,103,103,108,90,101,109,99],
[105,110,108,0,117,123,103,113,118,105],
[106,91,108,94,0,111,96,103,92,98],
[93,88,103,88,100,0,103,109,95,96],
[104,114,121,108,115,108,0,119,111,104],
[105,109,110,98,108,102,92,0,103,98],
[105,104,102,93,119,116,100,108,0,96],
[102,103,112,106,113,115,107,113,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,139,139,92,117,162,163,139,140],
[93,0,140,70,139,93,116,116,140,94],
[72,71,0,95,70,95,164,95,94,142],
[72,141,116,0,116,116,166,118,140,116],
[119,72,141,95,0,118,141,142,141,96],
[94,118,116,95,93,0,164,165,139,119],
[49,95,47,45,70,47,0,72,70,70],
[48,95,116,93,69,46,139,0,116,93],
[72,71,117,71,70,72,141,95,0,95],
[71,117,69,95,115,92,141,118,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,103,89,101,109,96,102,105,101],
[97,0,102,99,105,102,99,87,97,91],
[108,109,0,99,103,99,104,97,96,103],
[122,112,112,0,108,113,126,101,108,115],
[110,106,108,103,0,107,107,104,104,94],
[102,109,112,98,104,0,104,114,105,100],
[115,112,107,85,104,107,0,113,107,100],
[109,124,114,110,107,97,98,0,96,104],
[106,114,115,103,107,106,104,115,0,96],
[110,120,108,96,117,111,111,107,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,115,103,105,119,101,114,109,101],
[116,0,112,115,111,116,108,115,116,101],
[96,99,0,94,93,126,106,108,114,100],
[108,96,117,0,98,113,101,124,125,107],
[106,100,118,113,0,116,99,105,109,107],
[92,95,85,98,95,0,90,91,104,95],
[110,103,105,110,112,121,0,106,118,112],
[97,96,103,87,106,120,105,0,112,105],
[102,95,97,86,102,107,93,99,0,98],
[110,110,111,104,104,116,99,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,114,108,106,112,101,107,110,113],
[97,0,99,98,103,91,93,96,103,104],
[97,112,0,110,102,108,102,105,105,107],
[103,113,101,0,104,100,113,110,105,106],
[105,108,109,107,0,100,103,100,98,111],
[99,120,103,111,111,0,102,111,98,115],
[110,118,109,98,108,109,0,100,112,121],
[104,115,106,101,111,100,111,0,113,119],
[101,108,106,106,113,113,99,98,0,119],
[98,107,104,105,100,96,90,92,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,101,108,106,105,116,113,117,116],
[91,0,93,101,96,97,96,110,101,104],
[110,118,0,104,108,106,119,118,102,120],
[103,110,107,0,115,115,115,124,120,118],
[105,115,103,96,0,108,106,116,108,113],
[106,114,105,96,103,0,111,117,112,111],
[95,115,92,96,105,100,0,114,102,108],
[98,101,93,87,95,94,97,0,96,105],
[94,110,109,91,103,99,109,115,0,102],
[95,107,91,93,98,100,103,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,111,110,88,85,82,92,91,77],
[112,0,106,104,116,100,96,98,114,102],
[100,105,0,93,102,108,82,89,113,98],
[101,107,118,0,109,105,112,95,111,95],
[123,95,109,102,0,89,99,99,99,109],
[126,111,103,106,122,0,102,108,102,105],
[129,115,129,99,112,109,0,105,110,110],
[119,113,122,116,112,103,106,0,116,106],
[120,97,98,100,112,109,101,95,0,110],
[134,109,113,116,102,106,101,105,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,52,104,211,107,104,156,104,104],
[104,0,104,156,156,52,104,156,104,104],
[159,107,0,104,159,159,156,104,159,211],
[107,55,107,0,159,107,159,107,159,107],
[0,55,52,52,0,107,52,104,104,52],
[104,159,52,104,104,0,104,104,104,52],
[107,107,55,52,159,107,0,52,159,107],
[55,55,107,104,107,107,159,0,159,159],
[107,107,52,52,107,107,52,52,0,107],
[107,107,0,104,159,159,104,52,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,110,111,110,110,100,121,129,121],
[95,0,113,102,105,89,101,112,99,97],
[101,98,0,99,87,102,103,109,100,106],
[100,109,112,0,110,102,98,103,105,110],
[101,106,124,101,0,105,103,128,117,119],
[101,122,109,109,106,0,109,122,120,112],
[111,110,108,113,108,102,0,119,103,111],
[90,99,102,108,83,89,92,0,98,102],
[82,112,111,106,94,91,108,113,0,103],
[90,114,105,101,92,99,100,109,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,83,88,100,96,94,90,103,80],
[107,0,98,105,108,101,88,90,103,82],
[128,113,0,101,123,110,99,100,118,108],
[123,106,110,0,113,103,111,101,105,104],
[111,103,88,98,0,109,96,95,103,97],
[115,110,101,108,102,0,87,102,116,95],
[117,123,112,100,115,124,0,102,111,97],
[121,121,111,110,116,109,109,0,113,104],
[108,108,93,106,108,95,100,98,0,105],
[131,129,103,107,114,116,114,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,107,110,107,110,97,103,107],
[99,0,97,101,111,119,103,96,110,101],
[100,114,0,97,111,116,106,92,115,107],
[104,110,114,0,116,103,107,98,100,109],
[101,100,100,95,0,112,113,105,105,103],
[104,92,95,108,99,0,107,93,94,102],
[101,108,105,104,98,104,0,93,103,100],
[114,115,119,113,106,118,118,0,114,104],
[108,101,96,111,106,117,108,97,0,107],
[104,110,104,102,108,109,111,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,103,116,128,107,114,111,115,105],
[117,0,116,113,117,103,101,109,123,114],
[108,95,0,114,108,98,100,107,120,92],
[95,98,97,0,108,96,115,88,120,100],
[83,94,103,103,0,103,84,95,116,97],
[104,108,113,115,108,0,114,101,111,106],
[97,110,111,96,127,97,0,101,134,98],
[100,102,104,123,116,110,110,0,119,98],
[96,88,91,91,95,100,77,92,0,86],
[106,97,119,111,114,105,113,113,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,121,98,115,121,104,126,108,89],
[102,0,102,91,93,103,94,111,103,95],
[90,109,0,104,99,108,90,105,92,92],
[113,120,107,0,110,124,108,120,102,116],
[96,118,112,101,0,127,101,123,100,102],
[90,108,103,87,84,0,96,98,90,97],
[107,117,121,103,110,115,0,121,102,118],
[85,100,106,91,88,113,90,0,99,88],
[103,108,119,109,111,121,109,112,0,92],
[122,116,119,95,109,114,93,123,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,96,105,106,104,115,116,117,117],
[99,0,113,107,103,102,108,113,109,112],
[115,98,0,105,109,100,117,107,100,112],
[106,104,106,0,105,99,104,111,113,103],
[105,108,102,106,0,111,115,123,120,114],
[107,109,111,112,100,0,113,113,117,111],
[96,103,94,107,96,98,0,116,110,109],
[95,98,104,100,88,98,95,0,112,106],
[94,102,111,98,91,94,101,99,0,103],
[94,99,99,108,97,100,102,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,115,110,103,127,115,111,108],
[107,0,107,95,123,106,108,103,98,103],
[100,104,0,98,109,102,105,98,101,90],
[96,116,113,0,112,95,110,103,104,112],
[101,88,102,99,0,90,106,96,94,91],
[108,105,109,116,121,0,110,104,106,89],
[84,103,106,101,105,101,0,101,87,92],
[96,108,113,108,115,107,110,0,109,113],
[100,113,110,107,117,105,124,102,0,97],
[103,108,121,99,120,122,119,98,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,117,110,100,108,112,119,102,109],
[99,0,102,105,92,101,106,102,106,91],
[94,109,0,103,95,93,103,107,106,101],
[101,106,108,0,94,109,112,115,108,104],
[111,119,116,117,0,104,112,124,114,114],
[103,110,118,102,107,0,100,116,107,110],
[99,105,108,99,99,111,0,109,107,108],
[92,109,104,96,87,95,102,0,104,104],
[109,105,105,103,97,104,104,107,0,103],
[102,120,110,107,97,101,103,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,144,132,105,128,125,111,130,105],
[102,0,122,111,90,95,106,114,117,87],
[67,89,0,109,89,91,101,98,119,84],
[79,100,102,0,94,76,95,100,105,76],
[106,121,122,117,0,105,111,104,127,105],
[83,116,120,135,106,0,112,103,108,106],
[86,105,110,116,100,99,0,105,123,99],
[100,97,113,111,107,108,106,0,111,93],
[81,94,92,106,84,103,88,100,0,88],
[106,124,127,135,106,105,112,118,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,104,100,97,100,103,106,111,116],
[105,0,100,110,112,101,109,111,113,107],
[107,111,0,112,103,112,98,110,112,117],
[111,101,99,0,96,101,95,105,110,109],
[114,99,108,115,0,101,113,114,118,125],
[111,110,99,110,110,0,104,116,104,111],
[108,102,113,116,98,107,0,106,110,110],
[105,100,101,106,97,95,105,0,111,119],
[100,98,99,101,93,107,101,100,0,111],
[95,104,94,102,86,100,101,92,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,118,110,110,113,107,108,105,107],
[111,0,121,102,110,112,107,107,105,99],
[93,90,0,96,91,95,80,87,95,76],
[101,109,115,0,96,91,99,98,96,97],
[101,101,120,115,0,103,99,90,106,94],
[98,99,116,120,108,0,98,101,105,89],
[104,104,131,112,112,113,0,107,98,106],
[103,104,124,113,121,110,104,0,115,109],
[106,106,116,115,105,106,113,96,0,103],
[104,112,135,114,117,122,105,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,97,111,103,122,101,98,104,121],
[115,0,120,107,108,117,105,106,117,120],
[114,91,0,103,106,115,106,97,103,108],
[100,104,108,0,107,114,104,103,101,108],
[108,103,105,104,0,118,102,97,103,114],
[89,94,96,97,93,0,89,81,91,111],
[110,106,105,107,109,122,0,103,113,116],
[113,105,114,108,114,130,108,0,110,121],
[107,94,108,110,108,120,98,101,0,123],
[90,91,103,103,97,100,95,90,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,94,91,96,96,111,105,115,89],
[105,0,93,80,101,93,103,93,107,105],
[117,118,0,114,107,105,117,108,112,109],
[120,131,97,0,115,119,122,115,117,103],
[115,110,104,96,0,110,125,99,116,106],
[115,118,106,92,101,0,116,101,116,103],
[100,108,94,89,86,95,0,101,96,95],
[106,118,103,96,112,110,110,0,113,107],
[96,104,99,94,95,95,115,98,0,96],
[122,106,102,108,105,108,116,104,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,102,110,120,116,103,121,114],
[104,0,120,100,99,107,107,100,105,108],
[104,91,0,100,106,107,102,103,102,96],
[109,111,111,0,101,115,107,117,111,107],
[101,112,105,110,0,100,98,102,106,110],
[91,104,104,96,111,0,102,110,110,100],
[95,104,109,104,113,109,0,100,102,106],
[108,111,108,94,109,101,111,0,113,102],
[90,106,109,100,105,101,109,98,0,104],
[97,103,115,104,101,111,105,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,135,122,104,110,108,128,98,128],
[94,0,111,97,105,105,96,110,99,93],
[76,100,0,95,105,95,105,118,92,102],
[89,114,116,0,117,106,115,115,100,112],
[107,106,106,94,0,96,100,101,90,100],
[101,106,116,105,115,0,90,104,100,110],
[103,115,106,96,111,121,0,122,115,103],
[83,101,93,96,110,107,89,0,98,104],
[113,112,119,111,121,111,96,113,0,100],
[83,118,109,99,111,101,108,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,115,100,102,109,112,109,117,89],
[103,0,107,113,94,107,99,110,114,109],
[96,104,0,107,104,101,115,111,117,110],
[111,98,104,0,107,103,106,105,104,102],
[109,117,107,104,0,106,123,115,107,97],
[102,104,110,108,105,0,122,107,114,99],
[99,112,96,105,88,89,0,101,112,106],
[102,101,100,106,96,104,110,0,106,109],
[94,97,94,107,104,97,99,105,0,103],
[122,102,101,109,114,112,105,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,121,115,111,126,98,108,117,104],
[102,0,145,109,98,107,113,102,112,111],
[90,66,0,82,98,81,86,92,102,93],
[96,102,129,0,98,96,110,96,118,101],
[100,113,113,113,0,118,123,96,103,108],
[85,104,130,115,93,0,111,93,124,102],
[113,98,125,101,88,100,0,98,109,105],
[103,109,119,115,115,118,113,0,114,97],
[94,99,109,93,108,87,102,97,0,93],
[107,100,118,110,103,109,106,114,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,128,113,119,106,123,116,103,111],
[96,0,110,107,110,120,118,97,120,99],
[83,101,0,80,102,96,104,91,101,78],
[98,104,131,0,118,106,116,94,120,99],
[92,101,109,93,0,109,99,97,92,74],
[105,91,115,105,102,0,122,100,123,96],
[88,93,107,95,112,89,0,78,94,71],
[95,114,120,117,114,111,133,0,125,109],
[108,91,110,91,119,88,117,86,0,99],
[100,112,133,112,137,115,140,102,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,123,126,89,109,107,119,113,100],
[84,0,128,120,96,110,78,93,101,107],
[88,83,0,107,104,90,75,82,110,95],
[85,91,104,0,90,103,75,98,87,90],
[122,115,107,121,0,110,102,106,110,117],
[102,101,121,108,101,0,83,108,112,94],
[104,133,136,136,109,128,0,99,118,110],
[92,118,129,113,105,103,112,0,113,100],
[98,110,101,124,101,99,93,98,0,99],
[111,104,116,121,94,117,101,111,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,45,77,103,119,76,89,47,106],
[135,0,107,137,134,121,107,105,106,137],
[166,104,0,136,88,105,106,88,60,151],
[134,74,75,0,119,136,134,120,45,105],
[108,77,123,92,0,90,60,75,15,122],
[92,90,106,75,121,0,91,89,78,120],
[135,104,105,77,151,120,0,75,47,119],
[122,106,123,91,136,122,136,0,92,135],
[164,105,151,166,196,133,164,119,0,166],
[105,74,60,106,89,91,92,76,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,115,98,111,116,109,106,100,101],
[87,0,112,80,97,97,99,89,100,91],
[96,99,0,89,104,99,96,101,95,88],
[113,131,122,0,107,115,101,104,110,103],
[100,114,107,104,0,112,102,103,100,104],
[95,114,112,96,99,0,106,103,100,94],
[102,112,115,110,109,105,0,111,108,105],
[105,122,110,107,108,108,100,0,98,101],
[111,111,116,101,111,111,103,113,0,109],
[110,120,123,108,107,117,106,110,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,103,108,106,103,97,107,114,94],
[110,0,105,113,104,103,101,117,103,111],
[108,106,0,99,101,100,98,109,112,95],
[103,98,112,0,108,105,101,107,116,98],
[105,107,110,103,0,104,107,109,114,93],
[108,108,111,106,107,0,109,109,107,98],
[114,110,113,110,104,102,0,115,114,102],
[104,94,102,104,102,102,96,0,107,91],
[97,108,99,95,97,104,97,104,0,95],
[117,100,116,113,118,113,109,120,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,91,102,87,77,111,114,109,100],
[102,0,90,91,92,94,96,106,109,105],
[120,121,0,87,112,114,113,132,118,101],
[109,120,124,0,113,104,118,99,132,109],
[124,119,99,98,0,99,123,105,118,102],
[134,117,97,107,112,0,131,114,121,119],
[100,115,98,93,88,80,0,98,123,103],
[97,105,79,112,106,97,113,0,113,109],
[102,102,93,79,93,90,88,98,0,118],
[111,106,110,102,109,92,108,102,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,104,104,128,114,104,105,110,101],
[96,0,119,96,99,124,117,103,102,97],
[107,92,0,100,121,113,113,94,92,112],
[107,115,111,0,116,114,96,95,124,91],
[83,112,90,95,0,121,111,111,99,91],
[97,87,98,97,90,0,100,90,91,78],
[107,94,98,115,100,111,0,108,120,95],
[106,108,117,116,100,121,103,0,117,93],
[101,109,119,87,112,120,91,94,0,81],
[110,114,99,120,120,133,116,118,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,123,139,159,123,107,159,176,89],
[0,0,69,88,90,88,52,90,87,34],
[88,142,0,124,109,108,107,126,160,123],
[72,123,87,0,108,72,88,107,159,106],
[52,121,102,103,0,84,50,69,85,50],
[88,123,103,139,127,0,70,126,157,86],
[104,159,104,123,161,141,0,107,123,105],
[52,121,85,104,142,85,104,0,140,86],
[35,124,51,52,126,54,88,71,0,88],
[122,177,88,105,161,125,106,125,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,111,96,113,99,110,102,108],
[103,0,100,106,102,99,106,102,96,95],
[102,111,0,115,103,112,112,117,92,112],
[100,105,96,0,100,120,108,108,96,103],
[115,109,108,111,0,106,105,114,105,99],
[98,112,99,91,105,0,103,107,109,108],
[112,105,99,103,106,108,0,111,100,111],
[101,109,94,103,97,104,100,0,96,99],
[109,115,119,115,106,102,111,115,0,110],
[103,116,99,108,112,103,100,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,102,104,121,106,108,105,101,107],
[113,0,99,103,110,97,103,96,109,108],
[109,112,0,113,107,102,120,119,118,119],
[107,108,98,0,109,112,110,129,119,107],
[90,101,104,102,0,94,100,87,108,113],
[105,114,109,99,117,0,111,111,108,115],
[103,108,91,101,111,100,0,102,104,115],
[106,115,92,82,124,100,109,0,106,110],
[110,102,93,92,103,103,107,105,0,113],
[104,103,92,104,98,96,96,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,127,113,116,115,113,117,119,107],
[108,0,120,122,112,95,116,132,126,97],
[84,91,0,93,95,87,92,93,100,83],
[98,89,118,0,108,90,105,121,113,77],
[95,99,116,103,0,101,101,112,115,99],
[96,116,124,121,110,0,108,127,106,96],
[98,95,119,106,110,103,0,121,116,96],
[94,79,118,90,99,84,90,0,96,82],
[92,85,111,98,96,105,95,115,0,89],
[104,114,128,134,112,115,115,129,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,125,90,103,104,148,94,107,126],
[97,0,104,104,111,90,113,106,100,101],
[86,107,0,91,101,110,148,106,89,122],
[121,107,120,0,99,101,142,113,105,129],
[108,100,110,112,0,108,133,109,89,127],
[107,121,101,110,103,0,131,100,110,138],
[63,98,63,69,78,80,0,102,72,86],
[117,105,105,98,102,111,109,0,92,123],
[104,111,122,106,122,101,139,119,0,123],
[85,110,89,82,84,73,125,88,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,96,120,106,103,110,100,126,95],
[99,0,113,112,115,112,102,102,115,92],
[115,98,0,109,124,102,104,109,110,102],
[91,99,102,0,132,115,104,99,116,93],
[105,96,87,79,0,100,96,98,107,88],
[108,99,109,96,111,0,120,112,104,108],
[101,109,107,107,115,91,0,107,88,96],
[111,109,102,112,113,99,104,0,108,88],
[85,96,101,95,104,107,123,103,0,109],
[116,119,109,118,123,103,115,123,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,109,121,101,106,106,118,128,114],
[98,0,104,119,100,106,103,114,119,112],
[102,107,0,116,93,106,103,121,112,112],
[90,92,95,0,86,92,91,102,102,102],
[110,111,118,125,0,114,102,110,122,117],
[105,105,105,119,97,0,105,106,118,107],
[105,108,108,120,109,106,0,115,119,118],
[93,97,90,109,101,105,96,0,119,106],
[83,92,99,109,89,93,92,92,0,99],
[97,99,99,109,94,104,93,105,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,109,126,105,104,111,101,112,109],
[97,0,94,108,108,102,104,101,111,103],
[102,117,0,109,102,108,109,102,115,111],
[85,103,102,0,108,102,101,96,105,100],
[106,103,109,103,0,100,100,96,106,106],
[107,109,103,109,111,0,112,108,116,112],
[100,107,102,110,111,99,0,108,114,116],
[110,110,109,115,115,103,103,0,113,116],
[99,100,96,106,105,95,97,98,0,114],
[102,108,100,111,105,99,95,95,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,121,107,105,103,106,118,121,98],
[107,0,131,122,116,111,105,113,124,118],
[90,80,0,92,88,90,95,96,102,90],
[104,89,119,0,92,100,103,103,124,93],
[106,95,123,119,0,89,102,106,119,102],
[108,100,121,111,122,0,95,114,113,100],
[105,106,116,108,109,116,0,117,115,104],
[93,98,115,108,105,97,94,0,117,102],
[90,87,109,87,92,98,96,94,0,91],
[113,93,121,118,109,111,107,109,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,91,101,97,101,98,106,99,125],
[117,0,101,112,116,107,110,98,105,106],
[120,110,0,114,114,113,104,113,122,121],
[110,99,97,0,106,111,93,118,97,112],
[114,95,97,105,0,93,106,103,113,105],
[110,104,98,100,118,0,107,103,107,104],
[113,101,107,118,105,104,0,100,119,122],
[105,113,98,93,108,108,111,0,106,110],
[112,106,89,114,98,104,92,105,0,112],
[86,105,90,99,106,107,89,101,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,101,105,106,108,103,100,109],
[110,0,118,99,113,103,119,104,101,111],
[109,93,0,107,113,96,102,104,101,101],
[110,112,104,0,101,100,105,98,98,107],
[106,98,98,110,0,98,99,104,104,110],
[105,108,115,111,113,0,114,104,104,100],
[103,92,109,106,112,97,0,106,98,100],
[108,107,107,113,107,107,105,0,105,109],
[111,110,110,113,107,107,113,106,0,96],
[102,100,110,104,101,111,111,102,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,89,66,94,88,82,112,98,92],
[120,0,104,91,116,98,75,94,88,98],
[122,107,0,99,112,111,98,123,106,107],
[145,120,112,0,113,105,116,105,123,107],
[117,95,99,98,0,82,90,103,85,87],
[123,113,100,106,129,0,108,118,99,89],
[129,136,113,95,121,103,0,123,90,122],
[99,117,88,106,108,93,88,0,93,105],
[113,123,105,88,126,112,121,118,0,102],
[119,113,104,104,124,122,89,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,88,81,105,101,98,89,108,109],
[107,0,89,100,110,123,101,112,122,128],
[123,122,0,90,119,118,125,99,123,132],
[130,111,121,0,106,117,123,96,124,129],
[106,101,92,105,0,102,109,88,113,104],
[110,88,93,94,109,0,88,90,110,112],
[113,110,86,88,102,123,0,92,108,126],
[122,99,112,115,123,121,119,0,138,132],
[103,89,88,87,98,101,103,73,0,88],
[102,83,79,82,107,99,85,79,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,119,119,110,109,107,104,112,111],
[94,0,114,114,118,105,105,106,103,107],
[92,97,0,92,92,94,98,86,86,86],
[92,97,119,0,112,115,102,102,103,107],
[101,93,119,99,0,102,88,86,97,95],
[102,106,117,96,109,0,92,85,97,114],
[104,106,113,109,123,119,0,93,104,99],
[107,105,125,109,125,126,118,0,111,110],
[99,108,125,108,114,114,107,100,0,105],
[100,104,125,104,116,97,112,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,100,102,99,110,104,93,101],
[107,0,118,103,96,103,111,105,105,102],
[107,93,0,98,98,95,91,88,90,100],
[111,108,113,0,107,101,105,106,109,109],
[109,115,113,104,0,114,112,110,104,101],
[112,108,116,110,97,0,105,103,96,112],
[101,100,120,106,99,106,0,97,99,104],
[107,106,123,105,101,108,114,0,102,101],
[118,106,121,102,107,115,112,109,0,107],
[110,109,111,102,110,99,107,110,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,107,85,92,96,93,103,96,104],
[110,0,115,103,107,117,102,117,98,105],
[104,96,0,88,91,94,84,105,86,98],
[126,108,123,0,107,111,103,123,101,125],
[119,104,120,104,0,112,101,108,107,126],
[115,94,117,100,99,0,99,102,97,107],
[118,109,127,108,110,112,0,105,109,123],
[108,94,106,88,103,109,106,0,98,116],
[115,113,125,110,104,114,102,113,0,109],
[107,106,113,86,85,104,88,95,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,116,114,119,116,122,109,116],
[109,0,102,96,96,106,87,104,109,93],
[101,109,0,96,102,107,113,103,111,97],
[95,115,115,0,103,100,96,104,111,89],
[97,115,109,108,0,113,110,114,111,101],
[92,105,104,111,98,0,97,104,109,105],
[95,124,98,115,101,114,0,105,110,100],
[89,107,108,107,97,107,106,0,109,93],
[102,102,100,100,100,102,101,102,0,100],
[95,118,114,122,110,106,111,118,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,114,116,116,146,94,112,103,117],
[74,0,84,82,85,104,82,92,82,84],
[97,127,0,146,116,137,113,102,114,95],
[95,129,65,0,77,119,95,85,115,84],
[95,126,95,134,0,124,123,145,101,93],
[65,107,74,92,87,0,61,103,104,74],
[117,129,98,116,88,150,0,113,113,94],
[99,119,109,126,66,108,98,0,105,97],
[108,129,97,96,110,107,98,106,0,127],
[94,127,116,127,118,137,117,114,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,113,102,101,100,109,111,107],
[111,0,110,102,114,114,109,112,110,105],
[108,101,0,95,111,115,105,105,105,93],
[98,109,116,0,110,97,105,97,105,101],
[109,97,100,101,0,99,93,109,111,100],
[110,97,96,114,112,0,109,104,111,97],
[111,102,106,106,118,102,0,109,109,96],
[102,99,106,114,102,107,102,0,112,101],
[100,101,106,106,100,100,102,99,0,93],
[104,106,118,110,111,114,115,110,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,104,100,110,100,114,108,104,108],
[117,0,114,112,102,113,118,119,107,102],
[107,97,0,110,107,115,111,119,121,112],
[111,99,101,0,101,99,115,105,96,105],
[101,109,104,110,0,101,118,112,111,100],
[111,98,96,112,110,0,109,113,106,94],
[97,93,100,96,93,102,0,94,96,90],
[103,92,92,106,99,98,117,0,97,104],
[107,104,90,115,100,105,115,114,0,101],
[103,109,99,106,111,117,121,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,88,87,114,96,104,95,104,102],
[110,0,106,83,106,98,108,88,86,104],
[123,105,0,100,120,111,116,96,105,105],
[124,128,111,0,126,108,114,94,111,103],
[97,105,91,85,0,101,91,97,106,97],
[115,113,100,103,110,0,102,99,105,108],
[107,103,95,97,120,109,0,97,107,96],
[116,123,115,117,114,112,114,0,103,108],
[107,125,106,100,105,106,104,108,0,113],
[109,107,106,108,114,103,115,103,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,102,93,95,115,87,113,120,114],
[80,0,105,91,82,92,98,102,105,88],
[109,106,0,98,95,107,87,109,100,92],
[118,120,113,0,107,109,98,123,107,87],
[116,129,116,104,0,97,100,116,107,104],
[96,119,104,102,114,0,107,109,103,101],
[124,113,124,113,111,104,0,124,108,109],
[98,109,102,88,95,102,87,0,98,89],
[91,106,111,104,104,108,103,113,0,94],
[97,123,119,124,107,110,102,122,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,102,113,112,119,100,109,106,105],
[114,0,116,116,120,118,106,117,104,115],
[109,95,0,110,108,113,102,107,102,107],
[98,95,101,0,116,103,95,105,99,109],
[99,91,103,95,0,102,99,102,101,106],
[92,93,98,108,109,0,90,113,107,108],
[111,105,109,116,112,121,0,118,102,116],
[102,94,104,106,109,98,93,0,98,108],
[105,107,109,112,110,104,109,113,0,116],
[106,96,104,102,105,103,95,103,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,114,107,120,90,93,110,101,123],
[90,0,88,87,96,78,76,96,86,101],
[97,123,0,103,116,87,103,104,100,116],
[104,124,108,0,116,100,118,108,102,126],
[91,115,95,95,0,95,104,109,94,102],
[121,133,124,111,116,0,104,117,103,134],
[118,135,108,93,107,107,0,127,108,122],
[101,115,107,103,102,94,84,0,92,107],
[110,125,111,109,117,108,103,119,0,128],
[88,110,95,85,109,77,89,104,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,94,121,122,90,97,92,84],
[99,0,102,90,108,95,85,91,87,93],
[105,109,0,76,121,117,105,115,109,92],
[117,121,135,0,139,120,104,100,119,115],
[90,103,90,72,0,110,83,98,105,81],
[89,116,94,91,101,0,90,98,80,79],
[121,126,106,107,128,121,0,103,113,103],
[114,120,96,111,113,113,108,0,100,95],
[119,124,102,92,106,131,98,111,0,102],
[127,118,119,96,130,132,108,116,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,101,105,92,98,107,111,93,104],
[104,0,107,109,101,103,100,108,100,114],
[110,104,0,105,105,114,97,107,106,108],
[106,102,106,0,104,104,100,100,96,92],
[119,110,106,107,0,112,102,117,100,109],
[113,108,97,107,99,0,99,103,113,97],
[104,111,114,111,109,112,0,110,108,112],
[100,103,104,111,94,108,101,0,94,108],
[118,111,105,115,111,98,103,117,0,114],
[107,97,103,119,102,114,99,103,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,110,108,107,99,98,110,96,87],
[98,0,108,116,108,113,108,114,103,107],
[101,103,0,101,100,98,97,103,94,92],
[103,95,110,0,102,95,92,113,88,77],
[104,103,111,109,0,102,107,116,96,95],
[112,98,113,116,109,0,114,122,104,91],
[113,103,114,119,104,97,0,122,106,99],
[101,97,108,98,95,89,89,0,99,87],
[115,108,117,123,115,107,105,112,0,108],
[124,104,119,134,116,120,112,124,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,112,94,89,101,96,103,98,97],
[115,0,112,109,105,116,108,121,112,114],
[99,99,0,88,96,96,92,116,94,110],
[117,102,123,0,114,111,98,112,115,125],
[122,106,115,97,0,109,106,122,113,124],
[110,95,115,100,102,0,112,117,99,105],
[115,103,119,113,105,99,0,117,113,117],
[108,90,95,99,89,94,94,0,97,108],
[113,99,117,96,98,112,98,114,0,105],
[114,97,101,86,87,106,94,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,103,108,107,109,91,107,126,102],
[112,0,88,115,110,120,85,108,116,105],
[108,123,0,119,112,125,96,105,113,109],
[103,96,92,0,99,92,94,110,108,78],
[104,101,99,112,0,97,84,90,121,97],
[102,91,86,119,114,0,80,99,99,106],
[120,126,115,117,127,131,0,103,126,119],
[104,103,106,101,121,112,108,0,109,97],
[85,95,98,103,90,112,85,102,0,85],
[109,106,102,133,114,105,92,114,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,96,108,104,89,102,108,89,94],
[115,0,109,104,114,97,106,117,90,104],
[115,102,0,100,108,89,99,102,91,95],
[103,107,111,0,110,103,93,114,90,91],
[107,97,103,101,0,88,89,98,90,96],
[122,114,122,108,123,0,104,122,108,112],
[109,105,112,118,122,107,0,104,95,100],
[103,94,109,97,113,89,107,0,98,103],
[122,121,120,121,121,103,116,113,0,114],
[117,107,116,120,115,99,111,108,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,89,105,121,118,91,103,108,116],
[108,0,94,95,127,112,109,102,113,113],
[122,117,0,109,118,104,92,98,103,117],
[106,116,102,0,123,104,97,99,107,117],
[90,84,93,88,0,96,84,77,85,96],
[93,99,107,107,115,0,99,102,102,115],
[120,102,119,114,127,112,0,111,107,119],
[108,109,113,112,134,109,100,0,117,134],
[103,98,108,104,126,109,104,94,0,112],
[95,98,94,94,115,96,92,77,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,117,98,103,123,106,121,113,112],
[68,0,90,94,76,98,64,93,92,101],
[94,121,0,120,107,107,100,111,95,115],
[113,117,91,0,86,108,85,114,95,111],
[108,135,104,125,0,115,140,113,100,153],
[88,113,104,103,96,0,110,106,103,114],
[105,147,111,126,71,101,0,103,129,140],
[90,118,100,97,98,105,108,0,112,136],
[98,119,116,116,111,108,82,99,0,118],
[99,110,96,100,58,97,71,75,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,78,88,64,91,149,131,73],
[107,0,114,107,95,88,116,117,116,77],
[104,97,0,109,88,106,106,118,124,83],
[133,104,102,0,95,93,98,143,125,57],
[123,116,123,116,0,79,130,145,138,108],
[147,123,105,118,132,0,133,149,138,95],
[120,95,105,113,81,78,0,143,115,77],
[62,94,93,68,66,62,68,0,94,68],
[80,95,87,86,73,73,96,117,0,43],
[138,134,128,154,103,116,134,143,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,95,83,95,118,95,108,109,83],
[113,0,60,100,100,76,82,103,92,75],
[116,151,0,94,103,67,116,100,113,94],
[128,111,117,0,97,89,129,135,99,130],
[116,111,108,114,0,121,103,96,124,108],
[93,135,144,122,90,0,93,111,124,104],
[116,129,95,82,108,118,0,111,106,90],
[103,108,111,76,115,100,100,0,85,86],
[102,119,98,112,87,87,105,126,0,93],
[128,136,117,81,103,107,121,125,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,102,97,96,96,100,98,105,91],
[121,0,119,105,107,102,119,114,110,105],
[109,92,0,102,102,94,95,98,114,97],
[114,106,109,0,103,96,98,109,114,99],
[115,104,109,108,0,102,102,108,115,102],
[115,109,117,115,109,0,117,103,108,104],
[111,92,116,113,109,94,0,111,111,107],
[113,97,113,102,103,108,100,0,113,106],
[106,101,97,97,96,103,100,98,0,100],
[120,106,114,112,109,107,104,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,93,76,89,92,101,92,88,99],
[122,0,87,105,109,114,114,119,108,127],
[118,124,0,104,98,123,143,120,114,121],
[135,106,107,0,110,141,125,113,104,137],
[122,102,113,101,0,130,117,104,98,123],
[119,97,88,70,81,0,99,73,85,105],
[110,97,68,86,94,112,0,89,69,107],
[119,92,91,98,107,138,122,0,115,130],
[123,103,97,107,113,126,142,96,0,135],
[112,84,90,74,88,106,104,81,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,120,143,106,157,123,101,123,141],
[19,0,71,110,73,88,51,70,18,54],
[91,140,0,109,109,124,123,126,90,126],
[68,101,102,0,51,70,52,68,50,52],
[105,138,102,160,0,122,87,84,50,105],
[54,123,87,141,89,0,35,105,35,86],
[88,160,88,159,124,176,0,123,123,142],
[110,141,85,143,127,106,88,0,72,108],
[88,193,121,161,161,176,88,139,0,142],
[70,157,85,159,106,125,69,103,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,96,102,107,107,108,107,101],
[104,0,107,91,99,102,108,102,103,101],
[106,104,0,90,111,109,114,110,108,104],
[115,120,121,0,105,110,114,116,113,111],
[109,112,100,106,0,107,111,109,114,107],
[104,109,102,101,104,0,115,108,98,116],
[104,103,97,97,100,96,0,101,94,93],
[103,109,101,95,102,103,110,0,98,108],
[104,108,103,98,97,113,117,113,0,108],
[110,110,107,100,104,95,118,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,95,110,113,111,102,110,109,118],
[102,0,99,96,111,106,98,95,100,103],
[116,112,0,114,115,110,101,112,111,112],
[101,115,97,0,109,107,102,104,108,104],
[98,100,96,102,0,109,102,101,112,116],
[100,105,101,104,102,0,100,111,103,104],
[109,113,110,109,109,111,0,118,103,124],
[101,116,99,107,110,100,93,0,112,114],
[102,111,100,103,99,108,108,99,0,102],
[93,108,99,107,95,107,87,97,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,113,105,104,113,111,95,108],
[111,0,106,116,101,106,114,111,105,114],
[108,105,0,115,103,96,109,107,100,101],
[98,95,96,0,96,94,112,91,100,107],
[106,110,108,115,0,103,113,105,110,107],
[107,105,115,117,108,0,117,109,109,115],
[98,97,102,99,98,94,0,101,102,94],
[100,100,104,120,106,102,110,0,106,106],
[116,106,111,111,101,102,109,105,0,119],
[103,97,110,104,104,96,117,105,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,92,111,104,106,97,125,130,116],
[111,0,107,123,118,104,100,125,145,125],
[119,104,0,109,112,115,104,105,133,122],
[100,88,102,0,94,109,104,111,121,104],
[107,93,99,117,0,102,112,112,145,107],
[105,107,96,102,109,0,98,104,129,113],
[114,111,107,107,99,113,0,112,132,114],
[86,86,106,100,99,107,99,0,117,109],
[81,66,78,90,66,82,79,94,0,75],
[95,86,89,107,104,98,97,102,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,115,107,122,112,110,119,99,112],
[98,0,103,108,117,109,98,113,98,101],
[96,108,0,110,120,104,97,106,85,112],
[104,103,101,0,109,122,117,104,95,88],
[89,94,91,102,0,123,110,94,89,101],
[99,102,107,89,88,0,95,113,97,121],
[101,113,114,94,101,116,0,121,120,101],
[92,98,105,107,117,98,90,0,101,108],
[112,113,126,116,122,114,91,110,0,120],
[99,110,99,123,110,90,110,103,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,115,106,118,80,103,91,121,107],
[101,0,116,109,120,99,120,100,115,100],
[96,95,0,108,103,84,111,107,102,100],
[105,102,103,0,120,102,103,99,106,104],
[93,91,108,91,0,94,91,100,90,85],
[131,112,127,109,117,0,111,105,118,115],
[108,91,100,108,120,100,0,90,107,96],
[120,111,104,112,111,106,121,0,114,108],
[90,96,109,105,121,93,104,97,0,103],
[104,111,111,107,126,96,115,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,111,106,123,138,130,96,105,114],
[84,0,73,92,89,100,93,82,90,83],
[100,138,0,107,110,116,104,104,100,123],
[105,119,104,0,131,107,108,104,99,130],
[88,122,101,80,0,122,99,119,113,110],
[73,111,95,104,89,0,99,88,95,104],
[81,118,107,103,112,112,0,109,95,111],
[115,129,107,107,92,123,102,0,107,115],
[106,121,111,112,98,116,116,104,0,121],
[97,128,88,81,101,107,100,96,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,130,130,102,116,105,119,130,112],
[92,0,96,99,99,96,88,93,106,88],
[81,115,0,107,90,88,105,94,119,86],
[81,112,104,0,78,92,96,95,121,81],
[109,112,121,133,0,117,116,120,140,101],
[95,115,123,119,94,0,101,108,114,103],
[106,123,106,115,95,110,0,120,124,104],
[92,118,117,116,91,103,91,0,126,87],
[81,105,92,90,71,97,87,85,0,82],
[99,123,125,130,110,108,107,124,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,108,95,125,107,122,111,107,115],
[90,0,90,100,94,109,117,105,91,106],
[103,121,0,105,100,120,130,116,112,111],
[116,111,106,0,114,108,124,105,106,116],
[86,117,111,97,0,99,118,93,110,106],
[104,102,91,103,112,0,107,111,102,116],
[89,94,81,87,93,104,0,104,86,104],
[100,106,95,106,118,100,107,0,91,119],
[104,120,99,105,101,109,125,120,0,114],
[96,105,100,95,105,95,107,92,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,138,137,116,120,99,129,126,110],
[94,0,128,124,113,102,104,126,108,109],
[73,83,0,108,82,72,71,92,88,78],
[74,87,103,0,83,79,82,109,95,84],
[95,98,129,128,0,104,104,115,104,118],
[91,109,139,132,107,0,105,111,120,107],
[112,107,140,129,107,106,0,131,121,100],
[82,85,119,102,96,100,80,0,109,106],
[85,103,123,116,107,91,90,102,0,106],
[101,102,133,127,93,104,111,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,93,86,96,120,103,115,109,111],
[119,0,98,107,101,118,117,113,124,128],
[118,113,0,102,123,113,125,129,116,120],
[125,104,109,0,127,128,118,114,110,116],
[115,110,88,84,0,99,94,119,96,107],
[91,93,98,83,112,0,105,104,101,98],
[108,94,86,93,117,106,0,100,101,116],
[96,98,82,97,92,107,111,0,111,118],
[102,87,95,101,115,110,110,100,0,121],
[100,83,91,95,104,113,95,93,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,141,141,140,71,141,211,141,141],
[140,0,211,140,140,211,211,211,70,211],
[70,0,0,70,70,71,211,211,70,70],
[70,71,141,0,70,141,211,211,70,141],
[71,71,141,141,0,71,141,141,141,141],
[140,0,140,70,140,0,140,140,70,70],
[70,0,0,0,70,71,0,141,70,70],
[0,0,0,0,70,71,70,0,70,70],
[70,141,141,141,70,141,141,141,0,141],
[70,0,141,70,70,141,141,141,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,112,116,111,113,94,118,114,101],
[94,0,98,107,122,101,96,115,111,103],
[99,113,0,113,118,105,98,114,107,106],
[95,104,98,0,120,99,102,114,102,105],
[100,89,93,91,0,93,88,94,87,96],
[98,110,106,112,118,0,106,115,107,113],
[117,115,113,109,123,105,0,114,106,107],
[93,96,97,97,117,96,97,0,100,103],
[97,100,104,109,124,104,105,111,0,101],
[110,108,105,106,115,98,104,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,120,103,100,98,102,106,114,100],
[107,0,102,96,93,92,98,94,101,98],
[91,109,0,95,85,97,87,97,98,99],
[108,115,116,0,101,107,104,109,105,100],
[111,118,126,110,0,103,108,109,116,101],
[113,119,114,104,108,0,111,108,102,109],
[109,113,124,107,103,100,0,109,119,106],
[105,117,114,102,102,103,102,0,113,107],
[97,110,113,106,95,109,92,98,0,107],
[111,113,112,111,110,102,105,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,96,100,100,89,112,90,106,109],
[136,0,118,116,117,107,123,102,123,115],
[115,93,0,111,108,97,129,107,113,108],
[111,95,100,0,90,109,118,112,99,108],
[111,94,103,121,0,106,126,105,129,106],
[122,104,114,102,105,0,129,105,117,114],
[99,88,82,93,85,82,0,94,92,92],
[121,109,104,99,106,106,117,0,114,103],
[105,88,98,112,82,94,119,97,0,100],
[102,96,103,103,105,97,119,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,87,90,113,121,95,101,124,99],
[85,0,84,74,87,100,98,80,90,87],
[124,127,0,104,110,117,105,115,131,134],
[121,137,107,0,95,123,98,87,121,127],
[98,124,101,116,0,107,109,80,105,118],
[90,111,94,88,104,0,109,84,132,81],
[116,113,106,113,102,102,0,103,134,105],
[110,131,96,124,131,127,108,0,125,124],
[87,121,80,90,106,79,77,86,0,92],
[112,124,77,84,93,130,106,87,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,109,117,106,111,98,115,103,110],
[95,0,105,103,109,104,99,115,102,94],
[102,106,0,111,106,108,100,99,107,110],
[94,108,100,0,100,112,92,97,98,102],
[105,102,105,111,0,107,96,104,98,104],
[100,107,103,99,104,0,102,105,93,107],
[113,112,111,119,115,109,0,117,104,104],
[96,96,112,114,107,106,94,0,109,89],
[108,109,104,113,113,118,107,102,0,98],
[101,117,101,109,107,104,107,122,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,88,124,110,106,132,98,112,123],
[85,0,68,99,107,88,124,81,105,128],
[123,143,0,127,131,105,142,125,111,143],
[87,112,84,0,104,89,108,83,111,115],
[101,104,80,107,0,95,119,108,106,116],
[105,123,106,122,116,0,140,107,148,138],
[79,87,69,103,92,71,0,93,100,101],
[113,130,86,128,103,104,118,0,132,127],
[99,106,100,100,105,63,111,79,0,111],
[88,83,68,96,95,73,110,84,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,116,116,111,115,113,130,122,122],
[106,0,107,104,111,116,115,108,130,121],
[95,104,0,101,105,114,108,109,117,115],
[95,107,110,0,104,113,97,113,123,120],
[100,100,106,107,0,106,103,109,123,114],
[96,95,97,98,105,0,99,113,116,105],
[98,96,103,114,108,112,0,116,115,115],
[81,103,102,98,102,98,95,0,112,105],
[89,81,94,88,88,95,96,99,0,106],
[89,90,96,91,97,106,96,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,115,125,133,112,107,102,100,125],
[101,0,90,114,99,105,90,102,83,105],
[96,121,0,108,118,103,95,91,105,117],
[86,97,103,0,103,109,89,93,80,105],
[78,112,93,108,0,90,86,85,96,96],
[99,106,108,102,121,0,95,101,96,112],
[104,121,116,122,125,116,0,113,107,117],
[109,109,120,118,126,110,98,0,98,111],
[111,128,106,131,115,115,104,113,0,130],
[86,106,94,106,115,99,94,100,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,89,84,95,119,122,105,86,103],
[121,0,130,115,114,111,121,114,96,103],
[122,81,0,91,84,115,112,98,55,108],
[127,96,120,0,124,143,113,127,123,111],
[116,97,127,87,0,109,125,134,93,112],
[92,100,96,68,102,0,115,129,102,97],
[89,90,99,98,86,96,0,78,95,77],
[106,97,113,84,77,82,133,0,85,94],
[125,115,156,88,118,109,116,126,0,122],
[108,108,103,100,99,114,134,117,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,120,102,104,104,100,116,111,101],
[95,0,120,102,107,105,99,118,101,114],
[91,91,0,108,97,92,88,105,97,90],
[109,109,103,0,93,101,86,108,99,89],
[107,104,114,118,0,107,85,117,106,112],
[107,106,119,110,104,0,110,121,107,110],
[111,112,123,125,126,101,0,120,101,110],
[95,93,106,103,94,90,91,0,96,97],
[100,110,114,112,105,104,110,115,0,115],
[110,97,121,122,99,101,101,114,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,96,112,95,102,119,119,110,114],
[91,0,121,105,93,99,112,106,108,124],
[115,90,0,108,94,111,111,109,138,132],
[99,106,103,0,97,101,118,114,92,107],
[116,118,117,114,0,113,102,108,124,142],
[109,112,100,110,98,0,118,114,89,118],
[92,99,100,93,109,93,0,99,103,103],
[92,105,102,97,103,97,112,0,97,124],
[101,103,73,119,87,122,108,114,0,133],
[97,87,79,104,69,93,108,87,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,107,106,99,113,106,107,104],
[104,0,113,121,106,105,108,104,113,102],
[102,98,0,105,96,90,100,96,107,100],
[104,90,106,0,103,94,116,108,105,108],
[105,105,115,108,0,106,124,119,118,113],
[112,106,121,117,105,0,121,107,111,115],
[98,103,111,95,87,90,0,100,99,105],
[105,107,115,103,92,104,111,0,116,113],
[104,98,104,106,93,100,112,95,0,94],
[107,109,111,103,98,96,106,98,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,112,102,112,115,116,107,114,99],
[88,0,82,85,101,98,97,96,101,75],
[99,129,0,100,122,121,110,111,107,100],
[109,126,111,0,119,110,105,99,103,111],
[99,110,89,92,0,121,93,101,92,99],
[96,113,90,101,90,0,104,94,95,103],
[95,114,101,106,118,107,0,107,115,96],
[104,115,100,112,110,117,104,0,103,96],
[97,110,104,108,119,116,96,108,0,99],
[112,136,111,100,112,108,115,115,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,113,119,105,95,116,106,103,98],
[98,0,98,117,107,103,101,101,101,93],
[98,113,0,117,113,103,116,113,102,99],
[92,94,94,0,88,88,94,99,88,87],
[106,104,98,123,0,110,102,108,101,111],
[116,108,108,123,101,0,103,113,83,99],
[95,110,95,117,109,108,0,101,103,112],
[105,110,98,112,103,98,110,0,102,89],
[108,110,109,123,110,128,108,109,0,101],
[113,118,112,124,100,112,99,122,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,111,105,96,99,94,116,105,89],
[116,0,112,108,93,94,99,108,102,99],
[100,99,0,107,113,107,103,106,110,93],
[106,103,104,0,86,101,99,113,94,84],
[115,118,98,125,0,103,110,127,98,100],
[112,117,104,110,108,0,103,117,97,107],
[117,112,108,112,101,108,0,117,96,105],
[95,103,105,98,84,94,94,0,101,91],
[106,109,101,117,113,114,115,110,0,95],
[122,112,118,127,111,104,106,120,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,125,102,119,130,114,106,118],
[106,0,112,128,94,87,117,106,102,107],
[108,99,0,94,116,77,123,92,107,91],
[86,83,117,0,99,92,110,91,99,103],
[109,117,95,112,0,113,96,99,105,115],
[92,124,134,119,98,0,115,111,117,115],
[81,94,88,101,115,96,0,84,94,105],
[97,105,119,120,112,100,127,0,119,102],
[105,109,104,112,106,94,117,92,0,96],
[93,104,120,108,96,96,106,109,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,116,99,95,101,85,113,91,83],
[102,0,110,99,111,113,96,103,91,99],
[95,101,0,96,94,113,90,99,97,90],
[112,112,115,0,119,103,114,121,102,109],
[116,100,117,92,0,99,95,106,99,95],
[110,98,98,108,112,0,91,115,103,98],
[126,115,121,97,116,120,0,100,117,112],
[98,108,112,90,105,96,111,0,94,106],
[120,120,114,109,112,108,94,117,0,95],
[128,112,121,102,116,113,99,105,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,112,99,108,101,106,92,108,108],
[110,0,110,111,107,104,100,84,112,116],
[99,101,0,91,102,100,91,98,95,97],
[112,100,120,0,101,102,103,102,102,102],
[103,104,109,110,0,113,104,107,118,117],
[110,107,111,109,98,0,104,99,101,92],
[105,111,120,108,107,107,0,93,96,102],
[119,127,113,109,104,112,118,0,117,104],
[103,99,116,109,93,110,115,94,0,109],
[103,95,114,109,94,119,109,107,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,116,130,125,126,114,112,132,127],
[108,0,125,122,121,109,98,117,113,121],
[95,86,0,105,112,106,93,105,110,101],
[81,89,106,0,100,98,95,93,94,105],
[86,90,99,111,0,96,87,76,101,96],
[85,102,105,113,115,0,95,107,107,101],
[97,113,118,116,124,116,0,100,98,123],
[99,94,106,118,135,104,111,0,114,118],
[79,98,101,117,110,104,113,97,0,103],
[84,90,110,106,115,110,88,93,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,132,111,120,126,126,117,123,116],
[109,0,121,111,105,90,105,120,109,113],
[79,90,0,87,110,97,103,104,100,108],
[100,100,124,0,121,102,131,114,122,115],
[91,106,101,90,0,85,110,104,118,103],
[85,121,114,109,126,0,120,119,128,117],
[85,106,108,80,101,91,0,99,117,103],
[94,91,107,97,107,92,112,0,110,95],
[88,102,111,89,93,83,94,101,0,106],
[95,98,103,96,108,94,108,116,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,88,91,95,94,110,86,109,95],
[101,0,103,95,112,106,122,97,108,97],
[123,108,0,102,111,105,129,98,109,112],
[120,116,109,0,117,126,140,100,101,111],
[116,99,100,94,0,109,127,110,93,109],
[117,105,106,85,102,0,116,113,96,92],
[101,89,82,71,84,95,0,95,86,82],
[125,114,113,111,101,98,116,0,98,85],
[102,103,102,110,118,115,125,113,0,84],
[116,114,99,100,102,119,129,126,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,88,104,112,95,107,109,111,113],
[96,0,82,73,103,96,120,91,109,88],
[123,129,0,115,122,118,128,120,123,105],
[107,138,96,0,118,112,136,107,122,94],
[99,108,89,93,0,98,107,91,110,102],
[116,115,93,99,113,0,125,93,110,112],
[104,91,83,75,104,86,0,97,99,85],
[102,120,91,104,120,118,114,0,109,102],
[100,102,88,89,101,101,112,102,0,81],
[98,123,106,117,109,99,126,109,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,73,84,69,75,72,60,97,63],
[156,0,96,114,115,103,104,106,102,106],
[138,115,0,137,97,108,93,92,113,107],
[127,97,74,0,93,88,95,78,102,97],
[142,96,114,118,0,127,104,101,110,121],
[136,108,103,123,84,0,107,95,96,113],
[139,107,118,116,107,104,0,94,96,99],
[151,105,119,133,110,116,117,0,112,124],
[114,109,98,109,101,115,115,99,0,115],
[148,105,104,114,90,98,112,87,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,115,112,109,107,125,98,105,104],
[100,0,114,127,104,120,113,106,108,97],
[96,97,0,104,94,90,108,85,94,98],
[99,84,107,0,98,104,113,106,97,103],
[102,107,117,113,0,111,113,106,108,116],
[104,91,121,107,100,0,107,97,102,99],
[86,98,103,98,98,104,0,86,89,88],
[113,105,126,105,105,114,125,0,109,118],
[106,103,117,114,103,109,122,102,0,95],
[107,114,113,108,95,112,123,93,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,99,120,104,106,111,101,110],
[104,0,118,111,119,109,112,105,112,111],
[103,93,0,98,114,102,100,94,110,103],
[112,100,113,0,128,118,109,113,116,123],
[91,92,97,83,0,106,99,92,106,105],
[107,102,109,93,105,0,96,103,103,109],
[105,99,111,102,112,115,0,101,107,113],
[100,106,117,98,119,108,110,0,104,111],
[110,99,101,95,105,108,104,107,0,112],
[101,100,108,88,106,102,98,100,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,95,101,98,96,105,102,114,91],
[108,0,97,105,106,101,110,105,104,111],
[116,114,0,105,111,110,115,108,105,104],
[110,106,106,0,105,102,112,99,115,103],
[113,105,100,106,0,104,109,107,106,106],
[115,110,101,109,107,0,119,108,118,103],
[106,101,96,99,102,92,0,104,104,91],
[109,106,103,112,104,103,107,0,117,101],
[97,107,106,96,105,93,107,94,0,95],
[120,100,107,108,105,108,120,110,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,114,101,107,108,113,118,107,103],
[105,0,112,111,107,110,108,123,118,111],
[97,99,0,104,110,105,110,105,111,106],
[110,100,107,0,108,120,113,110,115,105],
[104,104,101,103,0,117,100,110,102,118],
[103,101,106,91,94,0,98,115,98,95],
[98,103,101,98,111,113,0,113,108,91],
[93,88,106,101,101,96,98,0,97,104],
[104,93,100,96,109,113,103,114,0,102],
[108,100,105,106,93,116,120,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,93,66,98,88,114,101,98,101],
[116,0,101,90,118,113,104,112,94,104],
[118,110,0,96,123,98,99,118,103,121],
[145,121,115,0,132,100,127,106,126,118],
[113,93,88,79,0,80,101,79,94,106],
[123,98,113,111,131,0,115,122,112,120],
[97,107,112,84,110,96,0,100,96,118],
[110,99,93,105,132,89,111,0,97,120],
[113,117,108,85,117,99,115,114,0,114],
[110,107,90,93,105,91,93,91,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,117,119,93,111,103,117,112,107],
[100,0,116,104,99,107,110,106,96,89],
[94,95,0,110,100,91,109,109,109,107],
[92,107,101,0,96,100,94,110,99,99],
[118,112,111,115,0,110,106,108,113,104],
[100,104,120,111,101,0,114,107,107,100],
[108,101,102,117,105,97,0,102,101,104],
[94,105,102,101,103,104,109,0,105,106],
[99,115,102,112,98,104,110,106,0,95],
[104,122,104,112,107,111,107,105,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,102,113,110,104,108,107,91],
[106,0,105,104,109,102,107,117,103,103],
[98,106,0,111,109,109,104,103,108,107],
[109,107,100,0,106,115,102,104,107,108],
[98,102,102,105,0,97,102,111,105,108],
[101,109,102,96,114,0,104,103,102,92],
[107,104,107,109,109,107,0,102,108,97],
[103,94,108,107,100,108,109,0,107,105],
[104,108,103,104,106,109,103,104,0,104],
[120,108,104,103,103,119,114,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,118,100,112,103,97,93,88,94],
[96,0,110,96,110,103,92,91,106,99],
[93,101,0,101,111,103,92,102,98,95],
[111,115,110,0,115,113,104,106,103,104],
[99,101,100,96,0,95,101,103,94,94],
[108,108,108,98,116,0,105,100,98,110],
[114,119,119,107,110,106,0,109,101,103],
[118,120,109,105,108,111,102,0,101,105],
[123,105,113,108,117,113,110,110,0,107],
[117,112,116,107,117,101,108,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,111,117,108,100,119,106,121,97],
[95,0,96,90,101,74,85,81,95,86],
[100,115,0,108,104,93,113,103,97,108],
[94,121,103,0,98,93,112,94,111,91],
[103,110,107,113,0,97,111,94,108,100],
[111,137,118,118,114,0,115,107,105,96],
[92,126,98,99,100,96,0,91,95,98],
[105,130,108,117,117,104,120,0,118,110],
[90,116,114,100,103,106,116,93,0,105],
[114,125,103,120,111,115,113,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,115,115,102,119,109,121,113,107],
[108,0,110,104,104,114,115,124,109,96],
[96,101,0,101,97,102,101,118,95,102],
[96,107,110,0,101,102,103,105,91,102],
[109,107,114,110,0,111,112,128,97,100],
[92,97,109,109,100,0,110,123,104,111],
[102,96,110,108,99,101,0,119,107,94],
[90,87,93,106,83,88,92,0,97,98],
[98,102,116,120,114,107,104,114,0,117],
[104,115,109,109,111,100,117,113,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,101,110,102,92,106,99,99,97],
[113,0,113,109,111,106,112,118,94,109],
[110,98,0,114,113,106,110,101,97,112],
[101,102,97,0,110,99,108,100,89,98],
[109,100,98,101,0,85,96,103,87,98],
[119,105,105,112,126,0,111,114,99,122],
[105,99,101,103,115,100,0,105,97,108],
[112,93,110,111,108,97,106,0,99,98],
[112,117,114,122,124,112,114,112,0,105],
[114,102,99,113,113,89,103,113,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,127,108,101,105,112,108,117,106],
[96,0,107,98,93,103,100,93,112,95],
[84,104,0,98,98,107,94,102,109,86],
[103,113,113,0,102,103,102,97,115,99],
[110,118,113,109,0,105,107,116,119,94],
[106,108,104,108,106,0,105,93,117,93],
[99,111,117,109,104,106,0,104,109,99],
[103,118,109,114,95,118,107,0,117,99],
[94,99,102,96,92,94,102,94,0,97],
[105,116,125,112,117,118,112,112,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,90,120,100,114,122,112,103],
[99,0,109,99,108,99,111,118,106,95],
[100,102,0,111,114,115,92,108,105,99],
[121,112,100,0,101,98,112,111,91,86],
[91,103,97,110,0,91,102,100,98,83],
[111,112,96,113,120,0,116,114,100,97],
[97,100,119,99,109,95,0,98,96,102],
[89,93,103,100,111,97,113,0,118,91],
[99,105,106,120,113,111,115,93,0,111],
[108,116,112,125,128,114,109,120,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,93,62,94,89,95,76,76,88],
[112,0,98,83,116,98,95,69,78,83],
[118,113,0,92,113,119,101,107,113,115],
[149,128,119,0,119,119,115,113,103,114],
[117,95,98,92,0,91,116,103,115,118],
[122,113,92,92,120,0,99,117,108,111],
[116,116,110,96,95,112,0,110,108,111],
[135,142,104,98,108,94,101,0,106,110],
[135,133,98,108,96,103,103,105,0,96],
[123,128,96,97,93,100,100,101,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,107,127,128,109,103,123,106,113],
[96,0,116,122,116,111,103,132,122,109],
[104,95,0,112,105,100,93,126,111,101],
[84,89,99,0,89,80,86,107,99,97],
[83,95,106,122,0,94,107,106,103,110],
[102,100,111,131,117,0,111,135,105,124],
[108,108,118,125,104,100,0,104,109,104],
[88,79,85,104,105,76,107,0,88,108],
[105,89,100,112,108,106,102,123,0,106],
[98,102,110,114,101,87,107,103,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,96,111,100,101,109,105,100,109],
[101,0,97,109,116,106,116,110,106,108],
[115,114,0,123,109,113,116,121,100,113],
[100,102,88,0,104,94,110,113,97,100],
[111,95,102,107,0,114,118,111,101,102],
[110,105,98,117,97,0,114,116,106,106],
[102,95,95,101,93,97,0,96,101,106],
[106,101,90,98,100,95,115,0,101,109],
[111,105,111,114,110,105,110,110,0,111],
[102,103,98,111,109,105,105,102,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,115,110,100,108,107,108,113,126],
[109,0,113,109,96,117,104,109,123,110],
[96,98,0,101,97,104,94,100,107,112],
[101,102,110,0,108,114,99,118,115,109],
[111,115,114,103,0,110,101,111,118,117],
[103,94,107,97,101,0,104,102,105,94],
[104,107,117,112,110,107,0,115,127,110],
[103,102,111,93,100,109,96,0,109,104],
[98,88,104,96,93,106,84,102,0,97],
[85,101,99,102,94,117,101,107,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,87,86,133,85,114,113,97,121],
[99,0,118,107,117,117,115,108,78,77],
[124,93,0,84,115,103,114,94,76,94],
[125,104,127,0,153,124,135,105,127,123],
[78,94,96,58,0,117,117,95,106,66],
[126,94,108,87,94,0,104,95,97,86],
[97,96,97,76,94,107,0,97,116,87],
[98,103,117,106,116,116,114,0,116,116],
[114,133,135,84,105,114,95,95,0,93],
[90,134,117,88,145,125,124,95,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,128,101,120,112,128,107,127,87],
[68,0,101,99,136,85,114,109,114,76],
[83,110,0,86,80,70,106,108,95,93],
[110,112,125,0,118,93,137,123,119,93],
[91,75,131,93,0,64,113,91,110,92],
[99,126,141,118,147,0,113,98,145,118],
[83,97,105,74,98,98,0,83,90,68],
[104,102,103,88,120,113,128,0,128,102],
[84,97,116,92,101,66,121,83,0,76],
[124,135,118,118,119,93,143,109,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,113,93,129,117,119,114,88,95],
[96,0,104,84,124,107,116,111,99,105],
[98,107,0,99,125,112,127,104,103,92],
[118,127,112,0,115,111,127,118,105,129],
[82,87,86,96,0,77,105,89,85,91],
[94,104,99,100,134,0,121,105,111,106],
[92,95,84,84,106,90,0,87,102,87],
[97,100,107,93,122,106,124,0,99,108],
[123,112,108,106,126,100,109,112,0,105],
[116,106,119,82,120,105,124,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,102,100,102,103,97,101,102,118],
[101,0,110,107,114,110,108,108,106,114],
[109,101,0,103,104,108,104,105,109,110],
[111,104,108,0,105,105,100,103,109,106],
[109,97,107,106,0,109,102,107,97,122],
[108,101,103,106,102,0,92,89,101,109],
[114,103,107,111,109,119,0,109,116,114],
[110,103,106,108,104,122,102,0,107,111],
[109,105,102,102,114,110,95,104,0,115],
[93,97,101,105,89,102,97,100,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,112,120,93,105,106,106,104,101],
[113,0,110,115,108,110,109,109,115,104],
[99,101,0,114,98,105,112,107,108,103],
[91,96,97,0,89,92,101,98,97,90],
[118,103,113,122,0,111,109,105,108,103],
[106,101,106,119,100,0,111,106,109,107],
[105,102,99,110,102,100,0,102,96,97],
[105,102,104,113,106,105,109,0,107,107],
[107,96,103,114,103,102,115,104,0,101],
[110,107,108,121,108,104,114,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,122,119,111,111,100,98,100,113],
[100,0,100,110,93,107,102,92,112,89],
[89,111,0,101,115,98,99,101,103,105],
[92,101,110,0,95,91,93,99,102,96],
[100,118,96,116,0,105,102,106,110,92],
[100,104,113,120,106,0,97,112,107,109],
[111,109,112,118,109,114,0,111,119,102],
[113,119,110,112,105,99,100,0,120,102],
[111,99,108,109,101,104,92,91,0,95],
[98,122,106,115,119,102,109,109,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,89,101,98,95,96,102,96,98],
[122,0,113,98,103,104,111,105,112,102],
[122,98,0,103,105,113,113,121,106,105],
[110,113,108,0,104,108,105,106,106,107],
[113,108,106,107,0,101,105,105,103,98],
[116,107,98,103,110,0,102,116,100,112],
[115,100,98,106,106,109,0,106,101,103],
[109,106,90,105,106,95,105,0,89,103],
[115,99,105,105,108,111,110,122,0,110],
[113,109,106,104,113,99,108,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,109,94,91,103,86,80,106,89],
[117,0,106,85,91,99,108,83,109,86],
[102,105,0,87,82,101,92,90,109,94],
[117,126,124,0,115,133,106,99,126,116],
[120,120,129,96,0,109,105,91,132,101],
[108,112,110,78,102,0,96,88,110,99],
[125,103,119,105,106,115,0,110,122,93],
[131,128,121,112,120,123,101,0,125,111],
[105,102,102,85,79,101,89,86,0,81],
[122,125,117,95,110,112,118,100,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,117,106,103,103,111,104,117,108],
[91,0,112,94,109,109,101,103,106,107],
[94,99,0,92,109,106,98,98,104,100],
[105,117,119,0,103,112,110,106,109,113],
[108,102,102,108,0,107,113,103,107,103],
[108,102,105,99,104,0,101,94,102,104],
[100,110,113,101,98,110,0,104,103,116],
[107,108,113,105,108,117,107,0,107,103],
[94,105,107,102,104,109,108,104,0,109],
[103,104,111,98,108,107,95,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,114,118,99,105,112,115,105,107],
[100,0,114,121,114,101,110,114,105,107],
[97,97,0,116,102,89,108,112,95,106],
[93,90,95,0,101,86,103,97,94,92],
[112,97,109,110,0,109,109,119,108,102],
[106,110,122,125,102,0,101,125,105,111],
[99,101,103,108,102,110,0,110,95,109],
[96,97,99,114,92,86,101,0,96,100],
[106,106,116,117,103,106,116,115,0,111],
[104,104,105,119,109,100,102,111,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,92,97,101,88,96,104,98,98],
[107,0,97,104,102,92,114,114,112,103],
[119,114,0,97,106,98,110,120,121,95],
[114,107,114,0,114,108,93,112,109,100],
[110,109,105,97,0,101,97,103,107,102],
[123,119,113,103,110,0,121,117,120,118],
[115,97,101,118,114,90,0,104,110,86],
[107,97,91,99,108,94,107,0,94,96],
[113,99,90,102,104,91,101,117,0,93],
[113,108,116,111,109,93,125,115,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,94,97,95,107,90,106,102,117],
[119,0,99,107,101,110,111,103,109,118],
[117,112,0,107,118,118,101,117,110,119],
[114,104,104,0,116,111,104,120,103,125],
[116,110,93,95,0,104,106,101,107,118],
[104,101,93,100,107,0,102,107,103,117],
[121,100,110,107,105,109,0,114,105,119],
[105,108,94,91,110,104,97,0,103,120],
[109,102,101,108,104,108,106,108,0,129],
[94,93,92,86,93,94,92,91,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,108,106,99,110,110,106,99,130],
[79,0,89,93,96,92,81,97,93,94],
[103,122,0,104,90,105,94,97,109,113],
[105,118,107,0,108,109,104,105,102,130],
[112,115,121,103,0,112,98,97,126,106],
[101,119,106,102,99,0,91,87,98,105],
[101,130,117,107,113,120,0,106,105,112],
[105,114,114,106,114,124,105,0,113,107],
[112,118,102,109,85,113,106,98,0,105],
[81,117,98,81,105,106,99,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,101,91,116,104,107,105,131,111],
[101,0,101,89,111,87,98,111,111,105],
[110,110,0,107,125,95,113,113,123,105],
[120,122,104,0,106,109,115,120,127,121],
[95,100,86,105,0,99,88,107,103,86],
[107,124,116,102,112,0,106,123,131,118],
[104,113,98,96,123,105,0,119,125,119],
[106,100,98,91,104,88,92,0,110,98],
[80,100,88,84,108,80,86,101,0,100],
[100,106,106,90,125,93,92,113,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,81,105,91,98,113,98,111],
[109,0,102,95,123,105,99,102,108,105],
[99,109,0,102,104,89,100,98,104,91],
[130,116,109,0,116,107,112,108,113,100],
[106,88,107,95,0,112,95,101,96,106],
[120,106,122,104,99,0,94,117,119,110],
[113,112,111,99,116,117,0,113,108,117],
[98,109,113,103,110,94,98,0,105,87],
[113,103,107,98,115,92,103,106,0,96],
[100,106,120,111,105,101,94,124,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,70,106,141,105,141,141,106,35],
[106,0,71,106,71,70,71,106,71,71],
[141,140,0,141,141,105,106,141,106,71],
[105,105,70,0,70,105,71,141,71,35],
[70,140,70,141,0,70,141,141,106,70],
[106,141,106,106,141,0,71,141,36,106],
[70,140,105,140,70,140,0,141,106,105],
[70,105,70,70,70,70,70,0,71,70],
[105,140,105,140,105,175,105,140,0,105],
[176,140,140,176,141,105,106,141,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,100,84,92,98,108,94,103,103],
[132,0,101,109,105,121,120,103,92,101],
[111,110,0,97,112,106,112,96,86,107],
[127,102,114,0,105,129,142,119,116,107],
[119,106,99,106,0,100,103,86,107,116],
[113,90,105,82,111,0,103,118,116,91],
[103,91,99,69,108,108,0,88,105,93],
[117,108,115,92,125,93,123,0,119,117],
[108,119,125,95,104,95,106,92,0,89],
[108,110,104,104,95,120,118,94,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,109,109,126,96,110,120,118,113],
[94,0,110,116,114,107,114,116,118,103],
[102,101,0,100,109,93,111,116,111,98],
[102,95,111,0,100,97,112,103,111,94],
[85,97,102,111,0,84,106,99,104,100],
[115,104,118,114,127,0,123,115,113,110],
[101,97,100,99,105,88,0,98,94,85],
[91,95,95,108,112,96,113,0,103,97],
[93,93,100,100,107,98,117,108,0,103],
[98,108,113,117,111,101,126,114,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,70,82,49,101,93,83,82,82],
[154,0,97,94,109,90,107,121,129,96],
[141,114,0,105,106,114,141,131,128,128],
[129,117,106,0,94,104,107,129,116,82],
[162,102,105,117,0,100,128,162,128,126],
[110,121,97,107,111,0,117,157,96,118],
[118,104,70,104,83,94,0,117,81,83],
[128,90,80,82,49,54,94,0,57,93],
[129,82,83,95,83,115,130,154,0,95],
[129,115,83,129,85,93,128,118,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,96,92,88,99,110,105,93,90],
[109,0,115,102,108,109,111,115,113,115],
[115,96,0,105,85,108,112,112,98,112],
[119,109,106,0,116,95,111,112,105,110],
[123,103,126,95,0,102,102,118,108,118],
[112,102,103,116,109,0,124,115,108,113],
[101,100,99,100,109,87,0,103,91,97],
[106,96,99,99,93,96,108,0,104,107],
[118,98,113,106,103,103,120,107,0,99],
[121,96,99,101,93,98,114,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,119,122,114,112,102,122,97,118],
[86,0,104,106,77,96,87,82,98,96],
[92,107,0,103,89,91,79,114,89,92],
[89,105,108,0,91,103,84,112,88,105],
[97,134,122,120,0,105,99,120,95,112],
[99,115,120,108,106,0,93,112,91,105],
[109,124,132,127,112,118,0,130,121,101],
[89,129,97,99,91,99,81,0,94,113],
[114,113,122,123,116,120,90,117,0,113],
[93,115,119,106,99,106,110,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,107,108,109,95,116,115,103,106],
[111,0,120,103,114,98,114,113,102,100],
[104,91,0,107,101,105,116,115,102,99],
[103,108,104,0,100,106,121,120,112,108],
[102,97,110,111,0,98,111,117,111,103],
[116,113,106,105,113,0,117,116,108,104],
[95,97,95,90,100,94,0,96,91,93],
[96,98,96,91,94,95,115,0,99,89],
[108,109,109,99,100,103,120,112,0,107],
[105,111,112,103,108,107,118,122,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,84,76,107,128,83,99,91,93],
[112,0,85,75,95,100,78,122,91,79],
[127,126,0,113,105,131,97,113,115,100],
[135,136,98,0,107,148,127,128,116,102],
[104,116,106,104,0,116,94,108,80,96],
[83,111,80,63,95,0,81,104,76,68],
[128,133,114,84,117,130,0,123,108,109],
[112,89,98,83,103,107,88,0,96,89],
[120,120,96,95,131,135,103,115,0,86],
[118,132,111,109,115,143,102,122,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,115,100,114,106,111,102,103,112],
[93,0,112,94,102,104,98,100,107,108],
[96,99,0,87,93,93,91,90,94,96],
[111,117,124,0,106,117,119,111,99,115],
[97,109,118,105,0,102,107,102,112,102],
[105,107,118,94,109,0,112,98,106,106],
[100,113,120,92,104,99,0,103,100,109],
[109,111,121,100,109,113,108,0,107,110],
[108,104,117,112,99,105,111,104,0,113],
[99,103,115,96,109,105,102,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,123,123,107,116,98,121,110,129],
[89,0,105,110,102,114,105,102,102,111],
[88,106,0,110,93,104,94,86,96,103],
[88,101,101,0,88,103,94,93,94,96],
[104,109,118,123,0,101,89,99,101,109],
[95,97,107,108,110,0,93,100,101,108],
[113,106,117,117,122,118,0,101,103,126],
[90,109,125,118,112,111,110,0,103,112],
[101,109,115,117,110,110,108,108,0,110],
[82,100,108,115,102,103,85,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,116,118,118,109,115,99,123],
[100,0,102,112,108,108,89,114,98,118],
[104,109,0,123,105,111,105,118,110,115],
[95,99,88,0,108,106,104,108,98,94],
[93,103,106,103,0,100,93,96,99,122],
[93,103,100,105,111,0,92,109,94,117],
[102,122,106,107,118,119,0,109,100,103],
[96,97,93,103,115,102,102,0,93,100],
[112,113,101,113,112,117,111,118,0,109],
[88,93,96,117,89,94,108,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,118,85,79,102,105,89,97,130],
[115,0,137,99,90,108,124,120,115,108],
[93,74,0,59,70,101,83,72,64,90],
[126,112,152,0,108,116,113,90,107,133],
[132,121,141,103,0,135,131,111,116,124],
[109,103,110,95,76,0,114,103,93,123],
[106,87,128,98,80,97,0,123,92,121],
[122,91,139,121,100,108,88,0,75,129],
[114,96,147,104,95,118,119,136,0,122],
[81,103,121,78,87,88,90,82,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,104,111,104,105,107,102,98,107],
[98,0,112,113,107,113,115,104,111,116],
[107,99,0,104,108,113,109,105,101,104],
[100,98,107,0,95,118,105,105,102,106],
[107,104,103,116,0,104,108,106,104,110],
[106,98,98,93,107,0,106,112,108,98],
[104,96,102,106,103,105,0,96,98,98],
[109,107,106,106,105,99,115,0,104,100],
[113,100,110,109,107,103,113,107,0,115],
[104,95,107,105,101,113,113,111,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,90,103,89,100,72,89,114],
[109,0,82,91,88,88,112,87,90,96],
[109,129,0,98,101,97,125,93,101,100],
[121,120,113,0,108,109,117,98,104,118],
[108,123,110,103,0,106,120,94,99,102],
[122,123,114,102,105,0,124,96,117,125],
[111,99,86,94,91,87,0,81,98,100],
[139,124,118,113,117,115,130,0,105,125],
[122,121,110,107,112,94,113,106,0,121],
[97,115,111,93,109,86,111,86,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,110,115,108,105,116,92,105,100],
[91,0,90,112,106,74,109,77,100,83],
[101,121,0,113,104,101,115,103,108,100],
[96,99,98,0,107,87,122,99,96,88],
[103,105,107,104,0,91,106,93,98,87],
[106,137,110,124,120,0,107,125,119,96],
[95,102,96,89,105,104,0,96,90,83],
[119,134,108,112,118,86,115,0,115,118],
[106,111,103,115,113,92,121,96,0,91],
[111,128,111,123,124,115,128,93,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,85,128,121,96,108,94,97,86],
[123,0,96,129,139,96,106,123,114,95],
[126,115,0,105,116,95,97,95,95,90],
[83,82,106,0,94,97,103,92,118,99],
[90,72,95,117,0,125,114,103,106,107],
[115,115,116,114,86,0,94,93,96,117],
[103,105,114,108,97,117,0,92,85,96],
[117,88,116,119,108,118,119,0,107,139],
[114,97,116,93,105,115,126,104,0,118],
[125,116,121,112,104,94,115,72,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,106,104,99,101,97,97,108,102],
[119,0,108,98,106,112,104,101,105,103],
[105,103,0,98,98,108,103,108,97,94],
[107,113,113,0,100,102,116,109,107,105],
[112,105,113,111,0,113,112,102,105,111],
[110,99,103,109,98,0,96,105,108,105],
[114,107,108,95,99,115,0,106,105,107],
[114,110,103,102,109,106,105,0,112,110],
[103,106,114,104,106,103,106,99,0,98],
[109,108,117,106,100,106,104,101,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,113,116,118,99,109,105,110,99],
[104,0,108,107,113,106,106,110,104,99],
[98,103,0,106,115,103,102,113,111,107],
[95,104,105,0,104,98,100,95,103,98],
[93,98,96,107,0,101,103,91,103,93],
[112,105,108,113,110,0,101,98,113,111],
[102,105,109,111,108,110,0,108,106,104],
[106,101,98,116,120,113,103,0,117,107],
[101,107,100,108,108,98,105,94,0,104],
[112,112,104,113,118,100,107,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,113,78,94,86,95,87,132,85],
[105,0,138,62,97,87,106,86,97,86],
[98,73,0,71,87,133,114,115,99,105],
[133,149,140,0,104,142,148,130,133,123],
[117,114,124,107,0,133,122,124,89,124],
[125,124,78,69,78,0,123,96,98,89],
[116,105,97,63,89,88,0,103,99,87],
[124,125,96,81,87,115,108,0,106,123],
[79,114,112,78,122,113,112,105,0,105],
[126,125,106,88,87,122,124,88,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,96,109,100,105,108,111,113,101],
[110,0,105,115,117,117,105,123,122,101],
[115,106,0,94,122,110,107,128,111,116],
[102,96,117,0,106,111,112,100,102,100],
[111,94,89,105,0,111,109,106,106,90],
[106,94,101,100,100,0,102,109,119,94],
[103,106,104,99,102,109,0,105,116,97],
[100,88,83,111,105,102,106,0,107,105],
[98,89,100,109,105,92,95,104,0,93],
[110,110,95,111,121,117,114,106,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,103,110,106,100,109,108,110],
[100,0,113,96,102,105,95,93,91,97],
[102,98,0,97,102,108,104,105,102,92],
[108,115,114,0,107,109,114,111,96,109],
[101,109,109,104,0,107,108,108,103,108],
[105,106,103,102,104,0,92,108,101,99],
[111,116,107,97,103,119,0,120,93,113],
[102,118,106,100,103,103,91,0,101,96],
[103,120,109,115,108,110,118,110,0,101],
[101,114,119,102,103,112,98,115,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,109,112,107,109,99,101,100],
[109,0,108,109,120,112,113,105,103,110],
[99,103,0,107,124,103,94,97,105,105],
[102,102,104,0,120,105,108,104,113,100],
[99,91,87,91,0,101,113,109,102,103],
[104,99,108,106,110,0,104,106,107,120],
[102,98,117,103,98,107,0,101,98,114],
[112,106,114,107,102,105,110,0,116,116],
[110,108,106,98,109,104,113,95,0,102],
[111,101,106,111,108,91,97,95,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,124,115,103,101,106,112,117,109],
[93,0,109,109,100,98,98,128,102,112],
[87,102,0,75,89,82,101,92,79,93],
[96,102,136,0,105,89,99,109,95,91],
[108,111,122,106,0,103,105,106,114,110],
[110,113,129,122,108,0,103,112,111,118],
[105,113,110,112,106,108,0,105,102,92],
[99,83,119,102,105,99,106,0,111,116],
[94,109,132,116,97,100,109,100,0,99],
[102,99,118,120,101,93,119,95,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,100,108,130,112,111,97,104,96],
[104,0,119,109,123,110,109,108,113,115],
[111,92,0,110,124,106,120,100,106,108],
[103,102,101,0,110,90,116,101,110,113],
[81,88,87,101,0,93,99,97,98,96],
[99,101,105,121,118,0,95,104,110,99],
[100,102,91,95,112,116,0,103,102,100],
[114,103,111,110,114,107,108,0,122,123],
[107,98,105,101,113,101,109,89,0,104],
[115,96,103,98,115,112,111,88,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,140,70,71,70,98,71,70,70],
[138,0,164,89,73,72,94,46,67,120],
[71,47,0,92,48,45,97,48,70,70],
[141,122,119,0,97,72,97,75,119,97],
[140,138,163,114,0,67,141,114,67,141],
[141,139,166,139,144,0,166,140,117,97],
[113,117,114,114,70,45,0,93,69,70],
[140,165,163,136,97,71,118,0,69,141],
[141,144,141,92,144,94,142,142,0,119],
[141,91,141,114,70,114,141,70,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,100,103,118,105,101,107,105,110],
[95,0,97,108,97,103,101,101,95,89],
[111,114,0,103,121,118,111,110,112,101],
[108,103,108,0,107,104,108,105,104,101],
[93,114,90,104,0,97,93,106,106,98],
[106,108,93,107,114,0,100,115,106,96],
[110,110,100,103,118,111,0,104,112,109],
[104,110,101,106,105,96,107,0,103,96],
[106,116,99,107,105,105,99,108,0,104],
[101,122,110,110,113,115,102,115,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,100,83,118,107,99,120,112,98],
[104,0,102,99,101,117,111,105,116,91],
[111,109,0,94,106,129,116,119,124,111],
[128,112,117,0,104,119,126,136,117,117],
[93,110,105,107,0,113,95,107,109,110],
[104,94,82,92,98,0,83,111,94,85],
[112,100,95,85,116,128,0,117,113,109],
[91,106,92,75,104,100,94,0,108,88],
[99,95,87,94,102,117,98,103,0,103],
[113,120,100,94,101,126,102,123,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,97,114,114,109,111,112,112,115],
[94,0,100,109,120,109,112,109,104,103],
[114,111,0,119,126,115,105,114,106,122],
[97,102,92,0,109,97,101,104,102,97],
[97,91,85,102,0,93,100,100,99,99],
[102,102,96,114,118,0,102,97,107,111],
[100,99,106,110,111,109,0,112,99,109],
[99,102,97,107,111,114,99,0,100,105],
[99,107,105,109,112,104,112,111,0,105],
[96,108,89,114,112,100,102,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,113,95,127,103,92,87,103,89],
[124,0,119,124,122,101,114,111,132,106],
[98,92,0,94,108,86,82,84,83,92],
[116,87,117,0,111,104,104,94,103,95],
[84,89,103,100,0,93,84,89,102,85],
[108,110,125,107,118,0,114,93,122,102],
[119,97,129,107,127,97,0,116,101,100],
[124,100,127,117,122,118,95,0,111,118],
[108,79,128,108,109,89,110,100,0,94],
[122,105,119,116,126,109,111,93,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,100,107,131,133,109,116,120,122],
[110,0,118,113,121,125,97,106,117,125],
[111,93,0,117,112,126,100,112,122,120],
[104,98,94,0,115,109,108,114,100,106],
[80,90,99,96,0,105,85,92,94,110],
[78,86,85,102,106,0,93,106,90,91],
[102,114,111,103,126,118,0,108,122,105],
[95,105,99,97,119,105,103,0,116,113],
[91,94,89,111,117,121,89,95,0,106],
[89,86,91,105,101,120,106,98,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,111,105,107,97,109,100,98,101],
[103,0,101,102,93,91,112,110,101,95],
[100,110,0,125,110,107,128,111,101,113],
[106,109,86,0,106,100,100,98,101,96],
[104,118,101,105,0,109,106,112,87,95],
[114,120,104,111,102,0,119,111,115,104],
[102,99,83,111,105,92,0,101,87,103],
[111,101,100,113,99,100,110,0,96,102],
[113,110,110,110,124,96,124,115,0,113],
[110,116,98,115,116,107,108,109,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,112,92,103,100,97,108,112,102],
[95,0,107,96,84,93,88,93,104,102],
[99,104,0,98,105,102,99,100,109,105],
[119,115,113,0,105,113,112,111,108,117],
[108,127,106,106,0,100,109,117,111,111],
[111,118,109,98,111,0,98,108,110,112],
[114,123,112,99,102,113,0,103,110,112],
[103,118,111,100,94,103,108,0,115,108],
[99,107,102,103,100,101,101,96,0,117],
[109,109,106,94,100,99,99,103,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,105,104,104,98,114,109,113,89],
[114,0,106,104,124,114,137,115,125,126],
[106,105,0,103,104,106,113,109,143,127],
[107,107,108,0,106,98,100,91,117,95],
[107,87,107,105,0,92,110,96,139,104],
[113,97,105,113,119,0,127,115,137,115],
[97,74,98,111,101,84,0,93,109,104],
[102,96,102,120,115,96,118,0,117,92],
[98,86,68,94,72,74,102,94,0,104],
[122,85,84,116,107,96,107,119,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,99,106,95,122,106,99,99,96],
[123,0,103,102,106,107,112,111,104,103],
[112,108,0,117,105,120,112,101,108,117],
[105,109,94,0,99,116,109,104,91,105],
[116,105,106,112,0,112,106,105,100,114],
[89,104,91,95,99,0,95,81,104,90],
[105,99,99,102,105,116,0,102,101,98],
[112,100,110,107,106,130,109,0,113,113],
[112,107,103,120,111,107,110,98,0,105],
[115,108,94,106,97,121,113,98,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,97,117,108,102,104,118,109,92],
[106,0,103,109,103,94,102,110,98,94],
[114,108,0,126,115,121,95,118,115,112],
[94,102,85,0,105,103,95,105,100,89],
[103,108,96,106,0,99,88,103,105,96],
[109,117,90,108,112,0,98,116,101,98],
[107,109,116,116,123,113,0,118,108,100],
[93,101,93,106,108,95,93,0,100,93],
[102,113,96,111,106,110,103,111,0,95],
[119,117,99,122,115,113,111,118,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,86,101,100,106,98,93,111,110],
[115,0,109,115,118,121,117,104,119,113],
[125,102,0,116,123,128,117,121,123,125],
[110,96,95,0,114,118,109,87,112,109],
[111,93,88,97,0,129,107,99,108,108],
[105,90,83,93,82,0,101,98,99,104],
[113,94,94,102,104,110,0,89,114,102],
[118,107,90,124,112,113,122,0,120,111],
[100,92,88,99,103,112,97,91,0,94],
[101,98,86,102,103,107,109,100,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,116,105,110,109,100,116,92,113],
[108,0,122,109,113,101,101,108,110,109],
[95,89,0,89,109,99,102,108,87,118],
[106,102,122,0,97,100,86,113,99,113],
[101,98,102,114,0,94,83,101,88,103],
[102,110,112,111,117,0,112,108,109,109],
[111,110,109,125,128,99,0,114,113,125],
[95,103,103,98,110,103,97,0,105,111],
[119,101,124,112,123,102,98,106,0,107],
[98,102,93,98,108,102,86,100,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,113,121,114,107,90,102,100,99],
[104,0,119,115,105,107,98,113,95,116],
[98,92,0,112,96,97,98,82,94,98],
[90,96,99,0,99,106,80,98,98,112],
[97,106,115,112,0,110,106,84,111,95],
[104,104,114,105,101,0,81,103,87,112],
[121,113,113,131,105,130,0,109,107,112],
[109,98,129,113,127,108,102,0,112,108],
[111,116,117,113,100,124,104,99,0,108],
[112,95,113,99,116,99,99,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,106,101,114,105,101,118,96,100],
[98,0,105,119,120,108,106,116,100,100],
[105,106,0,109,98,98,105,96,106,115],
[110,92,102,0,107,104,101,112,95,108],
[97,91,113,104,0,103,104,110,97,96],
[106,103,113,107,108,0,103,108,105,113],
[110,105,106,110,107,108,0,105,94,110],
[93,95,115,99,101,103,106,0,93,95],
[115,111,105,116,114,106,117,118,0,104],
[111,111,96,103,115,98,101,116,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,109,110,107,81,100,101,100,115],
[117,0,120,122,128,118,101,111,112,112],
[102,91,0,116,105,89,100,113,122,113],
[101,89,95,0,110,88,86,87,87,100],
[104,83,106,101,0,94,86,96,102,116],
[130,93,122,123,117,0,108,122,119,114],
[111,110,111,125,125,103,0,108,103,119],
[110,100,98,124,115,89,103,0,98,109],
[111,99,89,124,109,92,108,113,0,106],
[96,99,98,111,95,97,92,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,105,104,103,111,115,107,110,107],
[112,0,116,110,102,104,113,99,110,106],
[106,95,0,105,88,122,115,92,107,106],
[107,101,106,0,104,103,113,113,106,111],
[108,109,123,107,0,107,127,101,112,115],
[100,107,89,108,104,0,107,102,106,103],
[96,98,96,98,84,104,0,96,93,95],
[104,112,119,98,110,109,115,0,100,97],
[101,101,104,105,99,105,118,111,0,107],
[104,105,105,100,96,108,116,114,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,121,94,115,119,99,127,119,111],
[95,0,96,113,141,110,109,115,100,123],
[90,115,0,97,114,112,107,106,112,102],
[117,98,114,0,113,121,110,114,105,120],
[96,70,97,98,0,106,90,97,100,97],
[92,101,99,90,105,0,115,117,125,118],
[112,102,104,101,121,96,0,118,107,117],
[84,96,105,97,114,94,93,0,91,100],
[92,111,99,106,111,86,104,120,0,104],
[100,88,109,91,114,93,94,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,110,106,106,108,98,111,103,98],
[117,0,111,109,111,113,105,118,111,108],
[101,100,0,102,104,119,107,105,103,104],
[105,102,109,0,104,107,99,119,100,101],
[105,100,107,107,0,109,105,107,109,104],
[103,98,92,104,102,0,91,106,92,100],
[113,106,104,112,106,120,0,117,113,110],
[100,93,106,92,104,105,94,0,94,103],
[108,100,108,111,102,119,98,117,0,107],
[113,103,107,110,107,111,101,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,126,83,126,127,126,85,83,85],
[170,0,168,128,128,128,85,128,85,170],
[85,43,0,43,43,85,43,86,43,128],
[128,83,168,0,128,128,85,128,83,85],
[85,83,168,83,0,169,126,127,125,127],
[84,83,126,83,42,0,126,85,83,85],
[85,126,168,126,85,85,0,127,168,127],
[126,83,125,83,84,126,84,0,41,83],
[128,126,168,128,86,128,43,170,0,127],
[126,41,83,126,84,126,84,128,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,104,121,115,108,90,104,106,107],
[94,0,89,117,118,109,99,88,113,104],
[107,122,0,124,117,120,104,119,118,115],
[90,94,87,0,112,102,99,103,94,90],
[96,93,94,99,0,90,89,93,105,117],
[103,102,91,109,121,0,101,97,107,105],
[121,112,107,112,122,110,0,114,105,123],
[107,123,92,108,118,114,97,0,106,101],
[105,98,93,117,106,104,106,105,0,109],
[104,107,96,121,94,106,88,110,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,103,103,107,99,95,106,105],
[110,0,100,96,110,111,114,98,103,99],
[103,111,0,106,110,124,110,115,110,106],
[108,115,105,0,107,125,101,102,113,117],
[108,101,101,104,0,125,116,104,105,96],
[104,100,87,86,86,0,96,92,95,91],
[112,97,101,110,95,115,0,106,96,106],
[116,113,96,109,107,119,105,0,104,119],
[105,108,101,98,106,116,115,107,0,122],
[106,112,105,94,115,120,105,92,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,98,109,92,123,133,95,110,95],
[88,0,117,119,97,108,108,103,81,64],
[113,94,0,112,80,102,104,110,90,94],
[102,92,99,0,103,106,128,76,99,80],
[119,114,131,108,0,128,130,87,121,79],
[88,103,109,105,83,0,110,88,73,108],
[78,103,107,83,81,101,0,94,80,113],
[116,108,101,135,124,123,117,0,110,106],
[101,130,121,112,90,138,131,101,0,107],
[116,147,117,131,132,103,98,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,130,113,104,89,135,126,133,120],
[98,0,108,91,119,73,110,105,125,129],
[81,103,0,82,84,78,105,97,112,91],
[98,120,129,0,96,118,128,134,126,139],
[107,92,127,115,0,135,133,138,128,140],
[122,138,133,93,76,0,129,142,143,113],
[76,101,106,83,78,82,0,91,97,94],
[85,106,114,77,73,69,120,0,98,97],
[78,86,99,85,83,68,114,113,0,85],
[91,82,120,72,71,98,117,114,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,117,108,117,103,114,110,105,108],
[102,0,112,104,113,104,106,108,110,113],
[94,99,0,100,109,112,99,110,112,104],
[103,107,111,0,114,99,111,104,110,98],
[94,98,102,97,0,100,99,103,103,96],
[108,107,99,112,111,0,101,107,114,110],
[97,105,112,100,112,110,0,103,108,103],
[101,103,101,107,108,104,108,0,112,105],
[106,101,99,101,108,97,103,99,0,106],
[103,98,107,113,115,101,108,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,123,107,125,145,105,110,97,124],
[89,0,76,95,66,100,81,92,99,100],
[88,135,0,138,136,131,107,129,111,114],
[104,116,73,0,91,122,92,99,86,116],
[86,145,75,120,0,115,104,91,95,95],
[66,111,80,89,96,0,99,84,98,85],
[106,130,104,119,107,112,0,113,116,110],
[101,119,82,112,120,127,98,0,84,91],
[114,112,100,125,116,113,95,127,0,113],
[87,111,97,95,116,126,101,120,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,106,110,84,92,104,105,112,98],
[116,0,119,115,106,107,115,101,119,115],
[105,92,0,103,91,98,100,90,107,100],
[101,96,108,0,102,99,103,104,100,99],
[127,105,120,109,0,109,117,111,116,109],
[119,104,113,112,102,0,105,110,111,107],
[107,96,111,108,94,106,0,106,105,99],
[106,110,121,107,100,101,105,0,110,113],
[99,92,104,111,95,100,106,101,0,108],
[113,96,111,112,102,104,112,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,115,122,113,99,104,102,96,101],
[114,0,114,126,114,118,120,101,106,110],
[96,97,0,111,98,110,106,102,99,89],
[89,85,100,0,100,92,74,89,100,78],
[98,97,113,111,0,89,105,90,96,107],
[112,93,101,119,122,0,110,97,100,94],
[107,91,105,137,106,101,0,86,107,102],
[109,110,109,122,121,114,125,0,118,103],
[115,105,112,111,115,111,104,93,0,89],
[110,101,122,133,104,117,109,108,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,110,107,108,102,103,109,112,121],
[98,0,112,104,110,120,109,109,102,113],
[101,99,0,98,107,110,104,98,104,99],
[104,107,113,0,93,104,109,111,97,98],
[103,101,104,118,0,103,112,101,107,102],
[109,91,101,107,108,0,110,100,92,113],
[108,102,107,102,99,101,0,106,100,87],
[102,102,113,100,110,111,105,0,114,115],
[99,109,107,114,104,119,111,97,0,108],
[90,98,112,113,109,98,124,96,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,123,108,109,111,119,105,108],
[105,0,101,105,99,111,103,112,97,102],
[100,110,0,104,104,113,104,104,104,99],
[88,106,107,0,104,111,112,103,112,100],
[103,112,107,107,0,112,106,119,104,103],
[102,100,98,100,99,0,94,108,102,103],
[100,108,107,99,105,117,0,109,105,106],
[92,99,107,108,92,103,102,0,99,90],
[106,114,107,99,107,109,106,112,0,104],
[103,109,112,111,108,108,105,121,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,107,92,108,101,118,104,110,117],
[86,0,90,103,99,95,121,107,122,116],
[104,121,0,116,119,106,116,109,124,116],
[119,108,95,0,113,98,111,105,122,105],
[103,112,92,98,0,94,101,94,118,103],
[110,116,105,113,117,0,123,125,128,117],
[93,90,95,100,110,88,0,96,112,103],
[107,104,102,106,117,86,115,0,125,105],
[101,89,87,89,93,83,99,86,0,104],
[94,95,95,106,108,94,108,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,122,96,97,106,108,114,101,113],
[100,0,104,108,107,100,103,104,108,96],
[89,107,0,93,102,91,92,110,89,101],
[115,103,118,0,109,112,104,120,109,100],
[114,104,109,102,0,102,108,112,100,99],
[105,111,120,99,109,0,112,115,104,113],
[103,108,119,107,103,99,0,116,97,107],
[97,107,101,91,99,96,95,0,87,100],
[110,103,122,102,111,107,114,124,0,104],
[98,115,110,111,112,98,104,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,90,141,105,105,107,124,70,88],
[88,0,73,106,90,90,89,108,89,107],
[121,138,0,141,70,88,107,106,87,88],
[70,105,70,0,53,123,105,108,53,89],
[106,121,141,158,0,159,123,123,69,124],
[106,121,123,88,52,0,123,108,69,51],
[104,122,104,106,88,88,0,89,123,87],
[87,103,105,103,88,103,122,0,86,103],
[141,122,124,158,142,142,88,125,0,124],
[123,104,123,122,87,160,124,108,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,136,124,131,109,124,118,114,137],
[119,0,136,109,122,105,117,110,109,130],
[75,75,0,103,108,83,97,106,94,100],
[87,102,108,0,146,99,108,107,106,107],
[80,89,103,65,0,96,99,99,102,113],
[102,106,128,112,115,0,106,108,108,116],
[87,94,114,103,112,105,0,106,93,112],
[93,101,105,104,112,103,105,0,102,115],
[97,102,117,105,109,103,118,109,0,102],
[74,81,111,104,98,95,99,96,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,117,98,105,104,105,109,100,117],
[105,0,100,110,99,103,110,116,115,115],
[94,111,0,90,101,108,111,109,104,117],
[113,101,121,0,101,107,100,100,110,112],
[106,112,110,110,0,106,105,101,117,124],
[107,108,103,104,105,0,104,99,114,117],
[106,101,100,111,106,107,0,102,114,119],
[102,95,102,111,110,112,109,0,112,113],
[111,96,107,101,94,97,97,99,0,120],
[94,96,94,99,87,94,92,98,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,87,102,132,107,108,99,114,109],
[91,0,92,76,100,79,99,92,100,92],
[124,119,0,116,120,105,120,108,112,122],
[109,135,95,0,122,96,117,91,116,102],
[79,111,91,89,0,88,93,90,106,102],
[104,132,106,115,123,0,117,109,112,113],
[103,112,91,94,118,94,0,88,119,116],
[112,119,103,120,121,102,123,0,120,126],
[97,111,99,95,105,99,92,91,0,105],
[102,119,89,109,109,98,95,85,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,99,111,102,105,94,97,100,97],
[108,0,107,108,98,116,110,101,104,111],
[112,104,0,103,113,107,108,102,103,104],
[100,103,108,0,109,100,110,93,94,93],
[109,113,98,102,0,102,103,98,90,103],
[106,95,104,111,109,0,107,90,100,97],
[117,101,103,101,108,104,0,96,98,103],
[114,110,109,118,113,121,115,0,104,100],
[111,107,108,117,121,111,113,107,0,103],
[114,100,107,118,108,114,108,111,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,106,133,123,117,117,121,102,118],
[102,0,112,106,115,104,113,90,97,89],
[105,99,0,117,118,106,112,98,107,92],
[78,105,94,0,96,96,101,88,89,101],
[88,96,93,115,0,95,97,93,96,97],
[94,107,105,115,116,0,115,91,100,77],
[94,98,99,110,114,96,0,100,101,91],
[90,121,113,123,118,120,111,0,109,102],
[109,114,104,122,115,111,110,102,0,110],
[93,122,119,110,114,134,120,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,103,107,123,121,109,116,106,99],
[89,0,113,119,112,115,104,118,106,89],
[108,98,0,117,121,114,118,110,109,99],
[104,92,94,0,105,115,109,102,102,107],
[88,99,90,106,0,99,111,89,90,92],
[90,96,97,96,112,0,104,102,87,107],
[102,107,93,102,100,107,0,96,90,93],
[95,93,101,109,122,109,115,0,108,103],
[105,105,102,109,121,124,121,103,0,104],
[112,122,112,104,119,104,118,108,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,104,115,106,114,113,105,107,97],
[113,0,103,110,95,102,98,99,122,109],
[107,108,0,115,113,109,99,80,118,105],
[96,101,96,0,109,105,89,78,105,88],
[105,116,98,102,0,113,92,101,110,94],
[97,109,102,106,98,0,112,88,108,96],
[98,113,112,122,119,99,0,98,122,103],
[106,112,131,133,110,123,113,0,112,102],
[104,89,93,106,101,103,89,99,0,89],
[114,102,106,123,117,115,108,109,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,111,75,62,98,48,149,101,64],
[112,0,113,85,135,97,84,125,100,90],
[100,98,0,85,99,100,61,127,112,90],
[136,126,126,0,152,99,113,139,99,102],
[149,76,112,59,0,97,123,138,123,126],
[113,114,111,112,114,0,75,115,88,89],
[163,127,150,98,88,136,0,163,112,103],
[62,86,84,72,73,96,48,0,62,50],
[110,111,99,112,88,123,99,149,0,112],
[147,121,121,109,85,122,108,161,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,100,109,93,102,98,108,118,102],
[108,0,118,111,95,108,107,117,95,97],
[111,93,0,107,96,99,103,112,107,114],
[102,100,104,0,104,107,106,112,109,110],
[118,116,115,107,0,118,107,114,114,104],
[109,103,112,104,93,0,108,109,104,106],
[113,104,108,105,104,103,0,109,109,108],
[103,94,99,99,97,102,102,0,95,104],
[93,116,104,102,97,107,102,116,0,110],
[109,114,97,101,107,105,103,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,101,116,100,99,111,102,109,100],
[94,0,95,122,90,76,113,105,118,100],
[110,116,0,108,99,106,90,97,109,100],
[95,89,103,0,90,100,98,88,116,79],
[111,121,112,121,0,119,130,119,97,90],
[112,135,105,111,92,0,128,106,104,111],
[100,98,121,113,81,83,0,88,93,102],
[109,106,114,123,92,105,123,0,115,114],
[102,93,102,95,114,107,118,96,0,115],
[111,111,111,132,121,100,109,97,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,106,88,99,110,100,82,103,103],
[95,0,90,80,91,84,89,90,90,96],
[105,121,0,90,110,99,87,92,110,92],
[123,131,121,0,103,105,103,96,104,97],
[112,120,101,108,0,116,111,105,117,113],
[101,127,112,106,95,0,102,89,113,107],
[111,122,124,108,100,109,0,96,116,103],
[129,121,119,115,106,122,115,0,117,100],
[108,121,101,107,94,98,95,94,0,87],
[108,115,119,114,98,104,108,111,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,84,115,84,104,86,100,118,81],
[95,0,101,114,90,95,105,95,118,71],
[127,110,0,141,119,104,118,116,119,98],
[96,97,70,0,88,91,96,80,140,96],
[127,121,92,123,0,115,106,94,116,113],
[107,116,107,120,96,0,114,115,135,92],
[125,106,93,115,105,97,0,102,114,84],
[111,116,95,131,117,96,109,0,120,68],
[93,93,92,71,95,76,97,91,0,77],
[130,140,113,115,98,119,127,143,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,100,131,110,110,111,116,98,123],
[84,0,88,116,95,113,77,97,100,108],
[111,123,0,126,112,131,118,104,93,125],
[80,95,85,0,105,101,82,103,78,104],
[101,116,99,106,0,101,88,84,83,107],
[101,98,80,110,110,0,96,101,96,104],
[100,134,93,129,123,115,0,101,117,126],
[95,114,107,108,127,110,110,0,86,121],
[113,111,118,133,128,115,94,125,0,117],
[88,103,86,107,104,107,85,90,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,115,105,116,103,107,93,98,97],
[110,0,117,101,116,117,106,107,108,100],
[96,94,0,105,120,110,93,100,111,97],
[106,110,106,0,108,103,102,107,108,100],
[95,95,91,103,0,86,88,93,92,94],
[108,94,101,108,125,0,96,101,97,97],
[104,105,118,109,123,115,0,110,118,106],
[118,104,111,104,118,110,101,0,107,108],
[113,103,100,103,119,114,93,104,0,110],
[114,111,114,111,117,114,105,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,70,175,37,138,70,174,73,34],
[36,0,70,106,37,102,73,70,73,36],
[141,141,0,141,105,175,141,175,141,108],
[36,105,70,0,37,105,37,141,73,34],
[174,174,106,174,0,174,142,174,73,70],
[73,109,36,106,37,0,73,70,73,36],
[141,138,70,174,69,138,0,141,105,34],
[37,141,36,70,37,141,70,0,73,37],
[138,138,70,138,138,138,106,138,0,70],
[177,175,103,177,141,175,177,174,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,89,108,106,103,102,111,97,105],
[113,0,93,119,104,108,115,115,103,107],
[122,118,0,120,118,107,112,124,103,100],
[103,92,91,0,98,95,114,120,92,105],
[105,107,93,113,0,110,102,119,103,108],
[108,103,104,116,101,0,118,122,109,115],
[109,96,99,97,109,93,0,116,105,100],
[100,96,87,91,92,89,95,0,91,90],
[114,108,108,119,108,102,106,120,0,102],
[106,104,111,106,103,96,111,121,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,90,100,104,114,104,86,111],
[104,0,107,93,99,103,107,96,108,120],
[107,104,0,103,103,111,109,106,98,109],
[121,118,108,0,113,118,120,113,104,118],
[111,112,108,98,0,107,113,104,102,106],
[107,108,100,93,104,0,108,106,100,105],
[97,104,102,91,98,103,0,99,101,97],
[107,115,105,98,107,105,112,0,108,110],
[125,103,113,107,109,111,110,103,0,120],
[100,91,102,93,105,106,114,101,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,97,109,109,102,119,108,103,104],
[118,0,100,119,106,114,128,115,103,110],
[114,111,0,117,105,127,132,109,111,117],
[102,92,94,0,84,95,94,95,99,96],
[102,105,106,127,0,124,132,113,108,115],
[109,97,84,116,87,0,112,106,107,108],
[92,83,79,117,79,99,0,92,94,90],
[103,96,102,116,98,105,119,0,115,107],
[108,108,100,112,103,104,117,96,0,98],
[107,101,94,115,96,103,121,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,94,105,102,103,103,100,111,115],
[97,0,82,88,86,76,84,94,95,90],
[117,129,0,117,112,109,105,113,109,113],
[106,123,94,0,110,97,121,107,97,108],
[109,125,99,101,0,95,107,98,101,113],
[108,135,102,114,116,0,104,106,110,115],
[108,127,106,90,104,107,0,104,106,107],
[111,117,98,104,113,105,107,0,109,112],
[100,116,102,114,110,101,105,102,0,111],
[96,121,98,103,98,96,104,99,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,107,114,118,123,114,105,107,118],
[95,0,101,102,121,113,100,112,106,119],
[104,110,0,109,123,113,115,111,106,128],
[97,109,102,0,116,105,110,103,102,123],
[93,90,88,95,0,104,108,87,93,104],
[88,98,98,106,107,0,97,96,97,109],
[97,111,96,101,103,114,0,110,112,120],
[106,99,100,108,124,115,101,0,108,117],
[104,105,105,109,118,114,99,103,0,123],
[93,92,83,88,107,102,91,94,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,115,109,110,116,114,101,114,122],
[94,0,107,99,107,98,83,80,120,119],
[96,104,0,111,109,105,98,109,110,111],
[102,112,100,0,106,107,92,107,116,122],
[101,104,102,105,0,96,82,103,111,117],
[95,113,106,104,115,0,84,104,106,119],
[97,128,113,119,129,127,0,132,120,134],
[110,131,102,104,108,107,79,0,123,124],
[97,91,101,95,100,105,91,88,0,107],
[89,92,100,89,94,92,77,87,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,122,108,112,111,108,125,123,105],
[99,0,111,114,102,109,93,99,105,98],
[89,100,0,98,95,100,103,96,120,102],
[103,97,113,0,104,107,105,100,116,114],
[99,109,116,107,0,102,113,109,106,110],
[100,102,111,104,109,0,107,101,113,114],
[103,118,108,106,98,104,0,100,119,100],
[86,112,115,111,102,110,111,0,109,110],
[88,106,91,95,105,98,92,102,0,97],
[106,113,109,97,101,97,111,101,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,106,104,124,115,97,102,110,105],
[110,0,122,102,116,118,106,107,124,98],
[105,89,0,105,105,107,102,97,105,95],
[107,109,106,0,108,115,114,105,111,107],
[87,95,106,103,0,111,96,97,108,91],
[96,93,104,96,100,0,97,88,107,101],
[114,105,109,97,115,114,0,107,110,105],
[109,104,114,106,114,123,104,0,114,101],
[101,87,106,100,103,104,101,97,0,93],
[106,113,116,104,120,110,106,110,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,97,96,91,109,86,116,85,100],
[107,0,106,107,111,114,94,116,110,116],
[114,105,0,99,90,102,91,109,98,116],
[115,104,112,0,100,98,92,121,98,129],
[120,100,121,111,0,117,95,112,98,124],
[102,97,109,113,94,0,114,114,94,103],
[125,117,120,119,116,97,0,110,97,125],
[95,95,102,90,99,97,101,0,93,110],
[126,101,113,113,113,117,114,118,0,133],
[111,95,95,82,87,108,86,101,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,113,113,108,98,99,120,113,108],
[98,0,105,85,100,89,92,94,92,99],
[98,106,0,95,107,99,98,119,97,92],
[98,126,116,0,115,101,102,122,119,97],
[103,111,104,96,0,95,88,111,97,96],
[113,122,112,110,116,0,101,119,100,96],
[112,119,113,109,123,110,0,117,103,113],
[91,117,92,89,100,92,94,0,96,89],
[98,119,114,92,114,111,108,115,0,100],
[103,112,119,114,115,115,98,122,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,113,117,118,117,125,116,117,112],
[107,0,123,112,116,106,115,105,105,108],
[98,88,0,110,98,105,116,104,105,104],
[94,99,101,0,106,105,105,94,95,102],
[93,95,113,105,0,111,109,105,100,108],
[94,105,106,106,100,0,113,103,106,94],
[86,96,95,106,102,98,0,105,105,100],
[95,106,107,117,106,108,106,0,105,93],
[94,106,106,116,111,105,106,106,0,106],
[99,103,107,109,103,117,111,118,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,105,99,110,119,110,123,98,102],
[111,0,92,114,103,106,105,129,100,94],
[106,119,0,99,97,89,101,107,88,111],
[112,97,112,0,103,99,102,119,109,100],
[101,108,114,108,0,85,82,130,83,101],
[92,105,122,112,126,0,100,113,110,113],
[101,106,110,109,129,111,0,112,89,119],
[88,82,104,92,81,98,99,0,100,75],
[113,111,123,102,128,101,122,111,0,114],
[109,117,100,111,110,98,92,136,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,107,107,105,115,118,110,108,106],
[95,0,95,110,93,95,113,104,100,88],
[104,116,0,108,99,113,128,128,104,97],
[104,101,103,0,98,116,124,118,102,101],
[106,118,112,113,0,111,125,123,111,99],
[96,116,98,95,100,0,115,114,96,91],
[93,98,83,87,86,96,0,97,92,93],
[101,107,83,93,88,97,114,0,92,90],
[103,111,107,109,100,115,119,119,0,101],
[105,123,114,110,112,120,118,121,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,108,83,87,95,106,104,108,94],
[126,0,121,102,119,109,138,123,137,111],
[103,90,0,91,98,101,117,106,107,89],
[128,109,120,0,112,104,123,116,124,124],
[124,92,113,99,0,105,119,111,118,114],
[116,102,110,107,106,0,107,114,110,102],
[105,73,94,88,92,104,0,103,97,89],
[107,88,105,95,100,97,108,0,105,97],
[103,74,104,87,93,101,114,106,0,92],
[117,100,122,87,97,109,122,114,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,82,74,88,97,115,92,97,93],
[106,0,107,109,121,109,104,119,115,121],
[129,104,0,110,108,99,127,126,113,114],
[137,102,101,0,120,101,127,140,103,110],
[123,90,103,91,0,93,121,116,125,102],
[114,102,112,110,118,0,129,120,106,127],
[96,107,84,84,90,82,0,104,96,88],
[119,92,85,71,95,91,107,0,107,90],
[114,96,98,108,86,105,115,104,0,100],
[118,90,97,101,109,84,123,121,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,98,113,114,106,104,102,110,112],
[104,0,95,96,105,99,97,100,97,103],
[113,116,0,109,108,104,99,112,98,118],
[98,115,102,0,114,110,105,102,96,121],
[97,106,103,97,0,103,95,97,95,109],
[105,112,107,101,108,0,105,98,93,105],
[107,114,112,106,116,106,0,111,99,115],
[109,111,99,109,114,113,100,0,104,109],
[101,114,113,115,116,118,112,107,0,123],
[99,108,93,90,102,106,96,102,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,130,110,121,121,82,105,128,88],
[106,0,116,114,122,128,112,107,117,100],
[81,95,0,94,102,115,100,100,110,80],
[101,97,117,0,121,135,90,96,130,95],
[90,89,109,90,0,111,85,91,107,79],
[90,83,96,76,100,0,86,82,101,82],
[129,99,111,121,126,125,0,115,136,116],
[106,104,111,115,120,129,96,0,127,87],
[83,94,101,81,104,110,75,84,0,76],
[123,111,131,116,132,129,95,124,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,94,100,105,107,95,112,107],
[112,0,104,101,94,112,120,109,113,112],
[109,107,0,97,103,109,119,116,112,99],
[117,110,114,0,99,110,121,106,113,107],
[111,117,108,112,0,112,124,104,111,117],
[106,99,102,101,99,0,107,99,106,110],
[104,91,92,90,87,104,0,90,88,103],
[116,102,95,105,107,112,121,0,110,123],
[99,98,99,98,100,105,123,101,0,102],
[104,99,112,104,94,101,108,88,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,92,112,95,84,92,103,90],
[105,0,119,101,117,108,72,120,109,106],
[99,92,0,114,112,103,89,102,95,67],
[119,110,97,0,122,105,113,122,111,99],
[99,94,99,89,0,86,74,84,125,78],
[116,103,108,106,125,0,109,104,110,82],
[127,139,122,98,137,102,0,122,122,118],
[119,91,109,89,127,107,89,0,113,87],
[108,102,116,100,86,101,89,98,0,95],
[121,105,144,112,133,129,93,124,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,99,103,119,93,106,113,116,102],
[97,0,101,109,110,102,93,107,109,95],
[112,110,0,103,127,94,114,94,120,91],
[108,102,108,0,118,113,109,111,117,111],
[92,101,84,93,0,80,99,96,103,99],
[118,109,117,98,131,0,100,113,101,103],
[105,118,97,102,112,111,0,113,119,98],
[98,104,117,100,115,98,98,0,115,100],
[95,102,91,94,108,110,92,96,0,73],
[109,116,120,100,112,108,113,111,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,113,103,122,119,121,107,119],
[102,0,94,111,110,88,129,112,83,95],
[102,117,0,104,101,112,120,141,89,116],
[98,100,107,0,99,117,131,127,91,102],
[108,101,110,112,0,111,114,138,102,115],
[89,123,99,94,100,0,110,105,86,104],
[92,82,91,80,97,101,0,121,78,77],
[90,99,70,84,73,106,90,0,66,101],
[104,128,122,120,109,125,133,145,0,116],
[92,116,95,109,96,107,134,110,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,105,49,87,78,104,119,86,96],
[115,0,113,74,88,103,121,114,104,136],
[106,98,0,74,83,112,113,119,120,138],
[162,137,137,0,111,86,118,135,125,112],
[124,123,128,100,0,97,130,134,95,156],
[133,108,99,125,114,0,108,112,105,132],
[107,90,98,93,81,103,0,100,88,105],
[92,97,92,76,77,99,111,0,83,140],
[125,107,91,86,116,106,123,128,0,166],
[115,75,73,99,55,79,106,71,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,68,116,94,89,89,95,98,103],
[101,0,91,96,88,116,101,100,93,99],
[143,120,0,122,98,129,109,108,123,122],
[95,115,89,0,96,112,93,89,120,108],
[117,123,113,115,0,113,107,104,119,118],
[122,95,82,99,98,0,114,99,119,119],
[122,110,102,118,104,97,0,104,121,107],
[116,111,103,122,107,112,107,0,114,111],
[113,118,88,91,92,92,90,97,0,97],
[108,112,89,103,93,92,104,100,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,101,114,114,101,115,107,98,124],
[97,0,89,106,100,101,94,92,91,111],
[110,122,0,109,102,122,119,106,103,117],
[97,105,102,0,91,104,99,100,87,107],
[97,111,109,120,0,115,97,102,101,128],
[110,110,89,107,96,0,106,101,108,106],
[96,117,92,112,114,105,0,108,95,115],
[104,119,105,111,109,110,103,0,108,122],
[113,120,108,124,110,103,116,103,0,107],
[87,100,94,104,83,105,96,89,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,105,122,158,141,104,122,106,105],
[53,0,105,105,123,122,104,87,71,105],
[106,106,0,159,177,124,123,105,125,140],
[89,106,52,0,124,140,104,105,88,52],
[53,88,34,87,0,139,51,52,106,52],
[70,89,87,71,72,0,68,88,87,70],
[107,107,88,107,160,143,0,72,108,106],
[89,124,106,106,159,123,139,0,71,158],
[105,140,86,123,105,124,103,140,0,104],
[106,106,71,159,159,141,105,53,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,99,104,92,100,104,78,96,97],
[114,0,97,101,97,95,107,92,112,117],
[112,114,0,109,111,110,101,106,127,119],
[107,110,102,0,102,102,99,88,100,103],
[119,114,100,109,0,108,105,96,101,115],
[111,116,101,109,103,0,108,114,113,115],
[107,104,110,112,106,103,0,91,119,113],
[133,119,105,123,115,97,120,0,111,120],
[115,99,84,111,110,98,92,100,0,105],
[114,94,92,108,96,96,98,91,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,97,102,104,103,116,108,102,110],
[101,0,102,94,96,107,113,93,101,98],
[114,109,0,103,105,110,121,98,113,123],
[109,117,108,0,110,110,136,93,110,113],
[107,115,106,101,0,109,122,104,107,111],
[108,104,101,101,102,0,114,93,102,99],
[95,98,90,75,89,97,0,84,94,94],
[103,118,113,118,107,118,127,0,122,116],
[109,110,98,101,104,109,117,89,0,111],
[101,113,88,98,100,112,117,95,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,110,98,95,102,101,107,107,101],
[105,0,100,90,93,85,100,109,101,97],
[101,111,0,95,100,111,111,109,107,112],
[113,121,116,0,116,104,114,110,117,114],
[116,118,111,95,0,97,110,111,116,104],
[109,126,100,107,114,0,105,108,114,110],
[110,111,100,97,101,106,0,113,106,101],
[104,102,102,101,100,103,98,0,103,102],
[104,110,104,94,95,97,105,108,0,109],
[110,114,99,97,107,101,110,109,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,87,100,92,100,100,95,93,97],
[112,0,95,89,91,96,95,94,89,100],
[124,116,0,118,98,114,123,114,92,101],
[111,122,93,0,89,103,94,105,94,95],
[119,120,113,122,0,100,109,107,108,98],
[111,115,97,108,111,0,113,109,87,87],
[111,116,88,117,102,98,0,103,102,106],
[116,117,97,106,104,102,108,0,96,86],
[118,122,119,117,103,124,109,115,0,107],
[114,111,110,116,113,124,105,125,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,84,96,96,109,88,109,89,96],
[103,0,83,105,79,86,87,97,99,79],
[127,128,0,104,91,114,114,94,94,109],
[115,106,107,0,101,110,106,113,88,99],
[115,132,120,110,0,126,99,120,116,127],
[102,125,97,101,85,0,104,111,101,102],
[123,124,97,105,112,107,0,114,94,99],
[102,114,117,98,91,100,97,0,96,100],
[122,112,117,123,95,110,117,115,0,108],
[115,132,102,112,84,109,112,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,99,115,111,105,109,105,111],
[101,0,102,94,99,102,102,107,100,97],
[108,109,0,88,113,113,100,111,102,103],
[112,117,123,0,111,126,99,119,116,116],
[96,112,98,100,0,103,111,120,92,97],
[100,109,98,85,108,0,87,100,92,97],
[106,109,111,112,100,124,0,112,105,113],
[102,104,100,92,91,111,99,0,97,108],
[106,111,109,95,119,119,106,114,0,116],
[100,114,108,95,114,114,98,103,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,117,91,87,101,94,99,103,101],
[99,0,110,89,98,95,103,92,111,109],
[94,101,0,91,94,94,98,98,94,99],
[120,122,120,0,103,113,112,110,117,116],
[124,113,117,108,0,106,109,98,118,108],
[110,116,117,98,105,0,99,98,110,111],
[117,108,113,99,102,112,0,109,113,109],
[112,119,113,101,113,113,102,0,107,117],
[108,100,117,94,93,101,98,104,0,102],
[110,102,112,95,103,100,102,94,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,88,121,119,117,107,103,112,108],
[87,0,72,107,80,118,73,89,87,81],
[123,139,0,127,109,120,103,111,104,120],
[90,104,84,0,106,114,87,103,111,123],
[92,131,102,105,0,110,80,88,137,125],
[94,93,91,97,101,0,88,69,109,96],
[104,138,108,124,131,123,0,92,122,115],
[108,122,100,108,123,142,119,0,122,121],
[99,124,107,100,74,102,89,89,0,117],
[103,130,91,88,86,115,96,90,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,126,109,98,134,89,105,132,116],
[112,0,109,152,113,141,63,96,139,142],
[85,102,0,86,100,118,76,119,109,107],
[102,59,125,0,97,121,87,94,130,104],
[113,98,111,114,0,132,83,77,126,124],
[77,70,93,90,79,0,82,62,112,98],
[122,148,135,124,128,129,0,102,141,158],
[106,115,92,117,134,149,109,0,131,150],
[79,72,102,81,85,99,70,80,0,106],
[95,69,104,107,87,113,53,61,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,119,110,116,91,94,98,121,111],
[101,0,115,118,127,110,99,106,135,119],
[92,96,0,118,93,105,88,91,122,99],
[101,93,93,0,112,106,89,82,103,109],
[95,84,118,99,0,112,94,97,124,119],
[120,101,106,105,99,0,91,97,116,105],
[117,112,123,122,117,120,0,102,128,128],
[113,105,120,129,114,114,109,0,133,104],
[90,76,89,108,87,95,83,78,0,90],
[100,92,112,102,92,106,83,107,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,92,95,92,97,96,90,95,93],
[118,0,100,115,108,110,116,110,108,111],
[119,111,0,109,109,116,109,103,104,108],
[116,96,102,0,106,112,109,121,94,112],
[119,103,102,105,0,110,102,108,108,108],
[114,101,95,99,101,0,110,108,99,110],
[115,95,102,102,109,101,0,100,88,110],
[121,101,108,90,103,103,111,0,96,105],
[116,103,107,117,103,112,123,115,0,109],
[118,100,103,99,103,101,101,106,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,102,85,101,55,135,98,85,85],
[113,0,122,122,110,83,118,100,103,140],
[109,89,0,113,117,89,137,99,108,118],
[126,89,98,0,99,110,126,106,89,117],
[110,101,94,112,0,90,110,101,73,116],
[156,128,122,101,121,0,165,100,102,140],
[76,93,74,85,101,46,0,62,63,83],
[113,111,112,105,110,111,149,0,102,122],
[126,108,103,122,138,109,148,109,0,126],
[126,71,93,94,95,71,128,89,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,111,92,106,116,117,95,100,96],
[102,0,90,86,106,108,114,97,89,83],
[100,121,0,93,100,105,112,113,107,93],
[119,125,118,0,124,123,136,112,99,107],
[105,105,111,87,0,107,107,95,91,103],
[95,103,106,88,104,0,110,104,95,83],
[94,97,99,75,104,101,0,96,101,98],
[116,114,98,99,116,107,115,0,94,96],
[111,122,104,112,120,116,110,117,0,110],
[115,128,118,104,108,128,113,115,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,70,70,70,140,70,70,70,70],
[141,0,70,70,70,140,0,70,70,70],
[141,141,0,141,0,141,71,70,71,71],
[141,141,70,0,70,141,71,70,141,141],
[141,141,211,141,0,141,71,141,211,141],
[71,71,70,70,70,0,0,70,70,70],
[141,211,140,140,140,211,0,70,211,211],
[141,141,141,141,70,141,141,0,141,141],
[141,141,140,70,0,141,0,70,0,0],
[141,141,140,70,70,141,0,70,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,135,89,79,111,124,93,91,91],
[101,0,134,90,78,87,114,79,112,99],
[76,77,0,100,99,98,102,124,111,110],
[122,121,111,0,89,97,138,100,114,100],
[132,133,112,122,0,67,122,157,93,124],
[100,124,113,114,144,0,114,133,90,122],
[87,97,109,73,89,97,0,112,88,121],
[118,132,87,111,54,78,99,0,80,99],
[120,99,100,97,118,121,123,131,0,131],
[120,112,101,111,87,89,90,112,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,96,103,105,112,111,83,98,109],
[111,0,117,111,115,95,105,107,114,102],
[115,94,0,107,114,106,108,89,107,109],
[108,100,104,0,113,101,103,92,107,96],
[106,96,97,98,0,95,106,91,100,97],
[99,116,105,110,116,0,97,83,106,94],
[100,106,103,108,105,114,0,91,111,107],
[128,104,122,119,120,128,120,0,119,118],
[113,97,104,104,111,105,100,92,0,103],
[102,109,102,115,114,117,104,93,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,99,112,92,120,126,112,104],
[103,0,117,116,116,102,120,137,88,102],
[95,94,0,99,106,94,115,129,114,86],
[112,95,112,0,101,106,103,119,97,99],
[99,95,105,110,0,112,106,114,105,87],
[119,109,117,105,99,0,114,114,117,85],
[91,91,96,108,105,97,0,113,61,82],
[85,74,82,92,97,97,98,0,99,86],
[99,123,97,114,106,94,150,112,0,121],
[107,109,125,112,124,126,129,125,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,110,102,105,121,104,95,101,98],
[118,0,107,109,111,114,118,93,107,108],
[101,104,0,102,107,107,113,94,94,97],
[109,102,109,0,118,118,103,98,98,97],
[106,100,104,93,0,108,111,100,100,98],
[90,97,104,93,103,0,103,83,96,94],
[107,93,98,108,100,108,0,94,97,97],
[116,118,117,113,111,128,117,0,113,103],
[110,104,117,113,111,115,114,98,0,109],
[113,103,114,114,113,117,114,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,133,125,117,115,132,116,116,105],
[94,0,120,101,102,104,126,106,114,89],
[78,91,0,100,81,97,97,98,89,84],
[86,110,111,0,109,104,108,101,104,96],
[94,109,130,102,0,108,111,109,100,107],
[96,107,114,107,103,0,112,101,101,112],
[79,85,114,103,100,99,0,96,94,105],
[95,105,113,110,102,110,115,0,103,102],
[95,97,122,107,111,110,117,108,0,100],
[106,122,127,115,104,99,106,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,105,108,109,94,116,93,96,107],
[116,0,107,112,138,103,114,116,111,122],
[106,104,0,112,117,92,111,90,105,95],
[103,99,99,0,107,98,129,106,108,110],
[102,73,94,104,0,86,116,97,101,102],
[117,108,119,113,125,0,141,115,118,99],
[95,97,100,82,95,70,0,100,96,96],
[118,95,121,105,114,96,111,0,98,104],
[115,100,106,103,110,93,115,113,0,112],
[104,89,116,101,109,112,115,107,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,102,107,108,104,96,110,105,102],
[100,0,101,113,111,106,104,104,106,109],
[109,110,0,120,115,115,101,104,114,105],
[104,98,91,0,103,98,97,103,98,97],
[103,100,96,108,0,104,100,113,101,101],
[107,105,96,113,107,0,105,106,109,109],
[115,107,110,114,111,106,0,115,105,106],
[101,107,107,108,98,105,96,0,98,101],
[106,105,97,113,110,102,106,113,0,105],
[109,102,106,114,110,102,105,110,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,114,106,105,100,117,100,109,112],
[103,0,109,105,104,102,116,103,109,109],
[97,102,0,101,96,105,103,95,104,105],
[105,106,110,0,91,109,112,101,106,111],
[106,107,115,120,0,110,121,100,106,121],
[111,109,106,102,101,0,113,108,98,111],
[94,95,108,99,90,98,0,95,99,98],
[111,108,116,110,111,103,116,0,109,108],
[102,102,107,105,105,113,112,102,0,111],
[99,102,106,100,90,100,113,103,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,76,77,75,74,58,93,96,56],
[152,0,131,94,112,112,113,112,96,75],
[135,80,0,155,135,75,97,75,97,59],
[134,117,56,0,115,75,94,94,134,96],
[136,99,76,96,0,56,59,77,78,59],
[137,99,136,136,155,0,80,99,118,79],
[153,98,114,117,152,131,0,75,115,114],
[118,99,136,117,134,112,136,0,136,77],
[115,115,114,77,133,93,96,75,0,114],
[155,136,152,115,152,132,97,134,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,88,95,105,103,104,100,93,122],
[124,0,100,111,122,101,119,119,108,128],
[123,111,0,115,119,104,115,108,104,114],
[116,100,96,0,114,107,119,107,99,121],
[106,89,92,97,0,94,105,108,100,101],
[108,110,107,104,117,0,127,106,103,107],
[107,92,96,92,106,84,0,104,100,105],
[111,92,103,104,103,105,107,0,99,108],
[118,103,107,112,111,108,111,112,0,115],
[89,83,97,90,110,104,106,103,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,100,104,95,95,112,110,108,120],
[95,0,95,86,93,105,107,112,99,120],
[111,116,0,119,109,94,113,108,104,114],
[107,125,92,0,122,105,106,102,114,112],
[116,118,102,89,0,110,96,111,111,114],
[116,106,117,106,101,0,109,114,104,115],
[99,104,98,105,115,102,0,101,99,118],
[101,99,103,109,100,97,110,0,104,122],
[103,112,107,97,100,107,112,107,0,110],
[91,91,97,99,97,96,93,89,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,115,107,103,103,108,109,118,100],
[107,0,120,107,107,106,115,99,121,103],
[96,91,0,106,96,87,95,96,110,89],
[104,104,105,0,105,107,112,110,122,105],
[108,104,115,106,0,106,113,99,119,106],
[108,105,124,104,105,0,99,103,112,102],
[103,96,116,99,98,112,0,96,117,101],
[102,112,115,101,112,108,115,0,118,102],
[93,90,101,89,92,99,94,93,0,94],
[111,108,122,106,105,109,110,109,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,89,101,100,113,148,117,97,99],
[88,0,128,116,102,138,134,88,128,93],
[122,83,0,105,115,98,105,68,97,92],
[110,95,106,0,124,106,116,81,116,99],
[111,109,96,87,0,117,119,78,97,75],
[98,73,113,105,94,0,91,65,81,70],
[63,77,106,95,92,120,0,71,87,69],
[94,123,143,130,133,146,140,0,110,131],
[114,83,114,95,114,130,124,101,0,100],
[112,118,119,112,136,141,142,80,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,114,99,116,120,103,99,110,96],
[102,0,111,108,118,110,103,106,99,114],
[97,100,0,112,116,105,108,103,103,112],
[112,103,99,0,120,119,105,102,112,112],
[95,93,95,91,0,95,94,98,99,79],
[91,101,106,92,116,0,96,111,106,100],
[108,108,103,106,117,115,0,116,103,98],
[112,105,108,109,113,100,95,0,98,93],
[101,112,108,99,112,105,108,113,0,98],
[115,97,99,99,132,111,113,118,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,121,112,106,108,118,112,105,119],
[98,0,114,104,97,99,116,103,100,111],
[90,97,0,88,88,91,100,105,92,99],
[99,107,123,0,102,100,103,112,98,118],
[105,114,123,109,0,107,117,115,109,111],
[103,112,120,111,104,0,113,113,102,115],
[93,95,111,108,94,98,0,101,91,103],
[99,108,106,99,96,98,110,0,101,105],
[106,111,119,113,102,109,120,110,0,120],
[92,100,112,93,100,96,108,106,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,105,106,109,113,99,113,101,108],
[97,0,101,95,93,95,100,109,97,93],
[106,110,0,121,110,110,107,117,104,104],
[105,116,90,0,88,105,97,98,96,95],
[102,118,101,123,0,115,114,123,114,102],
[98,116,101,106,96,0,112,113,102,100],
[112,111,104,114,97,99,0,108,107,105],
[98,102,94,113,88,98,103,0,100,93],
[110,114,107,115,97,109,104,111,0,106],
[103,118,107,116,109,111,106,118,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,107,107,107,103,122,127,97,110],
[113,0,118,117,86,114,111,123,105,114],
[104,93,0,122,101,114,116,119,108,96],
[104,94,89,0,93,103,108,113,93,92],
[104,125,110,118,0,116,105,125,124,118],
[108,97,97,108,95,0,110,106,106,100],
[89,100,95,103,106,101,0,108,87,107],
[84,88,92,98,86,105,103,0,87,75],
[114,106,103,118,87,105,124,124,0,114],
[101,97,115,119,93,111,104,136,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,114,116,104,104,97,98,112,111],
[93,0,92,99,107,101,90,86,104,110],
[97,119,0,110,104,105,100,110,105,118],
[95,112,101,0,95,101,96,105,109,109],
[107,104,107,116,0,102,97,100,106,116],
[107,110,106,110,109,0,107,103,115,117],
[114,121,111,115,114,104,0,117,109,123],
[113,125,101,106,111,108,94,0,108,108],
[99,107,106,102,105,96,102,103,0,123],
[100,101,93,102,95,94,88,103,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,114,136,103,121,122,95,110,102],
[95,0,133,157,140,111,113,121,95,121],
[97,78,0,140,97,104,78,107,105,94],
[75,54,71,0,62,103,80,81,82,77],
[108,71,114,149,0,105,117,108,114,115],
[90,100,107,108,106,0,111,100,87,98],
[89,98,133,131,94,100,0,114,93,103],
[116,90,104,130,103,111,97,0,129,105],
[101,116,106,129,97,124,118,82,0,87],
[109,90,117,134,96,113,108,106,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,101,99,109,94,108,93,111,106],
[104,0,96,92,107,103,87,89,91,100],
[110,115,0,113,107,112,101,119,99,124],
[112,119,98,0,106,105,109,111,98,102],
[102,104,104,105,0,103,96,92,113,114],
[117,108,99,106,108,0,103,104,107,100],
[103,124,110,102,115,108,0,110,108,114],
[118,122,92,100,119,107,101,0,99,105],
[100,120,112,113,98,104,103,112,0,115],
[105,111,87,109,97,111,97,106,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,79,123,106,107,62,139,121,137],
[166,0,94,152,167,107,124,139,136,150],
[132,117,0,151,164,104,107,136,179,149],
[88,59,60,0,74,90,93,91,121,150],
[105,44,47,137,0,62,62,109,121,136],
[104,104,107,121,149,0,79,93,149,120],
[149,87,104,118,149,132,0,133,163,164],
[72,72,75,120,102,118,78,0,148,135],
[90,75,32,90,90,62,48,63,0,138],
[74,61,62,61,75,91,47,76,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,115,104,121,119,112,119,129,115],
[96,0,120,113,106,112,106,107,121,124],
[96,91,0,90,107,100,109,115,92,122],
[107,98,121,0,111,111,109,106,107,118],
[90,105,104,100,0,98,98,123,104,117],
[92,99,111,100,113,0,81,101,119,119],
[99,105,102,102,113,130,0,113,119,118],
[92,104,96,105,88,110,98,0,103,110],
[82,90,119,104,107,92,92,108,0,118],
[96,87,89,93,94,92,93,101,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,109,107,120,114,107,117,122,108],
[114,0,107,118,111,105,109,107,114,85],
[102,104,0,100,109,105,108,96,108,101],
[104,93,111,0,112,120,106,104,128,100],
[91,100,102,99,0,115,107,103,113,95],
[97,106,106,91,96,0,102,117,118,104],
[104,102,103,105,104,109,0,107,123,91],
[94,104,115,107,108,94,104,0,110,97],
[89,97,103,83,98,93,88,101,0,84],
[103,126,110,111,116,107,120,114,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,111,104,104,97,114,107,105],
[109,0,109,107,105,103,100,107,114,108],
[110,102,0,93,96,97,105,105,111,103],
[100,104,118,0,103,107,110,113,108,118],
[107,106,115,108,0,116,111,116,115,100],
[107,108,114,104,95,0,102,102,108,102],
[114,111,106,101,100,109,0,113,115,106],
[97,104,106,98,95,109,98,0,114,107],
[104,97,100,103,96,103,96,97,0,94],
[106,103,108,93,111,109,105,104,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,96,119,125,94,110,120,107],
[104,0,105,118,108,120,100,110,102,97],
[107,106,0,124,119,123,102,109,97,102],
[115,93,87,0,112,126,88,123,83,99],
[92,103,92,99,0,122,86,121,93,103],
[86,91,88,85,89,0,77,108,89,92],
[117,111,109,123,125,134,0,114,110,101],
[101,101,102,88,90,103,97,0,104,95],
[91,109,114,128,118,122,101,107,0,100],
[104,114,109,112,108,119,110,116,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,107,106,103,103,96,103,113],
[102,0,115,109,110,104,112,106,111,107],
[106,96,0,108,105,106,109,104,105,104],
[104,102,103,0,102,98,102,97,102,102],
[105,101,106,109,0,106,122,114,111,112],
[108,107,105,113,105,0,108,101,111,104],
[108,99,102,109,89,103,0,103,112,112],
[115,105,107,114,97,110,108,0,109,110],
[108,100,106,109,100,100,99,102,0,98],
[98,104,107,109,99,107,99,101,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,102,101,110,92,100,105,112],
[104,0,92,86,95,102,97,93,97,93],
[106,119,0,95,99,106,108,100,89,86],
[109,125,116,0,95,109,107,105,106,111],
[110,116,112,116,0,115,106,104,105,117],
[101,109,105,102,96,0,98,104,103,110],
[119,114,103,104,105,113,0,118,108,109],
[111,118,111,106,107,107,93,0,106,100],
[106,114,122,105,106,108,103,105,0,103],
[99,118,125,100,94,101,102,111,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,94,113,111,104,109,99,107,109],
[109,0,110,108,103,109,102,108,113,100],
[117,101,0,113,104,107,107,103,118,106],
[98,103,98,0,108,104,105,103,112,97],
[100,108,107,103,0,100,103,96,106,101],
[107,102,104,107,111,0,105,109,103,95],
[102,109,104,106,108,106,0,104,101,95],
[112,103,108,108,115,102,107,0,111,104],
[104,98,93,99,105,108,110,100,0,95],
[102,111,105,114,110,116,116,107,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,120,117,128,123,124,120,103],
[102,0,99,109,114,110,117,115,116,107],
[104,112,0,105,119,114,120,111,118,98],
[91,102,106,0,121,106,117,113,119,96],
[94,97,92,90,0,107,112,101,109,89],
[83,101,97,105,104,0,118,116,112,94],
[88,94,91,94,99,93,0,105,96,86],
[87,96,100,98,110,95,106,0,106,92],
[91,95,93,92,102,99,115,105,0,93],
[108,104,113,115,122,117,125,119,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,111,90,96,96,103,90,103,87],
[111,0,109,94,89,92,104,99,99,99],
[100,102,0,97,92,80,99,87,99,94],
[121,117,114,0,107,112,117,104,114,101],
[115,122,119,104,0,99,124,109,107,106],
[115,119,131,99,112,0,121,102,112,99],
[108,107,112,94,87,90,0,95,101,84],
[121,112,124,107,102,109,116,0,115,95],
[108,112,112,97,104,99,110,96,0,99],
[124,112,117,110,105,112,127,116,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,110,104,110,121,96,122,109,90],
[104,0,114,101,93,125,91,106,110,95],
[101,97,0,88,82,104,68,101,100,101],
[107,110,123,0,83,105,80,112,114,110],
[101,118,129,128,0,122,120,115,124,100],
[90,86,107,106,89,0,71,96,91,89],
[115,120,143,131,91,140,0,134,111,110],
[89,105,110,99,96,115,77,0,113,116],
[102,101,111,97,87,120,100,98,0,81],
[121,116,110,101,111,122,101,95,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,73,95,116,118,99,140,63,79],
[125,0,87,118,117,119,101,142,110,81],
[138,124,0,143,164,155,146,135,132,103],
[116,93,68,0,121,90,78,131,99,116],
[95,94,47,90,0,104,102,115,123,93],
[93,92,56,121,107,0,90,126,122,116],
[112,110,65,133,109,121,0,121,109,123],
[71,69,76,80,96,85,90,0,75,69],
[148,101,79,112,88,89,102,136,0,103],
[132,130,108,95,118,95,88,142,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,89,90,87,91,103,90,100,97],
[114,0,112,104,100,109,125,118,114,110],
[122,99,0,99,91,90,113,104,110,110],
[121,107,112,0,111,118,118,106,105,109],
[124,111,120,100,0,117,119,118,112,118],
[120,102,121,93,94,0,114,102,100,100],
[108,86,98,93,92,97,0,101,98,95],
[121,93,107,105,93,109,110,0,114,107],
[111,97,101,106,99,111,113,97,0,102],
[114,101,101,102,93,111,116,104,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,88,98,126,110,96,110,106,108],
[99,0,108,114,135,115,96,105,110,91],
[123,103,0,118,137,122,108,131,116,114],
[113,97,93,0,135,99,91,118,111,106],
[85,76,74,76,0,85,70,107,91,98],
[101,96,89,112,126,0,94,104,116,106],
[115,115,103,120,141,117,0,126,109,120],
[101,106,80,93,104,107,85,0,102,86],
[105,101,95,100,120,95,102,109,0,98],
[103,120,97,105,113,105,91,125,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,99,101,98,111,106,96,111,88],
[101,0,88,90,83,94,105,93,100,103],
[112,123,0,104,109,111,108,103,122,120],
[110,121,107,0,116,112,125,102,118,107],
[113,128,102,95,0,114,118,109,117,100],
[100,117,100,99,97,0,115,100,111,107],
[105,106,103,86,93,96,0,100,109,93],
[115,118,108,109,102,111,111,0,120,112],
[100,111,89,93,94,100,102,91,0,95],
[123,108,91,104,111,104,118,99,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,69,211,211,139,139,211,139,141],
[0,0,69,141,141,69,0,141,0,141],
[142,142,0,211,211,70,142,211,142,72],
[0,70,0,0,70,70,70,139,0,0],
[0,70,0,141,0,0,0,139,0,0],
[72,142,141,141,211,0,142,211,72,72],
[72,211,69,141,211,69,0,211,72,141],
[0,70,0,72,72,0,0,0,0,0],
[72,211,69,211,211,139,139,211,0,141],
[70,70,139,211,211,139,70,211,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,97,94,111,95,107,104,106,111],
[105,0,86,93,98,107,105,101,106,112],
[114,125,0,106,112,109,115,118,100,117],
[117,118,105,0,117,119,117,118,120,113],
[100,113,99,94,0,111,100,98,108,107],
[116,104,102,92,100,0,104,108,114,106],
[104,106,96,94,111,107,0,104,113,112],
[107,110,93,93,113,103,107,0,108,109],
[105,105,111,91,103,97,98,103,0,114],
[100,99,94,98,104,105,99,102,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,92,113,69,106,112,104,115,102],
[104,0,108,110,110,103,121,115,119,113],
[119,103,0,96,104,102,137,118,117,100],
[98,101,115,0,87,108,126,111,111,105],
[142,101,107,124,0,114,136,130,112,110],
[105,108,109,103,97,0,113,120,124,87],
[99,90,74,85,75,98,0,89,82,83],
[107,96,93,100,81,91,122,0,81,100],
[96,92,94,100,99,87,129,130,0,89],
[109,98,111,106,101,124,128,111,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,116,100,139,116,92,87,107,96],
[96,0,93,109,140,123,75,87,105,85],
[95,118,0,85,113,114,91,83,88,89],
[111,102,126,0,131,104,85,98,100,79],
[72,71,98,80,0,104,85,51,61,84],
[95,88,97,107,107,0,75,85,80,85],
[119,136,120,126,126,136,0,104,94,111],
[124,124,128,113,160,126,107,0,103,121],
[104,106,123,111,150,131,117,108,0,100],
[115,126,122,132,127,126,100,90,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,104,111,112,92,92,97,98,106],
[97,0,92,108,107,95,81,93,89,91],
[107,119,0,112,115,109,108,111,106,91],
[100,103,99,0,103,103,108,99,96,99],
[99,104,96,108,0,103,92,95,90,111],
[119,116,102,108,108,0,99,101,91,112],
[119,130,103,103,119,112,0,121,107,112],
[114,118,100,112,116,110,90,0,95,118],
[113,122,105,115,121,120,104,116,0,108],
[105,120,120,112,100,99,99,93,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,112,99,107,100,104,107,101,97],
[102,0,108,98,94,101,100,108,111,90],
[99,103,0,99,105,91,101,107,97,97],
[112,113,112,0,113,109,105,114,108,111],
[104,117,106,98,0,96,110,108,107,102],
[111,110,120,102,115,0,102,120,102,108],
[107,111,110,106,101,109,0,98,105,101],
[104,103,104,97,103,91,113,0,99,105],
[110,100,114,103,104,109,106,112,0,101],
[114,121,114,100,109,103,110,106,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,122,88,81,102,96,111,106,92],
[102,0,117,105,77,98,106,91,112,100],
[89,94,0,82,80,87,82,76,90,89],
[123,106,129,0,97,99,122,117,135,115],
[130,134,131,114,0,135,103,112,127,121],
[109,113,124,112,76,0,105,96,124,84],
[115,105,129,89,108,106,0,93,109,82],
[100,120,135,94,99,115,118,0,135,92],
[105,99,121,76,84,87,102,76,0,105],
[119,111,122,96,90,127,129,119,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,87,92,90,89,100,90,100,94],
[112,0,101,95,100,92,93,94,111,105],
[124,110,0,107,103,105,99,98,117,107],
[119,116,104,0,104,109,108,99,123,104],
[121,111,108,107,0,105,105,105,120,114],
[122,119,106,102,106,0,93,111,120,116],
[111,118,112,103,106,118,0,106,117,112],
[121,117,113,112,106,100,105,0,118,117],
[111,100,94,88,91,91,94,93,0,96],
[117,106,104,107,97,95,99,94,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,117,100,110,106,101,110,108],
[112,0,109,117,115,114,111,106,99,112],
[112,102,0,112,104,115,106,104,107,108],
[94,94,99,0,110,108,100,92,95,104],
[111,96,107,101,0,120,112,105,101,105],
[101,97,96,103,91,0,98,92,103,106],
[105,100,105,111,99,113,0,102,103,104],
[110,105,107,119,106,119,109,0,109,117],
[101,112,104,116,110,108,108,102,0,107],
[103,99,103,107,106,105,107,94,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,115,126,101,119,114,129,125,140],
[87,0,71,85,87,110,101,100,80,112],
[96,140,0,113,105,120,99,103,108,135],
[85,126,98,0,92,115,102,109,95,119],
[110,124,106,119,0,121,114,113,91,131],
[92,101,91,96,90,0,88,94,103,132],
[97,110,112,109,97,123,0,102,103,129],
[82,111,108,102,98,117,109,0,119,125],
[86,131,103,116,120,108,108,92,0,125],
[71,99,76,92,80,79,82,86,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,151,182,90,60,90,121,90,121],
[90,0,120,121,120,90,119,90,120,120],
[60,91,0,91,90,30,90,120,89,121],
[29,90,120,0,59,59,89,90,89,120],
[121,91,121,152,0,59,119,120,89,150],
[151,121,181,152,152,0,121,90,119,150],
[121,92,121,122,92,90,0,120,120,120],
[90,121,91,121,91,121,91,0,150,91],
[121,91,122,122,122,92,91,61,0,91],
[90,91,90,91,61,61,91,120,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,104,97,103,102,100,105,105,107],
[105,0,100,110,108,98,101,95,109,106],
[107,111,0,107,116,110,102,116,112,101],
[114,101,104,0,111,107,109,108,116,110],
[108,103,95,100,0,104,99,104,112,105],
[109,113,101,104,107,0,100,112,115,104],
[111,110,109,102,112,111,0,105,112,98],
[106,116,95,103,107,99,106,0,118,107],
[106,102,99,95,99,96,99,93,0,93],
[104,105,110,101,106,107,113,104,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,106,93,90,92,130,94,87,97],
[109,0,119,127,117,104,133,109,104,120],
[105,92,0,90,93,102,113,97,118,111],
[118,84,121,0,91,109,106,83,108,107],
[121,94,118,120,0,100,134,95,107,113],
[119,107,109,102,111,0,114,93,95,113],
[81,78,98,105,77,97,0,88,90,105],
[117,102,114,128,116,118,123,0,111,104],
[124,107,93,103,104,116,121,100,0,114],
[114,91,100,104,98,98,106,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,117,114,124,110,103,108,110,121],
[91,0,98,90,104,86,101,89,92,118],
[94,113,0,101,113,106,104,115,111,118],
[97,121,110,0,115,114,97,100,112,116],
[87,107,98,96,0,90,105,87,88,114],
[101,125,105,97,121,0,113,105,102,121],
[108,110,107,114,106,98,0,100,116,123],
[103,122,96,111,124,106,111,0,114,118],
[101,119,100,99,123,109,95,97,0,122],
[90,93,93,95,97,90,88,93,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,70,70,0,0,0,0,0],
[211,0,141,70,211,71,70,71,0,71],
[211,70,0,70,140,70,140,70,70,141],
[141,141,141,0,141,141,141,141,71,141],
[141,0,71,70,0,0,70,0,0,71],
[211,140,141,70,211,0,70,141,0,71],
[211,141,71,70,141,141,0,71,141,71],
[211,140,141,70,211,70,140,0,70,71],
[211,211,141,140,211,211,70,141,0,141],
[211,140,70,70,140,140,140,140,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,98,94,102,100,95,97,103,103],
[118,0,113,116,116,118,109,104,119,127],
[113,98,0,114,116,107,105,104,113,112],
[117,95,97,0,108,100,90,88,108,110],
[109,95,95,103,0,104,94,95,107,103],
[111,93,104,111,107,0,109,107,110,112],
[116,102,106,121,117,102,0,103,107,115],
[114,107,107,123,116,104,108,0,112,116],
[108,92,98,103,104,101,104,99,0,104],
[108,84,99,101,108,99,96,95,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,89,88,103,95,89,86,94,107],
[107,0,106,109,122,107,102,107,106,105],
[122,105,0,117,128,115,110,115,108,110],
[123,102,94,0,111,108,107,104,102,114],
[108,89,83,100,0,98,103,94,89,98],
[116,104,96,103,113,0,101,104,100,102],
[122,109,101,104,108,110,0,93,95,113],
[125,104,96,107,117,107,118,0,89,104],
[117,105,103,109,122,111,116,122,0,106],
[104,106,101,97,113,109,98,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,113,107,99,102,115,107,93,97],
[96,0,116,103,111,106,108,104,100,97],
[98,95,0,106,110,104,113,108,94,97],
[104,108,105,0,118,109,114,104,99,94],
[112,100,101,93,0,102,112,99,94,105],
[109,105,107,102,109,0,104,102,92,91],
[96,103,98,97,99,107,0,100,101,101],
[104,107,103,107,112,109,111,0,106,94],
[118,111,117,112,117,119,110,105,0,108],
[114,114,114,117,106,120,110,117,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,108,102,126,103,120,106,106],
[103,0,92,103,105,101,96,103,105,107],
[99,119,0,99,116,113,105,111,114,113],
[103,108,112,0,105,110,111,117,105,103],
[109,106,95,106,0,108,107,117,114,98],
[85,110,98,101,103,0,99,107,100,96],
[108,115,106,100,104,112,0,120,111,108],
[91,108,100,94,94,104,91,0,100,93],
[105,106,97,106,97,111,100,111,0,98],
[105,104,98,108,113,115,103,118,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,117,101,107,104,112,107,107],
[105,0,104,119,102,110,103,118,106,114],
[104,107,0,113,86,101,114,116,108,97],
[94,92,98,0,90,97,92,112,95,92],
[110,109,125,121,0,104,113,131,103,122],
[104,101,110,114,107,0,98,104,93,96],
[107,108,97,119,98,113,0,100,111,88],
[99,93,95,99,80,107,111,0,98,103],
[104,105,103,116,108,118,100,113,0,100],
[104,97,114,119,89,115,123,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,116,123,118,113,111,107,98],
[109,0,101,125,132,116,105,103,108,109],
[110,110,0,115,129,94,92,116,111,116],
[95,86,96,0,116,106,90,115,93,119],
[88,79,82,95,0,78,94,94,66,85],
[93,95,117,105,133,0,106,103,91,105],
[98,106,119,121,117,105,0,106,98,117],
[100,108,95,96,117,108,105,0,94,100],
[104,103,100,118,145,120,113,117,0,117],
[113,102,95,92,126,106,94,111,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,95,114,136,110,138,126,101,111],
[111,0,97,107,136,116,128,114,108,99],
[116,114,0,109,136,123,137,136,105,116],
[97,104,102,0,132,113,134,107,105,103],
[75,75,75,79,0,91,99,85,74,78],
[101,95,88,98,120,0,118,109,101,88],
[73,83,74,77,112,93,0,97,89,86],
[85,97,75,104,126,102,114,0,95,93],
[110,103,106,106,137,110,122,116,0,105],
[100,112,95,108,133,123,125,118,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,87,107,92,88,104,104,96,104],
[105,0,102,120,102,99,110,118,97,112],
[124,109,0,128,96,102,98,115,94,104],
[104,91,83,0,86,101,89,100,83,94],
[119,109,115,125,0,117,120,112,101,111],
[123,112,109,110,94,0,102,109,97,94],
[107,101,113,122,91,109,0,113,108,124],
[107,93,96,111,99,102,98,0,97,100],
[115,114,117,128,110,114,103,114,0,109],
[107,99,107,117,100,117,87,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,107,98,100,107,94,100,86,91],
[109,0,122,119,94,135,108,105,88,98],
[104,89,0,85,94,127,69,100,82,97],
[113,92,126,0,105,131,82,93,93,99],
[111,117,117,106,0,134,91,116,85,119],
[104,76,84,80,77,0,73,89,78,85],
[117,103,142,129,120,138,0,123,101,114],
[111,106,111,118,95,122,88,0,107,103],
[125,123,129,118,126,133,110,104,0,117],
[120,113,114,112,92,126,97,108,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,101,114,114,124,91,117,123,116],
[113,0,118,104,99,108,110,129,132,111],
[110,93,0,95,98,104,116,105,121,126],
[97,107,116,0,111,127,102,81,132,109],
[97,112,113,100,0,109,91,93,147,105],
[87,103,107,84,102,0,111,117,143,122],
[120,101,95,109,120,100,0,125,143,123],
[94,82,106,130,118,94,86,0,127,109],
[88,79,90,79,64,68,68,84,0,94],
[95,100,85,102,106,89,88,102,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,92,101,91,94,91,97,99,103],
[122,0,92,104,103,110,94,103,108,92],
[119,119,0,118,104,114,106,116,115,119],
[110,107,93,0,96,114,93,102,97,110],
[120,108,107,115,0,107,95,124,116,123],
[117,101,97,97,104,0,108,102,107,116],
[120,117,105,118,116,103,0,114,99,123],
[114,108,95,109,87,109,97,0,97,115],
[112,103,96,114,95,104,112,114,0,110],
[108,119,92,101,88,95,88,96,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,102,107,97,112,103,120,103,101],
[116,0,119,113,108,126,104,113,104,124],
[109,92,0,118,105,110,95,109,99,114],
[104,98,93,0,102,111,108,114,98,107],
[114,103,106,109,0,119,105,118,103,116],
[99,85,101,100,92,0,91,114,93,95],
[108,107,116,103,106,120,0,127,116,122],
[91,98,102,97,93,97,84,0,98,107],
[108,107,112,113,108,118,95,113,0,119],
[110,87,97,104,95,116,89,104,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,101,104,97,100,97,88,98,97],
[100,0,110,120,105,110,98,119,117,106],
[110,101,0,96,91,116,105,99,117,106],
[107,91,115,0,96,104,118,105,91,102],
[114,106,120,115,0,102,108,96,100,109],
[111,101,95,107,109,0,103,118,101,85],
[114,113,106,93,103,108,0,102,108,83],
[123,92,112,106,115,93,109,0,109,88],
[113,94,94,120,111,110,103,102,0,103],
[114,105,105,109,102,126,128,123,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,121,105,114,97,105,114,112,113],
[93,0,102,100,85,107,93,108,84,101],
[90,109,0,115,98,109,104,98,93,100],
[106,111,96,0,106,110,116,120,99,90],
[97,126,113,105,0,117,121,111,120,118],
[114,104,102,101,94,0,117,105,120,110],
[106,118,107,95,90,94,0,94,92,97],
[97,103,113,91,100,106,117,0,98,92],
[99,127,118,112,91,91,119,113,0,101],
[98,110,111,121,93,101,114,119,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,122,115,102,126,110,110,112,106],
[112,0,109,108,92,119,113,115,132,111],
[89,102,0,92,80,88,79,83,95,97],
[96,103,119,0,83,104,96,120,101,91],
[109,119,131,128,0,99,103,106,124,122],
[85,92,123,107,112,0,111,115,109,118],
[101,98,132,115,108,100,0,136,132,122],
[101,96,128,91,105,96,75,0,116,106],
[99,79,116,110,87,102,79,95,0,106],
[105,100,114,120,89,93,89,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,95,92,109,88,111,88,102,86],
[112,0,106,104,107,97,108,90,92,87],
[116,105,0,113,111,105,116,97,102,110],
[119,107,98,0,111,110,111,106,102,106],
[102,104,100,100,0,95,120,102,99,100],
[123,114,106,101,116,0,112,110,101,94],
[100,103,95,100,91,99,0,88,90,89],
[123,121,114,105,109,101,123,0,115,102],
[109,119,109,109,112,110,121,96,0,96],
[125,124,101,105,111,117,122,109,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,97,96,108,96,113,106,98,111],
[116,0,115,109,115,112,118,105,109,116],
[114,96,0,110,108,98,115,112,111,107],
[115,102,101,0,108,98,103,94,101,112],
[103,96,103,103,0,100,105,101,100,100],
[115,99,113,113,111,0,112,93,97,112],
[98,93,96,108,106,99,0,101,112,108],
[105,106,99,117,110,118,110,0,113,114],
[113,102,100,110,111,114,99,98,0,103],
[100,95,104,99,111,99,103,97,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,114,112,102,108,119,107,120,96],
[100,0,103,107,115,106,122,112,106,100],
[97,108,0,114,114,104,113,105,115,110],
[99,104,97,0,107,99,118,89,109,110],
[109,96,97,104,0,109,105,106,107,111],
[103,105,107,112,102,0,109,102,113,99],
[92,89,98,93,106,102,0,96,115,100],
[104,99,106,122,105,109,115,0,107,107],
[91,105,96,102,104,98,96,104,0,96],
[115,111,101,101,100,112,111,104,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,111,109,112,119,103,104,107,107],
[114,0,105,110,123,115,101,124,124,107],
[100,106,0,107,104,109,100,101,106,110],
[102,101,104,0,118,118,99,115,122,95],
[99,88,107,93,0,113,97,101,95,92],
[92,96,102,93,98,0,97,86,91,96],
[108,110,111,112,114,114,0,108,126,102],
[107,87,110,96,110,125,103,0,108,116],
[104,87,105,89,116,120,85,103,0,110],
[104,104,101,116,119,115,109,95,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,100,77,110,74,73,81,83,75],
[100,0,89,100,98,95,88,97,80,94],
[111,122,0,118,99,89,96,86,95,114],
[134,111,93,0,128,117,109,106,105,93],
[101,113,112,83,0,92,96,89,91,96],
[137,116,122,94,119,0,110,106,106,118],
[138,123,115,102,115,101,0,103,93,104],
[130,114,125,105,122,105,108,0,115,122],
[128,131,116,106,120,105,118,96,0,107],
[136,117,97,118,115,93,107,89,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,53,52,132,106,26,133,107,106],
[132,0,132,132,134,132,105,159,81,133],
[158,79,0,133,133,157,133,106,107,158],
[159,79,78,0,107,131,104,158,107,132],
[79,77,78,104,0,104,51,158,107,105],
[105,79,54,80,107,0,53,80,81,80],
[185,106,78,107,160,158,0,107,108,132],
[78,52,105,53,53,131,104,0,54,78],
[104,130,104,104,104,130,103,157,0,104],
[105,78,53,79,106,131,79,133,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,92,93,95,117,93,87,101],
[108,0,97,102,103,95,110,95,93,99],
[107,114,0,109,115,109,122,106,104,107],
[119,109,102,0,112,109,123,99,102,107],
[118,108,96,99,0,102,124,101,88,109],
[116,116,102,102,109,0,125,94,102,105],
[94,101,89,88,87,86,0,87,92,96],
[118,116,105,112,110,117,124,0,107,120],
[124,118,107,109,123,109,119,104,0,121],
[110,112,104,104,102,106,115,91,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,101,105,125,113,113,111,102,101],
[98,0,94,79,131,106,102,97,109,103],
[110,117,0,93,112,114,92,107,100,110],
[106,132,118,0,135,124,113,100,92,107],
[86,80,99,76,0,100,106,83,82,78],
[98,105,97,87,111,0,106,85,84,93],
[98,109,119,98,105,105,0,102,83,88],
[100,114,104,111,128,126,109,0,95,113],
[109,102,111,119,129,127,128,116,0,113],
[110,108,101,104,133,118,123,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,111,95,81,104,104,105,107,105],
[102,0,104,102,95,113,116,107,107,98],
[100,107,0,94,80,111,108,99,103,92],
[116,109,117,0,99,108,115,112,123,105],
[130,116,131,112,0,126,114,131,119,105],
[107,98,100,103,85,0,100,102,102,108],
[107,95,103,96,97,111,0,111,116,112],
[106,104,112,99,80,109,100,0,118,111],
[104,104,108,88,92,109,95,93,0,103],
[106,113,119,106,106,103,99,100,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,116,122,78,92,133,97,167,123],
[84,0,112,116,72,76,98,82,119,82],
[95,99,0,124,74,110,134,117,136,131],
[89,95,87,0,76,101,108,105,120,104],
[133,139,137,135,0,101,142,116,155,135],
[119,135,101,110,110,0,100,91,147,141],
[78,113,77,103,69,111,0,95,123,84],
[114,129,94,106,95,120,116,0,163,118],
[44,92,75,91,56,64,88,48,0,75],
[88,129,80,107,76,70,127,93,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,78,83,110,100,97,88,121,91],
[104,0,92,125,140,115,113,99,117,113],
[133,119,0,96,136,120,111,107,112,109],
[128,86,115,0,113,108,104,104,122,111],
[101,71,75,98,0,99,84,84,108,95],
[111,96,91,103,112,0,101,96,96,99],
[114,98,100,107,127,110,0,97,113,107],
[123,112,104,107,127,115,114,0,130,118],
[90,94,99,89,103,115,98,81,0,90],
[120,98,102,100,116,112,104,93,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,87,92,86,103,119,84,87,98],
[118,0,87,105,98,96,99,103,61,110],
[124,124,0,114,98,128,130,97,98,128],
[119,106,97,0,115,114,135,113,107,121],
[125,113,113,96,0,136,109,89,79,99],
[108,115,83,97,75,0,112,100,66,82],
[92,112,81,76,102,99,0,111,71,104],
[127,108,114,98,122,111,100,0,87,113],
[124,150,113,104,132,145,140,124,0,150],
[113,101,83,90,112,129,107,98,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,96,107,123,97,105,109,94,105],
[112,0,84,104,123,107,102,128,94,99],
[115,127,0,128,127,131,105,121,118,126],
[104,107,83,0,103,81,84,84,111,93],
[88,88,84,108,0,97,102,105,98,89],
[114,104,80,130,114,0,120,113,118,110],
[106,109,106,127,109,91,0,107,115,112],
[102,83,90,127,106,98,104,0,97,100],
[117,117,93,100,113,93,96,114,0,109],
[106,112,85,118,122,101,99,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,95,109,118,98,101,102,82,89],
[98,0,99,101,107,82,98,110,91,81],
[116,112,0,106,121,102,104,104,103,95],
[102,110,105,0,109,98,100,105,94,97],
[93,104,90,102,0,94,104,106,90,85],
[113,129,109,113,117,0,120,121,110,101],
[110,113,107,111,107,91,0,107,94,94],
[109,101,107,106,105,90,104,0,95,90],
[129,120,108,117,121,101,117,116,0,110],
[122,130,116,114,126,110,117,121,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,93,87,93,83,72,88,85,97],
[120,0,112,67,92,87,103,101,92,105],
[118,99,0,89,94,120,106,88,74,99],
[124,144,122,0,120,137,111,117,110,104],
[118,119,117,91,0,126,82,107,97,119],
[128,124,91,74,85,0,87,109,94,99],
[139,108,105,100,129,124,0,111,129,120],
[123,110,123,94,104,102,100,0,101,117],
[126,119,137,101,114,117,82,110,0,139],
[114,106,112,107,92,112,91,94,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,75,125,84,107,66,83,108,112],
[100,0,95,108,82,82,74,98,105,120],
[136,116,0,118,113,112,102,124,126,129],
[86,103,93,0,86,91,84,99,123,103],
[127,129,98,125,0,105,129,117,138,140],
[104,129,99,120,106,0,110,115,118,114],
[145,137,109,127,82,101,0,124,144,144],
[128,113,87,112,94,96,87,0,112,116],
[103,106,85,88,73,93,67,99,0,79],
[99,91,82,108,71,97,67,95,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,97,108,108,104,101,99,103,97],
[108,0,99,111,105,115,115,103,107,107],
[114,112,0,111,114,113,124,99,120,105],
[103,100,100,0,118,120,118,108,104,97],
[103,106,97,93,0,105,114,104,103,105],
[107,96,98,91,106,0,106,102,99,95],
[110,96,87,93,97,105,0,97,101,98],
[112,108,112,103,107,109,114,0,115,111],
[108,104,91,107,108,112,110,96,0,101],
[114,104,106,114,106,116,113,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,99,114,93,117,94,96,103,93],
[95,0,100,102,102,132,111,102,103,96],
[112,111,0,115,88,121,88,89,112,99],
[97,109,96,0,107,113,93,98,92,94],
[118,109,123,104,0,134,107,103,108,97],
[94,79,90,98,77,0,73,91,84,84],
[117,100,123,118,104,138,0,105,121,120],
[115,109,122,113,108,120,106,0,111,96],
[108,108,99,119,103,127,90,100,0,96],
[118,115,112,117,114,127,91,115,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,95,104,101,98,113,106,106],
[104,0,102,87,94,102,98,114,100,100],
[108,109,0,98,91,104,107,127,111,111],
[116,124,113,0,102,111,105,119,119,114],
[107,117,120,109,0,106,101,132,106,113],
[110,109,107,100,105,0,96,122,99,111],
[113,113,104,106,110,115,0,120,110,115],
[98,97,84,92,79,89,91,0,103,97],
[105,111,100,92,105,112,101,108,0,109],
[105,111,100,97,98,100,96,114,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,118,110,92,119,98,107,121,110],
[113,0,119,113,111,112,106,96,118,97],
[93,92,0,116,96,94,97,79,92,87],
[101,98,95,0,101,79,90,84,100,104],
[119,100,115,110,0,100,94,103,113,109],
[92,99,117,132,111,0,115,107,113,103],
[113,105,114,121,117,96,0,97,119,120],
[104,115,132,127,108,104,114,0,105,103],
[90,93,119,111,98,98,92,106,0,117],
[101,114,124,107,102,108,91,108,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,100,97,104,103,88,81,104,103],
[112,0,95,114,128,99,110,122,108,121],
[111,116,0,114,114,125,107,98,108,132],
[114,97,97,0,101,97,103,93,117,109],
[107,83,97,110,0,106,108,94,99,113],
[108,112,86,114,105,0,90,93,111,109],
[123,101,104,108,103,121,0,100,117,121],
[130,89,113,118,117,118,111,0,107,125],
[107,103,103,94,112,100,94,104,0,102],
[108,90,79,102,98,102,90,86,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,116,103,99,96,124,106,110,115],
[98,0,104,108,97,98,114,115,104,108],
[95,107,0,91,96,95,108,106,102,94],
[108,103,120,0,101,116,109,104,99,112],
[112,114,115,110,0,105,119,117,108,108],
[115,113,116,95,106,0,121,107,114,110],
[87,97,103,102,92,90,0,105,100,98],
[105,96,105,107,94,104,106,0,96,92],
[101,107,109,112,103,97,111,115,0,115],
[96,103,117,99,103,101,113,119,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,88,99,102,102,85,81,98,80],
[121,0,92,123,100,121,90,98,126,83],
[123,119,0,109,109,117,89,100,121,118],
[112,88,102,0,108,117,75,115,92,90],
[109,111,102,103,0,115,92,110,111,101],
[109,90,94,94,96,0,89,101,105,99],
[126,121,122,136,119,122,0,106,105,100],
[130,113,111,96,101,110,105,0,118,100],
[113,85,90,119,100,106,106,93,0,79],
[131,128,93,121,110,112,111,111,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,96,94,98,103,114,94,107,105],
[117,0,107,124,103,114,121,106,118,110],
[115,104,0,117,101,112,114,112,113,108],
[117,87,94,0,98,104,108,104,94,96],
[113,108,110,113,0,107,113,102,104,106],
[108,97,99,107,104,0,106,89,106,100],
[97,90,97,103,98,105,0,96,102,95],
[117,105,99,107,109,122,115,0,114,103],
[104,93,98,117,107,105,109,97,0,103],
[106,101,103,115,105,111,116,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,106,141,106,89,125,158,124,140],
[88,0,109,105,106,106,107,157,86,69],
[105,102,0,105,88,52,88,192,104,69],
[70,106,106,0,88,90,124,141,86,87],
[105,105,123,123,0,87,105,174,120,85],
[122,105,159,121,124,0,105,156,103,121],
[86,104,123,87,106,106,0,175,104,86],
[53,54,19,70,37,55,36,0,53,37],
[87,125,107,125,91,108,107,158,0,125],
[71,142,142,124,126,90,125,174,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,101,83,94,98,86,94,96,91],
[101,0,84,100,86,124,83,100,99,83],
[110,127,0,108,108,128,113,90,113,110],
[128,111,103,0,120,115,108,100,120,111],
[117,125,103,91,0,100,81,89,103,98],
[113,87,83,96,111,0,94,86,106,80],
[125,128,98,103,130,117,0,84,111,88],
[117,111,121,111,122,125,127,0,111,98],
[115,112,98,91,108,105,100,100,0,95],
[120,128,101,100,113,131,123,113,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,103,107,110,111,108,102,116,107],
[105,0,103,106,108,104,103,103,110,102],
[108,108,0,110,108,117,104,106,111,111],
[104,105,101,0,103,107,102,90,110,102],
[101,103,103,108,0,115,98,97,103,100],
[100,107,94,104,96,0,94,86,101,99],
[103,108,107,109,113,117,0,102,114,109],
[109,108,105,121,114,125,109,0,123,117],
[95,101,100,101,108,110,97,88,0,103],
[104,109,100,109,111,112,102,94,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,101,111,102,112,122,109,113],
[103,0,97,103,101,108,117,106,106,110],
[103,114,0,114,114,112,107,114,107,112],
[110,108,97,0,100,107,107,94,102,101],
[100,110,97,111,0,119,110,106,101,107],
[109,103,99,104,92,0,119,111,96,100],
[99,94,104,104,101,92,0,106,97,103],
[89,105,97,117,105,100,105,0,104,100],
[102,105,104,109,110,115,114,107,0,125],
[98,101,99,110,104,111,108,111,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,121,103,102,102,119,118,120,117],
[90,0,123,109,105,96,115,112,114,102],
[90,88,0,90,89,89,98,91,107,96],
[108,102,121,0,109,94,109,106,114,106],
[109,106,122,102,0,94,118,106,108,107],
[109,115,122,117,117,0,114,101,118,111],
[92,96,113,102,93,97,0,100,112,107],
[93,99,120,105,105,110,111,0,120,112],
[91,97,104,97,103,93,99,91,0,99],
[94,109,115,105,104,100,104,99,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,96,93,111,108,104,105,104,97],
[118,0,108,109,119,110,126,115,128,103],
[115,103,0,94,117,99,108,110,112,88],
[118,102,117,0,121,116,112,113,117,105],
[100,92,94,90,0,95,101,111,115,93],
[103,101,112,95,116,0,113,111,115,106],
[107,85,103,99,110,98,0,106,120,91],
[106,96,101,98,100,100,105,0,114,89],
[107,83,99,94,96,96,91,97,0,96],
[114,108,123,106,118,105,120,122,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,111,104,107,113,109,115,111,98],
[117,0,120,113,112,116,122,103,118,118],
[100,91,0,109,102,107,117,112,113,103],
[107,98,102,0,93,108,109,107,108,95],
[104,99,109,118,0,111,114,107,111,97],
[98,95,104,103,100,0,116,102,103,92],
[102,89,94,102,97,95,0,97,96,84],
[96,108,99,104,104,109,114,0,97,114],
[100,93,98,103,100,108,115,114,0,104],
[113,93,108,116,114,119,127,97,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,107,102,103,103,97,98,92,95],
[119,0,113,114,106,120,119,97,111,125],
[104,98,0,101,109,106,121,104,110,110],
[109,97,110,0,105,108,105,94,87,108],
[108,105,102,106,0,116,97,95,107,103],
[108,91,105,103,95,0,96,110,87,102],
[114,92,90,106,114,115,0,99,94,124],
[113,114,107,117,116,101,112,0,105,105],
[119,100,101,124,104,124,117,106,0,120],
[116,86,101,103,108,109,87,106,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,96,94,105,87,99,99,96,88],
[113,0,95,106,111,118,118,121,107,109],
[115,116,0,94,103,96,109,110,102,114],
[117,105,117,0,128,112,115,126,118,118],
[106,100,108,83,0,113,111,108,102,103],
[124,93,115,99,98,0,119,126,103,116],
[112,93,102,96,100,92,0,103,103,107],
[112,90,101,85,103,85,108,0,93,105],
[115,104,109,93,109,108,108,118,0,98],
[123,102,97,93,108,95,104,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,102,116,103,107,104,120,110],
[111,0,117,112,123,108,109,104,122,108],
[108,94,0,115,109,102,115,109,120,102],
[109,99,96,0,117,101,109,106,106,111],
[95,88,102,94,0,90,100,94,109,95],
[108,103,109,110,121,0,104,106,112,106],
[104,102,96,102,111,107,0,97,115,94],
[107,107,102,105,117,105,114,0,109,101],
[91,89,91,105,102,99,96,102,0,93],
[101,103,109,100,116,105,117,110,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,95,111,104,109,114,96,116,111],
[104,0,108,116,93,111,124,90,102,116],
[116,103,0,109,104,106,123,110,108,107],
[100,95,102,0,93,103,103,90,101,102],
[107,118,107,118,0,100,120,109,108,118],
[102,100,105,108,111,0,116,103,114,112],
[97,87,88,108,91,95,0,95,98,110],
[115,121,101,121,102,108,116,0,105,126],
[95,109,103,110,103,97,113,106,0,100],
[100,95,104,109,93,99,101,85,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,131,106,116,108,109,100,106,106],
[94,0,102,118,106,103,100,118,111,108],
[80,109,0,94,86,118,71,83,77,97],
[105,93,117,0,102,108,94,102,89,100],
[95,105,125,109,0,117,97,114,109,111],
[103,108,93,103,94,0,77,93,95,98],
[102,111,140,117,114,134,0,107,111,100],
[111,93,128,109,97,118,104,0,95,124],
[105,100,134,122,102,116,100,116,0,104],
[105,103,114,111,100,113,111,87,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,109,118,104,110,115,114,103],
[101,0,117,111,103,105,99,104,104,101],
[100,94,0,118,118,104,110,115,112,100],
[102,100,93,0,108,96,99,104,111,107],
[93,108,93,103,0,100,100,100,92,94],
[107,106,107,115,111,0,95,104,105,97],
[101,112,101,112,111,116,0,98,113,108],
[96,107,96,107,111,107,113,0,104,108],
[97,107,99,100,119,106,98,107,0,108],
[108,110,111,104,117,114,103,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,101,105,105,106,100,96,104,123],
[95,0,108,97,108,114,99,99,101,116],
[110,103,0,108,103,116,103,100,102,112],
[106,114,103,0,96,117,100,108,96,123],
[106,103,108,115,0,114,105,101,96,120],
[105,97,95,94,97,0,88,88,94,107],
[111,112,108,111,106,123,0,100,109,120],
[115,112,111,103,110,123,111,0,105,125],
[107,110,109,115,115,117,102,106,0,121],
[88,95,99,88,91,104,91,86,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,112,118,109,118,96,112,109,109],
[92,0,108,108,107,121,90,101,103,97],
[99,103,0,109,101,119,84,101,102,93],
[93,103,102,0,96,97,91,104,91,88],
[102,104,110,115,0,106,89,97,96,102],
[93,90,92,114,105,0,85,96,107,89],
[115,121,127,120,122,126,0,105,110,104],
[99,110,110,107,114,115,106,0,112,110],
[102,108,109,120,115,104,101,99,0,107],
[102,114,118,123,109,122,107,101,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,114,110,110,121,125,118,106,103],
[102,0,120,104,112,113,118,122,107,104],
[97,91,0,98,105,112,109,109,99,95],
[101,107,113,0,109,116,115,108,105,109],
[101,99,106,102,0,106,120,118,103,103],
[90,98,99,95,105,0,106,109,94,103],
[86,93,102,96,91,105,0,108,96,96],
[93,89,102,103,93,102,103,0,95,95],
[105,104,112,106,108,117,115,116,0,107],
[108,107,116,102,108,108,115,116,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,98,107,99,105,103,101,98,117],
[112,0,110,99,107,107,107,100,105,120],
[113,101,0,102,100,103,106,105,102,115],
[104,112,109,0,102,109,113,100,103,118],
[112,104,111,109,0,103,97,96,100,108],
[106,104,108,102,108,0,102,114,101,112],
[108,104,105,98,114,109,0,102,98,117],
[110,111,106,111,115,97,109,0,106,121],
[113,106,109,108,111,110,113,105,0,117],
[94,91,96,93,103,99,94,90,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,126,100,141,142,111,111,100,114],
[126,0,140,128,140,98,111,111,112,140],
[85,71,0,84,112,70,85,101,99,87],
[111,83,127,0,140,111,140,126,127,126],
[70,71,99,71,0,70,98,111,100,100],
[69,113,141,100,141,0,127,140,126,127],
[100,100,126,71,113,84,0,113,114,100],
[100,100,110,85,100,71,98,0,86,71],
[111,99,112,84,111,85,97,125,0,141],
[97,71,124,85,111,84,111,140,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,106,103,97,106,108,98,82,126],
[116,0,143,122,139,108,144,117,97,159],
[105,68,0,87,104,81,106,89,69,97],
[108,89,124,0,132,100,116,124,80,102],
[114,72,107,79,0,88,64,88,71,107],
[105,103,130,111,123,0,105,122,107,143],
[103,67,105,95,147,106,0,114,114,115],
[113,94,122,87,123,89,97,0,123,105],
[129,114,142,131,140,104,97,88,0,130],
[85,52,114,109,104,68,96,106,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,99,116,112,104,109,101,105],
[109,0,97,100,115,95,94,94,93,104],
[109,114,0,116,108,94,92,116,115,116],
[112,111,95,0,105,101,103,100,98,94],
[95,96,103,106,0,105,101,91,80,87],
[99,116,117,110,106,0,123,95,93,103],
[107,117,119,108,110,88,0,96,105,103],
[102,117,95,111,120,116,115,0,89,97],
[110,118,96,113,131,118,106,122,0,118],
[106,107,95,117,124,108,108,114,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,100,97,99,106,115,108,107,97],
[108,0,95,101,91,93,109,112,99,110],
[111,116,0,104,112,119,127,108,102,110],
[114,110,107,0,106,107,121,121,103,118],
[112,120,99,105,0,106,123,120,109,116],
[105,118,92,104,105,0,109,117,110,117],
[96,102,84,90,88,102,0,96,95,95],
[103,99,103,90,91,94,115,0,103,94],
[104,112,109,108,102,101,116,108,0,101],
[114,101,101,93,95,94,116,117,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,125,128,128,117,120,128,111,131],
[114,0,137,118,100,129,109,135,93,120],
[86,74,0,89,83,88,90,73,57,89],
[83,93,122,0,109,116,115,98,63,106],
[83,111,128,102,0,104,119,133,93,118],
[94,82,123,95,107,0,87,96,76,110],
[91,102,121,96,92,124,0,114,94,95],
[83,76,138,113,78,115,97,0,71,99],
[100,118,154,148,118,135,117,140,0,131],
[80,91,122,105,93,101,116,112,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,114,121,113,114,99,104,111,100],
[89,0,105,117,101,110,97,99,106,96],
[97,106,0,132,102,118,96,116,107,101],
[90,94,79,0,92,99,95,101,84,85],
[98,110,109,119,0,119,95,105,103,107],
[97,101,93,112,92,0,86,99,98,94],
[112,114,115,116,116,125,0,110,101,104],
[107,112,95,110,106,112,101,0,101,100],
[100,105,104,127,108,113,110,110,0,109],
[111,115,110,126,104,117,107,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,110,111,112,125,101,118,134,121],
[90,0,102,98,100,115,104,118,109,123],
[101,109,0,97,104,110,116,101,117,124],
[100,113,114,0,101,125,107,125,118,130],
[99,111,107,110,0,115,106,111,103,118],
[86,96,101,86,96,0,92,101,104,99],
[110,107,95,104,105,119,0,105,116,119],
[93,93,110,86,100,110,106,0,96,98],
[77,102,94,93,108,107,95,115,0,109],
[90,88,87,81,93,112,92,113,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,107,95,113,97,105,117,100,119],
[112,0,110,106,111,106,105,109,103,120],
[104,101,0,97,112,106,105,104,95,123],
[116,105,114,0,114,112,112,121,111,111],
[98,100,99,97,0,86,100,106,104,115],
[114,105,105,99,125,0,110,120,102,122],
[106,106,106,99,111,101,0,120,105,114],
[94,102,107,90,105,91,91,0,98,105],
[111,108,116,100,107,109,106,113,0,123],
[92,91,88,100,96,89,97,106,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,99,107,108,82,92,106,102,97],
[111,0,103,112,110,100,98,104,91,93],
[112,108,0,118,108,103,94,104,97,119],
[104,99,93,0,106,96,118,102,100,107],
[103,101,103,105,0,87,99,104,98,89],
[129,111,108,115,124,0,98,114,114,115],
[119,113,117,93,112,113,0,101,103,107],
[105,107,107,109,107,97,110,0,104,97],
[109,120,114,111,113,97,108,107,0,111],
[114,118,92,104,122,96,104,114,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,106,122,104,113,117,105,130,121],
[95,0,111,126,95,98,140,119,120,104],
[105,100,0,118,101,116,105,90,108,93],
[89,85,93,0,83,73,94,68,101,99],
[107,116,110,128,0,103,135,102,129,114],
[98,113,95,138,108,0,129,107,110,136],
[94,71,106,117,76,82,0,94,113,133],
[106,92,121,143,109,104,117,0,121,147],
[81,91,103,110,82,101,98,90,0,116],
[90,107,118,112,97,75,78,64,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,121,112,106,105,100,108,116,105],
[93,0,98,94,102,105,93,104,105,101],
[90,113,0,97,103,94,91,104,105,100],
[99,117,114,0,101,96,107,108,114,101],
[105,109,108,110,0,99,105,106,110,109],
[106,106,117,115,112,0,107,105,114,111],
[111,118,120,104,106,104,0,117,126,119],
[103,107,107,103,105,106,94,0,108,111],
[95,106,106,97,101,97,85,103,0,108],
[106,110,111,110,102,100,92,100,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,109,101,96,104,105,116,98,106],
[96,0,96,96,105,97,100,116,97,99],
[102,115,0,108,116,107,107,112,107,112],
[110,115,103,0,99,113,106,110,104,104],
[115,106,95,112,0,115,120,117,102,122],
[107,114,104,98,96,0,114,115,102,110],
[106,111,104,105,91,97,0,112,96,123],
[95,95,99,101,94,96,99,0,108,98],
[113,114,104,107,109,109,115,103,0,109],
[105,112,99,107,89,101,88,113,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,108,102,93,98,108,104,94,94],
[134,0,115,112,106,118,123,137,101,120],
[103,96,0,125,86,105,113,132,101,89],
[109,99,86,0,77,79,106,117,100,107],
[118,105,125,134,0,104,102,125,102,114],
[113,93,106,132,107,0,94,143,105,118],
[103,88,98,105,109,117,0,135,109,116],
[107,74,79,94,86,68,76,0,89,92],
[117,110,110,111,109,106,102,122,0,112],
[117,91,122,104,97,93,95,119,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,95,105,107,89,105,103,97,95],
[118,0,109,123,119,101,116,107,124,110],
[116,102,0,111,105,106,108,113,108,104],
[106,88,100,0,101,90,102,102,104,95],
[104,92,106,110,0,103,101,98,108,109],
[122,110,105,121,108,0,110,117,105,105],
[106,95,103,109,110,101,0,103,94,102],
[108,104,98,109,113,94,108,0,109,109],
[114,87,103,107,103,106,117,102,0,105],
[116,101,107,116,102,106,109,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,105,105,149,85,85,62,105,107],
[168,0,106,127,170,85,85,85,126,150],
[106,105,0,147,190,105,126,126,86,148],
[106,84,64,0,170,108,108,61,106,128],
[62,41,21,41,0,106,64,61,41,105],
[126,126,106,103,105,0,127,123,126,148],
[126,126,85,103,147,84,0,82,104,149],
[149,126,85,150,150,88,129,0,129,128],
[106,85,125,105,170,85,107,82,0,148],
[104,61,63,83,106,63,62,83,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,117,113,118,125,118,116,114,115],
[106,0,113,122,111,117,127,98,110,130],
[94,98,0,106,111,129,116,115,113,114],
[98,89,105,0,111,118,117,105,119,118],
[93,100,100,100,0,121,107,97,98,113],
[86,94,82,93,90,0,103,108,94,91],
[93,84,95,94,104,108,0,97,88,92],
[95,113,96,106,114,103,114,0,107,113],
[97,101,98,92,113,117,123,104,0,104],
[96,81,97,93,98,120,119,98,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,114,115,101,105,113,123,104,128],
[104,0,125,110,108,101,111,116,104,119],
[97,86,0,97,84,83,99,108,87,95],
[96,101,114,0,99,96,115,112,99,103],
[110,103,127,112,0,109,117,116,107,123],
[106,110,128,115,102,0,121,119,107,121],
[98,100,112,96,94,90,0,106,97,107],
[88,95,103,99,95,92,105,0,96,106],
[107,107,124,112,104,104,114,115,0,123],
[83,92,116,108,88,90,104,105,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,90,95,99,104,81,97,113,109],
[128,0,124,109,111,124,107,103,129,127],
[121,87,0,96,109,113,102,107,111,105],
[116,102,115,0,109,122,114,98,114,116],
[112,100,102,102,0,114,103,109,111,116],
[107,87,98,89,97,0,103,107,103,111],
[130,104,109,97,108,108,0,98,122,113],
[114,108,104,113,102,104,113,0,108,116],
[98,82,100,97,100,108,89,103,0,105],
[102,84,106,95,95,100,98,95,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,104,96,117,105,101,109,111],
[98,0,108,96,87,110,100,97,119,102],
[104,103,0,106,104,109,106,91,118,110],
[107,115,105,0,113,114,102,92,115,97],
[115,124,107,98,0,106,108,102,118,100],
[94,101,102,97,105,0,102,90,105,96],
[106,111,105,109,103,109,0,89,110,108],
[110,114,120,119,109,121,122,0,124,100],
[102,92,93,96,93,106,101,87,0,92],
[100,109,101,114,111,115,103,111,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,105,103,82,85,81,82,92,90],
[130,0,111,102,90,83,80,102,99,99],
[106,100,0,88,77,94,86,103,111,107],
[108,109,123,0,73,95,81,86,97,115],
[129,121,134,138,0,112,119,105,135,116],
[126,128,117,116,99,0,101,118,104,116],
[130,131,125,130,92,110,0,134,121,134],
[129,109,108,125,106,93,77,0,104,112],
[119,112,100,114,76,107,90,107,0,129],
[121,112,104,96,95,95,77,99,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,111,124,98,110,109,111,100,105],
[106,0,112,112,109,120,116,113,105,110],
[100,99,0,109,94,110,106,100,100,110],
[87,99,102,0,96,101,98,102,105,99],
[113,102,117,115,0,112,115,117,113,105],
[101,91,101,110,99,0,108,95,90,98],
[102,95,105,113,96,103,0,113,94,97],
[100,98,111,109,94,116,98,0,99,105],
[111,106,111,106,98,121,117,112,0,109],
[106,101,101,112,106,113,114,106,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,86,115,92,104,95,97,122,125],
[117,0,117,90,113,101,99,76,119,115],
[125,94,0,99,101,93,90,111,104,122],
[96,121,112,0,105,112,97,103,122,126],
[119,98,110,106,0,120,90,127,134,122],
[107,110,118,99,91,0,104,92,119,106],
[116,112,121,114,121,107,0,97,123,125],
[114,135,100,108,84,119,114,0,115,132],
[89,92,107,89,77,92,88,96,0,98],
[86,96,89,85,89,105,86,79,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,91,84,93,98,88,100,105,82],
[109,0,88,92,90,90,95,95,111,100],
[120,123,0,103,96,112,119,111,124,104],
[127,119,108,0,115,109,101,116,130,110],
[118,121,115,96,0,99,114,107,109,98],
[113,121,99,102,112,0,98,97,124,98],
[123,116,92,110,97,113,0,109,129,119],
[111,116,100,95,104,114,102,0,125,106],
[106,100,87,81,102,87,82,86,0,81],
[129,111,107,101,113,113,92,105,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,102,98,90,100,99,90,97],
[105,0,116,112,118,106,117,120,106,113],
[104,95,0,101,103,98,97,106,99,103],
[109,99,110,0,109,96,107,102,101,100],
[113,93,108,102,0,99,105,92,100,100],
[121,105,113,115,112,0,119,117,102,109],
[111,94,114,104,106,92,0,95,91,97],
[112,91,105,109,119,94,116,0,107,103],
[121,105,112,110,111,109,120,104,0,112],
[114,98,108,111,111,102,114,108,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,92,100,93,94,105,105,107,101],
[116,0,110,111,108,104,122,115,111,116],
[119,101,0,99,108,111,112,115,100,115],
[111,100,112,0,100,100,119,116,109,92],
[118,103,103,111,0,96,124,120,103,103],
[117,107,100,111,115,0,125,115,113,113],
[106,89,99,92,87,86,0,95,97,103],
[106,96,96,95,91,96,116,0,100,107],
[104,100,111,102,108,98,114,111,0,108],
[110,95,96,119,108,98,108,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,93,83,106,98,106,99,88,85],
[113,0,101,102,112,111,114,116,107,105],
[118,110,0,94,98,97,106,104,115,97],
[128,109,117,0,121,96,124,101,115,107],
[105,99,113,90,0,93,94,100,109,93],
[113,100,114,115,118,0,112,98,114,106],
[105,97,105,87,117,99,0,87,98,94],
[112,95,107,110,111,113,124,0,109,98],
[123,104,96,96,102,97,113,102,0,95],
[126,106,114,104,118,105,117,113,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,101,98,103,102,90,93,96],
[110,0,104,89,116,99,101,106,98,100],
[103,107,0,104,111,95,114,90,99,110],
[110,122,107,0,106,92,112,94,75,94],
[113,95,100,105,0,94,113,97,99,118],
[108,112,116,119,117,0,109,97,103,110],
[109,110,97,99,98,102,0,94,107,105],
[121,105,121,117,114,114,117,0,109,112],
[118,113,112,136,112,108,104,102,0,123],
[115,111,101,117,93,101,106,99,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,99,98,107,94,109,108,118],
[106,0,97,99,102,100,96,102,104,103],
[113,114,0,101,94,117,102,99,105,112],
[112,112,110,0,100,117,97,103,112,110],
[113,109,117,111,0,121,100,111,116,114],
[104,111,94,94,90,0,101,94,100,102],
[117,115,109,114,111,110,0,103,115,121],
[102,109,112,108,100,117,108,0,97,107],
[103,107,106,99,95,111,96,114,0,117],
[93,108,99,101,97,109,90,104,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,87,105,100,91,98,88,94,85],
[117,0,102,120,107,93,106,95,101,110],
[124,109,0,110,104,109,111,100,109,123],
[106,91,101,0,97,104,103,102,105,99],
[111,104,107,114,0,103,106,100,113,103],
[120,118,102,107,108,0,99,110,108,117],
[113,105,100,108,105,112,0,106,108,104],
[123,116,111,109,111,101,105,0,113,106],
[117,110,102,106,98,103,103,98,0,104],
[126,101,88,112,108,94,107,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,95,137,118,110,99,103,101,124],
[115,0,108,129,114,111,97,129,112,141],
[116,103,0,121,115,106,91,97,104,123],
[74,82,90,0,111,91,97,103,93,103],
[93,97,96,100,0,105,94,113,99,123],
[101,100,105,120,106,0,73,105,107,115],
[112,114,120,114,117,138,0,125,102,133],
[108,82,114,108,98,106,86,0,94,128],
[110,99,107,118,112,104,109,117,0,128],
[87,70,88,108,88,96,78,83,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,134,104,120,115,113,119,98,138],
[96,0,111,95,103,100,101,108,109,106],
[77,100,0,101,108,102,96,100,95,109],
[107,116,110,0,117,110,111,126,99,120],
[91,108,103,94,0,105,97,99,92,111],
[96,111,109,101,106,0,105,122,101,112],
[98,110,115,100,114,106,0,106,91,124],
[92,103,111,85,112,89,105,0,98,115],
[113,102,116,112,119,110,120,113,0,126],
[73,105,102,91,100,99,87,96,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,118,98,133,121,106,103,107],
[101,0,97,110,113,118,120,103,91,100],
[106,114,0,116,109,103,104,98,100,102],
[93,101,95,0,105,90,99,89,86,95],
[113,98,102,106,0,127,105,105,95,103],
[78,93,108,121,84,0,100,102,80,97],
[90,91,107,112,106,111,0,94,118,116],
[105,108,113,122,106,109,117,0,113,118],
[108,120,111,125,116,131,93,98,0,117],
[104,111,109,116,108,114,95,93,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,117,112,104,95,105,106,108,102],
[103,0,126,119,127,107,128,104,124,122],
[94,85,0,94,102,108,112,91,118,108],
[99,92,117,0,92,103,101,107,123,101],
[107,84,109,119,0,95,98,116,117,102],
[116,104,103,108,116,0,113,104,119,107],
[106,83,99,110,113,98,0,97,106,113],
[105,107,120,104,95,107,114,0,129,107],
[103,87,93,88,94,92,105,82,0,97],
[109,89,103,110,109,104,98,104,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,113,94,88,114,106,116,117,122],
[111,0,123,133,119,118,106,106,102,109],
[98,88,0,85,113,116,82,101,104,75],
[117,78,126,0,118,136,110,96,104,105],
[123,92,98,93,0,114,80,102,98,116],
[97,93,95,75,97,0,79,110,81,89],
[105,105,129,101,131,132,0,84,103,110],
[95,105,110,115,109,101,127,0,107,113],
[94,109,107,107,113,130,108,104,0,118],
[89,102,136,106,95,122,101,98,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,112,104,101,110,90,103,102,103],
[120,0,130,121,103,119,99,118,99,106],
[99,81,0,105,99,92,82,106,87,96],
[107,90,106,0,101,113,100,106,111,107],
[110,108,112,110,0,114,112,120,105,108],
[101,92,119,98,97,0,104,105,108,97],
[121,112,129,111,99,107,0,113,107,114],
[108,93,105,105,91,106,98,0,101,100],
[109,112,124,100,106,103,104,110,0,101],
[108,105,115,104,103,114,97,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,117,95,104,109,119,116,109,102],
[99,0,109,97,102,108,104,106,107,92],
[94,102,0,85,96,105,107,107,101,84],
[116,114,126,0,110,114,120,120,117,103],
[107,109,115,101,0,105,105,105,106,102],
[102,103,106,97,106,0,109,115,107,104],
[92,107,104,91,106,102,0,118,112,112],
[95,105,104,91,106,96,93,0,101,93],
[102,104,110,94,105,104,99,110,0,95],
[109,119,127,108,109,107,99,118,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,121,115,124,119,103,108,108,117],
[104,0,116,111,111,111,97,116,113,108],
[90,95,0,108,98,106,105,104,100,105],
[96,100,103,0,105,105,95,105,96,96],
[87,100,113,106,0,106,103,108,95,100],
[92,100,105,106,105,0,105,105,105,98],
[108,114,106,116,108,106,0,112,106,103],
[103,95,107,106,103,106,99,0,94,99],
[103,98,111,115,116,106,105,117,0,98],
[94,103,106,115,111,113,108,112,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,102,100,101,88,114,105,99],
[112,0,98,107,112,113,109,104,119,108],
[105,113,0,108,106,103,114,110,106,121],
[109,104,103,0,102,107,103,125,108,92],
[111,99,105,109,0,95,107,108,102,88],
[110,98,108,104,116,0,102,110,98,100],
[123,102,97,108,104,109,0,102,115,103],
[97,107,101,86,103,101,109,0,119,98],
[106,92,105,103,109,113,96,92,0,108],
[112,103,90,119,123,111,108,113,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,93,96,96,101,99,92,98,106],
[117,0,103,114,94,101,102,90,108,101],
[118,108,0,84,106,97,102,91,98,87],
[115,97,127,0,108,108,115,111,117,98],
[115,117,105,103,0,110,107,114,110,99],
[110,110,114,103,101,0,110,83,120,108],
[112,109,109,96,104,101,0,93,103,102],
[119,121,120,100,97,128,118,0,114,120],
[113,103,113,94,101,91,108,97,0,80],
[105,110,124,113,112,103,109,91,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,78,75,103,74,100,71,74,109],
[123,0,113,85,116,102,115,94,119,106],
[133,98,0,90,102,102,110,78,116,111],
[136,126,121,0,127,99,121,112,138,121],
[108,95,109,84,0,73,120,98,97,116],
[137,109,109,112,138,0,109,90,121,104],
[111,96,101,90,91,102,0,72,79,95],
[140,117,133,99,113,121,139,0,135,127],
[137,92,95,73,114,90,132,76,0,115],
[102,105,100,90,95,107,116,84,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,61,69,114,117,76,90,94,89],
[121,0,117,73,138,138,106,115,128,105],
[150,94,0,114,144,126,131,125,132,109],
[142,138,97,0,142,135,109,127,142,119],
[97,73,67,69,0,112,84,77,83,63],
[94,73,85,76,99,0,116,78,104,90],
[135,105,80,102,127,95,0,103,115,70],
[121,96,86,84,134,133,108,0,109,95],
[117,83,79,69,128,107,96,102,0,58],
[122,106,102,92,148,121,141,116,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,68,111,113,107,85,141,86,95],
[86,0,113,114,131,116,120,112,97,132],
[143,98,0,110,122,134,93,134,105,130],
[100,97,101,0,99,116,105,108,91,108],
[98,80,89,112,0,114,105,107,99,117],
[104,95,77,95,97,0,94,115,79,96],
[126,91,118,106,106,117,0,92,90,79],
[70,99,77,103,104,96,119,0,95,96],
[125,114,106,120,112,132,121,116,0,95],
[116,79,81,103,94,115,132,115,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,115,132,115,130,106,119,125,118],
[112,0,103,121,118,118,106,123,107,113],
[96,108,0,125,108,123,111,121,115,111],
[79,90,86,0,87,107,88,102,91,97],
[96,93,103,124,0,117,107,103,91,110],
[81,93,88,104,94,0,88,95,95,93],
[105,105,100,123,104,123,0,114,103,104],
[92,88,90,109,108,116,97,0,98,105],
[86,104,96,120,120,116,108,113,0,113],
[93,98,100,114,101,118,107,106,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,101,93,103,86,96,100,108,103],
[110,0,119,112,113,108,101,109,125,114],
[110,92,0,97,100,90,97,99,108,108],
[118,99,114,0,118,93,110,108,121,107],
[108,98,111,93,0,92,105,101,116,110],
[125,103,121,118,119,0,113,121,130,100],
[115,110,114,101,106,98,0,99,113,106],
[111,102,112,103,110,90,112,0,117,113],
[103,86,103,90,95,81,98,94,0,97],
[108,97,103,104,101,111,105,98,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,113,110,99,125,118,139,97,134],
[92,0,101,87,86,118,123,126,101,131],
[98,110,0,106,106,110,123,129,100,136],
[101,124,105,0,88,118,110,131,107,129],
[112,125,105,123,0,125,110,136,130,141],
[86,93,101,93,86,0,102,125,100,126],
[93,88,88,101,101,109,0,106,103,111],
[72,85,82,80,75,86,105,0,80,113],
[114,110,111,104,81,111,108,131,0,136],
[77,80,75,82,70,85,100,98,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,67,93,91,115,93,70,140,45],
[139,0,90,116,161,184,138,138,165,90],
[144,121,0,93,139,117,116,92,143,46],
[118,95,118,0,186,165,140,142,117,118],
[120,50,72,25,0,116,25,93,97,50],
[96,27,94,46,95,0,46,93,95,49],
[118,73,95,71,186,165,0,93,141,73],
[141,73,119,69,118,118,118,0,95,74],
[71,46,68,94,114,116,70,116,0,68],
[166,121,165,93,161,162,138,137,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,140,114,99,85,112,101,127,109],
[110,0,143,111,92,88,114,103,103,125],
[71,68,0,77,38,68,75,77,84,88],
[97,100,134,0,91,97,122,103,105,120],
[112,119,173,120,0,111,129,96,120,108],
[126,123,143,114,100,0,124,125,126,117],
[99,97,136,89,82,87,0,108,112,100],
[110,108,134,108,115,86,103,0,104,119],
[84,108,127,106,91,85,99,107,0,118],
[102,86,123,91,103,94,111,92,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,110,103,108,114,101,112,100,101],
[117,0,112,114,106,121,108,104,99,91],
[101,99,0,107,117,121,90,121,99,101],
[108,97,104,0,104,99,98,117,117,107],
[103,105,94,107,0,96,95,97,84,102],
[97,90,90,112,115,0,100,100,93,109],
[110,103,121,113,116,111,0,117,113,113],
[99,107,90,94,114,111,94,0,101,100],
[111,112,112,94,127,118,98,110,0,120],
[110,120,110,104,109,102,98,111,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,98,111,109,93,78,105,92,90],
[114,0,109,106,122,104,112,111,110,110],
[113,102,0,116,109,100,104,110,102,94],
[100,105,95,0,108,86,88,109,99,97],
[102,89,102,103,0,98,88,110,119,115],
[118,107,111,125,113,0,112,124,102,104],
[133,99,107,123,123,99,0,131,117,107],
[106,100,101,102,101,87,80,0,108,93],
[119,101,109,112,92,109,94,103,0,102],
[121,101,117,114,96,107,104,118,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,98,96,98,101,115,87,74,133],
[117,0,105,116,72,116,133,106,86,122],
[113,106,0,99,95,108,128,102,95,137],
[115,95,112,0,106,113,132,107,103,129],
[113,139,116,105,0,141,126,130,115,131],
[110,95,103,98,70,0,108,112,71,111],
[96,78,83,79,85,103,0,111,88,117],
[124,105,109,104,81,99,100,0,76,142],
[137,125,116,108,96,140,123,135,0,142],
[78,89,74,82,80,100,94,69,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,115,114,110,95,131,100,110,84],
[113,0,110,122,120,110,127,115,118,90],
[96,101,0,83,105,97,104,107,113,77],
[97,89,128,0,102,88,132,110,112,87],
[101,91,106,109,0,76,124,113,97,93],
[116,101,114,123,135,0,131,121,111,119],
[80,84,107,79,87,80,0,101,89,71],
[111,96,104,101,98,90,110,0,94,89],
[101,93,98,99,114,100,122,117,0,89],
[127,121,134,124,118,92,140,122,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,111,92,108,102,98,98,102,99],
[117,0,128,107,112,117,116,113,121,104],
[100,83,0,93,100,104,104,95,105,97],
[119,104,118,0,111,116,109,103,122,108],
[103,99,111,100,0,117,106,91,111,95],
[109,94,107,95,94,0,99,92,103,97],
[113,95,107,102,105,112,0,98,105,108],
[113,98,116,108,120,119,113,0,119,110],
[109,90,106,89,100,108,106,92,0,100],
[112,107,114,103,116,114,103,101,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,107,112,110,112,100,106,126,112],
[90,0,92,87,95,104,110,87,114,114],
[104,119,0,109,102,103,92,95,109,108],
[99,124,102,0,98,102,83,82,99,110],
[101,116,109,113,0,104,94,99,116,119],
[99,107,108,109,107,0,107,98,114,110],
[111,101,119,128,117,104,0,105,118,120],
[105,124,116,129,112,113,106,0,121,117],
[85,97,102,112,95,97,93,90,0,101],
[99,97,103,101,92,101,91,94,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,118,114,117,121,117,126,120,100],
[89,0,90,96,108,117,104,106,113,88],
[93,121,0,109,105,115,116,108,120,101],
[97,115,102,0,116,121,118,112,120,109],
[94,103,106,95,0,112,104,109,113,90],
[90,94,96,90,99,0,96,108,111,93],
[94,107,95,93,107,115,0,113,116,88],
[85,105,103,99,102,103,98,0,96,75],
[91,98,91,91,98,100,95,115,0,91],
[111,123,110,102,121,118,123,136,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,104,93,87,99,91,115,109,120],
[105,0,94,99,92,117,92,98,104,115],
[107,117,0,113,105,129,114,101,109,119],
[118,112,98,0,105,112,115,117,105,115],
[124,119,106,106,0,116,105,111,117,117],
[112,94,82,99,95,0,85,100,89,113],
[120,119,97,96,106,126,0,119,111,122],
[96,113,110,94,100,111,92,0,107,114],
[102,107,102,106,94,122,100,104,0,118],
[91,96,92,96,94,98,89,97,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,105,161,124,125,121,115,148,113],
[93,0,88,125,128,118,103,105,104,94],
[106,123,0,115,124,99,105,133,131,107],
[50,86,96,0,108,99,89,99,104,75],
[87,83,87,103,0,88,97,113,114,83],
[86,93,112,112,123,0,106,106,138,104],
[90,108,106,122,114,105,0,126,122,101],
[96,106,78,112,98,105,85,0,127,87],
[63,107,80,107,97,73,89,84,0,48],
[98,117,104,136,128,107,110,124,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,102,108,99,95,111,116,106,97],
[98,0,102,119,95,97,114,112,110,103],
[109,109,0,111,112,100,116,113,101,101],
[103,92,100,0,95,96,110,111,112,106],
[112,116,99,116,0,107,110,116,113,109],
[116,114,111,115,104,0,109,116,117,106],
[100,97,95,101,101,102,0,110,107,92],
[95,99,98,100,95,95,101,0,102,104],
[105,101,110,99,98,94,104,109,0,104],
[114,108,110,105,102,105,119,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,94,102,91,97,92,103,109,98],
[120,0,116,124,99,123,111,132,124,105],
[117,95,0,103,102,115,97,120,110,100],
[109,87,108,0,98,114,101,116,112,97],
[120,112,109,113,0,115,101,119,129,120],
[114,88,96,97,96,0,99,104,116,103],
[119,100,114,110,110,112,0,116,124,104],
[108,79,91,95,92,107,95,0,96,84],
[102,87,101,99,82,95,87,115,0,97],
[113,106,111,114,91,108,107,127,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,144,129,112,96,81,130,128,79],
[116,0,129,130,128,114,130,148,160,81],
[67,82,0,114,95,82,98,148,95,98],
[82,81,97,0,63,96,113,130,112,98],
[99,83,116,148,0,114,115,132,99,114],
[115,97,129,115,97,0,131,148,146,82],
[130,81,113,98,96,80,0,148,80,65],
[81,63,63,81,79,63,63,0,95,63],
[83,51,116,99,112,65,131,116,0,67],
[132,130,113,113,97,129,146,148,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,115,115,98,99,103,105,103,100],
[115,0,125,116,112,103,115,110,105,112],
[96,86,0,102,106,96,84,96,95,107],
[96,95,109,0,104,98,99,89,91,95],
[113,99,105,107,0,91,93,106,103,103],
[112,108,115,113,120,0,105,112,107,117],
[108,96,127,112,118,106,0,92,95,117],
[106,101,115,122,105,99,119,0,106,108],
[108,106,116,120,108,104,116,105,0,106],
[111,99,104,116,108,94,94,103,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,95,115,112,96,99,103,91,105],
[115,0,116,118,111,117,110,109,104,113],
[116,95,0,102,115,120,103,100,94,108],
[96,93,109,0,102,103,96,86,88,96],
[99,100,96,109,0,97,102,94,86,104],
[115,94,91,108,114,0,103,95,91,103],
[112,101,108,115,109,108,0,106,97,115],
[108,102,111,125,117,116,105,0,106,106],
[120,107,117,123,125,120,114,105,0,118],
[106,98,103,115,107,108,96,105,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,106,113,115,102,128,131,127,119],
[93,0,97,94,102,78,112,108,110,96],
[105,114,0,96,108,115,124,117,127,115],
[98,117,115,0,98,102,124,119,112,119],
[96,109,103,113,0,98,117,121,118,123],
[109,133,96,109,113,0,122,117,123,117],
[83,99,87,87,94,89,0,103,112,105],
[80,103,94,92,90,94,108,0,117,94],
[84,101,84,99,93,88,99,94,0,94],
[92,115,96,92,88,94,106,117,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,96,108,90,114,111,108,106,108],
[116,0,94,97,97,110,112,106,108,120],
[115,117,0,96,96,120,121,121,107,113],
[103,114,115,0,107,112,114,111,107,108],
[121,114,115,104,0,120,122,106,114,121],
[97,101,91,99,91,0,103,102,92,104],
[100,99,90,97,89,108,0,98,98,107],
[103,105,90,100,105,109,113,0,91,101],
[105,103,104,104,97,119,113,120,0,121],
[103,91,98,103,90,107,104,110,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,101,97,95,99,117,114,127,119],
[105,0,92,85,99,93,106,112,116,103],
[110,119,0,105,113,94,103,112,119,96],
[114,126,106,0,107,118,112,123,128,99],
[116,112,98,104,0,93,120,118,129,114],
[112,118,117,93,118,0,119,124,126,108],
[94,105,108,99,91,92,0,114,124,109],
[97,99,99,88,93,87,97,0,110,100],
[84,95,92,83,82,85,87,101,0,89],
[92,108,115,112,97,103,102,111,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,97,135,113,113,98,87,87],
[103,0,114,102,137,102,114,63,88,89],
[99,97,0,123,112,124,87,112,101,99],
[114,109,88,0,111,139,76,91,87,101],
[76,74,99,100,0,141,67,76,101,113],
[98,109,87,72,70,0,51,76,73,86],
[98,97,124,135,144,160,0,113,111,134],
[113,148,99,120,135,135,98,0,137,123],
[124,123,110,124,110,138,100,74,0,113],
[124,122,112,110,98,125,77,88,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,82,126,116,113,86,119,87,114],
[101,0,93,105,117,115,101,83,83,83],
[129,118,0,134,131,113,101,125,94,112],
[85,106,77,0,117,131,102,107,80,98],
[95,94,80,94,0,109,105,80,86,110],
[98,96,98,80,102,0,92,88,73,96],
[125,110,110,109,106,119,0,101,99,94],
[92,128,86,104,131,123,110,0,125,85],
[124,128,117,131,125,138,112,86,0,92],
[97,128,99,113,101,115,117,126,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,111,126,118,105,108,106,118],
[104,0,97,92,115,99,103,109,110,97],
[107,114,0,97,101,106,91,93,102,111],
[100,119,114,0,115,111,112,122,120,114],
[85,96,110,96,0,79,82,81,105,98],
[93,112,105,100,132,0,111,109,121,110],
[106,108,120,99,129,100,0,106,117,104],
[103,102,118,89,130,102,105,0,105,110],
[105,101,109,91,106,90,94,106,0,104],
[93,114,100,97,113,101,107,101,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,99,103,92,118,95,113,124,111],
[119,0,119,104,124,124,108,126,129,112],
[112,92,0,82,92,114,97,146,135,116],
[108,107,129,0,116,117,96,128,142,117],
[119,87,119,95,0,113,103,133,132,84],
[93,87,97,94,98,0,93,99,86,82],
[116,103,114,115,108,118,0,113,106,112],
[98,85,65,83,78,112,98,0,88,85],
[87,82,76,69,79,125,105,123,0,93],
[100,99,95,94,127,129,99,126,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,97,96,91,105,88,96,113,96],
[105,0,105,99,105,116,109,105,96,106],
[114,106,0,114,111,127,107,94,107,87],
[115,112,97,0,104,117,103,89,115,102],
[120,106,100,107,0,126,102,97,103,94],
[106,95,84,94,85,0,87,87,105,69],
[123,102,104,108,109,124,0,106,118,117],
[115,106,117,122,114,124,105,0,107,86],
[98,115,104,96,108,106,93,104,0,86],
[115,105,124,109,117,142,94,125,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,106,99,109,106,102,102,102,109],
[113,0,120,98,111,96,111,98,111,106],
[105,91,0,98,112,113,111,101,111,109],
[112,113,113,0,114,114,109,95,111,104],
[102,100,99,97,0,103,106,109,103,107],
[105,115,98,97,108,0,106,101,111,104],
[109,100,100,102,105,105,0,103,105,109],
[109,113,110,116,102,110,108,0,102,116],
[109,100,100,100,108,100,106,109,0,105],
[102,105,102,107,104,107,102,95,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,96,97,100,113,117,108,112,105],
[105,0,95,98,94,81,112,92,116,98],
[115,116,0,107,97,106,111,108,122,101],
[114,113,104,0,108,99,123,113,128,113],
[111,117,114,103,0,95,127,110,130,103],
[98,130,105,112,116,0,107,101,126,105],
[94,99,100,88,84,104,0,94,108,100],
[103,119,103,98,101,110,117,0,116,107],
[99,95,89,83,81,85,103,95,0,107],
[106,113,110,98,108,106,111,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,101,105,106,100,96,95,100,117],
[87,0,93,93,97,96,77,84,90,102],
[110,118,0,105,117,101,108,109,99,107],
[106,118,106,0,107,114,86,109,100,117],
[105,114,94,104,0,92,99,92,83,102],
[111,115,110,97,119,0,108,119,89,112],
[115,134,103,125,112,103,0,112,111,101],
[116,127,102,102,119,92,99,0,100,97],
[111,121,112,111,128,122,100,111,0,113],
[94,109,104,94,109,99,110,114,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,74,111,115,104,107,97,100,85],
[119,0,92,136,110,102,105,110,95,68],
[137,119,0,119,131,140,129,116,107,98],
[100,75,92,0,108,104,101,114,88,77],
[96,101,80,103,0,85,110,92,77,78],
[107,109,71,107,126,0,111,101,93,79],
[104,106,82,110,101,100,0,104,81,94],
[114,101,95,97,119,110,107,0,80,73],
[111,116,104,123,134,118,130,131,0,106],
[126,143,113,134,133,132,117,138,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,118,79,125,106,112,98,118,97],
[88,0,82,84,97,95,97,85,87,111],
[93,129,0,105,126,91,115,103,115,134],
[132,127,106,0,137,105,134,126,121,124],
[86,114,85,74,0,98,105,90,105,116],
[105,116,120,106,113,0,122,97,125,122],
[99,114,96,77,106,89,0,102,125,97],
[113,126,108,85,121,114,109,0,100,120],
[93,124,96,90,106,86,86,111,0,100],
[114,100,77,87,95,89,114,91,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,84,92,69,106,86,76,89,101],
[97,0,109,106,92,127,108,87,106,121],
[127,102,0,86,79,129,123,104,111,122],
[119,105,125,0,84,141,121,116,113,112],
[142,119,132,127,0,144,132,99,117,114],
[105,84,82,70,67,0,95,65,98,88],
[125,103,88,90,79,116,0,101,117,103],
[135,124,107,95,112,146,110,0,119,127],
[122,105,100,98,94,113,94,92,0,107],
[110,90,89,99,97,123,108,84,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,96,99,109,103,130,124,112],
[103,0,98,99,104,113,98,117,126,108],
[108,113,0,108,111,112,111,124,131,104],
[115,112,103,0,115,109,103,125,124,117],
[112,107,100,96,0,113,96,129,115,124],
[102,98,99,102,98,0,104,122,119,105],
[108,113,100,108,115,107,0,126,111,116],
[81,94,87,86,82,89,85,0,101,92],
[87,85,80,87,96,92,100,110,0,100],
[99,103,107,94,87,106,95,119,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,106,100,95,113,102,105,105,113],
[102,0,101,96,108,108,99,100,99,110],
[105,110,0,110,99,106,101,103,93,99],
[111,115,101,0,99,109,107,109,106,114],
[116,103,112,112,0,120,105,110,104,114],
[98,103,105,102,91,0,98,97,95,106],
[109,112,110,104,106,113,0,106,113,103],
[106,111,108,102,101,114,105,0,108,108],
[106,112,118,105,107,116,98,103,0,108],
[98,101,112,97,97,105,108,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,117,95,110,85,107,97,86,113],
[107,0,111,94,117,89,104,104,92,106],
[94,100,0,99,100,95,86,99,90,98],
[116,117,112,0,124,92,114,115,97,124],
[101,94,111,87,0,85,93,85,83,101],
[126,122,116,119,126,0,125,109,97,128],
[104,107,125,97,118,86,0,117,106,122],
[114,107,112,96,126,102,94,0,91,124],
[125,119,121,114,128,114,105,120,0,126],
[98,105,113,87,110,83,89,87,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,98,100,102,93,102,94,103,106],
[108,0,103,108,97,99,96,105,105,103],
[113,108,0,104,99,105,105,111,106,107],
[111,103,107,0,105,102,101,115,104,105],
[109,114,112,106,0,106,103,102,115,102],
[118,112,106,109,105,0,107,109,116,111],
[109,115,106,110,108,104,0,111,112,100],
[117,106,100,96,109,102,100,0,105,97],
[108,106,105,107,96,95,99,106,0,103],
[105,108,104,106,109,100,111,114,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,113,115,105,123,108,112,94,116],
[97,0,108,122,112,103,101,98,106,102],
[98,103,0,113,93,106,101,89,95,111],
[96,89,98,0,99,105,92,95,84,104],
[106,99,118,112,0,102,102,99,98,106],
[88,108,105,106,109,0,99,95,92,105],
[103,110,110,119,109,112,0,107,85,107],
[99,113,122,116,112,116,104,0,94,107],
[117,105,116,127,113,119,126,117,0,107],
[95,109,100,107,105,106,104,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,117,113,131,97,111,118,113,106],
[135,0,121,126,138,94,112,130,119,122],
[94,90,0,102,116,101,79,114,103,99],
[98,85,109,0,137,102,79,98,79,93],
[80,73,95,74,0,66,58,83,95,104],
[114,117,110,109,145,0,105,114,111,114],
[100,99,132,132,153,106,0,125,95,123],
[93,81,97,113,128,97,86,0,104,98],
[98,92,108,132,116,100,116,107,0,127],
[105,89,112,118,107,97,88,113,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,106,99,106,111,95,111,114],
[106,0,100,110,104,91,103,97,106,107],
[106,111,0,120,116,101,110,109,114,111],
[105,101,91,0,101,97,103,89,105,114],
[112,107,95,110,0,101,100,86,108,112],
[105,120,110,114,110,0,109,91,120,112],
[100,108,101,108,111,102,0,103,112,102],
[116,114,102,122,125,120,108,0,131,127],
[100,105,97,106,103,91,99,80,0,95],
[97,104,100,97,99,99,109,84,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,101,109,110,103,108,102,82,98],
[119,0,111,110,112,106,109,106,98,112],
[110,100,0,107,115,114,116,104,110,112],
[102,101,104,0,110,98,105,88,88,84],
[101,99,96,101,0,98,101,78,83,89],
[108,105,97,113,113,0,103,117,102,93],
[103,102,95,106,110,108,0,104,90,97],
[109,105,107,123,133,94,107,0,106,111],
[129,113,101,123,128,109,121,105,0,113],
[113,99,99,127,122,118,114,100,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,96,98,109,87,100,112,107,103],
[116,0,115,105,118,101,97,115,102,114],
[115,96,0,110,111,92,109,109,112,126],
[113,106,101,0,121,112,104,115,115,118],
[102,93,100,90,0,94,107,109,101,103],
[124,110,119,99,117,0,117,110,116,121],
[111,114,102,107,104,94,0,114,111,102],
[99,96,102,96,102,101,97,0,95,101],
[104,109,99,96,110,95,100,116,0,107],
[108,97,85,93,108,90,109,110,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,137,115,94,105,120,88,90],
[107,0,98,102,120,88,100,98,113,94],
[105,113,0,107,121,117,86,106,95,110],
[74,109,104,0,111,99,86,110,94,99],
[96,91,90,100,0,92,84,95,103,89],
[117,123,94,112,119,0,99,81,96,108],
[106,111,125,125,127,112,0,112,102,96],
[91,113,105,101,116,130,99,0,101,99],
[123,98,116,117,108,115,109,110,0,98],
[121,117,101,112,122,103,115,112,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,104,120,96,130,109,82,113,94],
[97,0,114,120,83,113,111,70,94,98],
[107,97,0,112,100,106,100,78,103,95],
[91,91,99,0,99,108,98,85,103,83],
[115,128,111,112,0,125,120,89,101,103],
[81,98,105,103,86,0,88,83,87,81],
[102,100,111,113,91,123,0,85,108,94],
[129,141,133,126,122,128,126,0,122,99],
[98,117,108,108,110,124,103,89,0,109],
[117,113,116,128,108,130,117,112,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,146,134,133,86,154,134,121,121],
[34,0,124,66,78,56,122,55,91,66],
[65,87,0,56,99,53,96,77,78,88],
[77,145,155,0,84,90,123,77,113,98],
[78,133,112,127,0,121,112,60,102,136],
[125,155,158,121,90,0,168,125,123,111],
[57,89,115,88,99,43,0,44,92,78],
[77,156,134,134,151,86,167,0,89,110],
[90,120,133,98,109,88,119,122,0,131],
[90,145,123,113,75,100,133,101,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,108,99,119,87,121,131,106,119],
[113,0,121,121,109,98,145,118,100,157],
[103,90,0,113,116,99,100,122,94,124],
[112,90,98,0,140,75,106,117,93,130],
[92,102,95,71,0,79,101,122,91,101],
[124,113,112,136,132,0,149,150,100,127],
[90,66,111,105,110,62,0,137,91,121],
[80,93,89,94,89,61,74,0,56,102],
[105,111,117,118,120,111,120,155,0,136],
[92,54,87,81,110,84,90,109,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,82,98,98,82,99,74,72,103],
[113,0,81,90,77,79,65,58,78,79],
[129,130,0,140,102,122,114,104,105,121],
[113,121,71,0,105,91,82,89,107,104],
[113,134,109,106,0,101,112,90,111,110],
[129,132,89,120,110,0,110,111,107,89],
[112,146,97,129,99,101,0,94,119,97],
[137,153,107,122,121,100,117,0,138,92],
[139,133,106,104,100,104,92,73,0,101],
[108,132,90,107,101,122,114,119,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,84,101,121,108,107,104,101,97],
[103,0,108,110,117,108,111,98,106,100],
[127,103,0,122,128,128,131,114,124,122],
[110,101,89,0,112,113,116,100,110,103],
[90,94,83,99,0,105,93,94,107,100],
[103,103,83,98,106,0,111,97,112,104],
[104,100,80,95,118,100,0,87,112,97],
[107,113,97,111,117,114,124,0,103,108],
[110,105,87,101,104,99,99,108,0,86],
[114,111,89,108,111,107,114,103,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,113,110,113,106,109,111,101,119],
[111,0,120,99,113,112,120,121,111,133],
[98,91,0,90,96,102,96,89,96,107],
[101,112,121,0,111,125,107,128,105,134],
[98,98,115,100,0,101,110,109,94,129],
[105,99,109,86,110,0,114,96,107,126],
[102,91,115,104,101,97,0,109,109,121],
[100,90,122,83,102,115,102,0,120,129],
[110,100,115,106,117,104,102,91,0,111],
[92,78,104,77,82,85,90,82,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,122,110,104,107,110,130,106,121],
[102,0,115,94,106,102,110,118,99,107],
[89,96,0,84,100,85,103,105,87,97],
[101,117,127,0,108,103,119,118,112,118],
[107,105,111,103,0,99,107,127,100,110],
[104,109,126,108,112,0,115,123,108,112],
[101,101,108,92,104,96,0,119,104,113],
[81,93,106,93,84,88,92,0,81,99],
[105,112,124,99,111,103,107,130,0,112],
[90,104,114,93,101,99,98,112,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,104,102,100,104,113,98,111],
[103,0,109,102,100,98,111,110,100,107],
[105,102,0,100,104,111,101,112,105,109],
[107,109,111,0,106,104,105,113,106,109],
[109,111,107,105,0,112,110,115,104,114],
[111,113,100,107,99,0,107,111,109,110],
[107,100,110,106,101,104,0,104,106,105],
[98,101,99,98,96,100,107,0,99,109],
[113,111,106,105,107,102,105,112,0,121],
[100,104,102,102,97,101,106,102,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,120,101,111,99,107,111,105,110],
[103,0,128,101,106,111,88,108,103,113],
[91,83,0,89,108,90,81,103,95,101],
[110,110,122,0,109,114,100,112,108,115],
[100,105,103,102,0,101,96,100,87,113],
[112,100,121,97,110,0,102,116,111,108],
[104,123,130,111,115,109,0,117,112,115],
[100,103,108,99,111,95,94,0,97,103],
[106,108,116,103,124,100,99,114,0,99],
[101,98,110,96,98,103,96,108,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,98,105,93,82,105,103,95,99],
[104,0,98,121,111,95,102,98,102,111],
[113,113,0,120,121,116,103,113,116,111],
[106,90,91,0,96,93,99,91,101,98],
[118,100,90,115,0,108,101,102,99,98],
[129,116,95,118,103,0,113,105,109,113],
[106,109,108,112,110,98,0,104,106,92],
[108,113,98,120,109,106,107,0,111,100],
[116,109,95,110,112,102,105,100,0,91],
[112,100,100,113,113,98,119,111,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,99,112,106,100,106,98,97,94],
[88,0,85,94,100,82,91,89,83,90],
[112,126,0,101,111,95,122,105,87,103],
[99,117,110,0,110,77,102,80,101,98],
[105,111,100,101,0,86,97,94,84,99],
[111,129,116,134,125,0,130,104,114,106],
[105,120,89,109,114,81,0,100,93,100],
[113,122,106,131,117,107,111,0,106,104],
[114,128,124,110,127,97,118,105,0,116],
[117,121,108,113,112,105,111,107,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,105,107,113,112,101,114,109,113],
[93,0,91,107,104,104,106,103,118,107],
[106,120,0,113,119,108,101,119,119,103],
[104,104,98,0,120,117,102,105,101,104],
[98,107,92,91,0,106,100,101,108,105],
[99,107,103,94,105,0,105,101,105,107],
[110,105,110,109,111,106,0,109,114,114],
[97,108,92,106,110,110,102,0,116,111],
[102,93,92,110,103,106,97,95,0,88],
[98,104,108,107,106,104,97,100,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,112,105,103,118,119,113,124],
[103,0,111,114,115,111,126,127,118,132],
[107,100,0,116,97,104,107,111,111,118],
[99,97,95,0,103,104,106,103,96,110],
[106,96,114,108,0,102,115,115,112,125],
[108,100,107,107,109,0,115,111,113,106],
[93,85,104,105,96,96,0,105,93,103],
[92,84,100,108,96,100,106,0,102,107],
[98,93,100,115,99,98,118,109,0,111],
[87,79,93,101,86,105,108,104,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,93,131,136,102,105,156,129,127],
[99,0,105,116,100,79,81,109,100,110],
[118,106,0,156,131,121,129,156,101,152],
[80,95,55,0,89,88,65,72,95,112],
[75,111,80,122,0,95,103,126,98,134],
[109,132,90,123,116,0,97,118,114,109],
[106,130,82,146,108,114,0,126,130,158],
[55,102,55,139,85,93,85,0,95,140],
[82,111,110,116,113,97,81,116,0,118],
[84,101,59,99,77,102,53,71,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,94,104,104,139,136,147,115,132],
[105,0,107,139,84,147,136,140,107,115],
[117,104,0,129,130,149,125,160,96,156],
[107,72,82,0,104,105,84,141,84,82],
[107,127,81,107,0,115,105,142,74,94],
[72,64,62,106,96,0,73,109,74,72],
[75,75,86,127,106,138,0,140,95,103],
[64,71,51,70,69,102,71,0,81,71],
[96,104,115,127,137,137,116,130,0,106],
[79,96,55,129,117,139,108,140,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,119,119,129,107,90,102,85,129],
[82,0,94,81,115,117,90,91,116,117],
[92,117,0,105,94,80,102,115,105,103],
[92,130,106,0,121,96,114,117,118,118],
[82,96,117,90,0,106,92,106,106,106],
[104,94,131,115,105,0,103,116,119,106],
[121,121,109,97,119,108,0,81,121,131],
[109,120,96,94,105,95,130,0,121,130],
[126,95,106,93,105,92,90,90,0,128],
[82,94,108,93,105,105,80,81,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,101,111,102,90,100,88,109,101],
[103,0,80,89,81,81,74,73,80,84],
[110,131,0,98,98,85,97,100,91,76],
[100,122,113,0,117,99,110,87,106,105],
[109,130,113,94,0,111,122,106,90,115],
[121,130,126,112,100,0,110,107,102,133],
[111,137,114,101,89,101,0,106,87,87],
[123,138,111,124,105,104,105,0,112,115],
[102,131,120,105,121,109,124,99,0,115],
[110,127,135,106,96,78,124,96,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,122,108,119,108,110,104,112,103],
[106,0,103,111,108,91,114,104,109,100],
[89,108,0,98,104,88,94,100,103,92],
[103,100,113,0,113,95,107,99,114,106],
[92,103,107,98,0,92,105,89,101,87],
[103,120,123,116,119,0,127,112,119,109],
[101,97,117,104,106,84,0,110,111,93],
[107,107,111,112,122,99,101,0,101,103],
[99,102,108,97,110,92,100,110,0,97],
[108,111,119,105,124,102,118,108,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,120,92,86,115,118,134,96,78],
[116,0,125,139,99,120,147,141,133,107],
[91,86,0,113,91,115,123,103,118,109],
[119,72,98,0,88,104,113,116,109,94],
[125,112,120,123,0,125,128,131,117,98],
[96,91,96,107,86,0,112,115,109,78],
[93,64,88,98,83,99,0,116,94,82],
[77,70,108,95,80,96,95,0,102,89],
[115,78,93,102,94,102,117,109,0,102],
[133,104,102,117,113,133,129,122,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,116,88,102,106,89,93,105,100],
[96,0,83,117,81,87,87,101,98,109],
[95,128,0,100,99,95,95,124,117,103],
[123,94,111,0,90,103,98,105,105,91],
[109,130,112,121,0,82,102,109,137,112],
[105,124,116,108,129,0,106,116,137,118],
[122,124,116,113,109,105,0,107,112,119],
[118,110,87,106,102,95,104,0,113,107],
[106,113,94,106,74,74,99,98,0,98],
[111,102,108,120,99,93,92,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,125,103,115,128,123,113,111,99],
[94,0,98,104,89,90,102,96,98,88],
[86,113,0,109,112,100,111,80,103,94],
[108,107,102,0,96,97,111,91,97,90],
[96,122,99,115,0,110,107,101,107,106],
[83,121,111,114,101,0,115,87,99,86],
[88,109,100,100,104,96,0,87,100,67],
[98,115,131,120,110,124,124,0,112,104],
[100,113,108,114,104,112,111,99,0,110],
[112,123,117,121,105,125,144,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,77,78,90,87,101,85,92,78],
[100,0,115,128,101,112,124,125,87,104],
[134,96,0,99,125,137,162,134,111,89],
[133,83,112,0,113,112,125,123,121,92],
[121,110,86,98,0,114,114,99,100,128],
[124,99,74,99,97,0,134,98,110,104],
[110,87,49,86,97,77,0,98,111,77],
[126,86,77,88,112,113,113,0,112,90],
[119,124,100,90,111,101,100,99,0,128],
[133,107,122,119,83,107,134,121,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,102,112,112,113,103,105,106],
[104,0,98,93,102,93,97,102,98,98],
[100,113,0,100,101,102,109,97,100,104],
[109,118,111,0,108,99,111,103,102,99],
[99,109,110,103,0,108,100,100,105,100],
[99,118,109,112,103,0,110,101,104,100],
[98,114,102,100,111,101,0,93,107,103],
[108,109,114,108,111,110,118,0,99,109],
[106,113,111,109,106,107,104,112,0,106],
[105,113,107,112,111,111,108,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,115,106,105,104,108,106,107,110],
[101,0,93,103,93,93,96,100,108,109],
[96,118,0,101,107,100,114,114,107,114],
[105,108,110,0,119,113,117,121,114,119],
[106,118,104,92,0,99,102,107,101,115],
[107,118,111,98,112,0,110,109,109,115],
[103,115,97,94,109,101,0,110,96,114],
[105,111,97,90,104,102,101,0,101,111],
[104,103,104,97,110,102,115,110,0,112],
[101,102,97,92,96,96,97,100,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,108,102,85,104,112,104,115],
[108,0,106,99,90,106,105,118,109,131],
[101,105,0,94,75,90,89,104,99,133],
[103,112,117,0,87,113,114,115,106,136],
[109,121,136,124,0,96,100,112,107,126],
[126,105,121,98,115,0,107,111,104,136],
[107,106,122,97,111,104,0,123,99,116],
[99,93,107,96,99,100,88,0,98,122],
[107,102,112,105,104,107,112,113,0,127],
[96,80,78,75,85,75,95,89,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,119,109,111,110,130,122,118],
[106,0,112,127,111,105,107,125,100,115],
[106,99,0,110,103,113,96,116,104,100],
[92,84,101,0,96,101,96,104,101,98],
[102,100,108,115,0,108,99,109,111,110],
[100,106,98,110,103,0,98,117,95,109],
[101,104,115,115,112,113,0,131,108,110],
[81,86,95,107,102,94,80,0,98,107],
[89,111,107,110,100,116,103,113,0,104],
[93,96,111,113,101,102,101,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,80,85,102,86,92,98,96,81],
[125,0,98,95,115,90,106,121,103,107],
[131,113,0,106,128,104,119,130,120,117],
[126,116,105,0,137,108,104,126,102,109],
[109,96,83,74,0,84,81,89,91,79],
[125,121,107,103,127,0,100,126,112,87],
[119,105,92,107,130,111,0,106,100,96],
[113,90,81,85,122,85,105,0,90,88],
[115,108,91,109,120,99,111,121,0,94],
[130,104,94,102,132,124,115,123,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,118,103,103,116,118,119,103,110],
[104,0,112,122,110,113,121,116,112,110],
[93,99,0,109,105,111,117,109,108,115],
[108,89,102,0,98,112,106,101,102,113],
[108,101,106,113,0,117,112,112,109,114],
[95,98,100,99,94,0,113,106,96,107],
[93,90,94,105,99,98,0,100,94,94],
[92,95,102,110,99,105,111,0,96,105],
[108,99,103,109,102,115,117,115,0,116],
[101,101,96,98,97,104,117,106,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,110,96,105,109,126,99,104],
[110,0,92,112,87,89,118,112,105,97],
[113,119,0,108,102,104,118,111,98,115],
[101,99,103,0,84,97,113,104,95,110],
[115,124,109,127,0,106,126,117,106,105],
[106,122,107,114,105,0,115,115,106,97],
[102,93,93,98,85,96,0,93,93,109],
[85,99,100,107,94,96,118,0,96,100],
[112,106,113,116,105,105,118,115,0,108],
[107,114,96,101,106,114,102,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,92,96,92,108,117,93,92,116],
[115,0,106,110,102,113,113,96,94,107],
[119,105,0,119,111,109,126,107,119,120],
[115,101,92,0,103,100,103,97,87,105],
[119,109,100,108,0,108,113,101,95,114],
[103,98,102,111,103,0,108,116,99,120],
[94,98,85,108,98,103,0,83,101,101],
[118,115,104,114,110,95,128,0,92,115],
[119,117,92,124,116,112,110,119,0,117],
[95,104,91,106,97,91,110,96,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,101,94,90,108,109,85,113,102],
[102,0,102,98,92,99,106,98,117,104],
[110,109,0,84,104,106,101,96,127,103],
[117,113,127,0,117,113,125,105,125,103],
[121,119,107,94,0,113,120,109,132,120],
[103,112,105,98,98,0,114,107,117,99],
[102,105,110,86,91,97,0,98,106,100],
[126,113,115,106,102,104,113,0,114,112],
[98,94,84,86,79,94,105,97,0,91],
[109,107,108,108,91,112,111,99,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,92,104,108,101,112,101,115,96],
[99,0,82,92,99,80,94,99,108,90],
[119,129,0,112,127,105,110,110,117,112],
[107,119,99,0,94,99,95,102,114,104],
[103,112,84,117,0,97,101,99,116,111],
[110,131,106,112,114,0,101,115,118,120],
[99,117,101,116,110,110,0,109,115,100],
[110,112,101,109,112,96,102,0,116,101],
[96,103,94,97,95,93,96,95,0,101],
[115,121,99,107,100,91,111,110,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,104,88,94,87,96,106,102,79],
[120,0,103,97,115,118,115,104,99,95],
[107,108,0,84,106,109,108,107,81,94],
[123,114,127,0,126,135,123,114,120,89],
[117,96,105,85,0,113,111,86,89,79],
[124,93,102,76,98,0,91,91,85,110],
[115,96,103,88,100,120,0,106,93,79],
[105,107,104,97,125,120,105,0,106,102],
[109,112,130,91,122,126,118,105,0,113],
[132,116,117,122,132,101,132,109,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,102,102,102,98,96,133,100,96],
[121,0,119,118,115,122,116,122,118,103],
[109,92,0,113,115,120,106,136,108,95],
[109,93,98,0,96,116,113,111,104,106],
[109,96,96,115,0,113,103,117,95,110],
[113,89,91,95,98,0,113,108,107,89],
[115,95,105,98,108,98,0,104,101,96],
[78,89,75,100,94,103,107,0,97,83],
[111,93,103,107,116,104,110,114,0,92],
[115,108,116,105,101,122,115,128,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,108,89,88,70,78,78,91,50],
[162,0,132,123,130,122,141,100,119,123],
[103,79,0,104,109,71,132,80,100,113],
[122,88,107,0,109,88,108,69,101,78],
[123,81,102,102,0,62,101,101,102,82],
[141,89,140,123,149,0,121,111,92,110],
[133,70,79,103,110,90,0,88,109,100],
[133,111,131,142,110,100,123,0,138,112],
[120,92,111,110,109,119,102,73,0,110],
[161,88,98,133,129,101,111,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,113,107,104,102,105,113,127,101],
[103,0,126,124,126,127,110,111,132,116],
[98,85,0,108,115,109,99,93,103,105],
[104,87,103,0,103,102,94,104,110,102],
[107,85,96,108,0,105,101,106,111,98],
[109,84,102,109,106,0,105,91,114,106],
[106,101,112,117,110,106,0,115,109,99],
[98,100,118,107,105,120,96,0,115,104],
[84,79,108,101,100,97,102,96,0,100],
[110,95,106,109,113,105,112,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,124,101,116,107,108,120,124,124],
[87,0,105,88,105,94,116,102,103,109],
[87,106,0,85,89,89,94,94,94,93],
[110,123,126,0,120,103,109,108,102,114],
[95,106,122,91,0,98,106,106,102,108],
[104,117,122,108,113,0,118,112,118,114],
[103,95,117,102,105,93,0,100,98,111],
[91,109,117,103,105,99,111,0,109,110],
[87,108,117,109,109,93,113,102,0,98],
[87,102,118,97,103,97,100,101,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,111,120,98,102,108,114,106],
[107,0,113,116,118,108,113,104,109,113],
[100,98,0,113,107,101,110,85,110,103],
[100,95,98,0,111,85,102,86,92,100],
[91,93,104,100,0,95,109,96,97,103],
[113,103,110,126,116,0,121,113,110,114],
[109,98,101,109,102,90,0,106,112,105],
[103,107,126,125,115,98,105,0,119,114],
[97,102,101,119,114,101,99,92,0,110],
[105,98,108,111,108,97,106,97,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,78,98,116,78,75,38,95,95],
[132,0,116,77,134,94,95,114,114,132],
[133,95,0,96,112,133,114,95,113,113],
[113,134,115,0,114,75,93,113,112,113],
[95,77,99,97,0,115,58,77,78,76],
[133,117,78,136,96,0,57,77,94,96],
[136,116,97,118,153,154,0,95,133,115],
[173,97,116,98,134,134,116,0,135,192],
[116,97,98,99,133,117,78,76,0,116],
[116,79,98,98,135,115,96,19,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,104,96,99,119,110,96,101,98],
[117,0,103,100,110,121,104,104,106,109],
[107,108,0,116,108,114,113,101,108,107],
[115,111,95,0,103,110,119,107,112,108],
[112,101,103,108,0,114,116,98,111,92],
[92,90,97,101,97,0,110,99,93,89],
[101,107,98,92,95,101,0,101,113,99],
[115,107,110,104,113,112,110,0,109,96],
[110,105,103,99,100,118,98,102,0,101],
[113,102,104,103,119,122,112,115,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,87,124,94,109,97,85,112,101],
[101,0,92,115,76,109,101,91,110,102],
[124,119,0,124,117,133,116,105,127,122],
[87,96,87,0,76,125,94,92,85,97],
[117,135,94,135,0,146,121,107,91,109],
[102,102,78,86,65,0,83,67,90,74],
[114,110,95,117,90,128,0,106,99,100],
[126,120,106,119,104,144,105,0,124,115],
[99,101,84,126,120,121,112,87,0,104],
[110,109,89,114,102,137,111,96,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,102,104,114,115,116,115,84,88],
[98,0,93,89,106,112,101,116,97,98],
[109,118,0,113,108,129,112,87,81,84],
[107,122,98,0,106,97,95,111,91,98],
[97,105,103,105,0,98,102,94,94,77],
[96,99,82,114,113,0,102,89,75,107],
[95,110,99,116,109,109,0,99,77,89],
[96,95,124,100,117,122,112,0,95,99],
[127,114,130,120,117,136,134,116,0,102],
[123,113,127,113,134,104,122,112,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,120,106,100,107,128,131,115],
[105,0,104,113,94,109,116,117,119,105],
[105,107,0,111,112,106,114,127,122,115],
[91,98,100,0,96,99,103,111,112,107],
[105,117,99,115,0,120,115,124,126,113],
[111,102,105,112,91,0,110,102,114,103],
[104,95,97,108,96,101,0,115,121,88],
[83,94,84,100,87,109,96,0,113,88],
[80,92,89,99,85,97,90,98,0,101],
[96,106,96,104,98,108,123,123,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,90,100,103,94,82,104,93,103],
[122,0,110,108,116,118,105,111,118,129],
[121,101,0,106,129,111,101,103,109,122],
[111,103,105,0,121,110,113,115,96,122],
[108,95,82,90,0,117,94,86,94,91],
[117,93,100,101,94,0,96,93,106,103],
[129,106,110,98,117,115,0,119,117,107],
[107,100,108,96,125,118,92,0,86,120],
[118,93,102,115,117,105,94,125,0,107],
[108,82,89,89,120,108,104,91,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,92,96,103,102,109,102,107,124],
[105,0,107,99,103,111,109,105,110,116],
[119,104,0,108,104,106,106,101,112,120],
[115,112,103,0,109,113,106,104,106,113],
[108,108,107,102,0,107,110,110,110,113],
[109,100,105,98,104,0,109,95,123,113],
[102,102,105,105,101,102,0,105,104,113],
[109,106,110,107,101,116,106,0,116,117],
[104,101,99,105,101,88,107,95,0,101],
[87,95,91,98,98,98,98,94,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,116,109,113,96,104,122,95,103],
[104,0,104,94,96,106,112,105,82,103],
[95,107,0,97,100,105,110,125,95,111],
[102,117,114,0,109,112,122,122,102,103],
[98,115,111,102,0,96,118,111,106,104],
[115,105,106,99,115,0,115,123,110,116],
[107,99,101,89,93,96,0,94,112,111],
[89,106,86,89,100,88,117,0,99,100],
[116,129,116,109,105,101,99,112,0,109],
[108,108,100,108,107,95,100,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,113,103,122,104,104,94,104,97],
[110,0,105,118,109,116,122,106,135,115],
[98,106,0,108,104,96,96,95,114,90],
[108,93,103,0,115,112,83,107,106,90],
[89,102,107,96,0,97,87,91,101,77],
[107,95,115,99,114,0,104,84,111,96],
[107,89,115,128,124,107,0,110,112,105],
[117,105,116,104,120,127,101,0,110,102],
[107,76,97,105,110,100,99,101,0,105],
[114,96,121,121,134,115,106,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,91,117,98,108,81,98,94],
[112,0,107,91,130,110,129,120,128,116],
[109,104,0,85,117,98,120,109,108,118],
[120,120,126,0,125,100,123,108,129,102],
[94,81,94,86,0,78,118,103,97,93],
[113,101,113,111,133,0,136,113,107,110],
[103,82,91,88,93,75,0,84,94,95],
[130,91,102,103,108,98,127,0,108,102],
[113,83,103,82,114,104,117,103,0,117],
[117,95,93,109,118,101,116,109,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,102,91,110,108,108,98,110],
[106,0,83,97,101,117,104,107,112,98],
[113,128,0,90,100,121,127,115,106,92],
[109,114,121,0,107,135,124,102,110,124],
[120,110,111,104,0,113,125,91,98,124],
[101,94,90,76,98,0,107,87,107,100],
[103,107,84,87,86,104,0,91,102,123],
[103,104,96,109,120,124,120,0,99,113],
[113,99,105,101,113,104,109,112,0,107],
[101,113,119,87,87,111,88,98,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,58,99,98,83,98,75,99,112],
[123,0,74,126,103,83,122,77,74,135],
[153,137,0,139,143,136,139,93,114,162],
[112,85,72,0,149,72,110,88,121,113],
[113,108,68,62,0,95,111,117,126,122],
[128,128,75,139,116,0,152,105,89,127],
[113,89,72,101,100,59,0,65,97,126],
[136,134,118,123,94,106,146,0,122,124],
[112,137,97,90,85,122,114,89,0,150],
[99,76,49,98,89,84,85,87,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,117,114,94,113,95,117,96,96],
[133,0,153,132,75,113,96,98,95,114],
[94,58,0,75,56,56,77,59,38,56],
[97,79,136,0,96,94,96,79,58,116],
[117,136,155,115,0,76,114,117,114,116],
[98,98,155,117,135,0,117,98,79,98],
[116,115,134,115,97,94,0,116,115,153],
[94,113,152,132,94,113,95,0,114,115],
[115,116,173,153,97,132,96,97,0,155],
[115,97,155,95,95,113,58,96,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,112,116,135,96,155,102,110,97],
[85,0,85,95,106,102,94,95,83,89],
[99,126,0,124,131,106,113,108,96,118],
[95,116,87,0,100,119,122,99,110,113],
[76,105,80,111,0,123,92,93,83,109],
[115,109,105,92,88,0,107,99,79,98],
[56,117,98,89,119,104,0,95,80,86],
[109,116,103,112,118,112,116,0,110,126],
[101,128,115,101,128,132,131,101,0,105],
[114,122,93,98,102,113,125,85,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,109,107,92,100,113,113,101,110],
[95,0,102,90,98,102,91,101,97,93],
[102,109,0,98,101,105,101,105,111,109],
[104,121,113,0,107,109,109,109,112,105],
[119,113,110,104,0,114,106,114,115,110],
[111,109,106,102,97,0,104,109,112,103],
[98,120,110,102,105,107,0,111,119,104],
[98,110,106,102,97,102,100,0,100,104],
[110,114,100,99,96,99,92,111,0,101],
[101,118,102,106,101,108,107,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,92,104,102,108,102,97,103,114],
[101,0,96,87,95,94,100,97,96,100],
[119,115,0,87,104,112,110,94,97,108],
[107,124,124,0,118,105,116,117,109,131],
[109,116,107,93,0,111,115,101,93,114],
[103,117,99,106,100,0,117,101,100,105],
[109,111,101,95,96,94,0,106,108,116],
[114,114,117,94,110,110,105,0,103,113],
[108,115,114,102,118,111,103,108,0,109],
[97,111,103,80,97,106,95,98,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,120,93,125,117,105,121,122,90],
[111,0,96,83,105,99,107,130,100,89],
[91,115,0,95,117,95,106,111,95,92],
[118,128,116,0,131,129,104,122,141,122],
[86,106,94,80,0,89,72,104,87,85],
[94,112,116,82,122,0,113,127,121,113],
[106,104,105,107,139,98,0,130,118,94],
[90,81,100,89,107,84,81,0,90,79],
[89,111,116,70,124,90,93,121,0,95],
[121,122,119,89,126,98,117,132,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,84,81,95,101,103,104,88,89],
[119,0,119,108,118,120,119,125,115,105],
[127,92,0,97,111,112,113,118,99,100],
[130,103,114,0,111,106,118,123,108,103],
[116,93,100,100,0,103,116,117,87,100],
[110,91,99,105,108,0,109,122,96,85],
[108,92,98,93,95,102,0,105,84,86],
[107,86,93,88,94,89,106,0,87,79],
[123,96,112,103,124,115,127,124,0,117],
[122,106,111,108,111,126,125,132,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,96,83,88,104,94,106,106,84],
[110,0,108,94,97,107,100,111,100,109],
[115,103,0,107,96,116,94,111,121,114],
[128,117,104,0,103,121,109,114,111,110],
[123,114,115,108,0,114,103,124,116,115],
[107,104,95,90,97,0,89,116,97,98],
[117,111,117,102,108,122,0,112,118,115],
[105,100,100,97,87,95,99,0,94,99],
[105,111,90,100,95,114,93,117,0,104],
[127,102,97,101,96,113,96,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,120,105,105,107,98,105,108,115],
[114,0,129,99,111,120,113,118,106,126],
[91,82,0,90,82,111,84,99,91,98],
[106,112,121,0,106,126,102,112,111,122],
[106,100,129,105,0,116,106,111,98,112],
[104,91,100,85,95,0,95,106,98,94],
[113,98,127,109,105,116,0,114,95,117],
[106,93,112,99,100,105,97,0,95,101],
[103,105,120,100,113,113,116,116,0,116],
[96,85,113,89,99,117,94,110,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,139,118,118,106,119,128,111,101],
[119,0,154,145,139,97,145,132,140,127],
[72,57,0,112,117,73,130,131,105,93],
[93,66,99,0,100,81,138,114,125,100],
[93,72,94,111,0,94,109,119,104,90],
[105,114,138,130,117,0,129,103,126,124],
[92,66,81,73,102,82,0,91,90,88],
[83,79,80,97,92,108,120,0,105,103],
[100,71,106,86,107,85,121,106,0,106],
[110,84,118,111,121,87,123,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,108,110,105,105,103,114,105,119],
[81,0,97,98,93,96,87,113,80,84],
[103,114,0,112,112,110,90,115,106,101],
[101,113,99,0,98,100,95,117,89,97],
[106,118,99,113,0,107,114,107,103,99],
[106,115,101,111,104,0,102,117,94,104],
[108,124,121,116,97,109,0,106,103,103],
[97,98,96,94,104,94,105,0,90,94],
[106,131,105,122,108,117,108,121,0,111],
[92,127,110,114,112,107,108,117,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,121,101,114,113,109,106,93,101],
[100,0,104,109,101,99,78,107,99,87],
[90,107,0,102,104,109,100,107,97,109],
[110,102,109,0,112,109,114,108,96,98],
[97,110,107,99,0,100,107,106,107,103],
[98,112,102,102,111,0,116,113,110,97],
[102,133,111,97,104,95,0,121,102,103],
[105,104,104,103,105,98,90,0,101,110],
[118,112,114,115,104,101,109,110,0,104],
[110,124,102,113,108,114,108,101,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,130,109,143,118,113,120,124,126],
[112,0,110,102,136,91,111,108,113,127],
[81,101,0,105,108,88,102,102,107,98],
[102,109,106,0,125,100,106,119,117,93],
[68,75,103,86,0,88,91,87,99,100],
[93,120,123,111,123,0,113,113,96,93],
[98,100,109,105,120,98,0,99,107,98],
[91,103,109,92,124,98,112,0,101,112],
[87,98,104,94,112,115,104,110,0,100],
[85,84,113,118,111,118,113,99,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,124,129,140,128,132,119,117,144],
[110,0,116,124,139,144,109,132,88,133],
[87,95,0,85,121,132,103,130,101,128],
[82,87,126,0,133,117,105,109,79,122],
[71,72,90,78,0,96,89,77,104,124],
[83,67,79,94,115,0,96,64,74,115],
[79,102,108,106,122,115,0,112,91,115],
[92,79,81,102,134,147,99,0,112,142],
[94,123,110,132,107,137,120,99,0,139],
[67,78,83,89,87,96,96,69,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,115,102,100,95,107,96,100,120],
[79,0,91,78,118,108,75,101,97,104],
[96,120,0,87,96,131,97,97,113,119],
[109,133,124,0,118,127,123,105,119,120],
[111,93,115,93,0,122,99,97,113,92],
[116,103,80,84,89,0,95,108,88,92],
[104,136,114,88,112,116,0,86,119,129],
[115,110,114,106,114,103,125,0,119,109],
[111,114,98,92,98,123,92,92,0,103],
[91,107,92,91,119,119,82,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,107,111,96,113,103,109,106,100],
[110,0,95,115,103,128,104,108,93,93],
[104,116,0,103,102,131,123,109,93,106],
[100,96,108,0,110,111,111,95,82,87],
[115,108,109,101,0,111,114,99,79,107],
[98,83,80,100,100,0,92,102,75,81],
[108,107,88,100,97,119,0,107,82,92],
[102,103,102,116,112,109,104,0,83,100],
[105,118,118,129,132,136,129,128,0,123],
[111,118,105,124,104,130,119,111,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,98,114,107,119,114,111,111,117],
[107,0,115,104,114,131,115,123,123,113],
[113,96,0,108,116,119,120,112,110,102],
[97,107,103,0,104,106,100,104,108,89],
[104,97,95,107,0,109,95,119,99,102],
[92,80,92,105,102,0,93,112,97,115],
[97,96,91,111,116,118,0,118,104,104],
[100,88,99,107,92,99,93,0,103,104],
[100,88,101,103,112,114,107,108,0,111],
[94,98,109,122,109,96,107,107,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,117,111,106,107,108,102,118,107],
[106,0,119,118,98,119,93,109,118,97],
[94,92,0,98,87,87,87,91,109,97],
[100,93,113,0,93,109,93,104,106,104],
[105,113,124,118,0,108,125,99,124,112],
[104,92,124,102,103,0,95,103,115,104],
[103,118,124,118,86,116,0,108,134,114],
[109,102,120,107,112,108,103,0,123,115],
[93,93,102,105,87,96,77,88,0,99],
[104,114,114,107,99,107,97,96,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,106,117,104,113,109,102,119],
[101,0,89,103,109,95,105,108,99,107],
[105,122,0,107,125,111,105,107,107,113],
[105,108,104,0,108,107,100,105,104,109],
[94,102,86,103,0,94,94,92,94,98],
[107,116,100,104,117,0,104,114,100,118],
[98,106,106,111,117,107,0,113,114,118],
[102,103,104,106,119,97,98,0,110,110],
[109,112,104,107,117,111,97,101,0,107],
[92,104,98,102,113,93,93,101,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,120,110,122,108,137,122,104,112],
[95,0,76,96,98,81,111,99,84,94],
[91,135,0,118,117,118,134,125,107,117],
[101,115,93,0,109,100,129,111,94,98],
[89,113,94,102,0,113,116,103,107,107],
[103,130,93,111,98,0,123,113,105,105],
[74,100,77,82,95,88,0,103,89,85],
[89,112,86,100,108,98,108,0,88,101],
[107,127,104,117,104,106,122,123,0,106],
[99,117,94,113,104,106,126,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,99,123,114,114,109,106,110],
[106,0,97,85,102,96,93,89,100,89],
[99,114,0,90,113,97,101,91,102,104],
[112,126,121,0,133,107,115,116,105,133],
[88,109,98,78,0,92,87,88,90,101],
[97,115,114,104,119,0,101,116,110,107],
[97,118,110,96,124,110,0,104,103,91],
[102,122,120,95,123,95,107,0,95,109],
[105,111,109,106,121,101,108,116,0,107],
[101,122,107,78,110,104,120,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,110,123,119,110,113,113,105,109],
[82,0,89,99,107,104,110,109,83,95],
[101,122,0,116,128,106,105,119,113,113],
[88,112,95,0,117,104,117,99,92,114],
[92,104,83,94,0,95,106,90,80,87],
[101,107,105,107,116,0,114,109,94,115],
[98,101,106,94,105,97,0,88,97,99],
[98,102,92,112,121,102,123,0,111,120],
[106,128,98,119,131,117,114,100,0,107],
[102,116,98,97,124,96,112,91,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,122,106,116,116,113,112,118,103],
[95,0,98,85,109,103,90,94,113,90],
[89,113,0,94,108,120,97,95,113,91],
[105,126,117,0,116,118,106,104,118,102],
[95,102,103,95,0,109,101,90,112,88],
[95,108,91,93,102,0,83,95,100,94],
[98,121,114,105,110,128,0,106,110,112],
[99,117,116,107,121,116,105,0,115,107],
[93,98,98,93,99,111,101,96,0,89],
[108,121,120,109,123,117,99,104,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,113,107,102,101,109,106,106,94],
[96,0,117,109,96,106,107,126,98,102],
[98,94,0,112,94,119,115,100,102,89],
[104,102,99,0,98,109,121,121,97,96],
[109,115,117,113,0,110,114,111,97,108],
[110,105,92,102,101,0,108,95,93,100],
[102,104,96,90,97,103,0,107,85,88],
[105,85,111,90,100,116,104,0,98,96],
[105,113,109,114,114,118,126,113,0,100],
[117,109,122,115,103,111,123,115,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,106,114,119,117,108,108,115],
[107,0,114,101,108,107,105,110,110,115],
[100,97,0,113,123,121,102,112,122,102],
[105,110,98,0,119,116,107,114,115,115],
[97,103,88,92,0,119,96,106,99,106],
[92,104,90,95,92,0,102,88,102,96],
[94,106,109,104,115,109,0,111,120,114],
[103,101,99,97,105,123,100,0,113,112],
[103,101,89,96,112,109,91,98,0,104],
[96,96,109,96,105,115,97,99,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,93,122,118,91,102,117,105,115],
[92,0,78,124,103,73,87,106,78,104],
[118,133,0,139,116,130,117,115,99,119],
[89,87,72,0,106,82,72,88,82,95],
[93,108,95,105,0,101,106,101,88,107],
[120,138,81,129,110,0,108,133,96,123],
[109,124,94,139,105,103,0,118,98,108],
[94,105,96,123,110,78,93,0,95,99],
[106,133,112,129,123,115,113,116,0,105],
[96,107,92,116,104,88,103,112,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,116,114,118,114,124,102,105],
[101,0,99,106,121,111,126,119,102,111],
[105,112,0,109,110,107,123,120,116,116],
[95,105,102,0,105,112,105,128,108,110],
[97,90,101,106,0,105,108,111,109,101],
[93,100,104,99,106,0,106,114,93,99],
[97,85,88,106,103,105,0,125,90,96],
[87,92,91,83,100,97,86,0,91,88],
[109,109,95,103,102,118,121,120,0,94],
[106,100,95,101,110,112,115,123,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,132,98,118,91,99,118,103,105],
[100,0,106,82,90,90,86,85,90,77],
[79,105,0,51,86,70,79,98,57,55],
[113,129,160,0,115,103,138,125,107,103],
[93,121,125,96,0,65,93,103,88,84],
[120,121,141,108,146,0,104,116,91,116],
[112,125,132,73,118,107,0,99,94,90],
[93,126,113,86,108,95,112,0,108,97],
[108,121,154,104,123,120,117,103,0,112],
[106,134,156,108,127,95,121,114,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,106,104,118,124,118,126,110],
[108,0,107,108,106,105,114,111,117,118],
[108,104,0,106,113,113,119,99,121,109],
[105,103,105,0,99,109,110,97,98,111],
[107,105,98,112,0,119,113,104,113,114],
[93,106,98,102,92,0,111,90,86,91],
[87,97,92,101,98,100,0,100,105,71],
[93,100,112,114,107,121,111,0,107,105],
[85,94,90,113,98,125,106,104,0,98],
[101,93,102,100,97,120,140,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,100,100,115,100,90,88,109,114],
[108,0,97,107,103,93,94,95,104,105],
[111,114,0,108,112,101,105,98,107,111],
[111,104,103,0,122,93,98,95,109,109],
[96,108,99,89,0,89,92,106,100,98],
[111,118,110,118,122,0,102,115,104,119],
[121,117,106,113,119,109,0,105,109,118],
[123,116,113,116,105,96,106,0,113,122],
[102,107,104,102,111,107,102,98,0,109],
[97,106,100,102,113,92,93,89,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,105,108,100,95,94,104,109,99],
[119,0,114,109,104,113,109,104,119,114],
[106,97,0,104,104,112,108,106,106,101],
[103,102,107,0,92,105,101,108,108,103],
[111,107,107,119,0,96,113,119,108,103],
[116,98,99,106,115,0,103,95,108,108],
[117,102,103,110,98,108,0,94,109,105],
[107,107,105,103,92,116,117,0,116,98],
[102,92,105,103,103,103,102,95,0,100],
[112,97,110,108,108,103,106,113,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,105,104,103,123,114,91,93,103],
[123,0,110,97,119,120,112,109,109,111],
[106,101,0,101,123,121,111,99,94,103],
[107,114,110,0,120,129,118,100,108,112],
[108,92,88,91,0,105,90,104,93,109],
[88,91,90,82,106,0,90,83,96,107],
[97,99,100,93,121,121,0,101,97,114],
[120,102,112,111,107,128,110,0,106,108],
[118,102,117,103,118,115,114,105,0,109],
[108,100,108,99,102,104,97,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,95,116,86,124,100,128,109,101],
[95,0,112,119,75,102,96,113,100,98],
[116,99,0,117,85,122,127,111,95,115],
[95,92,94,0,104,115,90,116,109,90],
[125,136,126,107,0,117,123,136,130,103],
[87,109,89,96,94,0,108,108,80,81],
[111,115,84,121,88,103,0,112,112,104],
[83,98,100,95,75,103,99,0,97,107],
[102,111,116,102,81,131,99,114,0,86],
[110,113,96,121,108,130,107,104,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,105,104,98,109,101,107,107,100],
[109,0,109,112,107,106,109,107,114,96],
[106,102,0,105,96,104,98,103,105,91],
[107,99,106,0,100,99,100,103,111,96],
[113,104,115,111,0,110,111,108,112,108],
[102,105,107,112,101,0,106,107,111,100],
[110,102,113,111,100,105,0,109,104,100],
[104,104,108,108,103,104,102,0,102,97],
[104,97,106,100,99,100,107,109,0,99],
[111,115,120,115,103,111,111,114,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,101,114,113,121,114,106,114],
[104,0,105,101,118,110,117,107,96,96],
[109,106,0,105,119,109,107,116,100,104],
[110,110,106,0,115,110,108,106,104,105],
[97,93,92,96,0,107,97,97,98,99],
[98,101,102,101,104,0,110,112,109,104],
[90,94,104,103,114,101,0,108,104,98],
[97,104,95,105,114,99,103,0,104,97],
[105,115,111,107,113,102,107,107,0,96],
[97,115,107,106,112,107,113,114,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,100,90,83,107,134,97,112,112],
[117,0,84,94,112,116,116,102,122,98],
[111,127,0,80,76,104,104,101,91,125],
[121,117,131,0,103,93,135,106,114,131],
[128,99,135,108,0,134,112,114,104,133],
[104,95,107,118,77,0,127,89,80,118],
[77,95,107,76,99,84,0,93,67,114],
[114,109,110,105,97,122,118,0,112,112],
[99,89,120,97,107,131,144,99,0,122],
[99,113,86,80,78,93,97,99,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,122,107,105,109,104,108,105,105],
[118,0,122,110,110,115,100,102,113,104],
[89,89,0,102,90,89,92,99,93,107],
[104,101,109,0,102,108,103,105,111,113],
[106,101,121,109,0,112,98,89,108,110],
[102,96,122,103,99,0,95,102,101,110],
[107,111,119,108,113,116,0,102,112,102],
[103,109,112,106,122,109,109,0,114,114],
[106,98,118,100,103,110,99,97,0,110],
[106,107,104,98,101,101,109,97,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,102,127,111,127,148,110,106,123],
[115,0,133,147,95,125,148,130,133,158],
[109,78,0,98,79,73,116,107,99,101],
[84,64,113,0,80,72,103,79,89,103],
[100,116,132,131,0,78,154,130,111,145],
[84,86,138,139,133,0,163,121,118,137],
[63,63,95,108,57,48,0,71,73,98],
[101,81,104,132,81,90,140,0,93,101],
[105,78,112,122,100,93,138,118,0,125],
[88,53,110,108,66,74,113,110,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,98,111,107,112,120,96,108,106],
[102,0,104,123,105,106,107,104,112,110],
[113,107,0,97,99,101,110,102,102,112],
[100,88,114,0,99,104,100,97,91,97],
[104,106,112,112,0,115,113,103,107,122],
[99,105,110,107,96,0,115,86,106,129],
[91,104,101,111,98,96,0,97,99,105],
[115,107,109,114,108,125,114,0,102,104],
[103,99,109,120,104,105,112,109,0,103],
[105,101,99,114,89,82,106,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,121,110,96,128,117,111,105,112],
[99,0,106,104,84,97,106,88,95,103],
[90,105,0,106,92,103,91,98,94,99],
[101,107,105,0,93,116,106,99,113,96],
[115,127,119,118,0,113,117,101,112,108],
[83,114,108,95,98,0,105,106,97,95],
[94,105,120,105,94,106,0,105,97,97],
[100,123,113,112,110,105,106,0,117,119],
[106,116,117,98,99,114,114,94,0,99],
[99,108,112,115,103,116,114,92,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,96,95,91,94,137,73,73,72],
[164,0,97,95,162,165,164,121,118,95],
[115,114,0,116,113,140,137,96,116,116],
[116,116,95,0,116,93,139,98,94,116],
[120,49,98,95,0,142,165,121,50,95],
[117,46,71,118,69,0,117,121,72,118],
[74,47,74,72,46,94,0,50,49,49],
[138,90,115,113,90,90,161,0,67,113],
[138,93,95,117,161,139,162,144,0,139],
[139,116,95,95,116,93,162,98,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,108,94,93,91,104,94,93,75],
[112,0,120,70,95,80,103,107,93,91],
[103,91,0,76,80,75,80,109,71,75],
[117,141,135,0,108,102,119,136,113,103],
[118,116,131,103,0,98,95,128,107,94],
[120,131,136,109,113,0,123,131,103,88],
[107,108,131,92,116,88,0,114,103,107],
[117,104,102,75,83,80,97,0,94,106],
[118,118,140,98,104,108,108,117,0,109],
[136,120,136,108,117,123,104,105,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,113,105,105,116,118,115,99,106],
[103,0,108,95,98,114,100,109,115,105],
[98,103,0,114,118,119,111,100,120,103],
[106,116,97,0,109,108,108,118,117,117],
[106,113,93,102,0,105,90,109,111,117],
[95,97,92,103,106,0,95,97,112,106],
[93,111,100,103,121,116,0,116,121,115],
[96,102,111,93,102,114,95,0,104,99],
[112,96,91,94,100,99,90,107,0,93],
[105,106,108,94,94,105,96,112,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,120,103,124,110,122,122,111,124],
[105,0,116,114,118,118,114,117,122,110],
[91,95,0,92,102,108,114,104,109,109],
[108,97,119,0,106,108,115,103,111,116],
[87,93,109,105,0,105,105,98,100,108],
[101,93,103,103,106,0,115,102,109,110],
[89,97,97,96,106,96,0,99,100,103],
[89,94,107,108,113,109,112,0,102,106],
[100,89,102,100,111,102,111,109,0,107],
[87,101,102,95,103,101,108,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,145,63,163,128,129,82,113,112],
[96,0,114,94,99,111,83,98,112,97],
[66,97,0,14,98,112,111,64,81,65],
[148,117,197,0,134,129,114,82,96,131],
[48,112,113,77,0,128,80,96,96,95],
[83,100,99,82,83,0,83,66,97,82],
[82,128,100,97,131,128,0,112,97,83],
[129,113,147,129,115,145,99,0,112,98],
[98,99,130,115,115,114,114,99,0,98],
[99,114,146,80,116,129,128,113,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,96,115,102,106,99,94,102,97],
[98,0,105,109,104,102,107,94,108,87],
[115,106,0,109,116,106,118,108,107,96],
[96,102,102,0,117,106,113,101,101,103],
[109,107,95,94,0,98,106,95,107,95],
[105,109,105,105,113,0,106,100,102,102],
[112,104,93,98,105,105,0,103,107,101],
[117,117,103,110,116,111,108,0,107,106],
[109,103,104,110,104,109,104,104,0,103],
[114,124,115,108,116,109,110,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,89,92,72,89,107,93,91,99],
[113,0,130,106,91,104,112,117,110,114],
[122,81,0,84,83,90,97,105,81,121],
[119,105,127,0,111,120,113,121,98,114],
[139,120,128,100,0,112,117,118,110,126],
[122,107,121,91,99,0,102,108,91,117],
[104,99,114,98,94,109,0,113,106,106],
[118,94,106,90,93,103,98,0,87,113],
[120,101,130,113,101,120,105,124,0,126],
[112,97,90,97,85,94,105,98,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,68,68,92,77,77,95,75,68],
[139,0,87,114,120,110,107,104,87,101],
[143,124,0,101,119,117,92,123,77,111],
[143,97,110,0,102,141,134,119,107,105],
[119,91,92,109,0,107,86,88,94,82],
[134,101,94,70,104,0,109,86,74,118],
[134,104,119,77,125,102,0,113,116,75],
[116,107,88,92,123,125,98,0,98,106],
[136,124,134,104,117,137,95,113,0,111],
[143,110,100,106,129,93,136,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,110,103,108,98,103,98,94,108],
[95,0,89,82,87,92,90,86,86,94],
[101,122,0,106,111,99,106,97,104,109],
[108,129,105,0,110,107,107,96,102,101],
[103,124,100,101,0,110,112,95,97,114],
[113,119,112,104,101,0,103,95,107,103],
[108,121,105,104,99,108,0,100,100,92],
[113,125,114,115,116,116,111,0,100,107],
[117,125,107,109,114,104,111,111,0,104],
[103,117,102,110,97,108,119,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,103,103,112,109,109,121,118],
[108,0,109,100,91,97,117,95,117,115],
[100,102,0,99,105,100,105,96,108,105],
[108,111,112,0,114,103,112,104,118,119],
[108,120,106,97,0,99,114,103,106,107],
[99,114,111,108,112,0,128,113,113,121],
[102,94,106,99,97,83,0,106,116,105],
[102,116,115,107,108,98,105,0,112,113],
[90,94,103,93,105,98,95,99,0,103],
[93,96,106,92,104,90,106,98,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,100,138,103,103,101,82,90,102],
[121,0,76,171,91,102,114,93,138,99],
[111,135,0,140,91,78,125,135,137,112],
[73,40,71,0,77,97,94,84,77,63],
[108,120,120,134,0,107,123,144,98,98],
[108,109,133,114,104,0,144,133,113,121],
[110,97,86,117,88,67,0,135,80,69],
[129,118,76,127,67,78,76,0,80,88],
[121,73,74,134,113,98,131,131,0,85],
[109,112,99,148,113,90,142,123,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,101,87,91,83,113,87,105,89],
[119,0,106,100,106,86,94,93,103,93],
[110,105,0,107,101,102,112,102,106,94],
[124,111,104,0,108,109,124,112,114,113],
[120,105,110,103,0,107,114,96,109,105],
[128,125,109,102,104,0,125,108,122,108],
[98,117,99,87,97,86,0,95,98,93],
[124,118,109,99,115,103,116,0,107,98],
[106,108,105,97,102,89,113,104,0,96],
[122,118,117,98,106,103,118,113,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,102,101,97,85,108,94,97,91],
[117,0,104,95,95,98,103,102,97,90],
[109,107,0,103,105,89,113,112,110,91],
[110,116,108,0,103,95,110,96,113,98],
[114,116,106,108,0,103,112,123,112,107],
[126,113,122,116,108,0,115,110,112,102],
[103,108,98,101,99,96,0,110,102,94],
[117,109,99,115,88,101,101,0,109,96],
[114,114,101,98,99,99,109,102,0,91],
[120,121,120,113,104,109,117,115,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,123,111,111,107,112,115,106],
[104,0,108,106,114,103,107,108,108,110],
[107,103,0,114,111,108,97,99,112,96],
[88,105,97,0,107,101,96,100,106,109],
[100,97,100,104,0,97,102,102,105,103],
[100,108,103,110,114,0,106,116,117,111],
[104,104,114,115,109,105,0,111,122,103],
[99,103,112,111,109,95,100,0,113,95],
[96,103,99,105,106,94,89,98,0,105],
[105,101,115,102,108,100,108,116,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,103,101,104,129,104,117,131],
[100,0,104,93,87,88,129,111,117,97],
[102,107,0,116,93,95,129,128,102,124],
[108,118,95,0,110,99,142,97,121,111],
[110,124,118,101,0,111,115,125,148,124],
[107,123,116,112,100,0,133,135,122,107],
[82,82,82,69,96,78,0,97,99,108],
[107,100,83,114,86,76,114,0,96,114],
[94,94,109,90,63,89,112,115,0,115],
[80,114,87,100,87,104,103,97,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,113,113,90,123,144,113,137,128],
[104,0,95,120,115,108,123,96,96,101],
[98,116,0,104,104,97,127,106,86,79],
[98,91,107,0,97,82,130,90,112,69],
[121,96,107,114,0,132,123,97,113,130],
[88,103,114,129,79,0,105,90,110,110],
[67,88,84,81,88,106,0,106,113,72],
[98,115,105,121,114,121,105,0,96,94],
[74,115,125,99,98,101,98,115,0,113],
[83,110,132,142,81,101,139,117,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,130,104,108,108,109,115,116,106],
[99,0,110,99,104,100,117,97,114,105],
[81,101,0,100,95,100,99,98,103,96],
[107,112,111,0,93,101,117,107,122,106],
[103,107,116,118,0,114,115,107,128,117],
[103,111,111,110,97,0,98,107,119,101],
[102,94,112,94,96,113,0,100,107,99],
[96,114,113,104,104,104,111,0,112,109],
[95,97,108,89,83,92,104,99,0,92],
[105,106,115,105,94,110,112,102,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,99,107,110,109,117,107,109,97],
[105,0,110,107,102,103,108,116,110,104],
[112,101,0,120,108,106,105,105,107,107],
[104,104,91,0,109,98,94,107,105,97],
[101,109,103,102,0,114,112,112,108,103],
[102,108,105,113,97,0,107,119,111,103],
[94,103,106,117,99,104,0,116,111,94],
[104,95,106,104,99,92,95,0,110,95],
[102,101,104,106,103,100,100,101,0,95],
[114,107,104,114,108,108,117,116,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,74,100,88,94,101,105,97,109],
[117,0,89,111,111,96,106,110,118,113],
[137,122,0,125,80,115,107,125,86,129],
[111,100,86,0,81,96,111,109,110,97],
[123,100,131,130,0,120,103,121,115,114],
[117,115,96,115,91,0,102,125,112,106],
[110,105,104,100,108,109,0,136,117,123],
[106,101,86,102,90,86,75,0,100,115],
[114,93,125,101,96,99,94,111,0,120],
[102,98,82,114,97,105,88,96,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,106,124,106,118,116,120,96,94],
[115,0,105,117,110,119,124,137,109,104],
[105,106,0,110,107,108,124,127,110,93],
[87,94,101,0,103,103,109,106,106,89],
[105,101,104,108,0,105,113,128,110,102],
[93,92,103,108,106,0,116,114,116,108],
[95,87,87,102,98,95,0,118,106,97],
[91,74,84,105,83,97,93,0,95,83],
[115,102,101,105,101,95,105,116,0,90],
[117,107,118,122,109,103,114,128,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,117,97,114,96,120,103,102,95],
[124,0,111,105,103,111,121,97,112,101],
[94,100,0,83,100,88,111,92,95,79],
[114,106,128,0,106,96,141,111,107,107],
[97,108,111,105,0,100,118,97,100,98],
[115,100,123,115,111,0,131,113,97,106],
[91,90,100,70,93,80,0,81,89,87],
[108,114,119,100,114,98,130,0,100,109],
[109,99,116,104,111,114,122,111,0,92],
[116,110,132,104,113,105,124,102,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,99,97,109,111,112,116,124,114],
[122,0,104,117,113,111,110,132,147,122],
[112,107,0,100,104,92,94,100,125,116],
[114,94,111,0,112,110,98,118,134,111],
[102,98,107,99,0,99,101,105,125,115],
[100,100,119,101,112,0,105,116,127,117],
[99,101,117,113,110,106,0,107,126,99],
[95,79,111,93,106,95,104,0,125,104],
[87,64,86,77,86,84,85,86,0,79],
[97,89,95,100,96,94,112,107,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,130,128,114,108,112,103,99,110],
[88,0,128,124,108,97,102,113,96,108],
[81,83,0,125,97,94,108,114,91,116],
[83,87,86,0,96,88,124,92,99,101],
[97,103,114,115,0,111,120,109,95,110],
[103,114,117,123,100,0,135,121,112,113],
[99,109,103,87,91,76,0,99,104,101],
[108,98,97,119,102,90,112,0,104,108],
[112,115,120,112,116,99,107,107,0,113],
[101,103,95,110,101,98,110,103,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,104,103,115,83,109,106,95,116],
[111,0,104,108,118,100,120,111,111,131],
[107,107,0,108,132,101,122,106,107,117],
[108,103,103,0,121,99,121,109,115,123],
[96,93,79,90,0,93,107,115,105,107],
[128,111,110,112,118,0,125,122,105,135],
[102,91,89,90,104,86,0,106,89,115],
[105,100,105,102,96,89,105,0,97,104],
[116,100,104,96,106,106,122,114,0,138],
[95,80,94,88,104,76,96,107,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,124,89,109,113,105,124,102,108],
[97,0,96,89,92,96,93,97,101,96],
[87,115,0,105,101,110,93,98,112,90],
[122,122,106,0,121,121,104,106,113,101],
[102,119,110,90,0,121,94,93,104,79],
[98,115,101,90,90,0,107,101,113,74],
[106,118,118,107,117,104,0,106,101,100],
[87,114,113,105,118,110,105,0,91,86],
[109,110,99,98,107,98,110,120,0,94],
[103,115,121,110,132,137,111,125,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,95,91,98,88,86,94,96,82],
[123,0,113,104,99,111,113,97,112,108],
[116,98,0,96,104,97,94,87,110,95],
[120,107,115,0,117,102,100,89,104,97],
[113,112,107,94,0,100,96,82,99,97],
[123,100,114,109,111,0,98,106,103,105],
[125,98,117,111,115,113,0,107,115,109],
[117,114,124,122,129,105,104,0,111,115],
[115,99,101,107,112,108,96,100,0,98],
[129,103,116,114,114,106,102,96,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,116,103,107,120,114,98,113,132],
[107,0,102,106,121,111,109,106,121,130],
[95,109,0,99,104,116,114,88,99,126],
[108,105,112,0,133,119,113,107,126,137],
[104,90,107,78,0,112,93,86,96,114],
[91,100,95,92,99,0,95,87,97,129],
[97,102,97,98,118,116,0,105,100,124],
[113,105,123,104,125,124,106,0,115,134],
[98,90,112,85,115,114,111,96,0,116],
[79,81,85,74,97,82,87,77,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,110,115,119,100,101,119,111,110],
[106,0,102,100,95,107,100,111,111,111],
[101,109,0,116,116,109,116,111,113,111],
[96,111,95,0,103,93,109,105,99,115],
[92,116,95,108,0,95,112,115,114,103],
[111,104,102,118,116,0,106,123,107,112],
[110,111,95,102,99,105,0,117,111,95],
[92,100,100,106,96,88,94,0,101,101],
[100,100,98,112,97,104,100,110,0,101],
[101,100,100,96,108,99,116,110,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,109,97,89,104,107,96,109],
[108,0,120,107,100,108,109,126,98,99],
[109,91,0,112,108,98,114,108,98,102],
[102,104,99,0,106,104,111,103,100,108],
[114,111,103,105,0,96,113,108,106,110],
[122,103,113,107,115,0,111,119,104,114],
[107,102,97,100,98,100,0,122,105,119],
[104,85,103,108,103,92,89,0,93,95],
[115,113,113,111,105,107,106,118,0,105],
[102,112,109,103,101,97,92,116,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,106,104,98,104,105,98,106,99],
[102,0,109,125,111,119,110,104,110,103],
[105,102,0,121,106,111,110,97,111,106],
[107,86,90,0,105,107,92,80,100,94],
[113,100,105,106,0,116,101,84,110,110],
[107,92,100,104,95,0,110,98,100,99],
[106,101,101,119,110,101,0,93,113,100],
[113,107,114,131,127,113,118,0,102,117],
[105,101,100,111,101,111,98,109,0,113],
[112,108,105,117,101,112,111,94,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,111,108,105,102,102,108,104],
[108,0,114,115,102,108,109,113,107,108],
[108,97,0,107,109,111,114,121,117,111],
[100,96,104,0,108,97,98,110,109,102],
[103,109,102,103,0,104,118,108,108,109],
[106,103,100,114,107,0,106,113,110,117],
[109,102,97,113,93,105,0,107,103,96],
[109,98,90,101,103,98,104,0,104,95],
[103,104,94,102,103,101,108,107,0,105],
[107,103,100,109,102,94,115,116,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,95,87,94,90,92,88,99,98],
[98,0,87,56,56,83,64,47,92,99],
[116,124,0,65,74,117,82,75,75,109],
[124,155,146,0,122,112,115,102,108,132],
[117,155,137,89,0,145,107,108,102,133],
[121,128,94,99,66,0,102,91,111,113],
[119,147,129,96,104,109,0,84,100,126],
[123,164,136,109,103,120,127,0,122,141],
[112,119,136,103,109,100,111,89,0,122],
[113,112,102,79,78,98,85,70,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,92,94,106,97,87,98,92,102],
[117,0,112,111,124,122,113,111,93,106],
[119,99,0,122,124,108,99,116,116,99],
[117,100,89,0,121,110,97,105,107,114],
[105,87,87,90,0,101,90,100,105,89],
[114,89,103,101,110,0,101,91,85,110],
[124,98,112,114,121,110,0,111,106,108],
[113,100,95,106,111,120,100,0,100,108],
[119,118,95,104,106,126,105,111,0,102],
[109,105,112,97,122,101,103,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,111,94,121,110,124,106,111],
[108,0,124,112,117,115,113,125,99,117],
[100,87,0,107,96,116,105,113,95,106],
[100,99,104,0,99,118,113,123,104,93],
[117,94,115,112,0,125,124,126,118,118],
[90,96,95,93,86,0,110,104,94,102],
[101,98,106,98,87,101,0,112,107,100],
[87,86,98,88,85,107,99,0,76,97],
[105,112,116,107,93,117,104,135,0,107],
[100,94,105,118,93,109,111,114,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,102,104,109,122,110,102,122,105],
[98,0,95,97,92,112,94,97,89,106],
[109,116,0,103,118,132,114,108,111,111],
[107,114,108,0,107,118,105,100,102,99],
[102,119,93,104,0,120,95,96,115,101],
[89,99,79,93,91,0,101,101,102,99],
[101,117,97,106,116,110,0,78,102,113],
[109,114,103,111,115,110,133,0,107,127],
[89,122,100,109,96,109,109,104,0,110],
[106,105,100,112,110,112,98,84,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,131,65,114,81,97,115,82,145],
[96,0,95,65,66,66,16,33,63,81],
[80,116,0,83,82,66,66,84,98,130],
[146,146,128,0,130,112,113,96,129,161],
[97,145,129,81,0,49,81,83,112,145],
[130,145,145,99,162,0,115,99,129,178],
[114,195,145,98,130,96,0,83,163,146],
[96,178,127,115,128,112,128,0,144,177],
[129,148,113,82,99,82,48,67,0,97],
[66,130,81,50,66,33,65,34,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,116,107,105,103,106,121,114,129],
[99,0,109,99,89,96,97,118,95,110],
[95,102,0,104,93,106,104,113,105,125],
[104,112,107,0,99,95,97,125,100,122],
[106,122,118,112,0,98,104,129,104,110],
[108,115,105,116,113,0,115,129,122,120],
[105,114,107,114,107,96,0,128,100,118],
[90,93,98,86,82,82,83,0,84,95],
[97,116,106,111,107,89,111,127,0,117],
[82,101,86,89,101,91,93,116,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,121,109,106,111,108,117,111,103],
[106,0,115,115,101,103,114,123,112,100],
[90,96,0,108,93,103,111,105,109,95],
[102,96,103,0,101,100,102,108,108,100],
[105,110,118,110,0,115,114,114,117,102],
[100,108,108,111,96,0,116,113,109,109],
[103,97,100,109,97,95,0,114,113,100],
[94,88,106,103,97,98,97,0,107,88],
[100,99,102,103,94,102,98,104,0,104],
[108,111,116,111,109,102,111,123,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,120,98,104,135,118,104,115,112],
[98,0,117,114,99,106,96,94,109,94],
[91,94,0,104,99,118,122,124,118,110],
[113,97,107,0,98,93,112,94,119,116],
[107,112,112,113,0,120,116,97,113,109],
[76,105,93,118,91,0,92,67,95,93],
[93,115,89,99,95,119,0,95,114,104],
[107,117,87,117,114,144,116,0,112,107],
[96,102,93,92,98,116,97,99,0,91],
[99,117,101,95,102,118,107,104,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,113,107,104,100,98,107,94],
[110,0,104,97,105,106,104,99,102,108],
[113,107,0,108,102,100,111,103,109,111],
[98,114,103,0,107,104,99,112,111,103],
[104,106,109,104,0,96,98,91,101,96],
[107,105,111,107,115,0,108,105,120,111],
[111,107,100,112,113,103,0,106,105,102],
[113,112,108,99,120,106,105,0,115,111],
[104,109,102,100,110,91,106,96,0,98],
[117,103,100,108,115,100,109,100,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,99,108,110,104,104,97,112,102],
[103,0,99,110,110,104,103,106,103,93],
[112,112,0,113,124,109,117,102,102,106],
[103,101,98,0,113,98,103,99,99,103],
[101,101,87,98,0,110,105,95,96,107],
[107,107,102,113,101,0,100,97,96,97],
[107,108,94,108,106,111,0,92,92,114],
[114,105,109,112,116,114,119,0,105,108],
[99,108,109,112,115,115,119,106,0,104],
[109,118,105,108,104,114,97,103,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,105,110,111,109,116,126,108,106],
[95,0,98,111,111,101,111,112,112,93],
[106,113,0,107,98,101,119,115,120,102],
[101,100,104,0,111,98,123,112,94,95],
[100,100,113,100,0,96,112,104,105,103],
[102,110,110,113,115,0,111,120,121,111],
[95,100,92,88,99,100,0,111,104,94],
[85,99,96,99,107,91,100,0,103,95],
[103,99,91,117,106,90,107,108,0,94],
[105,118,109,116,108,100,117,116,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,72,90,83,124,93,112,99,92],
[89,0,88,90,79,99,101,102,78,84],
[139,123,0,89,130,150,142,120,118,124],
[121,121,122,0,132,152,132,142,129,103],
[128,132,81,79,0,120,102,89,98,101],
[87,112,61,59,91,0,122,82,91,83],
[118,110,69,79,109,89,0,100,90,121],
[99,109,91,69,122,129,111,0,87,110],
[112,133,93,82,113,120,121,124,0,144],
[119,127,87,108,110,128,90,101,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,108,99,114,111,109,91,76,112],
[116,0,99,110,110,114,114,98,98,114],
[103,112,0,116,109,114,99,103,91,114],
[112,101,95,0,106,113,100,109,91,118],
[97,101,102,105,0,109,106,110,107,106],
[100,97,97,98,102,0,99,87,79,98],
[102,97,112,111,105,112,0,105,99,107],
[120,113,108,102,101,124,106,0,96,117],
[135,113,120,120,104,132,112,115,0,115],
[99,97,97,93,105,113,104,94,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,97,97,104,89,97,91,78],
[109,0,103,107,99,111,93,85,97,89],
[99,108,0,107,99,100,94,98,111,108],
[114,104,104,0,95,107,95,94,116,101],
[114,112,112,116,0,113,96,104,111,112],
[107,100,111,104,98,0,85,93,104,99],
[122,118,117,116,115,126,0,111,111,102],
[114,126,113,117,107,118,100,0,120,108],
[120,114,100,95,100,107,100,91,0,93],
[133,122,103,110,99,112,109,103,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,100,108,102,99,100,104,106],
[101,0,101,95,104,99,100,95,103,99],
[101,110,0,105,112,112,103,100,106,103],
[111,116,106,0,115,115,115,107,104,114],
[103,107,99,96,0,100,98,100,88,89],
[109,112,99,96,111,0,103,101,107,106],
[112,111,108,96,113,108,0,104,110,105],
[111,116,111,104,111,110,107,0,101,116],
[107,108,105,107,123,104,101,110,0,93],
[105,112,108,97,122,105,106,95,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,120,99,116,107,119,117,118,116],
[104,0,112,109,109,104,132,120,119,113],
[91,99,0,105,98,94,107,112,120,100],
[112,102,106,0,116,101,116,98,114,120],
[95,102,113,95,0,107,123,120,115,106],
[104,107,117,110,104,0,126,122,116,107],
[92,79,104,95,88,85,0,101,102,98],
[94,91,99,113,91,89,110,0,106,101],
[93,92,91,97,96,95,109,105,0,110],
[95,98,111,91,105,104,113,110,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,95,122,103,116,102,99,112,104],
[100,0,85,108,109,101,96,91,98,92],
[116,126,0,127,119,119,101,103,110,106],
[89,103,84,0,98,103,84,88,98,95],
[108,102,92,113,0,109,97,104,104,108],
[95,110,92,108,102,0,104,106,100,101],
[109,115,110,127,114,107,0,109,108,87],
[112,120,108,123,107,105,102,0,103,100],
[99,113,101,113,107,111,103,108,0,102],
[107,119,105,116,103,110,124,111,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,138,100,139,116,142,143,168,113],
[111,0,109,96,121,73,111,96,124,82],
[73,102,0,73,57,117,88,116,155,72],
[111,115,138,0,123,102,112,130,140,114],
[72,90,154,88,0,103,89,131,172,89],
[95,138,94,109,108,0,112,109,137,122],
[69,100,123,99,122,99,0,100,137,86],
[68,115,95,81,80,102,111,0,135,98],
[43,87,56,71,39,74,74,76,0,74],
[98,129,139,97,122,89,125,113,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,114,105,114,115,95,123,110],
[101,0,104,91,102,99,102,99,87,87],
[100,107,0,102,97,116,96,113,104,84],
[97,120,109,0,108,110,122,119,115,100],
[106,109,114,103,0,108,116,116,118,99],
[97,112,95,101,103,0,99,102,111,91],
[96,109,115,89,95,112,0,102,124,88],
[116,112,98,92,95,109,109,0,126,106],
[88,124,107,96,93,100,87,85,0,87],
[101,124,127,111,112,120,123,105,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,90,96,93,107,82,103,92,99],
[112,0,93,111,104,105,106,120,106,99],
[121,118,0,103,100,119,108,122,102,112],
[115,100,108,0,101,105,95,111,102,116],
[118,107,111,110,0,106,100,135,110,116],
[104,106,92,106,105,0,102,118,92,106],
[129,105,103,116,111,109,0,118,109,110],
[108,91,89,100,76,93,93,0,100,94],
[119,105,109,109,101,119,102,111,0,110],
[112,112,99,95,95,105,101,117,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,132,101,102,99,90,109,108,96],
[102,0,115,101,83,99,94,114,93,108],
[79,96,0,78,77,92,74,111,84,84],
[110,110,133,0,113,95,99,120,99,121],
[109,128,134,98,0,119,111,123,100,130],
[112,112,119,116,92,0,85,118,99,117],
[121,117,137,112,100,126,0,121,103,114],
[102,97,100,91,88,93,90,0,94,83],
[103,118,127,112,111,112,108,117,0,119],
[115,103,127,90,81,94,97,128,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,99,97,102,106,100,100,99,113],
[91,0,88,99,111,93,96,85,104,89],
[112,123,0,108,115,115,105,107,112,102],
[114,112,103,0,103,101,100,110,121,118],
[109,100,96,108,0,106,97,94,113,104],
[105,118,96,110,105,0,104,117,112,104],
[111,115,106,111,114,107,0,104,112,116],
[111,126,104,101,117,94,107,0,121,105],
[112,107,99,90,98,99,99,90,0,99],
[98,122,109,93,107,107,95,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,115,97,129,97,131,66,114,65],
[84,0,83,80,133,132,116,83,97,63],
[96,128,0,130,145,130,112,83,113,113],
[114,131,81,0,164,131,130,84,115,96],
[82,78,66,47,0,116,82,51,81,47],
[114,79,81,80,95,0,96,81,113,78],
[80,95,99,81,129,115,0,65,95,80],
[145,128,128,127,160,130,146,0,129,95],
[97,114,98,96,130,98,116,82,0,79],
[146,148,98,115,164,133,131,116,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,100,94,98,92,105,95,99,101],
[94,0,112,86,86,89,111,81,98,111],
[111,99,0,92,95,85,109,89,96,104],
[117,125,119,0,97,109,118,108,129,113],
[113,125,116,114,0,105,117,115,129,111],
[119,122,126,102,106,0,119,92,114,106],
[106,100,102,93,94,92,0,93,102,93],
[116,130,122,103,96,119,118,0,119,119],
[112,113,115,82,82,97,109,92,0,105],
[110,100,107,98,100,105,118,92,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,118,109,117,117,115,112,115,103],
[89,0,108,101,98,106,104,104,103,95],
[93,103,0,112,98,98,93,94,96,92],
[102,110,99,0,99,108,103,108,111,99],
[94,113,113,112,0,117,100,102,106,98],
[94,105,113,103,94,0,108,104,107,99],
[96,107,118,108,111,103,0,117,110,107],
[99,107,117,103,109,107,94,0,101,96],
[96,108,115,100,105,104,101,110,0,98],
[108,116,119,112,113,112,104,115,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,121,121,108,129,112,113,115,102],
[104,0,113,89,99,95,102,112,99,107],
[90,98,0,118,87,119,94,114,117,90],
[90,122,93,0,103,109,110,123,109,109],
[103,112,124,108,0,118,105,102,105,96],
[82,116,92,102,93,0,101,102,89,101],
[99,109,117,101,106,110,0,106,96,100],
[98,99,97,88,109,109,105,0,80,106],
[96,112,94,102,106,122,115,131,0,110],
[109,104,121,102,115,110,111,105,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,97,91,95,109,102,111,103,98],
[101,0,98,92,97,110,104,114,105,82],
[114,113,0,106,105,118,117,122,109,104],
[120,119,105,0,97,109,103,113,99,93],
[116,114,106,114,0,110,110,121,95,106],
[102,101,93,102,101,0,106,102,105,90],
[109,107,94,108,101,105,0,115,99,99],
[100,97,89,98,90,109,96,0,85,93],
[108,106,102,112,116,106,112,126,0,105],
[113,129,107,118,105,121,112,118,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,105,116,104,105,103,102,117,117],
[98,0,100,97,86,102,79,93,101,98],
[106,111,0,100,92,105,89,95,103,99],
[95,114,111,0,105,111,91,107,109,99],
[107,125,119,106,0,121,95,111,105,122],
[106,109,106,100,90,0,93,91,108,115],
[108,132,122,120,116,118,0,105,123,121],
[109,118,116,104,100,120,106,0,107,121],
[94,110,108,102,106,103,88,104,0,118],
[94,113,112,112,89,96,90,90,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,117,101,114,103,104,108,107,99],
[110,0,102,100,113,106,104,105,104,96],
[94,109,0,104,102,84,102,100,97,99],
[110,111,107,0,105,100,98,100,106,105],
[97,98,109,106,0,90,110,103,94,91],
[108,105,127,111,121,0,109,115,105,105],
[107,107,109,113,101,102,0,102,99,104],
[103,106,111,111,108,96,109,0,102,98],
[104,107,114,105,117,106,112,109,0,106],
[112,115,112,106,120,106,107,113,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,91,110,94,108,94,95,108,103],
[111,0,105,103,102,104,106,108,107,109],
[120,106,0,108,112,101,106,104,108,118],
[101,108,103,0,102,111,92,104,106,109],
[117,109,99,109,0,121,116,111,113,113],
[103,107,110,100,90,0,100,100,115,109],
[117,105,105,119,95,111,0,102,109,108],
[116,103,107,107,100,111,109,0,108,118],
[103,104,103,105,98,96,102,103,0,114],
[108,102,93,102,98,102,103,93,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,107,112,107,111,110,105,99],
[114,0,114,111,93,103,106,103,99,108],
[105,97,0,94,92,97,107,87,103,98],
[104,100,117,0,75,105,116,106,96,103],
[99,118,119,136,0,115,121,105,111,119],
[104,108,114,106,96,0,124,108,99,106],
[100,105,104,95,90,87,0,104,93,101],
[101,108,124,105,106,103,107,0,103,98],
[106,112,108,115,100,112,118,108,0,104],
[112,103,113,108,92,105,110,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,102,96,105,110,88,104,99],
[110,0,124,119,102,105,103,110,117,108],
[101,87,0,106,95,110,92,94,98,103],
[109,92,105,0,86,99,95,87,100,102],
[115,109,116,125,0,116,115,113,113,105],
[106,106,101,112,95,0,93,104,109,102],
[101,108,119,116,96,118,0,101,109,105],
[123,101,117,124,98,107,110,0,106,106],
[107,94,113,111,98,102,102,105,0,101],
[112,103,108,109,106,109,106,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,108,105,108,117,98,116,106,101],
[106,0,99,105,103,107,102,90,102,86],
[103,112,0,109,100,107,100,114,116,107],
[106,106,102,0,94,99,86,116,111,105],
[103,108,111,117,0,88,93,120,100,98],
[94,104,104,112,123,0,115,113,114,117],
[113,109,111,125,118,96,0,123,117,115],
[95,121,97,95,91,98,88,0,107,91],
[105,109,95,100,111,97,94,104,0,94],
[110,125,104,106,113,94,96,120,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,113,101,128,106,108,116,100,120],
[101,0,98,99,112,75,94,87,102,98],
[98,113,0,98,112,93,107,106,90,103],
[110,112,113,0,114,81,95,106,111,100],
[83,99,99,97,0,93,104,118,98,97],
[105,136,118,130,118,0,114,112,119,126],
[103,117,104,116,107,97,0,121,111,122],
[95,124,105,105,93,99,90,0,101,110],
[111,109,121,100,113,92,100,110,0,93],
[91,113,108,111,114,85,89,101,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,94,108,91,95,97,94,96,97],
[117,0,97,112,102,103,114,96,98,110],
[117,114,0,118,104,107,109,110,110,100],
[103,99,93,0,98,94,98,94,94,97],
[120,109,107,113,0,115,109,119,103,107],
[116,108,104,117,96,0,100,110,105,109],
[114,97,102,113,102,111,0,108,106,102],
[117,115,101,117,92,101,103,0,98,104],
[115,113,101,117,108,106,105,113,0,104],
[114,101,111,114,104,102,109,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,96,92,110,101,99,120,110,105],
[104,0,106,108,125,106,102,85,127,114],
[115,105,0,103,112,101,99,116,114,116],
[119,103,108,0,122,112,110,112,123,108],
[101,86,99,89,0,98,102,98,116,95],
[110,105,110,99,113,0,112,112,109,107],
[112,109,112,101,109,99,0,100,113,107],
[91,126,95,99,113,99,111,0,120,104],
[101,84,97,88,95,102,98,91,0,104],
[106,97,95,103,116,104,104,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,119,105,105,118,105,107,119,117],
[91,0,109,84,101,96,101,88,96,98],
[92,102,0,86,93,97,98,88,104,96],
[106,127,125,0,113,106,111,105,115,128],
[106,110,118,98,0,91,107,107,110,113],
[93,115,114,105,120,0,104,103,108,102],
[106,110,113,100,104,107,0,110,107,101],
[104,123,123,106,104,108,101,0,112,109],
[92,115,107,96,101,103,104,99,0,99],
[94,113,115,83,98,109,110,102,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,115,98,106,113,95,101,97,101],
[110,0,91,106,94,99,95,93,97,97],
[96,120,0,104,111,104,107,100,101,98],
[113,105,107,0,109,106,115,111,112,95],
[105,117,100,102,0,95,105,107,110,96],
[98,112,107,105,116,0,97,94,94,111],
[116,116,104,96,106,114,0,93,105,104],
[110,118,111,100,104,117,118,0,114,113],
[114,114,110,99,101,117,106,97,0,95],
[110,114,113,116,115,100,107,98,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,113,104,120,85,90,83,97,111],
[122,0,118,118,123,82,86,114,136,123],
[98,93,0,105,111,84,93,101,110,124],
[107,93,106,0,126,120,97,120,123,101],
[91,88,100,85,0,77,77,99,93,119],
[126,129,127,91,134,0,122,120,121,137],
[121,125,118,114,134,89,0,116,118,124],
[128,97,110,91,112,91,95,0,97,103],
[114,75,101,88,118,90,93,114,0,125],
[100,88,87,110,92,74,87,108,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,102,90,92,104,92,93,93,93],
[129,0,99,95,107,108,108,103,97,105],
[109,112,0,105,106,109,111,107,91,114],
[121,116,106,0,108,110,106,105,109,109],
[119,104,105,103,0,105,118,112,95,98],
[107,103,102,101,106,0,106,100,93,96],
[119,103,100,105,93,105,0,101,96,101],
[118,108,104,106,99,111,110,0,102,108],
[118,114,120,102,116,118,115,109,0,120],
[118,106,97,102,113,115,110,103,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,105,52,157,105,105,211,211,104],
[0,0,105,52,52,105,52,0,52,52],
[106,106,0,52,106,53,0,106,106,52],
[159,159,159,0,159,53,53,159,159,52],
[54,159,105,52,0,53,53,107,107,0],
[106,106,158,158,158,0,54,106,106,158],
[106,159,211,158,158,157,0,159,211,104],
[0,211,105,52,104,105,52,0,106,52],
[0,159,105,52,104,105,0,105,0,52],
[107,159,159,159,211,53,107,159,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,93,109,91,115,97,105,105,117],
[107,0,101,111,113,123,98,106,113,113],
[118,110,0,111,122,125,97,116,116,104],
[102,100,100,0,112,130,97,107,103,116],
[120,98,89,99,0,121,96,112,101,115],
[96,88,86,81,90,0,87,92,90,105],
[114,113,114,114,115,124,0,101,106,118],
[106,105,95,104,99,119,110,0,82,102],
[106,98,95,108,110,121,105,129,0,120],
[94,98,107,95,96,106,93,109,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,99,99,98,107,113,107,109,120],
[115,0,101,118,109,115,115,106,107,111],
[112,110,0,111,108,105,119,105,101,119],
[112,93,100,0,106,98,109,95,95,117],
[113,102,103,105,0,105,117,108,105,110],
[104,96,106,113,106,0,118,100,102,109],
[98,96,92,102,94,93,0,97,86,101],
[104,105,106,116,103,111,114,0,111,113],
[102,104,110,116,106,109,125,100,0,116],
[91,100,92,94,101,102,110,98,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,116,104,111,103,94,98,106],
[112,0,116,113,104,106,117,99,119,107],
[112,95,0,98,110,106,113,94,101,106],
[95,98,113,0,104,107,104,100,105,108],
[107,107,101,107,0,106,107,107,106,114],
[100,105,105,104,105,0,109,95,106,106],
[108,94,98,107,104,102,0,99,111,113],
[117,112,117,111,104,116,112,0,117,111],
[113,92,110,106,105,105,100,94,0,107],
[105,104,105,103,97,105,98,100,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,102,94,74,114,72,91,102,81],
[132,0,107,116,108,124,98,103,128,107],
[109,104,0,92,101,112,94,101,99,101],
[117,95,119,0,115,119,102,103,104,105],
[137,103,110,96,0,114,102,114,124,108],
[97,87,99,92,97,0,100,92,101,101],
[139,113,117,109,109,111,0,94,111,109],
[120,108,110,108,97,119,117,0,109,127],
[109,83,112,107,87,110,100,102,0,107],
[130,104,110,106,103,110,102,84,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,100,106,111,108,111,103,103,116],
[113,0,114,102,115,101,109,103,102,108],
[111,97,0,99,108,103,109,111,106,112],
[105,109,112,0,106,104,104,108,110,102],
[100,96,103,105,0,100,106,101,104,110],
[103,110,108,107,111,0,113,109,120,111],
[100,102,102,107,105,98,0,109,101,104],
[108,108,100,103,110,102,102,0,102,114],
[108,109,105,101,107,91,110,109,0,107],
[95,103,99,109,101,100,107,97,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,103,111,132,126,99,96,115,101],
[96,0,109,110,110,114,108,109,104,101],
[108,102,0,113,114,122,109,101,108,102],
[100,101,98,0,107,110,92,88,90,94],
[79,101,97,104,0,105,99,100,107,105],
[85,97,89,101,106,0,94,97,100,86],
[112,103,102,119,112,117,0,109,110,99],
[115,102,110,123,111,114,102,0,118,118],
[96,107,103,121,104,111,101,93,0,101],
[110,110,109,117,106,125,112,93,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,95,103,99,97,98,102,105,88],
[108,0,101,96,97,109,94,100,97,98],
[116,110,0,113,116,103,105,109,118,112],
[108,115,98,0,99,106,103,112,115,99],
[112,114,95,112,0,109,105,105,107,105],
[114,102,108,105,102,0,108,94,111,104],
[113,117,106,108,106,103,0,105,121,115],
[109,111,102,99,106,117,106,0,111,101],
[106,114,93,96,104,100,90,100,0,104],
[123,113,99,112,106,107,96,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,126,110,96,102,113,118,117],
[107,0,106,105,101,111,93,119,100,114],
[102,105,0,106,95,102,114,116,108,113],
[85,106,105,0,119,110,95,97,116,93],
[101,110,116,92,0,95,94,93,100,104],
[115,100,109,101,116,0,106,107,105,107],
[109,118,97,116,117,105,0,115,111,120],
[98,92,95,114,118,104,96,0,104,113],
[93,111,103,95,111,106,100,107,0,101],
[94,97,98,118,107,104,91,98,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,100,112,106,99,99,113,106,96],
[115,0,110,120,108,105,107,117,117,92],
[111,101,0,109,102,105,101,118,114,108],
[99,91,102,0,107,83,87,100,98,101],
[105,103,109,104,0,104,95,115,108,98],
[112,106,106,128,107,0,105,114,111,104],
[112,104,110,124,116,106,0,114,115,104],
[98,94,93,111,96,97,97,0,107,91],
[105,94,97,113,103,100,96,104,0,98],
[115,119,103,110,113,107,107,120,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,112,107,95,116,106,112,111,99],
[114,0,124,106,102,129,108,116,111,111],
[99,87,0,95,87,111,97,103,102,96],
[104,105,116,0,110,114,103,106,108,100],
[116,109,124,101,0,125,115,114,126,107],
[95,82,100,97,86,0,90,94,99,79],
[105,103,114,108,96,121,0,103,112,100],
[99,95,108,105,97,117,108,0,100,98],
[100,100,109,103,85,112,99,111,0,91],
[112,100,115,111,104,132,111,113,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,94,94,99,103,100,108,98,116],
[107,0,95,104,94,105,97,113,111,115],
[117,116,0,111,104,119,98,127,104,120],
[117,107,100,0,98,121,116,122,114,121],
[112,117,107,113,0,109,103,120,105,122],
[108,106,92,90,102,0,113,116,91,107],
[111,114,113,95,108,98,0,117,103,114],
[103,98,84,89,91,95,94,0,93,105],
[113,100,107,97,106,120,108,118,0,112],
[95,96,91,90,89,104,97,106,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,111,107,95,121,111,103,108],
[104,0,100,114,108,97,108,100,94,97],
[100,111,0,109,112,102,101,104,105,100],
[100,97,102,0,100,90,105,104,105,95],
[104,103,99,111,0,108,112,111,101,113],
[116,114,109,121,103,0,121,103,112,104],
[90,103,110,106,99,90,0,94,95,94],
[100,111,107,107,100,108,117,0,104,103],
[108,117,106,106,110,99,116,107,0,116],
[103,114,111,116,98,107,117,108,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,138,119,94,117,130,158,108,118],
[85,0,170,140,103,86,111,97,141,86],
[73,41,0,107,92,74,107,73,107,42],
[92,71,104,0,91,84,107,71,72,83],
[117,108,119,120,0,107,151,118,132,99],
[94,125,137,127,104,0,138,128,119,94],
[81,100,104,104,60,73,0,103,83,104],
[53,114,138,140,93,83,108,0,139,103],
[103,70,104,139,79,92,128,72,0,93],
[93,125,169,128,112,117,107,108,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,97,102,115,92,110,104,110,110],
[112,0,109,104,117,97,113,102,106,105],
[114,102,0,106,116,96,111,99,103,102],
[109,107,105,0,118,106,110,115,108,114],
[96,94,95,93,0,89,104,84,93,102],
[119,114,115,105,122,0,104,101,107,109],
[101,98,100,101,107,107,0,104,98,104],
[107,109,112,96,127,110,107,0,99,104],
[101,105,108,103,118,104,113,112,0,113],
[101,106,109,97,109,102,107,107,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,118,121,113,116,121,115,120],
[101,0,91,110,101,116,101,114,104,96],
[111,120,0,105,111,121,116,121,112,117],
[93,101,106,0,87,108,103,118,91,104],
[90,110,100,124,0,114,123,128,112,112],
[98,95,90,103,97,0,112,123,109,113],
[95,110,95,108,88,99,0,120,92,99],
[90,97,90,93,83,88,91,0,95,93],
[96,107,99,120,99,102,119,116,0,104],
[91,115,94,107,99,98,112,118,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,117,120,107,110,106,107,101,108],
[104,0,108,119,102,101,100,97,110,106],
[94,103,0,110,114,111,103,96,103,104],
[91,92,101,0,90,94,88,91,96,91],
[104,109,97,121,0,97,99,97,106,119],
[101,110,100,117,114,0,100,106,109,101],
[105,111,108,123,112,111,0,115,114,114],
[104,114,115,120,114,105,96,0,111,116],
[110,101,108,115,105,102,97,100,0,104],
[103,105,107,120,92,110,97,95,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,111,109,102,120,114,106,102,105],
[110,0,112,106,111,114,108,105,119,113],
[100,99,0,102,110,98,103,91,101,110],
[102,105,109,0,99,110,103,101,103,104],
[109,100,101,112,0,107,110,120,120,113],
[91,97,113,101,104,0,123,103,106,106],
[97,103,108,108,101,88,0,105,109,89],
[105,106,120,110,91,108,106,0,108,103],
[109,92,110,108,91,105,102,103,0,119],
[106,98,101,107,98,105,122,108,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,94,98,92,97,104,89,101,104],
[104,0,104,91,100,103,107,95,91,102],
[117,107,0,97,92,111,107,105,102,108],
[113,120,114,0,108,110,113,101,100,112],
[119,111,119,103,0,110,112,106,103,108],
[114,108,100,101,101,0,108,99,99,104],
[107,104,104,98,99,103,0,94,98,103],
[122,116,106,110,105,112,117,0,106,109],
[110,120,109,111,108,112,113,105,0,101],
[107,109,103,99,103,107,108,102,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,114,116,113,103,115,107,118],
[107,0,105,112,113,118,103,106,104,105],
[106,106,0,100,103,105,109,114,112,98],
[97,99,111,0,103,105,107,116,103,102],
[95,98,108,108,0,109,111,110,100,107],
[98,93,106,106,102,0,99,99,111,95],
[108,108,102,104,100,112,0,110,107,100],
[96,105,97,95,101,112,101,0,88,100],
[104,107,99,108,111,100,104,123,0,117],
[93,106,113,109,104,116,111,111,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,99,101,93,99,110,96,112,98],
[102,0,88,91,100,91,109,92,103,101],
[112,123,0,106,104,105,110,98,116,100],
[110,120,105,0,104,108,129,110,122,115],
[118,111,107,107,0,105,112,112,117,115],
[112,120,106,103,106,0,110,104,117,105],
[101,102,101,82,99,101,0,103,103,84],
[115,119,113,101,99,107,108,0,110,104],
[99,108,95,89,94,94,108,101,0,93],
[113,110,111,96,96,106,127,107,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,117,100,112,113,98,118,109,117],
[90,0,100,92,99,98,86,94,96,92],
[94,111,0,102,96,109,91,106,96,103],
[111,119,109,0,103,109,109,108,95,110],
[99,112,115,108,0,108,96,116,110,108],
[98,113,102,102,103,0,94,110,107,116],
[113,125,120,102,115,117,0,114,111,109],
[93,117,105,103,95,101,97,0,101,103],
[102,115,115,116,101,104,100,110,0,105],
[94,119,108,101,103,95,102,108,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,134,133,90,122,131,122,89,121],
[60,0,72,102,88,93,122,111,71,92],
[77,139,0,129,98,129,111,99,107,100],
[78,109,82,0,68,89,102,69,82,59],
[121,123,113,143,0,104,151,82,102,102],
[89,118,82,122,107,0,120,100,100,91],
[80,89,100,109,60,91,0,99,50,72],
[89,100,112,142,129,111,112,0,90,100],
[122,140,104,129,109,111,161,121,0,80],
[90,119,111,152,109,120,139,111,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,91,115,118,106,106,116,114,131],
[121,0,116,133,133,124,117,119,103,124],
[120,95,0,127,110,98,113,113,109,120],
[96,78,84,0,110,79,108,105,110,95],
[93,78,101,101,0,107,105,109,88,114],
[105,87,113,132,104,0,108,118,102,107],
[105,94,98,103,106,103,0,113,90,104],
[95,92,98,106,102,93,98,0,92,109],
[97,108,102,101,123,109,121,119,0,106],
[80,87,91,116,97,104,107,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,110,107,107,95,102,107,98,95],
[97,0,106,94,113,83,95,87,83,107],
[101,105,0,106,131,107,113,103,102,98],
[104,117,105,0,116,91,103,101,97,108],
[104,98,80,95,0,82,92,97,79,88],
[116,128,104,120,129,0,121,113,121,116],
[109,116,98,108,119,90,0,98,102,103],
[104,124,108,110,114,98,113,0,101,99],
[113,128,109,114,132,90,109,110,0,114],
[116,104,113,103,123,95,108,112,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,86,116,91,93,110,89,80,79],
[131,0,99,120,136,123,140,138,101,105],
[125,112,0,134,139,124,126,141,122,86],
[95,91,77,0,108,88,111,94,96,83],
[120,75,72,103,0,122,113,120,75,61],
[118,88,87,123,89,0,106,121,77,103],
[101,71,85,100,98,105,0,93,87,65],
[122,73,70,117,91,90,118,0,107,65],
[131,110,89,115,136,134,124,104,0,117],
[132,106,125,128,150,108,146,146,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,82,101,112,99,100,111,92,120],
[70,0,59,78,80,68,48,40,79,99],
[129,152,0,109,119,118,109,110,98,136],
[110,133,102,0,98,108,69,90,102,129],
[99,131,92,113,0,89,58,101,80,100],
[112,143,93,103,122,0,100,81,51,120],
[111,163,102,142,153,111,0,94,104,111],
[100,171,101,121,110,130,117,0,132,151],
[119,132,113,109,131,160,107,79,0,169],
[91,112,75,82,111,91,100,60,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,105,102,121,118,119,118,110,112],
[90,0,95,85,101,81,109,102,93,98],
[106,116,0,111,114,120,123,100,117,127],
[109,126,100,0,115,113,116,116,121,115],
[90,110,97,96,0,116,121,102,99,111],
[93,130,91,98,95,0,107,111,112,97],
[92,102,88,95,90,104,0,100,107,111],
[93,109,111,95,109,100,111,0,118,107],
[101,118,94,90,112,99,104,93,0,101],
[99,113,84,96,100,114,100,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,96,114,123,130,129,120,132,117],
[90,0,106,89,108,118,112,110,109,97],
[115,105,0,87,113,106,106,97,107,119],
[97,122,124,0,120,110,118,113,109,116],
[88,103,98,91,0,116,106,88,100,111],
[81,93,105,101,95,0,102,115,95,87],
[82,99,105,93,105,109,0,102,111,112],
[91,101,114,98,123,96,109,0,108,108],
[79,102,104,102,111,116,100,103,0,100],
[94,114,92,95,100,124,99,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,105,115,110,112,129,106,120,107],
[89,0,132,117,110,96,127,110,125,106],
[106,79,0,93,108,97,118,99,101,93],
[96,94,118,0,127,107,117,104,115,109],
[101,101,103,84,0,106,117,98,89,101],
[99,115,114,104,105,0,114,102,108,106],
[82,84,93,94,94,97,0,86,108,91],
[105,101,112,107,113,109,125,0,107,117],
[91,86,110,96,122,103,103,104,0,98],
[104,105,118,102,110,105,120,94,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,98,102,101,111,99,96,100],
[108,0,110,106,98,105,99,96,90,100],
[104,101,0,114,103,101,99,90,89,95],
[113,105,97,0,88,96,104,91,94,100],
[109,113,108,123,0,101,114,110,100,111],
[110,106,110,115,110,0,112,110,104,108],
[100,112,112,107,97,99,0,93,100,103],
[112,115,121,120,101,101,118,0,111,114],
[115,121,122,117,111,107,111,100,0,103],
[111,111,116,111,100,103,108,97,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,106,119,110,91,105,119,105,111],
[110,0,113,116,118,96,106,117,115,97],
[105,98,0,122,113,96,109,113,113,112],
[92,95,89,0,107,87,103,105,110,91],
[101,93,98,104,0,92,104,110,109,101],
[120,115,115,124,119,0,104,111,108,112],
[106,105,102,108,107,107,0,112,108,105],
[92,94,98,106,101,100,99,0,102,105],
[106,96,98,101,102,103,103,109,0,106],
[100,114,99,120,110,99,106,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,112,102,125,113,85,107,107,88],
[114,0,118,100,122,106,100,119,110,100],
[99,93,0,93,120,105,95,112,100,103],
[109,111,118,0,119,101,98,104,116,105],
[86,89,91,92,0,99,85,81,91,87],
[98,105,106,110,112,0,99,89,112,97],
[126,111,116,113,126,112,0,105,121,115],
[104,92,99,107,130,122,106,0,109,102],
[104,101,111,95,120,99,90,102,0,89],
[123,111,108,106,124,114,96,109,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,95,97,92,89,94,94,97,102],
[111,0,114,90,100,102,88,106,93,95],
[116,97,0,101,105,102,101,102,108,99],
[114,121,110,0,99,113,98,108,116,100],
[119,111,106,112,0,107,109,115,103,106],
[122,109,109,98,104,0,106,111,112,103],
[117,123,110,113,102,105,0,107,111,107],
[117,105,109,103,96,100,104,0,110,109],
[114,118,103,95,108,99,100,101,0,100],
[109,116,112,111,105,108,104,102,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,109,87,109,84,85,83,102,97],
[88,0,158,70,126,95,108,109,112,118],
[102,53,0,70,94,58,70,100,85,84],
[124,141,141,0,109,147,96,147,135,126],
[102,85,117,102,0,107,102,101,109,92],
[127,116,153,64,104,0,80,108,152,102],
[126,103,141,115,109,131,0,147,124,113],
[128,102,111,64,110,103,64,0,118,109],
[109,99,126,76,102,59,87,93,0,94],
[114,93,127,85,119,109,98,102,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,96,119,124,107,108,114,121,107],
[108,0,98,123,140,103,98,102,83,75],
[115,113,0,115,121,105,101,117,80,99],
[92,88,96,0,96,76,74,97,86,93],
[87,71,90,115,0,84,96,79,80,66],
[104,108,106,135,127,0,93,100,90,102],
[103,113,110,137,115,118,0,113,96,86],
[97,109,94,114,132,111,98,0,95,87],
[90,128,131,125,131,121,115,116,0,84],
[104,136,112,118,145,109,125,124,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,101,98,98,106,111,103,102,116],
[102,0,109,98,98,103,92,101,100,100],
[110,102,0,97,95,106,98,103,89,99],
[113,113,114,0,112,124,114,112,101,115],
[113,113,116,99,0,106,97,102,105,107],
[105,108,105,87,105,0,100,106,98,106],
[100,119,113,97,114,111,0,113,106,107],
[108,110,108,99,109,105,98,0,99,101],
[109,111,122,110,106,113,105,112,0,103],
[95,111,112,96,104,105,104,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,104,105,110,109,108,121,113,117],
[114,0,113,107,115,103,103,112,106,111],
[107,98,0,94,101,101,107,107,113,122],
[106,104,117,0,113,110,104,117,123,122],
[101,96,110,98,0,104,95,103,104,104],
[102,108,110,101,107,0,112,101,116,113],
[103,108,104,107,116,99,0,107,115,115],
[90,99,104,94,108,110,104,0,115,99],
[98,105,98,88,107,95,96,96,0,106],
[94,100,89,89,107,98,96,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,89,84,94,88,86,88,104,105],
[114,0,96,101,86,88,99,106,101,108],
[122,115,0,99,100,102,113,113,110,113],
[127,110,112,0,115,102,102,114,105,129],
[117,125,111,96,0,110,115,113,112,127],
[123,123,109,109,101,0,105,123,110,109],
[125,112,98,109,96,106,0,103,102,126],
[123,105,98,97,98,88,108,0,100,126],
[107,110,101,106,99,101,109,111,0,126],
[106,103,98,82,84,102,85,85,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,149,89,111,116,114,78,105,108],
[103,0,116,95,111,113,93,109,113,65],
[62,95,0,101,94,113,80,107,80,62],
[122,116,110,0,107,114,107,117,100,77],
[100,100,117,104,0,117,99,94,123,101],
[95,98,98,97,94,0,106,100,89,81],
[97,118,131,104,112,105,0,89,103,96],
[133,102,104,94,117,111,122,0,94,104],
[106,98,131,111,88,122,108,117,0,107],
[103,146,149,134,110,130,115,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,112,134,142,132,116,140,95,120],
[88,0,144,145,133,141,116,127,145,125],
[99,67,0,77,58,96,89,84,86,64],
[77,66,134,0,93,112,106,98,106,95],
[69,78,153,118,0,132,126,106,124,116],
[79,70,115,99,79,0,93,97,106,57],
[95,95,122,105,85,118,0,106,134,104],
[71,84,127,113,105,114,105,0,117,87],
[116,66,125,105,87,105,77,94,0,101],
[91,86,147,116,95,154,107,124,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,97,92,93,96,92,101,101,107],
[105,0,98,97,92,96,99,103,95,96],
[114,113,0,106,106,117,97,118,101,103],
[119,114,105,0,109,105,110,107,102,98],
[118,119,105,102,0,105,110,107,100,100],
[115,115,94,106,106,0,107,111,111,106],
[119,112,114,101,101,104,0,110,108,108],
[110,108,93,104,104,100,101,0,100,98],
[110,116,110,109,111,100,103,111,0,107],
[104,115,108,113,111,105,103,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,108,128,104,89,123,132,117,100],
[90,0,112,119,105,99,106,116,123,83],
[103,99,0,113,109,103,98,115,122,115],
[83,92,98,0,100,99,97,106,113,99],
[107,106,102,111,0,108,111,101,109,97],
[122,112,108,112,103,0,108,116,99,103],
[88,105,113,114,100,103,0,112,115,107],
[79,95,96,105,110,95,99,0,109,105],
[94,88,89,98,102,112,96,102,0,96],
[111,128,96,112,114,108,104,106,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,108,108,104,120,100,107,117,126],
[89,0,92,92,91,110,94,98,102,90],
[103,119,0,106,119,124,110,97,123,121],
[103,119,105,0,98,109,95,108,109,103],
[107,120,92,113,0,111,104,99,107,105],
[91,101,87,102,100,0,99,96,112,96],
[111,117,101,116,107,112,0,107,109,127],
[104,113,114,103,112,115,104,0,114,120],
[94,109,88,102,104,99,102,97,0,114],
[85,121,90,108,106,115,84,91,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,124,112,104,122,110,112,124,115],
[91,0,100,112,107,123,105,105,112,104],
[87,111,0,111,104,109,89,118,101,91],
[99,99,100,0,113,123,103,123,110,108],
[107,104,107,98,0,104,110,120,117,111],
[89,88,102,88,107,0,95,93,96,100],
[101,106,122,108,101,116,0,110,108,105],
[99,106,93,88,91,118,101,0,112,93],
[87,99,110,101,94,115,103,99,0,101],
[96,107,120,103,100,111,106,118,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,103,89,97,95,85,91,101,86],
[123,0,110,110,126,100,115,95,124,112],
[108,101,0,103,109,107,106,84,108,103],
[122,101,108,0,110,95,87,88,102,106],
[114,85,102,101,0,83,90,83,106,102],
[116,111,104,116,128,0,103,89,115,120],
[126,96,105,124,121,108,0,92,110,91],
[120,116,127,123,128,122,119,0,125,101],
[110,87,103,109,105,96,101,86,0,88],
[125,99,108,105,109,91,120,110,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,81,80,64,116,95,96,63,66],
[132,0,98,66,81,85,98,115,64,114],
[130,113,0,97,116,117,114,129,97,114],
[131,145,114,0,147,117,113,145,81,129],
[147,130,95,64,0,99,113,96,81,81],
[95,126,94,94,112,0,127,110,111,95],
[116,113,97,98,98,84,0,113,65,97],
[115,96,82,66,115,101,98,0,64,82],
[148,147,114,130,130,100,146,147,0,147],
[145,97,97,82,130,116,114,129,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,93,107,126,86,82,96,105,114],
[105,0,59,102,110,54,49,71,79,114],
[118,152,0,102,136,114,107,114,145,121],
[104,109,109,0,132,111,85,109,110,103],
[85,101,75,79,0,81,66,67,96,97],
[125,157,97,100,130,0,111,82,127,144],
[129,162,104,126,145,100,0,99,113,128],
[115,140,97,102,144,129,112,0,125,107],
[106,132,66,101,115,84,98,86,0,114],
[97,97,90,108,114,67,83,104,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,144,103,116,125,115,125,106,107],
[86,0,108,93,89,106,98,97,78,91],
[67,103,0,85,73,89,93,92,83,87],
[108,118,126,0,105,111,132,122,101,106],
[95,122,138,106,0,119,112,107,109,116],
[86,105,122,100,92,0,103,116,98,76],
[96,113,118,79,99,108,0,96,100,96],
[86,114,119,89,104,95,115,0,92,91],
[105,133,128,110,102,113,111,119,0,96],
[104,120,124,105,95,135,115,120,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,107,95,116,107,99,94,94,86],
[117,0,103,106,112,112,100,100,110,93],
[104,108,0,94,116,103,105,100,102,90],
[116,105,117,0,111,116,103,104,106,106],
[95,99,95,100,0,106,89,96,103,102],
[104,99,108,95,105,0,99,111,101,102],
[112,111,106,108,122,112,0,114,104,111],
[117,111,111,107,115,100,97,0,105,101],
[117,101,109,105,108,110,107,106,0,98],
[125,118,121,105,109,109,100,110,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,101,107,125,106,99,106,110],
[97,0,120,102,100,120,123,96,120,115],
[99,91,0,94,97,110,106,96,111,91],
[110,109,117,0,111,131,119,117,114,99],
[104,111,114,100,0,120,89,109,96,110],
[86,91,101,80,91,0,92,88,79,87],
[105,88,105,92,122,119,0,119,95,109],
[112,115,115,94,102,123,92,0,101,112],
[105,91,100,97,115,132,116,110,0,77],
[101,96,120,112,101,124,102,99,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,78,113,99,118,137,120,98,115],
[103,0,91,138,97,118,129,121,103,112],
[133,120,0,115,136,99,153,139,114,134],
[98,73,96,0,88,96,143,126,105,112],
[112,114,75,123,0,101,127,104,133,141],
[93,93,112,115,110,0,125,128,106,120],
[74,82,58,68,84,86,0,100,85,91],
[91,90,72,85,107,83,111,0,96,110],
[113,108,97,106,78,105,126,115,0,103],
[96,99,77,99,70,91,120,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,119,82,112,86,106,102,109,125],
[117,0,114,97,104,79,102,118,113,117],
[92,97,0,84,94,80,91,91,97,99],
[129,114,127,0,120,99,117,129,112,109],
[99,107,117,91,0,81,85,109,92,99],
[125,132,131,112,130,0,102,122,116,135],
[105,109,120,94,126,109,0,126,111,133],
[109,93,120,82,102,89,85,0,103,116],
[102,98,114,99,119,95,100,108,0,111],
[86,94,112,102,112,76,78,95,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,69,117,104,96,113,119,98,112],
[115,0,116,116,129,146,117,111,103,112],
[142,95,0,122,137,101,109,134,104,136],
[94,95,89,0,100,91,109,102,107,99],
[107,82,74,111,0,109,106,93,85,100],
[115,65,110,120,102,0,109,108,102,98],
[98,94,102,102,105,102,0,107,82,111],
[92,100,77,109,118,103,104,0,103,111],
[113,108,107,104,126,109,129,108,0,138],
[99,99,75,112,111,113,100,100,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,94,102,85,91,109,101,91,93],
[80,0,86,94,81,106,100,101,89,115],
[117,125,0,130,91,100,113,106,84,82],
[109,117,81,0,75,95,109,100,78,109],
[126,130,120,136,0,116,112,124,100,104],
[120,105,111,116,95,0,116,111,84,105],
[102,111,98,102,99,95,0,104,108,113],
[110,110,105,111,87,100,107,0,93,84],
[120,122,127,133,111,127,103,118,0,127],
[118,96,129,102,107,106,98,127,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,105,123,130,128,117,108,146,128],
[67,0,100,82,92,91,72,78,120,117],
[106,111,0,98,107,118,103,110,126,126],
[88,129,113,0,121,97,94,100,127,123],
[81,119,104,90,0,97,89,97,103,126],
[83,120,93,114,114,0,96,88,103,132],
[94,139,108,117,122,115,0,112,120,139],
[103,133,101,111,114,123,99,0,119,118],
[65,91,85,84,108,108,91,92,0,108],
[83,94,85,88,85,79,72,93,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,94,116,90,99,102,104,85,113],
[104,0,104,118,104,95,94,110,99,104],
[117,107,0,114,110,111,111,130,94,116],
[95,93,97,0,102,67,99,100,87,102],
[121,107,101,109,0,95,102,123,108,117],
[112,116,100,144,116,0,114,116,103,113],
[109,117,100,112,109,97,0,110,102,112],
[107,101,81,111,88,95,101,0,98,98],
[126,112,117,124,103,108,109,113,0,122],
[98,107,95,109,94,98,99,113,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,75,92,57,97,75,95,100,106],
[123,0,114,125,93,116,139,113,89,94],
[136,97,0,124,107,136,144,135,137,107],
[119,86,87,0,106,96,123,74,98,117],
[154,118,104,105,0,116,123,123,118,123],
[114,95,75,115,95,0,132,123,87,103],
[136,72,67,88,88,79,0,94,100,108],
[116,98,76,137,88,88,117,0,106,88],
[111,122,74,113,93,124,111,105,0,113],
[105,117,104,94,88,108,103,123,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,108,123,94,101,110,110,100,105],
[120,0,97,126,111,112,97,123,99,98],
[103,114,0,132,108,114,117,113,109,107],
[88,85,79,0,100,96,101,102,89,80],
[117,100,103,111,0,102,89,118,109,106],
[110,99,97,115,109,0,107,107,95,107],
[101,114,94,110,122,104,0,109,108,105],
[101,88,98,109,93,104,102,0,90,88],
[111,112,102,122,102,116,103,121,0,113],
[106,113,104,131,105,104,106,123,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,96,100,114,110,90,92,106,100],
[96,0,95,102,102,120,100,101,103,101],
[115,116,0,114,112,123,115,102,115,117],
[111,109,97,0,101,115,107,103,112,113],
[97,109,99,110,0,121,106,109,110,98],
[101,91,88,96,90,0,96,98,101,93],
[121,111,96,104,105,115,0,88,103,113],
[119,110,109,108,102,113,123,0,122,112],
[105,108,96,99,101,110,108,89,0,99],
[111,110,94,98,113,118,98,99,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,101,94,104,111,100,102,110,102],
[102,0,94,86,96,97,89,112,99,101],
[110,117,0,98,114,101,108,93,101,93],
[117,125,113,0,126,100,104,115,102,108],
[107,115,97,85,0,105,94,101,106,89],
[100,114,110,111,106,0,99,107,98,111],
[111,122,103,107,117,112,0,120,102,109],
[109,99,118,96,110,104,91,0,103,99],
[101,112,110,109,105,113,109,108,0,105],
[109,110,118,103,122,100,102,112,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,112,117,119,112,117,114,139,116],
[117,0,139,115,114,108,102,118,95,116],
[99,72,0,97,90,92,80,88,96,84],
[94,96,114,0,111,104,98,122,98,110],
[92,97,121,100,0,95,109,106,84,106],
[99,103,119,107,116,0,126,128,111,105],
[94,109,131,113,102,85,0,110,112,106],
[97,93,123,89,105,83,101,0,90,115],
[72,116,115,113,127,100,99,121,0,113],
[95,95,127,101,105,106,105,96,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,112,117,117,119,112,106,104,111],
[91,0,120,111,122,123,113,93,100,106],
[99,91,0,118,106,99,94,95,88,109],
[94,100,93,0,97,107,84,89,107,98],
[94,89,105,114,0,104,91,97,104,91],
[92,88,112,104,107,0,93,93,90,113],
[99,98,117,127,120,118,0,95,111,114],
[105,118,116,122,114,118,116,0,106,112],
[107,111,123,104,107,121,100,105,0,119],
[100,105,102,113,120,98,97,99,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,85,103,102,84,107,95,87,89],
[109,0,100,101,97,96,102,108,104,109],
[126,111,0,98,87,93,103,115,112,106],
[108,110,113,0,99,93,98,94,105,95],
[109,114,124,112,0,104,110,120,116,120],
[127,115,118,118,107,0,117,122,96,109],
[104,109,108,113,101,94,0,87,119,103],
[116,103,96,117,91,89,124,0,108,100],
[124,107,99,106,95,115,92,103,0,95],
[122,102,105,116,91,102,108,111,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,106,112,100,98,121,117,104,118],
[102,0,114,104,111,96,117,114,104,120],
[105,97,0,98,102,91,116,103,104,104],
[99,107,113,0,113,107,118,116,109,116],
[111,100,109,98,0,95,109,112,106,115],
[113,115,120,104,116,0,121,122,116,126],
[90,94,95,93,102,90,0,112,99,104],
[94,97,108,95,99,89,99,0,96,117],
[107,107,107,102,105,95,112,115,0,125],
[93,91,107,95,96,85,107,94,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,115,108,96,98,110,110,101,109],
[104,0,105,105,99,102,104,98,99,111],
[96,106,0,112,107,99,100,100,104,108],
[103,106,99,0,95,101,91,94,92,111],
[115,112,104,116,0,91,112,106,99,104],
[113,109,112,110,120,0,105,108,121,115],
[101,107,111,120,99,106,0,112,99,120],
[101,113,111,117,105,103,99,0,109,109],
[110,112,107,119,112,90,112,102,0,114],
[102,100,103,100,107,96,91,102,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,96,130,121,105,133,130,123,93],
[100,0,101,114,103,112,125,120,107,107],
[115,110,0,124,117,111,127,127,86,101],
[81,97,87,0,93,90,112,114,90,98],
[90,108,94,118,0,96,112,122,91,93],
[106,99,100,121,115,0,132,129,113,111],
[78,86,84,99,99,79,0,105,85,83],
[81,91,84,97,89,82,106,0,90,86],
[88,104,125,121,120,98,126,121,0,121],
[118,104,110,113,118,100,128,125,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,89,95,108,108,96,89,92,100],
[106,0,91,95,111,97,96,86,88,99],
[122,120,0,107,101,109,99,111,104,96],
[116,116,104,0,116,126,119,104,105,100],
[103,100,110,95,0,111,90,101,86,99],
[103,114,102,85,100,0,94,89,102,102],
[115,115,112,92,121,117,0,107,106,100],
[122,125,100,107,110,122,104,0,109,124],
[119,123,107,106,125,109,105,102,0,111],
[111,112,115,111,112,109,111,87,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,107,110,112,91,94,110,90,121],
[114,0,120,100,104,93,114,96,88,120],
[104,91,0,93,85,93,100,104,100,106],
[101,111,118,0,103,99,100,87,114,92],
[99,107,126,108,0,110,97,100,98,108],
[120,118,118,112,101,0,105,118,92,118],
[117,97,111,111,114,106,0,106,115,105],
[101,115,107,124,111,93,105,0,112,109],
[121,123,111,97,113,119,96,99,0,95],
[90,91,105,119,103,93,106,102,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,96,116,105,101,113,104,98,99],
[105,0,101,113,107,107,116,99,100,110],
[115,110,0,105,105,98,104,109,115,113],
[95,98,106,0,100,100,103,103,108,102],
[106,104,106,111,0,109,105,91,100,104],
[110,104,113,111,102,0,107,120,97,118],
[98,95,107,108,106,104,0,100,113,112],
[107,112,102,108,120,91,111,0,110,129],
[113,111,96,103,111,114,98,101,0,113],
[112,101,98,109,107,93,99,82,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,105,99,108,98,90,122,98,99],
[119,0,110,118,121,108,115,124,114,105],
[106,101,0,110,108,97,93,114,101,92],
[112,93,101,0,105,101,106,118,105,98],
[103,90,103,106,0,105,97,111,99,102],
[113,103,114,110,106,0,110,122,107,103],
[121,96,118,105,114,101,0,134,111,109],
[89,87,97,93,100,89,77,0,90,82],
[113,97,110,106,112,104,100,121,0,110],
[112,106,119,113,109,108,102,129,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,106,113,96,98,112,109,98],
[106,0,103,101,95,92,100,104,104,100],
[105,108,0,104,115,97,98,126,110,109],
[105,110,107,0,101,93,93,107,98,110],
[98,116,96,110,0,106,97,102,95,106],
[115,119,114,118,105,0,104,114,108,110],
[113,111,113,118,114,107,0,116,104,107],
[99,107,85,104,109,97,95,0,101,98],
[102,107,101,113,116,103,107,110,0,102],
[113,111,102,101,105,101,104,113,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,116,98,162,114,105,88,81,94],
[128,0,124,106,120,129,86,114,95,112],
[95,87,0,86,103,97,119,111,119,95],
[113,105,125,0,137,119,111,100,105,120],
[49,91,108,74,0,72,106,72,82,69],
[97,82,114,92,139,0,105,96,107,106],
[106,125,92,100,105,106,0,115,107,96],
[123,97,100,111,139,115,96,0,107,104],
[130,116,92,106,129,104,104,104,0,111],
[117,99,116,91,142,105,115,107,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,94,111,108,108,127,140,119,118],
[90,0,88,103,69,97,101,130,94,74],
[117,123,0,111,97,130,131,153,106,109],
[100,108,100,0,97,129,105,126,109,94],
[103,142,114,114,0,119,121,128,122,109],
[103,114,81,82,92,0,91,104,110,81],
[84,110,80,106,90,120,0,111,95,72],
[71,81,58,85,83,107,100,0,87,66],
[92,117,105,102,89,101,116,124,0,75],
[93,137,102,117,102,130,139,145,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,123,117,108,99,123,145,108,138],
[71,0,87,74,89,65,87,90,88,114],
[88,124,0,73,97,83,87,114,104,139],
[94,137,138,0,121,104,122,115,114,141],
[103,122,114,90,0,113,126,137,91,130],
[112,146,128,107,98,0,129,113,113,129],
[88,124,124,89,85,82,0,85,99,131],
[66,121,97,96,74,98,126,0,90,140],
[103,123,107,97,120,98,112,121,0,140],
[73,97,72,70,81,82,80,71,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,118,124,110,122,119,113,113,100],
[101,0,112,111,110,107,112,97,101,92],
[93,99,0,116,97,97,100,104,101,106],
[87,100,95,0,103,102,99,102,96,95],
[101,101,114,108,0,123,112,90,107,92],
[89,104,114,109,88,0,105,91,100,94],
[92,99,111,112,99,106,0,104,107,83],
[98,114,107,109,121,120,107,0,90,112],
[98,110,110,115,104,111,104,121,0,103],
[111,119,105,116,119,117,128,99,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,97,94,92,107,98,107,99,114],
[109,0,108,112,101,114,114,115,106,108],
[114,103,0,108,112,123,112,111,118,122],
[117,99,103,0,105,111,102,119,111,111],
[119,110,99,106,0,118,116,115,114,113],
[104,97,88,100,93,0,103,111,102,110],
[113,97,99,109,95,108,0,112,103,117],
[104,96,100,92,96,100,99,0,101,107],
[112,105,93,100,97,109,108,110,0,110],
[97,103,89,100,98,101,94,104,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,116,107,123,108,93,109,125,102],
[108,0,107,89,104,116,93,100,106,84],
[95,104,0,88,114,109,100,106,106,106],
[104,122,123,0,113,114,110,114,121,117],
[88,107,97,98,0,107,74,106,91,96],
[103,95,102,97,104,0,90,93,108,110],
[118,118,111,101,137,121,0,115,116,110],
[102,111,105,97,105,118,96,0,118,102],
[86,105,105,90,120,103,95,93,0,106],
[109,127,105,94,115,101,101,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,120,116,107,112,118,92,107,100],
[107,0,116,99,102,107,112,97,102,96],
[91,95,0,109,102,98,107,91,100,95],
[95,112,102,0,99,103,99,86,101,90],
[104,109,109,112,0,110,112,108,108,104],
[99,104,113,108,101,0,101,90,112,91],
[93,99,104,112,99,110,0,90,106,94],
[119,114,120,125,103,121,121,0,103,113],
[104,109,111,110,103,99,105,108,0,105],
[111,115,116,121,107,120,117,98,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,121,112,96,105,109,101,99],
[107,0,113,109,109,97,105,113,106,103],
[103,98,0,118,101,101,120,107,102,104],
[90,102,93,0,95,88,91,97,92,95],
[99,102,110,116,0,99,113,107,112,109],
[115,114,110,123,112,0,119,96,110,98],
[106,106,91,120,98,92,0,104,99,101],
[102,98,104,114,104,115,107,0,90,96],
[110,105,109,119,99,101,112,121,0,106],
[112,108,107,116,102,113,110,115,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,107,119,104,108,119,110,109,111],
[97,0,102,100,102,102,102,97,118,102],
[104,109,0,111,106,106,88,109,118,119],
[92,111,100,0,105,105,91,118,118,110],
[107,109,105,106,0,107,96,114,128,114],
[103,109,105,106,104,0,102,107,118,111],
[92,109,123,120,115,109,0,111,117,115],
[101,114,102,93,97,104,100,0,104,98],
[102,93,93,93,83,93,94,107,0,93],
[100,109,92,101,97,100,96,113,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,121,143,165,144,92,143,164,143],
[92,0,73,94,165,98,69,69,188,118],
[90,138,0,47,138,166,114,117,164,162],
[68,117,164,0,117,144,92,92,142,115],
[46,46,73,94,0,121,47,46,97,70],
[67,113,45,67,90,0,67,45,138,113],
[119,142,97,119,164,144,0,120,142,120],
[68,142,94,119,165,166,91,0,165,142],
[47,23,47,69,114,73,69,46,0,70],
[68,93,49,96,141,98,91,69,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,94,116,96,109,105,106,94,105],
[104,0,103,110,115,102,111,101,101,104],
[117,108,0,107,110,103,109,104,106,99],
[95,101,104,0,88,94,96,88,84,90],
[115,96,101,123,0,95,99,108,102,101],
[102,109,108,117,116,0,107,116,98,107],
[106,100,102,115,112,104,0,98,97,102],
[105,110,107,123,103,95,113,0,99,96],
[117,110,105,127,109,113,114,112,0,112],
[106,107,112,121,110,104,109,115,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,118,105,109,122,122,111,105,113],
[98,0,112,97,102,112,117,99,101,101],
[93,99,0,105,96,111,109,116,99,102],
[106,114,106,0,108,109,109,103,107,103],
[102,109,115,103,0,111,122,109,111,114],
[89,99,100,102,100,0,110,97,103,95],
[89,94,102,102,89,101,0,97,99,94],
[100,112,95,108,102,114,114,0,105,95],
[106,110,112,104,100,108,112,106,0,96],
[98,110,109,108,97,116,117,116,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,106,107,101,91,94,95,95,105],
[104,0,127,107,109,107,98,107,108,116],
[105,84,0,101,86,99,92,98,100,102],
[104,104,110,0,105,107,116,90,96,111],
[110,102,125,106,0,117,109,108,109,114],
[120,104,112,104,94,0,105,107,90,104],
[117,113,119,95,102,106,0,107,114,104],
[116,104,113,121,103,104,104,0,110,114],
[116,103,111,115,102,121,97,101,0,117],
[106,95,109,100,97,107,107,97,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,96,117,112,118,106,129,102],
[111,0,96,110,106,104,102,115,119,93],
[109,115,0,104,107,120,92,109,118,94],
[115,101,107,0,114,103,99,105,119,102],
[94,105,104,97,0,100,89,106,115,90],
[99,107,91,108,111,0,105,111,116,107],
[93,109,119,112,122,106,0,112,124,100],
[105,96,102,106,105,100,99,0,114,102],
[82,92,93,92,96,95,87,97,0,87],
[109,118,117,109,121,104,111,109,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,0,0,0,0,0,0,71],
[211,0,142,0,71,71,211,142,71,71],
[211,69,0,69,69,69,140,140,69,140],
[211,211,142,0,71,140,211,142,142,211],
[211,140,142,140,0,69,211,140,71,211],
[211,140,142,71,142,0,211,142,71,211],
[211,0,71,0,0,0,0,71,0,71],
[211,69,71,69,71,69,140,0,0,140],
[211,140,142,69,140,140,211,211,0,140],
[140,140,71,0,0,0,140,71,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,113,113,105,102,101,94,97,116],
[107,0,96,105,120,97,106,117,101,114],
[98,115,0,96,117,99,122,96,96,128],
[98,106,115,0,127,105,109,123,104,123],
[106,91,94,84,0,101,92,99,93,108],
[109,114,112,106,110,0,101,87,105,104],
[110,105,89,102,119,110,0,102,94,112],
[117,94,115,88,112,124,109,0,107,107],
[114,110,115,107,118,106,117,104,0,113],
[95,97,83,88,103,107,99,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,97,117,101,97,106,86,95,94],
[114,0,111,106,96,107,126,111,108,112],
[114,100,0,122,115,113,117,116,108,110],
[94,105,89,0,107,101,104,96,98,95],
[110,115,96,104,0,103,111,109,103,85],
[114,104,98,110,108,0,108,104,93,95],
[105,85,94,107,100,103,0,99,95,90],
[125,100,95,115,102,107,112,0,102,97],
[116,103,103,113,108,118,116,109,0,94],
[117,99,101,116,126,116,121,114,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,111,102,99,87,115,74,81,107],
[114,0,122,125,104,94,111,111,88,110],
[100,89,0,104,94,87,110,85,92,99],
[109,86,107,0,96,106,103,89,94,117],
[112,107,117,115,0,93,108,87,103,99],
[124,117,124,105,118,0,118,103,110,103],
[96,100,101,108,103,93,0,94,93,102],
[137,100,126,122,124,108,117,0,94,111],
[130,123,119,117,108,101,118,117,0,130],
[104,101,112,94,112,108,109,100,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,91,99,90,99,82,95,91,103],
[115,0,103,122,119,130,87,132,119,149],
[120,108,0,109,126,105,103,98,111,125],
[112,89,102,0,115,100,77,130,93,144],
[121,92,85,96,0,94,78,118,106,126],
[112,81,106,111,117,0,113,144,113,150],
[129,124,108,134,133,98,0,131,135,155],
[116,79,113,81,93,67,80,0,88,110],
[120,92,100,118,105,98,76,123,0,135],
[108,62,86,67,85,61,56,101,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,115,122,102,117,118,113,119,111],
[97,0,118,107,106,117,115,105,114,99],
[96,93,0,106,102,103,103,98,107,89],
[89,104,105,0,102,108,114,106,115,108],
[109,105,109,109,0,118,94,107,106,99],
[94,94,108,103,93,0,108,97,106,93],
[93,96,108,97,117,103,0,112,114,95],
[98,106,113,105,104,114,99,0,114,100],
[92,97,104,96,105,105,97,97,0,86],
[100,112,122,103,112,118,116,111,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,113,110,101,101,112,109,99,83],
[110,0,113,108,108,102,110,104,103,94],
[98,98,0,104,89,95,112,105,102,101],
[101,103,107,0,85,102,105,110,103,101],
[110,103,122,126,0,115,129,125,111,108],
[110,109,116,109,96,0,109,116,94,93],
[99,101,99,106,82,102,0,106,99,86],
[102,107,106,101,86,95,105,0,97,85],
[112,108,109,108,100,117,112,114,0,99],
[128,117,110,110,103,118,125,126,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,104,94,98,108,100,93,100,90],
[121,0,100,104,112,107,108,102,103,109],
[107,111,0,96,106,112,100,103,94,99],
[117,107,115,0,106,115,115,100,112,117],
[113,99,105,105,0,110,111,104,98,100],
[103,104,99,96,101,0,111,108,98,101],
[111,103,111,96,100,100,0,100,95,103],
[118,109,108,111,107,103,111,0,100,105],
[111,108,117,99,113,113,116,111,0,97],
[121,102,112,94,111,110,108,106,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,98,92,101,113,101,114,88,107],
[109,0,103,96,96,95,105,106,96,101],
[113,108,0,104,111,101,101,95,117,107],
[119,115,107,0,106,105,107,109,102,103],
[110,115,100,105,0,100,108,110,94,108],
[98,116,110,106,111,0,101,105,102,110],
[110,106,110,104,103,110,0,109,109,110],
[97,105,116,102,101,106,102,0,104,101],
[123,115,94,109,117,109,102,107,0,115],
[104,110,104,108,103,101,101,110,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,93,91,96,98,98,120,103,129],
[113,0,106,95,97,110,96,117,104,96],
[118,105,0,100,119,101,112,122,115,110],
[120,116,111,0,107,115,102,134,104,126],
[115,114,92,104,0,108,95,128,113,122],
[113,101,110,96,103,0,91,122,110,120],
[113,115,99,109,116,120,0,128,114,114],
[91,94,89,77,83,89,83,0,92,94],
[108,107,96,107,98,101,97,119,0,101],
[82,115,101,85,89,91,97,117,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,109,123,133,132,122,104,119,125],
[117,0,110,129,137,118,124,97,123,120],
[102,101,0,123,116,126,120,114,117,109],
[88,82,88,0,122,118,111,105,114,87],
[78,74,95,89,0,87,90,93,92,92],
[79,93,85,93,124,0,107,89,116,114],
[89,87,91,100,121,104,0,92,103,133],
[107,114,97,106,118,122,119,0,116,107],
[92,88,94,97,119,95,108,95,0,99],
[86,91,102,124,119,97,78,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,114,106,115,101,104,115,100,116],
[100,0,110,108,106,103,123,118,107,107],
[97,101,0,110,102,105,119,115,97,96],
[105,103,101,0,103,111,121,118,110,108],
[96,105,109,108,0,105,104,119,93,111],
[110,108,106,100,106,0,102,113,96,106],
[107,88,92,90,107,109,0,102,98,104],
[96,93,96,93,92,98,109,0,85,107],
[111,104,114,101,118,115,113,126,0,116],
[95,104,115,103,100,105,107,104,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,133,130,106,105,54,131,160,131],
[51,0,52,51,52,51,52,78,53,52],
[78,159,0,130,104,79,79,104,133,131],
[81,160,81,0,80,27,54,105,107,106],
[105,159,107,131,0,80,106,104,160,131],
[106,160,132,184,131,0,106,131,160,105],
[157,159,132,157,105,105,0,157,106,157],
[80,133,107,106,107,80,54,0,107,131],
[51,158,78,104,51,51,105,104,0,51],
[80,159,80,105,80,106,54,80,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,96,99,105,112,100,103,111],
[100,0,112,105,113,115,99,109,119,112],
[102,99,0,110,109,94,116,105,110,116],
[115,106,101,0,109,108,110,119,106,115],
[112,98,102,102,0,112,108,122,104,115],
[106,96,117,103,99,0,103,113,108,113],
[99,112,95,101,103,108,0,110,93,97],
[111,102,106,92,89,98,101,0,93,107],
[108,92,101,105,107,103,118,118,0,113],
[100,99,95,96,96,98,114,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,111,119,104,106,106,100,119,116],
[117,0,113,123,113,113,103,106,115,115],
[100,98,0,120,106,96,97,100,99,109],
[92,88,91,0,103,97,91,93,101,108],
[107,98,105,108,0,99,97,99,107,112],
[105,98,115,114,112,0,101,107,102,116],
[105,108,114,120,114,110,0,108,105,113],
[111,105,111,118,112,104,103,0,112,104],
[92,96,112,110,104,109,106,99,0,113],
[95,96,102,103,99,95,98,107,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,134,89,97,103,95,86,80,100],
[118,0,163,103,125,104,121,117,105,91],
[77,48,0,74,60,78,70,75,75,63],
[122,108,137,0,132,112,138,118,92,113],
[114,86,151,79,0,91,96,110,91,104],
[108,107,133,99,120,0,103,94,89,81],
[116,90,141,73,115,108,0,99,101,97],
[125,94,136,93,101,117,112,0,93,71],
[131,106,136,119,120,122,110,118,0,103],
[111,120,148,98,107,130,114,140,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,131,115,129,95,111,91,76,130],
[111,0,115,145,114,100,98,110,105,134],
[80,96,0,142,96,104,121,112,103,146],
[96,66,69,0,98,71,79,75,101,97],
[82,97,115,113,0,92,92,99,83,140],
[116,111,107,140,119,0,114,100,122,98],
[100,113,90,132,119,97,0,106,99,106],
[120,101,99,136,112,111,105,0,115,129],
[135,106,108,110,128,89,112,96,0,127],
[81,77,65,114,71,113,105,82,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,122,104,108,117,99,111,101,124],
[97,0,103,87,102,105,108,99,96,105],
[89,108,0,92,86,114,100,96,108,114],
[107,124,119,0,99,130,125,102,99,123],
[103,109,125,112,0,131,114,129,130,129],
[94,106,97,81,80,0,101,96,87,105],
[112,103,111,86,97,110,0,108,100,120],
[100,112,115,109,82,115,103,0,110,125],
[110,115,103,112,81,124,111,101,0,124],
[87,106,97,88,82,106,91,86,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,96,67,109,75,55,122,81,69],
[132,0,146,107,120,86,94,134,96,81],
[115,65,0,52,90,61,91,105,105,65],
[144,104,159,0,133,116,92,145,116,92],
[102,91,121,78,0,48,92,106,106,52],
[136,125,150,95,163,0,109,150,109,124],
[156,117,120,119,119,102,0,120,145,117],
[89,77,106,66,105,61,91,0,89,52],
[130,115,106,95,105,102,66,122,0,82],
[142,130,146,119,159,87,94,159,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,100,113,110,116,127,108,112,97],
[102,0,104,104,116,98,115,99,110,107],
[111,107,0,104,102,111,124,118,121,100],
[98,107,107,0,102,102,110,104,109,93],
[101,95,109,109,0,105,115,106,125,108],
[95,113,100,109,106,0,120,113,110,87],
[84,96,87,101,96,91,0,89,103,96],
[103,112,93,107,105,98,122,0,111,101],
[99,101,90,102,86,101,108,100,0,94],
[114,104,111,118,103,124,115,110,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,103,114,104,112,114,99,103,102],
[110,0,93,104,115,104,116,102,114,106],
[108,118,0,109,111,104,127,109,111,102],
[97,107,102,0,105,106,102,104,103,108],
[107,96,100,106,0,116,116,90,108,100],
[99,107,107,105,95,0,113,85,104,97],
[97,95,84,109,95,98,0,91,98,96],
[112,109,102,107,121,126,120,0,110,104],
[108,97,100,108,103,107,113,101,0,108],
[109,105,109,103,111,114,115,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,103,112,99,105,95,114,112,114],
[113,0,90,113,105,110,111,114,117,111],
[108,121,0,129,88,118,114,112,113,118],
[99,98,82,0,108,123,94,95,100,109],
[112,106,123,103,0,131,100,107,111,122],
[106,101,93,88,80,0,90,88,100,110],
[116,100,97,117,111,121,0,100,129,110],
[97,97,99,116,104,123,111,0,112,107],
[99,94,98,111,100,111,82,99,0,96],
[97,100,93,102,89,101,101,104,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,89,107,104,96,90,95,95,89],
[115,0,123,125,111,104,97,113,117,119],
[122,88,0,119,121,109,101,105,117,113],
[104,86,92,0,97,95,93,103,90,99],
[107,100,90,114,0,105,92,102,109,110],
[115,107,102,116,106,0,101,101,108,114],
[121,114,110,118,119,110,0,102,115,112],
[116,98,106,108,109,110,109,0,120,118],
[116,94,94,121,102,103,96,91,0,104],
[122,92,98,112,101,97,99,93,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,118,105,101,105,97,97,108,102],
[103,0,111,108,101,109,101,98,112,103],
[93,100,0,89,90,103,95,90,105,102],
[106,103,122,0,98,110,105,107,111,107],
[110,110,121,113,0,113,100,101,111,103],
[106,102,108,101,98,0,104,104,106,115],
[114,110,116,106,111,107,0,102,109,104],
[114,113,121,104,110,107,109,0,105,112],
[103,99,106,100,100,105,102,106,0,97],
[109,108,109,104,108,96,107,99,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,121,103,113,99,108,110,97,112],
[111,0,133,111,131,112,122,105,121,115],
[90,78,0,86,100,99,112,87,100,95],
[108,100,125,0,123,109,141,125,103,99],
[98,80,111,88,0,108,119,93,81,85],
[112,99,112,102,103,0,124,100,108,111],
[103,89,99,70,92,87,0,99,90,93],
[101,106,124,86,118,111,112,0,102,105],
[114,90,111,108,130,103,121,109,0,96],
[99,96,116,112,126,100,118,106,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,101,104,95,107,94,99,94],
[110,0,108,111,106,100,120,101,103,104],
[114,103,0,98,108,96,106,100,109,106],
[110,100,113,0,106,91,109,101,108,94],
[107,105,103,105,0,100,109,108,110,106],
[116,111,115,120,111,0,113,113,105,104],
[104,91,105,102,102,98,0,98,95,96],
[117,110,111,110,103,98,113,0,104,103],
[112,108,102,103,101,106,116,107,0,98],
[117,107,105,117,105,107,115,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,95,95,105,103,88,93,105,97],
[108,0,96,103,104,107,93,112,115,83],
[116,115,0,105,117,95,91,112,118,94],
[116,108,106,0,121,103,107,115,122,110],
[106,107,94,90,0,96,101,115,106,88],
[108,104,116,108,115,0,97,112,115,107],
[123,118,120,104,110,114,0,116,124,102],
[118,99,99,96,96,99,95,0,110,99],
[106,96,93,89,105,96,87,101,0,94],
[114,128,117,101,123,104,109,112,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,83,100,103,88,93,105,99,119],
[116,0,98,91,108,102,104,117,129,117],
[128,113,0,119,120,103,100,111,126,126],
[111,120,92,0,125,114,115,111,125,115],
[108,103,91,86,0,74,95,95,101,105],
[123,109,108,97,137,0,112,120,119,113],
[118,107,111,96,116,99,0,128,136,116],
[106,94,100,100,116,91,83,0,122,110],
[112,82,85,86,110,92,75,89,0,92],
[92,94,85,96,106,98,95,101,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,115,105,100,96,106,103,106],
[105,0,121,106,102,107,101,100,111,103],
[105,90,0,105,108,90,95,113,104,92],
[96,105,106,0,101,93,85,93,97,88],
[106,109,103,110,0,105,92,110,109,100],
[111,104,121,118,106,0,107,102,113,100],
[115,110,116,126,119,104,0,123,113,112],
[105,111,98,118,101,109,88,0,110,91],
[108,100,107,114,102,98,98,101,0,102],
[105,108,119,123,111,111,99,120,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,105,104,95,104,89,97,116,93],
[116,0,105,113,108,113,103,105,122,108],
[106,106,0,105,109,110,106,103,116,108],
[107,98,106,0,113,119,104,98,115,108],
[116,103,102,98,0,111,103,106,116,99],
[107,98,101,92,100,0,98,104,113,101],
[122,108,105,107,108,113,0,101,116,113],
[114,106,108,113,105,107,110,0,114,109],
[95,89,95,96,95,98,95,97,0,100],
[118,103,103,103,112,110,98,102,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,115,91,93,117,105,121,103,108],
[88,0,118,91,107,107,86,113,92,84],
[96,93,0,100,88,90,87,97,103,81],
[120,120,111,0,104,111,108,105,101,113],
[118,104,123,107,0,117,98,122,111,99],
[94,104,121,100,94,0,90,109,105,102],
[106,125,124,103,113,121,0,122,113,110],
[90,98,114,106,89,102,89,0,94,104],
[108,119,108,110,100,106,98,117,0,83],
[103,127,130,98,112,109,101,107,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,95,106,105,117,117,103,128,128],
[94,0,85,129,141,93,95,126,107,80],
[116,126,0,117,92,104,80,126,103,80],
[105,82,94,0,115,82,80,91,80,127],
[106,70,119,96,0,47,107,103,107,105],
[94,118,107,129,164,0,116,126,118,104],
[94,116,131,131,104,95,0,139,106,95],
[108,85,85,120,108,85,72,0,106,71],
[83,104,108,131,104,93,105,105,0,105],
[83,131,131,84,106,107,116,140,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,111,110,125,96,95,83,127],
[107,0,105,108,94,111,106,96,97,113],
[105,106,0,108,102,115,97,95,100,111],
[100,103,103,0,90,120,95,102,91,101],
[101,117,109,121,0,118,112,109,103,125],
[86,100,96,91,93,0,88,102,97,112],
[115,105,114,116,99,123,0,99,110,122],
[116,115,116,109,102,109,112,0,114,123],
[128,114,111,120,108,114,101,97,0,117],
[84,98,100,110,86,99,89,88,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,115,124,117,110,116,123,124,127],
[110,0,98,115,125,128,126,134,126,128],
[96,113,0,118,116,99,115,106,114,103],
[87,96,93,0,83,80,100,104,107,88],
[94,86,95,128,0,105,105,107,107,109],
[101,83,112,131,106,0,105,110,113,100],
[95,85,96,111,106,106,0,108,101,97],
[88,77,105,107,104,101,103,0,118,98],
[87,85,97,104,104,98,110,93,0,85],
[84,83,108,123,102,111,114,113,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,117,96,108,115,106,94,117,110],
[111,0,109,100,91,98,100,90,107,97],
[94,102,0,107,93,106,99,86,109,101],
[115,111,104,0,94,104,112,106,114,113],
[103,120,118,117,0,119,127,114,127,115],
[96,113,105,107,92,0,117,95,111,104],
[105,111,112,99,84,94,0,93,100,104],
[117,121,125,105,97,116,118,0,129,114],
[94,104,102,97,84,100,111,82,0,107],
[101,114,110,98,96,107,107,97,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,127,108,115,106,105,114,114,118],
[108,0,112,117,93,113,111,109,109,117],
[84,99,0,108,95,83,103,110,108,104],
[103,94,103,0,106,98,106,99,93,108],
[96,118,116,105,0,101,116,117,113,125],
[105,98,128,113,110,0,108,112,104,111],
[106,100,108,105,95,103,0,115,105,122],
[97,102,101,112,94,99,96,0,103,98],
[97,102,103,118,98,107,106,108,0,121],
[93,94,107,103,86,100,89,113,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,96,97,98,91,99,103,91,109],
[119,0,108,109,121,109,121,121,104,114],
[115,103,0,114,112,115,98,104,97,112],
[114,102,97,0,115,110,98,97,98,111],
[113,90,99,96,0,105,94,104,95,105],
[120,102,96,101,106,0,113,113,97,110],
[112,90,113,113,117,98,0,111,98,122],
[108,90,107,114,107,98,100,0,113,105],
[120,107,114,113,116,114,113,98,0,116],
[102,97,99,100,106,101,89,106,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,102,110,110,105,98,119,101],
[110,0,101,91,114,102,110,104,107,93],
[113,110,0,104,126,113,119,118,119,106],
[109,120,107,0,119,109,118,102,115,104],
[101,97,85,92,0,92,103,98,103,88],
[101,109,98,102,119,0,111,113,119,97],
[106,101,92,93,108,100,0,107,102,93],
[113,107,93,109,113,98,104,0,116,100],
[92,104,92,96,108,92,109,95,0,93],
[110,118,105,107,123,114,118,111,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,114,113,106,107,108,103,113],
[107,0,100,114,106,108,101,110,111,110],
[107,111,0,117,111,113,105,101,108,105],
[97,97,94,0,94,94,99,106,96,94],
[98,105,100,117,0,101,89,100,99,110],
[105,103,98,117,110,0,104,110,114,109],
[104,110,106,112,122,107,0,104,104,105],
[103,101,110,105,111,101,107,0,105,106],
[108,100,103,115,112,97,107,106,0,106],
[98,101,106,117,101,102,106,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,103,99,111,108,103,83,93,89],
[130,0,103,114,93,122,111,78,102,98],
[108,108,0,126,111,126,91,99,92,89],
[112,97,85,0,102,81,112,86,112,72],
[100,118,100,109,0,108,99,108,101,96],
[103,89,85,130,103,0,113,101,104,97],
[108,100,120,99,112,98,0,94,120,89],
[128,133,112,125,103,110,117,0,139,126],
[118,109,119,99,110,107,91,72,0,100],
[122,113,122,139,115,114,122,85,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,90,114,115,125,93,104,96,101],
[111,0,100,102,125,116,94,103,95,93],
[121,111,0,117,114,121,109,114,106,102],
[97,109,94,0,98,106,102,98,105,97],
[96,86,97,113,0,103,89,98,96,92],
[86,95,90,105,108,0,106,97,99,85],
[118,117,102,109,122,105,0,112,112,101],
[107,108,97,113,113,114,99,0,111,108],
[115,116,105,106,115,112,99,100,0,97],
[110,118,109,114,119,126,110,103,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,98,86,97,101,107,105,88],
[106,0,105,113,100,100,106,99,117,87],
[113,106,0,80,89,96,106,89,97,84],
[113,98,131,0,91,102,120,110,107,104],
[125,111,122,120,0,131,122,122,120,101],
[114,111,115,109,80,0,105,109,103,96],
[110,105,105,91,89,106,0,99,92,90],
[104,112,122,101,89,102,112,0,103,107],
[106,94,114,104,91,108,119,108,0,94],
[123,124,127,107,110,115,121,104,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,131,121,101,105,85,86,107],
[101,0,108,120,121,113,118,97,106,103],
[107,103,0,128,125,107,132,91,92,96],
[80,91,83,0,81,74,84,69,56,75],
[90,90,86,130,0,81,106,58,62,89],
[110,98,104,137,130,0,130,86,105,114],
[106,93,79,127,105,81,0,92,86,85],
[126,114,120,142,153,125,119,0,103,117],
[125,105,119,155,149,106,125,108,0,94],
[104,108,115,136,122,97,126,94,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,107,89,98,108,109,108,99,88],
[135,0,117,118,109,118,119,126,99,127],
[104,94,0,108,97,106,97,116,108,96],
[122,93,103,0,103,104,107,122,104,122],
[113,102,114,108,0,107,118,105,125,134],
[103,93,105,107,104,0,105,115,116,104],
[102,92,114,104,93,106,0,114,104,113],
[103,85,95,89,106,96,97,0,97,125],
[112,112,103,107,86,95,107,114,0,104],
[123,84,115,89,77,107,98,86,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,108,130,134,122,115,121,94,103],
[98,0,97,105,119,112,118,92,125,86],
[103,114,0,102,145,109,106,105,87,71],
[81,106,109,0,101,93,86,93,83,98],
[77,92,66,110,0,88,103,98,68,67],
[89,99,102,118,123,0,106,107,110,91],
[96,93,105,125,108,105,0,102,96,111],
[90,119,106,118,113,104,109,0,114,103],
[117,86,124,128,143,101,115,97,0,75],
[108,125,140,113,144,120,100,108,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,104,114,104,111,113,118,106],
[101,0,109,115,116,106,114,117,113,110],
[101,102,0,106,102,103,104,99,112,103],
[107,96,105,0,112,103,113,102,109,109],
[97,95,109,99,0,99,102,91,112,92],
[107,105,108,108,112,0,107,111,113,118],
[100,97,107,98,109,104,0,101,107,102],
[98,94,112,109,120,100,110,0,116,103],
[93,98,99,102,99,98,104,95,0,98],
[105,101,108,102,119,93,109,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,67,101,87,91,116,112,117,87],
[93,0,87,118,105,102,103,118,128,110],
[144,124,0,133,110,107,127,126,102,137],
[110,93,78,0,101,89,117,99,112,112],
[124,106,101,110,0,106,98,87,103,114],
[120,109,104,122,105,0,114,97,108,122],
[95,108,84,94,113,97,0,91,99,107],
[99,93,85,112,124,114,120,0,99,100],
[94,83,109,99,108,103,112,112,0,113],
[124,101,74,99,97,89,104,111,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,56,89,97,79,72,97,101,92],
[121,0,114,77,121,100,105,110,121,104],
[155,97,0,131,96,136,141,120,131,120],
[122,134,80,0,114,112,102,120,101,79],
[114,90,115,97,0,97,136,120,90,98],
[132,111,75,99,114,0,100,104,109,106],
[139,106,70,109,75,111,0,101,121,130],
[114,101,91,91,91,107,110,0,100,100],
[110,90,80,110,121,102,90,111,0,115],
[119,107,91,132,113,105,81,111,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,112,99,111,90,116,106,95,109],
[128,0,112,112,113,88,123,107,119,113],
[99,99,0,99,118,77,113,90,87,96],
[112,99,112,0,125,116,125,112,106,118],
[100,98,93,86,0,103,108,89,101,96],
[121,123,134,95,108,0,118,113,117,110],
[95,88,98,86,103,93,0,93,82,93],
[105,104,121,99,122,98,118,0,98,107],
[116,92,124,105,110,94,129,113,0,112],
[102,98,115,93,115,101,118,104,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,106,104,111,99,102,105,119],
[109,0,107,103,113,102,112,100,120,124],
[101,104,0,106,102,95,94,98,95,118],
[105,108,105,0,103,109,110,89,99,113],
[107,98,109,108,0,93,91,101,91,118],
[100,109,116,102,118,0,110,102,117,118],
[112,99,117,101,120,101,0,108,118,123],
[109,111,113,122,110,109,103,0,113,124],
[106,91,116,112,120,94,93,98,0,111],
[92,87,93,98,93,93,88,87,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,93,115,100,112,104,105,104,99],
[109,0,101,113,94,102,112,105,110,104],
[118,110,0,117,108,121,113,110,116,104],
[96,98,94,0,97,97,109,107,103,95],
[111,117,103,114,0,109,111,108,115,103],
[99,109,90,114,102,0,108,114,110,106],
[107,99,98,102,100,103,0,107,109,94],
[106,106,101,104,103,97,104,0,100,86],
[107,101,95,108,96,101,102,111,0,100],
[112,107,107,116,108,105,117,125,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,94,89,88,97,77,83,94,107],
[128,0,130,117,107,137,105,116,110,134],
[117,81,0,99,97,119,90,103,90,113],
[122,94,112,0,87,107,91,103,88,110],
[123,104,114,124,0,117,114,125,101,119],
[114,74,92,104,94,0,99,107,97,115],
[134,106,121,120,97,112,0,108,118,120],
[128,95,108,108,86,104,103,0,95,99],
[117,101,121,123,110,114,93,116,0,127],
[104,77,98,101,92,96,91,112,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,117,116,108,106,105,128,128,123],
[101,0,92,107,105,94,87,96,121,104],
[94,119,0,117,119,98,117,113,124,119],
[95,104,94,0,104,86,112,108,116,103],
[103,106,92,107,0,94,105,125,109,104],
[105,117,113,125,117,0,117,123,135,123],
[106,124,94,99,106,94,0,117,117,92],
[83,115,98,103,86,88,94,0,120,103],
[83,90,87,95,102,76,94,91,0,110],
[88,107,92,108,107,88,119,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,73,88,93,114,84,95,80,90],
[107,0,85,94,132,105,100,84,92,138],
[138,126,0,104,130,130,99,126,105,139],
[123,117,107,0,118,74,61,73,73,140],
[118,79,81,93,0,93,82,81,68,92],
[97,106,81,137,118,0,72,81,91,115],
[127,111,112,150,129,139,0,123,101,124],
[116,127,85,138,130,130,88,0,113,153],
[131,119,106,138,143,120,110,98,0,176],
[121,73,72,71,119,96,87,58,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,94,110,93,101,96,93,85,86],
[92,0,95,110,91,99,93,102,97,98],
[117,116,0,112,114,98,95,95,92,106],
[101,101,99,0,86,103,103,89,99,87],
[118,120,97,125,0,102,102,99,100,98],
[110,112,113,108,109,0,100,106,109,96],
[115,118,116,108,109,111,0,106,93,105],
[118,109,116,122,112,105,105,0,102,99],
[126,114,119,112,111,102,118,109,0,99],
[125,113,105,124,113,115,106,112,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,115,103,106,115,101,91,119,103],
[109,0,104,101,103,106,105,97,104,92],
[96,107,0,98,93,105,101,105,104,95],
[108,110,113,0,101,103,96,101,113,101],
[105,108,118,110,0,112,104,110,117,115],
[96,105,106,108,99,0,89,94,107,96],
[110,106,110,115,107,122,0,102,111,102],
[120,114,106,110,101,117,109,0,119,109],
[92,107,107,98,94,104,100,92,0,90],
[108,119,116,110,96,115,109,102,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,111,103,89,110,98,111,111,103],
[122,0,114,103,109,103,113,109,116,112],
[100,97,0,102,100,101,113,101,101,94],
[108,108,109,0,94,92,110,102,96,109],
[122,102,111,117,0,115,108,112,122,120],
[101,108,110,119,96,0,112,105,107,106],
[113,98,98,101,103,99,0,112,113,103],
[100,102,110,109,99,106,99,0,102,113],
[100,95,110,115,89,104,98,109,0,116],
[108,99,117,102,91,105,108,98,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,127,113,122,124,119,112,117,116],
[108,0,132,119,132,130,121,119,103,119],
[84,79,0,109,112,112,92,102,87,99],
[98,92,102,0,103,110,108,109,102,106],
[89,79,99,108,0,88,93,88,92,98],
[87,81,99,101,123,0,106,103,96,105],
[92,90,119,103,118,105,0,105,95,105],
[99,92,109,102,123,108,106,0,85,96],
[94,108,124,109,119,115,116,126,0,111],
[95,92,112,105,113,106,106,115,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,108,109,107,106,101,103,112,92],
[97,0,106,108,116,121,112,105,113,95],
[103,105,0,105,114,119,93,108,109,102],
[102,103,106,0,108,124,97,109,115,105],
[104,95,97,103,0,123,91,102,100,98],
[105,90,92,87,88,0,69,92,103,90],
[110,99,118,114,120,142,0,114,126,99],
[108,106,103,102,109,119,97,0,105,101],
[99,98,102,96,111,108,85,106,0,106],
[119,116,109,106,113,121,112,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,104,93,97,96,105,101,85,106],
[76,0,94,75,67,56,97,63,67,69],
[107,117,0,109,89,92,100,107,105,105],
[118,136,102,0,120,93,139,99,114,107],
[114,144,122,91,0,111,121,87,86,117],
[115,155,119,118,100,0,146,134,91,113],
[106,114,111,72,90,65,0,84,79,91],
[110,148,104,112,124,77,127,0,103,120],
[126,144,106,97,125,120,132,108,0,123],
[105,142,106,104,94,98,120,91,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,100,132,123,119,118,126,127,116],
[107,0,98,108,125,94,121,119,112,75],
[111,113,0,116,127,112,108,124,105,103],
[79,103,95,0,114,107,109,99,101,103],
[88,86,84,97,0,93,93,100,101,89],
[92,117,99,104,118,0,125,96,106,95],
[93,90,103,102,118,86,0,118,109,96],
[85,92,87,112,111,115,93,0,97,95],
[84,99,106,110,110,105,102,114,0,119],
[95,136,108,108,122,116,115,116,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,104,115,111,111,116,96,111],
[108,0,103,97,106,99,104,100,92,100],
[108,108,0,102,112,114,112,117,107,121],
[107,114,109,0,111,104,103,108,98,97],
[96,105,99,100,0,104,106,111,99,104],
[100,112,97,107,107,0,96,106,97,98],
[100,107,99,108,105,115,0,114,92,108],
[95,111,94,103,100,105,97,0,93,99],
[115,119,104,113,112,114,119,118,0,106],
[100,111,90,114,107,113,103,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,71,109,110,92,104,97,95,106],
[115,0,100,156,124,112,123,111,134,113],
[140,111,0,141,126,113,101,101,116,114],
[102,55,70,0,96,101,91,82,101,86],
[101,87,85,115,0,87,84,92,117,101],
[119,99,98,110,124,0,96,100,121,90],
[107,88,110,120,127,115,0,94,133,113],
[114,100,110,129,119,111,117,0,138,115],
[116,77,95,110,94,90,78,73,0,105],
[105,98,97,125,110,121,98,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,111,97,93,81,103,84,70,79],
[106,0,102,97,79,91,107,74,98,102],
[100,109,0,122,90,110,126,99,93,112],
[114,114,89,0,94,99,111,93,99,68],
[118,132,121,117,0,111,133,115,114,100],
[130,120,101,112,100,0,126,96,99,99],
[108,104,85,100,78,85,0,84,92,83],
[127,137,112,118,96,115,127,0,85,97],
[141,113,118,112,97,112,119,126,0,94],
[132,109,99,143,111,112,128,114,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,103,89,91,100,102,88,80,94],
[113,0,119,88,99,91,119,103,105,99],
[108,92,0,92,95,109,98,101,101,89],
[122,123,119,0,121,106,112,105,91,109],
[120,112,116,90,0,110,113,116,99,108],
[111,120,102,105,101,0,113,112,107,97],
[109,92,113,99,98,98,0,111,86,108],
[123,108,110,106,95,99,100,0,97,103],
[131,106,110,120,112,104,125,114,0,114],
[117,112,122,102,103,114,103,108,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,112,89,86,112,101,115,84],
[107,0,107,102,99,103,108,108,109,94],
[107,104,0,120,96,110,105,97,98,99],
[99,109,91,0,87,100,102,96,109,121],
[122,112,115,124,0,102,130,110,120,110],
[125,108,101,111,109,0,113,114,112,102],
[99,103,106,109,81,98,0,100,102,104],
[110,103,114,115,101,97,111,0,119,92],
[96,102,113,102,91,99,109,92,0,103],
[127,117,112,90,101,109,107,119,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,93,98,119,111,87,95,114,85],
[120,0,102,104,111,104,100,91,127,97],
[118,109,0,98,125,115,106,110,106,111],
[113,107,113,0,129,111,111,93,119,101],
[92,100,86,82,0,120,97,75,91,88],
[100,107,96,100,91,0,101,87,102,103],
[124,111,105,100,114,110,0,103,108,105],
[116,120,101,118,136,124,108,0,134,98],
[97,84,105,92,120,109,103,77,0,90],
[126,114,100,110,123,108,106,113,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,108,106,97,116,108,112,100,114],
[102,0,103,115,110,106,94,118,104,109],
[103,108,0,105,106,96,113,116,110,100],
[105,96,106,0,103,102,102,120,95,110],
[114,101,105,108,0,102,115,125,101,115],
[95,105,115,109,109,0,108,119,97,108],
[103,117,98,109,96,103,0,125,112,112],
[99,93,95,91,86,92,86,0,93,93],
[111,107,101,116,110,114,99,118,0,113],
[97,102,111,101,96,103,99,118,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,101,85,68,89,97,82,99,79],
[126,0,119,92,101,91,119,104,95,82],
[110,92,0,93,94,89,97,101,89,90],
[126,119,118,0,109,109,92,111,106,102],
[143,110,117,102,0,114,106,107,110,108],
[122,120,122,102,97,0,106,101,113,91],
[114,92,114,119,105,105,0,107,108,103],
[129,107,110,100,104,110,104,0,104,100],
[112,116,122,105,101,98,103,107,0,107],
[132,129,121,109,103,120,108,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,90,100,100,105,98,108,92,100],
[121,0,113,112,106,108,103,116,104,115],
[121,98,0,109,109,112,113,123,112,112],
[111,99,102,0,104,107,97,99,91,111],
[111,105,102,107,0,104,108,112,104,106],
[106,103,99,104,107,0,105,101,102,107],
[113,108,98,114,103,106,0,116,105,109],
[103,95,88,112,99,110,95,0,97,86],
[119,107,99,120,107,109,106,114,0,101],
[111,96,99,100,105,104,102,125,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,104,98,113,115,100,113,104,97],
[102,0,107,106,119,115,112,112,123,114],
[107,104,0,104,96,105,92,113,113,106],
[113,105,107,0,101,119,87,110,111,101],
[98,92,115,110,0,102,92,106,114,93],
[96,96,106,92,109,0,93,114,100,101],
[111,99,119,124,119,118,0,133,122,121],
[98,99,98,101,105,97,78,0,101,85],
[107,88,98,100,97,111,89,110,0,90],
[114,97,105,110,118,110,90,126,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,94,100,103,106,112,110,104,115],
[111,0,108,99,105,120,116,113,110,110],
[117,103,0,103,115,115,119,117,119,110],
[111,112,108,0,102,110,108,115,112,106],
[108,106,96,109,0,112,107,110,114,112],
[105,91,96,101,99,0,113,110,104,101],
[99,95,92,103,104,98,0,107,115,105],
[101,98,94,96,101,101,104,0,111,111],
[107,101,92,99,97,107,96,100,0,104],
[96,101,101,105,99,110,106,100,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,102,99,95,91,103,99,87,88],
[117,0,102,120,105,110,112,111,104,107],
[109,109,0,110,108,100,109,103,110,101],
[112,91,101,0,114,91,108,102,105,86],
[116,106,103,97,0,115,119,106,95,98],
[120,101,111,120,96,0,128,113,104,92],
[108,99,102,103,92,83,0,99,93,94],
[112,100,108,109,105,98,112,0,89,98],
[124,107,101,106,116,107,118,122,0,107],
[123,104,110,125,113,119,117,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,96,101,95,124,102,99,104,94],
[93,0,92,94,94,102,105,96,97,94],
[115,119,0,111,97,116,101,95,97,107],
[110,117,100,0,110,117,101,105,110,98],
[116,117,114,101,0,112,116,102,96,117],
[87,109,95,94,99,0,103,105,92,100],
[109,106,110,110,95,108,0,120,111,106],
[112,115,116,106,109,106,91,0,90,108],
[107,114,114,101,115,119,100,121,0,101],
[117,117,104,113,94,111,105,103,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,103,117,98,102,96,95,116,110],
[116,0,98,121,98,109,112,112,114,124],
[108,113,0,127,102,116,124,112,122,123],
[94,90,84,0,87,99,88,87,115,99],
[113,113,109,124,0,116,105,110,125,133],
[109,102,95,112,95,0,92,105,110,108],
[115,99,87,123,106,119,0,107,124,116],
[116,99,99,124,101,106,104,0,119,118],
[95,97,89,96,86,101,87,92,0,106],
[101,87,88,112,78,103,95,93,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,125,211,129,169,125,170,166,83],
[86,0,128,86,45,86,128,86,86,86],
[86,83,0,128,87,86,128,86,41,128],
[0,125,83,0,87,169,42,87,41,42],
[82,166,124,124,0,124,124,169,82,124],
[42,125,125,42,87,0,42,129,83,42],
[86,83,83,169,87,169,0,128,82,86],
[41,125,125,124,42,82,83,0,124,124],
[45,125,170,170,129,128,129,87,0,87],
[128,125,83,169,87,169,125,87,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,146,121,121,134,86,84,122,97],
[113,0,157,125,148,148,86,108,132,136],
[65,54,0,112,136,88,63,48,82,110],
[90,86,99,0,98,123,98,71,95,85],
[90,63,75,113,0,85,113,59,122,111],
[77,63,123,88,126,0,65,86,73,73],
[125,125,148,113,98,146,0,111,135,110],
[127,103,163,140,152,125,100,0,152,149],
[89,79,129,116,89,138,76,59,0,113],
[114,75,101,126,100,138,101,62,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,98,114,115,116,97,111,100,128],
[96,0,96,98,96,95,99,88,96,110],
[113,115,0,104,100,110,99,102,103,119],
[97,113,107,0,103,103,96,107,109,108],
[96,115,111,108,0,104,105,110,91,118],
[95,116,101,108,107,0,110,109,102,117],
[114,112,112,115,106,101,0,113,101,128],
[100,123,109,104,101,102,98,0,101,120],
[111,115,108,102,120,109,110,110,0,126],
[83,101,92,103,93,94,83,91,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,119,111,95,116,98,100,108,109],
[104,0,108,106,103,127,113,93,99,107],
[92,103,0,121,95,129,99,112,98,92],
[100,105,90,0,95,109,105,101,99,100],
[116,108,116,116,0,110,89,103,94,96],
[95,84,82,102,101,0,82,95,78,93],
[113,98,112,106,122,129,0,109,108,117],
[111,118,99,110,108,116,102,0,111,104],
[103,112,113,112,117,133,103,100,0,113],
[102,104,119,111,115,118,94,107,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,135,115,137,135,126,147,83,116],
[97,0,128,117,127,108,107,139,127,118],
[76,83,0,119,94,84,93,118,74,105],
[96,94,92,0,114,94,102,125,93,105],
[74,84,117,97,0,116,136,127,106,95],
[76,103,127,117,95,0,84,138,106,105],
[85,104,118,109,75,127,0,139,108,114],
[64,72,93,86,84,73,72,0,84,81],
[128,84,137,118,105,105,103,127,0,84],
[95,93,106,106,116,106,97,130,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,104,100,97,104,100,103,113,101],
[117,0,109,103,100,119,117,95,114,100],
[107,102,0,100,88,109,98,104,121,102],
[111,108,111,0,106,100,116,103,107,108],
[114,111,123,105,0,112,125,109,130,106],
[107,92,102,111,99,0,103,90,98,93],
[111,94,113,95,86,108,0,95,101,99],
[108,116,107,108,102,121,116,0,112,103],
[98,97,90,104,81,113,110,99,0,96],
[110,111,109,103,105,118,112,108,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,90,100,88,87,89,85,87,89],
[111,0,99,105,93,99,97,99,92,105],
[121,112,0,110,99,96,101,114,91,113],
[111,106,101,0,101,93,99,92,96,100],
[123,118,112,110,0,101,116,117,101,119],
[124,112,115,118,110,0,116,99,110,117],
[122,114,110,112,95,95,0,110,98,104],
[126,112,97,119,94,112,101,0,99,101],
[124,119,120,115,110,101,113,112,0,101],
[122,106,98,111,92,94,107,110,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,121,102,102,104,99,106,113,99],
[111,0,102,108,97,103,102,111,117,103],
[90,109,0,106,103,97,98,117,106,109],
[109,103,105,0,101,88,92,101,107,93],
[109,114,108,110,0,110,112,115,109,97],
[107,108,114,123,101,0,117,109,107,105],
[112,109,113,119,99,94,0,116,114,102],
[105,100,94,110,96,102,95,0,102,89],
[98,94,105,104,102,104,97,109,0,97],
[112,108,102,118,114,106,109,122,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,113,113,108,124,115,92,115,105],
[113,0,122,113,110,104,104,100,121,110],
[98,89,0,91,87,99,97,85,95,91],
[98,98,120,0,115,124,109,98,129,96],
[103,101,124,96,0,123,99,89,106,98],
[87,107,112,87,88,0,97,96,109,89],
[96,107,114,102,112,114,0,89,99,107],
[119,111,126,113,122,115,122,0,114,100],
[96,90,116,82,105,102,112,97,0,97],
[106,101,120,115,113,122,104,111,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,108,111,103,112,119,109,112,111],
[91,0,89,98,92,91,108,92,104,106],
[103,122,0,111,110,106,107,100,108,105],
[100,113,100,0,105,107,107,98,113,106],
[108,119,101,106,0,114,121,104,122,122],
[99,120,105,104,97,0,103,104,112,108],
[92,103,104,104,90,108,0,101,102,117],
[102,119,111,113,107,107,110,0,107,123],
[99,107,103,98,89,99,109,104,0,111],
[100,105,106,105,89,103,94,88,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,102,102,114,100,117,119,110],
[99,0,110,111,118,116,109,119,122,99],
[101,101,0,98,99,118,102,119,100,101],
[109,100,113,0,114,97,91,117,118,98],
[109,93,112,97,0,94,97,100,104,101],
[97,95,93,114,117,0,90,114,115,93],
[111,102,109,120,114,121,0,122,122,105],
[94,92,92,94,111,97,89,0,97,100],
[92,89,111,93,107,96,89,114,0,100],
[101,112,110,113,110,118,106,111,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,97,114,135,96,116,116,97,153],
[96,0,134,95,117,115,115,114,115,172],
[114,77,0,95,77,77,58,96,75,134],
[97,116,116,0,155,136,77,135,59,115],
[76,94,134,56,0,94,76,133,95,133],
[115,96,134,75,117,0,77,153,96,115],
[95,96,153,134,135,134,0,173,96,134],
[95,97,115,76,78,58,38,0,95,115],
[114,96,136,152,116,115,115,116,0,153],
[58,39,77,96,78,96,77,96,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,98,87,64,80,63,69,79,83],
[137,0,96,106,93,95,87,105,115,92],
[113,115,0,98,79,82,101,94,115,103],
[124,105,113,0,63,98,93,111,109,96],
[147,118,132,148,0,100,118,128,131,121],
[131,116,129,113,111,0,96,113,133,116],
[148,124,110,118,93,115,0,108,134,114],
[142,106,117,100,83,98,103,0,103,96],
[132,96,96,102,80,78,77,108,0,76],
[128,119,108,115,90,95,97,115,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,121,112,106,114,99,113,98,104],
[108,0,101,100,98,110,96,112,102,96],
[90,110,0,105,108,112,109,114,101,113],
[99,111,106,0,99,110,89,103,102,98],
[105,113,103,112,0,103,113,119,96,104],
[97,101,99,101,108,0,105,108,107,99],
[112,115,102,122,98,106,0,120,106,99],
[98,99,97,108,92,103,91,0,98,101],
[113,109,110,109,115,104,105,113,0,97],
[107,115,98,113,107,112,112,110,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,91,88,97,96,108,89,110,100],
[111,0,109,103,98,103,115,92,113,108],
[120,102,0,102,96,107,123,105,117,110],
[123,108,109,0,104,102,122,111,111,112],
[114,113,115,107,0,104,115,108,119,116],
[115,108,104,109,107,0,109,87,109,107],
[103,96,88,89,96,102,0,92,107,100],
[122,119,106,100,103,124,119,0,106,115],
[101,98,94,100,92,102,104,105,0,111],
[111,103,101,99,95,104,111,96,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,101,95,112,115,104,103,108,97],
[103,0,103,100,96,117,83,109,109,96],
[110,108,0,96,107,123,97,109,114,106],
[116,111,115,0,117,126,110,115,114,103],
[99,115,104,94,0,113,108,110,101,91],
[96,94,88,85,98,0,79,96,87,95],
[107,128,114,101,103,132,0,110,124,113],
[108,102,102,96,101,115,101,0,117,98],
[103,102,97,97,110,124,87,94,0,101],
[114,115,105,108,120,116,98,113,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,93,90,102,108,110,113,100,119],
[100,0,79,108,105,118,118,111,105,117],
[118,132,0,102,114,123,128,111,113,113],
[121,103,109,0,121,113,118,102,103,118],
[109,106,97,90,0,96,118,104,98,108],
[103,93,88,98,115,0,119,98,95,104],
[101,93,83,93,93,92,0,101,79,93],
[98,100,100,109,107,113,110,0,116,116],
[111,106,98,108,113,116,132,95,0,106],
[92,94,98,93,103,107,118,95,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,101,114,100,101,102,96,112,99],
[99,0,105,102,111,110,100,101,118,101],
[110,106,0,104,104,105,111,105,115,99],
[97,109,107,0,104,98,108,96,113,103],
[111,100,107,107,0,109,111,105,116,100],
[110,101,106,113,102,0,97,113,119,100],
[109,111,100,103,100,114,0,109,117,112],
[115,110,106,115,106,98,102,0,115,117],
[99,93,96,98,95,92,94,96,0,85],
[112,110,112,108,111,111,99,94,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,135,104,125,63,111,105,90,135],
[95,0,102,123,112,62,106,95,69,93],
[76,109,0,119,117,110,121,109,105,110],
[107,88,92,0,94,86,140,105,99,106],
[86,99,94,117,0,65,120,86,81,75],
[148,149,101,125,146,0,140,126,133,136],
[100,105,90,71,91,71,0,84,100,102],
[106,116,102,106,125,85,127,0,112,115],
[121,142,106,112,130,78,111,99,0,118],
[76,118,101,105,136,75,109,96,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,101,122,104,103,109,113,111,113],
[98,0,109,125,120,107,113,113,117,120],
[110,102,0,122,109,102,116,106,102,111],
[89,86,89,0,87,96,108,79,92,87],
[107,91,102,124,0,105,116,97,105,115],
[108,104,109,115,106,0,121,101,115,118],
[102,98,95,103,95,90,0,89,93,98],
[98,98,105,132,114,110,122,0,108,114],
[100,94,109,119,106,96,118,103,0,112],
[98,91,100,124,96,93,113,97,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,97,95,102,115,98,102,105,108],
[106,0,101,108,108,109,110,111,102,113],
[114,110,0,117,105,117,97,113,115,116],
[116,103,94,0,107,113,98,104,99,107],
[109,103,106,104,0,112,98,113,113,113],
[96,102,94,98,99,0,94,98,98,106],
[113,101,114,113,113,117,0,108,108,110],
[109,100,98,107,98,113,103,0,107,109],
[106,109,96,112,98,113,103,104,0,104],
[103,98,95,104,98,105,101,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,81,94,81,80,85,98,100,91],
[109,0,88,103,99,84,89,118,109,111],
[130,123,0,127,113,114,113,104,107,150],
[117,108,84,0,99,103,100,92,101,105],
[130,112,98,112,0,105,89,108,92,100],
[131,127,97,108,106,0,96,116,96,122],
[126,122,98,111,122,115,0,133,115,114],
[113,93,107,119,103,95,78,0,108,111],
[111,102,104,110,119,115,96,103,0,118],
[120,100,61,106,111,89,97,100,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,101,103,104,102,101,106,105,103],
[105,0,103,102,95,109,99,106,100,100],
[110,108,0,102,111,117,108,110,101,99],
[108,109,109,0,108,110,98,108,107,100],
[107,116,100,103,0,105,105,100,115,105],
[109,102,94,101,106,0,102,101,105,111],
[110,112,103,113,106,109,0,110,107,107],
[105,105,101,103,111,110,101,0,110,103],
[106,111,110,104,96,106,104,101,0,113],
[108,111,112,111,106,100,104,108,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,81,117,106,88,116,80,77,118],
[118,0,109,101,116,100,125,60,115,109],
[130,102,0,117,100,106,90,80,119,139],
[94,110,94,0,89,101,82,88,108,101],
[105,95,111,122,0,94,73,101,109,131],
[123,111,105,110,117,0,73,116,108,139],
[95,86,121,129,138,138,0,109,99,129],
[131,151,131,123,110,95,102,0,99,141],
[134,96,92,103,102,103,112,112,0,101],
[93,102,72,110,80,72,82,70,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,113,106,102,107,100,111,110,102],
[103,0,114,106,117,103,96,111,99,109],
[98,97,0,89,103,98,85,110,91,100],
[105,105,122,0,102,98,103,108,97,100],
[109,94,108,109,0,96,100,121,110,90],
[104,108,113,113,115,0,98,104,124,113],
[111,115,126,108,111,113,0,125,122,104],
[100,100,101,103,90,107,86,0,103,95],
[101,112,120,114,101,87,89,108,0,104],
[109,102,111,111,121,98,107,116,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,106,114,97,93,102,98,124,99],
[97,0,104,93,81,100,100,80,94,87],
[105,107,0,112,113,106,95,102,110,112],
[97,118,99,0,80,98,91,91,109,92],
[114,130,98,131,0,105,113,111,122,102],
[118,111,105,113,106,0,118,103,108,108],
[109,111,116,120,98,93,0,98,123,114],
[113,131,109,120,100,108,113,0,117,111],
[87,117,101,102,89,103,88,94,0,105],
[112,124,99,119,109,103,97,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,103,100,101,98,97,116,98,111],
[110,0,104,118,110,111,112,107,103,107],
[108,107,0,105,109,114,107,118,113,105],
[111,93,106,0,102,111,112,110,105,108],
[110,101,102,109,0,101,98,109,108,108],
[113,100,97,100,110,0,112,101,104,104],
[114,99,104,99,113,99,0,108,102,106],
[95,104,93,101,102,110,103,0,104,104],
[113,108,98,106,103,107,109,107,0,111],
[100,104,106,103,103,107,105,107,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,121,106,105,128,114,89,110,106],
[110,0,107,105,121,119,130,98,130,115],
[90,104,0,89,105,100,96,91,100,103],
[105,106,122,0,116,128,111,108,118,119],
[106,90,106,95,0,110,113,83,120,111],
[83,92,111,83,101,0,104,68,93,99],
[97,81,115,100,98,107,0,96,102,101],
[122,113,120,103,128,143,115,0,121,121],
[101,81,111,93,91,118,109,90,0,110],
[105,96,108,92,100,112,110,90,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,115,124,103,110,108,102,107,123],
[108,0,107,94,102,98,118,100,104,103],
[96,104,0,113,102,96,129,111,98,111],
[87,117,98,0,97,94,101,104,99,109],
[108,109,109,114,0,102,112,104,97,113],
[101,113,115,117,109,0,111,132,107,117],
[103,93,82,110,99,100,0,99,92,116],
[109,111,100,107,107,79,112,0,88,104],
[104,107,113,112,114,104,119,123,0,119],
[88,108,100,102,98,94,95,107,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,115,99,116,104,99,98,119,102],
[100,0,117,108,103,108,101,110,118,107],
[96,94,0,113,103,98,101,94,105,107],
[112,103,98,0,110,109,98,101,112,114],
[95,108,108,101,0,118,110,100,123,99],
[107,103,113,102,93,0,96,107,113,118],
[112,110,110,113,101,115,0,95,110,105],
[113,101,117,110,111,104,116,0,122,107],
[92,93,106,99,88,98,101,89,0,103],
[109,104,104,97,112,93,106,104,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,100,102,97,97,97,115,107,100],
[107,0,117,111,102,104,100,113,119,105],
[111,94,0,89,103,85,97,107,101,93],
[109,100,122,0,103,102,112,116,119,115],
[114,109,108,108,0,99,99,111,109,101],
[114,107,126,109,112,0,103,117,114,105],
[114,111,114,99,112,108,0,125,126,114],
[96,98,104,95,100,94,86,0,102,104],
[104,92,110,92,102,97,85,109,0,99],
[111,106,118,96,110,106,97,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,107,99,97,107,106,105,109,100],
[103,0,99,104,102,101,106,94,100,92],
[104,112,0,114,98,105,106,112,113,105],
[112,107,97,0,102,101,118,105,111,95],
[114,109,113,109,0,105,120,102,105,97],
[104,110,106,110,106,0,107,104,94,100],
[105,105,105,93,91,104,0,92,103,95],
[106,117,99,106,109,107,119,0,121,111],
[102,111,98,100,106,117,108,90,0,103],
[111,119,106,116,114,111,116,100,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,127,211,84,126,211,168,170,168],
[85,0,85,127,126,85,127,170,127,127],
[84,126,0,125,168,126,84,168,170,84],
[0,84,86,0,84,84,85,85,170,0],
[127,85,43,127,0,85,127,170,127,127],
[85,126,85,127,126,0,127,170,170,85],
[0,84,127,126,84,84,0,126,170,126],
[43,41,43,126,41,41,85,0,127,43],
[41,84,41,41,84,41,41,84,0,41],
[43,84,127,211,84,126,85,168,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,128,116,104,106,109,112,97],
[101,0,103,128,115,103,99,105,124,103],
[111,108,0,132,119,105,94,106,122,101],
[83,83,79,0,95,83,86,81,96,82],
[95,96,92,116,0,91,97,97,103,95],
[107,108,106,128,120,0,103,104,118,104],
[105,112,117,125,114,108,0,106,121,107],
[102,106,105,130,114,107,105,0,124,97],
[99,87,89,115,108,93,90,87,0,96],
[114,108,110,129,116,107,104,114,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,102,85,111,121,99,90,96,104],
[115,0,111,99,115,98,100,101,102,115],
[109,100,0,102,125,114,99,108,98,106],
[126,112,109,0,117,111,107,110,99,112],
[100,96,86,94,0,102,90,94,97,109],
[90,113,97,100,109,0,107,104,100,110],
[112,111,112,104,121,104,0,100,106,106],
[121,110,103,101,117,107,111,0,105,111],
[115,109,113,112,114,111,105,106,0,110],
[107,96,105,99,102,101,105,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,98,101,101,97,101,104,102],
[107,0,97,98,108,101,99,97,90,88],
[107,114,0,111,116,108,108,113,100,94],
[113,113,100,0,108,102,113,98,102,114],
[110,103,95,103,0,97,95,92,90,90],
[110,110,103,109,114,0,112,105,109,105],
[114,112,103,98,116,99,0,110,101,95],
[110,114,98,113,119,106,101,0,100,92],
[107,121,111,109,121,102,110,111,0,107],
[109,123,117,97,121,106,116,119,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,96,108,111,101,97,104,87,103],
[105,0,102,114,112,125,110,118,106,120],
[115,109,0,114,113,107,108,115,103,114],
[103,97,97,0,104,103,110,98,93,114],
[100,99,98,107,0,102,96,111,97,111],
[110,86,104,108,109,0,97,94,100,104],
[114,101,103,101,115,114,0,115,107,116],
[107,93,96,113,100,117,96,0,102,110],
[124,105,108,118,114,111,104,109,0,114],
[108,91,97,97,100,107,95,101,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,108,104,107,102,96,114,100,120],
[94,0,97,92,118,116,83,114,90,110],
[103,114,0,92,122,108,99,118,101,116],
[107,119,119,0,124,121,109,119,103,121],
[104,93,89,87,0,102,90,105,92,100],
[109,95,103,90,109,0,94,113,98,109],
[115,128,112,102,121,117,0,115,106,117],
[97,97,93,92,106,98,96,0,92,109],
[111,121,110,108,119,113,105,119,0,128],
[91,101,95,90,111,102,94,102,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,99,113,101,91,96,95,99,102],
[126,0,99,101,119,99,108,103,107,106],
[112,112,0,113,121,109,114,109,107,103],
[98,110,98,0,125,95,103,100,105,95],
[110,92,90,86,0,77,100,95,102,86],
[120,112,102,116,134,0,126,107,121,117],
[115,103,97,108,111,85,0,108,107,104],
[116,108,102,111,116,104,103,0,98,121],
[112,104,104,106,109,90,104,113,0,93],
[109,105,108,116,125,94,107,90,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,96,88,93,109,91,101,113,87],
[121,0,92,90,120,103,98,99,105,104],
[115,119,0,118,110,116,99,117,111,120],
[123,121,93,0,105,112,95,107,114,104],
[118,91,101,106,0,118,89,95,91,95],
[102,108,95,99,93,0,80,81,101,102],
[120,113,112,116,122,131,0,119,104,128],
[110,112,94,104,116,130,92,0,108,115],
[98,106,100,97,120,110,107,103,0,111],
[124,107,91,107,116,109,83,96,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,123,111,104,106,110,116,111,109],
[104,0,105,107,97,111,104,105,113,115],
[88,106,0,99,89,101,95,102,99,102],
[100,104,112,0,110,106,99,100,115,104],
[107,114,122,101,0,104,110,110,111,109],
[105,100,110,105,107,0,106,106,117,113],
[101,107,116,112,101,105,0,114,113,123],
[95,106,109,111,101,105,97,0,99,107],
[100,98,112,96,100,94,98,112,0,110],
[102,96,109,107,102,98,88,104,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,124,122,116,95,118,114,114,103],
[95,0,117,102,114,86,110,112,115,99],
[87,94,0,77,86,84,77,107,92,72],
[89,109,134,0,98,115,96,120,104,105],
[95,97,125,113,0,116,106,123,108,104],
[116,125,127,96,95,0,121,128,118,105],
[93,101,134,115,105,90,0,130,111,109],
[97,99,104,91,88,83,81,0,95,89],
[97,96,119,107,103,93,100,116,0,98],
[108,112,139,106,107,106,102,122,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,104,104,114,116,111,110,114,116],
[102,0,106,117,115,109,118,92,108,125],
[107,105,0,101,113,105,113,96,110,109],
[107,94,110,0,105,99,107,98,100,108],
[97,96,98,106,0,106,109,93,104,103],
[95,102,106,112,105,0,112,88,102,109],
[100,93,98,104,102,99,0,89,110,105],
[101,119,115,113,118,123,122,0,119,110],
[97,103,101,111,107,109,101,92,0,102],
[95,86,102,103,108,102,106,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,106,99,118,102,94,102,104,126],
[108,0,101,100,115,98,105,112,103,111],
[105,110,0,95,119,88,101,100,108,110],
[112,111,116,0,126,104,118,115,121,110],
[93,96,92,85,0,89,101,101,94,95],
[109,113,123,107,122,0,120,114,105,121],
[117,106,110,93,110,91,0,105,116,116],
[109,99,111,96,110,97,106,0,114,118],
[107,108,103,90,117,106,95,97,0,106],
[85,100,101,101,116,90,95,93,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,125,97,108,105,115,113,103],
[100,0,106,105,90,120,97,110,115,96],
[107,105,0,103,94,107,102,111,85,93],
[86,106,108,0,97,107,88,105,107,99],
[114,121,117,114,0,117,109,126,100,112],
[103,91,104,104,94,0,98,112,102,104],
[106,114,109,123,102,113,0,117,108,108],
[96,101,100,106,85,99,94,0,83,97],
[98,96,126,104,111,109,103,128,0,108],
[108,115,118,112,99,107,103,114,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,107,104,112,115,96,104,110,115],
[94,0,99,100,106,103,101,104,97,103],
[104,112,0,106,104,105,102,113,111,118],
[107,111,105,0,99,111,99,103,108,105],
[99,105,107,112,0,109,103,94,107,103],
[96,108,106,100,102,0,92,104,96,101],
[115,110,109,112,108,119,0,109,104,112],
[107,107,98,108,117,107,102,0,97,112],
[101,114,100,103,104,115,107,114,0,104],
[96,108,93,106,108,110,99,99,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,109,98,79,104,106,99,97,92],
[116,0,111,122,98,104,113,95,99,100],
[102,100,0,94,85,103,95,88,87,92],
[113,89,117,0,83,101,103,94,97,95],
[132,113,126,128,0,100,85,109,98,105],
[107,107,108,110,111,0,118,108,76,90],
[105,98,116,108,126,93,0,98,79,100],
[112,116,123,117,102,103,113,0,94,116],
[114,112,124,114,113,135,132,117,0,104],
[119,111,119,116,106,121,111,95,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,109,91,103,113,106,114,100],
[107,0,115,120,101,107,122,107,114,110],
[105,96,0,108,97,89,109,98,104,89],
[102,91,103,0,92,104,108,95,106,91],
[120,110,114,119,0,106,116,112,118,102],
[108,104,122,107,105,0,114,101,109,105],
[98,89,102,103,95,97,0,89,97,102],
[105,104,113,116,99,110,122,0,118,110],
[97,97,107,105,93,102,114,93,0,110],
[111,101,122,120,109,106,109,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,115,110,107,118,103,112,114,124],
[94,0,108,99,92,102,88,96,107,102],
[96,103,0,110,103,110,113,102,114,99],
[101,112,101,0,105,108,94,103,105,104],
[104,119,108,106,0,116,105,111,100,105],
[93,109,101,103,95,0,96,111,102,95],
[108,123,98,117,106,115,0,120,118,109],
[99,115,109,108,100,100,91,0,101,96],
[97,104,97,106,111,109,93,110,0,103],
[87,109,112,107,106,116,102,115,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,91,107,87,95,85,101,96,93],
[112,0,108,111,99,113,90,103,121,100],
[120,103,0,120,113,127,90,106,112,120],
[104,100,91,0,88,95,93,102,93,100],
[124,112,98,123,0,111,112,111,120,114],
[116,98,84,116,100,0,95,88,105,106],
[126,121,121,118,99,116,0,106,121,110],
[110,108,105,109,100,123,105,0,114,108],
[115,90,99,118,91,106,90,97,0,104],
[118,111,91,111,97,105,101,103,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,100,96,117,98,109,123,94,107],
[104,0,99,96,103,95,99,108,91,90],
[111,112,0,103,109,96,103,115,102,95],
[115,115,108,0,101,104,103,115,112,102],
[94,108,102,110,0,97,94,121,97,90],
[113,116,115,107,114,0,99,120,98,109],
[102,112,108,108,117,112,0,122,94,105],
[88,103,96,96,90,91,89,0,99,108],
[117,120,109,99,114,113,117,112,0,111],
[104,121,116,109,121,102,106,103,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,130,120,103,111,121,123,114,140],
[66,0,129,73,99,98,78,96,97,84],
[81,82,0,75,83,69,70,87,77,88],
[91,138,136,0,116,122,113,111,127,115],
[108,112,128,95,0,111,95,112,128,100],
[100,113,142,89,100,0,117,129,129,131],
[90,133,141,98,116,94,0,109,119,94],
[88,115,124,100,99,82,102,0,120,87],
[97,114,134,84,83,82,92,91,0,99],
[71,127,123,96,111,80,117,124,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,107,102,111,108,110,111,119,113],
[116,0,113,107,102,107,104,117,118,109],
[104,98,0,112,105,110,99,114,113,99],
[109,104,99,0,108,101,107,124,110,107],
[100,109,106,103,0,97,105,113,114,115],
[103,104,101,110,114,0,96,114,106,110],
[101,107,112,104,106,115,0,115,106,113],
[100,94,97,87,98,97,96,0,99,104],
[92,93,98,101,97,105,105,112,0,107],
[98,102,112,104,96,101,98,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,118,108,100,107,118,107,116,107],
[91,0,106,98,99,121,115,103,95,100],
[93,105,0,102,112,117,111,115,102,111],
[103,113,109,0,102,110,105,118,110,107],
[111,112,99,109,0,110,112,117,101,106],
[104,90,94,101,101,0,108,111,97,91],
[93,96,100,106,99,103,0,103,94,90],
[104,108,96,93,94,100,108,0,97,83],
[95,116,109,101,110,114,117,114,0,91],
[104,111,100,104,105,120,121,128,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,107,111,106,90,104,121,110,102],
[101,0,104,104,104,92,98,107,107,107],
[104,107,0,115,100,98,96,117,110,97],
[100,107,96,0,107,99,91,107,110,98],
[105,107,111,104,0,94,97,102,111,103],
[121,119,113,112,117,0,104,117,124,111],
[107,113,115,120,114,107,0,116,119,105],
[90,104,94,104,109,94,95,0,100,96],
[101,104,101,101,100,87,92,111,0,103],
[109,104,114,113,108,100,106,115,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,90,86,109,114,94,88,98,101],
[110,0,109,84,108,97,100,85,90,96],
[121,102,0,111,108,105,102,98,95,108],
[125,127,100,0,108,107,106,96,105,105],
[102,103,103,103,0,98,102,98,89,103],
[97,114,106,104,113,0,104,94,89,97],
[117,111,109,105,109,107,0,109,107,107],
[123,126,113,115,113,117,102,0,112,99],
[113,121,116,106,122,122,104,99,0,109],
[110,115,103,106,108,114,104,112,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,99,90,55,72,67,98,86,89],
[125,0,154,143,110,123,109,112,97,114],
[112,57,0,74,44,70,85,88,86,76],
[121,68,137,0,82,52,53,97,82,83],
[156,101,167,129,0,142,109,127,115,101],
[139,88,141,159,69,0,109,99,96,115],
[144,102,126,158,102,102,0,139,129,115],
[113,99,123,114,84,112,72,0,84,100],
[125,114,125,129,96,115,82,127,0,116],
[122,97,135,128,110,96,96,111,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,92,92,107,98,99,97,106,121],
[121,0,105,120,132,113,124,131,128,119],
[119,106,0,107,116,103,113,121,120,109],
[119,91,104,0,111,106,103,101,117,108],
[104,79,95,100,0,101,97,102,123,112],
[113,98,108,105,110,0,104,115,113,113],
[112,87,98,108,114,107,0,111,117,103],
[114,80,90,110,109,96,100,0,93,105],
[105,83,91,94,88,98,94,118,0,98],
[90,92,102,103,99,98,108,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,109,100,115,99,99,115,118,99],
[108,0,121,111,107,110,100,111,121,109],
[102,90,0,94,104,101,88,119,100,86],
[111,100,117,0,123,108,90,118,112,96],
[96,104,107,88,0,109,87,114,112,94],
[112,101,110,103,102,0,91,110,106,89],
[112,111,123,121,124,120,0,109,110,104],
[96,100,92,93,97,101,102,0,107,91],
[93,90,111,99,99,105,101,104,0,92],
[112,102,125,115,117,122,107,120,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,62,120,121,120,90,59,89,90],
[138,0,92,106,122,151,122,138,77,91],
[149,119,0,150,151,180,120,105,135,151],
[91,105,61,0,61,119,105,91,76,77],
[90,89,60,150,0,150,118,134,60,135],
[91,60,31,92,61,0,61,60,15,76],
[121,89,91,106,93,150,0,105,77,137],
[152,73,106,120,77,151,106,0,75,105],
[122,134,76,135,151,196,134,136,0,105],
[121,120,60,134,76,135,74,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,113,100,107,118,96,107,109],
[108,0,101,116,102,105,129,105,118,124],
[108,110,0,111,104,115,126,111,119,134],
[98,95,100,0,94,102,132,102,120,120],
[111,109,107,117,0,100,114,91,124,114],
[104,106,96,109,111,0,111,96,111,116],
[93,82,85,79,97,100,0,97,86,88],
[115,106,100,109,120,115,114,0,116,134],
[104,93,92,91,87,100,125,95,0,126],
[102,87,77,91,97,95,123,77,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,101,94,110,101,107,127,120,133],
[91,0,91,80,101,84,71,106,93,94],
[110,120,0,94,108,89,82,98,99,117],
[117,131,117,0,125,133,104,135,124,147],
[101,110,103,86,0,111,117,110,105,111],
[110,127,122,78,100,0,90,111,113,142],
[104,140,129,107,94,121,0,148,116,132],
[84,105,113,76,101,100,63,0,84,110],
[91,118,112,87,106,98,95,127,0,102],
[78,117,94,64,100,69,79,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,116,102,104,116,119,111,114,107],
[95,0,116,97,97,107,115,103,114,95],
[95,95,0,87,91,97,112,93,110,87],
[109,114,124,0,109,110,121,105,109,97],
[107,114,120,102,0,111,124,98,117,107],
[95,104,114,101,100,0,110,106,113,104],
[92,96,99,90,87,101,0,85,98,91],
[100,108,118,106,113,105,126,0,108,103],
[97,97,101,102,94,98,113,103,0,97],
[104,116,124,114,104,107,120,108,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,96,90,96,97,122,102,106,102],
[94,0,90,101,78,87,103,100,113,94],
[115,121,0,95,92,104,116,112,117,113],
[121,110,116,0,101,111,133,116,119,122],
[115,133,119,110,0,102,129,119,113,121],
[114,124,107,100,109,0,121,128,113,125],
[89,108,95,78,82,90,0,104,112,93],
[109,111,99,95,92,83,107,0,110,98],
[105,98,94,92,98,98,99,101,0,102],
[109,117,98,89,90,86,118,113,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,104,115,117,126,120,107,106,118],
[93,0,106,108,109,103,111,94,110,117],
[107,105,0,104,117,114,113,100,119,119],
[96,103,107,0,107,111,107,98,106,102],
[94,102,94,104,0,111,103,89,108,118],
[85,108,97,100,100,0,102,95,111,113],
[91,100,98,104,108,109,0,96,113,111],
[104,117,111,113,122,116,115,0,122,121],
[105,101,92,105,103,100,98,89,0,114],
[93,94,92,109,93,98,100,90,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,106,107,107,113,99,105,107,110],
[95,0,104,100,108,102,97,103,111,110],
[105,107,0,110,114,105,108,107,111,122],
[104,111,101,0,111,112,103,112,107,113],
[104,103,97,100,0,107,95,99,103,104],
[98,109,106,99,104,0,109,97,105,107],
[112,114,103,108,116,102,0,107,115,108],
[106,108,104,99,112,114,104,0,106,110],
[104,100,100,104,108,106,96,105,0,116],
[101,101,89,98,107,104,103,101,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,109,111,104,104,100,74,82,127],
[128,0,125,122,122,95,117,117,128,122],
[102,86,0,110,91,101,123,109,91,107],
[100,89,101,0,103,86,87,86,74,95],
[107,89,120,108,0,100,111,90,108,130],
[107,116,110,125,111,0,104,115,115,131],
[111,94,88,124,100,107,0,106,65,103],
[137,94,102,125,121,96,105,0,89,115],
[129,83,120,137,103,96,146,122,0,94],
[84,89,104,116,81,80,108,96,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,95,124,100,110,112,105,104,121],
[96,0,91,93,105,110,103,106,96,109],
[116,120,0,125,117,121,105,126,102,113],
[87,118,86,0,120,112,108,101,98,106],
[111,106,94,91,0,121,97,101,108,104],
[101,101,90,99,90,0,102,87,98,97],
[99,108,106,103,114,109,0,107,103,115],
[106,105,85,110,110,124,104,0,102,121],
[107,115,109,113,103,113,108,109,0,118],
[90,102,98,105,107,114,96,90,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,100,97,103,102,109,113,108],
[112,0,107,108,100,96,112,106,109,102],
[109,104,0,106,100,97,95,108,106,111],
[111,103,105,0,90,97,107,107,98,96],
[114,111,111,121,0,104,99,109,105,118],
[108,115,114,114,107,0,110,112,109,105],
[109,99,116,104,112,101,0,117,106,109],
[102,105,103,104,102,99,94,0,104,100],
[98,102,105,113,106,102,105,107,0,104],
[103,109,100,115,93,106,102,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,92,109,119,109,107,101,91,117],
[99,0,92,102,113,108,111,108,114,128],
[119,119,0,100,127,96,130,116,108,138],
[102,109,111,0,116,97,138,123,104,133],
[92,98,84,95,0,92,102,79,85,90],
[102,103,115,114,119,0,117,109,102,115],
[104,100,81,73,109,94,0,92,96,103],
[110,103,95,88,132,102,119,0,101,132],
[120,97,103,107,126,109,115,110,0,146],
[94,83,73,78,121,96,108,79,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,100,107,120,95,118,113,121,102],
[91,0,90,95,90,88,113,94,117,97],
[111,121,0,110,98,107,116,101,129,102],
[104,116,101,0,98,106,119,96,111,113],
[91,121,113,113,0,120,125,101,120,100],
[116,123,104,105,91,0,125,112,129,107],
[93,98,95,92,86,86,0,86,108,95],
[98,117,110,115,110,99,125,0,122,106],
[90,94,82,100,91,82,103,89,0,94],
[109,114,109,98,111,104,116,105,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,92,81,88,71,92,85,89,88],
[126,0,124,106,85,106,107,115,124,110],
[119,87,0,113,76,87,95,87,108,99],
[130,105,98,0,102,91,111,85,111,122],
[123,126,135,109,0,98,105,100,108,115],
[140,105,124,120,113,0,121,108,122,124],
[119,104,116,100,106,90,0,118,100,118],
[126,96,124,126,111,103,93,0,112,104],
[122,87,103,100,103,89,111,99,0,93],
[123,101,112,89,96,87,93,107,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,106,101,89,97,119,116,101,92],
[109,0,97,114,95,89,104,106,106,99],
[105,114,0,106,94,97,107,104,112,108],
[110,97,105,0,109,106,105,111,119,99],
[122,116,117,102,0,93,115,124,113,113],
[114,122,114,105,118,0,114,112,110,111],
[92,107,104,106,96,97,0,101,105,95],
[95,105,107,100,87,99,110,0,110,105],
[110,105,99,92,98,101,106,101,0,103],
[119,112,103,112,98,100,116,106,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,119,112,95,130,102,116,99,99],
[118,0,90,127,107,103,111,112,107,112],
[92,121,0,98,102,103,109,104,83,79],
[99,84,113,0,82,87,81,65,77,76],
[116,104,109,129,0,104,115,142,104,96],
[81,108,108,124,107,0,98,122,107,92],
[109,100,102,130,96,113,0,118,109,101],
[95,99,107,146,69,89,93,0,95,85],
[112,104,128,134,107,104,102,116,0,115],
[112,99,132,135,115,119,110,126,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,113,107,116,92,90,93,108,119],
[110,0,125,106,109,97,109,106,103,114],
[98,86,0,88,95,83,71,90,86,95],
[104,105,123,0,107,101,91,102,109,114],
[95,102,116,104,0,92,95,104,93,115],
[119,114,128,110,119,0,105,109,107,118],
[121,102,140,120,116,106,0,122,109,124],
[118,105,121,109,107,102,89,0,109,114],
[103,108,125,102,118,104,102,102,0,120],
[92,97,116,97,96,93,87,97,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,95,103,110,98,94,92,107,116],
[111,0,90,101,97,104,115,104,97,113],
[116,121,0,94,113,114,102,109,95,116],
[108,110,117,0,108,112,115,103,97,124],
[101,114,98,103,0,100,107,89,109,107],
[113,107,97,99,111,0,110,92,97,119],
[117,96,109,96,104,101,0,109,107,123],
[119,107,102,108,122,119,102,0,110,125],
[104,114,116,114,102,114,104,101,0,126],
[95,98,95,87,104,92,88,86,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,92,111,89,109,110,103,91,93],
[109,0,108,112,99,112,119,95,114,101],
[119,103,0,110,100,118,122,106,117,118],
[100,99,101,0,96,102,106,99,110,104],
[122,112,111,115,0,124,121,107,117,105],
[102,99,93,109,87,0,118,105,104,104],
[101,92,89,105,90,93,0,94,95,101],
[108,116,105,112,104,106,117,0,121,113],
[120,97,94,101,94,107,116,90,0,96],
[118,110,93,107,106,107,110,98,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,110,102,114,109,120,108,99,96],
[106,0,103,102,114,116,126,101,112,106],
[101,108,0,117,119,121,119,113,102,111],
[109,109,94,0,109,115,120,100,107,93],
[97,97,92,102,0,101,119,94,100,103],
[102,95,90,96,110,0,119,102,88,95],
[91,85,92,91,92,92,0,96,89,100],
[103,110,98,111,117,109,115,0,102,101],
[112,99,109,104,111,123,122,109,0,102],
[115,105,100,118,108,116,111,110,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,92,101,75,99,101,99,107,112],
[125,0,128,97,118,114,108,109,128,147],
[119,83,0,86,96,104,107,109,109,123],
[110,114,125,0,118,123,114,82,132,115],
[136,93,115,93,0,98,89,101,114,106],
[112,97,107,88,113,0,89,91,111,134],
[110,103,104,97,122,122,0,94,120,112],
[112,102,102,129,110,120,117,0,129,129],
[104,83,102,79,97,100,91,82,0,127],
[99,64,88,96,105,77,99,82,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,94,105,114,102,101,96,118,101],
[107,0,110,103,109,112,97,99,107,104],
[117,101,0,101,104,115,109,102,107,104],
[106,108,110,0,100,109,110,101,103,99],
[97,102,107,111,0,112,114,107,105,107],
[109,99,96,102,99,0,107,108,111,101],
[110,114,102,101,97,104,0,101,113,106],
[115,112,109,110,104,103,110,0,110,108],
[93,104,104,108,106,100,98,101,0,96],
[110,107,107,112,104,110,105,103,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,112,124,124,137,111,99,113,114],
[99,0,110,122,149,124,147,137,137,113],
[99,101,0,111,112,123,112,101,102,89],
[87,89,100,0,126,125,62,88,76,90],
[87,62,99,85,0,112,98,123,100,114],
[74,87,88,86,99,0,99,101,77,79],
[100,64,99,149,113,112,0,126,89,89],
[112,74,110,123,88,110,85,0,101,110],
[98,74,109,135,111,134,122,110,0,111],
[97,98,122,121,97,132,122,101,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,117,107,94,132,125,125,129,119],
[85,0,108,94,81,102,118,123,105,108],
[94,103,0,105,107,112,119,102,114,127],
[104,117,106,0,102,117,124,120,108,104],
[117,130,104,109,0,107,133,120,117,119],
[79,109,99,94,104,0,105,101,103,91],
[86,93,92,87,78,106,0,107,91,104],
[86,88,109,91,91,110,104,0,108,100],
[82,106,97,103,94,108,120,103,0,104],
[92,103,84,107,92,120,107,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,96,143,119,93,119,188,95,143],
[94,0,71,143,94,139,118,140,71,140],
[115,140,0,140,94,139,93,139,69,164],
[68,68,71,0,23,90,69,68,23,46],
[92,117,117,188,0,115,117,92,141,139],
[118,72,72,121,96,0,120,119,96,119],
[92,93,118,142,94,91,0,141,49,141],
[23,71,72,143,119,92,70,0,71,118],
[116,140,142,188,70,115,162,140,0,162],
[68,71,47,165,72,92,70,93,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,81,124,111,109,97,142,101,126],
[107,0,108,123,104,138,100,132,116,118],
[130,103,0,128,111,112,110,140,112,121],
[87,88,83,0,89,99,70,106,74,95],
[100,107,100,122,0,117,98,133,108,112],
[102,73,99,112,94,0,70,112,99,129],
[114,111,101,141,113,141,0,141,102,119],
[69,79,71,105,78,99,70,0,72,94],
[110,95,99,137,103,112,109,139,0,134],
[85,93,90,116,99,82,92,117,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,109,105,115,108,99,106,106,101],
[98,0,102,108,98,99,105,106,94,103],
[102,109,0,112,112,110,110,120,108,108],
[106,103,99,0,104,95,105,109,98,101],
[96,113,99,107,0,93,111,99,98,103],
[103,112,101,116,118,0,116,109,105,106],
[112,106,101,106,100,95,0,108,101,99],
[105,105,91,102,112,102,103,0,105,101],
[105,117,103,113,113,106,110,106,0,108],
[110,108,103,110,108,105,112,110,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,104,115,98,114,102,107,117,120],
[102,0,103,100,97,117,103,107,111,112],
[107,108,0,118,105,118,109,113,114,118],
[96,111,93,0,102,110,91,118,104,112],
[113,114,106,109,0,130,110,105,112,120],
[97,94,93,101,81,0,89,97,104,106],
[109,108,102,120,101,122,0,115,108,123],
[104,104,98,93,106,114,96,0,104,113],
[94,100,97,107,99,107,103,107,0,105],
[91,99,93,99,91,105,88,98,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,94,104,99,96,108,101,98],
[112,0,117,100,105,111,112,110,100,113],
[105,94,0,94,103,98,99,106,103,111],
[117,111,117,0,102,114,110,108,99,109],
[107,106,108,109,0,117,111,113,106,105],
[112,100,113,97,94,0,119,116,109,106],
[115,99,112,101,100,92,0,113,103,111],
[103,101,105,103,98,95,98,0,97,105],
[110,111,108,112,105,102,108,114,0,113],
[113,98,100,102,106,105,100,106,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,94,110,96,97,105,111,109,110],
[99,0,91,103,82,93,93,115,101,98],
[117,120,0,120,98,105,107,122,108,126],
[101,108,91,0,90,91,95,92,113,103],
[115,129,113,121,0,95,125,121,122,129],
[114,118,106,120,116,0,108,137,112,105],
[106,118,104,116,86,103,0,123,100,101],
[100,96,89,119,90,74,88,0,93,99],
[102,110,103,98,89,99,111,118,0,111],
[101,113,85,108,82,106,110,112,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,117,81,111,102,88,109,90,111],
[114,0,117,93,98,103,87,122,110,88],
[94,94,0,92,81,96,86,101,99,102],
[130,118,119,0,102,117,108,123,118,116],
[100,113,130,109,0,106,109,136,103,95],
[109,108,115,94,105,0,95,136,91,108],
[123,124,125,103,102,116,0,133,107,109],
[102,89,110,88,75,75,78,0,81,89],
[121,101,112,93,108,120,104,130,0,107],
[100,123,109,95,116,103,102,122,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,97,111,98,123,100,103,102,104],
[129,0,87,114,97,98,103,127,113,105],
[114,124,0,123,103,103,121,121,119,131],
[100,97,88,0,113,83,95,132,120,115],
[113,114,108,98,0,91,95,102,105,121],
[88,113,108,128,120,0,120,124,114,129],
[111,108,90,116,116,91,0,124,115,121],
[108,84,90,79,109,87,87,0,100,103],
[109,98,92,91,106,97,96,111,0,95],
[107,106,80,96,90,82,90,108,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,120,111,105,108,116,109,105,98],
[107,0,115,112,102,103,114,111,112,110],
[91,96,0,93,94,86,97,88,91,95],
[100,99,118,0,94,104,104,111,105,101],
[106,109,117,117,0,98,113,102,118,109],
[103,108,125,107,113,0,125,110,108,110],
[95,97,114,107,98,86,0,105,108,92],
[102,100,123,100,109,101,106,0,94,99],
[106,99,120,106,93,103,103,117,0,111],
[113,101,116,110,102,101,119,112,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,114,108,104,107,122,108,111],
[111,0,102,105,113,107,103,115,108,106],
[110,109,0,100,108,110,105,112,114,106],
[97,106,111,0,108,108,107,110,100,107],
[103,98,103,103,0,102,108,111,106,99],
[107,104,101,103,109,0,109,112,106,105],
[104,108,106,104,103,102,0,106,101,104],
[89,96,99,101,100,99,105,0,106,99],
[103,103,97,111,105,105,110,105,0,102],
[100,105,105,104,112,106,107,112,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,119,124,102,129,109,124,116,117],
[105,0,112,131,114,123,110,109,139,115],
[92,99,0,122,119,117,104,110,125,102],
[87,80,89,0,104,116,78,110,97,102],
[109,97,92,107,0,109,85,112,127,91],
[82,88,94,95,102,0,103,103,112,93],
[102,101,107,133,126,108,0,113,128,117],
[87,102,101,101,99,108,98,0,115,111],
[95,72,86,114,84,99,83,96,0,97],
[94,96,109,109,120,118,94,100,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,115,94,109,89,100,99,96],
[101,0,122,127,117,99,75,100,119,99],
[101,89,0,105,105,88,84,96,99,77],
[96,84,106,0,120,81,79,94,96,87],
[117,94,106,91,0,92,100,92,115,99],
[102,112,123,130,119,0,114,117,130,107],
[122,136,127,132,111,97,0,110,117,118],
[111,111,115,117,119,94,101,0,121,115],
[112,92,112,115,96,81,94,90,0,104],
[115,112,134,124,112,104,93,96,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,158,157,104,102,102,129,132,184],
[82,0,135,135,81,107,108,108,135,161],
[53,76,0,81,78,76,76,102,53,107],
[54,76,130,0,50,77,103,129,106,131],
[107,130,133,161,0,53,129,156,133,160],
[109,104,135,134,158,0,158,185,135,161],
[109,103,135,108,82,53,0,158,161,160],
[82,103,109,82,55,26,53,0,135,161],
[79,76,158,105,78,76,50,76,0,104],
[27,50,104,80,51,50,51,50,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,139,95,70,96,97,83,118,103],
[106,0,115,125,125,93,105,93,148,124],
[72,96,0,113,94,73,63,64,117,72],
[116,86,98,0,74,75,107,54,130,85],
[141,86,117,137,0,117,97,65,138,114],
[115,118,138,136,94,0,127,106,140,86],
[114,106,148,104,114,84,0,82,128,103],
[128,118,147,157,146,105,129,0,169,126],
[93,63,94,81,73,71,83,42,0,93],
[108,87,139,126,97,125,108,85,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,93,99,101,115,87,98,100,108],
[106,0,102,122,131,114,102,102,109,130],
[118,109,0,126,108,121,97,118,126,120],
[112,89,85,0,110,109,96,87,124,110],
[110,80,103,101,0,100,83,87,94,114],
[96,97,90,102,111,0,91,99,95,111],
[124,109,114,115,128,120,0,123,103,131],
[113,109,93,124,124,112,88,0,102,112],
[111,102,85,87,117,116,108,109,0,107],
[103,81,91,101,97,100,80,99,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,126,103,109,106,115,111,107],
[114,0,115,129,112,119,103,114,105,107],
[105,96,0,119,96,116,114,109,103,103],
[85,82,92,0,92,95,98,90,91,83],
[108,99,115,119,0,110,114,128,105,113],
[102,92,95,116,101,0,103,95,112,84],
[105,108,97,113,97,108,0,102,103,86],
[96,97,102,121,83,116,109,0,115,97],
[100,106,108,120,106,99,108,96,0,92],
[104,104,108,128,98,127,125,114,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,113,114,96,103,108,148,100,96],
[98,0,82,90,79,98,105,142,112,114],
[98,129,0,129,103,94,120,129,122,128],
[97,121,82,0,87,96,108,127,116,98],
[115,132,108,124,0,121,115,133,100,116],
[108,113,117,115,90,0,105,108,106,130],
[103,106,91,103,96,106,0,120,88,127],
[63,69,82,84,78,103,91,0,80,116],
[111,99,89,95,111,105,123,131,0,119],
[115,97,83,113,95,81,84,95,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,89,103,105,94,99,101,91,84],
[110,0,96,103,118,108,99,107,105,92],
[122,115,0,113,131,119,117,112,111,97],
[108,108,98,0,106,100,108,107,93,101],
[106,93,80,105,0,99,101,105,106,95],
[117,103,92,111,112,0,107,102,100,109],
[112,112,94,103,110,104,0,109,110,98],
[110,104,99,104,106,109,102,0,107,91],
[120,106,100,118,105,111,101,104,0,89],
[127,119,114,110,116,102,113,120,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,127,89,91,110,101,94,113,73],
[109,0,123,98,91,103,113,110,107,84],
[84,88,0,87,76,107,84,86,97,66],
[122,113,124,0,101,128,124,108,98,99],
[120,120,135,110,0,144,115,99,130,113],
[101,108,104,83,67,0,101,107,103,96],
[110,98,127,87,96,110,0,92,102,87],
[117,101,125,103,112,104,119,0,96,104],
[98,104,114,113,81,108,109,115,0,102],
[138,127,145,112,98,115,124,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,127,118,123,115,118,112,122,110],
[107,0,89,95,100,116,99,110,102,101],
[84,122,0,110,116,104,104,109,114,108],
[93,116,101,0,112,102,99,96,112,115],
[88,111,95,99,0,114,104,108,113,111],
[96,95,107,109,97,0,97,101,99,96],
[93,112,107,112,107,114,0,99,112,116],
[99,101,102,115,103,110,112,0,106,108],
[89,109,97,99,98,112,99,105,0,102],
[101,110,103,96,100,115,95,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,122,126,126,103,108,107,107,106],
[112,0,97,123,113,118,123,122,116,124],
[89,114,0,127,107,104,119,116,104,106],
[85,88,84,0,101,69,81,102,89,78],
[85,98,104,110,0,97,102,114,102,107],
[108,93,107,142,114,0,121,120,105,111],
[103,88,92,130,109,90,0,123,107,109],
[104,89,95,109,97,91,88,0,92,106],
[104,95,107,122,109,106,104,119,0,111],
[105,87,105,133,104,100,102,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,96,106,126,113,97,110,112,120],
[102,0,102,106,109,102,96,116,114,112],
[115,109,0,99,122,104,105,99,112,119],
[105,105,112,0,112,114,95,112,117,127],
[85,102,89,99,0,104,105,103,98,110],
[98,109,107,97,107,0,97,108,107,111],
[114,115,106,116,106,114,0,125,103,110],
[101,95,112,99,108,103,86,0,108,108],
[99,97,99,94,113,104,108,103,0,108],
[91,99,92,84,101,100,101,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,125,128,128,146,103,147,146,65],
[105,0,125,65,83,103,82,62,61,107],
[86,86,0,86,108,147,84,86,106,86],
[83,146,125,0,83,125,147,83,83,127],
[83,128,103,128,0,124,147,125,83,107],
[65,108,64,86,87,0,105,108,65,108],
[108,129,127,64,64,106,0,64,84,108],
[64,149,125,128,86,103,147,0,64,107],
[65,150,105,128,128,146,127,147,0,108],
[146,104,125,84,104,103,103,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,103,137,115,134,121,134,106,110],
[91,0,90,116,111,135,116,122,108,114],
[108,121,0,105,127,138,111,125,120,110],
[74,95,106,0,101,128,92,119,102,88],
[96,100,84,110,0,112,100,113,94,107],
[77,76,73,83,99,0,102,97,93,76],
[90,95,100,119,111,109,0,137,104,120],
[77,89,86,92,98,114,74,0,96,87],
[105,103,91,109,117,118,107,115,0,99],
[101,97,101,123,104,135,91,124,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,125,97,119,104,104,128,97],
[106,0,103,135,108,126,98,105,129,105],
[104,108,0,132,100,100,111,112,115,109],
[86,76,79,0,85,92,81,90,103,84],
[114,103,111,126,0,112,101,101,143,99],
[92,85,111,119,99,0,90,113,117,89],
[107,113,100,130,110,121,0,116,119,111],
[107,106,99,121,110,98,95,0,110,99],
[83,82,96,108,68,94,92,101,0,57],
[114,106,102,127,112,122,100,112,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,95,117,100,113,121,109,101,119],
[88,0,90,96,108,113,125,112,96,120],
[116,121,0,119,109,113,121,118,94,130],
[94,115,92,0,104,99,129,110,94,118],
[111,103,102,107,0,104,117,108,112,112],
[98,98,98,112,107,0,111,111,108,126],
[90,86,90,82,94,100,0,105,90,96],
[102,99,93,101,103,100,106,0,77,119],
[110,115,117,117,99,103,121,134,0,142],
[92,91,81,93,99,85,115,92,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,112,110,108,103,117,112,108,105],
[114,0,124,106,123,113,108,104,113,119],
[99,87,0,96,110,109,103,109,99,95],
[101,105,115,0,105,104,95,105,128,87],
[103,88,101,106,0,96,107,100,108,100],
[108,98,102,107,115,0,110,109,109,97],
[94,103,108,116,104,101,0,114,117,92],
[99,107,102,106,111,102,97,0,107,89],
[103,98,112,83,103,102,94,104,0,97],
[106,92,116,124,111,114,119,122,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,94,124,98,106,94,116,104,101],
[91,0,78,96,85,93,76,107,76,93],
[117,133,0,113,125,111,102,113,103,102],
[87,115,98,0,95,112,86,111,82,90],
[113,126,86,116,0,113,115,127,118,109],
[105,118,100,99,98,0,87,111,101,97],
[117,135,109,125,96,124,0,112,128,102],
[95,104,98,100,84,100,99,0,91,82],
[107,135,108,129,93,110,83,120,0,104],
[110,118,109,121,102,114,109,129,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,89,129,101,109,101,114,110,123],
[111,0,119,127,131,130,94,117,113,113],
[122,92,0,135,99,104,111,110,114,94],
[82,84,76,0,97,107,93,99,99,107],
[110,80,112,114,0,104,104,111,118,111],
[102,81,107,104,107,0,94,117,112,104],
[110,117,100,118,107,117,0,100,115,100],
[97,94,101,112,100,94,111,0,107,102],
[101,98,97,112,93,99,96,104,0,101],
[88,98,117,104,100,107,111,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,92,86,107,92,90,84,100,93],
[121,0,108,103,122,105,115,102,104,111],
[119,103,0,90,106,95,110,87,104,108],
[125,108,121,0,121,110,112,107,103,106],
[104,89,105,90,0,92,100,81,97,94],
[119,106,116,101,119,0,108,103,107,111],
[121,96,101,99,111,103,0,92,107,104],
[127,109,124,104,130,108,119,0,116,115],
[111,107,107,108,114,104,104,95,0,111],
[118,100,103,105,117,100,107,96,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,98,112,98,95,112,112,114,96],
[116,0,95,106,101,106,110,111,101,112],
[113,116,0,102,109,103,121,114,104,105],
[99,105,109,0,100,113,110,109,102,98],
[113,110,102,111,0,106,113,112,115,107],
[116,105,108,98,105,0,106,109,101,107],
[99,101,90,101,98,105,0,102,107,99],
[99,100,97,102,99,102,109,0,87,92],
[97,110,107,109,96,110,104,124,0,110],
[115,99,106,113,104,104,112,119,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,97,98,111,92,108,98,90,106],
[96,0,97,106,107,94,100,106,96,103],
[114,114,0,115,98,101,99,98,106,118],
[113,105,96,0,111,105,103,96,87,92],
[100,104,113,100,0,102,114,97,101,101],
[119,117,110,106,109,0,117,125,102,115],
[103,111,112,108,97,94,0,93,106,98],
[113,105,113,115,114,86,118,0,104,108],
[121,115,105,124,110,109,105,107,0,112],
[105,108,93,119,110,96,113,103,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,101,102,93,112,86,96,122,103],
[104,0,119,126,93,117,123,98,115,75],
[110,92,0,112,98,114,113,93,128,95],
[109,85,99,0,86,83,86,79,101,89],
[118,118,113,125,0,104,110,106,139,119],
[99,94,97,128,107,0,109,103,102,89],
[125,88,98,125,101,102,0,88,105,114],
[115,113,118,132,105,108,123,0,121,106],
[89,96,83,110,72,109,106,90,0,82],
[108,136,116,122,92,122,97,105,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,90,103,112,80,79,129,98,115],
[82,0,84,66,86,62,75,106,78,101],
[121,127,0,125,131,108,99,139,107,99],
[108,145,86,0,103,104,95,149,91,131],
[99,125,80,108,0,82,79,140,91,107],
[131,149,103,107,129,0,122,139,106,136],
[132,136,112,116,132,89,0,142,103,124],
[82,105,72,62,71,72,69,0,74,101],
[113,133,104,120,120,105,108,137,0,123],
[96,110,112,80,104,75,87,110,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,101,121,98,105,125,89,86,100],
[103,0,101,131,114,106,119,97,93,100],
[110,110,0,117,105,99,112,104,104,89],
[90,80,94,0,99,85,106,90,77,75],
[113,97,106,112,0,117,116,90,111,107],
[106,105,112,126,94,0,111,90,90,115],
[86,92,99,105,95,100,0,94,81,95],
[122,114,107,121,121,121,117,0,102,112],
[125,118,107,134,100,121,130,109,0,86],
[111,111,122,136,104,96,116,99,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,105,101,104,108,96,109,96,99],
[110,0,103,111,106,112,104,108,107,107],
[106,108,0,100,106,112,95,108,107,108],
[110,100,111,0,105,110,99,109,104,102],
[107,105,105,106,0,107,102,116,100,108],
[103,99,99,101,104,0,97,112,98,100],
[115,107,116,112,109,114,0,115,104,106],
[102,103,103,102,95,99,96,0,96,101],
[115,104,104,107,111,113,107,115,0,108],
[112,104,103,109,103,111,105,110,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,98,117,89,106,109,105,92,80],
[121,0,93,102,86,91,102,110,94,87],
[113,118,0,103,104,97,101,102,97,97],
[94,109,108,0,84,101,98,98,94,87],
[122,125,107,127,0,91,122,113,116,109],
[105,120,114,110,120,0,109,107,111,97],
[102,109,110,113,89,102,0,101,109,78],
[106,101,109,113,98,104,110,0,110,91],
[119,117,114,117,95,100,102,101,0,77],
[131,124,114,124,102,114,133,120,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,69,93,71,93,47,139,23,70],
[118,0,118,70,119,94,94,164,116,72],
[142,93,0,118,72,92,93,140,93,143],
[118,141,93,0,94,92,117,118,92,141],
[140,92,139,117,0,115,92,211,45,117],
[118,117,119,119,96,0,118,141,93,96],
[164,117,118,94,119,93,0,188,93,143],
[72,47,71,93,0,70,23,0,23,48],
[188,95,118,119,166,118,118,188,0,119],
[141,139,68,70,94,115,68,163,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,107,99,97,107,100,101,112,99],
[101,0,112,88,94,108,91,98,110,98],
[104,99,0,84,101,108,94,98,100,109],
[112,123,127,0,101,116,100,113,116,110],
[114,117,110,110,0,114,103,104,108,106],
[104,103,103,95,97,0,102,109,98,101],
[111,120,117,111,108,109,0,114,99,99],
[110,113,113,98,107,102,97,0,93,106],
[99,101,111,95,103,113,112,118,0,105],
[112,113,102,101,105,110,112,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,70,104,36,36,34,72,141,106],
[175,0,70,140,106,70,140,70,177,106],
[141,141,0,140,71,143,70,106,177,72],
[107,71,71,0,71,71,71,107,107,72],
[175,105,140,140,0,175,140,70,211,104],
[175,141,68,140,36,0,104,70,175,104],
[177,71,141,140,71,107,0,107,143,106],
[139,141,105,104,141,141,104,0,141,70],
[70,34,34,104,0,36,68,70,0,70],
[105,105,139,139,107,107,105,141,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,115,114,110,99,122,118,107,107],
[106,0,115,124,100,90,100,111,109,86],
[96,96,0,111,112,106,118,106,109,100],
[97,87,100,0,108,102,105,106,93,101],
[101,111,99,103,0,99,98,110,88,87],
[112,121,105,109,112,0,116,121,114,96],
[89,111,93,106,113,95,0,116,97,103],
[93,100,105,105,101,90,95,0,103,97],
[104,102,102,118,123,97,114,108,0,90],
[104,125,111,110,124,115,108,114,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,101,114,120,118,104,104,126,108],
[103,0,108,96,123,83,108,81,105,95],
[110,103,0,97,121,110,105,90,110,101],
[97,115,114,0,129,96,118,104,115,116],
[91,88,90,82,0,81,100,92,88,101],
[93,128,101,115,130,0,103,92,100,113],
[107,103,106,93,111,108,0,109,109,111],
[107,130,121,107,119,119,102,0,107,105],
[85,106,101,96,123,111,102,104,0,118],
[103,116,110,95,110,98,100,106,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,101,102,100,104,108,100,110,98],
[102,0,112,103,97,105,105,102,111,100],
[110,99,0,102,97,117,102,101,117,92],
[109,108,109,0,99,120,106,107,120,105],
[111,114,114,112,0,105,107,102,121,106],
[107,106,94,91,106,0,104,104,101,100],
[103,106,109,105,104,107,0,104,110,104],
[111,109,110,104,109,107,107,0,114,106],
[101,100,94,91,90,110,101,97,0,92],
[113,111,119,106,105,111,107,105,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,95,131,122,102,104,78,93,103],
[99,0,98,126,129,116,86,98,128,127],
[116,113,0,100,126,124,116,101,123,140],
[80,85,111,0,97,89,68,66,99,106],
[89,82,85,114,0,110,81,96,108,123],
[109,95,87,122,101,0,91,106,111,111],
[107,125,95,143,130,120,0,127,124,117],
[133,113,110,145,115,105,84,0,133,113],
[118,83,88,112,103,100,87,78,0,116],
[108,84,71,105,88,100,94,98,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,99,102,104,107,109,105,116],
[108,0,96,99,101,95,104,94,110,100],
[108,115,0,112,104,111,113,103,117,108],
[112,112,99,0,113,107,119,101,114,116],
[109,110,107,98,0,98,110,99,100,109],
[107,116,100,104,113,0,102,97,113,104],
[104,107,98,92,101,109,0,80,108,105],
[102,117,108,110,112,114,131,0,116,114],
[106,101,94,97,111,98,103,95,0,102],
[95,111,103,95,102,107,106,97,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,106,105,87,112,87,93,107,97],
[123,0,115,102,105,130,95,111,122,129],
[105,96,0,104,103,121,86,114,111,89],
[106,109,107,0,94,125,100,109,108,123],
[124,106,108,117,0,130,103,112,113,94],
[99,81,90,86,81,0,85,90,88,79],
[124,116,125,111,108,126,0,119,87,116],
[118,100,97,102,99,121,92,0,112,100],
[104,89,100,103,98,123,124,99,0,94],
[114,82,122,88,117,132,95,111,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,133,160,134,186,81,107,133,107],
[78,0,185,132,105,158,132,105,105,79],
[78,26,0,80,79,133,54,79,80,27],
[51,79,131,0,53,158,80,26,105,25],
[77,106,132,158,0,131,80,104,131,132],
[25,53,78,53,80,0,54,53,52,52],
[130,79,157,131,131,157,0,157,157,105],
[104,106,132,185,107,158,54,0,158,105],
[78,106,131,106,80,159,54,53,0,79],
[104,132,184,186,79,159,106,106,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,102,95,111,112,104,103,88,112],
[121,0,101,111,111,116,110,111,103,111],
[109,110,0,96,119,103,109,106,107,100],
[116,100,115,0,124,114,110,105,107,111],
[100,100,92,87,0,109,109,111,99,113],
[99,95,108,97,102,0,103,104,104,102],
[107,101,102,101,102,108,0,102,99,91],
[108,100,105,106,100,107,109,0,106,112],
[123,108,104,104,112,107,112,105,0,104],
[99,100,111,100,98,109,120,99,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,97,97,103,86,114,93,122],
[108,0,101,103,101,96,90,110,105,107],
[108,110,0,101,96,97,90,114,106,122],
[114,108,110,0,120,107,105,122,108,119],
[114,110,115,91,0,96,106,113,107,110],
[108,115,114,104,115,0,92,118,114,116],
[125,121,121,106,105,119,0,119,102,120],
[97,101,97,89,98,93,92,0,97,110],
[118,106,105,103,104,97,109,114,0,115],
[89,104,89,92,101,95,91,101,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,88,93,106,95,99,105,112,92],
[119,0,96,100,128,109,99,109,93,110],
[123,115,0,113,113,124,103,123,119,99],
[118,111,98,0,113,105,101,113,126,92],
[105,83,98,98,0,87,87,100,97,99],
[116,102,87,106,124,0,103,102,116,86],
[112,112,108,110,124,108,0,121,96,91],
[106,102,88,98,111,109,90,0,98,100],
[99,118,92,85,114,95,115,113,0,91],
[119,101,112,119,112,125,120,111,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,103,101,99,99,96,101,96,102],
[110,0,109,114,105,88,111,102,106,100],
[108,102,0,105,107,98,109,104,105,97],
[110,97,106,0,98,81,112,92,96,98],
[112,106,104,113,0,96,107,110,93,107],
[112,123,113,130,115,0,125,104,121,122],
[115,100,102,99,104,86,0,99,98,101],
[110,109,107,119,101,107,112,0,102,105],
[115,105,106,115,118,90,113,109,0,109],
[109,111,114,113,104,89,110,106,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,101,110,120,105,115,104,102],
[105,0,120,111,111,125,119,116,111,108],
[99,91,0,107,110,113,101,114,109,105],
[110,100,104,0,115,117,106,126,108,107],
[101,100,101,96,0,109,106,108,101,105],
[91,86,98,94,102,0,93,108,91,94],
[106,92,110,105,105,118,0,118,115,106],
[96,95,97,85,103,103,93,0,107,93],
[107,100,102,103,110,120,96,104,0,106],
[109,103,106,104,106,117,105,118,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,116,118,119,100,111,97,111],
[107,0,102,107,92,116,102,104,102,99],
[99,109,0,107,115,111,108,114,108,119],
[95,104,104,0,100,100,101,103,101,127],
[93,119,96,111,0,114,101,109,97,125],
[92,95,100,111,97,0,108,110,84,116],
[111,109,103,110,110,103,0,112,90,124],
[100,107,97,108,102,101,99,0,87,104],
[114,109,103,110,114,127,121,124,0,122],
[100,112,92,84,86,95,87,107,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,98,94,95,99,99,100,96,98],
[105,0,112,97,112,101,104,102,107,101],
[113,99,0,103,107,108,103,101,99,108],
[117,114,108,0,110,118,110,96,115,104],
[116,99,104,101,0,110,120,97,112,108],
[112,110,103,93,101,0,100,106,111,110],
[112,107,108,101,91,111,0,107,97,108],
[111,109,110,115,114,105,104,0,111,104],
[115,104,112,96,99,100,114,100,0,107],
[113,110,103,107,103,101,103,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,119,104,106,109,105,106,113,113],
[103,0,113,100,104,89,110,97,109,96],
[92,98,0,100,109,95,114,104,104,105],
[107,111,111,0,113,94,110,100,106,108],
[105,107,102,98,0,88,109,102,111,103],
[102,122,116,117,123,0,114,104,109,114],
[106,101,97,101,102,97,0,98,99,98],
[105,114,107,111,109,107,113,0,111,113],
[98,102,107,105,100,102,112,100,0,101],
[98,115,106,103,108,97,113,98,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,113,110,105,103,114,114,123,121],
[103,0,109,104,107,84,103,100,114,98],
[98,102,0,98,97,102,110,106,107,93],
[101,107,113,0,112,115,114,114,108,110],
[106,104,114,99,0,99,114,107,106,98],
[108,127,109,96,112,0,125,106,111,115],
[97,108,101,97,97,86,0,99,106,108],
[97,111,105,97,104,105,112,0,107,109],
[88,97,104,103,105,100,105,104,0,111],
[90,113,118,101,113,96,103,102,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,107,91,113,98,108,65,131,95],
[133,0,120,125,123,133,107,94,128,132],
[104,91,0,108,97,121,89,91,110,119],
[120,86,103,0,108,108,86,91,119,107],
[98,88,114,103,0,117,119,85,122,138],
[113,78,90,103,94,0,69,68,112,108],
[103,104,122,125,92,142,0,104,138,132],
[146,117,120,120,126,143,107,0,135,103],
[80,83,101,92,89,99,73,76,0,95],
[116,79,92,104,73,103,79,108,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,88,135,107,132,108,108,107,122],
[85,0,77,92,109,94,69,102,109,93],
[123,134,0,150,114,109,120,99,118,149],
[76,119,61,0,97,92,102,123,76,115],
[104,102,97,114,0,110,105,109,104,105],
[79,117,102,119,101,0,96,110,115,109],
[103,142,91,109,106,115,0,118,74,115],
[103,109,112,88,102,101,93,0,110,95],
[104,102,93,135,107,96,137,101,0,117],
[89,118,62,96,106,102,96,116,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,103,96,89,101,94,100,85],
[111,0,112,100,106,95,105,106,103,106],
[101,99,0,109,101,93,91,94,101,89],
[108,111,102,0,101,94,98,88,104,87],
[115,105,110,110,0,97,91,113,100,103],
[122,116,118,117,114,0,102,114,110,119],
[110,106,120,113,120,109,0,106,103,99],
[117,105,117,123,98,97,105,0,119,107],
[111,108,110,107,111,101,108,92,0,110],
[126,105,122,124,108,92,112,104,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,98,109,105,133,104,111,108,115],
[100,0,86,101,106,121,110,95,110,112],
[113,125,0,113,124,109,106,104,105,133],
[102,110,98,0,110,97,92,96,89,110],
[106,105,87,101,0,105,91,94,100,110],
[78,90,102,114,106,0,98,108,93,114],
[107,101,105,119,120,113,0,92,102,111],
[100,116,107,115,117,103,119,0,101,121],
[103,101,106,122,111,118,109,110,0,128],
[96,99,78,101,101,97,100,90,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,106,139,98,115,135,126,94,129],
[84,0,83,80,84,95,100,82,78,90],
[105,128,0,109,85,139,99,105,104,96],
[72,131,102,0,83,103,102,124,90,104],
[113,127,126,128,0,122,108,99,110,110],
[96,116,72,108,89,0,84,100,82,99],
[76,111,112,109,103,127,0,96,97,97],
[85,129,106,87,112,111,115,0,96,112],
[117,133,107,121,101,129,114,115,0,121],
[82,121,115,107,101,112,114,99,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,110,109,130,116,106,99,107,112],
[92,0,119,104,128,102,99,94,94,112],
[101,92,0,121,121,104,112,116,103,100],
[102,107,90,0,119,106,118,114,99,109],
[81,83,90,92,0,90,92,86,89,90],
[95,109,107,105,121,0,103,110,116,100],
[105,112,99,93,119,108,0,107,103,112],
[112,117,95,97,125,101,104,0,97,114],
[104,117,108,112,122,95,108,114,0,111],
[99,99,111,102,121,111,99,97,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,118,98,127,96,105,118,137,106],
[101,0,120,110,118,109,104,112,117,105],
[93,91,0,88,103,87,91,100,108,92],
[113,101,123,0,127,111,118,115,135,103],
[84,93,108,84,0,98,93,94,111,95],
[115,102,124,100,113,0,116,123,126,103],
[106,107,120,93,118,95,0,114,117,102],
[93,99,111,96,117,88,97,0,120,100],
[74,94,103,76,100,85,94,91,0,92],
[105,106,119,108,116,108,109,111,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,52,104,158,104,104,104,52,52],
[54,0,0,52,54,0,52,52,54,52],
[159,211,0,211,158,157,158,104,106,104],
[107,159,0,0,106,105,52,52,54,0],
[53,157,53,105,0,53,52,104,52,52],
[107,211,54,106,158,0,158,104,106,52],
[107,159,53,159,159,53,0,104,54,0],
[107,159,107,159,107,107,107,0,54,0],
[159,157,105,157,159,105,157,157,0,157],
[159,159,107,211,159,159,211,211,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,72,104,36,105,107,72,105,36],
[175,0,105,140,71,104,105,71,104,105],
[139,106,0,139,70,139,71,105,69,0],
[107,71,72,0,36,71,72,72,36,72],
[175,140,141,175,0,175,105,106,105,106],
[106,107,72,140,36,0,36,71,34,36],
[104,106,140,139,106,175,0,70,140,71],
[139,140,106,139,105,140,141,0,105,70],
[106,107,142,175,106,177,71,106,0,71],
[175,106,211,139,105,175,140,141,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,83,95,107,80,87,113,101,92],
[97,0,108,108,126,98,96,113,115,100],
[128,103,0,100,122,111,103,122,120,118],
[116,103,111,0,113,120,111,122,113,112],
[104,85,89,98,0,78,93,104,110,88],
[131,113,100,91,133,0,110,113,123,108],
[124,115,108,100,118,101,0,106,113,122],
[98,98,89,89,107,98,105,0,105,102],
[110,96,91,98,101,88,98,106,0,90],
[119,111,93,99,123,103,89,109,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,102,97,106,109,98,117,111,127],
[100,0,126,111,119,109,106,128,99,106],
[109,85,0,87,100,91,94,96,96,106],
[114,100,124,0,113,105,89,111,103,123],
[105,92,111,98,0,94,104,108,111,111],
[102,102,120,106,117,0,105,119,95,105],
[113,105,117,122,107,106,0,122,120,129],
[94,83,115,100,103,92,89,0,116,97],
[100,112,115,108,100,116,91,95,0,110],
[84,105,105,88,100,106,82,114,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,86,116,101,103,112,92,96,98],
[111,0,115,117,116,114,131,109,101,115],
[125,96,0,115,104,119,118,90,98,89],
[95,94,96,0,108,114,114,85,90,108],
[110,95,107,103,0,119,110,56,95,113],
[108,97,92,97,92,0,109,88,106,111],
[99,80,93,97,101,102,0,89,75,111],
[119,102,121,126,155,123,122,0,110,115],
[115,110,113,121,116,105,136,101,0,101],
[113,96,122,103,98,100,100,96,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,104,115,109,100,89,103,90,92],
[116,0,101,114,93,100,104,111,90,100],
[107,110,0,106,99,95,106,111,110,108],
[96,97,105,0,104,100,93,108,87,95],
[102,118,112,107,0,103,112,109,103,106],
[111,111,116,111,108,0,94,109,104,111],
[122,107,105,118,99,117,0,118,102,117],
[108,100,100,103,102,102,93,0,101,91],
[121,121,101,124,108,107,109,110,0,110],
[119,111,103,116,105,100,94,120,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,106,106,94,90,102,98,97,105],
[110,0,121,102,99,92,103,103,112,127],
[105,90,0,92,87,96,86,89,97,98],
[105,109,119,0,113,112,115,102,115,121],
[117,112,124,98,0,106,103,104,112,110],
[121,119,115,99,105,0,96,102,107,110],
[109,108,125,96,108,115,0,108,105,110],
[113,108,122,109,107,109,103,0,120,116],
[114,99,114,96,99,104,106,91,0,104],
[106,84,113,90,101,101,101,95,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,92,78,106,74,88,96,101],
[105,0,94,104,98,126,100,112,112,116],
[103,117,0,104,99,119,98,126,107,118],
[119,107,107,0,108,116,104,117,105,110],
[133,113,112,103,0,130,104,119,99,100],
[105,85,92,95,81,0,102,110,100,95],
[137,111,113,107,107,109,0,114,93,116],
[123,99,85,94,92,101,97,0,97,96],
[115,99,104,106,112,111,118,114,0,104],
[110,95,93,101,111,116,95,115,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,94,105,96,97,105,100,108,97],
[117,0,111,112,114,112,121,119,111,100],
[117,100,0,110,102,113,105,118,108,116],
[106,99,101,0,107,99,98,110,101,102],
[115,97,109,104,0,107,104,103,106,111],
[114,99,98,112,104,0,110,106,93,112],
[106,90,106,113,107,101,0,107,113,105],
[111,92,93,101,108,105,104,0,99,99],
[103,100,103,110,105,118,98,112,0,105],
[114,111,95,109,100,99,106,112,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,120,106,103,118,117,118,121,124],
[98,0,113,116,108,108,123,115,108,104],
[91,98,0,100,92,97,108,100,91,95],
[105,95,111,0,102,98,102,107,113,100],
[108,103,119,109,0,106,111,117,108,113],
[93,103,114,113,105,0,109,106,113,109],
[94,88,103,109,100,102,0,108,99,108],
[93,96,111,104,94,105,103,0,105,97],
[90,103,120,98,103,98,112,106,0,109],
[87,107,116,111,98,102,103,114,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,102,118,107,102,115,97,103,115],
[100,0,104,116,110,98,112,103,109,109],
[109,107,0,123,115,113,115,103,110,107],
[93,95,88,0,91,90,102,84,96,95],
[104,101,96,120,0,102,113,108,118,111],
[109,113,98,121,109,0,117,104,111,113],
[96,99,96,109,98,94,0,103,105,106],
[114,108,108,127,103,107,108,0,118,108],
[108,102,101,115,93,100,106,93,0,106],
[96,102,104,116,100,98,105,103,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,101,106,108,102,97,108,108,107],
[112,0,111,101,109,108,101,108,112,107],
[110,100,0,119,114,112,103,107,112,106],
[105,110,92,0,114,99,106,111,101,105],
[103,102,97,97,0,97,106,112,110,103],
[109,103,99,112,114,0,105,103,107,107],
[114,110,108,105,105,106,0,106,114,113],
[103,103,104,100,99,108,105,0,105,105],
[103,99,99,110,101,104,97,106,0,110],
[104,104,105,106,108,104,98,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,109,105,95,93,100,96,104,100],
[101,0,103,108,101,101,100,95,107,100],
[102,108,0,108,111,107,99,95,99,94],
[106,103,103,0,92,95,101,115,92,100],
[116,110,100,119,0,109,119,107,110,113],
[118,110,104,116,102,0,108,99,102,98],
[111,111,112,110,92,103,0,102,100,98],
[115,116,116,96,104,112,109,0,103,109],
[107,104,112,119,101,109,111,108,0,93],
[111,111,117,111,98,113,113,102,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,97,106,106,98,100,101,112,105],
[109,0,91,82,112,95,118,92,97,85],
[114,120,0,111,118,111,105,111,117,105],
[105,129,100,0,112,104,125,101,131,97],
[105,99,93,99,0,109,100,89,95,90],
[113,116,100,107,102,0,120,97,105,91],
[111,93,106,86,111,91,0,78,113,80],
[110,119,100,110,122,114,133,0,112,114],
[99,114,94,80,116,106,98,99,0,75],
[106,126,106,114,121,120,131,97,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,118,132,92,110,128,109,89,124],
[94,0,131,140,131,118,125,109,115,131],
[93,80,0,120,96,105,112,71,99,116],
[79,71,91,0,89,85,100,73,80,99],
[119,80,115,122,0,105,112,80,93,131],
[101,93,106,126,106,0,108,97,89,93],
[83,86,99,111,99,103,0,73,74,106],
[102,102,140,138,131,114,138,0,111,133],
[122,96,112,131,118,122,137,100,0,130],
[87,80,95,112,80,118,105,78,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,112,112,108,127,130,96,98],
[98,0,102,103,108,116,123,118,108,106],
[104,109,0,112,113,115,123,112,101,96],
[99,108,99,0,116,115,120,128,98,100],
[99,103,98,95,0,102,119,117,87,94],
[103,95,96,96,109,0,104,116,89,95],
[84,88,88,91,92,107,0,98,88,87],
[81,93,99,83,94,95,113,0,90,81],
[115,103,110,113,124,122,123,121,0,96],
[113,105,115,111,117,116,124,130,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,107,120,101,107,96,104,102],
[102,0,95,93,88,97,111,97,91,110],
[104,116,0,109,122,97,114,108,104,118],
[104,118,102,0,106,117,114,105,99,112],
[91,123,89,105,0,110,105,101,91,108],
[110,114,114,94,101,0,107,102,106,107],
[104,100,97,97,106,104,0,107,91,110],
[115,114,103,106,110,109,104,0,105,121],
[107,120,107,112,120,105,120,106,0,128],
[109,101,93,99,103,104,101,90,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,105,98,108,112,101,100,106,102],
[90,0,104,85,98,102,95,110,97,96],
[106,107,0,104,100,92,90,99,118,103],
[113,126,107,0,98,112,101,113,105,114],
[103,113,111,113,0,117,108,112,115,109],
[99,109,119,99,94,0,101,103,110,107],
[110,116,121,110,103,110,0,114,109,105],
[111,101,112,98,99,108,97,0,121,98],
[105,114,93,106,96,101,102,90,0,103],
[109,115,108,97,102,104,106,113,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,114,108,114,105,108,107,103,115],
[94,0,109,104,113,114,106,101,99,111],
[97,102,0,95,108,113,103,103,93,111],
[103,107,116,0,117,108,98,101,97,110],
[97,98,103,94,0,101,104,95,89,114],
[106,97,98,103,110,0,105,101,101,114],
[103,105,108,113,107,106,0,103,106,115],
[104,110,108,110,116,110,108,0,109,120],
[108,112,118,114,122,110,105,102,0,121],
[96,100,100,101,97,97,96,91,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,85,85,97,87,102,91,94],
[110,0,90,105,90,103,97,109,100,110],
[114,121,0,113,94,108,105,115,116,104],
[126,106,98,0,114,106,108,113,116,110],
[126,121,117,97,0,109,102,115,117,105],
[114,108,103,105,102,0,100,119,109,113],
[124,114,106,103,109,111,0,116,115,118],
[109,102,96,98,96,92,95,0,98,92],
[120,111,95,95,94,102,96,113,0,102],
[117,101,107,101,106,98,93,119,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,107,105,119,110,115,124,101,113],
[99,0,97,109,113,125,110,119,88,85],
[104,114,0,112,120,116,125,107,105,113],
[106,102,99,0,104,106,92,95,110,101],
[92,98,91,107,0,97,94,102,94,92],
[101,86,95,105,114,0,85,102,82,103],
[96,101,86,119,117,126,0,110,94,108],
[87,92,104,116,109,109,101,0,100,99],
[110,123,106,101,117,129,117,111,0,123],
[98,126,98,110,119,108,103,112,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,110,111,103,109,103,98,115,100],
[107,0,98,98,95,96,110,95,116,104],
[101,113,0,113,103,104,106,104,111,97],
[100,113,98,0,93,92,94,91,95,101],
[108,116,108,118,0,92,98,96,106,106],
[102,115,107,119,119,0,114,107,116,111],
[108,101,105,117,113,97,0,97,106,106],
[113,116,107,120,115,104,114,0,107,110],
[96,95,100,116,105,95,105,104,0,100],
[111,107,114,110,105,100,105,101,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,109,105,109,109,105,110,94,86],
[108,0,117,102,111,107,112,107,103,85],
[102,94,0,79,114,91,94,107,101,87],
[106,109,132,0,119,86,116,103,121,108],
[102,100,97,92,0,96,90,103,91,82],
[102,104,120,125,115,0,111,117,111,102],
[106,99,117,95,121,100,0,104,109,89],
[101,104,104,108,108,94,107,0,101,92],
[117,108,110,90,120,100,102,110,0,93],
[125,126,124,103,129,109,122,119,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,99,104,109,105,109,103,97,115],
[102,0,111,107,108,106,113,111,97,111],
[112,100,0,104,95,113,116,112,91,107],
[107,104,107,0,105,100,109,110,108,111],
[102,103,116,106,0,117,121,111,102,113],
[106,105,98,111,94,0,123,108,96,112],
[102,98,95,102,90,88,0,110,86,97],
[108,100,99,101,100,103,101,0,99,112],
[114,114,120,103,109,115,125,112,0,128],
[96,100,104,100,98,99,114,99,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,110,107,104,120,107,121,106,118],
[87,0,105,82,86,99,96,99,84,111],
[101,106,0,78,92,115,105,111,92,103],
[104,129,133,0,103,122,109,124,109,117],
[107,125,119,108,0,121,120,123,101,119],
[91,112,96,89,90,0,86,105,92,109],
[104,115,106,102,91,125,0,110,94,112],
[90,112,100,87,88,106,101,0,88,99],
[105,127,119,102,110,119,117,123,0,120],
[93,100,108,94,92,102,99,112,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,113,113,91,118,98,110,110,128],
[111,0,129,117,114,100,137,134,113,122],
[98,82,0,128,89,121,104,119,104,115],
[98,94,83,0,87,119,104,117,95,107],
[120,97,122,124,0,111,108,105,100,131],
[93,111,90,92,100,0,95,105,93,118],
[113,74,107,107,103,116,0,140,107,118],
[101,77,92,94,106,106,71,0,102,108],
[101,98,107,116,111,118,104,109,0,121],
[83,89,96,104,80,93,93,103,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,127,121,128,134,114,96,113,97],
[120,0,123,154,140,122,130,108,125,103],
[84,88,0,106,137,119,106,72,89,96],
[90,57,105,0,126,106,100,88,119,83],
[83,71,74,85,0,97,89,75,64,76],
[77,89,92,105,114,0,113,105,93,92],
[97,81,105,111,122,98,0,101,123,99],
[115,103,139,123,136,106,110,0,129,117],
[98,86,122,92,147,118,88,82,0,83],
[114,108,115,128,135,119,112,94,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,47,86,68,84,75,101,98,100],
[108,0,78,96,90,97,79,77,122,99],
[164,133,0,127,98,124,111,120,151,130],
[125,115,84,0,108,132,96,114,131,132],
[143,121,113,103,0,126,115,105,125,109],
[127,114,87,79,85,0,83,124,122,109],
[136,132,100,115,96,128,0,129,135,121],
[110,134,91,97,106,87,82,0,125,116],
[113,89,60,80,86,89,76,86,0,97],
[111,112,81,79,102,102,90,95,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,91,90,109,90,104,92,120],
[106,0,100,103,77,109,94,101,120,124],
[102,111,0,114,107,101,100,110,114,115],
[120,108,97,0,114,111,116,121,124,126],
[121,134,104,97,0,121,110,116,125,119],
[102,102,110,100,90,0,90,111,94,121],
[121,117,111,95,101,121,0,116,119,132],
[107,110,101,90,95,100,95,0,103,112],
[119,91,97,87,86,117,92,108,0,100],
[91,87,96,85,92,90,79,99,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,79,98,89,104,77,97,87,92],
[132,0,104,124,108,99,107,119,106,114],
[132,107,0,116,107,116,103,122,96,110],
[113,87,95,0,104,113,88,85,93,102],
[122,103,104,107,0,107,92,119,100,102],
[107,112,95,98,104,0,94,118,91,113],
[134,104,108,123,119,117,0,104,93,117],
[114,92,89,126,92,93,107,0,93,89],
[124,105,115,118,111,120,118,118,0,105],
[119,97,101,109,109,98,94,122,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,112,97,100,109,106,104,95,111],
[88,0,103,96,102,103,99,106,106,117],
[99,108,0,94,99,106,94,97,103,101],
[114,115,117,0,123,125,107,116,119,105],
[111,109,112,88,0,107,106,109,111,104],
[102,108,105,86,104,0,95,106,103,107],
[105,112,117,104,105,116,0,110,120,117],
[107,105,114,95,102,105,101,0,105,107],
[116,105,108,92,100,108,91,106,0,107],
[100,94,110,106,107,104,94,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,114,113,115,105,107,103,111,101],
[110,0,100,110,87,88,113,106,92,96],
[97,111,0,108,87,108,123,102,87,84],
[98,101,103,0,91,87,111,101,91,88],
[96,124,124,120,0,114,127,119,119,109],
[106,123,103,124,97,0,116,118,102,122],
[104,98,88,100,84,95,0,91,88,83],
[108,105,109,110,92,93,120,0,95,85],
[100,119,124,120,92,109,123,116,0,113],
[110,115,127,123,102,89,128,126,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,120,115,115,102,104,119,103,104],
[97,0,99,91,104,97,90,98,85,97],
[91,112,0,98,97,100,98,103,96,95],
[96,120,113,0,108,108,96,110,93,105],
[96,107,114,103,0,103,111,105,103,110],
[109,114,111,103,108,0,105,103,99,109],
[107,121,113,115,100,106,0,111,107,104],
[92,113,108,101,106,108,100,0,95,104],
[108,126,115,118,108,112,104,116,0,113],
[107,114,116,106,101,102,107,107,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,94,96,92,88,90,109,101,87],
[110,0,107,97,105,86,97,102,113,102],
[117,104,0,101,102,99,110,121,111,109],
[115,114,110,0,116,96,106,117,106,91],
[119,106,109,95,0,99,103,116,100,102],
[123,125,112,115,112,0,112,123,113,96],
[121,114,101,105,108,99,0,120,113,101],
[102,109,90,94,95,88,91,0,96,87],
[110,98,100,105,111,98,98,115,0,85],
[124,109,102,120,109,115,110,124,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,101,63,114,118,123,131,84],
[111,0,111,90,78,124,122,120,114,94],
[101,100,0,87,64,108,105,113,104,93],
[110,121,124,0,100,120,134,101,109,107],
[148,133,147,111,0,143,130,137,127,89],
[97,87,103,91,68,0,121,97,104,105],
[93,89,106,77,81,90,0,97,90,66],
[88,91,98,110,74,114,114,0,112,94],
[80,97,107,102,84,107,121,99,0,107],
[127,117,118,104,122,106,145,117,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,103,110,113,119,106,112,114],
[97,0,109,97,100,89,92,94,113,105],
[99,102,0,96,106,105,93,93,106,110],
[108,114,115,0,115,108,108,102,114,112],
[101,111,105,96,0,100,103,95,114,99],
[98,122,106,103,111,0,104,100,117,112],
[92,119,118,103,108,107,0,94,120,112],
[105,117,118,109,116,111,117,0,115,119],
[99,98,105,97,97,94,91,96,0,100],
[97,106,101,99,112,99,99,92,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,95,107,108,114,96,92,105],
[103,0,118,112,104,104,113,100,107,107],
[103,93,0,99,105,94,104,86,106,113],
[116,99,112,0,114,106,111,98,99,106],
[104,107,106,97,0,98,107,90,106,96],
[103,107,117,105,113,0,114,112,103,108],
[97,98,107,100,104,97,0,90,99,98],
[115,111,125,113,121,99,121,0,109,116],
[119,104,105,112,105,108,112,102,0,111],
[106,104,98,105,115,103,113,95,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,123,120,103,103,116,108,115,103],
[111,0,111,95,103,106,117,98,102,100],
[88,100,0,107,103,107,99,105,111,98],
[91,116,104,0,99,93,120,102,100,93],
[108,108,108,112,0,116,126,115,121,104],
[108,105,104,118,95,0,128,101,107,89],
[95,94,112,91,85,83,0,99,104,97],
[103,113,106,109,96,110,112,0,110,100],
[96,109,100,111,90,104,107,101,0,108],
[108,111,113,118,107,122,114,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,130,118,99,109,140,118,113,119],
[102,0,108,112,89,96,116,124,118,98],
[81,103,0,105,71,92,107,93,109,88],
[93,99,106,0,93,107,123,111,106,97],
[112,122,140,118,0,100,140,117,127,113],
[102,115,119,104,111,0,115,116,114,96],
[71,95,104,88,71,96,0,110,105,79],
[93,87,118,100,94,95,101,0,109,98],
[98,93,102,105,84,97,106,102,0,89],
[92,113,123,114,98,115,132,113,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,109,98,102,92,111,97,101,112],
[114,0,105,108,118,108,107,109,94,113],
[102,106,0,107,102,95,105,109,98,106],
[113,103,104,0,102,95,108,110,102,105],
[109,93,109,109,0,96,108,98,101,102],
[119,103,116,116,115,0,112,116,105,121],
[100,104,106,103,103,99,0,101,101,108],
[114,102,102,101,113,95,110,0,97,113],
[110,117,113,109,110,106,110,114,0,104],
[99,98,105,106,109,90,103,98,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,112,101,106,102,105,112,116,113],
[104,0,113,108,105,98,111,113,115,115],
[99,98,0,93,101,104,101,107,104,105],
[110,103,118,0,107,113,108,104,105,110],
[105,106,110,104,0,107,95,111,104,103],
[109,113,107,98,104,0,110,118,109,103],
[106,100,110,103,116,101,0,107,103,99],
[99,98,104,107,100,93,104,0,105,112],
[95,96,107,106,107,102,108,106,0,109],
[98,96,106,101,108,108,112,99,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,124,131,118,125,130,109,114,123],
[108,0,135,118,123,130,104,114,120,112],
[87,76,0,110,100,108,100,98,107,109],
[80,93,101,0,97,109,105,89,106,93],
[93,88,111,114,0,118,102,94,110,107],
[86,81,103,102,93,0,94,87,104,94],
[81,107,111,106,109,117,0,95,114,102],
[102,97,113,122,117,124,116,0,114,114],
[97,91,104,105,101,107,97,97,0,104],
[88,99,102,118,104,117,109,97,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,94,90,95,85,103,103,88,91],
[115,0,106,113,113,101,116,110,109,111],
[117,105,0,107,117,102,114,114,99,109],
[121,98,104,0,113,111,120,115,117,116],
[116,98,94,98,0,89,118,106,104,106],
[126,110,109,100,122,0,114,117,109,105],
[108,95,97,91,93,97,0,97,92,100],
[108,101,97,96,105,94,114,0,97,99],
[123,102,112,94,107,102,119,114,0,106],
[120,100,102,95,105,106,111,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,88,82,82,96,108,113,65,100],
[118,0,115,119,114,106,109,97,106,124],
[123,96,0,93,87,111,87,99,63,93],
[129,92,118,0,116,105,88,95,80,118],
[129,97,124,95,0,129,114,105,76,105],
[115,105,100,106,82,0,84,118,73,112],
[103,102,124,123,97,127,0,126,84,109],
[98,114,112,116,106,93,85,0,89,109],
[146,105,148,131,135,138,127,122,0,138],
[111,87,118,93,106,99,102,102,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,93,116,115,96,90,109,92,98],
[91,0,91,115,102,90,95,90,104,93],
[118,120,0,122,106,114,103,123,112,110],
[95,96,89,0,106,90,83,95,93,94],
[96,109,105,105,0,105,98,95,95,98],
[115,121,97,121,106,0,106,128,111,116],
[121,116,108,128,113,105,0,120,109,120],
[102,121,88,116,116,83,91,0,108,103],
[119,107,99,118,116,100,102,103,0,114],
[113,118,101,117,113,95,91,108,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,118,104,108,96,121,129,117,136],
[99,0,80,93,85,70,89,100,86,87],
[93,131,0,117,99,93,114,128,115,132],
[107,118,94,0,107,99,105,115,122,111],
[103,126,112,104,0,98,130,120,126,106],
[115,141,118,112,113,0,125,134,101,107],
[90,122,97,106,81,86,0,116,101,110],
[82,111,83,96,91,77,95,0,92,106],
[94,125,96,89,85,110,110,119,0,117],
[75,124,79,100,105,104,101,105,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,111,95,93,108,89,100,107,96],
[112,0,129,115,107,116,98,107,116,111],
[100,82,0,91,92,103,92,91,103,111],
[116,96,120,0,107,118,107,99,115,109],
[118,104,119,104,0,115,109,107,120,118],
[103,95,108,93,96,0,98,88,113,102],
[122,113,119,104,102,113,0,99,107,115],
[111,104,120,112,104,123,112,0,112,110],
[104,95,108,96,91,98,104,99,0,109],
[115,100,100,102,93,109,96,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,103,117,95,107,105,102,113,109],
[95,0,96,90,87,91,111,98,98,89],
[108,115,0,105,102,113,106,109,108,103],
[94,121,106,0,108,100,116,107,107,102],
[116,124,109,103,0,124,113,121,116,115],
[104,120,98,111,87,0,112,112,106,112],
[106,100,105,95,98,99,0,102,99,102],
[109,113,102,104,90,99,109,0,91,96],
[98,113,103,104,95,105,112,120,0,99],
[102,122,108,109,96,99,109,115,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,107,106,103,90,120,102,110,96],
[117,0,88,85,99,94,116,83,90,91],
[104,123,0,96,109,120,105,101,97,110],
[105,126,115,0,110,100,111,119,95,95],
[108,112,102,101,0,104,100,95,93,95],
[121,117,91,111,107,0,121,98,101,103],
[91,95,106,100,111,90,0,75,89,97],
[109,128,110,92,116,113,136,0,102,113],
[101,121,114,116,118,110,122,109,0,113],
[115,120,101,116,116,108,114,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,121,106,94,125,98,105,88,112],
[101,0,111,106,106,123,92,93,88,104],
[90,100,0,88,80,111,102,108,100,102],
[105,105,123,0,104,122,103,104,96,104],
[117,105,131,107,0,121,111,125,107,123],
[86,88,100,89,90,0,83,97,97,97],
[113,119,109,108,100,128,0,112,105,117],
[106,118,103,107,86,114,99,0,95,116],
[123,123,111,115,104,114,106,116,0,118],
[99,107,109,107,88,114,94,95,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,101,112,102,112,94,108,105,104],
[105,0,94,106,95,118,94,103,109,108],
[110,117,0,116,103,107,113,113,105,104],
[99,105,95,0,92,105,96,101,100,93],
[109,116,108,119,0,119,99,106,111,120],
[99,93,104,106,92,0,96,94,98,100],
[117,117,98,115,112,115,0,106,106,113],
[103,108,98,110,105,117,105,0,117,121],
[106,102,106,111,100,113,105,94,0,118],
[107,103,107,118,91,111,98,90,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,141,95,163,117,141,119,93,143],
[92,0,141,117,68,115,141,117,117,117],
[70,70,0,117,70,117,117,141,93,141],
[116,94,94,0,116,116,139,93,163,141],
[48,143,141,95,0,119,141,119,93,119],
[94,96,94,95,92,0,117,143,117,141],
[70,70,94,72,70,94,0,96,70,120],
[92,94,70,118,92,68,115,0,115,141],
[118,94,118,48,118,94,141,96,0,96],
[68,94,70,70,92,70,91,70,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,74,100,89,82,114,98,90,101],
[114,0,97,118,116,104,117,112,112,113],
[137,114,0,118,120,118,125,115,112,101],
[111,93,93,0,102,95,104,103,96,90],
[122,95,91,109,0,112,111,105,100,105],
[129,107,93,116,99,0,117,111,104,103],
[97,94,86,107,100,94,0,102,100,98],
[113,99,96,108,106,100,109,0,105,108],
[121,99,99,115,111,107,111,106,0,107],
[110,98,110,121,106,108,113,103,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,94,101,95,98,110,102,98,95],
[118,0,112,105,115,98,126,113,110,105],
[117,99,0,118,111,106,111,103,115,116],
[110,106,93,0,106,99,113,101,108,101],
[116,96,100,105,0,101,122,107,104,103],
[113,113,105,112,110,0,116,106,108,102],
[101,85,100,98,89,95,0,100,101,95],
[109,98,108,110,104,105,111,0,104,103],
[113,101,96,103,107,103,110,107,0,101],
[116,106,95,110,108,109,116,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,96,102,93,100,101,106,97,110],
[111,0,99,102,94,99,92,105,100,106],
[115,112,0,111,101,100,98,112,100,109],
[109,109,100,0,103,107,103,113,95,104],
[118,117,110,108,0,113,101,114,102,115],
[111,112,111,104,98,0,106,103,96,107],
[110,119,113,108,110,105,0,115,116,113],
[105,106,99,98,97,108,96,0,101,99],
[114,111,111,116,109,115,95,110,0,109],
[101,105,102,107,96,104,98,112,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,99,106,101,98,97,102,102,86],
[116,0,100,107,93,94,108,109,104,101],
[112,111,0,111,93,107,98,105,103,86],
[105,104,100,0,96,91,100,97,95,97],
[110,118,118,115,0,94,112,116,95,105],
[113,117,104,120,117,0,104,116,119,106],
[114,103,113,111,99,107,0,105,104,107],
[109,102,106,114,95,95,106,0,99,88],
[109,107,108,116,116,92,107,112,0,107],
[125,110,125,114,106,105,104,123,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,111,108,107,104,122,110,105,102],
[122,0,103,124,117,123,121,106,106,109],
[100,108,0,113,131,106,111,112,105,102],
[103,87,98,0,116,102,116,105,104,95],
[104,94,80,95,0,98,116,101,102,92],
[107,88,105,109,113,0,112,107,91,103],
[89,90,100,95,95,99,0,83,84,84],
[101,105,99,106,110,104,128,0,103,101],
[106,105,106,107,109,120,127,108,0,98],
[109,102,109,116,119,108,127,110,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,133,112,132,133,92,111,113,152],
[80,0,77,97,114,118,97,76,77,113],
[78,134,0,75,114,154,95,94,57,135],
[99,114,136,0,114,117,114,112,97,153],
[79,97,97,97,0,116,77,75,98,114],
[78,93,57,94,95,0,74,113,97,114],
[119,114,116,97,134,137,0,77,98,153],
[100,135,117,99,136,98,134,0,77,153],
[98,134,154,114,113,114,113,134,0,154],
[59,98,76,58,97,97,58,58,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,112,108,116,112,106,100,112,103],
[100,0,108,104,109,116,108,107,105,93],
[99,103,0,107,115,115,114,100,120,92],
[103,107,104,0,121,103,107,103,116,107],
[95,102,96,90,0,105,102,93,91,95],
[99,95,96,108,106,0,124,101,111,94],
[105,103,97,104,109,87,0,109,100,97],
[111,104,111,108,118,110,102,0,96,104],
[99,106,91,95,120,100,111,115,0,104],
[108,118,119,104,116,117,114,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,139,129,103,138,103,124,110,105],
[103,0,115,122,106,120,120,111,122,126],
[72,96,0,114,96,107,96,89,96,114],
[82,89,97,0,109,114,111,96,80,101],
[108,105,115,102,0,137,118,90,110,117],
[73,91,104,97,74,0,79,92,98,111],
[108,91,115,100,93,132,0,101,112,126],
[87,100,122,115,121,119,110,0,86,107],
[101,89,115,131,101,113,99,125,0,104],
[106,85,97,110,94,100,85,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,106,97,110,113,100,109,96,111],
[98,0,101,93,103,103,96,97,97,93],
[105,110,0,98,111,110,108,111,107,110],
[114,118,113,0,115,119,101,107,101,103],
[101,108,100,96,0,112,98,105,93,100],
[98,108,101,92,99,0,94,92,96,96],
[111,115,103,110,113,117,0,113,102,111],
[102,114,100,104,106,119,98,0,94,108],
[115,114,104,110,118,115,109,117,0,121],
[100,118,101,108,111,115,100,103,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,95,107,102,106,111,98,98,119],
[112,0,104,106,113,107,126,106,106,106],
[116,107,0,107,104,103,105,102,100,114],
[104,105,104,0,99,106,110,101,97,110],
[109,98,107,112,0,108,116,116,105,96],
[105,104,108,105,103,0,127,103,96,107],
[100,85,106,101,95,84,0,111,89,110],
[113,105,109,110,95,108,100,0,103,111],
[113,105,111,114,106,115,122,108,0,117],
[92,105,97,101,115,104,101,100,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,87,92,93,101,84,104,91],
[112,0,102,101,103,108,108,92,110,101],
[112,109,0,111,113,118,107,95,122,105],
[124,110,100,0,113,114,108,96,121,97],
[119,108,98,98,0,109,100,87,117,92],
[118,103,93,97,102,0,98,92,101,92],
[110,103,104,103,111,113,0,106,109,109],
[127,119,116,115,124,119,105,0,118,127],
[107,101,89,90,94,110,102,93,0,85],
[120,110,106,114,119,119,102,84,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,88,117,100,108,106,93,95,109],
[112,0,114,115,104,109,114,104,107,116],
[123,97,0,122,103,102,107,102,101,118],
[94,96,89,0,94,97,93,93,86,107],
[111,107,108,117,0,103,109,93,106,110],
[103,102,109,114,108,0,103,108,99,115],
[105,97,104,118,102,108,0,102,102,107],
[118,107,109,118,118,103,109,0,111,112],
[116,104,110,125,105,112,109,100,0,121],
[102,95,93,104,101,96,104,99,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,103,112,107,100,104,113,114,112],
[102,0,91,107,106,107,97,103,114,108],
[108,120,0,115,113,109,100,107,107,115],
[99,104,96,0,98,103,98,108,110,106],
[104,105,98,113,0,98,94,103,108,108],
[111,104,102,108,113,0,106,114,110,109],
[107,114,111,113,117,105,0,121,124,121],
[98,108,104,103,108,97,90,0,106,112],
[97,97,104,101,103,101,87,105,0,98],
[99,103,96,105,103,102,90,99,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,109,93,97,109,121,115,109,91],
[101,0,124,112,112,118,124,107,115,106],
[102,87,0,84,95,114,107,98,97,82],
[118,99,127,0,114,114,122,110,118,105],
[114,99,116,97,0,112,117,114,105,100],
[102,93,97,97,99,0,106,105,100,85],
[90,87,104,89,94,105,0,91,97,83],
[96,104,113,101,97,106,120,0,102,98],
[102,96,114,93,106,111,114,109,0,91],
[120,105,129,106,111,126,128,113,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,95,106,113,106,103,100,101,107],
[104,0,97,104,104,100,116,104,97,99],
[116,114,0,108,115,118,117,103,114,106],
[105,107,103,0,112,115,101,104,113,99],
[98,107,96,99,0,115,105,100,116,113],
[105,111,93,96,96,0,104,99,114,105],
[108,95,94,110,106,107,0,90,113,100],
[111,107,108,107,111,112,121,0,104,118],
[110,114,97,98,95,97,98,107,0,103],
[104,112,105,112,98,106,111,93,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,80,105,90,102,99,92,106,96],
[108,0,93,84,80,105,98,93,114,107],
[131,118,0,100,101,109,98,95,124,106],
[106,127,111,0,103,106,85,114,113,102],
[121,131,110,108,0,120,91,104,129,116],
[109,106,102,105,91,0,117,122,98,115],
[112,113,113,126,120,94,0,127,97,137],
[119,118,116,97,107,89,84,0,114,101],
[105,97,87,98,82,113,114,97,0,100],
[115,104,105,109,95,96,74,110,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,106,100,113,112,113,124,121,108],
[91,0,106,112,103,98,100,110,111,94],
[105,105,0,121,118,110,115,120,121,103],
[111,99,90,0,101,104,111,109,104,100],
[98,108,93,110,0,96,103,112,108,104],
[99,113,101,107,115,0,120,119,128,103],
[98,111,96,100,108,91,0,124,117,104],
[87,101,91,102,99,92,87,0,97,95],
[90,100,90,107,103,83,94,114,0,90],
[103,117,108,111,107,108,107,116,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,111,95,96,96,105,112,100,100],
[112,0,126,105,99,98,106,112,113,109],
[100,85,0,96,92,91,95,93,107,100],
[116,106,115,0,100,96,106,104,115,106],
[115,112,119,111,0,102,113,109,123,118],
[115,113,120,115,109,0,111,102,117,109],
[106,105,116,105,98,100,0,95,112,99],
[99,99,118,107,102,109,116,0,113,110],
[111,98,104,96,88,94,99,98,0,105],
[111,102,111,105,93,102,112,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,116,107,95,115,112,97,96,107],
[100,0,111,103,91,98,99,96,100,111],
[95,100,0,107,92,94,98,88,95,100],
[104,108,104,0,100,108,115,104,94,108],
[116,120,119,111,0,113,115,103,106,110],
[96,113,117,103,98,0,110,104,101,102],
[99,112,113,96,96,101,0,98,96,111],
[114,115,123,107,108,107,113,0,104,113],
[115,111,116,117,105,110,115,107,0,108],
[104,100,111,103,101,109,100,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,113,119,119,105,113,119,104,107],
[91,0,96,99,114,91,96,98,103,83],
[98,115,0,111,128,115,113,108,100,92],
[92,112,100,0,108,104,97,102,104,91],
[92,97,83,103,0,92,95,101,86,84],
[106,120,96,107,119,0,118,99,102,101],
[98,115,98,114,116,93,0,104,99,105],
[92,113,103,109,110,112,107,0,93,88],
[107,108,111,107,125,109,112,118,0,92],
[104,128,119,120,127,110,106,123,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,120,88,102,79,92,95,110,113],
[107,0,125,94,123,84,106,81,119,118],
[91,86,0,82,92,65,89,74,100,90],
[123,117,129,0,118,97,106,116,106,109],
[109,88,119,93,0,84,98,90,107,109],
[132,127,146,114,127,0,118,98,125,115],
[119,105,122,105,113,93,0,77,103,102],
[116,130,137,95,121,113,134,0,129,125],
[101,92,111,105,104,86,108,82,0,106],
[98,93,121,102,102,96,109,86,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,99,117,114,99,110,112,119,106],
[81,0,84,118,106,82,94,114,99,98],
[112,127,0,118,128,94,121,112,104,117],
[94,93,93,0,107,108,103,114,112,117],
[97,105,83,104,0,106,111,107,96,108],
[112,129,117,103,105,0,104,109,119,121],
[101,117,90,108,100,107,0,113,95,105],
[99,97,99,97,104,102,98,0,87,98],
[92,112,107,99,115,92,116,124,0,116],
[105,113,94,94,103,90,106,113,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,109,109,90,115,109,100,91,112],
[114,0,109,107,107,122,110,109,97,110],
[102,102,0,102,84,117,116,100,104,123],
[102,104,109,0,91,115,105,85,89,104],
[121,104,127,120,0,116,117,107,115,123],
[96,89,94,96,95,0,94,86,94,94],
[102,101,95,106,94,117,0,90,99,116],
[111,102,111,126,104,125,121,0,107,124],
[120,114,107,122,96,117,112,104,0,103],
[99,101,88,107,88,117,95,87,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,109,111,116,103,115,101,108,107],
[94,0,106,98,98,97,99,89,97,89],
[102,105,0,101,92,89,104,100,106,88],
[100,113,110,0,99,101,93,107,110,100],
[95,113,119,112,0,92,105,106,106,108],
[108,114,122,110,119,0,101,95,113,103],
[96,112,107,118,106,110,0,89,113,102],
[110,122,111,104,105,116,122,0,105,110],
[103,114,105,101,105,98,98,106,0,95],
[104,122,123,111,103,108,109,101,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,100,101,113,98,98,104,102],
[109,0,99,104,94,112,97,95,105,104],
[112,112,0,113,105,114,106,112,113,111],
[111,107,98,0,106,110,114,102,116,97],
[110,117,106,105,0,112,107,102,118,109],
[98,99,97,101,99,0,100,98,102,97],
[113,114,105,97,104,111,0,100,103,100],
[113,116,99,109,109,113,111,0,101,106],
[107,106,98,95,93,109,108,110,0,102],
[109,107,100,114,102,114,111,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,103,103,103,109,101,109,117,84],
[122,0,129,96,103,111,96,100,112,104],
[108,82,0,101,100,106,86,115,108,89],
[108,115,110,0,115,120,112,104,111,113],
[108,108,111,96,0,88,100,103,106,104],
[102,100,105,91,123,0,101,110,113,96],
[110,115,125,99,111,110,0,123,119,117],
[102,111,96,107,108,101,88,0,100,98],
[94,99,103,100,105,98,92,111,0,110],
[127,107,122,98,107,115,94,113,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,113,110,113,117,107,103,102,103],
[104,0,114,99,103,109,97,95,103,100],
[98,97,0,97,97,97,108,103,96,103],
[101,112,114,0,110,101,96,101,96,88],
[98,108,114,101,0,107,104,115,107,101],
[94,102,114,110,104,0,102,104,108,88],
[104,114,103,115,107,109,0,100,109,107],
[108,116,108,110,96,107,111,0,100,97],
[109,108,115,115,104,103,102,111,0,110],
[108,111,108,123,110,123,104,114,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,117,103,108,104,106,107,112,106],
[98,0,105,99,105,105,105,104,112,110],
[94,106,0,96,105,112,98,111,104,106],
[108,112,115,0,100,109,106,103,105,108],
[103,106,106,111,0,109,112,113,114,98],
[107,106,99,102,102,0,102,108,104,103],
[105,106,113,105,99,109,0,118,110,100],
[104,107,100,108,98,103,93,0,109,111],
[99,99,107,106,97,107,101,102,0,104],
[105,101,105,103,113,108,111,100,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,90,95,101,99,107,108,103,103],
[114,0,110,88,100,111,115,126,110,111],
[121,101,0,98,106,104,111,115,105,107],
[116,123,113,0,106,105,117,115,115,116],
[110,111,105,105,0,112,114,125,105,118],
[112,100,107,106,99,0,115,116,108,107],
[104,96,100,94,97,96,0,112,96,102],
[103,85,96,96,86,95,99,0,88,102],
[108,101,106,96,106,103,115,123,0,120],
[108,100,104,95,93,104,109,109,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,74,69,115,118,86,93,95,70],
[96,0,100,85,128,156,95,111,102,93],
[137,111,0,100,116,135,114,134,125,118],
[142,126,111,0,117,121,123,104,104,95],
[96,83,95,94,0,121,114,112,116,121],
[93,55,76,90,90,0,88,87,96,72],
[125,116,97,88,97,123,0,70,96,115],
[118,100,77,107,99,124,141,0,117,106],
[116,109,86,107,95,115,115,94,0,124],
[141,118,93,116,90,139,96,105,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,126,106,128,149,104,106,65,127],
[85,0,148,106,85,65,102,127,87,170],
[85,63,0,85,105,64,61,127,65,128],
[105,105,126,0,82,106,104,125,64,126],
[83,126,106,129,0,131,124,106,65,126],
[62,146,147,105,80,0,101,106,83,147],
[107,109,150,107,87,110,0,127,110,151],
[105,84,84,86,105,105,84,0,128,129],
[146,124,146,147,146,128,101,83,0,103],
[84,41,83,85,85,64,60,82,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 211, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_10_211.csv", index=False, header=False)
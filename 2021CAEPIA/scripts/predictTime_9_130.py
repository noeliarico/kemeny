
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,60,73,76,44,62,55,93,82],
[70,0,83,90,57,102,66,83,79],
[57,47,0,69,52,72,48,57,61],
[54,40,61,0,33,59,37,59,55],
[86,73,78,97,0,111,49,87,92],
[68,28,58,71,19,0,30,62,38],
[75,64,82,93,81,100,0,88,88],
[37,47,73,71,43,68,42,0,63],
[48,51,69,75,38,92,42,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,64,61,60,84,56,67],
[60,0,58,74,70,64,67,53,60],
[64,72,0,74,65,68,68,62,71],
[66,56,56,0,64,68,81,62,62],
[69,60,65,66,0,61,80,52,67],
[70,66,62,62,69,0,77,59,71],
[46,63,62,49,50,53,0,55,62],
[74,77,68,68,78,71,75,0,63],
[63,70,59,68,63,59,68,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,55,78,73,68,71,68,73],
[52,0,52,74,57,55,69,68,67],
[75,78,0,76,77,70,72,79,62],
[52,56,54,0,56,63,53,62,60],
[57,73,53,74,0,59,65,60,65],
[62,75,60,67,71,0,65,81,55],
[59,61,58,77,65,65,0,63,69],
[62,62,51,68,70,49,67,0,50],
[57,63,68,70,65,75,61,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,68,68,63,74,65,66],
[60,0,66,67,62,53,60,67,62],
[64,64,0,72,70,54,69,66,64],
[62,63,58,0,68,65,60,68,63],
[62,68,60,62,0,60,62,62,68],
[67,77,76,65,70,0,67,70,74],
[56,70,61,70,68,63,0,63,69],
[65,63,64,62,68,60,67,0,61],
[64,68,66,67,62,56,61,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,62,62,62,65,69,66,58],
[61,0,58,57,52,55,52,62,58],
[68,72,0,64,64,71,71,69,65],
[68,73,66,0,66,74,71,65,68],
[68,78,66,64,0,72,74,70,69],
[65,75,59,56,58,0,60,66,59],
[61,78,59,59,56,70,0,59,62],
[64,68,61,65,60,64,71,0,63],
[72,72,65,62,61,71,68,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,69,72,80,71,58,59,67],
[60,0,65,55,75,71,70,62,63],
[61,65,0,67,74,60,61,57,62],
[58,75,63,0,78,67,70,70,66],
[50,55,56,52,0,54,57,51,51],
[59,59,70,63,76,0,65,63,71],
[72,60,69,60,73,65,0,65,60],
[71,68,73,60,79,67,65,0,64],
[63,67,68,64,79,59,70,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,58,62,61,69,73,53,75],
[66,0,73,70,60,61,68,60,72],
[72,57,0,64,64,65,65,53,64],
[68,60,66,0,66,58,80,65,65],
[69,70,66,64,0,69,83,60,76],
[61,69,65,72,61,0,68,66,67],
[57,62,65,50,47,62,0,56,60],
[77,70,77,65,70,64,74,0,65],
[55,58,66,65,54,63,70,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,66,67,62,58,67,77,62],
[64,0,55,68,62,61,64,75,61],
[64,75,0,74,65,63,57,76,66],
[63,62,56,0,60,58,60,67,48],
[68,68,65,70,0,68,64,73,64],
[72,69,67,72,62,0,71,78,72],
[63,66,73,70,66,59,0,71,60],
[53,55,54,63,57,52,59,0,61],
[68,69,64,82,66,58,70,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,64,77,59,71,46,73,63],
[59,0,68,64,55,54,47,56,56],
[66,62,0,74,59,59,69,63,51],
[53,66,56,0,58,60,60,56,58],
[71,75,71,72,0,63,70,67,66],
[59,76,71,70,67,0,53,63,62],
[84,83,61,70,60,77,0,54,67],
[57,74,67,74,63,67,76,0,57],
[67,74,79,72,64,68,63,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,67,72,74,64,83,73,76],
[60,0,67,57,70,57,69,56,63],
[63,63,0,63,73,70,76,76,71],
[58,73,67,0,69,64,76,64,71],
[56,60,57,61,0,56,68,62,61],
[66,73,60,66,74,0,81,72,68],
[47,61,54,54,62,49,0,63,74],
[57,74,54,66,68,58,67,0,69],
[54,67,59,59,69,62,56,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,67,50,65,67,61,57],
[63,0,62,59,58,50,62,59,57],
[60,68,0,68,52,59,73,49,53],
[63,71,62,0,59,70,69,54,55],
[80,72,78,71,0,74,73,68,65],
[65,80,71,60,56,0,73,55,61],
[63,68,57,61,57,57,0,56,64],
[69,71,81,76,62,75,74,0,69],
[73,73,77,75,65,69,66,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,59,40,40,47,63,58,60],
[75,0,65,58,75,53,70,69,76],
[71,65,0,66,56,58,70,57,64],
[90,72,64,0,77,70,78,70,66],
[90,55,74,53,0,68,58,73,72],
[83,77,72,60,62,0,78,78,67],
[67,60,60,52,72,52,0,58,66],
[72,61,73,60,57,52,72,0,67],
[70,54,66,64,58,63,64,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,69,113,85,86,46,72,90],
[49,0,61,81,82,46,24,25,42],
[61,69,0,77,72,54,52,49,67],
[17,49,53,0,40,53,34,24,49],
[45,48,58,90,0,55,30,23,30],
[44,84,76,77,75,0,19,58,90],
[84,106,78,96,100,111,0,64,107],
[58,105,81,106,107,72,66,0,51],
[40,88,63,81,100,40,23,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,73,58,62,69,66,64,59],
[70,0,67,55,71,66,71,62,61],
[57,63,0,60,67,63,67,61,57],
[72,75,70,0,64,71,72,65,61],
[68,59,63,66,0,68,62,60,57],
[61,64,67,59,62,0,63,50,60],
[64,59,63,58,68,67,0,56,59],
[66,68,69,65,70,80,74,0,65],
[71,69,73,69,73,70,71,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,64,59,59,68,65,52,60],
[66,0,62,62,67,63,64,59,63],
[66,68,0,56,62,67,66,61,60],
[71,68,74,0,72,77,70,59,70],
[71,63,68,58,0,71,68,58,67],
[62,67,63,53,59,0,61,51,62],
[65,66,64,60,62,69,0,59,67],
[78,71,69,71,72,79,71,0,65],
[70,67,70,60,63,68,63,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,89,81,73,81,67,83],
[62,0,60,83,76,62,62,73,69],
[66,70,0,60,71,68,71,55,58],
[41,47,70,0,54,67,54,47,49],
[49,54,59,76,0,82,63,56,57],
[57,68,62,63,48,0,75,62,52],
[49,68,59,76,67,55,0,74,72],
[63,57,75,83,74,68,56,0,66],
[47,61,72,81,73,78,58,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,62,56,45,60,52,47,46],
[69,0,68,67,49,63,58,79,61],
[68,62,0,69,43,59,43,59,52],
[74,63,61,0,65,66,53,71,57],
[85,81,87,65,0,67,69,72,61],
[70,67,71,64,63,0,43,63,43],
[78,72,87,77,61,87,0,83,72],
[83,51,71,59,58,67,47,0,66],
[84,69,78,73,69,87,58,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,60,78,91,63,94,77,67],
[80,0,67,94,65,56,73,83,86],
[70,63,0,103,83,73,62,91,80],
[52,36,27,0,77,52,52,68,45],
[39,65,47,53,0,48,43,51,54],
[67,74,57,78,82,0,72,89,73],
[36,57,68,78,87,58,0,68,66],
[53,47,39,62,79,41,62,0,69],
[63,44,50,85,76,57,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,69,83,68,80,61,62,72],
[48,0,52,65,59,62,69,55,66],
[61,78,0,71,70,77,77,68,66],
[47,65,59,0,56,73,53,57,59],
[62,71,60,74,0,80,64,67,59],
[50,68,53,57,50,0,52,51,40],
[69,61,53,77,66,78,0,65,67],
[68,75,62,73,63,79,65,0,67],
[58,64,64,71,71,90,63,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,61,61,68,66,52,68,67],
[64,0,62,61,65,62,60,70,61],
[69,68,0,61,70,61,61,67,68],
[69,69,69,0,70,68,65,75,67],
[62,65,60,60,0,63,53,65,63],
[64,68,69,62,67,0,53,75,62],
[78,70,69,65,77,77,0,77,71],
[62,60,63,55,65,55,53,0,61],
[63,69,62,63,67,68,59,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,118,49,97,95,54,75,82],
[36,0,36,67,66,42,59,36,36],
[12,94,0,36,30,56,23,26,12],
[81,63,94,0,65,86,35,56,47],
[33,64,100,65,0,79,35,65,56],
[35,88,74,44,51,0,31,64,46],
[76,71,107,95,95,99,0,63,76],
[55,94,104,74,65,66,67,0,77],
[48,94,118,83,74,84,54,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,69,71,70,71,69,77,65],
[60,0,65,60,56,69,52,69,53],
[61,65,0,65,70,71,59,64,57],
[59,70,65,0,66,67,59,59,67],
[60,74,60,64,0,65,59,73,59],
[59,61,59,63,65,0,59,65,61],
[61,78,71,71,71,71,0,80,65],
[53,61,66,71,57,65,50,0,48],
[65,77,73,63,71,69,65,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,75,78,79,75,75,77,77],
[65,0,76,61,66,73,77,66,73],
[55,54,0,54,64,66,61,74,67],
[52,69,76,0,70,72,70,69,73],
[51,64,66,60,0,64,61,57,64],
[55,57,64,58,66,0,63,60,72],
[55,53,69,60,69,67,0,60,67],
[53,64,56,61,73,70,70,0,68],
[53,57,63,57,66,58,63,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,79,64,65,80,74,63],
[60,0,56,62,56,61,62,56,53],
[65,74,0,66,58,66,65,56,59],
[51,68,64,0,49,62,65,58,51],
[66,74,72,81,0,74,74,68,65],
[65,69,64,68,56,0,61,59,57],
[50,68,65,65,56,69,0,67,57],
[56,74,74,72,62,71,63,0,59],
[67,77,71,79,65,73,73,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,71,70,64,61,67,67,68],
[64,0,68,69,60,64,72,81,59],
[59,62,0,66,70,67,70,78,64],
[60,61,64,0,69,68,71,75,66],
[66,70,60,61,0,59,69,67,68],
[69,66,63,62,71,0,70,73,62],
[63,58,60,59,61,60,0,71,67],
[63,49,52,55,63,57,59,0,53],
[62,71,66,64,62,68,63,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,51,63,47,47,66,68,77],
[73,0,44,56,47,33,56,65,64],
[79,86,0,70,60,68,69,83,96],
[67,74,60,0,54,53,59,68,68],
[83,83,70,76,0,61,48,66,69],
[83,97,62,77,69,0,70,70,91],
[64,74,61,71,82,60,0,69,84],
[62,65,47,62,64,60,61,0,70],
[53,66,34,62,61,39,46,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,71,89,71,66,76,60,61],
[64,0,85,85,67,63,49,75,42],
[59,45,0,81,66,59,49,74,40],
[41,45,49,0,45,68,57,66,52],
[59,63,64,85,0,66,73,91,53],
[64,67,71,62,64,0,41,52,51],
[54,81,81,73,57,89,0,103,69],
[70,55,56,64,39,78,27,0,39],
[69,88,90,78,77,79,61,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,71,83,61,70,70,53,75],
[54,0,56,69,40,66,47,46,77],
[59,74,0,79,68,76,60,70,82],
[47,61,51,0,45,64,60,46,63],
[69,90,62,85,0,88,68,64,63],
[60,64,54,66,42,0,49,51,70],
[60,83,70,70,62,81,0,62,74],
[77,84,60,84,66,79,68,0,80],
[55,53,48,67,67,60,56,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,77,65,61,73,62,72,74],
[50,0,64,64,59,50,55,50,66],
[53,66,0,63,56,59,74,61,79],
[65,66,67,0,72,63,70,66,79],
[69,71,74,58,0,66,62,57,77],
[57,80,71,67,64,0,60,72,78],
[68,75,56,60,68,70,0,59,74],
[58,80,69,64,73,58,71,0,90],
[56,64,51,51,53,52,56,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,55,70,52,70,60,52,49],
[60,0,56,72,69,71,68,59,54],
[75,74,0,74,64,77,75,64,64],
[60,58,56,0,58,62,64,55,52],
[78,61,66,72,0,66,85,56,58],
[60,59,53,68,64,0,72,65,58],
[70,62,55,66,45,58,0,55,55],
[78,71,66,75,74,65,75,0,65],
[81,76,66,78,72,72,75,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,65,62,69,47,73,55,57],
[72,0,62,57,72,71,65,62,60],
[65,68,0,52,52,58,56,69,58],
[68,73,78,0,85,61,67,62,44],
[61,58,78,45,0,51,56,51,45],
[83,59,72,69,79,0,71,67,73],
[57,65,74,63,74,59,0,64,58],
[75,68,61,68,79,63,66,0,63],
[73,70,72,86,85,57,72,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,63,67,62,72,67,53,56],
[72,0,69,74,65,66,72,68,68],
[67,61,0,78,60,69,62,62,54],
[63,56,52,0,55,59,67,55,56],
[68,65,70,75,0,60,72,62,52],
[58,64,61,71,70,0,66,62,50],
[63,58,68,63,58,64,0,52,52],
[77,62,68,75,68,68,78,0,69],
[74,62,76,74,78,80,78,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,68,70,68,61,68,66,72],
[64,0,62,73,53,65,72,66,71],
[62,68,0,74,62,63,63,67,68],
[60,57,56,0,56,52,61,59,71],
[62,77,68,74,0,69,64,63,74],
[69,65,67,78,61,0,61,64,75],
[62,58,67,69,66,69,0,64,70],
[64,64,63,71,67,66,66,0,72],
[58,59,62,59,56,55,60,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,79,46,54,64,75,53,64],
[65,0,68,57,74,55,64,67,60],
[51,62,0,55,56,50,77,49,63],
[84,73,75,0,82,74,82,62,76],
[76,56,74,48,0,65,76,67,55],
[66,75,80,56,65,0,82,76,77],
[55,66,53,48,54,48,0,51,48],
[77,63,81,68,63,54,79,0,63],
[66,70,67,54,75,53,82,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,72,67,74,76,77,61,68],
[59,0,60,64,63,71,66,68,65],
[58,70,0,64,63,67,73,68,68],
[63,66,66,0,64,71,71,63,66],
[56,67,67,66,0,65,74,54,62],
[54,59,63,59,65,0,61,56,55],
[53,64,57,59,56,69,0,63,63],
[69,62,62,67,76,74,67,0,65],
[62,65,62,64,68,75,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,77,42,98,71,92,78,66],
[74,0,84,79,86,108,56,115,64],
[53,46,0,33,79,59,47,65,44],
[88,51,97,0,104,81,73,88,78],
[32,44,51,26,0,64,42,55,37],
[59,22,71,49,66,0,31,60,36],
[38,74,83,57,88,99,0,82,77],
[52,15,65,42,75,70,48,0,51],
[64,66,86,52,93,94,53,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,57,102,106,76,110,98,93],
[67,0,75,62,68,65,104,74,54],
[73,55,0,71,67,67,89,88,56],
[28,68,59,0,65,52,66,63,47],
[24,62,63,65,0,50,82,71,67],
[54,65,63,78,80,0,95,87,89],
[20,26,41,64,48,35,0,47,24],
[32,56,42,67,59,43,83,0,43],
[37,76,74,83,63,41,106,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,32,40,47,40,30,45,64],
[82,0,61,65,67,62,54,59,63],
[98,69,0,68,84,71,65,67,89],
[90,65,62,0,65,60,41,79,83],
[83,63,46,65,0,53,59,61,75],
[90,68,59,70,77,0,48,77,89],
[100,76,65,89,71,82,0,95,80],
[85,71,63,51,69,53,35,0,76],
[66,67,41,47,55,41,50,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,58,69,67,58,55,50],
[63,0,55,63,63,57,52,60,48],
[60,75,0,67,64,58,70,59,54],
[72,67,63,0,69,69,64,61,55],
[61,67,66,61,0,59,54,52,51],
[63,73,72,61,71,0,74,53,35],
[72,78,60,66,76,56,0,79,44],
[75,70,71,69,78,77,51,0,68],
[80,82,76,75,79,95,86,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,68,56,57,49,56,46,56],
[73,0,56,65,68,64,77,57,80],
[62,74,0,60,65,66,64,72,63],
[74,65,70,0,60,70,69,45,68],
[73,62,65,70,0,72,84,62,74],
[81,66,64,60,58,0,73,57,72],
[74,53,66,61,46,57,0,47,51],
[84,73,58,85,68,73,83,0,84],
[74,50,67,62,56,58,79,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,61,55,61,42,58,43,53],
[63,0,78,63,64,67,66,54,60],
[69,52,0,60,63,47,67,55,43],
[75,67,70,0,69,66,81,49,64],
[69,66,67,61,0,55,69,60,66],
[88,63,83,64,75,0,80,66,77],
[72,64,63,49,61,50,0,46,64],
[87,76,75,81,70,64,84,0,72],
[77,70,87,66,64,53,66,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,63,63,60,69,67,57,71],
[63,0,64,57,59,70,62,67,59],
[67,66,0,68,58,65,71,64,76],
[67,73,62,0,71,66,75,60,68],
[70,71,72,59,0,62,72,63,75],
[61,60,65,64,68,0,71,62,66],
[63,68,59,55,58,59,0,59,72],
[73,63,66,70,67,68,71,0,76],
[59,71,54,62,55,64,58,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,58,63,72,66,75,73,70],
[67,0,58,63,57,66,72,66,54],
[72,72,0,65,69,67,76,66,65],
[67,67,65,0,72,66,72,63,57],
[58,73,61,58,0,62,75,65,65],
[64,64,63,64,68,0,73,66,60],
[55,58,54,58,55,57,0,51,55],
[57,64,64,67,65,64,79,0,68],
[60,76,65,73,65,70,75,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,73,62,60,67,56,71,63],
[57,0,76,73,55,53,54,57,55],
[57,54,0,76,43,52,47,64,49],
[68,57,54,0,63,45,60,62,59],
[70,75,87,67,0,66,58,71,71],
[63,77,78,85,64,0,64,76,64],
[74,76,83,70,72,66,0,64,67],
[59,73,66,68,59,54,66,0,53],
[67,75,81,71,59,66,63,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,63,60,64,62,64,74,67],
[70,0,78,55,67,57,56,66,62],
[67,52,0,62,60,46,44,51,50],
[70,75,68,0,74,79,61,69,66],
[66,63,70,56,0,58,63,71,51],
[68,73,84,51,72,0,59,73,68],
[66,74,86,69,67,71,0,71,63],
[56,64,79,61,59,57,59,0,42],
[63,68,80,64,79,62,67,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,75,60,61,68,67,70,66],
[63,0,65,70,62,67,67,66,72],
[55,65,0,65,67,69,74,67,65],
[70,60,65,0,61,66,62,66,68],
[69,68,63,69,0,67,71,67,73],
[62,63,61,64,63,0,64,68,64],
[63,63,56,68,59,66,0,61,66],
[60,64,63,64,63,62,69,0,63],
[64,58,65,62,57,66,64,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,67,66,65,65,60,59,62],
[68,0,65,57,58,64,67,65,55],
[63,65,0,65,60,66,67,63,62],
[64,73,65,0,64,70,58,61,62],
[65,72,70,66,0,66,68,61,60],
[65,66,64,60,64,0,62,57,63],
[70,63,63,72,62,68,0,67,66],
[71,65,67,69,69,73,63,0,64],
[68,75,68,68,70,67,64,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,77,66,63,68,68,75,72],
[60,0,67,56,58,74,69,71,66],
[53,63,0,60,60,65,70,70,57],
[64,74,70,0,69,75,79,75,73],
[67,72,70,61,0,69,67,82,72],
[62,56,65,55,61,0,57,69,56],
[62,61,60,51,63,73,0,63,60],
[55,59,60,55,48,61,67,0,52],
[58,64,73,57,58,74,70,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,69,55,64,52,79,75,60],
[69,0,58,59,60,56,73,52,48],
[61,72,0,67,57,54,70,69,61],
[75,71,63,0,59,73,72,74,75],
[66,70,73,71,0,67,82,65,66],
[78,74,76,57,63,0,87,74,65],
[51,57,60,58,48,43,0,60,53],
[55,78,61,56,65,56,70,0,66],
[70,82,69,55,64,65,77,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,53,61,63,71,51,61,55],
[73,0,58,64,59,70,62,64,68],
[77,72,0,64,76,65,62,70,63],
[69,66,66,0,69,67,64,61,71],
[67,71,54,61,0,66,58,58,62],
[59,60,65,63,64,0,55,57,59],
[79,68,68,66,72,75,0,72,62],
[69,66,60,69,72,73,58,0,65],
[75,62,67,59,68,71,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,73,69,74,79,58,67],
[71,0,69,77,68,71,66,66,65],
[65,61,0,73,65,75,59,72,69],
[57,53,57,0,58,66,67,57,61],
[61,62,65,72,0,66,63,58,63],
[56,59,55,64,64,0,70,59,59],
[51,64,71,63,67,60,0,61,65],
[72,64,58,73,72,71,69,0,71],
[63,65,61,69,67,71,65,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,69,48,63,53,51,62,56],
[62,0,75,62,66,53,70,60,76],
[61,55,0,46,62,52,51,58,53],
[82,68,84,0,71,66,67,76,61],
[67,64,68,59,0,61,61,60,58],
[77,77,78,64,69,0,71,80,77],
[79,60,79,63,69,59,0,74,56],
[68,70,72,54,70,50,56,0,62],
[74,54,77,69,72,53,74,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,114,84,45,85,77,84,61],
[90,0,75,58,49,85,43,92,98],
[16,55,0,59,60,49,66,40,49],
[46,72,71,0,72,76,92,57,61],
[85,81,70,58,0,88,92,81,49],
[45,45,81,54,42,0,57,51,28],
[53,87,64,38,38,73,0,54,81],
[46,38,90,73,49,79,76,0,39],
[69,32,81,69,81,102,49,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,57,70,64,56,57,70],
[65,0,70,70,56,61,70,68,66],
[65,60,0,56,56,61,61,50,59],
[73,60,74,0,67,69,63,67,83],
[60,74,74,63,0,80,61,62,75],
[66,69,69,61,50,0,58,50,71],
[74,60,69,67,69,72,0,69,60],
[73,62,80,63,68,80,61,0,71],
[60,64,71,47,55,59,70,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,71,65,67,67,69,68,64],
[55,0,62,63,68,60,63,63,62],
[59,68,0,55,64,61,65,71,62],
[65,67,75,0,73,69,73,75,72],
[63,62,66,57,0,68,66,63,59],
[63,70,69,61,62,0,67,62,68],
[61,67,65,57,64,63,0,65,64],
[62,67,59,55,67,68,65,0,63],
[66,68,68,58,71,62,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,62,69,74,54,53,78,56],
[77,0,62,67,83,74,76,79,72],
[68,68,0,78,70,65,68,87,75],
[61,63,52,0,67,64,59,74,57],
[56,47,60,63,0,48,46,65,57],
[76,56,65,66,82,0,81,98,73],
[77,54,62,71,84,49,0,90,69],
[52,51,43,56,65,32,40,0,51],
[74,58,55,73,73,57,61,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,55,49,62,51,56,50,59],
[63,0,57,59,67,53,64,65,58],
[75,73,0,72,65,61,64,66,69],
[81,71,58,0,69,71,67,72,66],
[68,63,65,61,0,64,65,64,66],
[79,77,69,59,66,0,73,68,75],
[74,66,66,63,65,57,0,68,64],
[80,65,64,58,66,62,62,0,63],
[71,72,61,64,64,55,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,58,62,65,70,64,64,74],
[57,0,60,61,69,74,64,69,71],
[72,70,0,67,72,76,62,70,80],
[68,69,63,0,73,73,63,63,74],
[65,61,58,57,0,53,63,67,65],
[60,56,54,57,77,0,67,64,71],
[66,66,68,67,67,63,0,66,74],
[66,61,60,67,63,66,64,0,72],
[56,59,50,56,65,59,56,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,68,69,64,72,65,75,63],
[59,0,64,57,63,64,53,62,59],
[62,66,0,62,62,71,64,61,63],
[61,73,68,0,62,66,54,63,57],
[66,67,68,68,0,62,58,62,60],
[58,66,59,64,68,0,63,67,58],
[65,77,66,76,72,67,0,74,68],
[55,68,69,67,68,63,56,0,63],
[67,71,67,73,70,72,62,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,88,71,46,59,62,55,68],
[50,0,37,68,50,36,59,68,43],
[42,93,0,68,34,57,45,55,67],
[59,62,62,0,62,47,69,84,76],
[84,80,96,68,0,67,67,55,64],
[71,94,73,83,63,0,61,96,117],
[68,71,85,61,63,69,0,59,74],
[75,62,75,46,75,34,71,0,81],
[62,87,63,54,66,13,56,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,58,62,65,57,70,49,61],
[76,0,63,73,59,78,74,69,67],
[72,67,0,63,61,64,76,66,68],
[68,57,67,0,55,66,68,61,71],
[65,71,69,75,0,69,77,69,61],
[73,52,66,64,61,0,75,63,71],
[60,56,54,62,53,55,0,54,63],
[81,61,64,69,61,67,76,0,77],
[69,63,62,59,69,59,67,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,80,61,66,70,65,65,80],
[67,0,67,63,70,63,67,71,78],
[50,63,0,51,49,61,60,69,74],
[69,67,79,0,66,66,69,65,76],
[64,60,81,64,0,65,60,55,75],
[60,67,69,64,65,0,64,66,73],
[65,63,70,61,70,66,0,71,77],
[65,59,61,65,75,64,59,0,78],
[50,52,56,54,55,57,53,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,70,71,67,57,61,67],
[61,0,71,65,70,64,61,64,72],
[59,59,0,52,53,49,56,59,64],
[60,65,78,0,60,61,53,63,67],
[59,60,77,70,0,59,72,61,70],
[63,66,81,69,71,0,69,67,72],
[73,69,74,77,58,61,0,71,73],
[69,66,71,67,69,63,59,0,69],
[63,58,66,63,60,58,57,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,48,52,60,60,53,54,54],
[74,0,58,63,67,67,62,71,69],
[82,72,0,66,71,77,61,70,64],
[78,67,64,0,70,74,70,61,66],
[70,63,59,60,0,64,67,64,63],
[70,63,53,56,66,0,63,56,59],
[77,68,69,60,63,67,0,64,62],
[76,59,60,69,66,74,66,0,61],
[76,61,66,64,67,71,68,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,82,75,76,76,67,76,61],
[55,0,54,66,65,48,62,66,53],
[48,76,0,69,59,53,66,51,71],
[55,64,61,0,53,55,52,66,74],
[54,65,71,77,0,63,59,65,53],
[54,82,77,75,67,0,63,66,66],
[63,68,64,78,71,67,0,63,66],
[54,64,79,64,65,64,67,0,72],
[69,77,59,56,77,64,64,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,66,74,77,65,72,88,57],
[62,0,53,59,85,45,46,66,66],
[64,77,0,70,96,71,60,61,65],
[56,71,60,0,76,45,61,70,53],
[53,45,34,54,0,32,48,53,44],
[65,85,59,85,98,0,60,85,71],
[58,84,70,69,82,70,0,64,68],
[42,64,69,60,77,45,66,0,46],
[73,64,65,77,86,59,62,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,61,52,54,58,62,57,50],
[73,0,66,61,53,70,63,58,55],
[69,64,0,66,57,71,65,64,55],
[78,69,64,0,58,70,65,70,55],
[76,77,73,72,0,69,71,69,65],
[72,60,59,60,61,0,60,58,63],
[68,67,65,65,59,70,0,56,60],
[73,72,66,60,61,72,74,0,64],
[80,75,75,75,65,67,70,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,56,56,66,58,80,56,61],
[59,0,61,56,74,70,84,56,62],
[74,69,0,54,78,70,83,57,61],
[74,74,76,0,96,89,74,66,64],
[64,56,52,34,0,52,67,51,52],
[72,60,60,41,78,0,69,51,66],
[50,46,47,56,63,61,0,45,42],
[74,74,73,64,79,79,85,0,55],
[69,68,69,66,78,64,88,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,50,67,56,56,54,51,61],
[74,0,65,75,66,74,78,70,74],
[80,65,0,73,71,75,78,73,79],
[63,55,57,0,55,59,62,55,60],
[74,64,59,75,0,70,73,62,65],
[74,56,55,71,60,0,68,54,61],
[76,52,52,68,57,62,0,60,60],
[79,60,57,75,68,76,70,0,75],
[69,56,51,70,65,69,70,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,61,60,68,67,65,76,72],
[63,0,58,68,58,62,66,73,69],
[69,72,0,66,70,63,62,70,72],
[70,62,64,0,70,79,68,74,64],
[62,72,60,60,0,68,69,73,60],
[63,68,67,51,62,0,74,70,68],
[65,64,68,62,61,56,0,68,68],
[54,57,60,56,57,60,62,0,64],
[58,61,58,66,70,62,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,68,66,32,38,51,70,100],
[97,0,61,73,67,103,74,90,103],
[62,69,0,73,83,73,57,86,106],
[64,57,57,0,57,77,68,70,67],
[98,63,47,73,0,86,57,109,86],
[92,27,57,53,44,0,80,86,76],
[79,56,73,62,73,50,0,57,63],
[60,40,44,60,21,44,73,0,44],
[30,27,24,63,44,54,67,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,71,80,86,74,65,70,74],
[59,0,56,55,50,57,62,39,62],
[59,74,0,79,68,84,71,69,56],
[50,75,51,0,64,68,60,49,56],
[44,80,62,66,0,56,53,48,74],
[56,73,46,62,74,0,54,54,58],
[65,68,59,70,77,76,0,60,78],
[60,91,61,81,82,76,70,0,74],
[56,68,74,74,56,72,52,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,31,14,71,31,61,55,47],
[83,0,34,58,91,76,59,58,34],
[99,96,0,79,62,96,76,63,101],
[116,72,51,0,91,63,52,41,97],
[59,39,68,39,0,56,39,39,39],
[99,54,34,67,74,0,59,67,74],
[69,71,54,78,91,71,0,62,76],
[75,72,67,89,91,63,68,0,97],
[83,96,29,33,91,56,54,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,67,45,56,58,56,70],
[63,0,57,76,52,70,61,51,64],
[62,73,0,74,50,71,51,64,61],
[63,54,56,0,73,75,58,56,55],
[85,78,80,57,0,67,56,61,69],
[74,60,59,55,63,0,70,67,73],
[72,69,79,72,74,60,0,59,76],
[74,79,66,74,69,63,71,0,85],
[60,66,69,75,61,57,54,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,74,70,69,69,56,92,62],
[65,0,91,62,56,83,71,105,69],
[56,39,0,34,33,64,53,80,47],
[60,68,96,0,62,77,63,96,78],
[61,74,97,68,0,64,64,77,74],
[61,47,66,53,66,0,59,58,77],
[74,59,77,67,66,71,0,84,66],
[38,25,50,34,53,72,46,0,41],
[68,61,83,52,56,53,64,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,59,77,54,63,65,72,57],
[63,0,68,75,61,67,64,64,54],
[71,62,0,89,59,79,77,80,65],
[53,55,41,0,55,68,51,50,56],
[76,69,71,75,0,72,62,73,67],
[67,63,51,62,58,0,66,61,59],
[65,66,53,79,68,64,0,67,69],
[58,66,50,80,57,69,63,0,62],
[73,76,65,74,63,71,61,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,72,65,69,71,68,73,66],
[63,0,64,57,68,59,59,53,59],
[58,66,0,54,71,61,70,60,72],
[65,73,76,0,78,70,75,69,83],
[61,62,59,52,0,63,54,61,64],
[59,71,69,60,67,0,67,63,71],
[62,71,60,55,76,63,0,61,64],
[57,77,70,61,69,67,69,0,77],
[64,71,58,47,66,59,66,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,70,62,76,73,62,62,64],
[55,0,53,63,54,59,52,58,49],
[60,77,0,62,71,59,65,62,59],
[68,67,68,0,63,70,66,62,64],
[54,76,59,67,0,63,70,56,55],
[57,71,71,60,67,0,59,53,66],
[68,78,65,64,60,71,0,62,59],
[68,72,68,68,74,77,68,0,59],
[66,81,71,66,75,64,71,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,70,77,68,44,37,73,66],
[52,0,55,61,67,56,44,49,41],
[60,75,0,72,59,49,50,74,52],
[53,69,58,0,41,46,46,56,62],
[62,63,71,89,0,57,39,63,59],
[86,74,81,84,73,0,56,80,71],
[93,86,80,84,91,74,0,80,59],
[57,81,56,74,67,50,50,0,49],
[64,89,78,68,71,59,71,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,76,75,69,64,67,63,74],
[65,0,72,84,74,66,74,69,86],
[54,58,0,74,75,64,71,62,62],
[55,46,56,0,59,54,76,64,56],
[61,56,55,71,0,64,74,63,61],
[66,64,66,76,66,0,67,54,63],
[63,56,59,54,56,63,0,60,63],
[67,61,68,66,67,76,70,0,65],
[56,44,68,74,69,67,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,52,59,55,64,61,62,59],
[68,0,61,68,57,72,67,72,56],
[78,69,0,61,66,74,66,73,68],
[71,62,69,0,66,68,65,75,63],
[75,73,64,64,0,73,63,70,66],
[66,58,56,62,57,0,67,71,60],
[69,63,64,65,67,63,0,70,63],
[68,58,57,55,60,59,60,0,55],
[71,74,62,67,64,70,67,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,74,66,64,74,70,59,65],
[65,0,77,65,74,71,80,57,63],
[56,53,0,54,44,50,58,40,58],
[64,65,76,0,62,77,68,66,72],
[66,56,86,68,0,68,65,55,63],
[56,59,80,53,62,0,62,56,60],
[60,50,72,62,65,68,0,52,58],
[71,73,90,64,75,74,78,0,73],
[65,67,72,58,67,70,72,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,61,73,70,78,53,57,66],
[69,0,68,78,85,83,70,64,73],
[69,62,0,79,67,76,65,66,72],
[57,52,51,0,60,72,48,49,62],
[60,45,63,70,0,75,51,66,60],
[52,47,54,58,55,0,44,41,46],
[77,60,65,82,79,86,0,73,65],
[73,66,64,81,64,89,57,0,67],
[64,57,58,68,70,84,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,47,50,44,45,56,59,54],
[86,0,65,76,74,73,82,80,78],
[83,65,0,75,65,77,80,78,75],
[80,54,55,0,58,65,77,67,68],
[86,56,65,72,0,61,77,81,75],
[85,57,53,65,69,0,79,81,72],
[74,48,50,53,53,51,0,69,57],
[71,50,52,63,49,49,61,0,63],
[76,52,55,62,55,58,73,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,71,75,65,63,80,58,62],
[54,0,49,79,58,46,57,49,49],
[59,81,0,74,59,58,73,66,69],
[55,51,56,0,59,51,56,54,54],
[65,72,71,71,0,63,68,59,71],
[67,84,72,79,67,0,61,49,71],
[50,73,57,74,62,69,0,50,65],
[72,81,64,76,71,81,80,0,79],
[68,81,61,76,59,59,65,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,69,78,61,74,67,82,65],
[65,0,62,67,61,75,62,67,67],
[61,68,0,64,66,73,58,63,64],
[52,63,66,0,59,69,59,65,63],
[69,69,64,71,0,80,60,68,65],
[56,55,57,61,50,0,61,58,59],
[63,68,72,71,70,69,0,71,59],
[48,63,67,65,62,72,59,0,60],
[65,63,66,67,65,71,71,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,72,63,74,67,75,75,66],
[64,0,71,58,79,66,81,78,74],
[58,59,0,58,72,59,69,61,63],
[67,72,72,0,76,61,74,79,72],
[56,51,58,54,0,64,67,63,65],
[63,64,71,69,66,0,73,68,65],
[55,49,61,56,63,57,0,63,66],
[55,52,69,51,67,62,67,0,64],
[64,56,67,58,65,65,64,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,64,67,67,73,69,69,61],
[69,0,70,68,74,72,75,64,66],
[66,60,0,63,65,73,67,61,67],
[63,62,67,0,63,76,68,57,65],
[63,56,65,67,0,72,60,64,60],
[57,58,57,54,58,0,63,56,60],
[61,55,63,62,70,67,0,61,63],
[61,66,69,73,66,74,69,0,66],
[69,64,63,65,70,70,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,78,65,77,65,74,76,90],
[60,0,81,72,65,54,75,67,69],
[52,49,0,62,56,47,69,73,55],
[65,58,68,0,66,60,63,79,70],
[53,65,74,64,0,62,68,73,72],
[65,76,83,70,68,0,81,83,72],
[56,55,61,67,62,49,0,72,67],
[54,63,57,51,57,47,58,0,60],
[40,61,75,60,58,58,63,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,65,69,73,61,81,90,71],
[49,0,70,67,63,68,62,67,77],
[65,60,0,41,70,55,46,57,60],
[61,63,89,0,66,69,57,60,69],
[57,67,60,64,0,62,50,62,64],
[69,62,75,61,68,0,64,51,65],
[49,68,84,73,80,66,0,67,54],
[40,63,73,70,68,79,63,0,54],
[59,53,70,61,66,65,76,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,53,77,59,63,62,66,66],
[64,0,69,83,59,71,69,75,65],
[77,61,0,71,66,55,59,68,75],
[53,47,59,0,53,49,54,62,67],
[71,71,64,77,0,70,67,72,69],
[67,59,75,81,60,0,70,75,72],
[68,61,71,76,63,60,0,72,71],
[64,55,62,68,58,55,58,0,63],
[64,65,55,63,61,58,59,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,91,74,65,60,69,65,69],
[62,0,78,68,60,66,54,71,61],
[39,52,0,50,46,42,50,50,60],
[56,62,80,0,59,61,51,58,70],
[65,70,84,71,0,60,64,60,73],
[70,64,88,69,70,0,72,62,76],
[61,76,80,79,66,58,0,64,76],
[65,59,80,72,70,68,66,0,69],
[61,69,70,60,57,54,54,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,54,49,44,66,72,56,41],
[59,0,72,46,45,68,61,49,41],
[76,58,0,24,67,74,89,71,60],
[81,84,106,0,57,81,82,74,71],
[86,85,63,73,0,78,90,57,65],
[64,62,56,49,52,0,86,61,61],
[58,69,41,48,40,44,0,62,47],
[74,81,59,56,73,69,68,0,49],
[89,89,70,59,65,69,83,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,63,37,82,66,77,57,59],
[56,0,59,66,74,52,64,53,44],
[67,71,0,66,82,58,73,58,55],
[93,64,64,0,87,65,79,73,57],
[48,56,48,43,0,39,39,50,34],
[64,78,72,65,91,0,86,68,65],
[53,66,57,51,91,44,0,61,40],
[73,77,72,57,80,62,69,0,66],
[71,86,75,73,96,65,90,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,59,65,64,51,58,33,43],
[65,0,63,68,59,74,57,60,67],
[71,67,0,54,55,49,44,59,49],
[65,62,76,0,69,56,46,56,51],
[66,71,75,61,0,56,63,46,67],
[79,56,81,74,74,0,64,62,49],
[72,73,86,84,67,66,0,65,68],
[97,70,71,74,84,68,65,0,65],
[87,63,81,79,63,81,62,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,69,72,47,70,79,49,65],
[73,0,48,66,47,65,73,52,104],
[61,82,0,97,80,90,94,77,97],
[58,64,33,0,47,60,67,59,63],
[83,83,50,83,0,94,59,88,108],
[60,65,40,70,36,0,70,53,73],
[51,57,36,63,71,60,0,33,69],
[81,78,53,71,42,77,97,0,97],
[65,26,33,67,22,57,61,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,72,62,70,72,71,72,71],
[55,0,55,60,70,60,61,62,48],
[58,75,0,65,63,63,67,64,60],
[68,70,65,0,71,67,64,66,61],
[60,60,67,59,0,61,55,62,60],
[58,70,67,63,69,0,57,69,55],
[59,69,63,66,75,73,0,66,72],
[58,68,66,64,68,61,64,0,60],
[59,82,70,69,70,75,58,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,59,58,52,51,48,58,63],
[73,0,71,57,71,68,64,60,75],
[71,59,0,66,73,64,67,70,76],
[72,73,64,0,75,59,60,85,88],
[78,59,57,55,0,59,61,65,69],
[79,62,66,71,71,0,63,67,71],
[82,66,63,70,69,67,0,73,71],
[72,70,60,45,65,63,57,0,70],
[67,55,54,42,61,59,59,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,71,72,66,73,61,66,76],
[62,0,68,76,58,81,61,72,69],
[59,62,0,63,52,72,62,60,68],
[58,54,67,0,61,67,58,70,64],
[64,72,78,69,0,85,70,73,80],
[57,49,58,63,45,0,55,66,70],
[69,69,68,72,60,75,0,71,71],
[64,58,70,60,57,64,59,0,69],
[54,61,62,66,50,60,59,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,55,68,87,68,75,68,60],
[60,0,67,77,80,55,68,75,65],
[75,63,0,72,79,59,74,74,55],
[62,53,58,0,70,66,70,64,43],
[43,50,51,60,0,50,70,60,54],
[62,75,71,64,80,0,73,80,68],
[55,62,56,60,60,57,0,61,53],
[62,55,56,66,70,50,69,0,54],
[70,65,75,87,76,62,77,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,88,70,70,74,68,64,65],
[64,0,69,70,69,67,56,56,46],
[42,61,0,53,64,61,45,58,40],
[60,60,77,0,71,77,67,66,55],
[60,61,66,59,0,64,51,57,47],
[56,63,69,53,66,0,49,57,54],
[62,74,85,63,79,81,0,68,64],
[66,74,72,64,73,73,62,0,56],
[65,84,90,75,83,76,66,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,75,77,81,72,89,86,69],
[65,0,55,61,40,60,59,54,58],
[55,75,0,65,67,54,69,60,65],
[53,69,65,0,75,68,76,78,58],
[49,90,63,55,0,64,66,69,63],
[58,70,76,62,66,0,70,76,67],
[41,71,61,54,64,60,0,75,68],
[44,76,70,52,61,54,55,0,61],
[61,72,65,72,67,63,62,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,67,62,63,71,59,68,62],
[73,0,67,73,72,79,66,65,69],
[63,63,0,65,63,68,65,61,63],
[68,57,65,0,65,67,57,63,53],
[67,58,67,65,0,74,58,67,68],
[59,51,62,63,56,0,48,60,52],
[71,64,65,73,72,82,0,72,71],
[62,65,69,67,63,70,58,0,60],
[68,61,67,77,62,78,59,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,79,63,82,88,72,71,80],
[54,0,65,65,70,71,52,59,82],
[51,65,0,52,67,68,67,51,67],
[67,65,78,0,73,84,64,71,71],
[48,60,63,57,0,75,53,63,69],
[42,59,62,46,55,0,46,48,59],
[58,78,63,66,77,84,0,77,88],
[59,71,79,59,67,82,53,0,72],
[50,48,63,59,61,71,42,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,55,43,56,58,62,69,67],
[71,0,58,54,54,51,70,86,65],
[75,72,0,57,50,66,58,85,29],
[87,76,73,0,72,57,78,67,42],
[74,76,80,58,0,57,72,76,55],
[72,79,64,73,73,0,65,63,49],
[68,60,72,52,58,65,0,74,43],
[61,44,45,63,54,67,56,0,50],
[63,65,101,88,75,81,87,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,59,73,74,69,76,76,64],
[58,0,65,61,60,60,68,61,60],
[71,65,0,66,63,75,69,72,61],
[57,69,64,0,68,68,63,70,62],
[56,70,67,62,0,66,67,63,66],
[61,70,55,62,64,0,70,68,61],
[54,62,61,67,63,60,0,62,49],
[54,69,58,60,67,62,68,0,56],
[66,70,69,68,64,69,81,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,67,72,77,75,64,67,61],
[69,0,70,66,71,75,63,65,58],
[63,60,0,62,69,67,58,68,54],
[58,64,68,0,69,66,57,62,56],
[53,59,61,61,0,64,50,50,56],
[55,55,63,64,66,0,60,62,55],
[66,67,72,73,80,70,0,63,52],
[63,65,62,68,80,68,67,0,65],
[69,72,76,74,74,75,78,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,62,66,69,63,65,63],
[66,0,67,73,69,62,68,68,69],
[62,63,0,68,65,66,57,61,69],
[68,57,62,0,66,62,62,58,70],
[64,61,65,64,0,67,58,55,66],
[61,68,64,68,63,0,58,62,68],
[67,62,73,68,72,72,0,59,70],
[65,62,69,72,75,68,71,0,78],
[67,61,61,60,64,62,60,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,58,60,69,58,64,57],
[63,0,64,65,59,62,55,62,57],
[66,66,0,62,64,63,55,68,53],
[72,65,68,0,66,62,64,68,62],
[70,71,66,64,0,69,65,62,63],
[61,68,67,68,61,0,66,71,65],
[72,75,75,66,65,64,0,65,68],
[66,68,62,62,68,59,65,0,58],
[73,73,77,68,67,65,62,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,54,64,66,58,60,70,63],
[71,0,57,64,69,58,63,67,66],
[76,73,0,69,70,65,65,75,71],
[66,66,61,0,75,59,60,67,66],
[64,61,60,55,0,49,60,59,64],
[72,72,65,71,81,0,75,67,70],
[70,67,65,70,70,55,0,68,64],
[60,63,55,63,71,63,62,0,68],
[67,64,59,64,66,60,66,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,52,62,56,61,56,67,52],
[72,0,55,68,69,69,63,79,64],
[78,75,0,93,63,63,76,77,72],
[68,62,37,0,56,52,54,74,49],
[74,61,67,74,0,62,74,79,69],
[69,61,67,78,68,0,70,84,64],
[74,67,54,76,56,60,0,77,62],
[63,51,53,56,51,46,53,0,52],
[78,66,58,81,61,66,68,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,69,76,78,61,71,80,81],
[61,0,58,66,68,49,66,65,67],
[61,72,0,65,70,65,73,68,67],
[54,64,65,0,70,60,67,65,65],
[52,62,60,60,0,59,64,53,64],
[69,81,65,70,71,0,74,70,66],
[59,64,57,63,66,56,0,67,61],
[50,65,62,65,77,60,63,0,66],
[49,63,63,65,66,64,69,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,99,89,73,46,106,113],
[27,0,94,116,64,86,47,60,130],
[27,36,0,36,28,34,26,27,60],
[31,14,94,0,64,53,26,60,116],
[41,66,102,66,0,26,52,86,66],
[57,44,96,77,104,0,30,80,96],
[84,83,104,104,78,100,0,60,104],
[24,70,103,70,44,50,70,0,84],
[17,0,70,14,64,34,26,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,57,67,54,56,53,61,62],
[63,0,53,60,58,60,53,54,51],
[73,77,0,71,63,61,61,63,67],
[63,70,59,0,60,67,56,59,59],
[76,72,67,70,0,68,63,59,66],
[74,70,69,63,62,0,66,60,64],
[77,77,69,74,67,64,0,69,72],
[69,76,67,71,71,70,61,0,76],
[68,79,63,71,64,66,58,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,21,61,79,45,50,48,30],
[77,0,59,83,78,61,83,56,70],
[109,71,0,100,85,73,98,75,60],
[69,47,30,0,46,53,52,37,48],
[51,52,45,84,0,59,64,52,57],
[85,69,57,77,71,0,59,47,46],
[80,47,32,78,66,71,0,44,31],
[82,74,55,93,78,83,86,0,71],
[100,60,70,82,73,84,99,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,80,70,73,72,56,58,69],
[54,0,60,75,77,71,58,49,49],
[50,70,0,83,75,77,66,71,68],
[60,55,47,0,67,54,53,63,60],
[57,53,55,63,0,67,50,54,58],
[58,59,53,76,63,0,62,72,61],
[74,72,64,77,80,68,0,65,61],
[72,81,59,67,76,58,65,0,58],
[61,81,62,70,72,69,69,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,64,70,72,75,70,72,73],
[59,0,58,69,65,64,71,69,66],
[66,72,0,74,73,67,65,67,68],
[60,61,56,0,65,59,62,71,69],
[58,65,57,65,0,62,62,71,65],
[55,66,63,71,68,0,67,75,65],
[60,59,65,68,68,63,0,71,64],
[58,61,63,59,59,55,59,0,69],
[57,64,62,61,65,65,66,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,68,54,64,66,69,63,66],
[56,0,64,64,60,62,59,66,61],
[62,66,0,66,70,62,72,61,69],
[76,66,64,0,74,57,69,60,71],
[66,70,60,56,0,65,66,57,66],
[64,68,68,73,65,0,66,64,70],
[61,71,58,61,64,64,0,69,66],
[67,64,69,70,73,66,61,0,75],
[64,69,61,59,64,60,64,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,62,68,78,68,64,91,66],
[73,0,74,72,69,83,70,84,57],
[68,56,0,70,60,75,57,71,63],
[62,58,60,0,71,71,52,72,64],
[52,61,70,59,0,66,58,78,68],
[62,47,55,59,64,0,48,70,52],
[66,60,73,78,72,82,0,79,71],
[39,46,59,58,52,60,51,0,45],
[64,73,67,66,62,78,59,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,57,60,62,52,58,58,64],
[76,0,72,68,71,64,62,69,71],
[73,58,0,63,68,58,67,68,69],
[70,62,67,0,70,65,73,66,70],
[68,59,62,60,0,61,64,57,69],
[78,66,72,65,69,0,68,73,78],
[72,68,63,57,66,62,0,70,71],
[72,61,62,64,73,57,60,0,69],
[66,59,61,60,61,52,59,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,42,92,88,63,78,83,75],
[44,0,42,83,70,65,68,42,92],
[88,88,0,67,64,95,96,77,84],
[38,47,63,0,38,76,31,40,55],
[42,60,66,92,0,70,58,48,49],
[67,65,35,54,60,0,73,48,70],
[52,62,34,99,72,57,0,73,60],
[47,88,53,90,82,82,57,0,69],
[55,38,46,75,81,60,70,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,67,68,74,57,58,65,65],
[73,0,76,74,71,66,64,67,72],
[63,54,0,70,67,69,53,70,64],
[62,56,60,0,70,64,60,57,72],
[56,59,63,60,0,54,53,53,62],
[73,64,61,66,76,0,63,56,63],
[72,66,77,70,77,67,0,70,63],
[65,63,60,73,77,74,60,0,74],
[65,58,66,58,68,67,67,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,62,69,56,67,60,65,62],
[54,0,53,57,54,58,50,63,63],
[68,77,0,64,63,62,58,66,68],
[61,73,66,0,62,67,66,62,71],
[74,76,67,68,0,70,66,70,56],
[63,72,68,63,60,0,70,61,60],
[70,80,72,64,64,60,0,73,78],
[65,67,64,68,60,69,57,0,75],
[68,67,62,59,74,70,52,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,58,63,68,67,65,75,72],
[62,0,66,70,63,65,62,76,65],
[72,64,0,76,61,66,63,73,68],
[67,60,54,0,58,57,56,69,59],
[62,67,69,72,0,69,64,79,70],
[63,65,64,73,61,0,62,74,59],
[65,68,67,74,66,68,0,72,72],
[55,54,57,61,51,56,58,0,67],
[58,65,62,71,60,71,58,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,71,68,69,65,71,72,59],
[60,0,64,69,55,58,70,66,58],
[59,66,0,61,59,58,62,61,60],
[62,61,69,0,58,74,71,69,65],
[61,75,71,72,0,65,71,74,70],
[65,72,72,56,65,0,66,67,63],
[59,60,68,59,59,64,0,64,57],
[58,64,69,61,56,63,66,0,57],
[71,72,70,65,60,67,73,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,69,62,64,68,66,65,72],
[57,0,65,56,55,63,54,54,62],
[61,65,0,62,57,64,65,55,63],
[68,74,68,0,71,74,72,56,67],
[66,75,73,59,0,72,71,63,77],
[62,67,66,56,58,0,59,57,61],
[64,76,65,58,59,71,0,57,62],
[65,76,75,74,67,73,73,0,77],
[58,68,67,63,53,69,68,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,75,79,74,76,84,80,64],
[62,0,66,67,77,79,74,72,70],
[55,64,0,76,62,75,79,65,67],
[51,63,54,0,57,77,80,69,54],
[56,53,68,73,0,83,80,65,51],
[54,51,55,53,47,0,65,49,40],
[46,56,51,50,50,65,0,63,43],
[50,58,65,61,65,81,67,0,56],
[66,60,63,76,79,90,87,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,75,77,82,73,77,77,77],
[66,0,55,68,67,61,57,65,63],
[55,75,0,73,84,57,72,64,79],
[53,62,57,0,63,65,64,74,72],
[48,63,46,67,0,55,58,59,73],
[57,69,73,65,75,0,70,64,67],
[53,73,58,66,72,60,0,69,67],
[53,65,66,56,71,66,61,0,62],
[53,67,51,58,57,63,63,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,72,63,55,57,66,53,60],
[69,0,64,72,52,59,70,58,63],
[58,66,0,62,60,56,51,61,63],
[67,58,68,0,57,51,66,63,65],
[75,78,70,73,0,77,73,63,74],
[73,71,74,79,53,0,76,72,67],
[64,60,79,64,57,54,0,75,65],
[77,72,69,67,67,58,55,0,59],
[70,67,67,65,56,63,65,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,79,56,55,64,40,77,58],
[56,0,73,62,49,59,41,77,48],
[51,57,0,56,45,59,46,62,59],
[74,68,74,0,59,69,47,76,61],
[75,81,85,71,0,56,56,72,78],
[66,71,71,61,74,0,66,84,60],
[90,89,84,83,74,64,0,89,87],
[53,53,68,54,58,46,41,0,53],
[72,82,71,69,52,70,43,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,72,51,51,72,51,109,51],
[79,0,130,109,21,79,58,79,58],
[58,0,0,58,0,79,58,58,58],
[79,21,72,0,21,79,79,79,58],
[79,109,130,109,0,130,58,130,109],
[58,51,51,51,0,0,58,109,51],
[79,72,72,51,72,72,0,130,51],
[21,51,72,51,0,21,0,0,51],
[79,72,72,72,21,79,79,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,75,72,63,74,76,61,65],
[60,0,75,72,63,68,62,54,67],
[55,55,0,62,60,58,58,61,64],
[58,58,68,0,58,69,62,64,70],
[67,67,70,72,0,65,54,71,69],
[56,62,72,61,65,0,60,65,63],
[54,68,72,68,76,70,0,68,75],
[69,76,69,66,59,65,62,0,70],
[65,63,66,60,61,67,55,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,72,65,67,65,55,57,73],
[60,0,65,62,60,60,58,62,67],
[58,65,0,63,56,63,55,58,59],
[65,68,67,0,64,67,55,65,65],
[63,70,74,66,0,68,63,66,69],
[65,70,67,63,62,0,62,59,66],
[75,72,75,75,67,68,0,57,72],
[73,68,72,65,64,71,73,0,64],
[57,63,71,65,61,64,58,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,90,89,53,53,90,51,71],
[79,0,62,62,90,72,90,52,72],
[40,68,0,60,33,53,71,28,53],
[41,68,70,0,51,54,72,47,67],
[77,40,97,79,0,49,107,70,62],
[77,58,77,76,81,0,105,87,59],
[40,40,59,58,23,25,0,18,38],
[79,78,102,83,60,43,112,0,84],
[59,58,77,63,68,71,92,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,77,64,55,65,88,67,83],
[65,0,56,63,62,71,68,79,79],
[53,74,0,54,66,63,73,82,76],
[66,67,76,0,62,64,84,81,81],
[75,68,64,68,0,65,74,78,76],
[65,59,67,66,65,0,83,71,78],
[42,62,57,46,56,47,0,60,50],
[63,51,48,49,52,59,70,0,64],
[47,51,54,49,54,52,80,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,63,63,67,54,61,59],
[66,0,62,65,58,71,62,63,71],
[62,68,0,65,71,77,68,74,64],
[67,65,65,0,62,79,60,66,69],
[67,72,59,68,0,80,59,60,71],
[63,59,53,51,50,0,51,54,63],
[76,68,62,70,71,79,0,67,62],
[69,67,56,64,70,76,63,0,54],
[71,59,66,61,59,67,68,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,66,63,71,70,61,60,61],
[67,0,60,52,69,68,58,57,67],
[64,70,0,62,70,61,55,55,67],
[67,78,68,0,72,71,64,70,72],
[59,61,60,58,0,54,57,60,60],
[60,62,69,59,76,0,67,61,70],
[69,72,75,66,73,63,0,69,68],
[70,73,75,60,70,69,61,0,68],
[69,63,63,58,70,60,62,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,39,33,65,49,64,63,62],
[70,0,57,45,69,51,49,60,61],
[91,73,0,52,85,79,98,75,101],
[97,85,78,0,75,65,85,64,81],
[65,61,45,55,0,40,49,55,63],
[81,79,51,65,90,0,69,63,103],
[66,81,32,45,81,61,0,58,73],
[67,70,55,66,75,67,72,0,80],
[68,69,29,49,67,27,57,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,55,53,63,65,65,51,60],
[64,0,55,66,69,57,59,59,61],
[75,75,0,69,82,70,74,70,64],
[77,64,61,0,68,60,69,61,65],
[67,61,48,62,0,61,60,54,59],
[65,73,60,70,69,0,72,66,69],
[65,71,56,61,70,58,0,61,54],
[79,71,60,69,76,64,69,0,64],
[70,69,66,65,71,61,76,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,55,55,51,48,53,54,59],
[62,0,56,55,61,48,49,40,46],
[75,74,0,67,69,55,65,61,72],
[75,75,63,0,64,60,52,66,58],
[79,69,61,66,0,72,70,64,72],
[82,82,75,70,58,0,65,67,56],
[77,81,65,78,60,65,0,71,56],
[76,90,69,64,66,63,59,0,70],
[71,84,58,72,58,74,74,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,59,57,70,63,50,57,55],
[73,0,60,69,73,67,50,57,73],
[71,70,0,77,78,76,65,59,70],
[73,61,53,0,73,59,45,61,61],
[60,57,52,57,0,63,42,56,61],
[67,63,54,71,67,0,51,51,60],
[80,80,65,85,88,79,0,71,73],
[73,73,71,69,74,79,59,0,71],
[75,57,60,69,69,70,57,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,64,69,65,82,66,71,73],
[49,0,62,69,58,62,53,55,58],
[66,68,0,70,71,71,63,72,69],
[61,61,60,0,67,65,62,67,65],
[65,72,59,63,0,77,65,66,67],
[48,68,59,65,53,0,53,64,53],
[64,77,67,68,65,77,0,75,79],
[59,75,58,63,64,66,55,0,62],
[57,72,61,65,63,77,51,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,93,64,70,67,69,55,57],
[65,0,93,84,64,61,72,73,78],
[37,37,0,62,30,48,48,31,55],
[66,46,68,0,46,54,42,35,46],
[60,66,100,84,0,65,54,59,67],
[63,69,82,76,65,0,65,55,71],
[61,58,82,88,76,65,0,77,82],
[75,57,99,95,71,75,53,0,91],
[73,52,75,84,63,59,48,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,58,67,61,65,66,65,57],
[89,0,80,61,75,78,65,75,80],
[72,50,0,64,62,79,64,77,66],
[63,69,66,0,69,66,66,61,72],
[69,55,68,61,0,57,54,68,71],
[65,52,51,64,73,0,64,65,65],
[64,65,66,64,76,66,0,64,70],
[65,55,53,69,62,65,66,0,83],
[73,50,64,58,59,65,60,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,49,56,60,60,53,48,55],
[73,0,68,55,63,67,59,63,75],
[81,62,0,59,76,69,70,66,75],
[74,75,71,0,67,63,68,62,75],
[70,67,54,63,0,66,58,58,65],
[70,63,61,67,64,0,52,48,59],
[77,71,60,62,72,78,0,66,66],
[82,67,64,68,72,82,64,0,70],
[75,55,55,55,65,71,64,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,63,53,57,57,61,48,51],
[78,0,69,66,66,70,68,56,68],
[67,61,0,70,68,63,63,59,68],
[77,64,60,0,64,72,67,58,64],
[73,64,62,66,0,63,62,56,65],
[73,60,67,58,67,0,63,55,62],
[69,62,67,63,68,67,0,65,62],
[82,74,71,72,74,75,65,0,68],
[79,62,62,66,65,68,68,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,67,68,61,61,71,73],
[60,0,55,52,68,56,58,68,77],
[65,75,0,72,72,72,62,71,78],
[63,78,58,0,65,66,66,62,67],
[62,62,58,65,0,71,61,67,71],
[69,74,58,64,59,0,62,67,75],
[69,72,68,64,69,68,0,69,69],
[59,62,59,68,63,63,61,0,75],
[57,53,52,63,59,55,61,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,73,62,78,65,75,66,71],
[63,0,59,59,67,70,73,64,60],
[57,71,0,68,77,62,80,74,70],
[68,71,62,0,78,60,77,68,68],
[52,63,53,52,0,59,75,65,68],
[65,60,68,70,71,0,83,74,76],
[55,57,50,53,55,47,0,52,51],
[64,66,56,62,65,56,78,0,66],
[59,70,60,62,62,54,79,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,64,71,79,77,79,58,67],
[53,0,57,28,74,59,53,43,39],
[66,73,0,73,80,66,74,73,65],
[59,102,57,0,96,76,86,57,71],
[51,56,50,34,0,42,54,49,40],
[53,71,64,54,88,0,70,43,50],
[51,77,56,44,76,60,0,47,54],
[72,87,57,73,81,87,83,0,80],
[63,91,65,59,90,80,76,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,52,68,60,63,70,56,52],
[58,0,58,69,63,57,57,65,58],
[78,72,0,67,77,61,82,81,63],
[62,61,63,0,77,58,63,68,61],
[70,67,53,53,0,61,57,77,48],
[67,73,69,72,69,0,69,70,65],
[60,73,48,67,73,61,0,64,53],
[74,65,49,62,53,60,66,0,55],
[78,72,67,69,82,65,77,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,65,71,75,67,71,75,51],
[59,0,44,60,60,56,65,52,46],
[65,86,0,78,76,81,77,71,67],
[59,70,52,0,68,68,66,61,54],
[55,70,54,62,0,57,63,65,50],
[63,74,49,62,73,0,71,71,55],
[59,65,53,64,67,59,0,60,51],
[55,78,59,69,65,59,70,0,55],
[79,84,63,76,80,75,79,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,81,67,51,73,73,69,64],
[75,0,72,75,61,63,60,73,67],
[49,58,0,57,49,55,48,59,53],
[63,55,73,0,62,67,55,72,61],
[79,69,81,68,0,77,66,72,65],
[57,67,75,63,53,0,59,79,61],
[57,70,82,75,64,71,0,80,67],
[61,57,71,58,58,51,50,0,66],
[66,63,77,69,65,69,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,69,58,58,63,59,62,64],
[72,0,68,62,72,69,55,62,63],
[61,62,0,61,67,61,59,60,65],
[72,68,69,0,73,65,73,69,68],
[72,58,63,57,0,66,58,61,70],
[67,61,69,65,64,0,68,69,64],
[71,75,71,57,72,62,0,67,70],
[68,68,70,61,69,61,63,0,64],
[66,67,65,62,60,66,60,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,67,66,70,66,73,58,64],
[69,0,69,70,68,72,69,65,61],
[63,61,0,65,69,65,63,58,55],
[64,60,65,0,61,74,73,52,59],
[60,62,61,69,0,68,67,58,62],
[64,58,65,56,62,0,71,55,63],
[57,61,67,57,63,59,0,56,64],
[72,65,72,78,72,75,74,0,71],
[66,69,75,71,68,67,66,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,70,78,63,79,71,66,67],
[67,0,76,62,77,70,69,67,67],
[60,54,0,63,57,65,60,63,55],
[52,68,67,0,66,63,67,67,55],
[67,53,73,64,0,75,61,69,70],
[51,60,65,67,55,0,65,68,61],
[59,61,70,63,69,65,0,82,66],
[64,63,67,63,61,62,48,0,60],
[63,63,75,75,60,69,64,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,54,67,52,59,63,62,64],
[74,0,63,71,67,70,71,69,63],
[76,67,0,78,63,66,76,68,77],
[63,59,52,0,68,65,58,71,59],
[78,63,67,62,0,70,56,62,72],
[71,60,64,65,60,0,68,73,73],
[67,59,54,72,74,62,0,69,74],
[68,61,62,59,68,57,61,0,68],
[66,67,53,71,58,57,56,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,46,46,76,66,63,53,62],
[70,0,68,55,76,68,75,72,71],
[84,62,0,67,76,81,76,61,80],
[84,75,63,0,83,82,84,64,79],
[54,54,54,47,0,66,56,55,61],
[64,62,49,48,64,0,62,52,64],
[67,55,54,46,74,68,0,52,64],
[77,58,69,66,75,78,78,0,65],
[68,59,50,51,69,66,66,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,63,62,65,49,60,60,55],
[74,0,62,65,70,54,67,59,69],
[67,68,0,63,63,54,67,73,61],
[68,65,67,0,62,68,65,62,61],
[65,60,67,68,0,71,68,66,70],
[81,76,76,62,59,0,71,65,66],
[70,63,63,65,62,59,0,65,62],
[70,71,57,68,64,65,65,0,55],
[75,61,69,69,60,64,68,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,25,58,83,110,67,68,58],
[72,0,52,81,101,130,67,95,81],
[105,78,0,78,103,130,96,88,58],
[72,49,52,0,74,115,52,54,110],
[47,29,27,56,0,90,52,54,85],
[20,0,0,15,40,0,52,25,29],
[63,63,34,78,78,78,0,63,78],
[62,35,42,76,76,105,67,0,56],
[72,49,72,20,45,101,52,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,55,63,58,59,61,60,61],
[79,0,72,70,80,74,80,67,61],
[75,58,0,66,68,90,81,86,68],
[67,60,64,0,58,63,72,66,50],
[72,50,62,72,0,75,74,78,64],
[71,56,40,67,55,0,64,73,64],
[69,50,49,58,56,66,0,58,67],
[70,63,44,64,52,57,72,0,71],
[69,69,62,80,66,66,63,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,64,55,62,62,65,58,62],
[74,0,73,63,72,65,68,70,66],
[66,57,0,62,66,61,62,64,65],
[75,67,68,0,72,71,69,70,62],
[68,58,64,58,0,58,62,60,63],
[68,65,69,59,72,0,69,67,65],
[65,62,68,61,68,61,0,66,58],
[72,60,66,60,70,63,64,0,58],
[68,64,65,68,67,65,72,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,47,61,50,56,40,34,69],
[88,0,68,69,57,63,64,77,84],
[83,62,0,47,79,82,86,52,100],
[69,61,83,0,57,67,81,72,100],
[80,73,51,73,0,105,103,58,98],
[74,67,48,63,25,0,54,52,71],
[90,66,44,49,27,76,0,40,86],
[96,53,78,58,72,78,90,0,88],
[61,46,30,30,32,59,44,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,61,72,74,69,67,58,70],
[62,0,53,53,64,70,51,68,71],
[69,77,0,76,63,68,66,60,67],
[58,77,54,0,72,73,58,52,66],
[56,66,67,58,0,70,52,52,57],
[61,60,62,57,60,0,61,56,69],
[63,79,64,72,78,69,0,61,76],
[72,62,70,78,78,74,69,0,78],
[60,59,63,64,73,61,54,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,72,65,72,62,65,70,65],
[62,0,63,73,65,64,60,64,60],
[58,67,0,69,68,58,62,67,65],
[65,57,61,0,58,54,49,58,56],
[58,65,62,72,0,54,62,63,60],
[68,66,72,76,76,0,56,69,76],
[65,70,68,81,68,74,0,69,72],
[60,66,63,72,67,61,61,0,67],
[65,70,65,74,70,54,58,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,63,60,70,61,60,65,62],
[70,0,67,63,73,60,61,63,66],
[67,63,0,63,60,68,66,60,65],
[70,67,67,0,67,73,62,69,63],
[60,57,70,63,0,65,64,61,62],
[69,70,62,57,65,0,55,59,62],
[70,69,64,68,66,75,0,61,66],
[65,67,70,61,69,71,69,0,67],
[68,64,65,67,68,68,64,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,64,67,55,53,67,63,64],
[65,0,81,77,67,64,66,71,67],
[66,49,0,62,58,58,64,64,65],
[63,53,68,0,63,57,62,67,60],
[75,63,72,67,0,68,71,62,56],
[77,66,72,73,62,0,68,78,68],
[63,64,66,68,59,62,0,70,69],
[67,59,66,63,68,52,60,0,63],
[66,63,65,70,74,62,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,78,65,70,80,65,76,64],
[51,0,64,70,59,83,58,71,69],
[52,66,0,75,65,85,62,78,69],
[65,60,55,0,61,77,56,58,56],
[60,71,65,69,0,84,57,91,71],
[50,47,45,53,46,0,53,64,55],
[65,72,68,74,73,77,0,62,71],
[54,59,52,72,39,66,68,0,71],
[66,61,61,74,59,75,59,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,64,59,62,52,48,66,64],
[50,0,52,52,60,39,36,47,35],
[66,78,0,74,61,56,52,55,64],
[71,78,56,0,66,52,47,64,56],
[68,70,69,64,0,43,46,62,51],
[78,91,74,78,87,0,69,73,59],
[82,94,78,83,84,61,0,75,72],
[64,83,75,66,68,57,55,0,42],
[66,95,66,74,79,71,58,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,57,67,58,49,68,82,92],
[72,0,53,67,51,69,62,69,74],
[73,77,0,77,78,64,85,78,80],
[63,63,53,0,60,57,57,77,65],
[72,79,52,70,0,56,55,74,83],
[81,61,66,73,74,0,74,80,82],
[62,68,45,73,75,56,0,62,75],
[48,61,52,53,56,50,68,0,76],
[38,56,50,65,47,48,55,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,58,59,59,57,54,71,58],
[48,0,46,39,44,46,37,52,34],
[72,84,0,72,69,74,54,77,72],
[71,91,58,0,54,72,72,75,75],
[71,86,61,76,0,62,56,77,63],
[73,84,56,58,68,0,63,85,80],
[76,93,76,58,74,67,0,79,77],
[59,78,53,55,53,45,51,0,38],
[72,96,58,55,67,50,53,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,65,66,62,58,61,64,65],
[69,0,71,62,61,64,52,61,59],
[65,59,0,57,57,75,59,56,67],
[64,68,73,0,66,57,59,68,62],
[68,69,73,64,0,69,63,63,59],
[72,66,55,73,61,0,58,61,63],
[69,78,71,71,67,72,0,64,74],
[66,69,74,62,67,69,66,0,70],
[65,71,63,68,71,67,56,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,73,71,63,69,61,73,71],
[58,0,71,57,66,64,59,83,72],
[57,59,0,62,61,75,59,69,69],
[59,73,68,0,66,66,63,69,74],
[67,64,69,64,0,77,67,67,70],
[61,66,55,64,53,0,64,64,70],
[69,71,71,67,63,66,0,82,74],
[57,47,61,61,63,66,48,0,50],
[59,58,61,56,60,60,56,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,58,49,64,82,52,63,71],
[63,0,72,49,72,77,58,62,69],
[72,58,0,54,60,57,55,64,65],
[81,81,76,0,72,78,74,65,82],
[66,58,70,58,0,60,53,59,69],
[48,53,73,52,70,0,55,55,72],
[78,72,75,56,77,75,0,67,85],
[67,68,66,65,71,75,63,0,70],
[59,61,65,48,61,58,45,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,65,82,79,64,80,79,74],
[33,0,52,64,53,48,59,49,50],
[65,78,0,66,62,51,75,53,70],
[48,66,64,0,39,45,52,51,58],
[51,77,68,91,0,61,66,52,59],
[66,82,79,85,69,0,87,58,89],
[50,71,55,78,64,43,0,56,70],
[51,81,77,79,78,72,74,0,80],
[56,80,60,72,71,41,60,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,32,51,62,42,33,45,40],
[67,0,33,65,57,50,46,47,44],
[98,97,0,62,109,90,76,99,50],
[79,65,68,0,102,90,67,102,91],
[68,73,21,28,0,69,28,60,24],
[88,80,40,40,61,0,55,47,58],
[97,84,54,63,102,75,0,75,53],
[85,83,31,28,70,83,55,0,64],
[90,86,80,39,106,72,77,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,65,59,56,48,61,69,76],
[76,0,78,89,74,52,77,78,84],
[65,52,0,68,70,44,49,66,72],
[71,41,62,0,58,61,66,72,63],
[74,56,60,72,0,56,68,75,85],
[82,78,86,69,74,0,87,60,94],
[69,53,81,64,62,43,0,75,81],
[61,52,64,58,55,70,55,0,84],
[54,46,58,67,45,36,49,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,78,63,60,61,82,75,68],
[59,0,70,41,59,63,71,79,61],
[52,60,0,47,50,48,59,44,41],
[67,89,83,0,62,54,58,75,64],
[70,71,80,68,0,45,59,61,49],
[69,67,82,76,85,0,80,64,39],
[48,59,71,72,71,50,0,50,57],
[55,51,86,55,69,66,80,0,45],
[62,69,89,66,81,91,73,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,72,65,71,77,67,71,67],
[63,0,74,66,64,66,65,61,65],
[58,56,0,64,71,58,57,51,59],
[65,64,66,0,67,70,66,62,67],
[59,66,59,63,0,72,64,50,65],
[53,64,72,60,58,0,59,60,54],
[63,65,73,64,66,71,0,62,76],
[59,69,79,68,80,70,68,0,66],
[63,65,71,63,65,76,54,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,60,64,76,72,65,60,54],
[79,0,69,67,77,69,69,69,62],
[70,61,0,57,67,78,57,61,49],
[66,63,73,0,77,70,73,60,68],
[54,53,63,53,0,66,53,54,59],
[58,61,52,60,64,0,49,60,62],
[65,61,73,57,77,81,0,61,73],
[70,61,69,70,76,70,69,0,65],
[76,68,81,62,71,68,57,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,63,63,67,53,55,61,49],
[74,0,71,67,67,67,68,74,65],
[67,59,0,62,66,64,55,56,52],
[67,63,68,0,68,59,62,64,62],
[63,63,64,62,0,55,57,74,56],
[77,63,66,71,75,0,64,70,67],
[75,62,75,68,73,66,0,72,62],
[69,56,74,66,56,60,58,0,56],
[81,65,78,68,74,63,68,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,61,61,58,60,67,59,59],
[64,0,70,59,66,62,65,71,62],
[69,60,0,60,59,63,70,62,64],
[69,71,70,0,65,67,69,69,69],
[72,64,71,65,0,67,70,68,65],
[70,68,67,63,63,0,62,61,66],
[63,65,60,61,60,68,0,64,58],
[71,59,68,61,62,69,66,0,53],
[71,68,66,61,65,64,72,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,63,42,65,55,59,57,57],
[74,0,72,61,63,61,61,59,64],
[67,58,0,49,67,44,53,60,61],
[88,69,81,0,74,69,72,63,69],
[65,67,63,56,0,57,60,65,65],
[75,69,86,61,73,0,71,74,72],
[71,69,77,58,70,59,0,64,63],
[73,71,70,67,65,56,66,0,67],
[73,66,69,61,65,58,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,63,69,65,65,62,64,61],
[63,0,62,69,70,59,57,66,64],
[67,68,0,66,69,51,63,68,60],
[61,61,64,0,66,64,66,61,61],
[65,60,61,64,0,62,62,64,63],
[65,71,79,66,68,0,65,68,69],
[68,73,67,64,68,65,0,67,67],
[66,64,62,69,66,62,63,0,65],
[69,66,70,69,67,61,63,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,63,50,59,71,69,64,68],
[87,0,64,74,65,77,76,79,62],
[67,66,0,45,63,73,64,61,75],
[80,56,85,0,61,86,63,63,74],
[71,65,67,69,0,71,69,74,62],
[59,53,57,44,59,0,48,46,51],
[61,54,66,67,61,82,0,70,69],
[66,51,69,67,56,84,60,0,63],
[62,68,55,56,68,79,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,62,87,110,70,71,98,56],
[37,0,52,36,93,33,71,43,40],
[68,78,0,90,78,55,52,65,38],
[43,94,40,0,90,52,72,81,40],
[20,37,52,40,0,25,35,51,37],
[60,97,75,78,105,0,62,110,74],
[59,59,78,58,95,68,0,72,58],
[32,87,65,49,79,20,58,0,25],
[74,90,92,90,93,56,72,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,76,63,64,72,55,57,62],
[68,0,80,63,71,71,69,61,71],
[54,50,0,62,56,67,66,56,57],
[67,67,68,0,72,80,74,64,69],
[66,59,74,58,0,79,60,66,62],
[58,59,63,50,51,0,53,56,58],
[75,61,64,56,70,77,0,67,70],
[73,69,74,66,64,74,63,0,66],
[68,59,73,61,68,72,60,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,67,60,51,60,49,59,58],
[67,0,69,49,55,60,60,63,66],
[63,61,0,63,63,60,65,62,63],
[70,81,67,0,63,65,60,69,64],
[79,75,67,67,0,72,62,72,69],
[70,70,70,65,58,0,63,63,63],
[81,70,65,70,68,67,0,70,70],
[71,67,68,61,58,67,60,0,64],
[72,64,67,66,61,67,60,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,57,92,83,108,65,82,121],
[43,0,51,59,68,93,61,61,75],
[73,79,0,90,77,99,65,68,103],
[38,71,40,0,55,92,38,70,83],
[47,62,53,75,0,76,31,54,93],
[22,37,31,38,54,0,32,72,70],
[65,69,65,92,99,98,0,80,93],
[48,69,62,60,76,58,50,0,77],
[9,55,27,47,37,60,37,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,61,54,71,69,60,68,60],
[58,0,68,61,54,61,54,66,55],
[69,62,0,61,64,69,58,58,56],
[76,69,69,0,61,70,62,72,68],
[59,76,66,69,0,66,61,67,53],
[61,69,61,60,64,0,56,66,63],
[70,76,72,68,69,74,0,63,58],
[62,64,72,58,63,64,67,0,62],
[70,75,74,62,77,67,72,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,71,95,82,70,73,52,66],
[56,0,59,79,69,59,67,60,55],
[59,71,0,64,72,60,61,56,75],
[35,51,66,0,69,52,48,48,61],
[48,61,58,61,0,58,47,52,61],
[60,71,70,78,72,0,58,60,68],
[57,63,69,82,83,72,0,64,81],
[78,70,74,82,78,70,66,0,61],
[64,75,55,69,69,62,49,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,59,65,62,63,67,62,67],
[70,0,72,71,70,70,67,65,73],
[71,58,0,66,67,61,67,64,67],
[65,59,64,0,58,57,66,63,68],
[68,60,63,72,0,64,69,64,68],
[67,60,69,73,66,0,68,63,70],
[63,63,63,64,61,62,0,60,60],
[68,65,66,67,66,67,70,0,74],
[63,57,63,62,62,60,70,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,68,84,53,76,108,94,32],
[41,0,55,51,49,85,54,67,51],
[62,75,0,84,53,71,58,39,37],
[46,79,46,0,35,44,85,85,19],
[77,81,77,95,0,62,104,101,72],
[54,45,59,86,68,0,58,82,43],
[22,76,72,45,26,72,0,48,32],
[36,63,91,45,29,48,82,0,49],
[98,79,93,111,58,87,98,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,81,61,75,77,77,73,66],
[71,0,74,82,67,61,78,69,91],
[49,56,0,61,48,75,61,64,68],
[69,48,69,0,63,63,68,64,77],
[55,63,82,67,0,75,79,77,68],
[53,69,55,67,55,0,86,71,67],
[53,52,69,62,51,44,0,70,55],
[57,61,66,66,53,59,60,0,74],
[64,39,62,53,62,63,75,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,53,53,59,62,61,71,55],
[61,0,59,56,58,57,60,55,49],
[77,71,0,57,59,66,73,68,60],
[77,74,73,0,59,60,62,79,63],
[71,72,71,71,0,60,73,62,66],
[68,73,64,70,70,0,64,58,54],
[69,70,57,68,57,66,0,67,59],
[59,75,62,51,68,72,63,0,53],
[75,81,70,67,64,76,71,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,68,70,76,84,61,70,88],
[57,0,38,59,55,65,71,65,62],
[62,92,0,73,89,77,78,69,81],
[60,71,57,0,70,73,73,78,83],
[54,75,41,60,0,61,70,61,71],
[46,65,53,57,69,0,63,73,73],
[69,59,52,57,60,67,0,70,72],
[60,65,61,52,69,57,60,0,64],
[42,68,49,47,59,57,58,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,64,62,56,78,87,73,66],
[77,0,70,69,49,59,77,82,72],
[66,60,0,45,49,68,70,86,65],
[68,61,85,0,64,78,82,85,70],
[74,81,81,66,0,73,78,75,64],
[52,71,62,52,57,0,67,77,63],
[43,53,60,48,52,63,0,67,60],
[57,48,44,45,55,53,63,0,55],
[64,58,65,60,66,67,70,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,61,66,66,75,64,70,80],
[56,0,59,58,52,66,54,58,61],
[69,71,0,61,73,66,60,69,71],
[64,72,69,0,67,77,65,65,70],
[64,78,57,63,0,62,61,68,73],
[55,64,64,53,68,0,62,70,71],
[66,76,70,65,69,68,0,69,72],
[60,72,61,65,62,60,61,0,74],
[50,69,59,60,57,59,58,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,89,79,54,80,95,90,59],
[29,0,63,38,31,52,59,54,52],
[41,67,0,74,29,71,64,71,55],
[51,92,56,0,40,54,53,50,68],
[76,99,101,90,0,93,91,78,61],
[50,78,59,76,37,0,66,74,57],
[35,71,66,77,39,64,0,60,48],
[40,76,59,80,52,56,70,0,69],
[71,78,75,62,69,73,82,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,58,63,60,60,56,73,64],
[74,0,60,79,76,59,68,78,63],
[72,70,0,56,77,71,55,64,72],
[67,51,74,0,75,72,58,76,68],
[70,54,53,55,0,62,46,64,51],
[70,71,59,58,68,0,61,59,62],
[74,62,75,72,84,69,0,75,75],
[57,52,66,54,66,71,55,0,55],
[66,67,58,62,79,68,55,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,58,85,30,52,94,56,53],
[35,0,35,51,40,43,64,36,43],
[72,95,0,76,51,57,86,77,58],
[45,79,54,0,32,48,66,57,46],
[100,90,79,98,0,58,97,55,88],
[78,87,73,82,72,0,93,56,103],
[36,66,44,64,33,37,0,63,40],
[74,94,53,73,75,74,67,0,79],
[77,87,72,84,42,27,90,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,61,64,67,76,79,47,62],
[66,0,75,77,64,60,73,60,56],
[69,55,0,70,60,66,61,51,65],
[66,53,60,0,63,56,59,48,70],
[63,66,70,67,0,66,71,73,59],
[54,70,64,74,64,0,56,65,61],
[51,57,69,71,59,74,0,69,74],
[83,70,79,82,57,65,61,0,65],
[68,74,65,60,71,69,56,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,93,68,41,42,47,58,62],
[90,0,96,54,77,62,61,100,93],
[37,34,0,37,35,24,33,54,37],
[62,76,93,0,81,70,79,79,83],
[89,53,95,49,0,37,100,77,67],
[88,68,106,60,93,0,90,79,76],
[83,69,97,51,30,40,0,50,58],
[72,30,76,51,53,51,80,0,62],
[68,37,93,47,63,54,72,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,72,70,71,75,62,58],
[60,0,77,66,84,73,75,64,68],
[64,53,0,60,73,61,68,67,59],
[58,64,70,0,71,60,64,65,65],
[60,46,57,59,0,56,64,56,52],
[59,57,69,70,74,0,72,60,62],
[55,55,62,66,66,58,0,57,55],
[68,66,63,65,74,70,73,0,65],
[72,62,71,65,78,68,75,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,82,60,62,60,63,65,56],
[56,0,67,60,62,60,58,56,58],
[48,63,0,60,57,50,54,56,56],
[70,70,70,0,69,66,66,60,65],
[68,68,73,61,0,56,62,62,58],
[70,70,80,64,74,0,72,72,66],
[67,72,76,64,68,58,0,73,59],
[65,74,74,70,68,58,57,0,58],
[74,72,74,65,72,64,71,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,68,73,52,72,67,56,75],
[68,0,71,59,64,62,65,62,68],
[62,59,0,71,68,72,74,83,78],
[57,71,59,0,59,66,62,57,67],
[78,66,62,71,0,72,58,65,76],
[58,68,58,64,58,0,67,53,71],
[63,65,56,68,72,63,0,63,74],
[74,68,47,73,65,77,67,0,74],
[55,62,52,63,54,59,56,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,58,63,46,61,77,68,60],
[58,0,64,56,58,73,59,66,71],
[72,66,0,65,71,60,78,61,77],
[67,74,65,0,58,64,78,86,62],
[84,72,59,72,0,63,72,66,61],
[69,57,70,66,67,0,62,72,60],
[53,71,52,52,58,68,0,61,55],
[62,64,69,44,64,58,69,0,51],
[70,59,53,68,69,70,75,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,58,62,53,70,69,51,57],
[81,0,68,79,70,72,63,62,51],
[72,62,0,70,63,68,75,67,59],
[68,51,60,0,54,53,65,52,56],
[77,60,67,76,0,72,75,71,63],
[60,58,62,77,58,0,72,60,54],
[61,67,55,65,55,58,0,61,57],
[79,68,63,78,59,70,69,0,68],
[73,79,71,74,67,76,73,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,68,70,69,64,71,65],
[65,0,61,74,67,67,65,75,70],
[65,69,0,67,63,64,71,69,68],
[62,56,63,0,67,61,61,62,63],
[60,63,67,63,0,57,65,63,63],
[61,63,66,69,73,0,62,70,64],
[66,65,59,69,65,68,0,63,70],
[59,55,61,68,67,60,67,0,66],
[65,60,62,67,67,66,60,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,53,74,78,68,64,65,66],
[61,0,70,62,67,72,61,72,65],
[77,60,0,72,74,70,71,68,67],
[56,68,58,0,59,61,68,63,69],
[52,63,56,71,0,61,70,50,58],
[62,58,60,69,69,0,57,63,70],
[66,69,59,62,60,73,0,61,64],
[65,58,62,67,80,67,69,0,67],
[64,65,63,61,72,60,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,46,58,56,70,45,48,71],
[78,0,74,91,70,68,82,55,50],
[84,56,0,76,63,77,58,66,47],
[72,39,54,0,48,61,50,47,59],
[74,60,67,82,0,68,63,39,43],
[60,62,53,69,62,0,51,55,61],
[85,48,72,80,67,79,0,88,74],
[82,75,64,83,91,75,42,0,57],
[59,80,83,71,87,69,56,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,67,82,71,76,62,65,71],
[54,0,69,76,65,73,65,56,61],
[63,61,0,73,62,68,64,61,67],
[48,54,57,0,63,61,59,58,54],
[59,65,68,67,0,59,56,62,63],
[54,57,62,69,71,0,58,59,58],
[68,65,66,71,74,72,0,63,61],
[65,74,69,72,68,71,67,0,60],
[59,69,63,76,67,72,69,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,69,66,71,84,64,81,81],
[69,0,98,57,78,94,74,87,77],
[61,32,0,47,63,44,48,68,49],
[64,73,83,0,82,85,47,79,103],
[59,52,67,48,0,73,79,64,74],
[46,36,86,45,57,0,54,74,80],
[66,56,82,83,51,76,0,54,85],
[49,43,62,51,66,56,76,0,73],
[49,53,81,27,56,50,45,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,64,73,77,66,66,62,58],
[72,0,79,78,62,67,61,71,57],
[66,51,0,71,51,66,57,51,49],
[57,52,59,0,69,64,59,56,56],
[53,68,79,61,0,81,53,62,57],
[64,63,64,66,49,0,65,70,52],
[64,69,73,71,77,65,0,65,61],
[68,59,79,74,68,60,65,0,66],
[72,73,81,74,73,78,69,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,63,82,70,81,70,70],
[68,0,67,69,68,71,59,72,92],
[69,63,0,67,68,58,53,63,68],
[67,61,63,0,77,70,52,60,55],
[48,62,62,53,0,75,59,58,69],
[60,59,72,60,55,0,66,70,80],
[49,71,77,78,71,64,0,62,80],
[60,58,67,70,72,60,68,0,65],
[60,38,62,75,61,50,50,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,58,66,65,67,62,65,56],
[61,0,58,57,70,59,63,56,54],
[72,72,0,63,75,67,72,61,60],
[64,73,67,0,70,64,76,67,69],
[65,60,55,60,0,64,63,57,58],
[63,71,63,66,66,0,69,62,62],
[68,67,58,54,67,61,0,58,56],
[65,74,69,63,73,68,72,0,57],
[74,76,70,61,72,68,74,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,56,61,64,62,61,54,67],
[70,0,64,58,60,73,60,66,67],
[74,66,0,67,61,70,67,64,64],
[69,72,63,0,64,61,62,60,70],
[66,70,69,66,0,70,56,59,64],
[68,57,60,69,60,0,61,65,63],
[69,70,63,68,74,69,0,66,71],
[76,64,66,70,71,65,64,0,71],
[63,63,66,60,66,67,59,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,75,65,72,78,73,65,59],
[45,0,56,62,63,56,55,60,54],
[55,74,0,60,60,65,55,65,46],
[65,68,70,0,71,68,60,67,68],
[58,67,70,59,0,66,57,63,58],
[52,74,65,62,64,0,70,69,66],
[57,75,75,70,73,60,0,60,62],
[65,70,65,63,67,61,70,0,52],
[71,76,84,62,72,64,68,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,56,61,52,74,47,78,60],
[52,0,53,58,52,63,40,67,54],
[74,77,0,49,53,76,67,82,67],
[69,72,81,0,65,66,54,74,68],
[78,78,77,65,0,82,69,84,76],
[56,67,54,64,48,0,51,77,65],
[83,90,63,76,61,79,0,82,79],
[52,63,48,56,46,53,48,0,59],
[70,76,63,62,54,65,51,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,68,50,75,56,37,51,38],
[62,0,65,60,65,51,54,51,75],
[62,65,0,66,75,47,47,58,58],
[80,70,64,0,60,74,66,69,80],
[55,65,55,70,0,52,57,48,54],
[74,79,83,56,78,0,70,55,63],
[93,76,83,64,73,60,0,79,58],
[79,79,72,61,82,75,51,0,65],
[92,55,72,50,76,67,72,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,63,78,66,66,48,60,66],
[75,0,64,78,63,70,66,78,68],
[67,66,0,74,64,70,69,71,66],
[52,52,56,0,45,58,59,57,44],
[64,67,66,85,0,70,60,74,73],
[64,60,60,72,60,0,69,68,69],
[82,64,61,71,70,61,0,71,73],
[70,52,59,73,56,62,59,0,66],
[64,62,64,86,57,61,57,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,63,64,59,80,67,84,74],
[62,0,69,70,74,76,69,72,75],
[67,61,0,73,63,69,78,80,73],
[66,60,57,0,67,70,70,74,66],
[71,56,67,63,0,76,68,76,72],
[50,54,61,60,54,0,62,64,67],
[63,61,52,60,62,68,0,63,75],
[46,58,50,56,54,66,67,0,67],
[56,55,57,64,58,63,55,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,63,68,62,71,70,54,67],
[60,0,58,54,58,56,66,52,62],
[67,72,0,70,66,69,75,62,66],
[62,76,60,0,67,66,69,61,64],
[68,72,64,63,0,64,64,62,65],
[59,74,61,64,66,0,66,65,66],
[60,64,55,61,66,64,0,57,60],
[76,78,68,69,68,65,73,0,72],
[63,68,64,66,65,64,70,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,68,75,63,65,63,73,67],
[55,0,61,60,68,74,60,61,65],
[62,69,0,62,62,66,56,72,65],
[55,70,68,0,63,63,56,63,66],
[67,62,68,67,0,69,55,71,64],
[65,56,64,67,61,0,67,61,65],
[67,70,74,74,75,63,0,66,71],
[57,69,58,67,59,69,64,0,68],
[63,65,65,64,66,65,59,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,68,74,77,92,64,75,74],
[49,0,54,67,66,65,49,60,53],
[62,76,0,81,80,70,42,50,72],
[56,63,49,0,59,71,46,48,51],
[53,64,50,71,0,65,51,55,57],
[38,65,60,59,65,0,60,63,57],
[66,81,88,84,79,70,0,63,60],
[55,70,80,82,75,67,67,0,73],
[56,77,58,79,73,73,70,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,55,64,59,63,63,61,70],
[70,0,62,72,63,67,71,68,74],
[75,68,0,74,65,76,66,59,73],
[66,58,56,0,64,63,62,65,74],
[71,67,65,66,0,67,71,67,73],
[67,63,54,67,63,0,74,67,74],
[67,59,64,68,59,56,0,61,62],
[69,62,71,65,63,63,69,0,66],
[60,56,57,56,57,56,68,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,70,71,70,72,78,66,71],
[74,0,76,67,72,71,81,69,61],
[60,54,0,58,62,61,72,75,66],
[59,63,72,0,67,68,66,64,72],
[60,58,68,63,0,59,75,71,72],
[58,59,69,62,71,0,68,64,73],
[52,49,58,64,55,62,0,63,67],
[64,61,55,66,59,66,67,0,62],
[59,69,64,58,58,57,63,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,48,50,86,80,61,57,81],
[55,0,47,29,55,56,61,44,84],
[82,83,0,70,68,53,72,57,99],
[80,101,60,0,77,65,72,36,92],
[44,75,62,53,0,49,55,40,51],
[50,74,77,65,81,0,67,80,86],
[69,69,58,58,75,63,0,49,80],
[73,86,73,94,90,50,81,0,103],
[49,46,31,38,79,44,50,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,87,116,65,90,82,90,76],
[35,0,73,83,39,85,67,71,47],
[43,57,0,95,40,96,77,70,43],
[14,47,35,0,35,63,37,59,27],
[65,91,90,95,0,104,66,76,69],
[40,45,34,67,26,0,57,57,35],
[48,63,53,93,64,73,0,87,41],
[40,59,60,71,54,73,43,0,55],
[54,83,87,103,61,95,89,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,84,74,58,65,59,86,81],
[58,0,63,63,61,65,55,77,77],
[46,67,0,71,64,66,74,72,83],
[56,67,59,0,46,60,57,64,73],
[72,69,66,84,0,78,62,85,72],
[65,65,64,70,52,0,59,66,51],
[71,75,56,73,68,71,0,71,85],
[44,53,58,66,45,64,59,0,63],
[49,53,47,57,58,79,45,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,68,67,70,64,63,61,63],
[76,0,69,62,65,68,67,64,57],
[62,61,0,57,66,63,65,54,56],
[63,68,73,0,67,56,60,51,63],
[60,65,64,63,0,60,66,66,62],
[66,62,67,74,70,0,64,66,67],
[67,63,65,70,64,66,0,64,61],
[69,66,76,79,64,64,66,0,63],
[67,73,74,67,68,63,69,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,62,63,66,72,67,67,69],
[60,0,60,58,55,66,66,66,49],
[68,70,0,67,62,71,71,69,60],
[67,72,63,0,61,69,70,66,64],
[64,75,68,69,0,82,76,76,70],
[58,64,59,61,48,0,66,67,59],
[63,64,59,60,54,64,0,70,54],
[63,64,61,64,54,63,60,0,57],
[61,81,70,66,60,71,76,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,59,64,70,67,79,59,64],
[71,0,64,61,65,63,86,61,60],
[71,66,0,65,70,71,79,73,67],
[66,69,65,0,76,70,82,59,79],
[60,65,60,54,0,59,74,62,60],
[63,67,59,60,71,0,72,71,71],
[51,44,51,48,56,58,0,54,58],
[71,69,57,71,68,59,76,0,74],
[66,70,63,51,70,59,72,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,22,0,49,30,30,30,22],
[67,0,41,19,49,49,91,71,61],
[108,89,0,26,69,50,69,50,59],
[130,111,104,0,49,63,124,85,75],
[81,81,61,81,0,111,105,75,81],
[100,81,80,67,19,0,94,42,81],
[100,39,61,6,25,36,0,0,61],
[100,59,80,45,55,88,130,0,81],
[108,69,71,55,49,49,69,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,77,67,69,65,62,64,72],
[71,0,74,69,63,60,59,74,77],
[53,56,0,60,58,63,61,60,62],
[63,61,70,0,71,59,52,45,65],
[61,67,72,59,0,63,68,55,67],
[65,70,67,71,67,0,72,68,65],
[68,71,69,78,62,58,0,64,75],
[66,56,70,85,75,62,66,0,72],
[58,53,68,65,63,65,55,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,27,45,90,54,70,39,26],
[91,0,70,71,87,76,96,75,40],
[103,60,0,70,100,101,98,102,83],
[85,59,60,0,84,81,97,84,60],
[40,43,30,46,0,55,51,39,53],
[76,54,29,49,75,0,87,76,51],
[60,34,32,33,79,43,0,19,31],
[91,55,28,46,91,54,111,0,42],
[104,90,47,70,77,79,99,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,52,62,58,56,59,66,58],
[57,0,58,52,47,55,59,52,51],
[78,72,0,69,64,64,67,70,70],
[68,78,61,0,55,59,69,59,62],
[72,83,66,75,0,79,75,65,70],
[74,75,66,71,51,0,66,67,71],
[71,71,63,61,55,64,0,58,64],
[64,78,60,71,65,63,72,0,74],
[72,79,60,68,60,59,66,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,59,69,65,69,72,58,66],
[63,0,61,74,57,67,64,67,61],
[71,69,0,75,64,71,76,64,62],
[61,56,55,0,58,63,68,51,60],
[65,73,66,72,0,74,82,67,73],
[61,63,59,67,56,0,67,54,62],
[58,66,54,62,48,63,0,56,55],
[72,63,66,79,63,76,74,0,62],
[64,69,68,70,57,68,75,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,44,36,53,58,43,48,51],
[67,0,70,49,69,77,55,47,52],
[86,60,0,46,67,89,60,72,52],
[94,81,84,0,74,91,74,70,62],
[77,61,63,56,0,83,67,70,61],
[72,53,41,39,47,0,52,38,49],
[87,75,70,56,63,78,0,55,72],
[82,83,58,60,60,92,75,0,56],
[79,78,78,68,69,81,58,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,60,59,62,60,67,66,68],
[72,0,62,67,74,69,72,71,79],
[70,68,0,64,71,67,67,68,73],
[71,63,66,0,56,73,73,61,69],
[68,56,59,74,0,59,67,57,69],
[70,61,63,57,71,0,65,65,77],
[63,58,63,57,63,65,0,71,70],
[64,59,62,69,73,65,59,0,73],
[62,51,57,61,61,53,60,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,64,58,47,46,45,50,46],
[72,0,67,68,59,71,60,69,67],
[66,63,0,65,51,48,54,67,57],
[72,62,65,0,55,60,52,67,44],
[83,71,79,75,0,55,51,64,56],
[84,59,82,70,75,0,59,60,63],
[85,70,76,78,79,71,0,63,77],
[80,61,63,63,66,70,67,0,71],
[84,63,73,86,74,67,53,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,74,77,66,77,74,79,61],
[79,0,66,76,72,71,62,77,59],
[56,64,0,62,76,62,55,70,48],
[53,54,68,0,57,68,51,78,57],
[64,58,54,73,0,70,52,79,67],
[53,59,68,62,60,0,61,79,47],
[56,68,75,79,78,69,0,64,74],
[51,53,60,52,51,51,66,0,50],
[69,71,82,73,63,83,56,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,68,61,66,64,61,83,62],
[65,0,55,75,51,55,61,81,73],
[62,75,0,65,66,71,82,74,63],
[69,55,65,0,56,64,63,71,56],
[64,79,64,74,0,73,83,80,77],
[66,75,59,66,57,0,63,80,70],
[69,69,48,67,47,67,0,75,68],
[47,49,56,59,50,50,55,0,51],
[68,57,67,74,53,60,62,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,53,68,69,61,58,74,71],
[67,0,77,74,85,68,66,74,63],
[77,53,0,60,64,68,67,78,78],
[62,56,70,0,77,74,64,59,70],
[61,45,66,53,0,57,59,66,64],
[69,62,62,56,73,0,69,67,73],
[72,64,63,66,71,61,0,69,70],
[56,56,52,71,64,63,61,0,65],
[59,67,52,60,66,57,60,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,72,81,64,83,60,61,74],
[62,0,59,68,62,62,70,64,78],
[58,71,0,74,58,72,56,61,73],
[49,62,56,0,59,72,65,51,58],
[66,68,72,71,0,68,75,65,76],
[47,68,58,58,62,0,50,56,70],
[70,60,74,65,55,80,0,60,79],
[69,66,69,79,65,74,70,0,76],
[56,52,57,72,54,60,51,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,76,62,74,69,66,64,66],
[57,0,70,63,66,69,58,62,65],
[54,60,0,59,66,66,54,57,66],
[68,67,71,0,68,65,60,61,64],
[56,64,64,62,0,63,62,63,63],
[61,61,64,65,67,0,67,66,64],
[64,72,76,70,68,63,0,73,71],
[66,68,73,69,67,64,57,0,65],
[64,65,64,66,67,66,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,50,71,67,23,53,77,60],
[84,0,74,81,58,61,80,71,54],
[80,56,0,72,72,76,60,54,60],
[59,49,58,0,59,61,73,54,39],
[63,72,58,71,0,55,73,81,75],
[107,69,54,69,75,0,73,78,59],
[77,50,70,57,57,57,0,64,43],
[53,59,76,76,49,52,66,0,43],
[70,76,70,91,55,71,87,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,58,64,62,57,70,66],
[71,0,62,67,65,68,65,72,73],
[65,68,0,60,66,60,57,68,69],
[72,63,70,0,66,63,69,72,66],
[66,65,64,64,0,56,68,70,66],
[68,62,70,67,74,0,74,64,73],
[73,65,73,61,62,56,0,74,66],
[60,58,62,58,60,66,56,0,58],
[64,57,61,64,64,57,64,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,60,70,71,54,75,69,72],
[63,0,70,69,69,53,83,78,77],
[70,60,0,64,74,65,83,83,68],
[60,61,66,0,65,56,63,60,66],
[59,61,56,65,0,52,71,61,58],
[76,77,65,74,78,0,83,79,83],
[55,47,47,67,59,47,0,55,54],
[61,52,47,70,69,51,75,0,68],
[58,53,62,64,72,47,76,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,73,68,70,67,60,73,74],
[54,0,59,65,64,65,54,52,53],
[57,71,0,69,57,51,56,51,69],
[62,65,61,0,48,48,54,59,65],
[60,66,73,82,0,63,54,69,70],
[63,65,79,82,67,0,67,67,73],
[70,76,74,76,76,63,0,72,75],
[57,78,79,71,61,63,58,0,69],
[56,77,61,65,60,57,55,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,56,56,69,61,64,69,60],
[67,0,64,62,74,61,69,68,60],
[74,66,0,69,79,74,67,66,58],
[74,68,61,0,72,69,69,76,72],
[61,56,51,58,0,55,55,59,54],
[69,69,56,61,75,0,63,66,54],
[66,61,63,61,75,67,0,72,63],
[61,62,64,54,71,64,58,0,51],
[70,70,72,58,76,76,67,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,61,60,76,86,71,87,63],
[62,0,74,65,69,81,66,88,57],
[69,56,0,67,69,85,59,91,50],
[70,65,63,0,58,89,60,76,50],
[54,61,61,72,0,83,69,88,66],
[44,49,45,41,47,0,39,64,39],
[59,64,71,70,61,91,0,90,64],
[43,42,39,54,42,66,40,0,50],
[67,73,80,80,64,91,66,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,65,65,66,66,73,74,68],
[54,0,60,63,56,58,60,62,54],
[65,70,0,75,62,66,70,65,57],
[65,67,55,0,61,59,70,66,69],
[64,74,68,69,0,65,84,68,61],
[64,72,64,71,65,0,65,71,55],
[57,70,60,60,46,65,0,60,56],
[56,68,65,64,62,59,70,0,61],
[62,76,73,61,69,75,74,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,57,75,93,63,76,89,53],
[61,0,50,59,75,61,33,55,67],
[73,80,0,66,103,69,63,76,56],
[55,71,64,0,76,59,35,58,66],
[37,55,27,54,0,37,36,36,45],
[67,69,61,71,93,0,57,86,68],
[54,97,67,95,94,73,0,87,69],
[41,75,54,72,94,44,43,0,56],
[77,63,74,64,85,62,61,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,58,80,75,65,77,56,57],
[68,0,47,81,58,56,66,49,67],
[72,83,0,74,80,79,76,65,70],
[50,49,56,0,54,54,60,39,49],
[55,72,50,76,0,76,81,54,85],
[65,74,51,76,54,0,68,51,62],
[53,64,54,70,49,62,0,38,67],
[74,81,65,91,76,79,92,0,77],
[73,63,60,81,45,68,63,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,70,46,67,70,78,75,61],
[75,0,62,59,68,69,86,85,66],
[60,68,0,67,80,67,78,80,55],
[84,71,63,0,89,67,80,82,80],
[63,62,50,41,0,57,69,74,60],
[60,61,63,63,73,0,94,73,65],
[52,44,52,50,61,36,0,74,46],
[55,45,50,48,56,57,56,0,45],
[69,64,75,50,70,65,84,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,69,65,69,60,54,65,57],
[71,0,69,70,80,61,65,64,65],
[61,61,0,59,65,66,58,66,59],
[65,60,71,0,72,63,67,58,57],
[61,50,65,58,0,58,54,62,50],
[70,69,64,67,72,0,59,69,68],
[76,65,72,63,76,71,0,67,60],
[65,66,64,72,68,61,63,0,59],
[73,65,71,73,80,62,70,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,57,46,65,51,55,62,56],
[78,0,75,67,71,76,64,75,79],
[73,55,0,63,70,56,59,70,64],
[84,63,67,0,73,66,60,71,68],
[65,59,60,57,0,59,52,67,61],
[79,54,74,64,71,0,72,74,76],
[75,66,71,70,78,58,0,65,70],
[68,55,60,59,63,56,65,0,68],
[74,51,66,62,69,54,60,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,62,60,55,77,72,63,58],
[74,0,67,52,55,62,69,74,67],
[68,63,0,60,65,69,85,77,73],
[70,78,70,0,59,68,78,79,66],
[75,75,65,71,0,76,76,82,67],
[53,68,61,62,54,0,62,65,57],
[58,61,45,52,54,68,0,73,53],
[67,56,53,51,48,65,57,0,52],
[72,63,57,64,63,73,77,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,76,61,70,68,54,66,71],
[59,0,66,70,61,71,64,62,57],
[54,64,0,46,41,85,53,61,78],
[69,60,84,0,67,84,82,61,90],
[60,69,89,63,0,83,58,54,75],
[62,59,45,46,47,0,60,43,63],
[76,66,77,48,72,70,0,61,80],
[64,68,69,69,76,87,69,0,68],
[59,73,52,40,55,67,50,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,58,62,57,64,60,74,48],
[70,0,66,70,60,73,65,71,65],
[72,64,0,72,70,73,63,72,64],
[68,60,58,0,61,73,60,64,55],
[73,70,60,69,0,77,71,78,68],
[66,57,57,57,53,0,64,71,53],
[70,65,67,70,59,66,0,68,63],
[56,59,58,66,52,59,62,0,59],
[82,65,66,75,62,77,67,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,72,61,70,69,72,69,50],
[66,0,65,48,58,64,72,63,57],
[58,65,0,60,60,67,68,62,61],
[69,82,70,0,53,67,72,61,65],
[60,72,70,77,0,66,75,70,63],
[61,66,63,63,64,0,70,64,57],
[58,58,62,58,55,60,0,61,52],
[61,67,68,69,60,66,69,0,64],
[80,73,69,65,67,73,78,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,58,58,66,59,64,75,52],
[69,0,68,72,74,61,69,75,60],
[72,62,0,66,76,68,75,82,74],
[72,58,64,0,70,64,62,78,66],
[64,56,54,60,0,60,61,77,61],
[71,69,62,66,70,0,67,80,64],
[66,61,55,68,69,63,0,77,66],
[55,55,48,52,53,50,53,0,51],
[78,70,56,64,69,66,64,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,71,66,70,77,54,67,63],
[70,0,63,64,75,63,57,69,75],
[59,67,0,67,81,76,57,73,58],
[64,66,63,0,73,68,66,66,66],
[60,55,49,57,0,70,46,56,63],
[53,67,54,62,60,0,61,59,63],
[76,73,73,64,84,69,0,85,60],
[63,61,57,64,74,71,45,0,62],
[67,55,72,64,67,67,70,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,56,76,77,68,73,68,60],
[56,0,62,68,66,59,59,61,69],
[74,68,0,69,56,70,64,77,63],
[54,62,61,0,68,61,62,72,59],
[53,64,74,62,0,61,65,68,59],
[62,71,60,69,69,0,70,67,68],
[57,71,66,68,65,60,0,62,55],
[62,69,53,58,62,63,68,0,68],
[70,61,67,71,71,62,75,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,57,54,64,68,68,75,71],
[74,0,59,63,63,69,70,64,69],
[73,71,0,60,66,64,65,59,69],
[76,67,70,0,66,75,61,67,65],
[66,67,64,64,0,66,58,63,66],
[62,61,66,55,64,0,59,56,69],
[62,60,65,69,72,71,0,68,72],
[55,66,71,63,67,74,62,0,78],
[59,61,61,65,64,61,58,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,69,61,62,73,64,61,65],
[58,0,68,63,54,64,49,51,59],
[61,62,0,58,56,62,54,63,58],
[69,67,72,0,55,72,61,71,68],
[68,76,74,75,0,65,67,70,63],
[57,66,68,58,65,0,66,59,56],
[66,81,76,69,63,64,0,76,76],
[69,79,67,59,60,71,54,0,60],
[65,71,72,62,67,74,54,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,64,79,69,66,70,64,73],
[66,0,53,69,69,67,77,77,73],
[66,77,0,83,66,73,60,61,81],
[51,61,47,0,64,59,62,53,75],
[61,61,64,66,0,70,62,57,81],
[64,63,57,71,60,0,65,56,63],
[60,53,70,68,68,65,0,66,70],
[66,53,69,77,73,74,64,0,77],
[57,57,49,55,49,67,60,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,65,68,80,79,77,77,70],
[50,0,44,57,56,68,47,63,53],
[65,86,0,71,84,67,61,66,64],
[62,73,59,0,82,81,57,72,74],
[50,74,46,48,0,57,47,53,53],
[51,62,63,49,73,0,67,53,49],
[53,83,69,73,83,63,0,68,64],
[53,67,64,58,77,77,62,0,68],
[60,77,66,56,77,81,66,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,48,64,60,58,66,63,62],
[85,0,65,74,68,64,71,75,80],
[82,65,0,52,61,67,62,76,86],
[66,56,78,0,68,65,72,74,76],
[70,62,69,62,0,72,75,89,82],
[72,66,63,65,58,0,71,68,78],
[64,59,68,58,55,59,0,73,69],
[67,55,54,56,41,62,57,0,66],
[68,50,44,54,48,52,61,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,55,64,63,45,49,43,55],
[76,0,67,62,62,52,75,66,70],
[75,63,0,71,62,66,84,55,66],
[66,68,59,0,58,65,76,68,57],
[67,68,68,72,0,60,83,53,60],
[85,78,64,65,70,0,77,55,73],
[81,55,46,54,47,53,0,43,48],
[87,64,75,62,77,75,87,0,72],
[75,60,64,73,70,57,82,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,72,66,77,67,63,73,62],
[69,0,81,71,79,70,69,62,65],
[58,49,0,64,69,60,52,53,58],
[64,59,66,0,68,63,63,57,65],
[53,51,61,62,0,56,56,58,54],
[63,60,70,67,74,0,64,67,68],
[67,61,78,67,74,66,0,68,74],
[57,68,77,73,72,63,62,0,61],
[68,65,72,65,76,62,56,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,58,64,73,64,75,70],
[62,0,72,72,67,71,71,76,72],
[66,58,0,60,70,73,68,77,78],
[72,58,70,0,69,67,65,77,74],
[66,63,60,61,0,64,62,70,67],
[57,59,57,63,66,0,65,66,63],
[66,59,62,65,68,65,0,72,71],
[55,54,53,53,60,64,58,0,63],
[60,58,52,56,63,67,59,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,70,58,74,69,65,70,75],
[56,0,71,65,65,66,67,72,81],
[60,59,0,64,64,54,54,65,70],
[72,65,66,0,77,74,65,71,69],
[56,65,66,53,0,63,60,69,69],
[61,64,76,56,67,0,65,66,74],
[65,63,76,65,70,65,0,74,76],
[60,58,65,59,61,64,56,0,71],
[55,49,60,61,61,56,54,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,63,61,65,58,50,60,55],
[71,0,72,64,68,58,73,70,82],
[67,58,0,67,73,62,65,73,68],
[69,66,63,0,65,61,66,75,67],
[65,62,57,65,0,61,58,59,72],
[72,72,68,69,69,0,61,70,77],
[80,57,65,64,72,69,0,60,79],
[70,60,57,55,71,60,70,0,72],
[75,48,62,63,58,53,51,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,53,51,68,59,65,57,66],
[71,0,53,59,67,65,62,63,66],
[77,77,0,57,80,68,73,67,69],
[79,71,73,0,72,68,72,59,61],
[62,63,50,58,0,53,70,52,61],
[71,65,62,62,77,0,66,60,66],
[65,68,57,58,60,64,0,60,65],
[73,67,63,71,78,70,70,0,66],
[64,64,61,69,69,64,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,81,66,49,63,38,74,51],
[61,0,84,84,80,78,65,80,71],
[49,46,0,60,64,63,55,69,54],
[64,46,70,0,81,63,65,63,62],
[81,50,66,49,0,67,32,87,55],
[67,52,67,67,63,0,44,83,49],
[92,65,75,65,98,86,0,97,75],
[56,50,61,67,43,47,33,0,39],
[79,59,76,68,75,81,55,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,77,130,27,80,77,129,27],
[1,0,78,68,0,1,50,50,0],
[53,52,0,120,0,53,50,102,52],
[0,62,10,0,0,63,60,112,10],
[103,130,130,130,0,113,60,112,129],
[50,129,77,67,17,0,60,102,67],
[53,80,80,70,70,70,0,53,70],
[1,80,28,18,18,28,77,0,27],
[103,130,78,120,1,63,60,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,80,75,72,74,61,77,58],
[70,0,90,75,74,84,65,72,61],
[50,40,0,63,70,66,54,48,57],
[55,55,67,0,59,68,53,62,49],
[58,56,60,71,0,58,63,65,65],
[56,46,64,62,72,0,54,61,59],
[69,65,76,77,67,76,0,84,64],
[53,58,82,68,65,69,46,0,56],
[72,69,73,81,65,71,66,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,79,78,57,76,73,71,69],
[65,0,63,73,63,83,67,75,61],
[51,67,0,76,66,75,69,76,72],
[52,57,54,0,54,54,55,68,61],
[73,67,64,76,0,73,73,75,71],
[54,47,55,76,57,0,56,63,57],
[57,63,61,75,57,74,0,60,60],
[59,55,54,62,55,67,70,0,66],
[61,69,58,69,59,73,70,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,105,68,46,127,68,127,127],
[3,0,108,71,46,130,49,130,127],
[25,22,0,25,22,81,25,81,127],
[62,59,105,0,0,81,3,81,127],
[84,84,108,130,0,84,25,84,127],
[3,0,49,49,46,0,49,0,68],
[62,81,105,127,105,81,0,81,127],
[3,0,49,49,46,130,49,0,68],
[3,3,3,3,3,62,3,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,74,64,65,70,77,63,65],
[55,0,63,60,54,72,78,55,60],
[56,67,0,55,61,67,69,60,58],
[66,70,75,0,64,71,73,68,59],
[65,76,69,66,0,71,73,65,63],
[60,58,63,59,59,0,70,60,46],
[53,52,61,57,57,60,0,58,56],
[67,75,70,62,65,70,72,0,62],
[65,70,72,71,67,84,74,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,64,38,61,88,74,73,73],
[78,0,76,42,68,94,78,37,60],
[66,54,0,78,80,107,95,77,74],
[92,88,52,0,76,119,87,88,74],
[69,62,50,54,0,111,76,58,45],
[42,36,23,11,19,0,52,26,42],
[56,52,35,43,54,78,0,61,62],
[57,93,53,42,72,104,69,0,58],
[57,70,56,56,85,88,68,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,65,58,56,65,53,63,65],
[70,0,64,66,58,76,59,70,71],
[65,66,0,58,58,66,60,56,64],
[72,64,72,0,54,68,61,59,65],
[74,72,72,76,0,69,63,70,78],
[65,54,64,62,61,0,59,60,69],
[77,71,70,69,67,71,0,64,63],
[67,60,74,71,60,70,66,0,69],
[65,59,66,65,52,61,67,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,60,63,68,66,72,71],
[63,0,58,64,61,68,60,67,65],
[61,72,0,63,70,58,67,78,68],
[70,66,67,0,62,75,69,73,65],
[67,69,60,68,0,65,68,77,63],
[62,62,72,55,65,0,68,75,55],
[64,70,63,61,62,62,0,66,63],
[58,63,52,57,53,55,64,0,58],
[59,65,62,65,67,75,67,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,59,67,58,77,62,62,69],
[70,0,65,78,73,90,69,67,68],
[71,65,0,82,79,94,77,65,77],
[63,52,48,0,69,68,58,61,60],
[72,57,51,61,0,76,64,60,69],
[53,40,36,62,54,0,54,51,60],
[68,61,53,72,66,76,0,65,68],
[68,63,65,69,70,79,65,0,66],
[61,62,53,70,61,70,62,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,53,62,64,68,56,71,56],
[77,0,68,66,65,65,67,64,61],
[77,62,0,64,61,65,72,67,63],
[68,64,66,0,62,67,63,67,71],
[66,65,69,68,0,64,70,66,66],
[62,65,65,63,66,0,66,61,66],
[74,63,58,67,60,64,0,69,68],
[59,66,63,63,64,69,61,0,61],
[74,69,67,59,64,64,62,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,72,60,45,55,46,81,63],
[34,0,52,51,47,56,47,56,64],
[58,78,0,63,55,38,56,62,59],
[70,79,67,0,63,39,45,64,68],
[85,83,75,67,0,72,57,46,66],
[75,74,92,91,58,0,64,66,81],
[84,83,74,85,73,66,0,52,68],
[49,74,68,66,84,64,78,0,68],
[67,66,71,62,64,49,62,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,47,66,56,49,68,49,72],
[77,0,65,82,58,58,73,62,82],
[83,65,0,86,71,60,74,77,90],
[64,48,44,0,64,60,69,57,79],
[74,72,59,66,0,60,56,63,83],
[81,72,70,70,70,0,78,62,92],
[62,57,56,61,74,52,0,67,78],
[81,68,53,73,67,68,63,0,82],
[58,48,40,51,47,38,52,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,77,74,73,62,64,69],
[65,0,71,70,80,79,73,65,73],
[63,59,0,74,64,68,56,61,66],
[53,60,56,0,72,66,55,54,61],
[56,50,66,58,0,72,60,64,63],
[57,51,62,64,58,0,51,61,57],
[68,57,74,75,70,79,0,66,68],
[66,65,69,76,66,69,64,0,68],
[61,57,64,69,67,73,62,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,58,80,65,81,79,81,62],
[63,0,52,72,73,60,71,67,63],
[72,78,0,87,62,73,77,69,73],
[50,58,43,0,59,55,53,68,69],
[65,57,68,71,0,77,76,71,74],
[49,70,57,75,53,0,70,61,71],
[51,59,53,77,54,60,0,69,62],
[49,63,61,62,59,69,61,0,68],
[68,67,57,61,56,59,68,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,77,66,65,79,61,57,70],
[55,0,62,63,64,78,66,64,80],
[53,68,0,76,73,69,70,58,70],
[64,67,54,0,60,73,67,66,54],
[65,66,57,70,0,78,68,59,66],
[51,52,61,57,52,0,56,42,60],
[69,64,60,63,62,74,0,70,68],
[73,66,72,64,71,88,60,0,79],
[60,50,60,76,64,70,62,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,78,73,67,57,71,77,73],
[65,0,75,75,58,62,73,74,78],
[52,55,0,64,47,53,56,58,63],
[57,55,66,0,54,60,68,69,71],
[63,72,83,76,0,67,74,79,69],
[73,68,77,70,63,0,88,80,68],
[59,57,74,62,56,42,0,65,65],
[53,56,72,61,51,50,65,0,65],
[57,52,67,59,61,62,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,68,70,67,71,71,69,61],
[60,0,66,69,63,68,65,55,63],
[62,64,0,69,60,59,62,62,65],
[60,61,61,0,61,65,62,56,57],
[63,67,70,69,0,71,71,64,68],
[59,62,71,65,59,0,61,62,67],
[59,65,68,68,59,69,0,57,65],
[61,75,68,74,66,68,73,0,63],
[69,67,65,73,62,63,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,84,62,63,79,70,60,53],
[65,0,63,62,55,53,55,56,50],
[46,67,0,49,51,62,56,49,41],
[68,68,81,0,61,66,54,54,52],
[67,75,79,69,0,76,70,65,55],
[51,77,68,64,54,0,66,69,60],
[60,75,74,76,60,64,0,57,51],
[70,74,81,76,65,61,73,0,69],
[77,80,89,78,75,70,79,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,76,87,79,88,67,65,79],
[60,0,63,85,55,71,62,68,59],
[54,67,0,79,71,76,59,73,68],
[43,45,51,0,50,61,47,43,50],
[51,75,59,80,0,78,65,75,62],
[42,59,54,69,52,0,51,49,59],
[63,68,71,83,65,79,0,62,72],
[65,62,57,87,55,81,68,0,76],
[51,71,62,80,68,71,58,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,60,68,67,67,72,68,78],
[68,0,67,71,67,64,79,66,74],
[70,63,0,73,68,61,71,61,74],
[62,59,57,0,62,66,71,66,72],
[63,63,62,68,0,68,74,66,75],
[63,66,69,64,62,0,71,72,76],
[58,51,59,59,56,59,0,56,66],
[62,64,69,64,64,58,74,0,72],
[52,56,56,58,55,54,64,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,48,59,49,60,54,64,58],
[60,0,53,53,46,54,51,59,63],
[82,77,0,61,67,69,71,68,70],
[71,77,69,0,58,77,75,74,76],
[81,84,63,72,0,71,73,68,67],
[70,76,61,53,59,0,58,59,61],
[76,79,59,55,57,72,0,64,50],
[66,71,62,56,62,71,66,0,53],
[72,67,60,54,63,69,80,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,72,71,67,69,65,67,62],
[62,0,68,56,61,67,62,62,67],
[58,62,0,54,55,59,64,48,64],
[59,74,76,0,62,53,71,60,68],
[63,69,75,68,0,62,66,64,64],
[61,63,71,77,68,0,75,70,69],
[65,68,66,59,64,55,0,58,69],
[63,68,82,70,66,60,72,0,63],
[68,63,66,62,66,61,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,58,56,54,57,52,60,55],
[70,0,67,63,64,71,61,66,66],
[72,63,0,66,65,70,67,63,66],
[74,67,64,0,63,67,70,57,78],
[76,66,65,67,0,69,62,59,68],
[73,59,60,63,61,0,53,54,57],
[78,69,63,60,68,77,0,62,66],
[70,64,67,73,71,76,68,0,69],
[75,64,64,52,62,73,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,66,72,75,61,70,51,76],
[71,0,61,70,63,65,87,66,77],
[64,69,0,61,66,60,71,76,75],
[58,60,69,0,54,45,75,55,62],
[55,67,64,76,0,63,73,68,78],
[69,65,70,85,67,0,76,70,92],
[60,43,59,55,57,54,0,64,65],
[79,64,54,75,62,60,66,0,67],
[54,53,55,68,52,38,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,76,66,67,73,61,75,81],
[66,0,66,68,63,74,71,63,65],
[54,64,0,65,56,74,64,69,70],
[64,62,65,0,63,72,67,70,79],
[63,67,74,67,0,66,63,77,79],
[57,56,56,58,64,0,51,60,75],
[69,59,66,63,67,79,0,61,73],
[55,67,61,60,53,70,69,0,74],
[49,65,60,51,51,55,57,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,78,67,72,82,68,82,58],
[66,0,75,64,73,61,59,69,65],
[52,55,0,60,55,63,53,62,51],
[63,66,70,0,69,71,67,73,58],
[58,57,75,61,0,74,69,71,52],
[48,69,67,59,56,0,58,69,53],
[62,71,77,63,61,72,0,64,67],
[48,61,68,57,59,61,66,0,55],
[72,65,79,72,78,77,63,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,72,71,61,66,74,76,73],
[61,0,76,72,69,67,66,75,60],
[58,54,0,65,61,64,60,65,62],
[59,58,65,0,49,73,58,68,63],
[69,61,69,81,0,66,67,73,69],
[64,63,66,57,64,0,67,71,68],
[56,64,70,72,63,63,0,65,69],
[54,55,65,62,57,59,65,0,64],
[57,70,68,67,61,62,61,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,67,63,70,68,71,65,64],
[62,0,71,65,54,59,64,57,66],
[63,59,0,59,58,64,72,57,61],
[67,65,71,0,61,68,65,66,64],
[60,76,72,69,0,69,70,67,71],
[62,71,66,62,61,0,69,70,67],
[59,66,58,65,60,61,0,61,72],
[65,73,73,64,63,60,69,0,69],
[66,64,69,66,59,63,58,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,60,62,70,74,76,83,72],
[65,0,65,71,63,65,69,62,74],
[70,65,0,65,75,69,74,69,80],
[68,59,65,0,78,64,63,66,57],
[60,67,55,52,0,64,74,57,66],
[56,65,61,66,66,0,75,69,72],
[54,61,56,67,56,55,0,55,54],
[47,68,61,64,73,61,75,0,83],
[58,56,50,73,64,58,76,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,80,59,51,61,60,68,74],
[60,0,56,60,43,77,52,80,73],
[50,74,0,72,57,63,56,67,56],
[71,70,58,0,79,93,73,69,68],
[79,87,73,51,0,84,84,92,80],
[69,53,67,37,46,0,57,61,66],
[70,78,74,57,46,73,0,79,68],
[62,50,63,61,38,69,51,0,51],
[56,57,74,62,50,64,62,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,70,57,65,70,60,63,66],
[67,0,72,60,77,72,67,63,71],
[60,58,0,68,68,61,69,56,68],
[73,70,62,0,76,73,78,71,77],
[65,53,62,54,0,70,62,66,71],
[60,58,69,57,60,0,64,66,71],
[70,63,61,52,68,66,0,66,65],
[67,67,74,59,64,64,64,0,75],
[64,59,62,53,59,59,65,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,72,72,68,64,70,67,65],
[65,0,72,66,71,69,72,60,61],
[58,58,0,68,62,74,66,57,59],
[58,64,62,0,65,64,63,61,71],
[62,59,68,65,0,63,69,57,59],
[66,61,56,66,67,0,65,62,59],
[60,58,64,67,61,65,0,63,58],
[63,70,73,69,73,68,67,0,68],
[65,69,71,59,71,71,72,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,58,49,66,70,41,45,53],
[78,0,61,69,107,82,71,84,78],
[72,69,0,66,89,64,66,85,63],
[81,61,64,0,81,68,56,65,77],
[64,23,41,49,0,66,37,65,38],
[60,48,66,62,64,0,42,47,55],
[89,59,64,74,93,88,0,75,76],
[85,46,45,65,65,83,55,0,62],
[77,52,67,53,92,75,54,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,58,67,55,55,63,56,65],
[68,0,56,71,47,58,65,62,56],
[72,74,0,74,58,55,75,68,64],
[63,59,56,0,53,60,58,52,56],
[75,83,72,77,0,65,80,61,70],
[75,72,75,70,65,0,70,67,68],
[67,65,55,72,50,60,0,58,62],
[74,68,62,78,69,63,72,0,69],
[65,74,66,74,60,62,68,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,91,53,30,30,30,53,57],
[100,0,118,80,126,69,80,62,84],
[39,12,0,62,69,51,39,39,62],
[77,50,68,0,64,16,34,38,27],
[100,4,61,66,0,43,43,66,66],
[100,61,79,114,87,0,96,96,66],
[100,50,91,96,87,34,0,73,45],
[77,68,91,92,64,34,57,0,45],
[73,46,68,103,64,64,85,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,58,73,54,52,51,50,63],
[71,0,54,68,62,46,58,68,66],
[72,76,0,85,75,70,63,77,81],
[57,62,45,0,52,43,49,52,55],
[76,68,55,78,0,63,68,67,70],
[78,84,60,87,67,0,70,66,77],
[79,72,67,81,62,60,0,78,69],
[80,62,53,78,63,64,52,0,69],
[67,64,49,75,60,53,61,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,70,71,72,59,81,72,72],
[64,0,66,56,60,60,70,61,66],
[60,64,0,57,60,64,61,57,66],
[59,74,73,0,76,64,80,67,74],
[58,70,70,54,0,56,73,66,72],
[71,70,66,66,74,0,73,60,82],
[49,60,69,50,57,57,0,63,61],
[58,69,73,63,64,70,67,0,76],
[58,64,64,56,58,48,69,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,64,63,59,65,67,60,62],
[58,0,71,70,56,65,62,68,63],
[66,59,0,67,62,69,57,60,61],
[67,60,63,0,51,65,59,63,55],
[71,74,68,79,0,74,65,74,63],
[65,65,61,65,56,0,64,62,59],
[63,68,73,71,65,66,0,64,64],
[70,62,70,67,56,68,66,0,67],
[68,67,69,75,67,71,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,71,58,66,50,64,59,79],
[65,0,69,59,65,64,61,74,60],
[59,61,0,36,62,43,27,69,63],
[72,71,94,0,74,43,51,62,68],
[64,65,68,56,0,73,47,77,67],
[80,66,87,87,57,0,69,78,84],
[66,69,103,79,83,61,0,84,91],
[71,56,61,68,53,52,46,0,54],
[51,70,67,62,63,46,39,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,57,76,79,68,73,69,68],
[74,0,64,62,68,69,69,65,60],
[73,66,0,66,71,58,76,64,63],
[54,68,64,0,64,67,62,58,62],
[51,62,59,66,0,74,66,60,52],
[62,61,72,63,56,0,61,72,73],
[57,61,54,68,64,69,0,59,67],
[61,65,66,72,70,58,71,0,64],
[62,70,67,68,78,57,63,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,62,64,66,58,67,70,70],
[55,0,54,56,59,52,49,57,60],
[68,76,0,60,76,61,68,72,67],
[66,74,70,0,78,68,67,65,64],
[64,71,54,52,0,59,61,59,52],
[72,78,69,62,71,0,69,70,61],
[63,81,62,63,69,61,0,64,64],
[60,73,58,65,71,60,66,0,69],
[60,70,63,66,78,69,66,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,57,59,60,69,68,58,54],
[60,0,61,60,60,70,64,60,55],
[73,69,0,61,67,72,68,60,56],
[71,70,69,0,63,74,73,58,65],
[70,70,63,67,0,71,71,60,63],
[61,60,58,56,59,0,66,51,58],
[62,66,62,57,59,64,0,56,62],
[72,70,70,72,70,79,74,0,63],
[76,75,74,65,67,72,68,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,62,60,58,62,71,65,61],
[58,0,57,43,50,60,56,50,56],
[68,73,0,56,65,70,65,58,65],
[70,87,74,0,67,74,84,65,67],
[72,80,65,63,0,75,76,63,62],
[68,70,60,56,55,0,73,56,50],
[59,74,65,46,54,57,0,58,52],
[65,80,72,65,67,74,72,0,59],
[69,74,65,63,68,80,78,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,74,80,70,59,68,73,67],
[63,0,77,75,59,70,55,70,62],
[56,53,0,65,65,60,56,69,60],
[50,55,65,0,58,58,55,59,58],
[60,71,65,72,0,59,46,65,65],
[71,60,70,72,71,0,60,71,67],
[62,75,74,75,84,70,0,67,64],
[57,60,61,71,65,59,63,0,61],
[63,68,70,72,65,63,66,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,53,53,54,57,48,46,57],
[78,0,66,69,72,64,57,53,62],
[77,64,0,65,78,60,59,53,70],
[77,61,65,0,73,68,69,62,73],
[76,58,52,57,0,67,56,55,62],
[73,66,70,62,63,0,58,52,71],
[82,73,71,61,74,72,0,75,67],
[84,77,77,68,75,78,55,0,76],
[73,68,60,57,68,59,63,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,72,68,72,77,67,72,62],
[54,0,60,62,65,66,59,61,58],
[58,70,0,61,66,68,65,68,67],
[62,68,69,0,76,69,68,70,63],
[58,65,64,54,0,67,55,61,62],
[53,64,62,61,63,0,62,67,65],
[63,71,65,62,75,68,0,77,71],
[58,69,62,60,69,63,53,0,57],
[68,72,63,67,68,65,59,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,78,70,67,63,72,68,65],
[63,0,60,70,64,54,64,64,65],
[52,70,0,69,60,57,70,78,60],
[60,60,61,0,66,64,67,59,59],
[63,66,70,64,0,75,82,69,67],
[67,76,73,66,55,0,81,59,79],
[58,66,60,63,48,49,0,55,52],
[62,66,52,71,61,71,75,0,60],
[65,65,70,71,63,51,78,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,67,65,65,75,71,71,75],
[57,0,69,75,71,76,64,65,70],
[63,61,0,68,64,78,66,70,67],
[65,55,62,0,57,64,63,59,73],
[65,59,66,73,0,69,69,61,73],
[55,54,52,66,61,0,66,59,70],
[59,66,64,67,61,64,0,66,71],
[59,65,60,71,69,71,64,0,74],
[55,60,63,57,57,60,59,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,69,59,64,59,49,63,66],
[59,0,67,50,55,47,50,61,64],
[61,63,0,58,52,51,60,55,71],
[71,80,72,0,63,58,61,61,65],
[66,75,78,67,0,65,66,65,77],
[71,83,79,72,65,0,60,68,81],
[81,80,70,69,64,70,0,66,72],
[67,69,75,69,65,62,64,0,79],
[64,66,59,65,53,49,58,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,88,86,79,82,70,84,100],
[68,0,78,89,83,92,66,65,94],
[42,52,0,73,59,62,55,71,81],
[44,41,57,0,60,79,45,48,69],
[51,47,71,70,0,68,49,57,89],
[48,38,68,51,62,0,44,52,62],
[60,64,75,85,81,86,0,66,83],
[46,65,59,82,73,78,64,0,75],
[30,36,49,61,41,68,47,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,61,61,86,79,69,59,62],
[62,0,60,73,81,74,73,55,63],
[69,70,0,64,74,81,66,63,68],
[69,57,66,0,84,81,65,61,66],
[44,49,56,46,0,54,48,43,45],
[51,56,49,49,76,0,56,46,47],
[61,57,64,65,82,74,0,51,59],
[71,75,67,69,87,84,79,0,63],
[68,67,62,64,85,83,71,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,63,65,59,54,63,59,65],
[71,0,53,65,62,55,55,52,62],
[67,77,0,69,65,59,70,66,73],
[65,65,61,0,68,50,54,58,64],
[71,68,65,62,0,59,62,58,65],
[76,75,71,80,71,0,62,66,80],
[67,75,60,76,68,68,0,69,71],
[71,78,64,72,72,64,61,0,71],
[65,68,57,66,65,50,59,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,63,68,83,80,72,90,71],
[45,0,64,62,56,71,66,49,69],
[67,66,0,55,66,84,69,67,70],
[62,68,75,0,75,81,70,88,85],
[47,74,64,55,0,61,68,49,72],
[50,59,46,49,69,0,60,59,72],
[58,64,61,60,62,70,0,69,55],
[40,81,63,42,81,71,61,0,52],
[59,61,60,45,58,58,75,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,46,48,48,62,30,53,25],
[48,0,22,32,79,24,17,35,6],
[84,108,0,83,95,74,50,53,76],
[82,98,47,0,103,87,57,46,76],
[82,51,35,27,0,58,26,40,26],
[68,106,56,43,72,0,54,56,54],
[100,113,80,73,104,76,0,78,55],
[77,95,77,84,90,74,52,0,63],
[105,124,54,54,104,76,75,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,61,33,82,9,49,52,33],
[90,0,82,42,130,69,130,109,90],
[69,48,0,81,81,57,118,60,81],
[97,88,49,0,130,97,97,100,100],
[48,0,49,0,0,57,97,60,12],
[121,61,73,33,73,0,70,52,73],
[81,0,12,33,33,60,0,12,33],
[78,21,70,30,70,78,118,0,33],
[97,40,49,30,118,57,97,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,71,71,65,67,63,77,68],
[49,0,57,57,52,57,63,59,60],
[59,73,0,68,56,67,65,74,64],
[59,73,62,0,60,63,64,63,62],
[65,78,74,70,0,69,72,70,69],
[63,73,63,67,61,0,62,67,65],
[67,67,65,66,58,68,0,72,70],
[53,71,56,67,60,63,58,0,69],
[62,70,66,68,61,65,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,62,74,55,78,65,65,69],
[61,0,59,73,62,72,58,67,67],
[68,71,0,71,58,71,53,63,76],
[56,57,59,0,60,61,56,55,57],
[75,68,72,70,0,73,61,67,76],
[52,58,59,69,57,0,53,51,61],
[65,72,77,74,69,77,0,67,69],
[65,63,67,75,63,79,63,0,73],
[61,63,54,73,54,69,61,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,63,57,74,68,74,67,78],
[60,0,46,58,52,76,79,45,60],
[67,84,0,55,52,67,64,70,87],
[73,72,75,0,57,103,100,85,102],
[56,78,78,73,0,77,91,81,72],
[62,54,63,27,53,0,82,53,87],
[56,51,66,30,39,48,0,49,83],
[63,85,60,45,49,77,81,0,84],
[52,70,43,28,58,43,47,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,55,62,72,80,65,48,66],
[84,0,65,84,78,76,83,77,58],
[75,65,0,88,59,63,71,62,48],
[68,46,42,0,55,74,55,48,60],
[58,52,71,75,0,70,63,63,69],
[50,54,67,56,60,0,58,67,55],
[65,47,59,75,67,72,0,64,42],
[82,53,68,82,67,63,66,0,64],
[64,72,82,70,61,75,88,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,72,70,64,73,71,67],
[60,0,59,56,65,64,59,66,56],
[64,71,0,51,77,63,63,65,64],
[58,74,79,0,73,70,64,68,69],
[60,65,53,57,0,57,57,63,55],
[66,66,67,60,73,0,63,61,66],
[57,71,67,66,73,67,0,70,66],
[59,64,65,62,67,69,60,0,65],
[63,74,66,61,75,64,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,78,71,67,63,74,68,65],
[65,0,79,68,65,70,70,71,59],
[52,51,0,67,55,56,59,60,60],
[59,62,63,0,60,61,57,66,63],
[63,65,75,70,0,71,67,73,60],
[67,60,74,69,59,0,65,64,66],
[56,60,71,73,63,65,0,61,62],
[62,59,70,64,57,66,69,0,58],
[65,71,70,67,70,64,68,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,57,62,62,68,60,68,60],
[68,0,63,62,70,68,70,60,67],
[73,67,0,67,67,69,65,65,70],
[68,68,63,0,75,67,63,62,61],
[68,60,63,55,0,70,57,65,62],
[62,62,61,63,60,0,53,59,63],
[70,60,65,67,73,77,0,71,62],
[62,70,65,68,65,71,59,0,61],
[70,63,60,69,68,67,68,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,66,51,62,60,59,67,67],
[81,0,64,75,62,72,76,83,79],
[64,66,0,61,62,77,72,68,51],
[79,55,69,0,63,63,65,72,78],
[68,68,68,67,0,72,64,72,68],
[70,58,53,67,58,0,60,63,68],
[71,54,58,65,66,70,0,69,63],
[63,47,62,58,58,67,61,0,64],
[63,51,79,52,62,62,67,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,66,64,66,67,68,71,69],
[58,0,69,51,64,58,59,53,70],
[64,61,0,60,61,69,65,67,62],
[66,79,70,0,68,65,66,77,63],
[64,66,69,62,0,58,59,55,65],
[63,72,61,65,72,0,60,58,62],
[62,71,65,64,71,70,0,72,74],
[59,77,63,53,75,72,58,0,60],
[61,60,68,67,65,68,56,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,77,73,67,67,72,72],
[65,0,69,74,72,61,57,65,66],
[64,61,0,65,68,56,63,63,57],
[53,56,65,0,49,54,52,56,51],
[57,58,62,81,0,62,60,59,72],
[63,69,74,76,68,0,59,73,65],
[63,73,67,78,70,71,0,68,75],
[58,65,67,74,71,57,62,0,58],
[58,64,73,79,58,65,55,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,61,60,67,49,35,53,22],
[93,0,72,82,103,98,50,78,93],
[69,58,0,74,87,80,35,76,57],
[70,48,56,0,54,67,75,40,32],
[63,27,43,76,0,52,45,50,41],
[81,32,50,63,78,0,67,56,32],
[95,80,95,55,85,63,0,76,64],
[77,52,54,90,80,74,54,0,51],
[108,37,73,98,89,98,66,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,47,76,76,80,76,73,108],
[0,0,41,21,28,41,18,15,56],
[83,89,0,76,108,68,61,85,111],
[54,109,54,0,96,87,38,50,74],
[54,102,22,34,0,55,41,50,69],
[50,89,62,43,75,0,37,52,71],
[54,112,69,92,89,93,0,89,127],
[57,115,45,80,80,78,41,0,112],
[22,74,19,56,61,59,3,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,78,68,68,65,75,68,63],
[68,0,69,56,53,55,62,64,53],
[52,61,0,48,52,62,67,62,56],
[62,74,82,0,59,62,71,72,54],
[62,77,78,71,0,69,77,71,76],
[65,75,68,68,61,0,72,74,62],
[55,68,63,59,53,58,0,57,57],
[62,66,68,58,59,56,73,0,55],
[67,77,74,76,54,68,73,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,72,73,62,63,65,71,58],
[61,0,70,64,59,58,61,68,57],
[58,60,0,63,55,61,51,59,56],
[57,66,67,0,56,62,55,71,48],
[68,71,75,74,0,67,64,66,63],
[67,72,69,68,63,0,59,57,59],
[65,69,79,75,66,71,0,71,65],
[59,62,71,59,64,73,59,0,62],
[72,73,74,82,67,71,65,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,58,52,59,76,51,55,48],
[72,0,80,74,60,78,76,65,64],
[72,50,0,56,48,67,59,54,60],
[78,56,74,0,72,81,73,66,58],
[71,70,82,58,0,75,66,70,72],
[54,52,63,49,55,0,59,61,56],
[79,54,71,57,64,71,0,65,62],
[75,65,76,64,60,69,65,0,66],
[82,66,70,72,58,74,68,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,95,61,96,69,84,27,27],
[72,0,102,81,97,74,93,71,65],
[35,28,0,52,47,46,73,0,10],
[69,49,78,0,77,52,102,34,56],
[34,33,83,53,0,75,83,44,29],
[61,56,84,78,55,0,72,71,47],
[46,37,57,28,47,58,0,21,45],
[103,59,130,96,86,59,109,0,65],
[103,65,120,74,101,83,85,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,59,61,57,62,66,74,62],
[65,0,69,70,64,72,69,72,76],
[71,61,0,64,67,74,65,66,65],
[69,60,66,0,76,60,66,73,73],
[73,66,63,54,0,60,65,69,77],
[68,58,56,70,70,0,61,70,71],
[64,61,65,64,65,69,0,73,70],
[56,58,64,57,61,60,57,0,54],
[68,54,65,57,53,59,60,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,73,71,74,61,67,61,69],
[57,0,64,65,68,55,66,58,56],
[57,66,0,68,73,61,64,56,65],
[59,65,62,0,70,57,68,58,62],
[56,62,57,60,0,48,70,59,56],
[69,75,69,73,82,0,73,63,73],
[63,64,66,62,60,57,0,52,64],
[69,72,74,72,71,67,78,0,59],
[61,74,65,68,74,57,66,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,56,61,57,71,60,67,60],
[78,0,60,69,78,82,70,77,81],
[74,70,0,67,80,79,65,88,67],
[69,61,63,0,66,71,62,68,66],
[73,52,50,64,0,65,55,60,63],
[59,48,51,59,65,0,51,60,59],
[70,60,65,68,75,79,0,75,71],
[63,53,42,62,70,70,55,0,53],
[70,49,63,64,67,71,59,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,75,66,58,63,65,61,62],
[72,0,66,75,67,65,66,69,64],
[55,64,0,68,61,63,66,62,58],
[64,55,62,0,62,55,59,63,57],
[72,63,69,68,0,65,72,66,66],
[67,65,67,75,65,0,70,64,59],
[65,64,64,71,58,60,0,58,58],
[69,61,68,67,64,66,72,0,68],
[68,66,72,73,64,71,72,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,64,62,57,51,62,56,61],
[66,0,64,67,62,57,68,67,65],
[66,66,0,70,61,56,68,66,57],
[68,63,60,0,61,59,69,61,57],
[73,68,69,69,0,65,67,67,65],
[79,73,74,71,65,0,69,66,69],
[68,62,62,61,63,61,0,61,63],
[74,63,64,69,63,64,69,0,72],
[69,65,73,73,65,61,67,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,57,68,64,54,72,68,67],
[63,0,57,73,66,50,67,50,47],
[73,73,0,75,69,62,68,63,71],
[62,57,55,0,73,58,68,56,50],
[66,64,61,57,0,59,65,70,59],
[76,80,68,72,71,0,62,52,73],
[58,63,62,62,65,68,0,48,51],
[62,80,67,74,60,78,82,0,61],
[63,83,59,80,71,57,79,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,60,68,57,59,50,63,71],
[42,0,52,62,39,69,48,46,63],
[70,78,0,90,50,72,52,66,74],
[62,68,40,0,43,57,59,45,55],
[73,91,80,87,0,70,59,86,79],
[71,61,58,73,60,0,73,67,53],
[80,82,78,71,71,57,0,63,83],
[67,84,64,85,44,63,67,0,58],
[59,67,56,75,51,77,47,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,80,86,74,59,66,72,83],
[51,0,80,61,74,61,59,56,84],
[50,50,0,67,55,59,36,49,78],
[44,69,63,0,68,66,41,47,74],
[56,56,75,62,0,47,58,64,71],
[71,69,71,64,83,0,78,59,77],
[64,71,94,89,72,52,0,60,81],
[58,74,81,83,66,71,70,0,95],
[47,46,52,56,59,53,49,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,57,36,40,60,81,56,107],
[81,0,95,70,35,117,88,86,73],
[73,35,0,37,63,71,58,71,74],
[94,60,93,0,71,80,71,79,96],
[90,95,67,59,0,95,91,89,88],
[70,13,59,50,35,0,69,65,52],
[49,42,72,59,39,61,0,42,50],
[74,44,59,51,41,65,88,0,71],
[23,57,56,34,42,78,80,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,61,62,56,60,54,64,64],
[67,0,61,76,58,69,58,65,62],
[69,69,0,82,63,72,47,75,72],
[68,54,48,0,62,52,50,63,55],
[74,72,67,68,0,58,68,70,74],
[70,61,58,78,72,0,57,54,69],
[76,72,83,80,62,73,0,76,68],
[66,65,55,67,60,76,54,0,58],
[66,68,58,75,56,61,62,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,73,65,59,65,71,89,67],
[51,0,68,54,52,63,44,70,59],
[57,62,0,51,57,70,67,70,62],
[65,76,79,0,61,68,62,79,68],
[71,78,73,69,0,61,65,86,70],
[65,67,60,62,69,0,58,73,59],
[59,86,63,68,65,72,0,71,69],
[41,60,60,51,44,57,59,0,43],
[63,71,68,62,60,71,61,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,71,67,68,73,72,65,63],
[62,0,65,63,63,64,69,63,61],
[59,65,0,54,60,58,66,57,54],
[63,67,76,0,66,72,68,66,66],
[62,67,70,64,0,62,63,63,67],
[57,66,72,58,68,0,71,66,57],
[58,61,64,62,67,59,0,59,59],
[65,67,73,64,67,64,71,0,56],
[67,69,76,64,63,73,71,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,59,65,69,69,62,56],
[68,0,64,60,58,63,65,56,57],
[69,66,0,61,61,68,67,61,62],
[71,70,69,0,68,70,72,60,59],
[65,72,69,62,0,68,73,62,66],
[61,67,62,60,62,0,77,59,59],
[61,65,63,58,57,53,0,54,59],
[68,74,69,70,68,71,76,0,63],
[74,73,68,71,64,71,71,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,47,47,65,59,40,57,66],
[93,0,73,57,105,118,88,43,71],
[83,57,0,54,102,98,78,40,62],
[83,73,76,0,121,93,58,91,95],
[65,25,28,9,0,60,23,23,47],
[71,12,32,37,70,0,68,45,51],
[90,42,52,72,107,62,0,75,86],
[73,87,90,39,107,85,55,0,51],
[64,59,68,35,83,79,44,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,64,64,80,69,67,72,57],
[64,0,57,65,71,71,61,74,67],
[66,73,0,67,71,70,68,69,51],
[66,65,63,0,70,72,66,75,69],
[50,59,59,60,0,69,55,73,56],
[61,59,60,58,61,0,60,74,50],
[63,69,62,64,75,70,0,76,59],
[58,56,61,55,57,56,54,0,57],
[73,63,79,61,74,80,71,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,71,62,74,75,75,76],
[61,0,68,75,68,69,78,73,79],
[59,62,0,71,67,73,70,77,79],
[59,55,59,0,58,64,65,64,73],
[68,62,63,72,0,66,72,72,77],
[56,61,57,66,64,0,70,72,75],
[55,52,60,65,58,60,0,58,69],
[55,57,53,66,58,58,72,0,68],
[54,51,51,57,53,55,61,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,63,66,61,63,65,65,70],
[63,0,56,69,50,65,69,61,68],
[67,74,0,65,65,64,64,66,66],
[64,61,65,0,57,71,72,68,73],
[69,80,65,73,0,63,65,70,68],
[67,65,66,59,67,0,63,68,69],
[65,61,66,58,65,67,0,64,68],
[65,69,64,62,60,62,66,0,70],
[60,62,64,57,62,61,62,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,50,59,53,50,56,59,42],
[83,0,82,83,80,63,77,75,66],
[80,48,0,71,63,51,59,58,59],
[71,47,59,0,61,48,58,59,65],
[77,50,67,69,0,67,62,69,57],
[80,67,79,82,63,0,69,65,61],
[74,53,71,72,68,61,0,69,60],
[71,55,72,71,61,65,61,0,62],
[88,64,71,65,73,69,70,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,61,54,59,61,54,54,57],
[75,0,65,63,64,68,57,66,62],
[69,65,0,63,70,58,60,54,59],
[76,67,67,0,75,73,66,63,75],
[71,66,60,55,0,63,61,59,59],
[69,62,72,57,67,0,62,58,60],
[76,73,70,64,69,68,0,69,72],
[76,64,76,67,71,72,61,0,65],
[73,68,71,55,71,70,58,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,65,69,61,58,66,75,57],
[69,0,64,66,58,65,70,66,57],
[65,66,0,66,65,69,60,71,59],
[61,64,64,0,65,57,67,74,56],
[69,72,65,65,0,79,72,76,63],
[72,65,61,73,51,0,66,81,69],
[64,60,70,63,58,64,0,73,61],
[55,64,59,56,54,49,57,0,56],
[73,73,71,74,67,61,69,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,59,58,63,68,52,58,60],
[68,0,52,49,66,67,55,64,57],
[71,78,0,75,79,77,64,70,66],
[72,81,55,0,75,84,67,71,65],
[67,64,51,55,0,62,59,62,58],
[62,63,53,46,68,0,54,67,55],
[78,75,66,63,71,76,0,71,66],
[72,66,60,59,68,63,59,0,58],
[70,73,64,65,72,75,64,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,62,57,61,70,68,64,58],
[69,0,67,71,71,71,70,72,59],
[68,63,0,58,57,64,58,67,61],
[73,59,72,0,67,63,66,72,62],
[69,59,73,63,0,61,55,73,70],
[60,59,66,67,69,0,62,66,58],
[62,60,72,64,75,68,0,80,63],
[66,58,63,58,57,64,50,0,61],
[72,71,69,68,60,72,67,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,51,87,73,64,86,67,72],
[60,0,42,82,61,43,71,62,54],
[79,88,0,100,67,70,95,64,95],
[43,48,30,0,46,53,64,45,68],
[57,69,63,84,0,51,71,49,75],
[66,87,60,77,79,0,75,68,64],
[44,59,35,66,59,55,0,62,65],
[63,68,66,85,81,62,68,0,64],
[58,76,35,62,55,66,65,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,63,77,76,80,69,69,77],
[67,0,79,76,71,74,62,64,72],
[67,51,0,54,69,68,60,68,70],
[53,54,76,0,66,72,66,59,69],
[54,59,61,64,0,78,58,64,67],
[50,56,62,58,52,0,57,52,68],
[61,68,70,64,72,73,0,57,60],
[61,66,62,71,66,78,73,0,79],
[53,58,60,61,63,62,70,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,45,60,43,46,54,38,49],
[88,0,77,58,56,79,83,63,94],
[85,53,0,69,56,40,81,57,76],
[70,72,61,0,92,78,73,54,64],
[87,74,74,38,0,61,68,70,94],
[84,51,90,52,69,0,68,64,85],
[76,47,49,57,62,62,0,69,60],
[92,67,73,76,60,66,61,0,61],
[81,36,54,66,36,45,70,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,55,58,63,67,56,60,62],
[76,0,59,62,60,70,59,71,70],
[75,71,0,65,69,67,61,68,72],
[72,68,65,0,70,71,67,64,71],
[67,70,61,60,0,58,56,66,60],
[63,60,63,59,72,0,65,65,62],
[74,71,69,63,74,65,0,72,70],
[70,59,62,66,64,65,58,0,64],
[68,60,58,59,70,68,60,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,75,58,61,69,72,82,65],
[53,0,58,62,59,56,53,68,60],
[55,72,0,66,61,69,65,71,65],
[72,68,64,0,66,70,70,80,66],
[69,71,69,64,0,68,71,79,66],
[61,74,61,60,62,0,57,72,52],
[58,77,65,60,59,73,0,80,65],
[48,62,59,50,51,58,50,0,56],
[65,70,65,64,64,78,65,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,67,73,61,59,73,70,62],
[57,0,63,70,63,55,58,61,57],
[63,67,0,66,55,55,63,67,65],
[57,60,64,0,59,63,69,67,59],
[69,67,75,71,0,64,68,72,67],
[71,75,75,67,66,0,68,77,61],
[57,72,67,61,62,62,0,68,64],
[60,69,63,63,58,53,62,0,60],
[68,73,65,71,63,69,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,53,52,65,61,57,54,63],
[76,0,68,66,72,72,69,63,74],
[77,62,0,66,72,66,58,65,73],
[78,64,64,0,69,69,67,61,74],
[65,58,58,61,0,69,66,70,67],
[69,58,64,61,61,0,58,54,70],
[73,61,72,63,64,72,0,64,70],
[76,67,65,69,60,76,66,0,73],
[67,56,57,56,63,60,60,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,73,73,70,72,63,77,73],
[74,0,64,67,73,60,72,72,82],
[57,66,0,66,54,73,58,74,70],
[57,63,64,0,69,83,53,63,69],
[60,57,76,61,0,86,62,67,56],
[58,70,57,47,44,0,70,59,65],
[67,58,72,77,68,60,0,85,84],
[53,58,56,67,63,71,45,0,71],
[57,48,60,61,74,65,46,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,71,66,61,71,66,63,69],
[58,0,66,57,58,67,58,62,58],
[59,64,0,71,61,66,65,61,62],
[64,73,59,0,55,79,67,69,55],
[69,72,69,75,0,78,71,61,65],
[59,63,64,51,52,0,63,61,49],
[64,72,65,63,59,67,0,69,56],
[67,68,69,61,69,69,61,0,59],
[61,72,68,75,65,81,74,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,56,69,80,65,61,56],
[65,0,72,67,67,75,61,75,67],
[65,58,0,62,61,73,64,69,67],
[74,63,68,0,66,78,70,66,70],
[61,63,69,64,0,72,67,59,68],
[50,55,57,52,58,0,57,61,58],
[65,69,66,60,63,73,0,68,60],
[69,55,61,64,71,69,62,0,67],
[74,63,63,60,62,72,70,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,73,67,63,69,77,72,58],
[62,0,72,68,74,70,80,71,67],
[57,58,0,63,58,63,78,69,68],
[63,62,67,0,58,66,69,71,67],
[67,56,72,72,0,73,88,83,70],
[61,60,67,64,57,0,75,73,58],
[53,50,52,61,42,55,0,60,52],
[58,59,61,59,47,57,70,0,55],
[72,63,62,63,60,72,78,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,65,110,101,58,104,102,75],
[86,0,31,72,72,79,71,96,58],
[65,99,0,80,72,61,56,99,43],
[20,58,50,0,32,35,23,54,29],
[29,58,58,98,0,62,77,58,48],
[72,51,69,95,68,0,82,91,78],
[26,59,74,107,53,48,0,96,47],
[28,34,31,76,72,39,34,0,21],
[55,72,87,101,82,52,83,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,66,66,65,70,79,72,74],
[50,0,60,57,62,54,64,57,66],
[64,70,0,70,69,73,66,68,72],
[64,73,60,0,66,65,63,63,65],
[65,68,61,64,0,63,71,54,68],
[60,76,57,65,67,0,67,68,58],
[51,66,64,67,59,63,0,66,65],
[58,73,62,67,76,62,64,0,75],
[56,64,58,65,62,72,65,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,68,66,57,67,67,64,60],
[61,0,61,60,57,65,69,62,65],
[62,69,0,57,50,68,59,61,58],
[64,70,73,0,61,70,75,77,60],
[73,73,80,69,0,70,75,62,59],
[63,65,62,60,60,0,66,64,55],
[63,61,71,55,55,64,0,64,64],
[66,68,69,53,68,66,66,0,57],
[70,65,72,70,71,75,66,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,64,67,62,74,79,77,74],
[59,0,58,60,67,63,78,68,67],
[66,72,0,55,71,74,72,72,66],
[63,70,75,0,76,73,81,76,72],
[68,63,59,54,0,71,76,77,60],
[56,67,56,57,59,0,70,66,63],
[51,52,58,49,54,60,0,64,57],
[53,62,58,54,53,64,66,0,62],
[56,63,64,58,70,67,73,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,67,75,67,61,65,63,55],
[62,0,60,52,49,67,58,56,54],
[63,70,0,65,67,66,61,71,59],
[55,78,65,0,46,61,75,60,75],
[63,81,63,84,0,74,63,81,72],
[69,63,64,69,56,0,77,62,63],
[65,72,69,55,67,53,0,55,65],
[67,74,59,70,49,68,75,0,71],
[75,76,71,55,58,67,65,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,62,71,65,64,67,61,60],
[68,0,70,71,69,62,63,72,65],
[68,60,0,64,56,62,61,62,55],
[59,59,66,0,66,57,56,66,64],
[65,61,74,64,0,66,68,70,69],
[66,68,68,73,64,0,59,64,57],
[63,67,69,74,62,71,0,63,58],
[69,58,68,64,60,66,67,0,64],
[70,65,75,66,61,73,72,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,64,68,74,77,61,78,83],
[69,0,76,64,67,75,57,70,71],
[66,54,0,67,56,75,60,73,78],
[62,66,63,0,64,74,54,64,77],
[56,63,74,66,0,70,67,64,72],
[53,55,55,56,60,0,56,61,75],
[69,73,70,76,63,74,0,69,86],
[52,60,57,66,66,69,61,0,73],
[47,59,52,53,58,55,44,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,61,71,63,64,64,65,70],
[60,0,67,59,55,55,58,69,68],
[69,63,0,76,63,65,68,61,68],
[59,71,54,0,55,57,64,62,64],
[67,75,67,75,0,59,72,74,61],
[66,75,65,73,71,0,64,74,74],
[66,72,62,66,58,66,0,65,72],
[65,61,69,68,56,56,65,0,61],
[60,62,62,66,69,56,58,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,64,59,55,66,61,56,65],
[79,0,76,78,67,69,67,59,66],
[66,54,0,59,63,65,64,63,66],
[71,52,71,0,69,74,70,60,70],
[75,63,67,61,0,66,60,63,67],
[64,61,65,56,64,0,56,60,69],
[69,63,66,60,70,74,0,60,75],
[74,71,67,70,67,70,70,0,62],
[65,64,64,60,63,61,55,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,61,48,54,57,70,59,64],
[76,0,69,61,81,79,86,72,70],
[69,61,0,70,46,34,88,44,70],
[82,69,60,0,70,71,79,60,75],
[76,49,84,60,0,60,85,66,71],
[73,51,96,59,70,0,96,74,87],
[60,44,42,51,45,34,0,45,69],
[71,58,86,70,64,56,85,0,59],
[66,60,60,55,59,43,61,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,58,59,62,48,50,65,68],
[88,0,75,79,83,61,61,65,92],
[72,55,0,60,68,55,64,62,80],
[71,51,70,0,64,55,65,57,73],
[68,47,62,66,0,46,45,50,74],
[82,69,75,75,84,0,77,60,85],
[80,69,66,65,85,53,0,59,76],
[65,65,68,73,80,70,71,0,80],
[62,38,50,57,56,45,54,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,82,79,72,70,63,58,67],
[45,0,64,58,96,69,54,46,50],
[48,66,0,57,91,64,61,62,62],
[51,72,73,0,75,50,51,72,61],
[58,34,39,55,0,35,56,47,48],
[60,61,66,80,95,0,68,57,74],
[67,76,69,79,74,62,0,50,69],
[72,84,68,58,83,73,80,0,72],
[63,80,68,69,82,56,61,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,55,54,53,54,64,57,55],
[76,0,59,61,62,54,63,64,64],
[75,71,0,62,58,65,75,67,64],
[76,69,68,0,62,70,66,67,62],
[77,68,72,68,0,59,67,66,64],
[76,76,65,60,71,0,77,61,69],
[66,67,55,64,63,53,0,53,68],
[73,66,63,63,64,69,77,0,71],
[75,66,66,68,66,61,62,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,78,88,81,69,68,69,62],
[69,0,74,74,89,73,72,72,61],
[52,56,0,78,84,43,55,57,58],
[42,56,52,0,70,49,52,70,55],
[49,41,46,60,0,45,39,56,36],
[61,57,87,81,85,0,64,66,63],
[62,58,75,78,91,66,0,70,66],
[61,58,73,60,74,64,60,0,52],
[68,69,72,75,94,67,64,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,81,68,75,75,66,70,60],
[60,0,70,67,72,70,58,68,62],
[49,60,0,62,73,73,60,65,66],
[62,63,68,0,73,69,59,70,66],
[55,58,57,57,0,66,53,61,57],
[55,60,57,61,64,0,58,52,58],
[64,72,70,71,77,72,0,69,60],
[60,62,65,60,69,78,61,0,62],
[70,68,64,64,73,72,70,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,61,55,43,61,42,54,58],
[83,0,81,76,72,77,65,66,68],
[69,49,0,57,51,57,47,50,63],
[75,54,73,0,62,67,69,69,48],
[87,58,79,68,0,63,64,70,68],
[69,53,73,63,67,0,68,65,65],
[88,65,83,61,66,62,0,66,71],
[76,64,80,61,60,65,64,0,70],
[72,62,67,82,62,65,59,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,62,53,67,68,63,76,68],
[62,0,54,60,51,47,61,73,61],
[68,76,0,55,69,74,76,66,71],
[77,70,75,0,78,65,73,92,77],
[63,79,61,52,0,62,78,80,75],
[62,83,56,65,68,0,77,89,78],
[67,69,54,57,52,53,0,70,76],
[54,57,64,38,50,41,60,0,51],
[62,69,59,53,55,52,54,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,65,62,61,60,81,65,75],
[67,0,62,60,71,67,77,67,91],
[65,68,0,58,54,59,61,58,71],
[68,70,72,0,61,68,78,66,81],
[69,59,76,69,0,56,80,68,65],
[70,63,71,62,74,0,73,68,72],
[49,53,69,52,50,57,0,67,69],
[65,63,72,64,62,62,63,0,77],
[55,39,59,49,65,58,61,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,65,62,63,59,56,54,51],
[66,0,70,70,64,72,63,71,70],
[65,60,0,63,70,55,63,58,65],
[68,60,67,0,74,66,66,54,65],
[67,66,60,56,0,68,58,57,58],
[71,58,75,64,62,0,64,65,58],
[74,67,67,64,72,66,0,60,63],
[76,59,72,76,73,65,70,0,70],
[79,60,65,65,72,72,67,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,63,78,75,64,74,71,67],
[70,0,70,67,81,82,70,67,64],
[67,60,0,65,68,62,63,72,61],
[52,63,65,0,73,66,71,71,55],
[55,49,62,57,0,56,65,59,51],
[66,48,68,64,74,0,68,57,65],
[56,60,67,59,65,62,0,52,54],
[59,63,58,59,71,73,78,0,55],
[63,66,69,75,79,65,76,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,47,42,45,43,55,77],
[63,0,84,53,60,65,66,67,66],
[62,46,0,40,45,46,42,59,76],
[83,77,90,0,76,77,55,61,85],
[88,70,85,54,0,69,56,66,74],
[85,65,84,53,61,0,66,59,82],
[87,64,88,75,74,64,0,60,79],
[75,63,71,69,64,71,70,0,89],
[53,64,54,45,56,48,51,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,64,74,71,65,96,70,53],
[50,0,68,75,73,56,82,43,49],
[66,62,0,70,78,66,78,67,45],
[56,55,60,0,57,57,73,40,53],
[59,57,52,73,0,60,68,59,34],
[65,74,64,73,70,0,79,54,58],
[34,48,52,57,62,51,0,75,46],
[60,87,63,90,71,76,55,0,74],
[77,81,85,77,96,72,84,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,87,63,61,71,74,76,67],
[57,0,83,67,67,61,86,87,69],
[43,47,0,56,55,50,57,53,45],
[67,63,74,0,50,59,65,72,59],
[69,63,75,80,0,68,72,53,62],
[59,69,80,71,62,0,67,66,67],
[56,44,73,65,58,63,0,56,44],
[54,43,77,58,77,64,74,0,61],
[63,61,85,71,68,63,86,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,64,70,65,65,67,76],
[66,0,68,70,68,67,53,66,72],
[61,62,0,66,68,64,69,62,68],
[66,60,64,0,73,66,59,70,66],
[60,62,62,57,0,61,63,62,71],
[65,63,66,64,69,0,64,70,69],
[65,77,61,71,67,66,0,65,64],
[63,64,68,60,68,60,65,0,72],
[54,58,62,64,59,61,66,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,63,62,63,64,73,64],
[71,0,64,71,67,66,62,63,60],
[65,66,0,65,57,60,53,75,69],
[67,59,65,0,64,63,58,65,64],
[68,63,73,66,0,65,69,82,73],
[67,64,70,67,65,0,55,74,61],
[66,68,77,72,61,75,0,72,63],
[57,67,55,65,48,56,58,0,51],
[66,70,61,66,57,69,67,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,62,61,55,56,54,66,53],
[70,0,67,65,59,75,65,78,66],
[68,63,0,66,58,71,68,70,59],
[69,65,64,0,69,70,64,73,64],
[75,71,72,61,0,70,81,69,61],
[74,55,59,60,60,0,61,61,57],
[76,65,62,66,49,69,0,68,65],
[64,52,60,57,61,69,62,0,49],
[77,64,71,66,69,73,65,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,74,72,64,59,59,60,63],
[73,0,69,73,66,64,72,71,72],
[56,61,0,62,57,50,58,53,68],
[58,57,68,0,68,69,66,61,66],
[66,64,73,62,0,70,63,81,73],
[71,66,80,61,60,0,70,69,71],
[71,58,72,64,67,60,0,64,58],
[70,59,77,69,49,61,66,0,69],
[67,58,62,64,57,59,72,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,69,65,71,62,59,69],
[63,0,67,80,73,57,66,70,75],
[61,63,0,74,66,68,62,69,66],
[61,50,56,0,63,60,49,54,62],
[65,57,64,67,0,60,48,63,63],
[59,73,62,70,70,0,59,60,69],
[68,64,68,81,82,71,0,66,81],
[71,60,61,76,67,70,64,0,73],
[61,55,64,68,67,61,49,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,51,57,50,52,53,57,58],
[67,0,69,82,68,63,74,65,78],
[79,61,0,73,70,64,54,76,83],
[73,48,57,0,43,49,54,58,55],
[80,62,60,87,0,79,78,78,74],
[78,67,66,81,51,0,65,72,84],
[77,56,76,76,52,65,0,81,90],
[73,65,54,72,52,58,49,0,64],
[72,52,47,75,56,46,40,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,39,68,50,64,78,51,45],
[65,0,49,74,57,74,98,45,68],
[91,81,0,84,55,66,102,59,46],
[62,56,46,0,59,78,88,70,68],
[80,73,75,71,0,82,86,75,62],
[66,56,64,52,48,0,80,60,52],
[52,32,28,42,44,50,0,52,40],
[79,85,71,60,55,70,78,0,42],
[85,62,84,62,68,78,90,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,41,56,69,46,60,46,59],
[81,0,58,70,87,59,95,52,51],
[89,72,0,43,75,77,101,63,67],
[74,60,87,0,102,71,104,71,70],
[61,43,55,28,0,47,79,65,55],
[84,71,53,59,83,0,85,82,52],
[70,35,29,26,51,45,0,38,48],
[84,78,67,59,65,48,92,0,59],
[71,79,63,60,75,78,82,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,48,67,79,50,54,54,52],
[69,0,58,57,80,51,55,69,63],
[82,72,0,67,82,64,65,84,75],
[63,73,63,0,79,65,63,86,62],
[51,50,48,51,0,47,57,60,56],
[80,79,66,65,83,0,65,76,74],
[76,75,65,67,73,65,0,76,62],
[76,61,46,44,70,54,54,0,58],
[78,67,55,68,74,56,68,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,55,57,59,54,63,66],
[62,0,60,69,60,55,57,55,63],
[66,70,0,72,66,61,58,55,63],
[75,61,58,0,59,59,68,63,68],
[73,70,64,71,0,59,55,65,68],
[71,75,69,71,71,0,61,65,62],
[76,73,72,62,75,69,0,71,74],
[67,75,75,67,65,65,59,0,60],
[64,67,67,62,62,68,56,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,58,61,57,58,65,60,71],
[68,0,71,61,61,66,65,59,65],
[72,59,0,64,58,56,70,59,64],
[69,69,66,0,66,66,60,60,70],
[73,69,72,64,0,62,73,66,65],
[72,64,74,64,68,0,64,72,70],
[65,65,60,70,57,66,0,60,63],
[70,71,71,70,64,58,70,0,64],
[59,65,66,60,65,60,67,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,69,66,71,70,70,63,70],
[55,0,65,54,57,69,62,59,56],
[61,65,0,68,70,69,74,59,65],
[64,76,62,0,71,76,70,66,58],
[59,73,60,59,0,64,61,55,65],
[60,61,61,54,66,0,69,52,64],
[60,68,56,60,69,61,0,58,60],
[67,71,71,64,75,78,72,0,73],
[60,74,65,72,65,66,70,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,63,63,63,68,67,66,66],
[62,0,59,60,63,65,53,56,54],
[67,71,0,67,72,61,73,66,64],
[67,70,63,0,71,67,73,70,58],
[67,67,58,59,0,66,59,65,58],
[62,65,69,63,64,0,69,57,53],
[63,77,57,57,71,61,0,61,57],
[64,74,64,60,65,73,69,0,56],
[64,76,66,72,72,77,73,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,64,63,64,61,75,67,68],
[64,0,58,63,52,49,58,57,58],
[66,72,0,66,72,60,70,57,66],
[67,67,64,0,64,62,69,58,74],
[66,78,58,66,0,55,76,59,63],
[69,81,70,68,75,0,79,61,70],
[55,72,60,61,54,51,0,50,57],
[63,73,73,72,71,69,80,0,69],
[62,72,64,56,67,60,73,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,48,55,61,63,66,54,61],
[63,0,58,41,55,64,58,50,59],
[82,72,0,69,80,61,78,61,69],
[75,89,61,0,72,77,75,78,79],
[69,75,50,58,0,80,61,68,56],
[67,66,69,53,50,0,62,63,60],
[64,72,52,55,69,68,0,64,63],
[76,80,69,52,62,67,66,0,67],
[69,71,61,51,74,70,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,69,64,66,50,70,59,69],
[71,0,64,66,75,66,73,64,75],
[61,66,0,62,63,58,69,58,62],
[66,64,68,0,74,61,68,57,73],
[64,55,67,56,0,53,60,55,68],
[80,64,72,69,77,0,75,73,78],
[60,57,61,62,70,55,0,58,64],
[71,66,72,73,75,57,72,0,67],
[61,55,68,57,62,52,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,69,59,67,65,72,67,66],
[60,0,70,64,62,71,67,61,48],
[61,60,0,70,64,69,72,63,55],
[71,66,60,0,59,73,71,59,61],
[63,68,66,71,0,77,75,71,63],
[65,59,61,57,53,0,62,57,51],
[58,63,58,59,55,68,0,66,57],
[63,69,67,71,59,73,64,0,64],
[64,82,75,69,67,79,73,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,62,71,71,80,66,67,65],
[61,0,56,69,59,76,59,65,54],
[68,74,0,70,68,84,77,66,56],
[59,61,60,0,48,71,66,66,54],
[59,71,62,82,0,78,56,71,56],
[50,54,46,59,52,0,62,57,36],
[64,71,53,64,74,68,0,62,61],
[63,65,64,64,59,73,68,0,56],
[65,76,74,76,74,94,69,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,78,53,71,97,83,87,85],
[40,0,72,35,51,55,76,44,36],
[52,58,0,54,74,69,60,76,60],
[77,95,76,0,68,59,68,74,68],
[59,79,56,62,0,71,82,76,59],
[33,75,61,71,59,0,64,60,70],
[47,54,70,62,48,66,0,72,46],
[43,86,54,56,54,70,58,0,45],
[45,94,70,62,71,60,84,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,59,58,55,63,62,63,65],
[66,0,58,60,58,57,72,55,64],
[71,72,0,64,65,64,71,62,67],
[72,70,66,0,63,65,79,74,64],
[75,72,65,67,0,74,76,76,74],
[67,73,66,65,56,0,64,63,67],
[68,58,59,51,54,66,0,54,58],
[67,75,68,56,54,67,76,0,63],
[65,66,63,66,56,63,72,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,57,39,69,61,57,54,46],
[72,0,59,57,77,78,64,62,71],
[73,71,0,42,70,59,68,46,65],
[91,73,88,0,92,84,79,79,57],
[61,53,60,38,0,52,60,42,53],
[69,52,71,46,78,0,63,52,49],
[73,66,62,51,70,67,0,55,52],
[76,68,84,51,88,78,75,0,64],
[84,59,65,73,77,81,78,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,61,61,64,69,64,68,51],
[69,0,68,76,67,87,73,65,63],
[69,62,0,71,60,81,76,65,82],
[69,54,59,0,57,71,69,67,59],
[66,63,70,73,0,75,76,70,69],
[61,43,49,59,55,0,58,64,51],
[66,57,54,61,54,72,0,62,57],
[62,65,65,63,60,66,68,0,78],
[79,67,48,71,61,79,73,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,59,62,65,58,57,66,62],
[65,0,64,52,63,65,56,60,65],
[71,66,0,63,68,70,64,64,58],
[68,78,67,0,64,63,62,68,64],
[65,67,62,66,0,62,61,63,71],
[72,65,60,67,68,0,68,65,64],
[73,74,66,68,69,62,0,67,70],
[64,70,66,62,67,65,63,0,61],
[68,65,72,66,59,66,60,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,62,67,61,62,66,68,72],
[59,0,60,59,55,66,58,59,65],
[68,70,0,71,59,69,66,69,71],
[63,71,59,0,59,62,64,58,68],
[69,75,71,71,0,69,57,66,73],
[68,64,61,68,61,0,65,64,73],
[64,72,64,66,73,65,0,63,71],
[62,71,61,72,64,66,67,0,70],
[58,65,59,62,57,57,59,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,57,61,72,49,69,67,68],
[53,0,57,65,58,45,66,60,58],
[73,73,0,64,73,64,69,73,78],
[69,65,66,0,67,57,61,66,69],
[58,72,57,63,0,56,66,62,63],
[81,85,66,73,74,0,71,63,69],
[61,64,61,69,64,59,0,67,64],
[63,70,57,64,68,67,63,0,66],
[62,72,52,61,67,61,66,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,38,27,66,26,62,57,62],
[87,0,23,52,84,74,114,82,54],
[92,107,0,70,73,52,108,63,94],
[103,78,60,0,62,59,112,57,84],
[64,46,57,68,0,67,125,94,88],
[104,56,78,71,63,0,126,122,91],
[68,16,22,18,5,4,0,27,4],
[73,48,67,73,36,8,103,0,35],
[68,76,36,46,42,39,126,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,67,64,67,60,52,58,56],
[60,0,60,63,66,65,64,58,63],
[63,70,0,68,66,67,61,61,73],
[66,67,62,0,66,66,64,67,70],
[63,64,64,64,0,66,57,63,58],
[70,65,63,64,64,0,52,63,66],
[78,66,69,66,73,78,0,55,75],
[72,72,69,63,67,67,75,0,72],
[74,67,57,60,72,64,55,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,77,73,61,72,63,64,58],
[50,0,67,73,57,58,58,65,65],
[53,63,0,71,58,63,56,63,58],
[57,57,59,0,50,52,56,54,53],
[69,73,72,80,0,60,71,68,64],
[58,72,67,78,70,0,60,62,68],
[67,72,74,74,59,70,0,66,63],
[66,65,67,76,62,68,64,0,61],
[72,65,72,77,66,62,67,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,64,71,67,56,62,71,73],
[75,0,61,86,68,72,63,70,83],
[66,69,0,70,79,69,73,77,64],
[59,44,60,0,53,56,52,58,64],
[63,62,51,77,0,59,66,75,76],
[74,58,61,74,71,0,62,70,73],
[68,67,57,78,64,68,0,68,76],
[59,60,53,72,55,60,62,0,65],
[57,47,66,66,54,57,54,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,59,61,60,69,71,69,69],
[57,0,57,50,68,58,70,68,55],
[71,73,0,60,63,62,81,73,62],
[69,80,70,0,60,61,68,78,63],
[70,62,67,70,0,62,66,73,65],
[61,72,68,69,68,0,71,78,65],
[59,60,49,62,64,59,0,67,59],
[61,62,57,52,57,52,63,0,58],
[61,75,68,67,65,65,71,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,27,61,56,66,59,63,71],
[106,0,63,68,75,79,77,58,77],
[103,67,0,89,63,57,90,102,118],
[69,62,41,0,53,58,63,83,69],
[74,55,67,77,0,62,69,88,87],
[64,51,73,72,68,0,79,87,89],
[71,53,40,67,61,51,0,60,77],
[67,72,28,47,42,43,70,0,96],
[59,53,12,61,43,41,53,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,68,69,79,73,70,61,74],
[64,0,64,71,70,65,62,65,62],
[62,66,0,64,72,58,59,59,66],
[61,59,66,0,73,66,59,60,71],
[51,60,58,57,0,61,59,59,60],
[57,65,72,64,69,0,54,57,62],
[60,68,71,71,71,76,0,74,72],
[69,65,71,70,71,73,56,0,69],
[56,68,64,59,70,68,58,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,45,47,54,76,46,58,82],
[85,0,82,65,63,67,59,62,93],
[85,48,0,57,63,86,57,53,72],
[83,65,73,0,80,67,71,59,76],
[76,67,67,50,0,62,74,71,72],
[54,63,44,63,68,0,49,57,54],
[84,71,73,59,56,81,0,50,75],
[72,68,77,71,59,73,80,0,71],
[48,37,58,54,58,76,55,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,78,89,90,88,75,105,94],
[67,0,61,83,89,91,54,86,101],
[52,69,0,67,84,73,68,69,85],
[41,47,63,0,55,73,43,49,56],
[40,41,46,75,0,41,35,76,65],
[42,39,57,57,89,0,62,68,65],
[55,76,62,87,95,68,0,88,86],
[25,44,61,81,54,62,42,0,53],
[36,29,45,74,65,65,44,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,58,71,68,58,57,60,57],
[66,0,58,68,68,56,62,68,68],
[72,72,0,72,79,65,67,76,69],
[59,62,58,0,71,55,54,66,62],
[62,62,51,59,0,53,59,63,66],
[72,74,65,75,77,0,62,74,76],
[73,68,63,76,71,68,0,70,67],
[70,62,54,64,67,56,60,0,66],
[73,62,61,68,64,54,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,58,67,68,68,43,63,73],
[63,0,50,73,56,65,40,57,75],
[72,80,0,86,75,83,46,62,80],
[63,57,44,0,49,49,47,52,76],
[62,74,55,81,0,73,72,48,82],
[62,65,47,81,57,0,61,52,72],
[87,90,84,83,58,69,0,73,85],
[67,73,68,78,82,78,57,0,84],
[57,55,50,54,48,58,45,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,71,60,68,65,68,67,63],
[64,0,68,58,69,65,64,65,67],
[59,62,0,57,65,56,64,71,62],
[70,72,73,0,73,62,72,73,71],
[62,61,65,57,0,65,68,64,56],
[65,65,74,68,65,0,69,71,64],
[62,66,66,58,62,61,0,61,66],
[63,65,59,57,66,59,69,0,67],
[67,63,68,59,74,66,64,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,62,51,66,51,59,65,64],
[79,0,65,64,69,46,74,73,75],
[68,65,0,57,66,70,77,62,58],
[79,66,73,0,63,58,73,79,66],
[64,61,64,67,0,58,66,74,58],
[79,84,60,72,72,0,71,83,80],
[71,56,53,57,64,59,0,63,67],
[65,57,68,51,56,47,67,0,57],
[66,55,72,64,72,50,63,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,84,91,80,72,75,68,55],
[61,0,54,87,48,75,48,85,65],
[46,76,0,101,48,62,48,69,58],
[39,43,29,0,31,62,38,80,50],
[50,82,82,99,0,67,78,76,68],
[58,55,68,68,63,0,60,52,40],
[55,82,82,92,52,70,0,79,92],
[62,45,61,50,54,78,51,0,56],
[75,65,72,80,62,90,38,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,62,58,62,69,70,59],
[60,0,64,58,60,58,62,62,59],
[64,66,0,59,53,61,67,63,62],
[68,72,71,0,61,65,63,65,64],
[72,70,77,69,0,69,65,70,60],
[68,72,69,65,61,0,66,66,60],
[61,68,63,67,65,64,0,63,60],
[60,68,67,65,60,64,67,0,68],
[71,71,68,66,70,70,70,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,48,49,58,63,56,62,42],
[60,0,56,62,52,65,57,61,46],
[82,74,0,68,70,66,62,58,64],
[81,68,62,0,61,58,62,68,63],
[72,78,60,69,0,71,64,57,51],
[67,65,64,72,59,0,62,70,46],
[74,73,68,68,66,68,0,60,67],
[68,69,72,62,73,60,70,0,56],
[88,84,66,67,79,84,63,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,57,58,65,56,45,46,55],
[60,0,42,54,39,62,46,42,57],
[73,88,0,60,49,72,66,60,73],
[72,76,70,0,71,62,46,60,62],
[65,91,81,59,0,88,60,66,65],
[74,68,58,68,42,0,61,79,59],
[85,84,64,84,70,69,0,66,64],
[84,88,70,70,64,51,64,0,53],
[75,73,57,68,65,71,66,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,69,62,78,73,83,72,55],
[51,0,67,61,78,65,79,78,46],
[61,63,0,63,83,52,72,66,60],
[68,69,67,0,93,65,90,79,69],
[52,52,47,37,0,46,54,57,39],
[57,65,78,65,84,0,87,78,66],
[47,51,58,40,76,43,0,58,42],
[58,52,64,51,73,52,72,0,54],
[75,84,70,61,91,64,88,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,66,87,72,66,69,61,80],
[68,0,62,90,71,65,69,71,88],
[64,68,0,88,65,81,73,68,73],
[43,40,42,0,32,33,41,48,49],
[58,59,65,98,0,67,66,65,73],
[64,65,49,97,63,0,65,71,90],
[61,61,57,89,64,65,0,65,65],
[69,59,62,82,65,59,65,0,72],
[50,42,57,81,57,40,65,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,99,77,85,66,59,80,66],
[56,0,89,76,83,59,73,91,63],
[31,41,0,67,55,38,45,72,65],
[53,54,63,0,47,43,40,58,49],
[45,47,75,83,0,55,47,64,54],
[64,71,92,87,75,0,63,86,72],
[71,57,85,90,83,67,0,88,82],
[50,39,58,72,66,44,42,0,48],
[64,67,65,81,76,58,48,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,62,67,69,64,63,55,73],
[67,0,69,64,65,63,61,55,65],
[68,61,0,74,73,69,65,55,66],
[63,66,56,0,65,52,56,66,61],
[61,65,57,65,0,51,55,60,60],
[66,67,61,78,79,0,61,58,72],
[67,69,65,74,75,69,0,64,71],
[75,75,75,64,70,72,66,0,76],
[57,65,64,69,70,58,59,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,52,64,27,46,49,59,54],
[73,0,60,72,58,60,56,74,65],
[78,70,0,66,64,73,74,60,71],
[66,58,64,0,66,58,42,67,64],
[103,72,66,64,0,54,60,75,61],
[84,70,57,72,76,0,63,51,56],
[81,74,56,88,70,67,0,63,60],
[71,56,70,63,55,79,67,0,75],
[76,65,59,66,69,74,70,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,59,85,70,76,71,84,84],
[71,0,51,73,60,68,66,75,77],
[71,79,0,72,64,76,87,74,79],
[45,57,58,0,56,65,51,55,51],
[60,70,66,74,0,65,68,70,70],
[54,62,54,65,65,0,64,56,55],
[59,64,43,79,62,66,0,66,66],
[46,55,56,75,60,74,64,0,66],
[46,53,51,79,60,75,64,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,79,60,68,65,62,64,72],
[54,0,51,69,54,62,59,64,66],
[51,79,0,72,63,69,71,68,59],
[70,61,58,0,66,59,56,55,66],
[62,76,67,64,0,66,63,62,72],
[65,68,61,71,64,0,64,61,75],
[68,71,59,74,67,66,0,71,70],
[66,66,62,75,68,69,59,0,76],
[58,64,71,64,58,55,60,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,74,57,73,55,66,66,52],
[70,0,73,75,84,60,70,81,58],
[56,57,0,66,65,62,66,60,64],
[73,55,64,0,67,71,71,65,59],
[57,46,65,63,0,52,59,57,53],
[75,70,68,59,78,0,64,70,69],
[64,60,64,59,71,66,0,77,48],
[64,49,70,65,73,60,53,0,52],
[78,72,66,71,77,61,82,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,62,74,67,83,65,65,66],
[41,0,63,69,42,72,59,70,68],
[68,67,0,73,57,68,69,88,63],
[56,61,57,0,63,62,53,70,56],
[63,88,73,67,0,73,80,71,61],
[47,58,62,68,57,0,60,73,54],
[65,71,61,77,50,70,0,64,66],
[65,60,42,60,59,57,66,0,67],
[64,62,67,74,69,76,64,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,65,69,80,74,83,79,71],
[53,0,58,59,63,50,60,76,69],
[65,72,0,58,63,71,63,71,65],
[61,71,72,0,75,79,71,75,84],
[50,67,67,55,0,63,66,71,65],
[56,80,59,51,67,0,60,73,61],
[47,70,67,59,64,70,0,69,75],
[51,54,59,55,59,57,61,0,72],
[59,61,65,46,65,69,55,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,70,48,72,66,46,58,67],
[85,0,83,49,69,83,70,85,70],
[60,47,0,60,74,75,55,86,59],
[82,81,70,0,81,81,64,88,72],
[58,61,56,49,0,84,67,79,56],
[64,47,55,49,46,0,68,86,64],
[84,60,75,66,63,62,0,70,71],
[72,45,44,42,51,44,60,0,63],
[63,60,71,58,74,66,59,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,71,71,55,58,62,53,66],
[65,0,69,67,64,62,61,60,71],
[59,61,0,55,59,56,47,58,52],
[59,63,75,0,61,65,64,58,73],
[75,66,71,69,0,73,61,67,75],
[72,68,74,65,57,0,64,56,65],
[68,69,83,66,69,66,0,64,74],
[77,70,72,72,63,74,66,0,71],
[64,59,78,57,55,65,56,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,68,65,65,58,72,64,64],
[68,0,62,63,68,69,69,64,71],
[62,68,0,63,67,55,68,64,59],
[65,67,67,0,65,58,64,72,70],
[65,62,63,65,0,58,72,65,72],
[72,61,75,72,72,0,74,64,66],
[58,61,62,66,58,56,0,58,59],
[66,66,66,58,65,66,72,0,66],
[66,59,71,60,58,64,71,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,65,65,70,66,55,66,75],
[75,0,63,86,66,72,67,67,75],
[65,67,0,70,79,53,61,57,65],
[65,44,60,0,62,56,55,61,56],
[60,64,51,68,0,62,58,58,66],
[64,58,77,74,68,0,59,59,59],
[75,63,69,75,72,71,0,77,63],
[64,63,73,69,72,71,53,0,74],
[55,55,65,74,64,71,67,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,40,84,56,74,30,39,40],
[81,0,58,58,68,84,45,40,55],
[90,72,0,82,73,98,48,70,59],
[46,72,48,0,42,80,39,39,73],
[74,62,57,88,0,85,31,19,56],
[56,46,32,50,45,0,28,26,48],
[100,85,82,91,99,102,0,63,76],
[91,90,60,91,111,104,67,0,76],
[90,75,71,57,74,82,54,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,64,67,67,66,71,68,69],
[58,0,60,74,70,65,61,65,65],
[66,70,0,67,65,64,59,71,68],
[63,56,63,0,64,61,64,64,71],
[63,60,65,66,0,65,66,64,68],
[64,65,66,69,65,0,67,65,71],
[59,69,71,66,64,63,0,67,63],
[62,65,59,66,66,65,63,0,66],
[61,65,62,59,62,59,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,62,75,71,65,68,62,67],
[52,0,60,70,57,63,61,64,67],
[68,70,0,71,68,70,67,65,67],
[55,60,59,0,58,56,67,52,65],
[59,73,62,72,0,62,60,60,70],
[65,67,60,74,68,0,79,62,67],
[62,69,63,63,70,51,0,60,69],
[68,66,65,78,70,68,70,0,66],
[63,63,63,65,60,63,61,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,61,62,51,61,53,59,63],
[65,0,70,59,76,71,81,67,78],
[69,60,0,64,59,59,69,67,70],
[68,71,66,0,67,73,68,65,63],
[79,54,71,63,0,70,63,58,66],
[69,59,71,57,60,0,60,59,68],
[77,49,61,62,67,70,0,61,71],
[71,63,63,65,72,71,69,0,58],
[67,52,60,67,64,62,59,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,67,64,57,60,51,56,66],
[72,0,61,66,59,63,66,57,63],
[63,69,0,66,65,56,59,52,68],
[66,64,64,0,60,63,67,52,61],
[73,71,65,70,0,74,63,69,79],
[70,67,74,67,56,0,60,56,79],
[79,64,71,63,67,70,0,66,67],
[74,73,78,78,61,74,64,0,80],
[64,67,62,69,51,51,63,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,62,63,64,73,59,67,64],
[66,0,63,66,69,74,68,71,55],
[68,67,0,67,70,79,58,72,65],
[67,64,63,0,67,72,58,70,56],
[66,61,60,63,0,68,65,65,64],
[57,56,51,58,62,0,57,54,57],
[71,62,72,72,65,73,0,71,63],
[63,59,58,60,65,76,59,0,60],
[66,75,65,74,66,73,67,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,65,66,73,69,58,62,67],
[66,0,65,65,72,63,68,65,76],
[65,65,0,73,72,67,67,63,68],
[64,65,57,0,73,65,61,66,66],
[57,58,58,57,0,61,62,59,57],
[61,67,63,65,69,0,61,63,65],
[72,62,63,69,68,69,0,56,67],
[68,65,67,64,71,67,74,0,70],
[63,54,62,64,73,65,63,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,66,63,74,85,120,39],
[20,0,69,54,70,37,35,72,34],
[27,61,0,56,49,49,33,86,23],
[64,76,74,0,40,35,80,80,64],
[67,60,81,90,0,64,70,80,70],
[56,93,81,95,66,0,84,86,85],
[45,95,97,50,60,46,0,76,48],
[10,58,44,50,50,44,54,0,24],
[91,96,107,66,60,45,82,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,59,37,75,73,52,65,62],
[76,0,85,67,65,94,84,70,89],
[71,45,0,81,62,85,49,75,76],
[93,63,49,0,70,83,45,79,95],
[55,65,68,60,0,69,61,44,76],
[57,36,45,47,61,0,63,67,72],
[78,46,81,85,69,67,0,69,91],
[65,60,55,51,86,63,61,0,74],
[68,41,54,35,54,58,39,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,50,68,67,66,67,59,62],
[71,0,63,62,63,66,74,63,60],
[80,67,0,74,72,72,72,73,59],
[62,68,56,0,58,67,59,53,64],
[63,67,58,72,0,60,55,53,66],
[64,64,58,63,70,0,56,59,61],
[63,56,58,71,75,74,0,62,64],
[71,67,57,77,77,71,68,0,75],
[68,70,71,66,64,69,66,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,54,54,46,46,38,40,48],
[73,0,62,69,73,61,58,69,77],
[76,68,0,62,76,79,57,57,84],
[76,61,68,0,78,66,60,59,71],
[84,57,54,52,0,65,52,51,61],
[84,69,51,64,65,0,57,77,74],
[92,72,73,70,78,73,0,65,75],
[90,61,73,71,79,53,65,0,73],
[82,53,46,59,69,56,55,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,79,66,96,37,67,57,91],
[78,0,67,71,108,64,68,80,91],
[51,63,0,74,82,57,56,64,97],
[64,59,56,0,86,74,53,59,87],
[34,22,48,44,0,50,44,61,90],
[93,66,73,56,80,0,71,70,90],
[63,62,74,77,86,59,0,81,96],
[73,50,66,71,69,60,49,0,94],
[39,39,33,43,40,40,34,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,50,61,49,40,64,49,51],
[77,0,72,56,61,68,76,68,75],
[80,58,0,61,68,82,65,65,73],
[69,74,69,0,61,68,64,73,72],
[81,69,62,69,0,69,73,66,71],
[90,62,48,62,61,0,69,60,71],
[66,54,65,66,57,61,0,50,64],
[81,62,65,57,64,70,80,0,65],
[79,55,57,58,59,59,66,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,58,65,48,64,63,64],
[61,0,62,65,65,55,66,58,62],
[65,68,0,65,70,58,64,60,62],
[72,65,65,0,78,65,70,73,73],
[65,65,60,52,0,43,56,64,60],
[82,75,72,65,87,0,78,75,75],
[66,64,66,60,74,52,0,64,65],
[67,72,70,57,66,55,66,0,67],
[66,68,68,57,70,55,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,42,31,60,45,34,42,33],
[93,0,78,70,94,67,64,79,85],
[88,52,0,50,85,64,42,65,69],
[99,60,80,0,84,79,67,65,45],
[70,36,45,46,0,53,27,58,56],
[85,63,66,51,77,0,70,56,55],
[96,66,88,63,103,60,0,52,60],
[88,51,65,65,72,74,78,0,59],
[97,45,61,85,74,75,70,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,47,56,58,59,50,60,56],
[77,0,65,47,58,80,71,60,62],
[83,65,0,67,59,77,59,76,73],
[74,83,63,0,57,80,65,72,66],
[72,72,71,73,0,66,63,73,55],
[71,50,53,50,64,0,52,59,64],
[80,59,71,65,67,78,0,69,63],
[70,70,54,58,57,71,61,0,56],
[74,68,57,64,75,66,67,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,82,60,79,70,69,70],
[68,0,70,78,65,76,68,66,76],
[67,60,0,74,59,69,67,62,69],
[48,52,56,0,59,63,60,54,55],
[70,65,71,71,0,75,74,67,74],
[51,54,61,67,55,0,66,60,58],
[60,62,63,70,56,64,0,63,67],
[61,64,68,76,63,70,67,0,67],
[60,54,61,75,56,72,63,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,77,72,68,65,64,79,77],
[53,0,68,62,64,51,55,63,52],
[53,62,0,65,64,58,61,66,60],
[58,68,65,0,61,70,63,68,63],
[62,66,66,69,0,54,75,65,68],
[65,79,72,60,76,0,67,81,70],
[66,75,69,67,55,63,0,70,54],
[51,67,64,62,65,49,60,0,61],
[53,78,70,67,62,60,76,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,54,57,66,67,66,61,67],
[49,0,40,54,54,49,54,59,47],
[76,90,0,79,59,73,70,57,72],
[73,76,51,0,60,61,67,69,63],
[64,76,71,70,0,53,66,70,63],
[63,81,57,69,77,0,83,54,58],
[64,76,60,63,64,47,0,66,61],
[69,71,73,61,60,76,64,0,57],
[63,83,58,67,67,72,69,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,84,66,65,64,75,64,72],
[69,0,80,66,69,64,67,56,74],
[46,50,0,46,54,62,54,48,61],
[64,64,84,0,70,71,70,51,75],
[65,61,76,60,0,70,70,61,70],
[66,66,68,59,60,0,74,66,74],
[55,63,76,60,60,56,0,60,57],
[66,74,82,79,69,64,70,0,68],
[58,56,69,55,60,56,73,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,64,56,60,56,57,65,66],
[60,0,66,62,68,57,57,63,59],
[66,64,0,63,64,61,64,62,68],
[74,68,67,0,71,68,57,73,75],
[70,62,66,59,0,58,59,66,67],
[74,73,69,62,72,0,65,72,70],
[73,73,66,73,71,65,0,68,74],
[65,67,68,57,64,58,62,0,69],
[64,71,62,55,63,60,56,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,73,69,65,75,61,63,88],
[69,0,68,70,64,59,63,62,75],
[57,62,0,70,67,82,70,75,67],
[61,60,60,0,67,80,66,72,82],
[65,66,63,63,0,67,70,71,74],
[55,71,48,50,63,0,48,64,61],
[69,67,60,64,60,82,0,69,71],
[67,68,55,58,59,66,61,0,73],
[42,55,63,48,56,69,59,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,43,51,50,59,67,57,39],
[86,0,56,65,68,59,67,73,66],
[87,74,0,66,72,71,84,78,64],
[79,65,64,0,87,50,80,87,62],
[80,62,58,43,0,51,77,62,55],
[71,71,59,80,79,0,70,72,76],
[63,63,46,50,53,60,0,52,51],
[73,57,52,43,68,58,78,0,52],
[91,64,66,68,75,54,79,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,72,64,69,68,61,48,65],
[64,0,57,65,62,75,57,45,77],
[58,73,0,66,81,60,57,59,74],
[66,65,64,0,61,69,68,55,76],
[61,68,49,69,0,68,49,56,82],
[62,55,70,61,62,0,70,64,75],
[69,73,73,62,81,60,0,66,85],
[82,85,71,75,74,66,64,0,83],
[65,53,56,54,48,55,45,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,59,68,61,62,65,63,65],
[66,0,55,68,59,60,63,58,67],
[71,75,0,70,63,65,64,65,63],
[62,62,60,0,55,56,68,66,58],
[69,71,67,75,0,60,65,66,65],
[68,70,65,74,70,0,69,66,75],
[65,67,66,62,65,61,0,66,73],
[67,72,65,64,64,64,64,0,64],
[65,63,67,72,65,55,57,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,60,70,67,93,89,82,68],
[49,0,42,45,38,59,58,48,68],
[70,88,0,69,47,90,60,64,65],
[60,85,61,0,42,86,67,63,76],
[63,92,83,88,0,89,84,71,71],
[37,71,40,44,41,0,58,35,64],
[41,72,70,63,46,72,0,55,62],
[48,82,66,67,59,95,75,0,59],
[62,62,65,54,59,66,68,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,60,50,73,87,53,63,55],
[64,0,64,63,84,71,62,83,53],
[70,66,0,75,80,79,55,80,57],
[80,67,55,0,101,86,85,67,50],
[57,46,50,29,0,67,34,56,59],
[43,59,51,44,63,0,49,80,57],
[77,68,75,45,96,81,0,66,66],
[67,47,50,63,74,50,64,0,46],
[75,77,73,80,71,73,64,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,83,63,71,90,64,68,66],
[57,0,72,59,66,67,73,44,53],
[47,58,0,68,55,65,65,53,48],
[67,71,62,0,68,72,76,61,65],
[59,64,75,62,0,79,53,59,69],
[40,63,65,58,51,0,56,53,44],
[66,57,65,54,77,74,0,44,72],
[62,86,77,69,71,77,86,0,57],
[64,77,82,65,61,86,58,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,73,69,71,55,62,69,64],
[66,0,70,68,59,58,60,66,67],
[57,60,0,65,56,56,60,65,60],
[61,62,65,0,58,64,57,65,67],
[59,71,74,72,0,67,66,69,71],
[75,72,74,66,63,0,71,69,66],
[68,70,70,73,64,59,0,60,69],
[61,64,65,65,61,61,70,0,54],
[66,63,70,63,59,64,61,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,79,85,66,69,74,74],
[61,0,67,78,73,76,67,74,72],
[65,63,0,66,67,71,67,71,61],
[51,52,64,0,69,65,58,66,56],
[45,57,63,61,0,63,64,71,58],
[64,54,59,65,67,0,60,70,62],
[61,63,63,72,66,70,0,75,62],
[56,56,59,64,59,60,55,0,61],
[56,58,69,74,72,68,68,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,33,25,47,52,61,43,44],
[86,0,69,68,82,73,65,83,78],
[97,61,0,68,51,87,75,81,62],
[105,62,62,0,38,80,49,76,66],
[83,48,79,92,0,66,66,79,83],
[78,57,43,50,64,0,44,40,48],
[69,65,55,81,64,86,0,80,61],
[87,47,49,54,51,90,50,0,67],
[86,52,68,64,47,82,69,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,75,68,72,66,64,64,60],
[64,0,68,71,63,61,62,61,68],
[55,62,0,61,68,61,57,57,61],
[62,59,69,0,65,65,60,58,63],
[58,67,62,65,0,62,61,65,62],
[64,69,69,65,68,0,67,69,64],
[66,68,73,70,69,63,0,62,67],
[66,69,73,72,65,61,68,0,62],
[70,62,69,67,68,66,63,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,72,66,67,63,67,72,77],
[72,0,87,81,81,63,61,71,74],
[58,43,0,61,62,46,58,54,77],
[64,49,69,0,69,63,60,61,77],
[63,49,68,61,0,77,58,64,77],
[67,67,84,67,53,0,38,83,75],
[63,69,72,70,72,92,0,78,73],
[58,59,76,69,66,47,52,0,71],
[53,56,53,53,53,55,57,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,68,53,83,52,73,73,72],
[52,0,54,54,82,56,66,41,51],
[62,76,0,80,93,73,97,47,71],
[77,76,50,0,100,89,89,79,93],
[47,48,37,30,0,49,65,30,37],
[78,74,57,41,81,0,96,58,75],
[57,64,33,41,65,34,0,48,54],
[57,89,83,51,100,72,82,0,89],
[58,79,59,37,93,55,76,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,64,66,46,62,47,66,65],
[71,0,69,57,66,88,61,80,70],
[66,61,0,51,64,67,46,57,68],
[64,73,79,0,78,89,68,78,79],
[84,64,66,52,0,74,69,74,79],
[68,42,63,41,56,0,47,47,69],
[83,69,84,62,61,83,0,70,80],
[64,50,73,52,56,83,60,0,63],
[65,60,62,51,51,61,50,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,61,70,66,58,83,61,69],
[59,0,59,66,78,69,76,60,59],
[69,71,0,77,61,62,76,77,70],
[60,64,53,0,60,61,78,69,63],
[64,52,69,70,0,62,71,58,51],
[72,61,68,69,68,0,70,63,75],
[47,54,54,52,59,60,0,66,58],
[69,70,53,61,72,67,64,0,67],
[61,71,60,67,79,55,72,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,74,78,79,66,91,62,80],
[64,0,64,78,63,76,73,60,74],
[56,66,0,67,59,59,82,56,61],
[52,52,63,0,69,69,73,52,68],
[51,67,71,61,0,71,90,77,77],
[64,54,71,61,59,0,67,49,66],
[39,57,48,57,40,63,0,46,41],
[68,70,74,78,53,81,84,0,93],
[50,56,69,62,53,64,89,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,22,82,29,47,66,57,22],
[69,0,25,88,69,25,64,37,25],
[108,105,0,118,92,81,93,92,55],
[48,42,12,0,58,39,22,12,13],
[101,61,38,72,0,74,93,65,65],
[83,105,49,91,56,0,68,13,13],
[64,66,37,108,37,62,0,74,37],
[73,93,38,118,65,117,56,0,3],
[108,105,75,117,65,117,93,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,67,78,65,71,68,62,69],
[54,0,56,60,48,55,49,57,67],
[63,74,0,74,71,69,73,66,83],
[52,70,56,0,56,68,56,58,63],
[65,82,59,74,0,64,71,59,68],
[59,75,61,62,66,0,71,60,72],
[62,81,57,74,59,59,0,68,76],
[68,73,64,72,71,70,62,0,76],
[61,63,47,67,62,58,54,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,68,60,57,47,72,64,60],
[69,0,76,67,69,56,72,58,55],
[62,54,0,48,67,59,63,66,64],
[70,63,82,0,63,68,70,66,68],
[73,61,63,67,0,69,70,60,55],
[83,74,71,62,61,0,66,55,63],
[58,58,67,60,60,64,0,57,53],
[66,72,64,64,70,75,73,0,66],
[70,75,66,62,75,67,77,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,58,79,57,59,78,74,61],
[73,0,63,63,69,62,70,75,72],
[72,67,0,77,65,71,76,62,68],
[51,67,53,0,52,55,67,71,61],
[73,61,65,78,0,61,81,75,79],
[71,68,59,75,69,0,79,70,70],
[52,60,54,63,49,51,0,55,40],
[56,55,68,59,55,60,75,0,59],
[69,58,62,69,51,60,90,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,67,59,75,64,75,71],
[66,0,63,67,56,69,61,72,67],
[64,67,0,66,58,63,59,64,51],
[63,63,64,0,62,71,58,68,61],
[71,74,72,68,0,75,69,74,65],
[55,61,67,59,55,0,54,65,63],
[66,69,71,72,61,76,0,72,66],
[55,58,66,62,56,65,58,0,61],
[59,63,79,69,65,67,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,72,64,67,64,61,70,68],
[63,0,70,60,65,61,67,59,66],
[58,60,0,61,65,68,53,59,65],
[66,70,69,0,62,60,64,59,63],
[63,65,65,68,0,62,66,54,71],
[66,69,62,70,68,0,66,69,67],
[69,63,77,66,64,64,0,69,64],
[60,71,71,71,76,61,61,0,68],
[62,64,65,67,59,63,66,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,45,79,45,59,59,54,63],
[68,0,52,59,61,40,50,73,65],
[85,78,0,72,59,63,60,57,68],
[51,71,58,0,44,48,52,65,63],
[85,69,71,86,0,60,68,74,89],
[71,90,67,82,70,0,54,75,85],
[71,80,70,78,62,76,0,75,85],
[76,57,73,65,56,55,55,0,65],
[67,65,62,67,41,45,45,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,71,47,71,63,71,78,78],
[50,0,57,54,65,48,59,60,65],
[59,73,0,63,81,70,70,76,67],
[83,76,67,0,75,65,77,79,89],
[59,65,49,55,0,52,58,73,66],
[67,82,60,65,78,0,71,75,73],
[59,71,60,53,72,59,0,75,73],
[52,70,54,51,57,55,55,0,71],
[52,65,63,41,64,57,57,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,60,64,67,61,69,69,66],
[55,0,42,53,51,64,63,71,47],
[70,88,0,70,75,66,56,69,75],
[66,77,60,0,69,69,63,78,49],
[63,79,55,61,0,66,58,79,48],
[69,66,64,61,64,0,73,76,69],
[61,67,74,67,72,57,0,74,66],
[61,59,61,52,51,54,56,0,64],
[64,83,55,81,82,61,64,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,74,63,62,58,77,70,70],
[60,0,73,71,61,62,71,75,77],
[56,57,0,56,58,70,69,64,68],
[67,59,74,0,73,67,70,80,79],
[68,69,72,57,0,71,72,82,84],
[72,68,60,63,59,0,67,76,86],
[53,59,61,60,58,63,0,63,61],
[60,55,66,50,48,54,67,0,75],
[60,53,62,51,46,44,69,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,75,63,68,60,52,67,65],
[83,0,86,83,78,78,65,75,75],
[55,44,0,69,59,53,55,64,59],
[67,47,61,0,56,65,47,74,67],
[62,52,71,74,0,70,50,61,55],
[70,52,77,65,60,0,66,73,62],
[78,65,75,83,80,64,0,76,58],
[63,55,66,56,69,57,54,0,52],
[65,55,71,63,75,68,72,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,62,63,80,69,71,66,70],
[65,0,72,57,63,75,65,62,70],
[68,58,0,57,65,62,53,74,63],
[67,73,73,0,75,76,59,66,57],
[50,67,65,55,0,59,61,68,57],
[61,55,68,54,71,0,61,64,51],
[59,65,77,71,69,69,0,67,60],
[64,68,56,64,62,66,63,0,58],
[60,60,67,73,73,79,70,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,81,68,80,67,65,71,72],
[58,0,76,69,68,73,60,69,66],
[49,54,0,60,59,63,59,60,59],
[62,61,70,0,69,66,68,70,70],
[50,62,71,61,0,65,62,70,59],
[63,57,67,64,65,0,60,71,59],
[65,70,71,62,68,70,0,72,75],
[59,61,70,60,60,59,58,0,66],
[58,64,71,60,71,71,55,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,64,62,72,60,61,57],
[62,0,64,61,64,64,61,58,61],
[66,66,0,63,68,74,69,67,61],
[66,69,67,0,74,76,74,69,64],
[68,66,62,56,0,69,68,61,62],
[58,66,56,54,61,0,64,53,48],
[70,69,61,56,62,66,0,52,58],
[69,72,63,61,69,77,78,0,65],
[73,69,69,66,68,82,72,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,56,51,59,65,66,70,52],
[66,0,54,50,62,62,74,73,62],
[74,76,0,71,58,68,71,77,67],
[79,80,59,0,65,67,75,82,79],
[71,68,72,65,0,72,76,81,78],
[65,68,62,63,58,0,72,71,61],
[64,56,59,55,54,58,0,65,62],
[60,57,53,48,49,59,65,0,50],
[78,68,63,51,52,69,68,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,56,76,79,77,46,78,58],
[54,0,44,53,59,49,54,74,44],
[74,86,0,68,88,69,60,58,72],
[54,77,62,0,63,57,61,79,56],
[51,71,42,67,0,70,48,59,61],
[53,81,61,73,60,0,65,69,43],
[84,76,70,69,82,65,0,81,67],
[52,56,72,51,71,61,49,0,46],
[72,86,58,74,69,87,63,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,54,70,57,74,45,70,51],
[68,0,54,61,52,94,75,61,59],
[76,76,0,62,70,85,86,54,65],
[60,69,68,0,57,80,56,75,54],
[73,78,60,73,0,88,72,83,76],
[56,36,45,50,42,0,53,66,56],
[85,55,44,74,58,77,0,61,61],
[60,69,76,55,47,64,69,0,66],
[79,71,65,76,54,74,69,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,76,72,65,64,70,70,70],
[62,0,72,70,65,61,68,66,68],
[54,58,0,69,53,53,64,62,61],
[58,60,61,0,52,58,55,59,61],
[65,65,77,78,0,59,63,64,62],
[66,69,77,72,71,0,67,74,61],
[60,62,66,75,67,63,0,67,63],
[60,64,68,71,66,56,63,0,69],
[60,62,69,69,68,69,67,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,74,67,66,70,63,75,68],
[69,0,76,68,56,76,69,66,68],
[56,54,0,56,57,63,62,66,54],
[63,62,74,0,63,61,64,73,59],
[64,74,73,67,0,67,62,68,62],
[60,54,67,69,63,0,63,66,59],
[67,61,68,66,68,67,0,71,70],
[55,64,64,57,62,64,59,0,62],
[62,62,76,71,68,71,60,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,42,62,40,26,72,55,44],
[80,0,42,60,32,42,73,70,52],
[88,88,0,58,65,51,86,85,52],
[68,70,72,0,23,30,82,64,46],
[90,98,65,107,0,67,86,96,83],
[104,88,79,100,63,0,97,106,90],
[58,57,44,48,44,33,0,79,46],
[75,60,45,66,34,24,51,0,53],
[86,78,78,84,47,40,84,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,58,70,55,82,49,69,75],
[62,0,53,76,71,91,61,66,100],
[72,77,0,79,49,101,64,89,81],
[60,54,51,0,39,99,81,66,52],
[75,59,81,91,0,92,74,84,86],
[48,39,29,31,38,0,43,45,49],
[81,69,66,49,56,87,0,66,90],
[61,64,41,64,46,85,64,0,75],
[55,30,49,78,44,81,40,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,75,65,65,67,65,68,64],
[49,0,65,63,66,48,57,63,49],
[55,65,0,69,55,53,60,56,45],
[65,67,61,0,65,57,66,69,51],
[65,64,75,65,0,56,66,65,52],
[63,82,77,73,74,0,78,72,67],
[65,73,70,64,64,52,0,64,53],
[62,67,74,61,65,58,66,0,56],
[66,81,85,79,78,63,77,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,58,69,66,68,60,71,76],
[58,0,57,73,65,75,63,61,66],
[72,73,0,84,62,85,71,62,80],
[61,57,46,0,44,69,58,55,68],
[64,65,68,86,0,75,72,64,89],
[62,55,45,61,55,0,56,62,72],
[70,67,59,72,58,74,0,62,69],
[59,69,68,75,66,68,68,0,80],
[54,64,50,62,41,58,61,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,56,57,62,77,62,62,68],
[95,0,78,78,106,53,88,62,78],
[74,52,0,60,61,69,41,63,68],
[73,52,70,0,68,69,57,58,75],
[68,24,69,62,0,75,66,71,78],
[53,77,61,61,55,0,64,39,77],
[68,42,89,73,64,66,0,66,88],
[68,68,67,72,59,91,64,0,70],
[62,52,62,55,52,53,42,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,71,68,71,50,59,68,87],
[69,0,74,75,94,50,76,77,102],
[59,56,0,83,77,77,58,65,101],
[62,55,47,0,56,65,69,61,84],
[59,36,53,74,0,53,50,54,81],
[80,80,53,65,77,0,70,53,93],
[71,54,72,61,80,60,0,84,93],
[62,53,65,69,76,77,46,0,78],
[43,28,29,46,49,37,37,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,79,34,11,73,89,79,62],
[53,0,59,12,24,24,15,90,15],
[51,71,0,19,19,49,10,49,35],
[96,118,111,0,37,67,60,120,55],
[119,106,111,93,0,62,118,108,119],
[57,106,81,63,68,0,78,108,81],
[41,115,120,70,12,52,0,117,30],
[51,40,81,10,22,22,13,0,35],
[68,115,95,75,11,49,100,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,71,64,82,71,71,70,78],
[62,0,63,65,76,68,79,73,73],
[59,67,0,62,74,68,74,61,78],
[66,65,68,0,72,66,74,63,75],
[48,54,56,58,0,55,66,60,62],
[59,62,62,64,75,0,69,60,72],
[59,51,56,56,64,61,0,58,62],
[60,57,69,67,70,70,72,0,72],
[52,57,52,55,68,58,68,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,72,59,73,70,62,63,66],
[65,0,69,65,70,66,59,70,57],
[58,61,0,63,72,65,55,69,60],
[71,65,67,0,72,68,68,68,71],
[57,60,58,58,0,55,63,66,62],
[60,64,65,62,75,0,57,65,57],
[68,71,75,62,67,73,0,73,65],
[67,60,61,62,64,65,57,0,65],
[64,73,70,59,68,73,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,66,80,78,61,70,67,71],
[74,0,77,82,69,67,80,82,64],
[64,53,0,71,67,60,72,68,66],
[50,48,59,0,80,59,65,76,69],
[52,61,63,50,0,53,67,66,59],
[69,63,70,71,77,0,61,80,72],
[60,50,58,65,63,69,0,66,64],
[63,48,62,54,64,50,64,0,50],
[59,66,64,61,71,58,66,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,78,75,72,64,74,67,73],
[64,0,75,74,67,72,69,64,71],
[52,55,0,62,54,57,58,58,69],
[55,56,68,0,53,63,57,59,56],
[58,63,76,77,0,69,66,65,71],
[66,58,73,67,61,0,65,67,69],
[56,61,72,73,64,65,0,67,69],
[63,66,72,71,65,63,63,0,71],
[57,59,61,74,59,61,61,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,70,63,62,82,72,79,81],
[55,0,52,59,46,82,67,68,91],
[60,78,0,72,60,72,74,85,93],
[67,71,58,0,69,80,63,92,81],
[68,84,70,61,0,84,82,79,79],
[48,48,58,50,46,0,50,58,63],
[58,63,56,67,48,80,0,72,67],
[51,62,45,38,51,72,58,0,61],
[49,39,37,49,51,67,63,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,75,81,85,77,52,86,78],
[60,0,56,73,50,53,72,65,58],
[55,74,0,51,32,69,74,73,57],
[49,57,79,0,79,71,76,64,69],
[45,80,98,51,0,68,81,71,53],
[53,77,61,59,62,0,44,51,48],
[78,58,56,54,49,86,0,75,71],
[44,65,57,66,59,79,55,0,34],
[52,72,73,61,77,82,59,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,56,65,60,62,67,62,65],
[71,0,57,67,57,72,68,66,68],
[74,73,0,80,61,86,73,69,70],
[65,63,50,0,61,70,60,58,64],
[70,73,69,69,0,67,61,62,61],
[68,58,44,60,63,0,59,53,59],
[63,62,57,70,69,71,0,59,62],
[68,64,61,72,68,77,71,0,70],
[65,62,60,66,69,71,68,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,53,51,50,52,65,47,59],
[79,0,67,62,76,73,78,58,54],
[77,63,0,62,67,69,74,59,67],
[79,68,68,0,62,73,74,63,73],
[80,54,63,68,0,53,73,53,62],
[78,57,61,57,77,0,68,64,59],
[65,52,56,56,57,62,0,47,58],
[83,72,71,67,77,66,83,0,59],
[71,76,63,57,68,71,72,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,60,55,69,58,76,60,67],
[71,0,50,58,69,61,68,70,52],
[70,80,0,67,74,66,78,63,76],
[75,72,63,0,67,53,78,68,68],
[61,61,56,63,0,46,70,47,71],
[72,69,64,77,84,0,89,68,74],
[54,62,52,52,60,41,0,54,53],
[70,60,67,62,83,62,76,0,83],
[63,78,54,62,59,56,77,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,69,73,70,60,55,62,62],
[71,0,63,79,74,70,64,58,66],
[61,67,0,75,74,75,81,62,65],
[57,51,55,0,65,70,52,49,43],
[60,56,56,65,0,60,54,49,66],
[70,60,55,60,70,0,80,58,65],
[75,66,49,78,76,50,0,59,60],
[68,72,68,81,81,72,71,0,60],
[68,64,65,87,64,65,70,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,60,46,47,70,73,75,71],
[71,0,84,62,67,74,71,75,69],
[70,46,0,49,58,76,56,68,52],
[84,68,81,0,58,79,75,65,66],
[83,63,72,72,0,72,72,68,74],
[60,56,54,51,58,0,69,60,63],
[57,59,74,55,58,61,0,57,70],
[55,55,62,65,62,70,73,0,54],
[59,61,78,64,56,67,60,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,78,63,66,69,69,73,67],
[61,0,78,63,69,69,63,69,69],
[52,52,0,54,56,62,47,58,53],
[67,67,76,0,77,67,62,75,72],
[64,61,74,53,0,57,57,64,63],
[61,61,68,63,73,0,59,60,67],
[61,67,83,68,73,71,0,72,65],
[57,61,72,55,66,70,58,0,67],
[63,61,77,58,67,63,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,60,56,78,91,72,80,85],
[61,0,51,60,64,66,68,66,67],
[70,79,0,70,64,82,59,81,82],
[74,70,60,0,73,71,71,76,84],
[52,66,66,57,0,58,57,78,74],
[39,64,48,59,72,0,50,62,65],
[58,62,71,59,73,80,0,63,75],
[50,64,49,54,52,68,67,0,63],
[45,63,48,46,56,65,55,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,58,73,76,65,61,72,63],
[66,0,62,75,70,62,64,69,65],
[72,68,0,72,79,59,66,79,61],
[57,55,58,0,73,53,54,58,53],
[54,60,51,57,0,41,50,56,53],
[65,68,71,77,89,0,70,72,68],
[69,66,64,76,80,60,0,72,64],
[58,61,51,72,74,58,58,0,53],
[67,65,69,77,77,62,66,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,67,72,68,62,73,63,61],
[64,0,65,62,61,56,62,57,58],
[63,65,0,66,59,59,70,57,60],
[58,68,64,0,52,56,58,50,57],
[62,69,71,78,0,66,73,60,68],
[68,74,71,74,64,0,72,65,66],
[57,68,60,72,57,58,0,56,53],
[67,73,73,80,70,65,74,0,66],
[69,72,70,73,62,64,77,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,59,61,58,58,57,61,67],
[64,0,58,63,59,62,58,64,68],
[71,72,0,67,63,66,71,65,74],
[69,67,63,0,61,54,58,64,69],
[72,71,67,69,0,64,67,64,67],
[72,68,64,76,66,0,62,67,74],
[73,72,59,72,63,68,0,73,73],
[69,66,65,66,66,63,57,0,67],
[63,62,56,61,63,56,57,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,46,43,67,22,43,21,43],
[87,0,67,45,87,43,43,66,67],
[84,63,0,63,87,64,84,63,85],
[87,85,67,0,66,64,85,21,88],
[63,43,43,64,0,22,64,21,22],
[108,87,66,66,108,0,42,87,88],
[87,87,46,45,66,88,0,45,67],
[109,64,67,109,109,43,85,0,109],
[87,63,45,42,108,42,63,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,62,64,67,58,67,75,68],
[70,0,70,67,79,65,65,74,70],
[68,60,0,65,58,62,59,60,59],
[66,63,65,0,62,66,57,79,68],
[63,51,72,68,0,63,57,73,60],
[72,65,68,64,67,0,65,71,66],
[63,65,71,73,73,65,0,66,67],
[55,56,70,51,57,59,64,0,53],
[62,60,71,62,70,64,63,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,73,64,68,68,72,64],
[67,0,77,70,65,70,73,70,66],
[59,53,0,62,66,61,63,62,62],
[57,60,68,0,62,64,64,68,56],
[66,65,64,68,0,66,66,65,67],
[62,60,69,66,64,0,64,66,64],
[62,57,67,66,64,66,0,54,62],
[58,60,68,62,65,64,76,0,65],
[66,64,68,74,63,66,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,64,62,71,71,61,80,68],
[56,0,81,66,69,73,74,78,81],
[66,49,0,54,51,58,75,69,55],
[68,64,76,0,67,61,72,74,72],
[59,61,79,63,0,59,72,72,70],
[59,57,72,69,71,0,76,81,68],
[69,56,55,58,58,54,0,71,53],
[50,52,61,56,58,49,59,0,64],
[62,49,75,58,60,62,77,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,60,61,66,63,54,60,65],
[65,0,67,65,65,65,64,62,65],
[70,63,0,67,70,67,69,67,67],
[69,65,63,0,71,66,64,66,62],
[64,65,60,59,0,73,62,56,55],
[67,65,63,64,57,0,60,59,58],
[76,66,61,66,68,70,0,62,68],
[70,68,63,64,74,71,68,0,64],
[65,65,63,68,75,72,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,66,75,56,62,75,67,73],
[62,0,62,47,50,58,57,55,49],
[64,68,0,61,50,61,54,67,67],
[55,83,69,0,64,68,66,64,79],
[74,80,80,66,0,82,67,59,75],
[68,72,69,62,48,0,58,70,56],
[55,73,76,64,63,72,0,72,75],
[63,75,63,66,71,60,58,0,68],
[57,81,63,51,55,74,55,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,99,73,80,106,58,83,89],
[47,0,47,31,73,47,28,56,43],
[31,83,0,31,80,64,47,52,50],
[57,99,99,0,95,82,66,71,78],
[50,57,50,35,0,63,34,57,44],
[24,83,66,48,67,0,17,46,38],
[72,102,83,64,96,113,0,102,85],
[47,74,78,59,73,84,28,0,47],
[41,87,80,52,86,92,45,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,63,84,66,81,73,82,75],
[34,0,68,49,59,40,66,78,53],
[67,62,0,64,44,56,47,71,74],
[46,81,66,0,60,55,60,61,69],
[64,71,86,70,0,93,61,63,67],
[49,90,74,75,37,0,71,69,66],
[57,64,83,70,69,59,0,63,78],
[48,52,59,69,67,61,67,0,71],
[55,77,56,61,63,64,52,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,74,52,71,63,61,63,55],
[66,0,75,64,71,63,67,68,68],
[56,55,0,54,72,56,54,54,59],
[78,66,76,0,81,70,72,60,68],
[59,59,58,49,0,61,67,50,58],
[67,67,74,60,69,0,69,59,62],
[69,63,76,58,63,61,0,59,50],
[67,62,76,70,80,71,71,0,64],
[75,62,71,62,72,68,80,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,73,46,58,44,58,69,69],
[61,0,65,68,71,58,70,61,85],
[57,65,0,65,59,69,69,58,70],
[84,62,65,0,75,63,62,69,76],
[72,59,71,55,0,55,64,74,68],
[86,72,61,67,75,0,80,73,88],
[72,60,61,68,66,50,0,70,77],
[61,69,72,61,56,57,60,0,82],
[61,45,60,54,62,42,53,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,69,63,61,59,65,61,67],
[64,0,78,71,61,61,70,58,73],
[61,52,0,62,56,65,55,58,59],
[67,59,68,0,67,63,64,61,69],
[69,69,74,63,0,73,67,61,74],
[71,69,65,67,57,0,61,68,74],
[65,60,75,66,63,69,0,59,73],
[69,72,72,69,69,62,71,0,71],
[63,57,71,61,56,56,57,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,61,59,59,57,47,69,52],
[73,0,68,64,57,60,57,79,76],
[69,62,0,63,65,65,56,76,61],
[71,66,67,0,65,62,56,80,70],
[71,73,65,65,0,64,69,68,67],
[73,70,65,68,66,0,63,67,76],
[83,73,74,74,61,67,0,77,72],
[61,51,54,50,62,63,53,0,55],
[78,54,69,60,63,54,58,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,60,52,48,64,62,64,57],
[72,0,75,65,71,73,72,77,65],
[70,55,0,54,60,57,66,63,56],
[78,65,76,0,68,72,81,80,68],
[82,59,70,62,0,72,68,66,62],
[66,57,73,58,58,0,67,63,60],
[68,58,64,49,62,63,0,68,54],
[66,53,67,50,64,67,62,0,57],
[73,65,74,62,68,70,76,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,56,53,54,54,65,66,51],
[74,0,72,59,65,60,71,81,66],
[74,58,0,59,66,66,71,66,59],
[77,71,71,0,71,64,72,76,64],
[76,65,64,59,0,60,72,70,62],
[76,70,64,66,70,0,73,87,67],
[65,59,59,58,58,57,0,69,59],
[64,49,64,54,60,43,61,0,56],
[79,64,71,66,68,63,71,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,67,66,72,60,67,67,65],
[69,0,74,70,80,70,62,68,67],
[63,56,0,58,55,51,52,64,59],
[64,60,72,0,69,51,57,63,63],
[58,50,75,61,0,55,58,61,62],
[70,60,79,79,75,0,70,71,65],
[63,68,78,73,72,60,0,64,66],
[63,62,66,67,69,59,66,0,62],
[65,63,71,67,68,65,64,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,63,70,64,74,64,60,73],
[46,0,46,61,64,51,48,41,44],
[67,84,0,77,69,74,66,67,63],
[60,69,53,0,67,60,55,54,50],
[66,66,61,63,0,75,53,70,67],
[56,79,56,70,55,0,61,54,55],
[66,82,64,75,77,69,0,65,61],
[70,89,63,76,60,76,65,0,70],
[57,86,67,80,63,75,69,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,61,61,68,76,59,69,71],
[69,0,73,70,72,78,65,66,75],
[69,57,0,61,60,69,62,71,73],
[69,60,69,0,65,70,58,63,74],
[62,58,70,65,0,69,63,69,68],
[54,52,61,60,61,0,47,62,66],
[71,65,68,72,67,83,0,70,73],
[61,64,59,67,61,68,60,0,70],
[59,55,57,56,62,64,57,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,69,55,63,70,63,65,60],
[58,0,61,57,56,72,56,66,46],
[61,69,0,65,63,74,62,67,62],
[75,73,65,0,70,72,54,62,62],
[67,74,67,60,0,69,65,69,56],
[60,58,56,58,61,0,60,64,52],
[67,74,68,76,65,70,0,74,69],
[65,64,63,68,61,66,56,0,60],
[70,84,68,68,74,78,61,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,74,76,80,72,81,64,73],
[38,0,70,57,63,46,55,48,62],
[56,60,0,70,70,51,64,62,67],
[54,73,60,0,64,47,71,53,61],
[50,67,60,66,0,49,57,65,65],
[58,84,79,83,81,0,78,68,81],
[49,75,66,59,73,52,0,57,62],
[66,82,68,77,65,62,73,0,64],
[57,68,63,69,65,49,68,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,51,45,42,51,52,44,44],
[99,0,66,69,50,79,63,82,80],
[79,64,0,92,79,83,93,77,65],
[85,61,38,0,53,62,51,57,75],
[88,80,51,77,0,82,84,84,82],
[79,51,47,68,48,0,56,57,52],
[78,67,37,79,46,74,0,47,56],
[86,48,53,73,46,73,83,0,101],
[86,50,65,55,48,78,74,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,97,80,81,62,71,77,81],
[65,0,68,84,58,78,70,57,73],
[33,62,0,83,72,51,57,63,65],
[50,46,47,0,77,58,53,79,48],
[49,72,58,53,0,50,49,66,55],
[68,52,79,72,80,0,71,67,72],
[59,60,73,77,81,59,0,86,60],
[53,73,67,51,64,63,44,0,52],
[49,57,65,82,75,58,70,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,66,59,64,62,63,72],
[65,0,57,60,53,51,63,58,67],
[64,73,0,65,53,66,69,64,73],
[64,70,65,0,64,61,63,59,68],
[71,77,77,66,0,65,72,67,73],
[66,79,64,69,65,0,70,66,70],
[68,67,61,67,58,60,0,54,67],
[67,72,66,71,63,64,76,0,71],
[58,63,57,62,57,60,63,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,67,77,70,71,56,52,66],
[76,0,66,91,63,83,71,71,86],
[63,64,0,65,69,67,54,69,70],
[53,39,65,0,55,60,63,54,62],
[60,67,61,75,0,73,62,70,77],
[59,47,63,70,57,0,63,53,63],
[74,59,76,67,68,67,0,61,67],
[78,59,61,76,60,77,69,0,65],
[64,44,60,68,53,67,63,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,70,61,77,79,77,56,72],
[61,0,65,62,68,77,70,67,71],
[60,65,0,60,68,73,73,61,71],
[69,68,70,0,79,76,76,57,70],
[53,62,62,51,0,67,65,56,65],
[51,53,57,54,63,0,56,58,73],
[53,60,57,54,65,74,0,61,66],
[74,63,69,73,74,72,69,0,75],
[58,59,59,60,65,57,64,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,67,63,72,66,64,56,68],
[69,0,65,68,78,63,66,53,70],
[63,65,0,57,67,57,65,60,64],
[67,62,73,0,73,67,70,67,70],
[58,52,63,57,0,57,56,50,52],
[64,67,73,63,73,0,63,53,70],
[66,64,65,60,74,67,0,54,64],
[74,77,70,63,80,77,76,0,71],
[62,60,66,60,78,60,66,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,57,73,51,89,83,68,68],
[51,0,45,64,56,84,76,54,62],
[73,85,0,79,70,72,77,49,51],
[57,66,51,0,39,71,74,50,32],
[79,74,60,91,0,88,80,89,60],
[41,46,58,59,42,0,96,44,51],
[47,54,53,56,50,34,0,51,36],
[62,76,81,80,41,86,79,0,53],
[62,68,79,98,70,79,94,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,79,81,73,67,60,81,67],
[55,0,62,81,46,65,63,85,47],
[51,68,0,69,46,61,48,81,52],
[49,49,61,0,51,55,49,59,52],
[57,84,84,79,0,74,77,81,71],
[63,65,69,75,56,0,70,77,66],
[70,67,82,81,53,60,0,74,65],
[49,45,49,71,49,53,56,0,58],
[63,83,78,78,59,64,65,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,81,71,74,74,69,69,72],
[67,0,71,66,63,65,73,65,63],
[49,59,0,60,48,54,57,46,57],
[59,64,70,0,65,63,70,66,65],
[56,67,82,65,0,70,63,65,72],
[56,65,76,67,60,0,62,75,67],
[61,57,73,60,67,68,0,66,68],
[61,65,84,64,65,55,64,0,66],
[58,67,73,65,58,63,62,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,63,57,66,41,0,80,66],
[70,0,53,81,90,64,53,81,70],
[67,77,0,77,96,61,67,101,67],
[73,49,53,0,73,53,53,81,90],
[64,40,34,57,0,64,0,51,17],
[89,66,69,77,66,0,37,100,66],
[130,77,63,77,130,93,0,130,77],
[50,49,29,49,79,30,0,0,37],
[64,60,63,40,113,64,53,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,73,55,55,59,66,72,62],
[68,0,84,81,63,67,71,79,84],
[57,46,0,46,50,50,43,59,58],
[75,49,84,0,66,67,84,69,79],
[75,67,80,64,0,87,60,58,69],
[71,63,80,63,43,0,55,64,71],
[64,59,87,46,70,75,0,66,72],
[58,51,71,61,72,66,64,0,62],
[68,46,72,51,61,59,58,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,72,79,60,77,59,71,74],
[51,0,65,69,57,67,53,64,58],
[58,65,0,74,71,63,63,58,55],
[51,61,56,0,44,67,62,59,56],
[70,73,59,86,0,72,62,60,65],
[53,63,67,63,58,0,53,65,64],
[71,77,67,68,68,77,0,79,64],
[59,66,72,71,70,65,51,0,61],
[56,72,75,74,65,66,66,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,58,62,52,57,52,56,60],
[72,0,73,77,56,62,63,67,65],
[72,57,0,72,66,47,69,52,75],
[68,53,58,0,50,70,64,51,56],
[78,74,64,80,0,63,86,69,61],
[73,68,83,60,67,0,80,59,72],
[78,67,61,66,44,50,0,54,64],
[74,63,78,79,61,71,76,0,67],
[70,65,55,74,69,58,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,61,70,64,68,53,67,57],
[72,0,64,81,70,66,62,69,54],
[69,66,0,78,71,63,63,56,54],
[60,49,52,0,61,55,50,57,45],
[66,60,59,69,0,65,65,65,67],
[62,64,67,75,65,0,71,65,53],
[77,68,67,80,65,59,0,62,64],
[63,61,74,73,65,65,68,0,60],
[73,76,76,85,63,77,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,76,75,65,66,61,78,76],
[59,0,64,67,66,68,57,65,80],
[54,66,0,59,65,69,63,63,67],
[55,63,71,0,62,70,66,67,68],
[65,64,65,68,0,69,67,70,69],
[64,62,61,60,61,0,60,73,64],
[69,73,67,64,63,70,0,72,77],
[52,65,67,63,60,57,58,0,69],
[54,50,63,62,61,66,53,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,76,66,78,61,60,63,55],
[56,0,73,71,70,83,82,68,65],
[54,57,0,60,49,50,51,53,53],
[64,59,70,0,85,61,68,94,68],
[52,60,81,45,0,79,78,65,54],
[69,47,80,69,51,0,92,58,70],
[70,48,79,62,52,38,0,74,60],
[67,62,77,36,65,72,56,0,52],
[75,65,77,62,76,60,70,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,80,87,75,53,57,52,39],
[70,0,68,81,65,83,56,64,65],
[50,62,0,78,92,70,59,49,43],
[43,49,52,0,66,70,54,39,24],
[55,65,38,64,0,95,45,52,33],
[77,47,60,60,35,0,42,41,49],
[73,74,71,76,85,88,0,85,36],
[78,66,81,91,78,89,45,0,41],
[91,65,87,106,97,81,94,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,79,66,79,70,74,76,67],
[66,0,75,73,69,64,68,80,66],
[51,55,0,56,65,60,58,60,56],
[64,57,74,0,68,62,72,66,56],
[51,61,65,62,0,59,59,63,57],
[60,66,70,68,71,0,63,71,69],
[56,62,72,58,71,67,0,78,63],
[54,50,70,64,67,59,52,0,59],
[63,64,74,74,73,61,67,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,62,49,60,67,45,72,47],
[82,0,64,78,88,81,67,92,74],
[68,66,0,80,82,61,64,64,62],
[81,52,50,0,69,71,65,72,57],
[70,42,48,61,0,56,37,54,36],
[63,49,69,59,74,0,56,71,51],
[85,63,66,65,93,74,0,73,35],
[58,38,66,58,76,59,57,0,45],
[83,56,68,73,94,79,95,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,64,57,58,60,56,61,57],
[80,0,75,73,66,77,58,74,65],
[66,55,0,58,60,65,56,65,61],
[73,57,72,0,58,74,64,76,66],
[72,64,70,72,0,69,65,69,65],
[70,53,65,56,61,0,62,63,60],
[74,72,74,66,65,68,0,71,73],
[69,56,65,54,61,67,59,0,51],
[73,65,69,64,65,70,57,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,66,61,67,62,70,71,61],
[75,0,67,76,73,65,74,81,77],
[64,63,0,56,59,58,64,56,59],
[69,54,74,0,77,68,75,68,61],
[63,57,71,53,0,65,64,63,61],
[68,65,72,62,65,0,73,71,66],
[60,56,66,55,66,57,0,62,58],
[59,49,74,62,67,59,68,0,60],
[69,53,71,69,69,64,72,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,59,74,68,76,68,63,67],
[60,0,65,70,71,72,73,79,69],
[71,65,0,82,73,74,68,70,77],
[56,60,48,0,55,70,53,69,63],
[62,59,57,75,0,70,70,78,77],
[54,58,56,60,60,0,60,57,60],
[62,57,62,77,60,70,0,66,67],
[67,51,60,61,52,73,64,0,65],
[63,61,53,67,53,70,63,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,57,58,63,55,63,55,65],
[68,0,61,52,64,52,61,62,63],
[73,69,0,59,68,62,59,66,80],
[72,78,71,0,70,63,73,69,77],
[67,66,62,60,0,65,56,62,61],
[75,78,68,67,65,0,65,72,61],
[67,69,71,57,74,65,0,54,76],
[75,68,64,61,68,58,76,0,75],
[65,67,50,53,69,69,54,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,57,74,73,66,59,64],
[63,0,57,59,81,70,70,60,66],
[61,73,0,63,80,71,66,65,66],
[73,71,67,0,81,73,74,79,60],
[56,49,50,49,0,48,59,58,48],
[57,60,59,57,82,0,67,63,59],
[64,60,64,56,71,63,0,58,65],
[71,70,65,51,72,67,72,0,60],
[66,64,64,70,82,71,65,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,79,75,67,79,68,70,73],
[66,0,72,68,68,57,66,71,69],
[51,58,0,67,59,65,52,64,65],
[55,62,63,0,67,61,54,67,67],
[63,62,71,63,0,74,61,68,66],
[51,73,65,69,56,0,66,69,63],
[62,64,78,76,69,64,0,65,70],
[60,59,66,63,62,61,65,0,63],
[57,61,65,63,64,67,60,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,47,49,55,57,50,47,57],
[81,0,82,73,72,73,79,63,83],
[83,48,0,52,67,70,73,53,71],
[81,57,78,0,69,65,77,77,86],
[75,58,63,61,0,56,66,56,61],
[73,57,60,65,74,0,69,54,69],
[80,51,57,53,64,61,0,56,62],
[83,67,77,53,74,76,74,0,74],
[73,47,59,44,69,61,68,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,64,72,70,64,78,69,65],
[59,0,69,74,55,66,66,70,67],
[66,61,0,81,60,71,72,67,58],
[58,56,49,0,51,57,58,60,58],
[60,75,70,79,0,72,83,72,64],
[66,64,59,73,58,0,69,55,60],
[52,64,58,72,47,61,0,61,54],
[61,60,63,70,58,75,69,0,64],
[65,63,72,72,66,70,76,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,73,78,69,67,73,68,65],
[65,0,67,68,70,70,62,73,65],
[57,63,0,71,59,57,65,60,62],
[52,62,59,0,62,57,58,61,53],
[61,60,71,68,0,66,61,58,68],
[63,60,73,73,64,0,66,69,67],
[57,68,65,72,69,64,0,61,56],
[62,57,70,69,72,61,69,0,66],
[65,65,68,77,62,63,74,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,64,73,84,71,68,79,68],
[61,0,70,66,75,70,69,64,75],
[66,60,0,72,75,57,52,72,66],
[57,64,58,0,65,58,56,66,65],
[46,55,55,65,0,49,57,56,55],
[59,60,73,72,81,0,65,68,62],
[62,61,78,74,73,65,0,71,69],
[51,66,58,64,74,62,59,0,78],
[62,55,64,65,75,68,61,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,64,76,73,50,64,60,69],
[69,0,65,67,70,69,71,68,68],
[66,65,0,69,69,66,58,68,60],
[54,63,61,0,62,54,49,61,61],
[57,60,61,68,0,60,57,58,53],
[80,61,64,76,70,0,68,61,68],
[66,59,72,81,73,62,0,75,72],
[70,62,62,69,72,69,55,0,70],
[61,62,70,69,77,62,58,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,90,71,82,62,88,77,83],
[80,0,95,92,94,70,94,75,65],
[40,35,0,69,43,48,72,56,42],
[59,38,61,0,61,74,68,46,63],
[48,36,87,69,0,57,66,62,59],
[68,60,82,56,73,0,72,69,58],
[42,36,58,62,64,58,0,66,48],
[53,55,74,84,68,61,64,0,49],
[47,65,88,67,71,72,82,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,61,68,70,62,45,81,78],
[66,0,62,55,71,54,56,57,46],
[69,68,0,61,84,61,65,81,54],
[62,75,69,0,84,64,48,77,64],
[60,59,46,46,0,42,56,61,50],
[68,76,69,66,88,0,58,86,60],
[85,74,65,82,74,72,0,90,68],
[49,73,49,53,69,44,40,0,46],
[52,84,76,66,80,70,62,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,69,60,58,52,82,54,57],
[70,0,76,61,72,80,74,79,62],
[61,54,0,56,46,60,53,65,59],
[70,69,74,0,55,71,71,84,72],
[72,58,84,75,0,71,83,73,58],
[78,50,70,59,59,0,78,60,68],
[48,56,77,59,47,52,0,66,49],
[76,51,65,46,57,70,64,0,58],
[73,68,71,58,72,62,81,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,67,68,66,66,65,60],
[63,0,61,62,57,69,59,55,62],
[66,69,0,65,66,69,63,61,69],
[63,68,65,0,68,68,61,68,68],
[62,73,64,62,0,65,71,66,68],
[64,61,61,62,65,0,64,65,65],
[64,71,67,69,59,66,0,67,58],
[65,75,69,62,64,65,63,0,65],
[70,68,61,62,62,65,72,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,47,55,39,57,47,50,46],
[75,0,60,70,61,65,70,68,60],
[83,70,0,72,59,60,68,70,55],
[75,60,58,0,62,52,63,73,53],
[91,69,71,68,0,51,72,69,65],
[73,65,70,78,79,0,73,74,66],
[83,60,62,67,58,57,0,71,48],
[80,62,60,57,61,56,59,0,53],
[84,70,75,77,65,64,82,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,60,58,50,53,64,63,54],
[77,0,69,65,60,67,81,59,75],
[70,61,0,69,80,65,87,75,72],
[72,65,61,0,64,60,77,69,74],
[80,70,50,66,0,65,87,71,75],
[77,63,65,70,65,0,84,70,72],
[66,49,43,53,43,46,0,56,51],
[67,71,55,61,59,60,74,0,66],
[76,55,58,56,55,58,79,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,57,64,64,65,70,61,57],
[65,0,62,63,70,67,62,55,57],
[73,68,0,80,72,74,70,76,65],
[66,67,50,0,65,70,72,65,56],
[66,60,58,65,0,67,63,61,50],
[65,63,56,60,63,0,62,62,52],
[60,68,60,58,67,68,0,62,62],
[69,75,54,65,69,68,68,0,62],
[73,73,65,74,80,78,68,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,60,56,67,60,66,58,54],
[72,0,69,67,68,75,71,65,72],
[70,61,0,61,61,59,63,57,63],
[74,63,69,0,66,63,72,63,65],
[63,62,69,64,0,69,71,65,65],
[70,55,71,67,61,0,77,63,66],
[64,59,67,58,59,53,0,51,63],
[72,65,73,67,65,67,79,0,65],
[76,58,67,65,65,64,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,77,75,72,59,50,51,60],
[60,0,66,67,71,61,65,62,68],
[53,64,0,67,80,65,72,60,65],
[55,63,63,0,69,57,48,58,58],
[58,59,50,61,0,62,45,72,50],
[71,69,65,73,68,0,64,78,65],
[80,65,58,82,85,66,0,66,73],
[79,68,70,72,58,52,64,0,52],
[70,62,65,72,80,65,57,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,69,64,63,63,74,67,60],
[57,0,60,57,69,52,61,59,61],
[61,70,0,68,68,63,69,69,65],
[66,73,62,0,69,65,71,67,61],
[67,61,62,61,0,59,65,71,54],
[67,78,67,65,71,0,73,79,65],
[56,69,61,59,65,57,0,75,66],
[63,71,61,63,59,51,55,0,56],
[70,69,65,69,76,65,64,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,87,87,87,87,87,72,42],
[15,0,87,87,45,87,87,72,57],
[43,43,0,0,0,15,0,0,42],
[43,43,130,0,45,88,45,30,42],
[43,85,130,85,0,100,42,42,85],
[43,43,115,42,30,0,42,30,42],
[43,43,130,85,88,88,0,73,85],
[58,58,130,100,88,100,57,0,100],
[88,73,88,88,45,88,45,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,61,66,64,61,63,70,64],
[71,0,67,70,72,65,78,76,58],
[69,63,0,69,73,57,72,73,59],
[64,60,61,0,56,57,58,77,46],
[66,58,57,74,0,59,54,66,57],
[69,65,73,73,71,0,85,86,69],
[67,52,58,72,76,45,0,69,57],
[60,54,57,53,64,44,61,0,51],
[66,72,71,84,73,61,73,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,46,48,48,49,67,44,67],
[75,0,58,50,49,57,74,55,73],
[84,72,0,62,67,68,75,80,83],
[82,80,68,0,72,58,78,71,93],
[82,81,63,58,0,63,74,65,77],
[81,73,62,72,67,0,74,78,93],
[63,56,55,52,56,56,0,54,73],
[86,75,50,59,65,52,76,0,73],
[63,57,47,37,53,37,57,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,61,66,69,72,73,57],
[62,0,65,59,65,69,71,67,59],
[66,65,0,58,54,69,64,70,58],
[69,71,72,0,69,69,66,73,60],
[64,65,76,61,0,64,73,69,65],
[61,61,61,61,66,0,70,66,52],
[58,59,66,64,57,60,0,69,51],
[57,63,60,57,61,64,61,0,58],
[73,71,72,70,65,78,79,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,66,69,63,63,56,64,60],
[63,0,57,64,63,54,65,57,72],
[64,73,0,63,62,60,64,62,57],
[61,66,67,0,65,66,58,46,55],
[67,67,68,65,0,50,62,65,59],
[67,76,70,64,80,0,66,69,60],
[74,65,66,72,68,64,0,69,68],
[66,73,68,84,65,61,61,0,67],
[70,58,73,75,71,70,62,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,68,69,72,65,74,57,68],
[56,0,73,71,74,73,85,61,74],
[62,57,0,67,69,78,70,69,61],
[61,59,63,0,68,70,80,68,66],
[58,56,61,62,0,59,67,49,60],
[65,57,52,60,71,0,78,50,68],
[56,45,60,50,63,52,0,40,48],
[73,69,61,62,81,80,90,0,73],
[62,56,69,64,70,62,82,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,64,68,63,81,62,84,55],
[57,0,61,50,54,61,55,52,68],
[66,69,0,63,67,57,59,72,67],
[62,80,67,0,57,70,58,86,54],
[67,76,63,73,0,75,46,80,64],
[49,69,73,60,55,0,60,69,75],
[68,75,71,72,84,70,0,65,79],
[46,78,58,44,50,61,65,0,67],
[75,62,63,76,66,55,51,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,69,63,62,72,67,69,62],
[68,0,71,65,73,73,74,72,74],
[61,59,0,61,55,60,68,70,58],
[67,65,69,0,69,66,77,66,70],
[68,57,75,61,0,62,67,69,64],
[58,57,70,64,68,0,67,70,59],
[63,56,62,53,63,63,0,65,60],
[61,58,60,64,61,60,65,0,56],
[68,56,72,60,66,71,70,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,56,62,60,47,72,59,65],
[81,0,67,80,63,71,78,62,74],
[74,63,0,72,67,58,74,56,77],
[68,50,58,0,56,49,66,50,68],
[70,67,63,74,0,61,79,65,70],
[83,59,72,81,69,0,75,62,74],
[58,52,56,64,51,55,0,43,63],
[71,68,74,80,65,68,87,0,81],
[65,56,53,62,60,56,67,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,77,79,77,78,73,75,83],
[74,0,68,75,77,60,69,71,69],
[53,62,0,67,66,57,67,73,62],
[51,55,63,0,55,67,53,48,61],
[53,53,64,75,0,60,75,58,65],
[52,70,73,63,70,0,68,78,66],
[57,61,63,77,55,62,0,62,63],
[55,59,57,82,72,52,68,0,67],
[47,61,68,69,65,64,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,61,62,65,66,60,62,66],
[72,0,72,64,73,64,63,64,71],
[69,58,0,68,63,64,58,68,68],
[68,66,62,0,68,69,70,69,66],
[65,57,67,62,0,57,63,64,62],
[64,66,66,61,73,0,60,66,74],
[70,67,72,60,67,70,0,71,72],
[68,66,62,61,66,64,59,0,66],
[64,59,62,64,68,56,58,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,56,60,62,65,53,64,56],
[59,0,52,66,56,55,58,68,50],
[74,78,0,69,68,64,60,79,61],
[70,64,61,0,63,68,67,66,60],
[68,74,62,67,0,63,67,77,60],
[65,75,66,62,67,0,64,75,70],
[77,72,70,63,63,66,0,73,59],
[66,62,51,64,53,55,57,0,51],
[74,80,69,70,70,60,71,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,34,42,26,57,55,49,56],
[76,0,56,67,69,62,74,73,84],
[96,74,0,79,57,83,70,83,78],
[88,63,51,0,57,63,48,65,62],
[104,61,73,73,0,73,68,64,82],
[73,68,47,67,57,0,75,81,83],
[75,56,60,82,62,55,0,84,64],
[81,57,47,65,66,49,46,0,68],
[74,46,52,68,48,47,66,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,72,54,68,62,72,58,67],
[75,0,79,65,75,63,78,64,75],
[58,51,0,69,69,48,64,59,74],
[76,65,61,0,63,71,74,76,76],
[62,55,61,67,0,60,70,62,71],
[68,67,82,59,70,0,74,69,77],
[58,52,66,56,60,56,0,76,77],
[72,66,71,54,68,61,54,0,70],
[63,55,56,54,59,53,53,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,69,78,54,68,80,77],
[67,0,61,64,76,63,78,69,64],
[59,69,0,69,70,76,66,68,46],
[61,66,61,0,73,71,85,64,58],
[52,54,60,57,0,53,61,63,56],
[76,67,54,59,77,0,66,62,60],
[62,52,64,45,69,64,0,63,55],
[50,61,62,66,67,68,67,0,61],
[53,66,84,72,74,70,75,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,66,71,71,69,56,69,60],
[64,0,58,67,61,63,65,61,54],
[64,72,0,70,73,78,64,70,67],
[59,63,60,0,64,64,60,61,51],
[59,69,57,66,0,69,64,65,59],
[61,67,52,66,61,0,64,60,61],
[74,65,66,70,66,66,0,62,71],
[61,69,60,69,65,70,68,0,54],
[70,76,63,79,71,69,59,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,65,57,65,65,62,64,52],
[67,0,66,62,66,60,61,60,60],
[65,64,0,58,75,61,65,62,47],
[73,68,72,0,68,66,63,63,61],
[65,64,55,62,0,56,58,59,61],
[65,70,69,64,74,0,66,62,56],
[68,69,65,67,72,64,0,68,58],
[66,70,68,67,71,68,62,0,71],
[78,70,83,69,69,74,72,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,64,69,73,69,77,75,66],
[58,0,71,66,58,59,79,66,53],
[66,59,0,68,59,60,68,67,59],
[61,64,62,0,54,68,68,64,62],
[57,72,71,76,0,63,76,69,55],
[61,71,70,62,67,0,72,70,55],
[53,51,62,62,54,58,0,67,56],
[55,64,63,66,61,60,63,0,46],
[64,77,71,68,75,75,74,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,73,74,58,60,67,76,72],
[58,0,67,61,60,60,65,74,82],
[57,63,0,61,58,64,63,68,73],
[56,69,69,0,66,62,60,81,76],
[72,70,72,64,0,68,64,62,75],
[70,70,66,68,62,0,72,75,69],
[63,65,67,70,66,58,0,71,77],
[54,56,62,49,68,55,59,0,67],
[58,48,57,54,55,61,53,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,60,67,76,68,64,73,57],
[77,0,72,72,85,79,65,79,62],
[70,58,0,63,74,88,58,81,69],
[63,58,67,0,75,83,62,79,59],
[54,45,56,55,0,63,50,69,49],
[62,51,42,47,67,0,53,64,50],
[66,65,72,68,80,77,0,80,58],
[57,51,49,51,61,66,50,0,52],
[73,68,61,71,81,80,72,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,65,65,57,70,75,77,68],
[75,0,67,65,68,68,76,83,79],
[65,63,0,62,62,68,65,78,71],
[65,65,68,0,63,65,71,69,68],
[73,62,68,67,0,70,70,70,74],
[60,62,62,65,60,0,69,75,67],
[55,54,65,59,60,61,0,81,68],
[53,47,52,61,60,55,49,0,59],
[62,51,59,62,56,63,62,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,55,57,66,61,62,58,58],
[75,0,74,69,75,69,65,65,66],
[75,56,0,67,70,75,63,58,63],
[73,61,63,0,68,53,62,54,60],
[64,55,60,62,0,65,66,51,57],
[69,61,55,77,65,0,58,62,65],
[68,65,67,68,64,72,0,60,64],
[72,65,72,76,79,68,70,0,75],
[72,64,67,70,73,65,66,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,45,54,81,40,68,59,67],
[70,0,50,68,37,33,80,68,61],
[85,80,0,45,72,43,55,69,48],
[76,62,85,0,63,55,82,97,65],
[49,93,58,67,0,43,77,59,77],
[90,97,87,75,87,0,83,62,75],
[62,50,75,48,53,47,0,51,35],
[71,62,61,33,71,68,79,0,48],
[63,69,82,65,53,55,95,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,55,81,54,71,69,56,75],
[55,0,47,66,53,73,61,74,75],
[75,83,0,76,66,75,58,75,79],
[49,64,54,0,55,57,65,69,55],
[76,77,64,75,0,74,53,72,73],
[59,57,55,73,56,0,58,63,73],
[61,69,72,65,77,72,0,64,68],
[74,56,55,61,58,67,66,0,66],
[55,55,51,75,57,57,62,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,42,56,61,51,67,58,49],
[79,0,59,70,69,66,85,70,76],
[88,71,0,69,73,64,82,74,61],
[74,60,61,0,66,61,71,61,66],
[69,61,57,64,0,53,65,63,63],
[79,64,66,69,77,0,67,67,62],
[63,45,48,59,65,63,0,58,48],
[72,60,56,69,67,63,72,0,59],
[81,54,69,64,67,68,82,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,66,84,75,67,73,62,71],
[49,0,61,71,64,66,73,55,57],
[64,69,0,77,72,81,76,66,68],
[46,59,53,0,57,57,59,50,59],
[55,66,58,73,0,59,79,58,64],
[63,64,49,73,71,0,71,47,56],
[57,57,54,71,51,59,0,54,53],
[68,75,64,80,72,83,76,0,73],
[59,73,62,71,66,74,77,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,56,57,61,58,48,61,64],
[68,0,71,63,60,62,54,61,68],
[74,59,0,77,58,62,57,63,70],
[73,67,53,0,60,46,53,57,56],
[69,70,72,70,0,62,58,73,65],
[72,68,68,84,68,0,68,70,62],
[82,76,73,77,72,62,0,64,72],
[69,69,67,73,57,60,66,0,78],
[66,62,60,74,65,68,58,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,69,78,69,56,80,65,76],
[79,0,62,75,72,70,81,77,75],
[61,68,0,66,66,60,75,58,67],
[52,55,64,0,53,46,51,52,57],
[61,58,64,77,0,46,75,59,61],
[74,60,70,84,84,0,72,72,72],
[50,49,55,79,55,58,0,71,65],
[65,53,72,78,71,58,59,0,77],
[54,55,63,73,69,58,65,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,62,60,69,57,61,55,66],
[62,0,61,61,57,60,59,52,46],
[68,69,0,63,61,67,62,62,58],
[70,69,67,0,60,62,65,69,60],
[61,73,69,70,0,67,67,77,64],
[73,70,63,68,63,0,65,71,59],
[69,71,68,65,63,65,0,63,64],
[75,78,68,61,53,59,67,0,65],
[64,84,72,70,66,71,66,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,65,63,68,55,57,57,53],
[73,0,73,61,71,67,63,60,59],
[65,57,0,50,70,58,60,64,46],
[67,69,80,0,80,73,59,65,68],
[62,59,60,50,0,54,55,66,51],
[75,63,72,57,76,0,55,65,61],
[73,67,70,71,75,75,0,70,64],
[73,70,66,65,64,65,60,0,57],
[77,71,84,62,79,69,66,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,78,65,82,74,83,77,77],
[56,0,64,64,68,59,79,64,52],
[52,66,0,66,76,74,74,67,63],
[65,66,64,0,72,72,84,69,68],
[48,62,54,58,0,53,64,55,54],
[56,71,56,58,77,0,62,59,62],
[47,51,56,46,66,68,0,52,61],
[53,66,63,61,75,71,78,0,61],
[53,78,67,62,76,68,69,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,74,82,60,74,62,77,77],
[57,0,55,58,43,68,43,62,58],
[56,75,0,71,55,63,65,71,74],
[48,72,59,0,46,67,51,64,67],
[70,87,75,84,0,73,65,77,74],
[56,62,67,63,57,0,61,67,72],
[68,87,65,79,65,69,0,86,67],
[53,68,59,66,53,63,44,0,77],
[53,72,56,63,56,58,63,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,72,61,64,65,56,58],
[65,0,67,65,68,69,59,59,64],
[63,63,0,66,66,60,61,59,61],
[58,65,64,0,69,62,62,65,56],
[69,62,64,61,0,60,65,64,58],
[66,61,70,68,70,0,59,70,65],
[65,71,69,68,65,71,0,68,71],
[74,71,71,65,66,60,62,0,68],
[72,66,69,74,72,65,59,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,72,68,52,63,63,59,70],
[52,0,58,63,54,53,55,63,54],
[58,72,0,71,54,54,66,66,57],
[62,67,59,0,61,65,58,64,73],
[78,76,76,69,0,74,62,69,77],
[67,77,76,65,56,0,70,73,70],
[67,75,64,72,68,60,0,69,82],
[71,67,64,66,61,57,61,0,62],
[60,76,73,57,53,60,48,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,73,59,65,61,60,62,60],
[67,0,76,62,58,54,65,62,64],
[57,54,0,63,60,63,54,57,52],
[71,68,67,0,63,75,65,64,65],
[65,72,70,67,0,61,70,57,58],
[69,76,67,55,69,0,73,68,60],
[70,65,76,65,60,57,0,61,75],
[68,68,73,66,73,62,69,0,67],
[70,66,78,65,72,70,55,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,63,68,61,73,54,55,84],
[58,0,62,54,54,74,54,57,56],
[67,68,0,70,62,55,49,45,62],
[62,76,60,0,47,72,50,52,78],
[69,76,68,83,0,74,80,41,67],
[57,56,75,58,56,0,51,72,74],
[76,76,81,80,50,79,0,60,54],
[75,73,85,78,89,58,70,0,79],
[46,74,68,52,63,56,76,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,46,71,57,54,65,53,62],
[89,0,65,82,71,72,76,73,75],
[84,65,0,87,70,73,76,78,70],
[59,48,43,0,59,46,70,62,62],
[73,59,60,71,0,67,65,64,74],
[76,58,57,84,63,0,75,57,76],
[65,54,54,60,65,55,0,62,59],
[77,57,52,68,66,73,68,0,73],
[68,55,60,68,56,54,71,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,65,66,76,66,71,70,76],
[56,0,70,60,70,68,68,65,83],
[65,60,0,63,73,64,67,67,76],
[64,70,67,0,81,69,68,63,70],
[54,60,57,49,0,51,52,62,69],
[64,62,66,61,79,0,74,67,69],
[59,62,63,62,78,56,0,59,74],
[60,65,63,67,68,63,71,0,64],
[54,47,54,60,61,61,56,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,59,61,65,65,57,65,56],
[72,0,71,70,69,67,61,57,60],
[71,59,0,62,65,70,64,65,60],
[69,60,68,0,67,74,63,61,73],
[65,61,65,63,0,70,62,60,60],
[65,63,60,56,60,0,63,58,66],
[73,69,66,67,68,67,0,62,66],
[65,73,65,69,70,72,68,0,66],
[74,70,70,57,70,64,64,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,71,72,67,63,73,57,67],
[64,0,61,68,62,77,70,63,59],
[59,69,0,68,75,66,73,63,70],
[58,62,62,0,68,69,64,55,60],
[63,68,55,62,0,67,64,55,68],
[67,53,64,61,63,0,70,60,58],
[57,60,57,66,66,60,0,46,68],
[73,67,67,75,75,70,84,0,62],
[63,71,60,70,62,72,62,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,62,51,52,54,56,62],
[66,0,72,61,65,55,58,64,64],
[61,58,0,57,51,59,52,70,58],
[68,69,73,0,62,62,61,64,62],
[79,65,79,68,0,60,73,74,72],
[78,75,71,68,70,0,54,76,76],
[76,72,78,69,57,76,0,73,68],
[74,66,60,66,56,54,57,0,68],
[68,66,72,68,58,54,62,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,74,76,76,58,76,75,78],
[49,0,64,68,70,76,63,62,68],
[56,66,0,70,74,56,66,66,66],
[54,62,60,0,57,52,64,65,50],
[54,60,56,73,0,60,61,57,52],
[72,54,74,78,70,0,85,68,56],
[54,67,64,66,69,45,0,66,59],
[55,68,64,65,73,62,64,0,63],
[52,62,64,80,78,74,71,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,67,64,65,64,67,74,52],
[59,0,72,68,66,66,66,68,56],
[63,58,0,81,55,64,64,67,46],
[66,62,49,0,60,63,44,77,39],
[65,64,75,70,0,69,57,71,48],
[66,64,66,67,61,0,53,71,56],
[63,64,66,86,73,77,0,69,73],
[56,62,63,53,59,59,61,0,53],
[78,74,84,91,82,74,57,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,61,71,55,56,68,64,67],
[72,0,61,65,55,61,74,67,70],
[69,69,0,66,63,61,63,63,64],
[59,65,64,0,64,57,63,61,63],
[75,75,67,66,0,55,72,63,68],
[74,69,69,73,75,0,74,65,57],
[62,56,67,67,58,56,0,50,55],
[66,63,67,69,67,65,80,0,62],
[63,60,66,67,62,73,75,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,68,58,77,61,62,78,72],
[73,0,83,64,70,67,72,88,78],
[62,47,0,56,74,64,58,73,64],
[72,66,74,0,84,66,64,84,75],
[53,60,56,46,0,59,52,65,63],
[69,63,66,64,71,0,67,83,73],
[68,58,72,66,78,63,0,81,67],
[52,42,57,46,65,47,49,0,63],
[58,52,66,55,67,57,63,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,59,63,67,68,71,75,72],
[60,0,54,61,66,63,64,61,66],
[71,76,0,60,71,65,65,72,72],
[67,69,70,0,67,62,69,70,78],
[63,64,59,63,0,62,54,68,65],
[62,67,65,68,68,0,67,71,70],
[59,66,65,61,76,63,0,75,75],
[55,69,58,60,62,59,55,0,62],
[58,64,58,52,65,60,55,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,65,60,70,51,59,63,65],
[67,0,70,66,77,55,63,71,68],
[65,60,0,58,63,54,49,58,69],
[70,64,72,0,70,54,68,63,68],
[60,53,67,60,0,47,51,53,65],
[79,75,76,76,83,0,62,72,78],
[71,67,81,62,79,68,0,72,75],
[67,59,72,67,77,58,58,0,75],
[65,62,61,62,65,52,55,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,67,67,61,80,69,71,63],
[54,0,64,58,49,62,61,54,61],
[63,66,0,60,60,65,67,55,53],
[63,72,70,0,63,82,59,61,61],
[69,81,70,67,0,76,57,63,64],
[50,68,65,48,54,0,54,57,56],
[61,69,63,71,73,76,0,58,72],
[59,76,75,69,67,73,72,0,57],
[67,69,77,69,66,74,58,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,67,64,64,70,73,79,64],
[62,0,60,64,69,65,71,75,64],
[63,70,0,68,65,67,67,79,56],
[66,66,62,0,77,73,70,83,70],
[66,61,65,53,0,58,57,65,55],
[60,65,63,57,72,0,66,67,64],
[57,59,63,60,73,64,0,69,55],
[51,55,51,47,65,63,61,0,53],
[66,66,74,60,75,66,75,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,65,67,75,78,71,69,73],
[52,0,61,64,65,68,71,63,67],
[65,69,0,63,65,72,66,64,70],
[63,66,67,0,69,73,69,74,66],
[55,65,65,61,0,69,68,62,72],
[52,62,58,57,61,0,61,63,64],
[59,59,64,61,62,69,0,62,66],
[61,67,66,56,68,67,68,0,66],
[57,63,60,64,58,66,64,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,95,65,52,68,92,84,83],
[53,0,74,57,70,48,73,56,63],
[35,56,0,54,51,55,68,37,63],
[65,73,76,0,70,63,82,70,91],
[78,60,79,60,0,56,95,69,71],
[62,82,75,67,74,0,84,82,64],
[38,57,62,48,35,46,0,54,57],
[46,74,93,60,61,48,76,0,74],
[47,67,67,39,59,66,73,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,61,55,108,41,56,54,61],
[69,0,56,64,84,61,31,70,46],
[69,74,0,47,66,67,36,74,34],
[75,66,83,0,88,48,37,76,68],
[22,46,64,42,0,44,17,71,29],
[89,69,63,82,86,0,64,58,46],
[74,99,94,93,113,66,0,60,84],
[76,60,56,54,59,72,70,0,48],
[69,84,96,62,101,84,46,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,70,78,66,73,62,65],
[62,0,59,67,69,57,65,64,61],
[60,71,0,72,67,66,76,68,57],
[60,63,58,0,67,60,68,65,60],
[52,61,63,63,0,58,68,63,51],
[64,73,64,70,72,0,74,69,64],
[57,65,54,62,62,56,0,66,59],
[68,66,62,65,67,61,64,0,61],
[65,69,73,70,79,66,71,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,73,62,74,58,61,72],
[67,0,69,75,72,68,69,57,68],
[59,61,0,70,63,71,60,62,79],
[57,55,60,0,61,66,55,56,63],
[68,58,67,69,0,72,60,61,67],
[56,62,59,64,58,0,55,62,64],
[72,61,70,75,70,75,0,65,71],
[69,73,68,74,69,68,65,0,71],
[58,62,51,67,63,66,59,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,66,63,66,68,66,53,61],
[69,0,65,60,71,70,64,55,63],
[64,65,0,63,65,64,64,62,53],
[67,70,67,0,72,75,74,65,63],
[64,59,65,58,0,62,62,55,62],
[62,60,66,55,68,0,68,56,59],
[64,66,66,56,68,62,0,56,51],
[77,75,68,65,75,74,74,0,70],
[69,67,77,67,68,71,79,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,66,60,76,64,66,68,57],
[71,0,72,67,71,71,76,73,64],
[64,58,0,60,66,58,63,72,53],
[70,63,70,0,73,60,65,85,55],
[54,59,64,57,0,61,61,73,53],
[66,59,72,70,69,0,70,79,65],
[64,54,67,65,69,60,0,72,55],
[62,57,58,45,57,51,58,0,51],
[73,66,77,75,77,65,75,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,63,69,76,77,72,63,76],
[69,0,63,71,76,65,63,66,71],
[67,67,0,74,78,62,72,77,68],
[61,59,56,0,70,63,58,62,59],
[54,54,52,60,0,59,63,58,62],
[53,65,68,67,71,0,59,65,68],
[58,67,58,72,67,71,0,64,67],
[67,64,53,68,72,65,66,0,74],
[54,59,62,71,68,62,63,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,43,63,39,63,87,76,80],
[43,0,45,56,46,29,81,65,80],
[87,85,0,87,62,83,70,81,81],
[67,74,43,0,37,47,83,40,65],
[91,84,68,93,0,80,97,58,79],
[67,101,47,83,50,0,82,80,90],
[43,49,60,47,33,48,0,54,64],
[54,65,49,90,72,50,76,0,88],
[50,50,49,65,51,40,66,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,75,77,89,87,78,72],
[61,0,63,71,76,67,63,74,62],
[65,67,0,61,59,81,72,77,63],
[55,59,69,0,73,76,72,79,75],
[53,54,71,57,0,71,63,74,52],
[41,63,49,54,59,0,69,79,54],
[43,67,58,58,67,61,0,64,61],
[52,56,53,51,56,51,66,0,60],
[58,68,67,55,78,76,69,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,62,52,59,84,67,72,58],
[67,0,77,73,65,76,74,69,59],
[68,53,0,58,38,80,69,59,73],
[78,57,72,0,53,70,82,63,66],
[71,65,92,77,0,83,71,73,79],
[46,54,50,60,47,0,64,63,51],
[63,56,61,48,59,66,0,56,59],
[58,61,71,67,57,67,74,0,79],
[72,71,57,64,51,79,71,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,75,65,65,80,69,47,70],
[49,0,51,53,55,52,47,44,50],
[55,79,0,64,55,66,50,45,53],
[65,77,66,0,63,65,61,57,67],
[65,75,75,67,0,74,68,63,58],
[50,78,64,65,56,0,57,57,59],
[61,83,80,69,62,73,0,71,70],
[83,86,85,73,67,73,59,0,66],
[60,80,77,63,72,71,60,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,69,68,51,57,69,65,41],
[88,0,80,89,54,85,88,85,68],
[61,50,0,66,67,77,83,68,58],
[62,41,64,0,57,72,89,68,57],
[79,76,63,73,0,64,77,78,65],
[73,45,53,58,66,0,106,88,66],
[61,42,47,41,53,24,0,47,32],
[65,45,62,62,52,42,83,0,66],
[89,62,72,73,65,64,98,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,70,71,68,64,61,67,70],
[65,0,63,74,61,65,61,65,63],
[60,67,0,73,69,54,64,63,62],
[59,56,57,0,60,49,59,61,55],
[62,69,61,70,0,62,69,67,60],
[66,65,76,81,68,0,68,72,66],
[69,69,66,71,61,62,0,70,68],
[63,65,67,69,63,58,60,0,69],
[60,67,68,75,70,64,62,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,65,48,56,58,54,45,56],
[76,0,63,68,61,73,55,54,60],
[65,67,0,72,65,82,64,62,62],
[82,62,58,0,61,76,56,54,43],
[74,69,65,69,0,81,58,53,67],
[72,57,48,54,49,0,53,47,59],
[76,75,66,74,72,77,0,52,60],
[85,76,68,76,77,83,78,0,64],
[74,70,68,87,63,71,70,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,76,53,22,54,3,77,50],
[52,0,54,57,62,103,30,99,52],
[54,76,0,79,67,82,49,71,69],
[77,73,51,0,73,60,73,73,56],
[108,68,63,57,0,80,58,104,59],
[76,27,48,70,50,0,50,72,56],
[127,100,81,57,72,80,0,102,76],
[53,31,59,57,26,58,28,0,7],
[80,78,61,74,71,74,54,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,56,62,60,56,72,54,60],
[62,0,55,58,60,54,68,57,65],
[74,75,0,64,64,59,67,52,70],
[68,72,66,0,69,69,70,56,62],
[70,70,66,61,0,63,78,64,72],
[74,76,71,61,67,0,67,66,71],
[58,62,63,60,52,63,0,53,62],
[76,73,78,74,66,64,77,0,70],
[70,65,60,68,58,59,68,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,44,27,42,24,24,26,44],
[92,0,64,35,40,66,38,69,59],
[86,66,0,10,26,52,13,42,35],
[103,95,120,0,82,60,70,71,56],
[88,90,104,48,0,69,74,70,81],
[106,64,78,70,61,0,55,65,56],
[106,92,117,60,56,75,0,69,83],
[104,61,88,59,60,65,61,0,58],
[86,71,95,74,49,74,47,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,68,50,58,58,54,72,58],
[91,0,74,73,78,73,64,85,79],
[62,56,0,50,54,60,60,70,62],
[80,57,80,0,63,72,66,87,70],
[72,52,76,67,0,59,66,77,67],
[72,57,70,58,71,0,58,72,72],
[76,66,70,64,64,72,0,78,71],
[58,45,60,43,53,58,52,0,56],
[72,51,68,60,63,58,59,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,58,64,65,73,57,53,60],
[79,0,82,71,67,62,62,73,55],
[72,48,0,64,57,63,49,55,48],
[66,59,66,0,67,55,56,61,56],
[65,63,73,63,0,54,59,66,55],
[57,68,67,75,76,0,59,50,65],
[73,68,81,74,71,71,0,69,60],
[77,57,75,69,64,80,61,0,67],
[70,75,82,74,75,65,70,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,67,67,69,69,65,64,71],
[56,0,64,60,69,79,58,62,68],
[63,66,0,65,71,73,56,72,65],
[63,70,65,0,72,76,54,66,71],
[61,61,59,58,0,69,58,59,67],
[61,51,57,54,61,0,47,74,65],
[65,72,74,76,72,83,0,69,73],
[66,68,58,64,71,56,61,0,64],
[59,62,65,59,63,65,57,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,87,70,63,96,40,56,64],
[35,0,88,85,69,91,31,55,18],
[43,42,0,77,76,77,44,52,34],
[60,45,53,0,73,85,37,59,51],
[67,61,54,57,0,82,56,59,36],
[34,39,53,45,48,0,25,43,28],
[90,99,86,93,74,105,0,62,71],
[74,75,78,71,71,87,68,0,39],
[66,112,96,79,94,102,59,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,62,65,65,63,69,63,59],
[74,0,75,83,72,64,73,64,77],
[68,55,0,73,62,59,72,71,55],
[65,47,57,0,65,64,64,56,63],
[65,58,68,65,0,65,63,53,61],
[67,66,71,66,65,0,55,56,75],
[61,57,58,66,67,75,0,60,69],
[67,66,59,74,77,74,70,0,55],
[71,53,75,67,69,55,61,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,59,60,57,63,59,57,60],
[75,0,78,66,61,71,64,59,64],
[71,52,0,60,55,67,72,59,61],
[70,64,70,0,59,71,69,66,65],
[73,69,75,71,0,74,76,69,64],
[67,59,63,59,56,0,68,57,55],
[71,66,58,61,54,62,0,62,55],
[73,71,71,64,61,73,68,0,58],
[70,66,69,65,66,75,75,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,82,60,78,75,78,69,59],
[49,0,81,41,62,66,51,60,57],
[48,49,0,36,54,52,57,65,37],
[70,89,94,0,89,84,95,84,62],
[52,68,76,41,0,70,55,83,60],
[55,64,78,46,60,0,62,61,73],
[52,79,73,35,75,68,0,72,65],
[61,70,65,46,47,69,58,0,73],
[71,73,93,68,70,57,65,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,60,43,60,51,55,60,65],
[74,0,61,46,56,58,55,55,63],
[70,69,0,54,62,57,58,58,61],
[87,84,76,0,84,71,64,65,74],
[70,74,68,46,0,54,63,68,69],
[79,72,73,59,76,0,61,76,72],
[75,75,72,66,67,69,0,65,67],
[70,75,72,65,62,54,65,0,58],
[65,67,69,56,61,58,63,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,65,71,58,64,77,75,58],
[77,0,71,69,65,69,70,72,71],
[65,59,0,58,55,63,59,64,53],
[59,61,72,0,59,67,65,63,66],
[72,65,75,71,0,80,78,73,63],
[66,61,67,63,50,0,70,69,54],
[53,60,71,65,52,60,0,61,59],
[55,58,66,67,57,61,69,0,61],
[72,59,77,64,67,76,71,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,66,67,64,75,55,66,69],
[69,0,69,65,63,74,62,66,66],
[64,61,0,61,66,80,59,62,72],
[63,65,69,0,61,80,68,69,64],
[66,67,64,69,0,78,73,66,70],
[55,56,50,50,52,0,63,62,56],
[75,68,71,62,57,67,0,60,62],
[64,64,68,61,64,68,70,0,69],
[61,64,58,66,60,74,68,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,54,60,65,59,60,60,53],
[80,0,60,65,70,73,57,66,63],
[76,70,0,76,76,56,70,70,69],
[70,65,54,0,81,64,58,64,57],
[65,60,54,49,0,51,43,56,47],
[71,57,74,66,79,0,58,65,57],
[70,73,60,72,87,72,0,59,59],
[70,64,60,66,74,65,71,0,56],
[77,67,61,73,83,73,71,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,63,78,67,77,88,87,56],
[55,0,78,85,78,63,91,69,66],
[67,52,0,101,55,80,92,73,50],
[52,45,29,0,45,39,53,57,41],
[63,52,75,85,0,84,56,59,44],
[53,67,50,91,46,0,57,75,67],
[42,39,38,77,74,73,0,72,42],
[43,61,57,73,71,55,58,0,52],
[74,64,80,89,86,63,88,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,73,69,63,68,62,69,80],
[65,0,69,79,78,75,71,86,82],
[57,61,0,70,62,64,65,63,70],
[61,51,60,0,73,67,64,69,72],
[67,52,68,57,0,68,68,73,71],
[62,55,66,63,62,0,68,69,77],
[68,59,65,66,62,62,0,71,78],
[61,44,67,61,57,61,59,0,62],
[50,48,60,58,59,53,52,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,61,78,75,64,70,77,71],
[54,0,62,69,65,64,64,73,59],
[69,68,0,82,53,61,63,78,64],
[52,61,48,0,61,61,61,70,57],
[55,65,77,69,0,60,64,72,59],
[66,66,69,69,70,0,69,71,64],
[60,66,67,69,66,61,0,65,65],
[53,57,52,60,58,59,65,0,59],
[59,71,66,73,71,66,65,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,58,49,53,51,59,65,55],
[61,0,57,55,49,48,51,55,56],
[72,73,0,67,59,66,63,75,71],
[81,75,63,0,65,60,67,72,64],
[77,81,71,65,0,64,67,67,76],
[79,82,64,70,66,0,70,68,65],
[71,79,67,63,63,60,0,72,62],
[65,75,55,58,63,62,58,0,51],
[75,74,59,66,54,65,68,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,48,64,55,67,58,62,65],
[71,0,64,77,65,73,73,76,76],
[82,66,0,77,74,77,65,67,76],
[66,53,53,0,59,67,65,61,65],
[75,65,56,71,0,58,58,64,70],
[63,57,53,63,72,0,61,68,72],
[72,57,65,65,72,69,0,67,71],
[68,54,63,69,66,62,63,0,64],
[65,54,54,65,60,58,59,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,68,49,51,47,66,47,57],
[69,0,49,51,61,65,58,70,47],
[62,81,0,73,51,44,76,51,70],
[81,79,57,0,64,70,57,69,54],
[79,69,79,66,0,68,63,68,55],
[83,65,86,60,62,0,62,49,66],
[64,72,54,73,67,68,0,72,60],
[83,60,79,61,62,81,58,0,65],
[73,83,60,76,75,64,70,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,56,56,71,52,57,56,67],
[79,0,71,68,68,64,71,70,78],
[74,59,0,67,70,62,67,56,73],
[74,62,63,0,71,70,56,62,76],
[59,62,60,59,0,51,59,55,68],
[78,66,68,60,79,0,64,71,81],
[73,59,63,74,71,66,0,65,74],
[74,60,74,68,75,59,65,0,68],
[63,52,57,54,62,49,56,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,55,56,62,61,54,52,53],
[60,0,58,52,57,55,68,52,50],
[75,72,0,65,72,73,82,60,59],
[74,78,65,0,71,75,74,79,68],
[68,73,58,59,0,64,76,68,53],
[69,75,57,55,66,0,74,58,63],
[76,62,48,56,54,56,0,52,48],
[78,78,70,51,62,72,78,0,67],
[77,80,71,62,77,67,82,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,57,67,61,56,72,65,67],
[67,0,62,68,62,66,60,55,69],
[73,68,0,68,64,60,71,58,64],
[63,62,62,0,56,64,68,63,58],
[69,68,66,74,0,65,64,64,65],
[74,64,70,66,65,0,73,72,66],
[58,70,59,62,66,57,0,61,65],
[65,75,72,67,66,58,69,0,58],
[63,61,66,72,65,64,65,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,86,87,76,73,72,88,79],
[68,0,91,74,77,51,72,92,80],
[44,39,0,45,52,44,66,69,49],
[43,56,85,0,53,51,70,70,64],
[54,53,78,77,0,58,68,77,75],
[57,79,86,79,72,0,71,82,68],
[58,58,64,60,62,59,0,67,65],
[42,38,61,60,53,48,63,0,58],
[51,50,81,66,55,62,65,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,74,65,94,64,50,87,87],
[54,0,42,49,61,42,51,29,51],
[56,88,0,84,93,58,76,65,92],
[65,81,46,0,98,59,64,51,95],
[36,69,37,32,0,51,45,36,56],
[66,88,72,71,79,0,87,54,71],
[80,79,54,66,85,43,0,64,67],
[43,101,65,79,94,76,66,0,73],
[43,79,38,35,74,59,63,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,109,109,48,130,108,130,130],
[43,0,43,22,36,118,57,118,79],
[21,87,0,12,48,118,69,130,91],
[21,108,118,0,69,118,108,130,91],
[82,94,82,61,0,118,72,94,130],
[0,12,12,12,12,0,12,12,48],
[22,73,61,22,58,118,0,94,58],
[0,12,0,0,36,118,36,0,36],
[0,51,39,39,0,82,72,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,64,52,54,65,70,65,55],
[72,0,66,59,57,69,59,63,62],
[66,64,0,70,64,66,62,67,64],
[78,71,60,0,66,88,78,64,70],
[76,73,66,64,0,80,77,70,69],
[65,61,64,42,50,0,54,63,43],
[60,71,68,52,53,76,0,63,65],
[65,67,63,66,60,67,67,0,65],
[75,68,66,60,61,87,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,56,70,60,71,63,61,65],
[67,0,57,60,52,69,64,52,56],
[74,73,0,62,69,68,73,73,67],
[60,70,68,0,64,74,68,68,71],
[70,78,61,66,0,69,80,68,72],
[59,61,62,56,61,0,64,52,69],
[67,66,57,62,50,66,0,67,60],
[69,78,57,62,62,78,63,0,70],
[65,74,63,59,58,61,70,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,65,68,79,73,62,61],
[63,0,66,65,62,72,77,66,74],
[61,64,0,63,71,87,65,59,59],
[65,65,67,0,64,79,62,58,58],
[62,68,59,66,0,80,66,64,63],
[51,58,43,51,50,0,59,48,52],
[57,53,65,68,64,71,0,70,66],
[68,64,71,72,66,82,60,0,66],
[69,56,71,72,67,78,64,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,42,49,41,53,64,47,60],
[65,0,70,61,55,51,51,56,47],
[88,60,0,59,60,66,88,78,64],
[81,69,71,0,56,83,67,66,84],
[89,75,70,74,0,76,86,78,63],
[77,79,64,47,54,0,65,45,68],
[66,79,42,63,44,65,0,55,60],
[83,74,52,64,52,85,75,0,65],
[70,83,66,46,67,62,70,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,73,71,88,50,108,80,42],
[41,0,37,46,45,21,89,41,30],
[57,93,0,66,54,58,100,50,39],
[59,84,64,0,56,39,80,52,44],
[42,85,76,74,0,42,124,70,59],
[80,109,72,91,88,0,94,61,70],
[22,41,30,50,6,36,0,46,17],
[50,89,80,78,60,69,84,0,17],
[88,100,91,86,71,60,113,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,82,78,70,76,81,57,63],
[71,0,60,62,87,71,77,68,64],
[48,70,0,57,70,53,61,69,61],
[52,68,73,0,71,70,71,60,65],
[60,43,60,59,0,63,69,67,62],
[54,59,77,60,67,0,68,52,59],
[49,53,69,59,61,62,0,53,45],
[73,62,61,70,63,78,77,0,61],
[67,66,69,65,68,71,85,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,66,60,70,52,70,48,82],
[67,0,83,63,52,72,81,34,76],
[64,47,0,30,53,39,69,55,67],
[70,67,100,0,74,65,71,65,88],
[60,78,77,56,0,71,73,46,66],
[78,58,91,65,59,0,89,51,84],
[60,49,61,59,57,41,0,45,70],
[82,96,75,65,84,79,85,0,99],
[48,54,63,42,64,46,60,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,56,64,61,47,67,56,72],
[70,0,61,67,56,58,65,54,76],
[74,69,0,79,75,53,77,72,74],
[66,63,51,0,56,52,60,47,71],
[69,74,55,74,0,68,75,61,84],
[83,72,77,78,62,0,76,62,86],
[63,65,53,70,55,54,0,54,81],
[74,76,58,83,69,68,76,0,79],
[58,54,56,59,46,44,49,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,56,51,54,73,67,40,86],
[66,0,48,48,61,74,57,63,63],
[74,82,0,63,73,81,61,62,78],
[79,82,67,0,83,85,61,60,81],
[76,69,57,47,0,72,62,51,65],
[57,56,49,45,58,0,54,50,71],
[63,73,69,69,68,76,0,68,74],
[90,67,68,70,79,80,62,0,93],
[44,67,52,49,65,59,56,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,65,68,71,66,70,69,65],
[64,0,63,71,72,78,64,76,72],
[65,67,0,73,74,64,68,74,71],
[62,59,57,0,66,67,72,65,64],
[59,58,56,64,0,61,67,67,72],
[64,52,66,63,69,0,59,66,65],
[60,66,62,58,63,71,0,70,65],
[61,54,56,65,63,64,60,0,64],
[65,58,59,66,58,65,65,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,70,78,74,101,64,73,81],
[44,0,67,59,44,76,62,63,58],
[60,63,0,82,49,73,69,52,86],
[52,71,48,0,58,63,75,58,70],
[56,86,81,72,0,95,71,65,70],
[29,54,57,67,35,0,47,40,70],
[66,68,61,55,59,83,0,42,60],
[57,67,78,72,65,90,88,0,70],
[49,72,44,60,60,60,70,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,57,52,67,69,63,74],
[63,0,52,62,59,66,60,59,66],
[63,78,0,63,51,71,66,64,76],
[73,68,67,0,65,71,69,66,76],
[78,71,79,65,0,80,70,71,80],
[63,64,59,59,50,0,65,61,68],
[61,70,64,61,60,65,0,63,73],
[67,71,66,64,59,69,67,0,66],
[56,64,54,54,50,62,57,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,65,80,61,56,88,70,79],
[51,0,57,68,50,55,80,71,55],
[65,73,0,63,77,62,67,72,80],
[50,62,67,0,58,60,69,66,71],
[69,80,53,72,0,68,77,58,61],
[74,75,68,70,62,0,78,73,69],
[42,50,63,61,53,52,0,59,65],
[60,59,58,64,72,57,71,0,64],
[51,75,50,59,69,61,65,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,66,66,76,67,74,63,54],
[71,0,70,72,68,62,55,62,70],
[64,60,0,66,75,56,51,59,59],
[64,58,64,0,66,66,54,56,53],
[54,62,55,64,0,57,52,57,64],
[63,68,74,64,73,0,45,49,66],
[56,75,79,76,78,85,0,69,75],
[67,68,71,74,73,81,61,0,72],
[76,60,71,77,66,64,55,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,69,67,64,87,85,70,99],
[36,0,48,38,42,39,40,47,63],
[61,82,0,78,66,81,68,61,85],
[63,92,52,0,74,64,44,57,79],
[66,88,64,56,0,59,58,58,63],
[43,91,49,66,71,0,49,73,54],
[45,90,62,86,72,81,0,65,87],
[60,83,69,73,72,57,65,0,74],
[31,67,45,51,67,76,43,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,66,77,63,86,63,74,73],
[64,0,63,68,62,86,54,60,68],
[64,67,0,65,62,77,62,68,72],
[53,62,65,0,65,77,64,69,76],
[67,68,68,65,0,78,67,72,68],
[44,44,53,53,52,0,53,55,54],
[67,76,68,66,63,77,0,72,61],
[56,70,62,61,58,75,58,0,68],
[57,62,58,54,62,76,69,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,62,62,59,73,64,69,59],
[70,0,65,66,63,70,60,70,61],
[68,65,0,68,66,71,62,62,70],
[68,64,62,0,64,67,56,62,69],
[71,67,64,66,0,68,52,77,58],
[57,60,59,63,62,0,59,67,60],
[66,70,68,74,78,71,0,72,58],
[61,60,68,68,53,63,58,0,61],
[71,69,60,61,72,70,72,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,72,80,65,69,73,61,63],
[70,0,65,73,60,67,71,47,71],
[58,65,0,61,46,48,62,64,60],
[50,57,69,0,49,64,62,57,54],
[65,70,84,81,0,71,77,74,81],
[61,63,82,66,59,0,57,60,61],
[57,59,68,68,53,73,0,56,56],
[69,83,66,73,56,70,74,0,80],
[67,59,70,76,49,69,74,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,74,67,69,58,64,67,71],
[62,0,69,72,64,65,65,65,67],
[56,61,0,57,58,57,57,58,55],
[63,58,73,0,64,61,60,63,73],
[61,66,72,66,0,58,69,67,67],
[72,65,73,69,72,0,77,70,73],
[66,65,73,70,61,53,0,65,67],
[63,65,72,67,63,60,65,0,65],
[59,63,75,57,63,57,63,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,67,52,61,51,62,74,72],
[74,0,68,64,59,59,58,70,78],
[63,62,0,56,56,60,60,65,70],
[78,66,74,0,68,63,61,67,74],
[69,71,74,62,0,70,61,69,74],
[79,71,70,67,60,0,73,76,69],
[68,72,70,69,69,57,0,70,72],
[56,60,65,63,61,54,60,0,58],
[58,52,60,56,56,61,58,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,57,59,55,53,76,71,76],
[63,0,73,68,62,60,68,74,74],
[73,57,0,82,76,73,87,77,68],
[71,62,48,0,61,64,78,63,61],
[75,68,54,69,0,61,76,71,66],
[77,70,57,66,69,0,71,59,67],
[54,62,43,52,54,59,0,54,65],
[59,56,53,67,59,71,76,0,63],
[54,56,62,69,64,63,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,46,50,34,45,62,47,58],
[81,0,78,52,66,59,65,67,57],
[84,52,0,62,49,52,79,47,71],
[80,78,68,0,80,87,87,65,80],
[96,64,81,50,0,66,57,58,57],
[85,71,78,43,64,0,86,78,73],
[68,65,51,43,73,44,0,50,58],
[83,63,83,65,72,52,80,0,70],
[72,73,59,50,73,57,72,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,69,68,65,66,72,75,65],
[59,0,69,66,61,70,63,65,60],
[61,61,0,61,63,64,68,67,57],
[62,64,69,0,60,64,66,70,62],
[65,69,67,70,0,67,71,73,79],
[64,60,66,66,63,0,59,66,55],
[58,67,62,64,59,71,0,65,66],
[55,65,63,60,57,64,65,0,57],
[65,70,73,68,51,75,64,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,66,65,64,64,73,67],
[67,0,67,61,70,70,76,63,67],
[59,63,0,62,58,60,61,53,60],
[64,69,68,0,70,74,75,65,64],
[65,60,72,60,0,55,67,73,60],
[66,60,70,56,75,0,72,62,63],
[66,54,69,55,63,58,0,70,58],
[57,67,77,65,57,68,60,0,63],
[63,63,70,66,70,67,72,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,42,102,56,92,61,100,95],
[69,0,69,74,111,64,116,74,74],
[88,61,0,116,116,83,68,74,102],
[28,56,14,0,56,9,56,14,19],
[74,19,14,74,0,69,26,60,79],
[38,66,47,121,61,0,66,52,95],
[69,14,62,74,104,64,0,53,74],
[30,56,56,116,70,78,77,0,102],
[35,56,28,111,51,35,56,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,73,70,68,65,73,72,66],
[57,0,53,66,68,60,58,65,59],
[57,77,0,71,74,61,57,56,65],
[60,64,59,0,65,62,63,63,61],
[62,62,56,65,0,57,66,62,64],
[65,70,69,68,73,0,62,69,62],
[57,72,73,67,64,68,0,62,60],
[58,65,74,67,68,61,68,0,64],
[64,71,65,69,66,68,70,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,66,77,73,69,61,66,66],
[63,0,70,75,70,67,66,74,68],
[64,60,0,67,69,69,56,68,66],
[53,55,63,0,58,65,51,62,68],
[57,60,61,72,0,58,54,56,65],
[61,63,61,65,72,0,61,61,74],
[69,64,74,79,76,69,0,78,71],
[64,56,62,68,74,69,52,0,69],
[64,62,64,62,65,56,59,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,62,81,60,54,72,76,66],
[56,0,58,63,64,65,69,64,67],
[68,72,0,82,62,56,77,67,68],
[49,67,48,0,65,63,69,62,58],
[70,66,68,65,0,65,73,62,65],
[76,65,74,67,65,0,69,63,54],
[58,61,53,61,57,61,0,48,47],
[54,66,63,68,68,67,82,0,64],
[64,63,62,72,65,76,83,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,62,61,57,69,63,64,69],
[66,0,68,68,56,68,66,63,64],
[68,62,0,59,60,70,75,73,59],
[69,62,71,0,64,65,66,68,63],
[73,74,70,66,0,74,68,71,56],
[61,62,60,65,56,0,54,57,65],
[67,64,55,64,62,76,0,74,60],
[66,67,57,62,59,73,56,0,65],
[61,66,71,67,74,65,70,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,71,63,61,65,68,71,66],
[54,0,66,57,60,58,59,59,63],
[59,64,0,60,52,60,62,64,56],
[67,73,70,0,56,67,69,70,60],
[69,70,78,74,0,74,78,75,62],
[65,72,70,63,56,0,67,66,64],
[62,71,68,61,52,63,0,67,58],
[59,71,66,60,55,64,63,0,70],
[64,67,74,70,68,66,72,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,71,63,67,77,78,64,62],
[77,0,85,60,71,75,83,73,71],
[59,45,0,60,63,72,70,63,53],
[67,70,70,0,66,64,84,58,53],
[63,59,67,64,0,74,79,73,70],
[53,55,58,66,56,0,74,69,57],
[52,47,60,46,51,56,0,52,46],
[66,57,67,72,57,61,78,0,61],
[68,59,77,77,60,73,84,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,70,60,76,61,59,81,69],
[54,0,60,64,68,63,56,75,56],
[60,70,0,67,74,66,55,68,64],
[70,66,63,0,69,64,59,70,66],
[54,62,56,61,0,60,53,64,53],
[69,67,64,66,70,0,69,69,70],
[71,74,75,71,77,61,0,79,71],
[49,55,62,60,66,61,51,0,56],
[61,74,66,64,77,60,59,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,75,66,82,67,66,65,75],
[65,0,72,64,67,70,64,55,77],
[55,58,0,59,64,57,59,50,66],
[64,66,71,0,73,72,63,57,66],
[48,63,66,57,0,55,56,58,65],
[63,60,73,58,75,0,59,71,72],
[64,66,71,67,74,71,0,61,83],
[65,75,80,73,72,59,69,0,72],
[55,53,64,64,65,58,47,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,78,58,63,63,65,56,72],
[61,0,64,67,63,69,57,66,63],
[52,66,0,60,59,72,57,54,65],
[72,63,70,0,65,68,57,68,72],
[67,67,71,65,0,80,65,68,70],
[67,61,58,62,50,0,58,64,65],
[65,73,73,73,65,72,0,58,73],
[74,64,76,62,62,66,72,0,67],
[58,67,65,58,60,65,57,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,75,58,57,74,43,84,53],
[71,0,80,59,73,79,67,73,52],
[55,50,0,50,75,63,49,59,55],
[72,71,80,0,83,83,79,80,65],
[73,57,55,47,0,66,57,81,50],
[56,51,67,47,64,0,61,56,36],
[87,63,81,51,73,69,0,69,58],
[46,57,71,50,49,74,61,0,37],
[77,78,75,65,80,94,72,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,73,70,73,70,74,72,64],
[71,0,76,71,82,63,71,68,67],
[57,54,0,58,73,54,61,68,57],
[60,59,72,0,71,61,64,74,66],
[57,48,57,59,0,56,58,69,56],
[60,67,76,69,74,0,70,72,73],
[56,59,69,66,72,60,0,64,63],
[58,62,62,56,61,58,66,0,65],
[66,63,73,64,74,57,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,68,83,71,50,51,62,60],
[75,0,77,85,56,54,65,82,78],
[62,53,0,58,70,53,48,63,71],
[47,45,72,0,65,52,53,85,61],
[59,74,60,65,0,44,57,55,54],
[80,76,77,78,86,0,56,76,79],
[79,65,82,77,73,74,0,83,77],
[68,48,67,45,75,54,47,0,49],
[70,52,59,69,76,51,53,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,59,56,40,58,43,54,60],
[71,0,72,63,72,75,68,67,61],
[71,58,0,60,48,60,50,56,52],
[74,67,70,0,56,70,61,61,69],
[90,58,82,74,0,86,71,66,63],
[72,55,70,60,44,0,43,49,54],
[87,62,80,69,59,87,0,62,63],
[76,63,74,69,64,81,68,0,66],
[70,69,78,61,67,76,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,63,66,70,57,68,60,62],
[71,0,66,64,70,64,70,67,65],
[67,64,0,62,65,72,70,62,59],
[64,66,68,0,67,65,68,73,61],
[60,60,65,63,0,59,61,61,63],
[73,66,58,65,71,0,76,70,63],
[62,60,60,62,69,54,0,64,61],
[70,63,68,57,69,60,66,0,58],
[68,65,71,69,67,67,69,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,67,74,63,64,63,56,70],
[69,0,62,66,78,62,69,60,57],
[63,68,0,68,82,58,67,65,62],
[56,64,62,0,65,58,63,53,54],
[67,52,48,65,0,57,56,59,54],
[66,68,72,72,73,0,75,63,62],
[67,61,63,67,74,55,0,62,63],
[74,70,65,77,71,67,68,0,59],
[60,73,68,76,76,68,67,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,70,75,76,66,53,66,75],
[52,0,50,57,59,48,51,43,59],
[60,80,0,79,68,65,45,65,62],
[55,73,51,0,77,76,50,60,76],
[54,71,62,53,0,52,62,62,69],
[64,82,65,54,78,0,69,76,61],
[77,79,85,80,68,61,0,70,68],
[64,87,65,70,68,54,60,0,71],
[55,71,68,54,61,69,62,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,66,77,77,82,77,70,65],
[51,0,63,67,63,64,65,54,66],
[64,67,0,64,65,71,71,57,68],
[53,63,66,0,65,62,69,66,59],
[53,67,65,65,0,70,71,60,63],
[48,66,59,68,60,0,64,61,67],
[53,65,59,61,59,66,0,55,51],
[60,76,73,64,70,69,75,0,70],
[65,64,62,71,67,63,79,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,71,60,59,66,76,75,68],
[64,0,66,67,65,77,80,77,64],
[59,64,0,66,61,72,74,64,75],
[70,63,64,0,60,69,60,74,72],
[71,65,69,70,0,72,72,72,70],
[64,53,58,61,58,0,51,65,58],
[54,50,56,70,58,79,0,60,62],
[55,53,66,56,58,65,70,0,62],
[62,66,55,58,60,72,68,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,70,74,69,76,62,74,67],
[50,0,55,55,41,59,52,62,67],
[60,75,0,71,60,66,70,67,63],
[56,75,59,0,63,65,63,70,74],
[61,89,70,67,0,66,56,68,71],
[54,71,64,65,64,0,56,71,61],
[68,78,60,67,74,74,0,82,76],
[56,68,63,60,62,59,48,0,68],
[63,63,67,56,59,69,54,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,62,61,58,68,62,75,71],
[59,0,64,66,65,61,53,71,71],
[68,66,0,64,63,68,66,66,76],
[69,64,66,0,62,77,63,78,69],
[72,65,67,68,0,68,71,67,75],
[62,69,62,53,62,0,65,68,66],
[68,77,64,67,59,65,0,78,75],
[55,59,64,52,63,62,52,0,65],
[59,59,54,61,55,64,55,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,74,81,75,79,61,74,64],
[64,0,75,80,72,69,51,61,65],
[56,55,0,79,67,67,61,55,63],
[49,50,51,0,57,51,50,41,50],
[55,58,63,73,0,60,61,48,62],
[51,61,63,79,70,0,65,60,53],
[69,79,69,80,69,65,0,66,63],
[56,69,75,89,82,70,64,0,64],
[66,65,67,80,68,77,67,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,63,50,51,77,64,56,60],
[81,0,66,65,64,82,67,71,78],
[67,64,0,58,55,77,57,60,59],
[80,65,72,0,61,81,69,62,76],
[79,66,75,69,0,79,63,64,74],
[53,48,53,49,51,0,44,56,54],
[66,63,73,61,67,86,0,69,70],
[74,59,70,68,66,74,61,0,70],
[70,52,71,54,56,76,60,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,75,76,78,72,58,69,67],
[56,0,43,57,61,58,50,50,41],
[55,87,0,74,82,71,60,54,68],
[54,73,56,0,72,53,66,49,65],
[52,69,48,58,0,51,58,55,62],
[58,72,59,77,79,0,61,57,66],
[72,80,70,64,72,69,0,69,69],
[61,80,76,81,75,73,61,0,79],
[63,89,62,65,68,64,61,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,68,78,49,71,64,64,67],
[64,0,59,71,50,50,59,72,69],
[62,71,0,82,48,35,59,54,44],
[52,59,48,0,40,37,56,58,25],
[81,80,82,90,0,52,76,89,67],
[59,80,95,93,78,0,90,93,50],
[66,71,71,74,54,40,0,73,42],
[66,58,76,72,41,37,57,0,43],
[63,61,86,105,63,80,88,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,58,65,63,56,58,57,59],
[75,0,64,63,69,60,70,58,66],
[72,66,0,65,55,61,52,65,62],
[65,67,65,0,67,59,62,68,64],
[67,61,75,63,0,61,54,52,62],
[74,70,69,71,69,0,59,72,70],
[72,60,78,68,76,71,0,68,77],
[73,72,65,62,78,58,62,0,66],
[71,64,68,66,68,60,53,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,62,72,61,70,66,61,82],
[66,0,59,66,70,63,64,50,78],
[68,71,0,70,61,82,56,74,78],
[58,64,60,0,62,75,55,61,79],
[69,60,69,68,0,65,56,61,82],
[60,67,48,55,65,0,57,45,76],
[64,66,74,75,74,73,0,62,82],
[69,80,56,69,69,85,68,0,86],
[48,52,52,51,48,54,48,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,68,71,60,67,75,68,65],
[52,0,74,72,67,80,78,79,71],
[62,56,0,71,56,71,75,78,83],
[59,58,59,0,62,84,67,63,68],
[70,63,74,68,0,75,89,77,77],
[63,50,59,46,55,0,56,56,69],
[55,52,55,63,41,74,0,70,61],
[62,51,52,67,53,74,60,0,64],
[65,59,47,62,53,61,69,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,78,73,61,76,69,79,71],
[60,0,73,69,72,78,46,48,57],
[52,57,0,48,54,79,76,57,71],
[57,61,82,0,56,63,55,63,53],
[69,58,76,74,0,87,77,67,58],
[54,52,51,67,43,0,40,61,52],
[61,84,54,75,53,90,0,86,92],
[51,82,73,67,63,69,44,0,56],
[59,73,59,77,72,78,38,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,72,76,80,69,76,93,83],
[75,0,71,72,78,57,78,97,100],
[58,59,0,57,60,57,59,88,79],
[54,58,73,0,89,84,73,92,53],
[50,52,70,41,0,45,63,100,61],
[61,73,73,46,85,0,87,92,78],
[54,52,71,57,67,43,0,97,86],
[37,33,42,38,30,38,33,0,38],
[47,30,51,77,69,52,44,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,72,63,81,59,74,65,70],
[58,0,59,73,70,54,64,75,62],
[58,71,0,65,67,68,73,63,77],
[67,57,65,0,69,54,56,72,69],
[49,60,63,61,0,58,65,61,69],
[71,76,62,76,72,0,75,84,78],
[56,66,57,74,65,55,0,75,63],
[65,55,67,58,69,46,55,0,61],
[60,68,53,61,61,52,67,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,89,70,65,91,69,82,91],
[23,0,60,14,53,65,60,24,50],
[41,70,0,32,74,73,82,36,68],
[60,116,98,0,68,102,76,36,62],
[65,77,56,62,0,62,61,53,46],
[39,65,57,28,68,0,35,26,35],
[61,70,48,54,69,95,0,45,67],
[48,106,94,94,77,104,85,0,50],
[39,80,62,68,84,95,63,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,58,60,67,63,61,60,57],
[73,0,62,60,69,64,67,78,70],
[72,68,0,59,78,60,75,72,64],
[70,70,71,0,71,75,61,71,70],
[63,61,52,59,0,67,57,63,64],
[67,66,70,55,63,0,58,54,67],
[69,63,55,69,73,72,0,68,69],
[70,52,58,59,67,76,62,0,69],
[73,60,66,60,66,63,61,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,81,66,63,80,81,62,73],
[50,0,59,63,73,72,54,62,64],
[49,71,0,53,55,77,56,52,61],
[64,67,77,0,76,85,71,67,71],
[67,57,75,54,0,67,60,65,65],
[50,58,53,45,63,0,63,52,49],
[49,76,74,59,70,67,0,63,68],
[68,68,78,63,65,78,67,0,59],
[57,66,69,59,65,81,62,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,65,67,41,33,56,33,85],
[83,0,81,94,39,73,61,86,81],
[65,49,0,68,26,32,58,61,64],
[63,36,62,0,60,52,63,54,62],
[89,91,104,70,0,71,87,63,72],
[97,57,98,78,59,0,97,96,77],
[74,69,72,67,43,33,0,70,71],
[97,44,69,76,67,34,60,0,87],
[45,49,66,68,58,53,59,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,70,74,71,73,64,64,63],
[65,0,65,65,61,62,64,73,63],
[60,65,0,75,67,63,58,71,73],
[56,65,55,0,49,59,63,67,58],
[59,69,63,81,0,70,70,72,73],
[57,68,67,71,60,0,64,72,66],
[66,66,72,67,60,66,0,66,68],
[66,57,59,63,58,58,64,0,57],
[67,67,57,72,57,64,62,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,68,82,97,95,55,63,76],
[55,0,64,59,76,91,52,66,83],
[62,66,0,44,52,118,72,66,46],
[48,71,86,0,98,118,87,82,83],
[33,54,78,32,0,98,55,57,47],
[35,39,12,12,32,0,26,11,28],
[75,78,58,43,75,104,0,50,69],
[67,64,64,48,73,119,80,0,70],
[54,47,84,47,83,102,61,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,78,55,72,78,62,90,76],
[51,0,57,39,63,52,64,55,58],
[52,73,0,56,60,54,61,57,71],
[75,91,74,0,65,55,64,72,81],
[58,67,70,65,0,75,65,67,64],
[52,78,76,75,55,0,77,72,79],
[68,66,69,66,65,53,0,56,61],
[40,75,73,58,63,58,74,0,56],
[54,72,59,49,66,51,69,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,65,76,69,67,58,76,67],
[56,0,56,67,64,57,55,70,62],
[65,74,0,82,64,66,67,67,70],
[54,63,48,0,58,56,55,55,55],
[61,66,66,72,0,65,60,59,64],
[63,73,64,74,65,0,63,59,65],
[72,75,63,75,70,67,0,70,65],
[54,60,63,75,71,71,60,0,72],
[63,68,60,75,66,65,65,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,66,60,55,60,60,52,59],
[72,0,63,71,61,62,70,65,68],
[64,67,0,64,58,63,71,58,59],
[70,59,66,0,67,62,64,66,64],
[75,69,72,63,0,65,66,63,68],
[70,68,67,68,65,0,79,69,68],
[70,60,59,66,64,51,0,54,54],
[78,65,72,64,67,61,76,0,71],
[71,62,71,66,62,62,76,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,66,71,65,70,76,76,68],
[55,0,58,67,59,63,69,55,56],
[64,72,0,70,61,70,63,74,61],
[59,63,60,0,56,61,59,59,62],
[65,71,69,74,0,71,78,69,67],
[60,67,60,69,59,0,70,63,64],
[54,61,67,71,52,60,0,64,61],
[54,75,56,71,61,67,66,0,64],
[62,74,69,68,63,66,69,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,73,65,71,58,62,69,76],
[71,0,61,60,67,61,70,69,81],
[57,69,0,76,65,62,64,65,81],
[65,70,54,0,65,69,58,74,81],
[59,63,65,65,0,68,69,76,70],
[72,69,68,61,62,0,67,77,81],
[68,60,66,72,61,63,0,68,75],
[61,61,65,56,54,53,62,0,77],
[54,49,49,49,60,49,55,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,77,82,62,58,70,75,62],
[66,0,70,74,68,69,70,74,58],
[53,60,0,68,60,63,72,74,66],
[48,56,62,0,60,58,67,70,62],
[68,62,70,70,0,66,65,77,66],
[72,61,67,72,64,0,70,75,61],
[60,60,58,63,65,60,0,69,61],
[55,56,56,60,53,55,61,0,56],
[68,72,64,68,64,69,69,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,70,69,71,66,65,75,65],
[64,0,77,82,66,71,73,69,63],
[60,53,0,63,54,54,63,60,56],
[61,48,67,0,61,60,54,63,58],
[59,64,76,69,0,66,66,64,60],
[64,59,76,70,64,0,64,61,60],
[65,57,67,76,64,66,0,70,63],
[55,61,70,67,66,69,60,0,68],
[65,67,74,72,70,70,67,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,77,69,72,62,69,82,68],
[70,0,76,61,67,67,67,60,71],
[53,54,0,59,64,57,55,60,61],
[61,69,71,0,66,65,70,69,61],
[58,63,66,64,0,68,67,72,60],
[68,63,73,65,62,0,72,70,68],
[61,63,75,60,63,58,0,66,65],
[48,70,70,61,58,60,64,0,66],
[62,59,69,69,70,62,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,56,64,61,57,62,82,57],
[68,0,63,76,63,67,67,81,70],
[74,67,0,79,58,69,67,73,70],
[66,54,51,0,59,60,64,71,56],
[69,67,72,71,0,72,62,72,61],
[73,63,61,70,58,0,62,75,69],
[68,63,63,66,68,68,0,83,62],
[48,49,57,59,58,55,47,0,59],
[73,60,60,74,69,61,68,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,70,62,55,74,60,67,61],
[67,0,72,70,60,80,73,72,68],
[60,58,0,58,60,63,58,69,53],
[68,60,72,0,63,68,56,62,55],
[75,70,70,67,0,73,65,77,62],
[56,50,67,62,57,0,57,62,57],
[70,57,72,74,65,73,0,72,65],
[63,58,61,68,53,68,58,0,63],
[69,62,77,75,68,73,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,69,68,59,65,61,69,60],
[61,0,66,68,68,65,71,75,69],
[61,64,0,69,67,57,69,70,63],
[62,62,61,0,65,59,63,62,53],
[71,62,63,65,0,58,65,67,68],
[65,65,73,71,72,0,70,67,67],
[69,59,61,67,65,60,0,64,60],
[61,55,60,68,63,63,66,0,60],
[70,61,67,77,62,63,70,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,62,62,78,54,71,58,62],
[63,0,71,68,75,65,73,69,66],
[68,59,0,56,68,56,74,54,63],
[68,62,74,0,66,55,81,67,57],
[52,55,62,64,0,50,64,59,58],
[76,65,74,75,80,0,84,73,82],
[59,57,56,49,66,46,0,50,59],
[72,61,76,63,71,57,80,0,73],
[68,64,67,73,72,48,71,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,93,50,64,67,87,103,95],
[56,0,61,20,52,55,44,73,45],
[37,69,0,41,63,56,44,79,27],
[80,110,89,0,92,44,66,101,73],
[66,78,67,38,0,37,57,87,40],
[63,75,74,86,93,0,68,86,56],
[43,86,86,64,73,62,0,108,51],
[27,57,51,29,43,44,22,0,35],
[35,85,103,57,90,74,79,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,65,66,72,65,73,75,71],
[69,0,81,76,71,62,74,90,70],
[65,49,0,59,70,60,67,69,66],
[64,54,71,0,69,58,55,79,71],
[58,59,60,61,0,71,66,73,65],
[65,68,70,72,59,0,63,78,80],
[57,56,63,75,64,67,0,74,73],
[55,40,61,51,57,52,56,0,71],
[59,60,64,59,65,50,57,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,61,35,50,52,45,67,47],
[76,0,73,48,59,44,39,52,73],
[69,57,0,32,66,61,50,41,59],
[95,82,98,0,77,70,55,59,81],
[80,71,64,53,0,46,64,56,65],
[78,86,69,60,84,0,59,65,82],
[85,91,80,75,66,71,0,56,84],
[63,78,89,71,74,65,74,0,62],
[83,57,71,49,65,48,46,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,66,67,60,73,59,62,71],
[64,0,59,63,60,67,63,66,68],
[64,71,0,66,70,71,64,65,70],
[63,67,64,0,60,70,58,63,69],
[70,70,60,70,0,66,70,64,72],
[57,63,59,60,64,0,60,64,68],
[71,67,66,72,60,70,0,66,70],
[68,64,65,67,66,66,64,0,71],
[59,62,60,61,58,62,60,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,63,72,68,74,73,69],
[62,0,50,60,71,51,64,62,64],
[60,80,0,62,66,57,65,67,66],
[67,70,68,0,74,69,72,58,62],
[58,59,64,56,0,62,66,68,65],
[62,79,73,61,68,0,65,65,69],
[56,66,65,58,64,65,0,63,66],
[57,68,63,72,62,65,67,0,59],
[61,66,64,68,65,61,64,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,75,60,73,69,64,65,66],
[64,0,64,65,74,76,65,68,67],
[55,66,0,56,68,63,50,59,57],
[70,65,74,0,75,80,58,73,74],
[57,56,62,55,0,75,60,56,63],
[61,54,67,50,55,0,46,56,68],
[66,65,80,72,70,84,0,64,70],
[65,62,71,57,74,74,66,0,67],
[64,63,73,56,67,62,60,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,61,58,54,60,68,66,59],
[66,0,55,60,56,61,64,67,59],
[69,75,0,64,65,61,74,67,67],
[72,70,66,0,62,61,74,70,65],
[76,74,65,68,0,71,72,75,68],
[70,69,69,69,59,0,67,65,66],
[62,66,56,56,58,63,0,61,55],
[64,63,63,60,55,65,69,0,61],
[71,71,63,65,62,64,75,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,64,67,60,58,61,67,69],
[60,0,66,60,63,69,70,65,71],
[66,64,0,65,58,63,78,72,61],
[63,70,65,0,67,68,68,66,77],
[70,67,72,63,0,65,74,65,69],
[72,61,67,62,65,0,79,72,70],
[69,60,52,62,56,51,0,56,69],
[63,65,58,64,65,58,74,0,66],
[61,59,69,53,61,60,61,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,60,57,63,59,63,53,61],
[61,0,67,60,64,66,64,60,66],
[70,63,0,65,67,64,67,62,68],
[73,70,65,0,74,61,70,68,65],
[67,66,63,56,0,60,66,58,62],
[71,64,66,69,70,0,68,72,72],
[67,66,63,60,64,62,0,60,62],
[77,70,68,62,72,58,70,0,67],
[69,64,62,65,68,58,68,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,59,63,62,63,68,60,60],
[63,0,58,65,67,64,71,57,72],
[71,72,0,74,69,68,67,57,68],
[67,65,56,0,61,75,65,56,71],
[68,63,61,69,0,68,72,60,67],
[67,66,62,55,62,0,63,65,65],
[62,59,63,65,58,67,0,55,67],
[70,73,73,74,70,65,75,0,78],
[70,58,62,59,63,65,63,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,71,61,65,67,63,62,67],
[68,0,76,63,79,79,71,64,77],
[59,54,0,55,60,63,55,58,62],
[69,67,75,0,82,70,64,64,79],
[65,51,70,48,0,68,60,55,62],
[63,51,67,60,62,0,61,58,59],
[67,59,75,66,70,69,0,70,68],
[68,66,72,66,75,72,60,0,69],
[63,53,68,51,68,71,62,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,63,64,66,72,72,67,66],
[69,0,64,53,62,77,71,70,65],
[67,66,0,56,60,76,59,72,68],
[66,77,74,0,75,76,64,83,66],
[64,68,70,55,0,79,66,69,67],
[58,53,54,54,51,0,62,66,58],
[58,59,71,66,64,68,0,74,66],
[63,60,58,47,61,64,56,0,53],
[64,65,62,64,63,72,64,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,66,58,58,57,56,57,60],
[78,0,57,64,61,64,62,61,66],
[64,73,0,69,78,82,76,68,71],
[72,66,61,0,71,60,60,69,65],
[72,69,52,59,0,61,70,69,64],
[73,66,48,70,69,0,57,66,64],
[74,68,54,70,60,73,0,64,59],
[73,69,62,61,61,64,66,0,63],
[70,64,59,65,66,66,71,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,62,59,64,73,70,77,66],
[60,0,59,63,54,57,66,55,56],
[68,71,0,62,77,67,70,72,64],
[71,67,68,0,66,71,65,71,65],
[66,76,53,64,0,81,70,66,60],
[57,73,63,59,49,0,65,63,43],
[60,64,60,65,60,65,0,59,60],
[53,75,58,59,64,67,71,0,60],
[64,74,66,65,70,87,70,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,62,58,62,55,70,65,66],
[60,0,53,62,56,60,68,64,68],
[68,77,0,61,55,61,65,62,74],
[72,68,69,0,65,60,69,68,67],
[68,74,75,65,0,63,77,72,77],
[75,70,69,70,67,0,71,62,71],
[60,62,65,61,53,59,0,52,61],
[65,66,68,62,58,68,78,0,77],
[64,62,56,63,53,59,69,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,98,64,89,91,95,112,77],
[66,0,66,80,39,103,89,107,66],
[32,64,0,37,53,37,95,85,91],
[66,50,93,0,66,130,116,107,95],
[41,91,77,64,0,91,77,112,91],
[39,27,93,0,39,0,95,89,72],
[35,41,35,14,53,35,0,62,68],
[18,23,45,23,18,41,68,0,68],
[53,64,39,35,39,58,62,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,63,66,52,55,59,54,70],
[67,0,74,66,63,67,60,53,70],
[67,56,0,63,58,64,56,53,65],
[64,64,67,0,63,61,58,53,71],
[78,67,72,67,0,64,61,66,67],
[75,63,66,69,66,0,64,66,75],
[71,70,74,72,69,66,0,65,66],
[76,77,77,77,64,64,65,0,70],
[60,60,65,59,63,55,64,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,64,66,60,73,67,63],
[66,0,63,57,63,55,67,63,57],
[64,67,0,62,63,61,71,70,65],
[66,73,68,0,67,58,77,76,68],
[64,67,67,63,0,62,68,65,60],
[70,75,69,72,68,0,69,66,65],
[57,63,59,53,62,61,0,68,61],
[63,67,60,54,65,64,62,0,56],
[67,73,65,62,70,65,69,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,86,63,66,70,71,69],
[62,0,63,81,66,53,67,66,66],
[66,67,0,73,70,63,61,69,66],
[44,49,57,0,61,44,56,59,50],
[67,64,60,69,0,61,68,66,65],
[64,77,67,86,69,0,64,76,80],
[60,63,69,74,62,66,0,72,71],
[59,64,61,71,64,54,58,0,65],
[61,64,64,80,65,50,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,58,64,61,57,59,56,65],
[73,0,69,73,65,65,70,63,83],
[72,61,0,74,68,67,68,72,70],
[66,57,56,0,65,56,56,68,67],
[69,65,62,65,0,58,54,65,65],
[73,65,63,74,72,0,66,67,76],
[71,60,62,74,76,64,0,67,71],
[74,67,58,62,65,63,63,0,66],
[65,47,60,63,65,54,59,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,89,74,54,80,59,77,97],
[59,0,42,80,75,66,57,54,83],
[41,88,0,83,92,61,68,61,77],
[56,50,47,0,58,61,56,46,84],
[76,55,38,72,0,52,55,62,87],
[50,64,69,69,78,0,78,67,92],
[71,73,62,74,75,52,0,75,83],
[53,76,69,84,68,63,55,0,53],
[33,47,53,46,43,38,47,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,68,65,74,74,69,76,63],
[62,0,60,61,67,66,65,75,63],
[62,70,0,62,70,67,64,78,67],
[65,69,68,0,75,68,60,69,66],
[56,63,60,55,0,66,61,65,59],
[56,64,63,62,64,0,65,65,62],
[61,65,66,70,69,65,0,66,60],
[54,55,52,61,65,65,64,0,56],
[67,67,63,64,71,68,70,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,44,67,43,71,71,58,37],
[57,0,43,61,52,78,58,61,53],
[86,87,0,87,66,93,69,80,61],
[63,69,43,0,50,76,60,53,38],
[87,78,64,80,0,84,71,80,63],
[59,52,37,54,46,0,53,71,35],
[59,72,61,70,59,77,0,73,73],
[72,69,50,77,50,59,57,0,53],
[93,77,69,92,67,95,57,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,73,77,66,65,66,83,62],
[66,0,66,69,66,70,51,77,64],
[57,64,0,64,60,57,59,67,63],
[53,61,66,0,69,63,57,75,60],
[64,64,70,61,0,78,60,86,55],
[65,60,73,67,52,0,52,77,64],
[64,79,71,73,70,78,0,79,76],
[47,53,63,55,44,53,51,0,55],
[68,66,67,70,75,66,54,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,69,67,76,79,71,80,74],
[65,0,76,70,76,76,68,68,69],
[61,54,0,68,72,79,68,71,64],
[63,60,62,0,75,76,62,59,66],
[54,54,58,55,0,70,58,61,60],
[51,54,51,54,60,0,51,65,63],
[59,62,62,68,72,79,0,71,69],
[50,62,59,71,69,65,59,0,64],
[56,61,66,64,70,67,61,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,37,54,34,57,55,43,56],
[90,0,87,74,64,74,60,62,56],
[93,43,0,65,70,69,63,57,55],
[76,56,65,0,56,62,59,61,53],
[96,66,60,74,0,76,70,56,74],
[73,56,61,68,54,0,51,53,66],
[75,70,67,71,60,79,0,74,57],
[87,68,73,69,74,77,56,0,63],
[74,74,75,77,56,64,73,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,57,54,68,64,64,57,63],
[73,0,77,64,71,63,57,69,69],
[73,53,0,74,78,76,68,68,67],
[76,66,56,0,71,69,52,59,72],
[62,59,52,59,0,65,55,50,61],
[66,67,54,61,65,0,58,62,67],
[66,73,62,78,75,72,0,71,71],
[73,61,62,71,80,68,59,0,74],
[67,61,63,58,69,63,59,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,71,61,62,64,68,59,66],
[59,0,72,57,62,57,65,63,64],
[59,58,0,58,69,59,70,52,59],
[69,73,72,0,76,64,68,65,65],
[68,68,61,54,0,65,61,58,54],
[66,73,71,66,65,0,65,63,66],
[62,65,60,62,69,65,0,53,61],
[71,67,78,65,72,67,77,0,67],
[64,66,71,65,76,64,69,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,68,68,68,71,74,68,64],
[62,0,72,66,62,73,71,69,67],
[62,58,0,63,66,62,68,63,59],
[62,64,67,0,60,61,69,66,58],
[62,68,64,70,0,66,65,64,65],
[59,57,68,69,64,0,68,56,67],
[56,59,62,61,65,62,0,65,59],
[62,61,67,64,66,74,65,0,65],
[66,63,71,72,65,63,71,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,65,60,60,56,66,67,69],
[67,0,63,66,66,65,64,66,68],
[65,67,0,69,68,66,67,69,68],
[70,64,61,0,63,68,66,63,65],
[70,64,62,67,0,67,59,62,65],
[74,65,64,62,63,0,69,64,67],
[64,66,63,64,71,61,0,65,63],
[63,64,61,67,68,66,65,0,63],
[61,62,62,65,65,63,67,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,86,70,67,80,60,59,67],
[57,0,80,50,48,60,51,49,55],
[44,50,0,48,50,62,46,40,54],
[60,80,82,0,62,70,62,50,50],
[63,82,80,68,0,88,77,47,49],
[50,70,68,60,42,0,59,65,27],
[70,79,84,68,53,71,0,48,47],
[71,81,90,80,83,65,82,0,72],
[63,75,76,80,81,103,83,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,65,67,66,72,71,66,57],
[73,0,65,67,83,65,80,56,58],
[65,65,0,73,69,64,74,59,65],
[63,63,57,0,64,70,80,54,56],
[64,47,61,66,0,72,69,52,63],
[58,65,66,60,58,0,73,56,63],
[59,50,56,50,61,57,0,62,52],
[64,74,71,76,78,74,68,0,66],
[73,72,65,74,67,67,78,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,66,64,64,68,74,84],
[66,0,66,61,64,55,69,69,74],
[62,64,0,66,67,60,64,67,69],
[64,69,64,0,65,64,65,69,65],
[66,66,63,65,0,69,70,67,73],
[66,75,70,66,61,0,67,72,70],
[62,61,66,65,60,63,0,61,68],
[56,61,63,61,63,58,69,0,73],
[46,56,61,65,57,60,62,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,72,55,59,51,57,68,53],
[69,0,95,73,78,66,61,71,59],
[58,35,0,54,67,36,44,72,48],
[75,57,76,0,60,61,63,60,62],
[71,52,63,70,0,29,58,65,50],
[79,64,94,69,101,0,70,85,68],
[73,69,86,67,72,60,0,69,52],
[62,59,58,70,65,45,61,0,49],
[77,71,82,68,80,62,78,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,76,64,82,70,63,65,70],
[75,0,91,46,84,71,66,65,65],
[54,39,0,52,41,55,52,39,41],
[66,84,78,0,78,85,86,61,68],
[48,46,89,52,0,61,72,57,57],
[60,59,75,45,69,0,67,58,59],
[67,64,78,44,58,63,0,44,72],
[65,65,91,69,73,72,86,0,72],
[60,65,89,62,73,71,58,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,50,59,56,64,59,60,64],
[68,0,63,73,61,74,65,69,74],
[80,67,0,67,70,78,63,76,77],
[71,57,63,0,70,61,57,57,65],
[74,69,60,60,0,73,58,64,68],
[66,56,52,69,57,0,50,61,59],
[71,65,67,73,72,80,0,69,83],
[70,61,54,73,66,69,61,0,56],
[66,56,53,65,62,71,47,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,66,79,74,63,59,64,60],
[73,0,68,72,59,50,65,61,75],
[64,62,0,72,79,73,76,66,77],
[51,58,58,0,68,58,70,59,73],
[56,71,51,62,0,57,65,64,61],
[67,80,57,72,73,0,84,74,60],
[71,65,54,60,65,46,0,61,78],
[66,69,64,71,66,56,69,0,65],
[70,55,53,57,69,70,52,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,74,67,73,81,80,54,76],
[70,0,71,60,59,69,72,57,71],
[56,59,0,57,66,72,67,74,66],
[63,70,73,0,68,71,71,54,69],
[57,71,64,62,0,67,75,50,70],
[49,61,58,59,63,0,69,50,59],
[50,58,63,59,55,61,0,55,76],
[76,73,56,76,80,80,75,0,87],
[54,59,64,61,60,71,54,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,56,71,65,48,53,63,66],
[78,0,67,65,81,71,78,61,88],
[74,63,0,69,76,66,95,69,73],
[59,65,61,0,68,59,73,73,66],
[65,49,54,62,0,69,68,59,54],
[82,59,64,71,61,0,70,59,68],
[77,52,35,57,62,60,0,65,73],
[67,69,61,57,71,71,65,0,67],
[64,42,57,64,76,62,57,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,71,68,63,66,61,79,78],
[66,0,71,69,63,59,52,69,71],
[59,59,0,59,57,52,62,66,63],
[62,61,71,0,69,61,55,67,73],
[67,67,73,61,0,66,64,72,69],
[64,71,78,69,64,0,67,70,79],
[69,78,68,75,66,63,0,75,77],
[51,61,64,63,58,60,55,0,65],
[52,59,67,57,61,51,53,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,89,80,79,69,56,65,70],
[66,0,73,74,68,84,75,61,79],
[41,57,0,65,70,48,32,50,64],
[50,56,65,0,76,67,60,47,62],
[51,62,60,54,0,60,33,56,59],
[61,46,82,63,70,0,16,47,63],
[74,55,98,70,97,114,0,75,94],
[65,69,80,83,74,83,55,0,76],
[60,51,66,68,71,67,36,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,60,60,72,69,62,63,69],
[45,0,30,28,55,62,47,25,37],
[70,100,0,62,64,66,81,68,56],
[70,102,68,0,82,70,83,66,64],
[58,75,66,48,0,63,58,51,79],
[61,68,64,60,67,0,68,72,59],
[68,83,49,47,72,62,0,59,67],
[67,105,62,64,79,58,71,0,61],
[61,93,74,66,51,71,63,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,82,52,83,65,90,89,57],
[54,0,72,71,85,77,82,65,73],
[48,58,0,65,68,74,57,86,63],
[78,59,65,0,68,77,86,67,61],
[47,45,62,62,0,44,70,76,43],
[65,53,56,53,86,0,71,50,75],
[40,48,73,44,60,59,0,50,48],
[41,65,44,63,54,80,80,0,65],
[73,57,67,69,87,55,82,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,66,64,65,57,70,80,64],
[62,0,65,65,56,59,69,66,57],
[64,65,0,63,67,68,64,69,61],
[66,65,67,0,58,57,63,73,66],
[65,74,63,72,0,65,72,75,60],
[73,71,62,73,65,0,67,70,71],
[60,61,66,67,58,63,0,67,59],
[50,64,61,57,55,60,63,0,67],
[66,73,69,64,70,59,71,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,67,68,58,71,72,70,72],
[64,0,68,66,65,71,76,70,80],
[63,62,0,70,60,58,66,69,69],
[62,64,60,0,53,61,74,72,68],
[72,65,70,77,0,67,75,73,76],
[59,59,72,69,63,0,74,77,67],
[58,54,64,56,55,56,0,66,66],
[60,60,61,58,57,53,64,0,67],
[58,50,61,62,54,63,64,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,51,77,59,75,64,60,68],
[50,0,55,60,45,56,49,56,52],
[79,75,0,70,65,79,63,72,59],
[53,70,60,0,50,63,49,52,60],
[71,85,65,80,0,78,65,66,75],
[55,74,51,67,52,0,51,44,53],
[66,81,67,81,65,79,0,72,63],
[70,74,58,78,64,86,58,0,71],
[62,78,71,70,55,77,67,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,72,66,71,62,70,59,71],
[73,0,75,71,82,60,74,75,70],
[58,55,0,65,67,59,62,63,57],
[64,59,65,0,72,65,68,67,67],
[59,48,63,58,0,58,59,56,62],
[68,70,71,65,72,0,67,67,71],
[60,56,68,62,71,63,0,54,54],
[71,55,67,63,74,63,76,0,59],
[59,60,73,63,68,59,76,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,61,64,62,61,66,61,68],
[66,0,51,62,50,65,65,59,56],
[69,79,0,70,62,67,72,57,68],
[66,68,60,0,60,63,73,55,66],
[68,80,68,70,0,68,72,65,63],
[69,65,63,67,62,0,67,61,63],
[64,65,58,57,58,63,0,63,54],
[69,71,73,75,65,69,67,0,65],
[62,74,62,64,67,67,76,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,57,59,52,60,62,60],
[63,0,60,58,67,56,59,59,62],
[66,70,0,62,73,57,63,55,64],
[73,72,68,0,70,65,64,68,66],
[71,63,57,60,0,54,53,59,64],
[78,74,73,65,76,0,73,75,74],
[70,71,67,66,77,57,0,69,69],
[68,71,75,62,71,55,61,0,69],
[70,68,66,64,66,56,61,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,74,70,68,63,75,77],
[60,0,63,75,65,68,57,76,78],
[65,67,0,71,71,60,60,74,75],
[56,55,59,0,60,63,58,71,70],
[60,65,59,70,0,59,64,71,75],
[62,62,70,67,71,0,66,67,76],
[67,73,70,72,66,64,0,74,73],
[55,54,56,59,59,63,56,0,64],
[53,52,55,60,55,54,57,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,60,48,58,53,45,62,59],
[70,0,57,62,72,68,56,65,61],
[70,73,0,54,56,55,58,61,57],
[82,68,76,0,76,72,57,74,56],
[72,58,74,54,0,69,67,73,71],
[77,62,75,58,61,0,55,69,59],
[85,74,72,73,63,75,0,76,68],
[68,65,69,56,57,61,54,0,56],
[71,69,73,74,59,71,62,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,76,78,59,59,65,62,64],
[54,0,76,80,55,62,62,55,51],
[54,54,0,80,54,49,59,57,47],
[52,50,50,0,39,43,57,44,58],
[71,75,76,91,0,72,78,87,51],
[71,68,81,87,58,0,82,64,65],
[65,68,71,73,52,48,0,65,51],
[68,75,73,86,43,66,65,0,55],
[66,79,83,72,79,65,79,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,63,80,71,60,88,63,71],
[74,0,78,82,67,62,100,71,92],
[67,52,0,69,49,58,82,60,62],
[50,48,61,0,39,40,69,48,61],
[59,63,81,91,0,74,99,58,67],
[70,68,72,90,56,0,91,78,80],
[42,30,48,61,31,39,0,50,69],
[67,59,70,82,72,52,80,0,70],
[59,38,68,69,63,50,61,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,67,75,71,61,69,62,75],
[61,0,77,77,74,67,66,59,79],
[63,53,0,73,68,65,59,64,74],
[55,53,57,0,69,54,64,62,78],
[59,56,62,61,0,59,58,58,68],
[69,63,65,76,71,0,61,60,74],
[61,64,71,66,72,69,0,65,79],
[68,71,66,68,72,70,65,0,82],
[55,51,56,52,62,56,51,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,51,66,59,86,68,55,68],
[76,0,57,73,55,90,78,50,69],
[79,73,0,63,62,75,84,76,67],
[64,57,67,0,70,82,72,62,73],
[71,75,68,60,0,85,79,70,77],
[44,40,55,48,45,0,54,50,49],
[62,52,46,58,51,76,0,49,68],
[75,80,54,68,60,80,81,0,65],
[62,61,63,57,53,81,62,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,58,70,75,63,75,67,75],
[66,0,65,71,72,64,65,70,73],
[72,65,0,64,73,67,64,66,80],
[60,59,66,0,63,62,67,70,73],
[55,58,57,67,0,55,65,74,68],
[67,66,63,68,75,0,67,75,80],
[55,65,66,63,65,63,0,71,77],
[63,60,64,60,56,55,59,0,69],
[55,57,50,57,62,50,53,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,68,67,65,64,81,70],
[63,0,65,68,61,60,63,71,66],
[61,65,0,73,58,63,63,63,63],
[62,62,57,0,62,59,64,64,59],
[63,69,72,68,0,71,70,75,72],
[65,70,67,71,59,0,60,76,64],
[66,67,67,66,60,70,0,72,68],
[49,59,67,66,55,54,58,0,64],
[60,64,67,71,58,66,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,48,31,72,41,48,48,42],
[82,0,74,49,48,82,31,91,18],
[82,56,0,31,41,39,66,66,56],
[99,81,99,0,41,81,106,109,81],
[58,82,89,89,0,82,82,106,82],
[89,48,91,49,48,0,48,66,48],
[82,99,64,24,48,82,0,115,50],
[82,39,64,21,24,64,15,0,15],
[88,112,74,49,48,82,80,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,74,67,65,70,70,75,70],
[60,0,69,78,60,72,64,77,66],
[56,61,0,65,66,66,62,70,81],
[63,52,65,0,64,56,58,67,71],
[65,70,64,66,0,61,72,70,68],
[60,58,64,74,69,0,69,74,73],
[60,66,68,72,58,61,0,69,59],
[55,53,60,63,60,56,61,0,59],
[60,64,49,59,62,57,71,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,57,63,57,60,58,68,58],
[62,0,63,70,67,71,62,71,64],
[73,67,0,70,71,64,71,77,67],
[67,60,60,0,62,58,67,69,55],
[73,63,59,68,0,72,65,72,64],
[70,59,66,72,58,0,70,74,59],
[72,68,59,63,65,60,0,69,60],
[62,59,53,61,58,56,61,0,59],
[72,66,63,75,66,71,70,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,63,68,68,70,70,81,72],
[63,0,69,61,73,76,65,72,73],
[67,61,0,66,77,62,73,68,78],
[62,69,64,0,68,71,72,76,66],
[62,57,53,62,0,59,67,69,69],
[60,54,68,59,71,0,71,62,70],
[60,65,57,58,63,59,0,67,65],
[49,58,62,54,61,68,63,0,67],
[58,57,52,64,61,60,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,69,70,66,64,67,60],
[63,0,63,65,55,68,63,60,59],
[62,67,0,63,59,67,65,65,58],
[61,65,67,0,53,61,56,54,63],
[60,75,71,77,0,65,70,61,69],
[64,62,63,69,65,0,66,61,64],
[66,67,65,74,60,64,0,67,62],
[63,70,65,76,69,69,63,0,59],
[70,71,72,67,61,66,68,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,61,55,57,59,56,69,57],
[64,0,64,59,63,65,64,61,63],
[69,66,0,65,75,69,62,56,62],
[75,71,65,0,72,73,80,72,69],
[73,67,55,58,0,76,61,62,62],
[71,65,61,57,54,0,63,69,69],
[74,66,68,50,69,67,0,67,59],
[61,69,74,58,68,61,63,0,65],
[73,67,68,61,68,61,71,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,55,65,63,46,43,64,60],
[71,0,69,53,69,90,72,56,69],
[75,61,0,62,67,55,59,56,61],
[65,77,68,0,55,83,56,43,60],
[67,61,63,75,0,73,65,66,63],
[84,40,75,47,57,0,65,51,57],
[87,58,71,74,65,65,0,63,70],
[66,74,74,87,64,79,67,0,63],
[70,61,69,70,67,73,60,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,70,62,69,61,71,68,74],
[59,0,64,59,67,56,67,65,65],
[60,66,0,57,68,52,57,62,64],
[68,71,73,0,71,65,70,68,76],
[61,63,62,59,0,54,68,64,61],
[69,74,78,65,76,0,68,72,66],
[59,63,73,60,62,62,0,64,63],
[62,65,68,62,66,58,66,0,70],
[56,65,66,54,69,64,67,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,52,66,74,70,66,74,77],
[70,0,66,74,76,86,70,63,61],
[78,64,0,75,75,81,64,72,62],
[64,56,55,0,73,75,66,65,60],
[56,54,55,57,0,69,64,63,74],
[60,44,49,55,61,0,53,57,72],
[64,60,66,64,66,77,0,64,71],
[56,67,58,65,67,73,66,0,74],
[53,69,68,70,56,58,59,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,57,61,68,61,64,64,63],
[75,0,69,63,73,66,69,76,69],
[73,61,0,67,74,64,66,74,69],
[69,67,63,0,75,58,67,71,70],
[62,57,56,55,0,60,56,65,57],
[69,64,66,72,70,0,64,69,68],
[66,61,64,63,74,66,0,71,63],
[66,54,56,59,65,61,59,0,52],
[67,61,61,60,73,62,67,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,46,64,50,64,70,61,62],
[70,0,58,79,58,58,76,63,66],
[84,72,0,82,66,76,63,73,65],
[66,51,48,0,56,59,51,55,43],
[80,72,64,74,0,63,78,73,64],
[66,72,54,71,67,0,70,71,61],
[60,54,67,79,52,60,0,70,51],
[69,67,57,75,57,59,60,0,67],
[68,64,65,87,66,69,79,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,57,55,74,60,68,61,61],
[64,0,66,53,82,61,64,51,74],
[73,64,0,60,85,71,81,54,58],
[75,77,70,0,81,62,71,70,63],
[56,48,45,49,0,70,60,42,48],
[70,69,59,68,60,0,65,65,54],
[62,66,49,59,70,65,0,57,80],
[69,79,76,60,88,65,73,0,72],
[69,56,72,67,82,76,50,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,66,70,65,56,65,68,68],
[61,0,62,71,60,61,63,74,63],
[64,68,0,73,59,59,64,62,59],
[60,59,57,0,54,52,61,59,54],
[65,70,71,76,0,69,63,76,73],
[74,69,71,78,61,0,71,73,70],
[65,67,66,69,67,59,0,69,62],
[62,56,68,71,54,57,61,0,65],
[62,67,71,76,57,60,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,56,46,75,77,64,61,58],
[46,0,63,55,59,70,46,60,78],
[74,67,0,70,69,73,51,57,66],
[84,75,60,0,72,86,64,68,53],
[55,71,61,58,0,80,69,42,40],
[53,60,57,44,50,0,42,36,64],
[66,84,79,66,61,88,0,77,71],
[69,70,73,62,88,94,53,0,67],
[72,52,64,77,90,66,59,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,57,79,53,70,41,57,62],
[73,0,47,71,50,70,59,76,84],
[73,83,0,80,62,72,76,62,78],
[51,59,50,0,60,67,42,60,61],
[77,80,68,70,0,61,68,69,69],
[60,60,58,63,69,0,61,48,63],
[89,71,54,88,62,69,0,70,75],
[73,54,68,70,61,82,60,0,72],
[68,46,52,69,61,67,55,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,49,64,66,60,56,61,74],
[67,0,65,69,64,67,72,74,65],
[81,65,0,74,67,65,71,59,73],
[66,61,56,0,64,57,63,60,66],
[64,66,63,66,0,64,66,66,66],
[70,63,65,73,66,0,74,72,71],
[74,58,59,67,64,56,0,56,68],
[69,56,71,70,64,58,74,0,68],
[56,65,57,64,64,59,62,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,58,67,77,63,72,56,65],
[62,0,57,58,68,62,58,58,60],
[72,73,0,70,81,62,70,66,64],
[63,72,60,0,75,61,64,58,67],
[53,62,49,55,0,54,58,59,62],
[67,68,68,69,76,0,71,60,61],
[58,72,60,66,72,59,0,55,61],
[74,72,64,72,71,70,75,0,54],
[65,70,66,63,68,69,69,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,69,67,46,76,64,73,67],
[57,0,67,52,67,62,67,77,56],
[61,63,0,66,62,70,60,68,64],
[63,78,64,0,66,70,63,78,78],
[84,63,68,64,0,71,68,80,62],
[54,68,60,60,59,0,50,67,63],
[66,63,70,67,62,80,0,76,79],
[57,53,62,52,50,63,54,0,62],
[63,74,66,52,68,67,51,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,58,68,68,68,80,59,53],
[59,0,56,68,53,49,87,51,48],
[72,74,0,61,74,90,85,55,64],
[62,62,69,0,58,64,75,66,48],
[62,77,56,72,0,68,85,74,68],
[62,81,40,66,62,0,80,57,59],
[50,43,45,55,45,50,0,54,38],
[71,79,75,64,56,73,76,0,69],
[77,82,66,82,62,71,92,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,59,64,60,63,61,71],
[65,0,65,59,61,67,56,60,65],
[64,65,0,55,54,67,55,50,50],
[71,71,75,0,65,67,69,64,69],
[66,69,76,65,0,69,70,68,75],
[70,63,63,63,61,0,65,57,62],
[67,74,75,61,60,65,0,63,63],
[69,70,80,66,62,73,67,0,70],
[59,65,80,61,55,68,67,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,62,60,60,58,61,59,61],
[70,0,64,64,67,62,63,64,52],
[68,66,0,71,73,59,68,55,62],
[70,66,59,0,68,65,62,63,57],
[70,63,57,62,0,58,61,51,59],
[72,68,71,65,72,0,68,65,60],
[69,67,62,68,69,62,0,68,62],
[71,66,75,67,79,65,62,0,66],
[69,78,68,73,71,70,68,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,81,93,56,83,73,57,67],
[52,0,81,72,74,58,80,44,51],
[49,49,0,75,77,26,67,59,55],
[37,58,55,0,55,24,34,25,35],
[74,56,53,75,0,50,60,54,80],
[47,72,104,106,80,0,60,85,97],
[57,50,63,96,70,70,0,63,68],
[73,86,71,105,76,45,67,0,104],
[63,79,75,95,50,33,62,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,46,36,47,65,60,57,49],
[90,0,82,72,78,74,57,75,64],
[84,48,0,61,59,62,54,69,76],
[94,58,69,0,70,58,62,79,71],
[83,52,71,60,0,63,78,78,78],
[65,56,68,72,67,0,55,58,54],
[70,73,76,68,52,75,0,68,74],
[73,55,61,51,52,72,62,0,62],
[81,66,54,59,52,76,56,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,57,76,60,42,61,42,58],
[65,0,52,48,54,51,71,64,55],
[73,78,0,86,54,65,57,63,66],
[54,82,44,0,48,58,59,50,50],
[70,76,76,82,0,67,72,60,77],
[88,79,65,72,63,0,78,68,66],
[69,59,73,71,58,52,0,40,60],
[88,66,67,80,70,62,90,0,72],
[72,75,64,80,53,64,70,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,71,73,67,84,73,60,54],
[53,0,44,53,40,73,79,64,38],
[59,86,0,57,79,73,102,85,58],
[57,77,73,0,66,67,75,98,82],
[63,90,51,64,0,84,62,70,74],
[46,57,57,63,46,0,54,70,42],
[57,51,28,55,68,76,0,40,27],
[70,66,45,32,60,60,90,0,43],
[76,92,72,48,56,88,103,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,55,70,67,67,70,74,58],
[56,0,54,57,61,57,67,67,65],
[75,76,0,69,64,74,75,81,67],
[60,73,61,0,69,72,70,72,62],
[63,69,66,61,0,58,65,70,63],
[63,73,56,58,72,0,70,71,62],
[60,63,55,60,65,60,0,68,60],
[56,63,49,58,60,59,62,0,51],
[72,65,63,68,67,68,70,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,48,91,50,96,84,70,87],
[31,0,50,44,52,66,47,70,48],
[82,80,0,70,67,68,63,101,77],
[39,86,60,0,45,62,52,66,37],
[80,78,63,85,0,74,82,95,67],
[34,64,62,68,56,0,52,78,41],
[46,83,67,78,48,78,0,86,82],
[60,60,29,64,35,52,44,0,50],
[43,82,53,93,63,89,48,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,63,61,66,69,70,63,62],
[59,0,59,67,62,65,72,67,60],
[67,71,0,64,67,60,70,65,66],
[69,63,66,0,61,60,71,55,60],
[64,68,63,69,0,65,68,56,65],
[61,65,70,70,65,0,72,59,69],
[60,58,60,59,62,58,0,58,57],
[67,63,65,75,74,71,72,0,66],
[68,70,64,70,65,61,73,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,57,69,61,66,73,72,50],
[64,0,69,71,75,82,74,72,66],
[73,61,0,60,61,75,73,76,65],
[61,59,70,0,64,78,70,71,61],
[69,55,69,66,0,68,60,74,68],
[64,48,55,52,62,0,65,65,66],
[57,56,57,60,70,65,0,64,64],
[58,58,54,59,56,65,66,0,57],
[80,64,65,69,62,64,66,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,67,66,77,68,75,57,60],
[61,0,69,76,69,60,74,60,67],
[63,61,0,72,69,55,70,68,67],
[64,54,58,0,62,62,63,59,53],
[53,61,61,68,0,60,67,51,67],
[62,70,75,68,70,0,73,63,69],
[55,56,60,67,63,57,0,57,53],
[73,70,62,71,79,67,73,0,69],
[70,63,63,77,63,61,77,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,76,73,84,64,68,75,69],
[59,0,64,65,72,68,51,66,61],
[54,66,0,72,70,54,60,62,57],
[57,65,58,0,61,57,53,76,59],
[46,58,60,69,0,57,58,62,57],
[66,62,76,73,73,0,62,70,61],
[62,79,70,77,72,68,0,76,71],
[55,64,68,54,68,60,54,0,65],
[61,69,73,71,73,69,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,91,65,86,85,90,99,84],
[58,0,76,66,83,86,103,77,49],
[39,54,0,37,32,56,53,45,46],
[65,64,93,0,74,90,85,65,67],
[44,47,98,56,0,52,82,59,59],
[45,44,74,40,78,0,59,39,53],
[40,27,77,45,48,71,0,27,58],
[31,53,85,65,71,91,103,0,76],
[46,81,84,63,71,77,72,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,69,70,86,68,70,68,65],
[73,0,81,80,88,62,61,76,75],
[61,49,0,75,69,60,48,61,66],
[60,50,55,0,74,57,61,65,63],
[44,42,61,56,0,50,51,57,62],
[62,68,70,73,80,0,67,74,59],
[60,69,82,69,79,63,0,75,64],
[62,54,69,65,73,56,55,0,70],
[65,55,64,67,68,71,66,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,58,59,69,66,71,47,56],
[75,0,73,59,78,77,77,73,71],
[72,57,0,74,74,80,79,63,65],
[71,71,56,0,73,84,81,61,66],
[61,52,56,57,0,74,63,50,61],
[64,53,50,46,56,0,57,54,58],
[59,53,51,49,67,73,0,64,51],
[83,57,67,69,80,76,66,0,54],
[74,59,65,64,69,72,79,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,73,63,62,62,69,67,55],
[61,0,62,53,59,62,65,68,52],
[57,68,0,60,53,54,62,56,52],
[67,77,70,0,61,61,70,64,59],
[68,71,77,69,0,68,71,64,61],
[68,68,76,69,62,0,69,70,69],
[61,65,68,60,59,61,0,68,60],
[63,62,74,66,66,60,62,0,64],
[75,78,78,71,69,61,70,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,48,71,70,82,59,77,59],
[66,0,72,57,80,83,68,72,65],
[82,58,0,65,74,74,79,69,49],
[59,73,65,0,83,92,57,72,57],
[60,50,56,47,0,70,61,62,49],
[48,47,56,38,60,0,56,46,54],
[71,62,51,73,69,74,0,63,54],
[53,58,61,58,68,84,67,0,45],
[71,65,81,73,81,76,76,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,65,52,59,59,61,62,72],
[66,0,80,73,68,64,70,76,82],
[65,50,0,48,58,58,57,49,58],
[78,57,82,0,74,63,67,69,77],
[71,62,72,56,0,62,60,64,65],
[71,66,72,67,68,0,68,63,77],
[69,60,73,63,70,62,0,69,61],
[68,54,81,61,66,67,61,0,74],
[58,48,72,53,65,53,69,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,37,56,42,48,36,59,54],
[72,0,46,62,62,66,53,65,57],
[93,84,0,77,70,64,82,85,78],
[74,68,53,0,62,42,55,57,71],
[88,68,60,68,0,57,49,65,100],
[82,64,66,88,73,0,46,67,72],
[94,77,48,75,81,84,0,45,89],
[71,65,45,73,65,63,85,0,79],
[76,73,52,59,30,58,41,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,66,71,67,61,67,70,68],
[64,0,70,62,63,53,66,57,51],
[64,60,0,67,69,57,56,62,69],
[59,68,63,0,57,65,65,57,74],
[63,67,61,73,0,58,61,67,65],
[69,77,73,65,72,0,69,63,60],
[63,64,74,65,69,61,0,66,66],
[60,73,68,73,63,67,64,0,74],
[62,79,61,56,65,70,64,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,71,68,62,45,59,58,53],
[77,0,72,74,61,62,59,61,60],
[59,58,0,69,62,58,61,63,63],
[62,56,61,0,58,49,58,56,57],
[68,69,68,72,0,60,56,64,58],
[85,68,72,81,70,0,70,61,70],
[71,71,69,72,74,60,0,62,59],
[72,69,67,74,66,69,68,0,64],
[77,70,67,73,72,60,71,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,69,66,61,75,69,76,71],
[64,0,62,62,68,78,72,66,70],
[61,68,0,64,71,71,64,67,72],
[64,68,66,0,74,67,71,61,72],
[69,62,59,56,0,59,61,51,57],
[55,52,59,63,71,0,62,60,64],
[61,58,66,59,69,68,0,72,67],
[54,64,63,69,79,70,58,0,71],
[59,60,58,58,73,66,63,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,55,59,59,50,59,60,46],
[70,0,68,66,71,68,65,70,58],
[75,62,0,65,64,53,64,69,56],
[71,64,65,0,61,65,60,70,54],
[71,59,66,69,0,72,65,66,52],
[80,62,77,65,58,0,63,62,66],
[71,65,66,70,65,67,0,64,58],
[70,60,61,60,64,68,66,0,62],
[84,72,74,76,78,64,72,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,82,65,65,79,87,55,74],
[70,0,69,52,65,86,82,67,69],
[48,61,0,78,60,78,77,59,66],
[65,78,52,0,58,78,84,54,65],
[65,65,70,72,0,82,80,57,74],
[51,44,52,52,48,0,57,62,59],
[43,48,53,46,50,73,0,50,56],
[75,63,71,76,73,68,80,0,75],
[56,61,64,65,56,71,74,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,61,58,60,68,49,70,68],
[66,0,63,67,67,62,61,61,60],
[69,67,0,64,67,70,60,69,77],
[72,63,66,0,72,70,62,66,62],
[70,63,63,58,0,69,59,71,64],
[62,68,60,60,61,0,45,57,61],
[81,69,70,68,71,85,0,76,65],
[60,69,61,64,59,73,54,0,60],
[62,70,53,68,66,69,65,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,79,66,64,69,73,69],
[60,0,66,82,67,65,71,63,62],
[64,64,0,71,73,63,71,67,66],
[51,48,59,0,69,44,55,50,51],
[64,63,57,61,0,50,61,67,64],
[66,65,67,86,80,0,79,77,71],
[61,59,59,75,69,51,0,66,62],
[57,67,63,80,63,53,64,0,61],
[61,68,64,79,66,59,68,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,57,60,73,68,67,64,61],
[68,0,57,63,65,71,59,72,58],
[73,73,0,60,70,70,66,66,65],
[70,67,70,0,69,64,52,59,57],
[57,65,60,61,0,69,58,70,51],
[62,59,60,66,61,0,56,62,52],
[63,71,64,78,72,74,0,70,63],
[66,58,64,71,60,68,60,0,63],
[69,72,65,73,79,78,67,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,68,73,82,76,79,46,79],
[54,0,56,54,66,48,35,39,61],
[62,74,0,60,56,52,54,44,48],
[57,76,70,0,79,65,53,50,71],
[48,64,74,51,0,63,47,65,56],
[54,82,78,65,67,0,56,65,81],
[51,95,76,77,83,74,0,60,88],
[84,91,86,80,65,65,70,0,66],
[51,69,82,59,74,49,42,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,82,62,71,62,66,72],
[65,0,66,70,61,54,67,70,64],
[64,64,0,63,72,61,69,71,47],
[48,60,67,0,68,60,53,64,50],
[68,69,58,62,0,63,60,65,61],
[59,76,69,70,67,0,69,60,54],
[68,63,61,77,70,61,0,54,55],
[64,60,59,66,65,70,76,0,66],
[58,66,83,80,69,76,75,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,53,51,37,58,58,67,27],
[80,0,31,88,52,78,46,71,78],
[77,99,0,87,68,95,65,94,62],
[79,42,43,0,38,74,38,68,56],
[93,78,62,92,0,105,57,75,68],
[72,52,35,56,25,0,41,67,21],
[72,84,65,92,73,89,0,77,61],
[63,59,36,62,55,63,53,0,45],
[103,52,68,74,62,109,69,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,82,70,68,71,72,70,65],
[61,0,79,73,77,81,68,65,61],
[48,51,0,61,61,59,57,57,51],
[60,57,69,0,73,69,74,58,66],
[62,53,69,57,0,63,60,62,60],
[59,49,71,61,67,0,62,65,66],
[58,62,73,56,70,68,0,66,70],
[60,65,73,72,68,65,64,0,68],
[65,69,79,64,70,64,60,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,58,48,70,58,68,60,52],
[70,0,58,66,69,72,63,57,55],
[72,72,0,73,69,76,59,68,58],
[82,64,57,0,74,67,71,61,59],
[60,61,61,56,0,62,60,63,70],
[72,58,54,63,68,0,82,66,56],
[62,67,71,59,70,48,0,55,67],
[70,73,62,69,67,64,75,0,50],
[78,75,72,71,60,74,63,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,79,67,70,54,70,63,67],
[56,0,67,66,66,61,65,57,68],
[51,63,0,66,59,57,56,60,66],
[63,64,64,0,61,69,72,66,64],
[60,64,71,69,0,65,68,67,72],
[76,69,73,61,65,0,77,67,71],
[60,65,74,58,62,53,0,54,67],
[67,73,70,64,63,63,76,0,67],
[63,62,64,66,58,59,63,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,75,72,60,67,72,63,65],
[56,0,69,58,51,59,54,64,60],
[55,61,0,60,57,62,57,54,64],
[58,72,70,0,51,63,63,61,66],
[70,79,73,79,0,75,65,66,71],
[63,71,68,67,55,0,67,60,64],
[58,76,73,67,65,63,0,66,63],
[67,66,76,69,64,70,64,0,69],
[65,70,66,64,59,66,67,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,49,58,57,61,83,44,56],
[72,0,63,65,58,69,65,67,68],
[81,67,0,85,64,71,87,57,73],
[72,65,45,0,49,62,59,47,56],
[73,72,66,81,0,62,84,73,71],
[69,61,59,68,68,0,68,61,79],
[47,65,43,71,46,62,0,50,53],
[86,63,73,83,57,69,80,0,76],
[74,62,57,74,59,51,77,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,20,39,36,21,37,25,25],
[79,0,49,58,43,30,43,61,44],
[110,81,0,98,83,75,92,82,62],
[91,72,32,0,58,46,60,44,43],
[94,87,47,72,0,42,55,60,58],
[109,100,55,84,88,0,92,51,66],
[93,87,38,70,75,38,0,54,64],
[105,69,48,86,70,79,76,0,68],
[105,86,68,87,72,64,66,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,61,51,72,60,65,76,63],
[60,0,59,55,66,63,63,58,68],
[69,71,0,64,79,62,73,77,79],
[79,75,66,0,86,74,73,72,63],
[58,64,51,44,0,52,45,60,64],
[70,67,68,56,78,0,54,69,67],
[65,67,57,57,85,76,0,61,76],
[54,72,53,58,70,61,69,0,66],
[67,62,51,67,66,63,54,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,68,68,69,61,63,64,65],
[65,0,62,64,66,64,62,66,66],
[62,68,0,64,71,64,59,62,66],
[62,66,66,0,64,63,66,60,60],
[61,64,59,66,0,58,59,60,63],
[69,66,66,67,72,0,65,61,64],
[67,68,71,64,71,65,0,70,68],
[66,64,68,70,70,69,60,0,70],
[65,64,64,70,67,66,62,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,50,59,71,63,69,62,43],
[56,0,52,46,60,68,76,70,62],
[80,78,0,66,69,65,77,72,69],
[71,84,64,0,68,71,77,78,65],
[59,70,61,62,0,60,78,67,65],
[67,62,65,59,70,0,72,74,81],
[61,54,53,53,52,58,0,66,59],
[68,60,58,52,63,56,64,0,56],
[87,68,61,65,65,49,71,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,75,83,71,104,52,75,96],
[63,0,73,89,48,85,66,77,72],
[55,57,0,67,54,73,44,56,72],
[47,41,63,0,63,77,34,51,72],
[59,82,76,67,0,90,63,78,74],
[26,45,57,53,40,0,38,69,48],
[78,64,86,96,67,92,0,74,84],
[55,53,74,79,52,61,56,0,63],
[34,58,58,58,56,82,46,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,62,61,65,71,69,75],
[62,0,65,66,60,58,58,50,71],
[66,65,0,66,63,66,60,67,76],
[68,64,64,0,72,60,64,58,61],
[69,70,67,58,0,61,64,68,75],
[65,72,64,70,69,0,69,70,71],
[59,72,70,66,66,61,0,72,79],
[61,80,63,72,62,60,58,0,60],
[55,59,54,69,55,59,51,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,58,49,55,61,57,60,64],
[76,0,68,67,61,70,65,67,74],
[72,62,0,56,59,64,59,63,65],
[81,63,74,0,66,72,66,63,72],
[75,69,71,64,0,69,67,60,68],
[69,60,66,58,61,0,65,60,64],
[73,65,71,64,63,65,0,63,66],
[70,63,67,67,70,70,67,0,66],
[66,56,65,58,62,66,64,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,44,52,68,61,41,68],
[60,0,58,36,37,71,65,46,62],
[65,72,0,65,66,81,71,63,79],
[86,94,65,0,55,86,83,70,95],
[78,93,64,75,0,76,75,54,78],
[62,59,49,44,54,0,54,50,53],
[69,65,59,47,55,76,0,57,70],
[89,84,67,60,76,80,73,0,85],
[62,68,51,35,52,77,60,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,65,71,59,61,65,62,69],
[70,0,64,61,59,60,55,69,59],
[65,66,0,70,64,66,59,68,60],
[59,69,60,0,49,61,59,65,66],
[71,71,66,81,0,63,68,71,74],
[69,70,64,69,67,0,64,66,62],
[65,75,71,71,62,66,0,78,71],
[68,61,62,65,59,64,52,0,60],
[61,71,70,64,56,68,59,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,59,59,61,69,65,60,65],
[76,0,58,62,78,75,61,75,65],
[71,72,0,69,67,67,61,68,71],
[71,68,61,0,76,72,73,76,71],
[69,52,63,54,0,66,65,73,62],
[61,55,63,58,64,0,63,63,59],
[65,69,69,57,65,67,0,70,67],
[70,55,62,54,57,67,60,0,69],
[65,65,59,59,68,71,63,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,65,69,55,57,67,63],
[71,0,66,67,70,63,66,67,71],
[65,64,0,57,74,62,72,60,67],
[65,63,73,0,69,64,64,62,60],
[61,60,56,61,0,50,69,57,62],
[75,67,68,66,80,0,62,64,75],
[73,64,58,66,61,68,0,63,65],
[63,63,70,68,73,66,67,0,72],
[67,59,63,70,68,55,65,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,86,55,85,62,70,80,80],
[59,0,48,33,70,51,54,80,38],
[44,82,0,42,70,65,58,84,62],
[75,97,88,0,93,65,65,78,67],
[45,60,60,37,0,72,40,54,50],
[68,79,65,65,58,0,57,83,42],
[60,76,72,65,90,73,0,63,72],
[50,50,46,52,76,47,67,0,49],
[50,92,68,63,80,88,58,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,73,75,64,73,69,70,67],
[63,0,71,69,68,74,60,64,56],
[57,59,0,64,54,66,57,60,57],
[55,61,66,0,67,65,53,57,64],
[66,62,76,63,0,73,59,68,60],
[57,56,64,65,57,0,52,68,54],
[61,70,73,77,71,78,0,72,59],
[60,66,70,73,62,62,58,0,65],
[63,74,73,66,70,76,71,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,64,47,83,57,53,70,54],
[72,0,83,65,82,69,74,88,62],
[66,47,0,56,81,43,66,62,78],
[83,65,74,0,81,65,79,97,63],
[47,48,49,49,0,41,51,78,37],
[73,61,87,65,89,0,79,80,53],
[77,56,64,51,79,51,0,69,69],
[60,42,68,33,52,50,61,0,47],
[76,68,52,67,93,77,61,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,89,85,89,77,77,67,60],
[70,0,58,76,67,72,44,75,71],
[41,72,0,56,71,76,58,35,65],
[45,54,74,0,64,41,69,46,48],
[41,63,59,66,0,58,53,58,58],
[53,58,54,89,72,0,85,49,48],
[53,86,72,61,77,45,0,61,81],
[63,55,95,84,72,81,69,0,76],
[70,59,65,82,72,82,49,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,65,73,66,68,55,64,68],
[70,0,68,69,70,58,59,55,68],
[65,62,0,66,67,68,54,59,67],
[57,61,64,0,70,56,53,57,70],
[64,60,63,60,0,51,54,57,68],
[62,72,62,74,79,0,62,67,82],
[75,71,76,77,76,68,0,65,76],
[66,75,71,73,73,63,65,0,69],
[62,62,63,60,62,48,54,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,59,51,73,62,65,68,54],
[68,0,57,63,71,69,59,65,61],
[71,73,0,68,67,58,71,66,57],
[79,67,62,0,58,61,69,75,60],
[57,59,63,72,0,59,64,59,56],
[68,61,72,69,71,0,72,70,64],
[65,71,59,61,66,58,0,61,63],
[62,65,64,55,71,60,69,0,70],
[76,69,73,70,74,66,67,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,51,36,36,63,56,19,33],
[85,0,62,34,44,63,55,28,65],
[79,68,0,67,54,52,79,56,62],
[94,96,63,0,65,78,77,46,52],
[94,86,76,65,0,73,73,57,55],
[67,67,78,52,57,0,55,54,43],
[74,75,51,53,57,75,0,48,57],
[111,102,74,84,73,76,82,0,56],
[97,65,68,78,75,87,73,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,68,63,60,66,61,62],
[62,0,61,63,62,58,65,70,57],
[60,69,0,71,74,59,65,61,59],
[62,67,59,0,63,53,62,60,57],
[67,68,56,67,0,63,68,68,54],
[70,72,71,77,67,0,72,70,61],
[64,65,65,68,62,58,0,65,66],
[69,60,69,70,62,60,65,0,62],
[68,73,71,73,76,69,64,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,21,57,49,53,78,75,63],
[60,0,60,72,81,71,71,77,74],
[109,70,0,103,81,77,73,94,53],
[73,58,27,0,41,56,53,55,44],
[81,49,49,89,0,56,49,78,40],
[77,59,53,74,74,0,76,83,61],
[52,59,57,77,81,54,0,89,54],
[55,53,36,75,52,47,41,0,39],
[67,56,77,86,90,69,76,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,76,65,68,73,69,62,72],
[63,0,60,49,69,64,71,62,69],
[54,70,0,58,73,69,64,66,63],
[65,81,72,0,77,70,80,66,82],
[62,61,57,53,0,59,62,59,66],
[57,66,61,60,71,0,71,64,68],
[61,59,66,50,68,59,0,59,70],
[68,68,64,64,71,66,71,0,68],
[58,61,67,48,64,62,60,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,56,68,77,72,61,60,66],
[72,0,58,71,79,79,61,68,65],
[74,72,0,76,71,71,64,71,75],
[62,59,54,0,63,67,67,75,63],
[53,51,59,67,0,66,52,63,61],
[58,51,59,63,64,0,46,68,54],
[69,69,66,63,78,84,0,70,56],
[70,62,59,55,67,62,60,0,69],
[64,65,55,67,69,76,74,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,109,70,60,97,78,97,69],
[57,0,85,50,54,85,70,101,46],
[21,45,0,42,42,60,47,76,57],
[60,80,88,0,93,89,57,95,75],
[70,76,88,37,0,78,47,73,83],
[33,45,70,41,52,0,70,90,50],
[52,60,83,73,83,60,0,83,65],
[33,29,54,35,57,40,47,0,36],
[61,84,73,55,47,80,65,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,58,35,42,45,50,61,47],
[89,0,63,55,44,63,53,75,79],
[72,67,0,64,56,61,47,69,57],
[95,75,66,0,56,64,65,78,57],
[88,86,74,74,0,87,65,81,72],
[85,67,69,66,43,0,40,94,57],
[80,77,83,65,65,90,0,82,70],
[69,55,61,52,49,36,48,0,29],
[83,51,73,73,58,73,60,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,66,71,56,65,70,71,55],
[71,0,62,64,52,60,66,76,65],
[64,68,0,65,59,62,62,76,59],
[59,66,65,0,59,69,72,79,57],
[74,78,71,71,0,69,74,88,58],
[65,70,68,61,61,0,71,71,69],
[60,64,68,58,56,59,0,70,60],
[59,54,54,51,42,59,60,0,55],
[75,65,71,73,72,61,70,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,49,59,51,63,62,58,55],
[77,0,71,67,71,70,77,68,52],
[81,59,0,43,56,55,67,54,53],
[71,63,87,0,76,74,71,62,65],
[79,59,74,54,0,52,68,64,59],
[67,60,75,56,78,0,72,69,52],
[68,53,63,59,62,58,0,56,47],
[72,62,76,68,66,61,74,0,69],
[75,78,77,65,71,78,83,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,64,67,70,64,67,76,59],
[71,0,71,60,72,62,72,65,62],
[66,59,0,62,67,67,72,77,58],
[63,70,68,0,70,66,75,68,66],
[60,58,63,60,0,57,72,60,54],
[66,68,63,64,73,0,70,72,62],
[63,58,58,55,58,60,0,59,51],
[54,65,53,62,70,58,71,0,60],
[71,68,72,64,76,68,79,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,63,77,46,65,61,78,73],
[61,0,56,68,60,64,62,75,61],
[67,74,0,77,63,61,74,77,75],
[53,62,53,0,52,56,54,66,55],
[84,70,67,78,0,65,78,72,77],
[65,66,69,74,65,0,67,73,60],
[69,68,56,76,52,63,0,68,78],
[52,55,53,64,58,57,62,0,68],
[57,69,55,75,53,70,52,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,63,62,62,69,62,66,68],
[64,0,65,61,62,65,67,56,58],
[67,65,0,54,63,62,64,68,69],
[68,69,76,0,69,68,69,62,67],
[68,68,67,61,0,69,61,66,63],
[61,65,68,62,61,0,61,53,64],
[68,63,66,61,69,69,0,64,60],
[64,74,62,68,64,77,66,0,71],
[62,72,61,63,67,66,70,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,75,65,69,58,68,70,63],
[67,0,59,68,71,48,65,68,59],
[55,71,0,63,67,58,68,66,67],
[65,62,67,0,66,60,67,67,55],
[61,59,63,64,0,52,68,65,59],
[72,82,72,70,78,0,73,79,65],
[62,65,62,63,62,57,0,64,60],
[60,62,64,63,65,51,66,0,61],
[67,71,63,75,71,65,70,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,61,66,67,66,60,63,52],
[75,0,66,71,70,64,76,68,67],
[69,64,0,65,71,64,75,62,56],
[64,59,65,0,65,72,82,58,60],
[63,60,59,65,0,72,62,63,59],
[64,66,66,58,58,0,65,57,56],
[70,54,55,48,68,65,0,57,54],
[67,62,68,72,67,73,73,0,61],
[78,63,74,70,71,74,76,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,95,87,72,97,103,61,71],
[62,0,60,81,75,90,65,90,96],
[35,70,0,66,62,81,73,53,59],
[43,49,64,0,54,105,62,77,77],
[58,55,68,76,0,79,61,73,83],
[33,40,49,25,51,0,44,35,45],
[27,65,57,68,69,86,0,48,68],
[69,40,77,53,57,95,82,0,88],
[59,34,71,53,47,85,62,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,61,61,57,60,67,57,63],
[66,0,62,70,73,58,68,54,62],
[69,68,0,76,58,57,67,68,62],
[69,60,54,0,49,58,65,51,60],
[73,57,72,81,0,66,68,69,59],
[70,72,73,72,64,0,72,64,63],
[63,62,63,65,62,58,0,54,66],
[73,76,62,79,61,66,76,0,67],
[67,68,68,70,71,67,64,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,64,69,60,71,63,77,72],
[65,0,54,62,49,51,61,76,69],
[66,76,0,71,59,58,69,75,66],
[61,68,59,0,52,53,50,66,65],
[70,81,71,78,0,62,73,78,68],
[59,79,72,77,68,0,69,75,70],
[67,69,61,80,57,61,0,81,74],
[53,54,55,64,52,55,49,0,62],
[58,61,64,65,62,60,56,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,71,78,85,90,74,88,62],
[45,0,59,66,70,73,71,72,52],
[59,71,0,68,77,85,60,72,55],
[52,64,62,0,72,90,63,72,51],
[45,60,53,58,0,76,55,56,47],
[40,57,45,40,54,0,44,56,37],
[56,59,70,67,75,86,0,72,71],
[42,58,58,58,74,74,58,0,50],
[68,78,75,79,83,93,59,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,49,55,62,52,53,55,53],
[72,0,64,69,71,69,61,62,60],
[81,66,0,65,70,58,59,65,56],
[75,61,65,0,74,55,55,56,51],
[68,59,60,56,0,48,58,59,50],
[78,61,72,75,82,0,66,55,62],
[77,69,71,75,72,64,0,74,71],
[75,68,65,74,71,75,56,0,63],
[77,70,74,79,80,68,59,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,76,65,66,67,67,85,88],
[60,0,70,74,58,64,59,62,59],
[54,60,0,67,66,71,73,69,65],
[65,56,63,0,52,60,60,71,62],
[64,72,64,78,0,58,75,81,71],
[63,66,59,70,72,0,61,67,67],
[63,71,57,70,55,69,0,70,77],
[45,68,61,59,49,63,60,0,65],
[42,71,65,68,59,63,53,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,63,66,66,73,59,73],
[68,0,67,54,65,76,74,57,77],
[69,63,0,67,63,76,76,59,67],
[67,76,63,0,74,71,81,68,77],
[64,65,67,56,0,60,78,67,71],
[64,54,54,59,70,0,80,59,55],
[57,56,54,49,52,50,0,47,55],
[71,73,71,62,63,71,83,0,82],
[57,53,63,53,59,75,75,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,58,60,65,64,79,71,77],
[70,0,67,70,64,62,74,72,72],
[72,63,0,67,62,63,76,75,72],
[70,60,63,0,64,67,79,74,73],
[65,66,68,66,0,67,71,70,74],
[66,68,67,63,63,0,73,68,78],
[51,56,54,51,59,57,0,65,58],
[59,58,55,56,60,62,65,0,62],
[53,58,58,57,56,52,72,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,58,70,53,65,62,60,60],
[71,0,61,68,68,73,72,67,66],
[72,69,0,72,68,77,67,65,63],
[60,62,58,0,52,67,74,61,63],
[77,62,62,78,0,67,68,67,65],
[65,57,53,63,63,0,60,64,60],
[68,58,63,56,62,70,0,66,65],
[70,63,65,69,63,66,64,0,61],
[70,64,67,67,65,70,65,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,65,67,63,70,57,64],
[66,0,56,65,73,66,72,63,72],
[62,74,0,73,64,64,68,56,61],
[65,65,57,0,76,63,70,62,64],
[63,57,66,54,0,57,62,49,51],
[67,64,66,67,73,0,73,62,63],
[60,58,62,60,68,57,0,68,64],
[73,67,74,68,81,68,62,0,73],
[66,58,69,66,79,67,66,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,60,66,64,66,63,66],
[63,0,66,67,74,61,72,64,61],
[63,64,0,57,73,71,71,68,67],
[70,63,73,0,71,76,83,75,71],
[64,56,57,59,0,53,71,56,61],
[66,69,59,54,77,0,66,66,61],
[64,58,59,47,59,64,0,60,54],
[67,66,62,55,74,64,70,0,62],
[64,69,63,59,69,69,76,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,63,57,57,63,61,71,65],
[69,0,64,67,63,73,75,74,62],
[67,66,0,58,59,74,65,56,71],
[73,63,72,0,60,82,69,69,65],
[73,67,71,70,0,74,65,76,83],
[67,57,56,48,56,0,67,64,66],
[69,55,65,61,65,63,0,73,64],
[59,56,74,61,54,66,57,0,75],
[65,68,59,65,47,64,66,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,89,75,80,71,65,75,86],
[57,0,65,68,76,58,59,54,80],
[41,65,0,49,63,50,49,64,75],
[55,62,81,0,68,54,51,53,72],
[50,54,67,62,0,57,54,64,80],
[59,72,80,76,73,0,75,75,93],
[65,71,81,79,76,55,0,77,87],
[55,76,66,77,66,55,53,0,88],
[44,50,55,58,50,37,43,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,79,72,76,62,89,78,81],
[53,0,52,57,56,59,73,68,56],
[51,78,0,72,75,72,76,81,73],
[58,73,58,0,76,65,81,77,71],
[54,74,55,54,0,66,75,60,70],
[68,71,58,65,64,0,80,72,66],
[41,57,54,49,55,50,0,60,69],
[52,62,49,53,70,58,70,0,65],
[49,74,57,59,60,64,61,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,70,67,73,64,63,69,70],
[57,0,66,61,59,71,61,64,54],
[60,64,0,68,69,65,60,61,58],
[63,69,62,0,67,58,70,55,65],
[57,71,61,63,0,67,60,54,59],
[66,59,65,72,63,0,64,70,66],
[67,69,70,60,70,66,0,68,70],
[61,66,69,75,76,60,62,0,66],
[60,76,72,65,71,64,60,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,55,60,69,52,57,67,57],
[82,0,73,63,77,66,74,73,75],
[75,57,0,70,69,63,67,53,67],
[70,67,60,0,68,62,54,66,62],
[61,53,61,62,0,67,67,63,64],
[78,64,67,68,63,0,69,74,63],
[73,56,63,76,63,61,0,53,65],
[63,57,77,64,67,56,77,0,71],
[73,55,63,68,66,67,65,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,84,98,8,46,44,52,44],
[130,0,130,98,40,86,98,98,52],
[46,0,0,54,0,46,46,8,44],
[32,32,76,0,32,78,32,40,76],
[122,90,130,98,0,122,90,98,44],
[84,44,84,52,8,0,52,52,44],
[86,32,84,98,40,78,0,52,44],
[78,32,122,90,32,78,78,0,76],
[86,78,86,54,86,86,86,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,75,76,62,67,63,64],
[62,0,62,78,54,60,67,70,60],
[66,68,0,71,64,65,75,72,65],
[55,52,59,0,55,50,62,56,59],
[54,76,66,75,0,64,74,73,64],
[68,70,65,80,66,0,74,76,72],
[63,63,55,68,56,56,0,66,54],
[67,60,58,74,57,54,64,0,60],
[66,70,65,71,66,58,76,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,65,69,63,63,60,67,62],
[62,0,67,63,58,71,56,74,62],
[65,63,0,67,68,57,57,69,59],
[61,67,63,0,72,69,68,63,69],
[67,72,62,58,0,68,69,60,65],
[67,59,73,61,62,0,68,67,62],
[70,74,73,62,61,62,0,69,72],
[63,56,61,67,70,63,61,0,72],
[68,68,71,61,65,68,58,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,76,57,66,70,64,61,63],
[53,0,70,55,69,60,47,63,66],
[54,60,0,52,68,60,61,64,67],
[73,75,78,0,63,66,69,70,70],
[64,61,62,67,0,64,61,64,63],
[60,70,70,64,66,0,63,69,69],
[66,83,69,61,69,67,0,70,64],
[69,67,66,60,66,61,60,0,64],
[67,64,63,60,67,61,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,53,66,57,67,55,54,54],
[71,0,60,66,63,69,65,67,67],
[77,70,0,75,75,75,63,69,74],
[64,64,55,0,55,70,59,55,65],
[73,67,55,75,0,69,63,69,68],
[63,61,55,60,61,0,53,63,64],
[75,65,67,71,67,77,0,65,66],
[76,63,61,75,61,67,65,0,77],
[76,63,56,65,62,66,64,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,70,75,67,65,65,70,69],
[61,0,58,70,65,66,63,56,62],
[60,72,0,60,57,61,64,59,70],
[55,60,70,0,69,51,63,63,69],
[63,65,73,61,0,69,65,71,68],
[65,64,69,79,61,0,66,61,73],
[65,67,66,67,65,64,0,67,63],
[60,74,71,67,59,69,63,0,65],
[61,68,60,61,62,57,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,108,50,81,74,101,108,70],
[27,0,34,70,108,27,58,77,70],
[22,96,0,65,103,53,31,130,65],
[80,60,65,0,81,31,58,108,80],
[49,22,27,49,0,27,27,70,49],
[56,103,77,99,103,0,101,108,99],
[29,72,99,72,103,29,0,99,99],
[22,53,0,22,60,22,31,0,22],
[60,60,65,50,81,31,31,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,66,66,68,72,73,70],
[65,0,63,72,64,69,71,69,67],
[65,67,0,66,72,68,74,68,71],
[64,58,64,0,66,67,75,71,72],
[64,66,58,64,0,69,72,62,61],
[62,61,62,63,61,0,73,63,68],
[58,59,56,55,58,57,0,57,66],
[57,61,62,59,68,67,73,0,69],
[60,63,59,58,69,62,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,86,54,62,68,83,74],
[63,0,52,63,52,57,60,60,60],
[61,78,0,79,50,63,68,60,67],
[44,67,51,0,45,50,58,67,53],
[76,78,80,85,0,63,81,74,74],
[68,73,67,80,67,0,64,80,73],
[62,70,62,72,49,66,0,74,70],
[47,70,70,63,56,50,56,0,66],
[56,70,63,77,56,57,60,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,56,53,60,64,52,62,69],
[65,0,66,55,65,47,44,65,67],
[74,64,0,67,69,68,50,55,65],
[77,75,63,0,81,74,71,83,79],
[70,65,61,49,0,54,55,65,67],
[66,83,62,56,76,0,64,74,79],
[78,86,80,59,75,66,0,78,75],
[68,65,75,47,65,56,52,0,72],
[61,63,65,51,63,51,55,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,73,78,56,61,59,67,76],
[71,0,75,75,63,59,68,68,71],
[57,55,0,70,54,57,61,60,70],
[52,55,60,0,41,50,58,58,65],
[74,67,76,89,0,71,69,68,65],
[69,71,73,80,59,0,72,77,76],
[71,62,69,72,61,58,0,74,76],
[63,62,70,72,62,53,56,0,71],
[54,59,60,65,65,54,54,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,113,72,46,19,59,75,56],
[59,0,59,52,39,45,51,54,45],
[17,71,0,52,38,19,59,67,38],
[58,78,78,0,46,34,40,101,52],
[84,91,92,84,0,68,59,84,51],
[111,85,111,96,62,0,84,105,69],
[71,79,71,90,71,46,0,93,44],
[55,76,63,29,46,25,37,0,37],
[74,85,92,78,79,61,86,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,67,63,66,63,68,53,50],
[62,0,53,57,47,52,71,47,40],
[63,77,0,59,69,57,69,60,56],
[67,73,71,0,62,58,67,66,65],
[64,83,61,68,0,68,66,59,60],
[67,78,73,72,62,0,73,55,63],
[62,59,61,63,64,57,0,51,49],
[77,83,70,64,71,75,79,0,73],
[80,90,74,65,70,67,81,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,55,60,65,61,69,64,68],
[74,0,63,66,64,82,78,64,75],
[75,67,0,72,60,75,75,61,78],
[70,64,58,0,64,62,67,56,76],
[65,66,70,66,0,64,72,71,85],
[69,48,55,68,66,0,70,61,65],
[61,52,55,63,58,60,0,51,69],
[66,66,69,74,59,69,79,0,80],
[62,55,52,54,45,65,61,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,63,69,84,66,80,47,70],
[61,0,59,42,83,62,53,54,66],
[67,71,0,51,68,66,58,64,55],
[61,88,79,0,86,85,72,75,85],
[46,47,62,44,0,57,46,55,52],
[64,68,64,45,73,0,47,61,60],
[50,77,72,58,84,83,0,79,67],
[83,76,66,55,75,69,51,0,65],
[60,64,75,45,78,70,63,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,68,72,71,70,76,69],
[66,0,70,62,67,65,61,71,68],
[64,60,0,61,66,65,67,75,64],
[62,68,69,0,58,62,68,73,68],
[58,63,64,72,0,70,65,76,65],
[59,65,65,68,60,0,70,73,69],
[60,69,63,62,65,60,0,73,69],
[54,59,55,57,54,57,57,0,61],
[61,62,66,62,65,61,61,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,55,60,73,69,78,68,67],
[72,0,57,58,85,57,61,65,62],
[75,73,0,65,76,71,69,80,63],
[70,72,65,0,86,67,71,84,68],
[57,45,54,44,0,54,55,52,41],
[61,73,59,63,76,0,76,68,62],
[52,69,61,59,75,54,0,55,59],
[62,65,50,46,78,62,75,0,69],
[63,68,67,62,89,68,71,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,71,87,62,57,58,62,65],
[72,0,66,81,65,66,67,65,71],
[59,64,0,71,63,60,55,61,67],
[43,49,59,0,46,49,49,53,59],
[68,65,67,84,0,64,65,70,72],
[73,64,70,81,66,0,60,62,76],
[72,63,75,81,65,70,0,59,74],
[68,65,69,77,60,68,71,0,82],
[65,59,63,71,58,54,56,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,55,74,82,65,64,86,70],
[58,0,67,92,77,85,64,90,69],
[75,63,0,90,89,75,74,87,74],
[56,38,40,0,72,37,47,64,60],
[48,53,41,58,0,40,66,43,21],
[65,45,55,93,90,0,69,91,66],
[66,66,56,83,64,61,0,71,64],
[44,40,43,66,87,39,59,0,59],
[60,61,56,70,109,64,66,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,49,54,52,72,76,59,51],
[64,0,64,51,55,63,74,56,59],
[81,66,0,68,74,75,101,65,77],
[76,79,62,0,73,75,79,73,76],
[78,75,56,57,0,60,76,74,74],
[58,67,55,55,70,0,86,74,68],
[54,56,29,51,54,44,0,50,36],
[71,74,65,57,56,56,80,0,63],
[79,71,53,54,56,62,94,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,68,63,75,68,65,69,73],
[62,0,69,60,75,77,69,69,75],
[62,61,0,65,78,76,64,69,69],
[67,70,65,0,72,71,64,71,80],
[55,55,52,58,0,68,58,72,68],
[62,53,54,59,62,0,63,67,61],
[65,61,66,66,72,67,0,77,78],
[61,61,61,59,58,63,53,0,73],
[57,55,61,50,62,69,52,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,69,68,52,70,65,59,63],
[69,0,78,76,71,72,71,74,65],
[61,52,0,58,55,71,60,67,42],
[62,54,72,0,55,72,66,66,54],
[78,59,75,75,0,72,77,77,64],
[60,58,59,58,58,0,69,70,52],
[65,59,70,64,53,61,0,73,58],
[71,56,63,64,53,60,57,0,60],
[67,65,88,76,66,78,72,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,64,60,59,64,57,61,62],
[68,0,65,63,64,60,64,59,68],
[66,65,0,67,59,71,63,59,62],
[70,67,63,0,62,71,64,65,66],
[71,66,71,68,0,67,61,57,68],
[66,70,59,59,63,0,65,59,58],
[73,66,67,66,69,65,0,60,65],
[69,71,71,65,73,71,70,0,75],
[68,62,68,64,62,72,65,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,86,69,73,65,69,69,73],
[53,0,72,77,53,65,61,69,65],
[44,58,0,59,37,42,54,42,64],
[61,53,71,0,55,51,72,69,60],
[57,77,93,75,0,75,71,66,80],
[65,65,88,79,55,0,79,67,90],
[61,69,76,58,59,51,0,63,74],
[61,61,88,61,64,63,67,0,79],
[57,65,66,70,50,40,56,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,71,72,61,64,74,67,63],
[65,0,58,59,59,61,62,60,56],
[59,72,0,65,76,66,71,62,64],
[58,71,65,0,74,67,74,64,64],
[69,71,54,56,0,65,69,50,58],
[66,69,64,63,65,0,57,57,59],
[56,68,59,56,61,73,0,54,70],
[63,70,68,66,80,73,76,0,72],
[67,74,66,66,72,71,60,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,73,64,73,69,75,73,69],
[66,0,69,67,70,68,70,67,57],
[57,61,0,61,56,67,72,60,52],
[66,63,69,0,64,69,82,66,62],
[57,60,74,66,0,70,64,73,69],
[61,62,63,61,60,0,73,64,57],
[55,60,58,48,66,57,0,54,53],
[57,63,70,64,57,66,76,0,60],
[61,73,78,68,61,73,77,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,49,55,58,46,48,68,45],
[81,0,64,100,100,61,59,76,89],
[81,66,0,79,83,60,69,76,51],
[75,30,51,0,73,53,33,63,73],
[72,30,47,57,0,52,51,76,47],
[84,69,70,77,78,0,49,79,83],
[82,71,61,97,79,81,0,74,78],
[62,54,54,67,54,51,56,0,60],
[85,41,79,57,83,47,52,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,63,61,66,72,74,64,68],
[67,0,65,52,62,67,61,67,58],
[67,65,0,69,75,72,73,79,67],
[69,78,61,0,77,66,82,73,80],
[64,68,55,53,0,69,66,60,65],
[58,63,58,64,61,0,64,73,59],
[56,69,57,48,64,66,0,59,60],
[66,63,51,57,70,57,71,0,54],
[62,72,63,50,65,71,70,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,67,67,57,61,63,70,64],
[72,0,51,64,56,66,72,62,80],
[63,79,0,79,68,69,63,76,75],
[63,66,51,0,62,65,61,68,70],
[73,74,62,68,0,69,61,75,74],
[69,64,61,65,61,0,69,76,72],
[67,58,67,69,69,61,0,77,77],
[60,68,54,62,55,54,53,0,54],
[66,50,55,60,56,58,53,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,68,70,69,74,74,61,79],
[50,0,50,60,62,67,59,51,64],
[62,80,0,73,72,85,73,66,74],
[60,70,57,0,72,83,64,55,62],
[61,68,58,58,0,79,69,59,68],
[56,63,45,47,51,0,72,51,46],
[56,71,57,66,61,58,0,53,56],
[69,79,64,75,71,79,77,0,68],
[51,66,56,68,62,84,74,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,60,50,48,65,54,61,67],
[67,0,65,53,60,67,55,72,73],
[70,65,0,59,60,61,55,71,69],
[80,77,71,0,65,74,70,78,75],
[82,70,70,65,0,69,67,75,78],
[65,63,69,56,61,0,53,66,65],
[76,75,75,60,63,77,0,78,74],
[69,58,59,52,55,64,52,0,68],
[63,57,61,55,52,65,56,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,73,71,62,56,67,71,67],
[55,0,71,52,51,64,53,61,49],
[57,59,0,50,46,48,45,55,42],
[59,78,80,0,74,70,65,73,40],
[68,79,84,56,0,71,53,62,52],
[74,66,82,60,59,0,44,69,62],
[63,77,85,65,77,86,0,86,57],
[59,69,75,57,68,61,44,0,52],
[63,81,88,90,78,68,73,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,62,57,65,65,68,65,73],
[67,0,66,66,64,68,62,69,76],
[68,64,0,64,55,77,64,59,70],
[73,64,66,0,67,69,66,68,69],
[65,66,75,63,0,78,64,67,76],
[65,62,53,61,52,0,51,60,53],
[62,68,66,64,66,79,0,63,65],
[65,61,71,62,63,70,67,0,71],
[57,54,60,61,54,77,65,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,62,54,59,78,77,81,65],
[68,0,77,56,72,89,88,85,84],
[68,53,0,62,79,84,89,84,83],
[76,74,68,0,58,68,83,89,96],
[71,58,51,72,0,79,81,85,82],
[52,41,46,62,51,0,77,61,65],
[53,42,41,47,49,53,0,44,61],
[49,45,46,41,45,69,86,0,57],
[65,46,47,34,48,65,69,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,62,63,69,64,59,66,58],
[68,0,59,56,77,61,61,56,63],
[68,71,0,65,69,77,52,59,63],
[67,74,65,0,81,56,60,64,61],
[61,53,61,49,0,55,52,59,56],
[66,69,53,74,75,0,53,67,65],
[71,69,78,70,78,77,0,67,58],
[64,74,71,66,71,63,63,0,57],
[72,67,67,69,74,65,72,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,77,21,51,51,51,73,51],
[79,0,93,96,80,100,49,98,75],
[53,37,0,70,54,103,82,75,75],
[109,34,60,0,34,101,62,82,56],
[79,50,76,96,0,100,46,109,86],
[79,30,27,29,30,0,4,81,51],
[79,81,48,68,84,126,0,81,84],
[57,32,55,48,21,49,49,0,31],
[79,55,55,74,44,79,46,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,65,60,41,73,70,67,64],
[85,0,78,65,66,79,81,68,81],
[65,52,0,56,43,74,66,61,66],
[70,65,74,0,57,76,68,63,68],
[89,64,87,73,0,81,72,62,78],
[57,51,56,54,49,0,56,60,65],
[60,49,64,62,58,74,0,62,68],
[63,62,69,67,68,70,68,0,76],
[66,49,64,62,52,65,62,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,72,67,94,72,84,66,75],
[74,0,64,63,84,82,87,62,69],
[58,66,0,57,86,82,87,50,74],
[63,67,73,0,90,69,74,54,59],
[36,46,44,40,0,42,63,39,54],
[58,48,48,61,88,0,64,47,73],
[46,43,43,56,67,66,0,38,44],
[64,68,80,76,91,83,92,0,82],
[55,61,56,71,76,57,86,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,60,64,48,62,69,36,67],
[70,0,75,74,67,78,68,56,80],
[70,55,0,67,44,60,68,51,68],
[66,56,63,0,41,55,72,29,77],
[82,63,86,89,0,86,76,65,93],
[68,52,70,75,44,0,66,52,78],
[61,62,62,58,54,64,0,47,59],
[94,74,79,101,65,78,83,0,89],
[63,50,62,53,37,52,71,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,63,69,62,63,67,67,63],
[58,0,55,55,54,57,59,55,63],
[67,75,0,62,60,62,62,70,64],
[61,75,68,0,67,65,70,72,63],
[68,76,70,63,0,60,67,72,68],
[67,73,68,65,70,0,66,68,67],
[63,71,68,60,63,64,0,70,73],
[63,75,60,58,58,62,60,0,69],
[67,67,66,67,62,63,57,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,57,56,51,64,46,54,64],
[61,0,61,56,57,56,42,54,67],
[73,69,0,66,54,66,48,57,76],
[74,74,64,0,67,73,66,65,79],
[79,73,76,63,0,71,53,55,73],
[66,74,64,57,59,0,49,53,68],
[84,88,82,64,77,81,0,63,82],
[76,76,73,65,75,77,67,0,79],
[66,63,54,51,57,62,48,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,71,58,71,71,65,82,60],
[54,0,50,56,59,66,56,66,64],
[59,80,0,64,74,71,62,76,61],
[72,74,66,0,70,65,62,71,74],
[59,71,56,60,0,49,49,58,57],
[59,64,59,65,81,0,60,80,71],
[65,74,68,68,81,70,0,81,76],
[48,64,54,59,72,50,49,0,65],
[70,66,69,56,73,59,54,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,88,79,68,50,67,78,73],
[63,0,92,70,93,66,57,87,76],
[42,38,0,52,66,42,44,55,53],
[51,60,78,0,72,62,55,65,60],
[62,37,64,58,0,61,45,41,39],
[80,64,88,68,69,0,69,89,75],
[63,73,86,75,85,61,0,90,94],
[52,43,75,65,89,41,40,0,72],
[57,54,77,70,91,55,36,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,63,72,80,20,59,48,97],
[62,0,62,76,97,34,36,49,95],
[67,68,0,54,80,29,56,43,92],
[58,54,76,0,75,32,54,50,72],
[50,33,50,55,0,55,37,52,74],
[110,96,101,98,75,0,54,70,101],
[71,94,74,76,93,76,0,39,112],
[82,81,87,80,78,60,91,0,108],
[33,35,38,58,56,29,18,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,89,79,66,68,79,57,77],
[62,0,73,75,61,69,69,52,69],
[41,57,0,53,55,44,53,52,51],
[51,55,77,0,57,66,62,56,72],
[64,69,75,73,0,68,69,78,76],
[62,61,86,64,62,0,71,58,69],
[51,61,77,68,61,59,0,50,67],
[73,78,78,74,52,72,80,0,77],
[53,61,79,58,54,61,63,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,52,69,63,65,78,72,62],
[54,0,47,54,48,46,53,56,57],
[78,83,0,67,77,64,88,75,75],
[61,76,63,0,71,69,67,53,70],
[67,82,53,59,0,59,67,65,72],
[65,84,66,61,71,0,76,69,67],
[52,77,42,63,63,54,0,60,57],
[58,74,55,77,65,61,70,0,67],
[68,73,55,60,58,63,73,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,59,63,59,61,57,61,68],
[68,0,65,60,67,55,59,66,64],
[71,65,0,54,65,61,64,67,67],
[67,70,76,0,71,68,64,69,73],
[71,63,65,59,0,69,69,73,66],
[69,75,69,62,61,0,63,72,67],
[73,71,66,66,61,67,0,66,70],
[69,64,63,61,57,58,64,0,69],
[62,66,63,57,64,63,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,66,66,71,62,72,62,59],
[62,0,62,66,59,65,60,57,55],
[64,68,0,67,70,69,64,62,62],
[64,64,63,0,63,63,57,58,63],
[59,71,60,67,0,61,56,59,52],
[68,65,61,67,69,0,59,67,57],
[58,70,66,73,74,71,0,64,68],
[68,73,68,72,71,63,66,0,63],
[71,75,68,67,78,73,62,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,64,65,67,65,71,70,63],
[59,0,53,49,51,63,60,51,48],
[66,77,0,68,67,66,74,66,51],
[65,81,62,0,56,71,68,66,67],
[63,79,63,74,0,62,63,70,58],
[65,67,64,59,68,0,61,62,53],
[59,70,56,62,67,69,0,64,59],
[60,79,64,64,60,68,66,0,62],
[67,82,79,63,72,77,71,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,62,71,68,78,68,62,74],
[60,0,59,73,60,70,68,64,71],
[68,71,0,67,59,81,72,64,85],
[59,57,63,0,70,63,57,64,59],
[62,70,71,60,0,69,58,68,66],
[52,60,49,67,61,0,59,60,62],
[62,62,58,73,72,71,0,66,76],
[68,66,66,66,62,70,64,0,69],
[56,59,45,71,64,68,54,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,53,51,52,54,53,45,49],
[82,0,67,65,71,65,64,62,67],
[77,63,0,64,77,74,69,57,71],
[79,65,66,0,78,70,67,62,68],
[78,59,53,52,0,57,63,59,58],
[76,65,56,60,73,0,67,66,66],
[77,66,61,63,67,63,0,54,67],
[85,68,73,68,71,64,76,0,61],
[81,63,59,62,72,64,63,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,68,62,66,68,65,72,72],
[70,0,70,65,64,65,63,67,74],
[62,60,0,68,78,54,55,64,72],
[68,65,62,0,74,57,50,67,77],
[64,66,52,56,0,66,50,81,68],
[62,65,76,73,64,0,64,77,76],
[65,67,75,80,80,66,0,69,76],
[58,63,66,63,49,53,61,0,68],
[58,56,58,53,62,54,54,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,78,87,89,66,93,58,76],
[60,0,71,73,78,63,63,61,69],
[52,59,0,66,75,46,70,54,64],
[43,57,64,0,64,53,62,59,63],
[41,52,55,66,0,56,69,64,75],
[64,67,84,77,74,0,91,65,79],
[37,67,60,68,61,39,0,34,48],
[72,69,76,71,66,65,96,0,74],
[54,61,66,67,55,51,82,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,75,65,71,61,56,69,66],
[66,0,59,63,66,68,63,69,66],
[55,71,0,64,62,62,70,71,60],
[65,67,66,0,63,71,58,59,68],
[59,64,68,67,0,71,57,57,62],
[69,62,68,59,59,0,68,63,60],
[74,67,60,72,73,62,0,59,61],
[61,61,59,71,73,67,71,0,61],
[64,64,70,62,68,70,69,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,79,83,61,82,66,71,79],
[58,0,71,78,67,76,68,69,70],
[51,59,0,66,62,69,71,61,65],
[47,52,64,0,58,56,54,57,64],
[69,63,68,72,0,70,58,75,65],
[48,54,61,74,60,0,64,59,59],
[64,62,59,76,72,66,0,59,66],
[59,61,69,73,55,71,71,0,61],
[51,60,65,66,65,71,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,56,76,56,58,62,58,71],
[74,0,67,69,68,65,68,70,77],
[74,63,0,68,54,61,65,61,66],
[54,61,62,0,67,60,56,63,66],
[74,62,76,63,0,62,70,78,65],
[72,65,69,70,68,0,67,69,76],
[68,62,65,74,60,63,0,69,71],
[72,60,69,67,52,61,61,0,66],
[59,53,64,64,65,54,59,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,82,74,74,75,81,82,64],
[48,0,59,53,59,59,30,76,62],
[48,71,0,73,64,62,54,75,59],
[56,77,57,0,62,83,59,87,68],
[56,71,66,68,0,69,48,76,65],
[55,71,68,47,61,0,49,77,47],
[49,100,76,71,82,81,0,89,67],
[48,54,55,43,54,53,41,0,57],
[66,68,71,62,65,83,63,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,53,48,41,55,48,52,65],
[70,0,64,63,48,74,63,68,75],
[77,66,0,68,63,72,68,57,76],
[82,67,62,0,52,73,63,63,82],
[89,82,67,78,0,75,74,64,83],
[75,56,58,57,55,0,64,62,71],
[82,67,62,67,56,66,0,63,75],
[78,62,73,67,66,68,67,0,74],
[65,55,54,48,47,59,55,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,52,77,63,58,40,69,75],
[60,0,59,56,67,96,63,82,64],
[78,71,0,66,55,77,88,102,64],
[53,74,64,0,53,64,74,98,83],
[67,63,75,77,0,81,67,105,76],
[72,34,53,66,49,0,41,52,64],
[90,67,42,56,63,89,0,88,66],
[61,48,28,32,25,78,42,0,52],
[55,66,66,47,54,66,64,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,74,70,66,61,59,57,65],
[69,0,67,71,61,60,50,64,64],
[56,63,0,74,62,61,41,60,51],
[60,59,56,0,67,55,38,64,59],
[64,69,68,63,0,55,48,58,72],
[69,70,69,75,75,0,68,74,62],
[71,80,89,92,82,62,0,80,66],
[73,66,70,66,72,56,50,0,57],
[65,66,79,71,58,68,64,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,56,57,61,60,54,69,67],
[68,0,67,63,62,61,54,63,69],
[74,63,0,66,81,70,67,76,68],
[73,67,64,0,67,73,68,77,69],
[69,68,49,63,0,67,66,79,58],
[70,69,60,57,63,0,64,69,67],
[76,76,63,62,64,66,0,80,69],
[61,67,54,53,51,61,50,0,60],
[63,61,62,61,72,63,61,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,54,65,41,56,60,57,40],
[79,0,57,68,65,74,76,68,77],
[76,73,0,64,81,77,79,65,74],
[65,62,66,0,73,63,63,69,57],
[89,65,49,57,0,82,86,73,64],
[74,56,53,67,48,0,78,64,65],
[70,54,51,67,44,52,0,50,66],
[73,62,65,61,57,66,80,0,58],
[90,53,56,73,66,65,64,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,68,69,73,75,59,82,65],
[69,0,60,70,70,68,64,81,60],
[62,70,0,68,68,68,63,74,60],
[61,60,62,0,66,71,59,83,63],
[57,60,62,64,0,62,63,79,55],
[55,62,62,59,68,0,52,74,41],
[71,66,67,71,67,78,0,92,62],
[48,49,56,47,51,56,38,0,40],
[65,70,70,67,75,89,68,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,62,77,60,62,76,69,62],
[64,0,58,69,61,59,61,66,68],
[68,72,0,75,65,61,68,76,70],
[53,61,55,0,51,58,59,62,57],
[70,69,65,79,0,73,71,78,73],
[68,71,69,72,57,0,71,74,64],
[54,69,62,71,59,59,0,72,68],
[61,64,54,68,52,56,58,0,60],
[68,62,60,73,57,66,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,53,54,57,53,55,60],
[68,0,63,56,63,49,64,51,60],
[69,67,0,67,61,56,55,56,59],
[77,74,63,0,57,69,66,66,60],
[76,67,69,73,0,60,62,67,64],
[73,81,74,61,70,0,71,62,75],
[77,66,75,64,68,59,0,66,66],
[75,79,74,64,63,68,64,0,61],
[70,70,71,70,66,55,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,55,65,55,51,66,62,51],
[64,0,56,55,51,50,54,57,50],
[75,74,0,68,64,60,61,67,52],
[65,75,62,0,53,57,57,61,55],
[75,79,66,77,0,64,67,74,67],
[79,80,70,73,66,0,62,81,64],
[64,76,69,73,63,68,0,67,59],
[68,73,63,69,56,49,63,0,55],
[79,80,78,75,63,66,71,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,61,83,73,49,46,74,50],
[58,0,55,44,45,50,33,80,66],
[69,75,0,62,47,65,72,76,74],
[47,86,68,0,55,75,42,85,61],
[57,85,83,75,0,57,73,82,80],
[81,80,65,55,73,0,82,95,75],
[84,97,58,88,57,48,0,88,88],
[56,50,54,45,48,35,42,0,44],
[80,64,56,69,50,55,42,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,58,60,58,69,56,61,55],
[68,0,57,55,47,66,63,60,48],
[72,73,0,66,60,61,49,82,49],
[70,75,64,0,51,69,72,70,61],
[72,83,70,79,0,77,64,79,66],
[61,64,69,61,53,0,58,66,55],
[74,67,81,58,66,72,0,67,60],
[69,70,48,60,51,64,63,0,58],
[75,82,81,69,64,75,70,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,56,64,67,62,73,57,60],
[59,0,59,53,52,55,67,54,61],
[74,71,0,67,70,60,74,64,58],
[66,77,63,0,66,57,72,51,68],
[63,78,60,64,0,60,74,60,57],
[68,75,70,73,70,0,69,74,62],
[57,63,56,58,56,61,0,55,55],
[73,76,66,79,70,56,75,0,58],
[70,69,72,62,73,68,75,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,74,83,85,68,58,52,61],
[65,0,74,95,66,61,53,61,56],
[56,56,0,66,60,62,56,70,39],
[47,35,64,0,55,53,51,56,42],
[45,64,70,75,0,68,65,63,55],
[62,69,68,77,62,0,69,66,62],
[72,77,74,79,65,61,0,73,82],
[78,69,60,74,67,64,57,0,60],
[69,74,91,88,75,68,48,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,72,71,60,67,69,63,63],
[56,0,63,65,52,60,62,60,63],
[58,67,0,68,59,63,67,65,56],
[59,65,62,0,56,53,51,60,55],
[70,78,71,74,0,61,67,59,63],
[63,70,67,77,69,0,65,75,69],
[61,68,63,79,63,65,0,64,66],
[67,70,65,70,71,55,66,0,61],
[67,67,74,75,67,61,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,62,75,60,57,59,70,61],
[61,0,63,81,75,65,66,74,56],
[68,67,0,78,74,66,65,72,71],
[55,49,52,0,54,45,54,51,52],
[70,55,56,76,0,53,67,63,66],
[73,65,64,85,77,0,66,69,79],
[71,64,65,76,63,64,0,66,70],
[60,56,58,79,67,61,64,0,61],
[69,74,59,78,64,51,60,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,54,59,73,74,50,64,83],
[83,0,68,69,95,81,64,78,82],
[76,62,0,64,69,88,77,73,87],
[71,61,66,0,90,94,94,85,98],
[57,35,61,40,0,63,48,51,72],
[56,49,42,36,67,0,53,56,81],
[80,66,53,36,82,77,0,54,91],
[66,52,57,45,79,74,76,0,57],
[47,48,43,32,58,49,39,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,68,76,65,62,74,62,66],
[57,0,63,65,60,55,61,64,59],
[62,67,0,73,66,53,63,61,58],
[54,65,57,0,60,61,68,68,55],
[65,70,64,70,0,58,68,58,69],
[68,75,77,69,72,0,77,65,61],
[56,69,67,62,62,53,0,54,57],
[68,66,69,62,72,65,76,0,63],
[64,71,72,75,61,69,73,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,65,64,55,68,59,60,73],
[64,0,57,65,66,76,66,67,72],
[65,73,0,54,67,68,62,64,67],
[66,65,76,0,62,73,63,66,74],
[75,64,63,68,0,66,65,78,72],
[62,54,62,57,64,0,54,61,69],
[71,64,68,67,65,76,0,72,67],
[70,63,66,64,52,69,58,0,64],
[57,58,63,56,58,61,63,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,69,76,82,67,65,78,71],
[61,0,68,73,81,62,72,85,71],
[61,62,0,58,65,65,59,73,61],
[54,57,72,0,74,66,65,77,67],
[48,49,65,56,0,52,51,60,58],
[63,68,65,64,78,0,67,70,68],
[65,58,71,65,79,63,0,77,65],
[52,45,57,53,70,60,53,0,48],
[59,59,69,63,72,62,65,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,67,24,47,67,34,24,24],
[106,0,80,10,73,67,47,84,24],
[63,50,0,50,73,57,47,50,24],
[106,120,80,0,130,80,47,74,70],
[83,57,57,0,0,57,24,74,24],
[63,63,73,50,73,0,47,50,24],
[96,83,83,83,106,83,0,83,57],
[106,46,80,56,56,80,47,0,70],
[106,106,106,60,106,106,73,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,51,41,64,57,63,69,50],
[73,0,78,52,63,65,70,60,54],
[79,52,0,53,58,63,66,84,49],
[89,78,77,0,51,70,76,70,61],
[66,67,72,79,0,71,73,76,65],
[73,65,67,60,59,0,67,75,52],
[67,60,64,54,57,63,0,59,57],
[61,70,46,60,54,55,71,0,40],
[80,76,81,69,65,78,73,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,60,73,65,77,73,74,69],
[64,0,59,68,69,65,80,80,68],
[70,71,0,70,64,68,70,76,68],
[57,62,60,0,60,60,59,68,61],
[65,61,66,70,0,67,69,77,67],
[53,65,62,70,63,0,72,70,69],
[57,50,60,71,61,58,0,61,59],
[56,50,54,62,53,60,69,0,66],
[61,62,62,69,63,61,71,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,81,50,59,63,81,74,64],
[76,0,104,86,62,60,95,93,85],
[49,26,0,59,30,48,72,42,59],
[80,44,71,0,59,56,62,45,94],
[71,68,100,71,0,84,78,54,77],
[67,70,82,74,46,0,72,72,73],
[49,35,58,68,52,58,0,86,74],
[56,37,88,85,76,58,44,0,70],
[66,45,71,36,53,57,56,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,73,64,72,59,72,70,59],
[69,0,65,65,73,71,66,65,65],
[57,65,0,62,66,66,66,65,66],
[66,65,68,0,74,67,71,75,64],
[58,57,64,56,0,59,65,71,58],
[71,59,64,63,71,0,69,62,55],
[58,64,64,59,65,61,0,67,59],
[60,65,65,55,59,68,63,0,59],
[71,65,64,66,72,75,71,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,60,62,71,73,62,69,69],
[67,0,65,67,73,74,63,58,75],
[70,65,0,63,70,78,66,74,78],
[68,63,67,0,81,76,72,72,82],
[59,57,60,49,0,67,62,64,65],
[57,56,52,54,63,0,60,58,70],
[68,67,64,58,68,70,0,67,74],
[61,72,56,58,66,72,63,0,67],
[61,55,52,48,65,60,56,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,61,67,58,62,47,66,68],
[65,0,62,65,67,59,52,56,66],
[69,68,0,65,73,61,62,63,79],
[63,65,65,0,67,70,58,62,65],
[72,63,57,63,0,56,60,64,65],
[68,71,69,60,74,0,67,59,74],
[83,78,68,72,70,63,0,73,77],
[64,74,67,68,66,71,57,0,73],
[62,64,51,65,65,56,53,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,61,60,57,79,73,74,55],
[72,0,71,60,67,62,82,69,66],
[69,59,0,56,65,66,76,70,62],
[70,70,74,0,67,73,82,65,64],
[73,63,65,63,0,75,74,64,70],
[51,68,64,57,55,0,69,63,66],
[57,48,54,48,56,61,0,65,54],
[56,61,60,65,66,67,65,0,64],
[75,64,68,66,60,64,76,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,71,65,66,67,78,76,71],
[66,0,67,74,74,67,68,67,63],
[59,63,0,60,63,57,68,55,70],
[65,56,70,0,65,61,62,64,70],
[64,56,67,65,0,58,66,68,68],
[63,63,73,69,72,0,64,74,70],
[52,62,62,68,64,66,0,70,75],
[54,63,75,66,62,56,60,0,66],
[59,67,60,60,62,60,55,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,114,114,80,66,80,63,79],
[49,0,65,66,64,49,50,79,79],
[16,65,0,66,80,49,50,65,79],
[16,64,64,0,30,16,48,30,47],
[50,66,50,100,0,16,50,49,65],
[64,81,81,114,114,0,80,97,79],
[50,80,80,82,80,50,0,96,80],
[67,51,65,100,81,33,34,0,63],
[51,51,51,83,65,51,50,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,58,65,73,62,57,57,68],
[69,0,64,64,72,63,64,70,60],
[72,66,0,70,73,61,65,61,69],
[65,66,60,0,61,58,64,58,68],
[57,58,57,69,0,61,57,59,61],
[68,67,69,72,69,0,68,65,71],
[73,66,65,66,73,62,0,71,69],
[73,60,69,72,71,65,59,0,77],
[62,70,61,62,69,59,61,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,73,83,76,73,62,71,65],
[56,0,65,74,74,63,59,71,59],
[57,65,0,65,59,86,68,56,63],
[47,56,65,0,67,60,48,68,65],
[54,56,71,63,0,72,66,65,71],
[57,67,44,70,58,0,47,61,51],
[68,71,62,82,64,83,0,76,72],
[59,59,74,62,65,69,54,0,73],
[65,71,67,65,59,79,58,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,76,55,76,76,84,82,91],
[62,0,67,78,68,77,63,75,75],
[54,63,0,55,61,63,66,61,97],
[75,52,75,0,70,75,69,66,89],
[54,62,69,60,0,76,56,62,85],
[54,53,67,55,54,0,63,56,75],
[46,67,64,61,74,67,0,64,95],
[48,55,69,64,68,74,66,0,77],
[39,55,33,41,45,55,35,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,67,60,66,64,60,73,70],
[74,0,49,58,71,76,69,66,73],
[63,81,0,67,78,72,67,75,70],
[70,72,63,0,74,72,56,78,67],
[64,59,52,56,0,72,61,72,55],
[66,54,58,58,58,0,57,72,60],
[70,61,63,74,69,73,0,77,62],
[57,64,55,52,58,58,53,0,54],
[60,57,60,63,75,70,68,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,59,75,60,72,73,85,61],
[50,0,62,68,45,60,56,55,56],
[71,68,0,75,71,82,64,67,76],
[55,62,55,0,52,63,45,53,68],
[70,85,59,78,0,70,61,70,70],
[58,70,48,67,60,0,49,49,57],
[57,74,66,85,69,81,0,68,71],
[45,75,63,77,60,81,62,0,58],
[69,74,54,62,60,73,59,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,55,59,64,59,68,60,72],
[63,0,63,75,63,68,64,59,69],
[75,67,0,69,70,77,58,69,76],
[71,55,61,0,58,56,59,61,63],
[66,67,60,72,0,69,57,58,69],
[71,62,53,74,61,0,64,65,67],
[62,66,72,71,73,66,0,69,74],
[70,71,61,69,72,65,61,0,61],
[58,61,54,67,61,63,56,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,20,22,43,43,109,63,20],
[65,0,41,22,64,65,108,63,41],
[110,89,0,44,66,45,89,65,63],
[108,108,86,0,86,65,130,108,86],
[87,66,64,44,0,44,89,65,64],
[87,65,85,65,86,0,130,65,63],
[21,22,41,0,41,0,0,21,41],
[67,67,65,22,65,65,109,0,43],
[110,89,67,44,66,67,89,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,71,65,76,69,70,67,72],
[78,0,72,64,81,67,79,63,68],
[59,58,0,65,69,64,67,57,61],
[65,66,65,0,78,57,70,58,60],
[54,49,61,52,0,52,62,60,52],
[61,63,66,73,78,0,78,61,52],
[60,51,63,60,68,52,0,67,61],
[63,67,73,72,70,69,63,0,60],
[58,62,69,70,78,78,69,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,76,73,66,65,76,86,70],
[45,0,55,52,52,59,57,69,48],
[54,75,0,60,64,74,59,75,52],
[57,78,70,0,58,76,70,84,60],
[64,78,66,72,0,64,72,80,71],
[65,71,56,54,66,0,63,70,54],
[54,73,71,60,58,67,0,64,54],
[44,61,55,46,50,60,66,0,57],
[60,82,78,70,59,76,76,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,61,65,54,67,57,67,58],
[73,0,62,58,57,56,53,56,50],
[69,68,0,69,67,68,56,44,74],
[65,72,61,0,67,78,66,66,66],
[76,73,63,63,0,75,54,62,51],
[63,74,62,52,55,0,67,61,57],
[73,77,74,64,76,63,0,60,67],
[63,74,86,64,68,69,70,0,62],
[72,80,56,64,79,73,63,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,79,73,65,62,73,63,55],
[67,0,92,74,63,68,77,48,65],
[51,38,0,50,47,52,63,44,47],
[57,56,80,0,67,48,69,63,57],
[65,67,83,63,0,67,74,57,64],
[68,62,78,82,63,0,72,62,58],
[57,53,67,61,56,58,0,51,52],
[67,82,86,67,73,68,79,0,62],
[75,65,83,73,66,72,78,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,77,66,66,70,69,63,59],
[61,0,70,70,65,61,62,65,53],
[53,60,0,56,67,58,66,63,61],
[64,60,74,0,64,73,62,63,63],
[64,65,63,66,0,72,69,62,75],
[60,69,72,57,58,0,61,62,62],
[61,68,64,68,61,69,0,63,56],
[67,65,67,67,68,68,67,0,64],
[71,77,69,67,55,68,74,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,71,53,62,63,63,64,62],
[54,0,66,47,70,63,65,60,63],
[59,64,0,47,55,63,77,60,47],
[77,83,83,0,83,69,74,61,65],
[68,60,75,47,0,59,77,61,60],
[67,67,67,61,71,0,68,56,66],
[67,65,53,56,53,62,0,61,66],
[66,70,70,69,69,74,69,0,64],
[68,67,83,65,70,64,64,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,61,57,58,68,53,58,69],
[72,0,66,65,70,70,55,64,72],
[69,64,0,70,74,74,70,69,81],
[73,65,60,0,74,79,63,69,79],
[72,60,56,56,0,67,58,58,70],
[62,60,56,51,63,0,55,51,62],
[77,75,60,67,72,75,0,63,72],
[72,66,61,61,72,79,67,0,70],
[61,58,49,51,60,68,58,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,95,98,65,57,72,65,90],
[33,0,56,72,50,66,74,64,49],
[35,74,0,65,66,69,49,83,51],
[32,58,65,0,52,43,42,59,48],
[65,80,64,78,0,73,48,64,65],
[73,64,61,87,57,0,39,66,33],
[58,56,81,88,82,91,0,73,71],
[65,66,47,71,66,64,57,0,57],
[40,81,79,82,65,97,59,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,62,72,73,73,64,66,72],
[59,0,56,59,60,52,59,60,53],
[68,74,0,68,72,68,67,64,61],
[58,71,62,0,74,68,70,59,65],
[57,70,58,56,0,63,61,57,56],
[57,78,62,62,67,0,59,60,64],
[66,71,63,60,69,71,0,62,57],
[64,70,66,71,73,70,68,0,59],
[58,77,69,65,74,66,73,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,77,66,63,55,54,56,59],
[80,0,77,87,72,75,80,61,68],
[53,53,0,54,54,60,67,56,79],
[64,43,76,0,53,55,59,53,65],
[67,58,76,77,0,69,55,56,66],
[75,55,70,75,61,0,74,71,74],
[76,50,63,71,75,56,0,63,66],
[74,69,74,77,74,59,67,0,87],
[71,62,51,65,64,56,64,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,59,70,81,68,71,68,68],
[55,0,52,72,72,76,76,70,67],
[71,78,0,77,74,74,83,63,66],
[60,58,53,0,60,72,72,61,58],
[49,58,56,70,0,64,65,63,61],
[62,54,56,58,66,0,62,52,62],
[59,54,47,58,65,68,0,60,71],
[62,60,67,69,67,78,70,0,71],
[62,63,64,72,69,68,59,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,93,65,75,56,70,89,65],
[58,0,74,56,63,67,66,87,72],
[37,56,0,50,42,54,54,83,52],
[65,74,80,0,69,54,84,79,72],
[55,67,88,61,0,76,62,76,93],
[74,63,76,76,54,0,61,81,74],
[60,64,76,46,68,69,0,74,62],
[41,43,47,51,54,49,56,0,62],
[65,58,78,58,37,56,68,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,69,61,72,66,61,73,59],
[59,0,67,64,69,67,63,66,66],
[61,63,0,58,64,67,64,67,68],
[69,66,72,0,68,71,62,64,69],
[58,61,66,62,0,63,57,68,61],
[64,63,63,59,67,0,61,61,56],
[69,67,66,68,73,69,0,74,63],
[57,64,63,66,62,69,56,0,63],
[71,64,62,61,69,74,67,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,66,68,75,71,73,64,77],
[64,0,73,69,70,62,55,68,64],
[64,57,0,72,61,73,56,60,75],
[62,61,58,0,63,69,61,69,61],
[55,60,69,67,0,63,73,58,54],
[59,68,57,61,67,0,61,63,64],
[57,75,74,69,57,69,0,70,59],
[66,62,70,61,72,67,60,0,54],
[53,66,55,69,76,66,71,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,66,66,68,69,75,63],
[61,0,70,67,68,61,65,77,72],
[59,60,0,62,61,59,65,72,55],
[64,63,68,0,58,66,71,64,66],
[64,62,69,72,0,67,77,72,65],
[62,69,71,64,63,0,71,74,61],
[61,65,65,59,53,59,0,65,54],
[55,53,58,66,58,56,65,0,56],
[67,58,75,64,65,69,76,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,71,77,83,77,82,68,76],
[68,0,69,73,71,59,68,61,69],
[59,61,0,60,71,65,65,71,66],
[53,57,70,0,65,72,61,62,67],
[47,59,59,65,0,59,54,59,55],
[53,71,65,58,71,0,65,77,66],
[48,62,65,69,76,65,0,63,71],
[62,69,59,68,71,53,67,0,64],
[54,61,64,63,75,64,59,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,59,51,77,54,60,57,58],
[70,0,71,51,99,76,68,75,60],
[71,59,0,58,73,67,54,54,60],
[79,79,72,0,84,68,73,85,62],
[53,31,57,46,0,65,44,32,38],
[76,54,63,62,65,0,58,62,50],
[70,62,76,57,86,72,0,65,58],
[73,55,76,45,98,68,65,0,68],
[72,70,70,68,92,80,72,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,53,68,63,70,71,66,77],
[52,0,54,69,52,65,75,62,53],
[77,76,0,79,63,70,82,56,65],
[62,61,51,0,53,59,69,66,65],
[67,78,67,77,0,69,76,60,72],
[60,65,60,71,61,0,62,58,63],
[59,55,48,61,54,68,0,57,60],
[64,68,74,64,70,72,73,0,66],
[53,77,65,65,58,67,70,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,43,64,52,44,54,52,34],
[85,0,54,77,56,63,63,66,57],
[87,76,0,87,63,63,64,58,50],
[66,53,43,0,44,61,55,52,36],
[78,74,67,86,0,63,85,39,58],
[86,67,67,69,67,0,75,57,49],
[76,67,66,75,45,55,0,56,57],
[78,64,72,78,91,73,74,0,67],
[96,73,80,94,72,81,73,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,64,74,70,75,76,75,61],
[56,0,62,66,64,75,70,69,67],
[66,68,0,67,68,58,77,68,70],
[56,64,63,0,62,69,73,61,55],
[60,66,62,68,0,64,67,62,63],
[55,55,72,61,66,0,62,72,65],
[54,60,53,57,63,68,0,68,72],
[55,61,62,69,68,58,62,0,59],
[69,63,60,75,67,65,58,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,50,52,62,64,68,58,65],
[75,0,63,55,72,64,70,61,68],
[80,67,0,65,80,77,69,73,74],
[78,75,65,0,74,76,78,66,70],
[68,58,50,56,0,65,58,56,61],
[66,66,53,54,65,0,67,63,63],
[62,60,61,52,72,63,0,61,68],
[72,69,57,64,74,67,69,0,69],
[65,62,56,60,69,67,62,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,65,66,63,51,57,62,56],
[62,0,61,52,60,51,57,47,58],
[65,69,0,67,75,65,69,57,66],
[64,78,63,0,64,64,62,64,73],
[67,70,55,66,0,54,64,63,60],
[79,79,65,66,76,0,72,71,75],
[73,73,61,68,66,58,0,68,66],
[68,83,73,66,67,59,62,0,73],
[74,72,64,57,70,55,64,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,58,56,61,58,46,59,50],
[73,0,68,67,66,72,54,69,60],
[72,62,0,71,71,76,70,69,67],
[74,63,59,0,62,67,56,73,67],
[69,64,59,68,0,65,55,64,59],
[72,58,54,63,65,0,49,71,58],
[84,76,60,74,75,81,0,75,71],
[71,61,61,57,66,59,55,0,54],
[80,70,63,63,71,72,59,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,74,64,62,67,71,61,66],
[59,0,66,66,60,61,61,52,53],
[56,64,0,64,65,65,62,66,67],
[66,64,66,0,59,60,62,50,57],
[68,70,65,71,0,63,61,67,69],
[63,69,65,70,67,0,61,55,76],
[59,69,68,68,69,69,0,54,71],
[69,78,64,80,63,75,76,0,74],
[64,77,63,73,61,54,59,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,68,51,67,61,60,65,55],
[68,0,61,67,73,61,64,69,63],
[62,69,0,63,59,58,56,60,59],
[79,63,67,0,74,58,61,67,68],
[63,57,71,56,0,67,62,66,64],
[69,69,72,72,63,0,61,72,65],
[70,66,74,69,68,69,0,65,62],
[65,61,70,63,64,58,65,0,60],
[75,67,71,62,66,65,68,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,56,48,55,54,62,73,67],
[69,0,34,56,45,39,50,60,54],
[74,96,0,67,64,73,79,72,79],
[82,74,63,0,61,65,68,77,63],
[75,85,66,69,0,63,81,69,86],
[76,91,57,65,67,0,65,75,77],
[68,80,51,62,49,65,0,72,73],
[57,70,58,53,61,55,58,0,63],
[63,76,51,67,44,53,57,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,80,54,44,78,67,55,43],
[53,0,76,52,42,45,56,42,42],
[50,54,0,51,32,54,53,41,43],
[76,78,79,0,55,76,77,66,66],
[86,88,98,75,0,55,56,66,54],
[52,85,76,54,75,0,55,64,43],
[63,74,77,53,74,75,0,43,54],
[75,88,89,64,64,66,87,0,63],
[87,88,87,64,76,87,76,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,63,64,70,71,73,75],
[68,0,74,82,60,77,69,74,56],
[69,56,0,66,52,73,76,74,63],
[67,48,64,0,49,81,76,62,63],
[66,70,78,81,0,73,76,71,44],
[60,53,57,49,57,0,67,52,52],
[59,61,54,54,54,63,0,52,46],
[57,56,56,68,59,78,78,0,50],
[55,74,67,67,86,78,84,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,73,58,69,73,77,59,66],
[67,0,81,66,66,84,69,63,76],
[57,49,0,63,54,65,70,51,60],
[72,64,67,0,64,67,68,63,73],
[61,64,76,66,0,71,77,68,56],
[57,46,65,63,59,0,64,57,69],
[53,61,60,62,53,66,0,68,67],
[71,67,79,67,62,73,62,0,64],
[64,54,70,57,74,61,63,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,62,73,65,58,57,60,60],
[72,0,65,66,71,57,54,51,54],
[68,65,0,67,66,72,68,49,65],
[57,64,63,0,67,65,62,60,46],
[65,59,64,63,0,55,63,50,55],
[72,73,58,65,75,0,69,66,67],
[73,76,62,68,67,61,0,60,62],
[70,79,81,70,80,64,70,0,54],
[70,76,65,84,75,63,68,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,70,73,78,67,65,83,57],
[65,0,59,62,68,67,61,67,66],
[60,71,0,64,63,66,62,68,63],
[57,68,66,0,60,65,61,58,67],
[52,62,67,70,0,62,59,57,56],
[63,63,64,65,68,0,66,66,59],
[65,69,68,69,71,64,0,75,65],
[47,63,62,72,73,64,55,0,55],
[73,64,67,63,74,71,65,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,65,59,69,75,75,77,82],
[69,0,65,65,66,75,71,73,73],
[65,65,0,75,78,73,88,74,80],
[71,65,55,0,78,62,79,77,85],
[61,64,52,52,0,63,67,75,76],
[55,55,57,68,67,0,75,67,65],
[55,59,42,51,63,55,0,63,60],
[53,57,56,53,55,63,67,0,69],
[48,57,50,45,54,65,70,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,75,65,69,69,76,60,74],
[59,0,70,60,69,64,73,58,64],
[55,60,0,52,63,64,69,60,64],
[65,70,78,0,70,72,70,66,64],
[61,61,67,60,0,64,70,59,68],
[61,66,66,58,66,0,68,70,66],
[54,57,61,60,60,62,0,59,66],
[70,72,70,64,71,60,71,0,69],
[56,66,66,66,62,64,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,66,74,80,71,72,59,64],
[62,0,66,65,74,60,64,67,66],
[64,64,0,70,69,67,64,74,71],
[56,65,60,0,75,68,62,67,63],
[50,56,61,55,0,57,62,61,64],
[59,70,63,62,73,0,73,68,59],
[58,66,66,68,68,57,0,62,68],
[71,63,56,63,69,62,68,0,60],
[66,64,59,67,66,71,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,79,62,70,68,62,83,66],
[47,0,56,50,47,57,52,56,51],
[51,74,0,79,59,67,62,83,70],
[68,80,51,0,55,55,46,81,63],
[60,83,71,75,0,52,62,84,64],
[62,73,63,75,78,0,64,67,66],
[68,78,68,84,68,66,0,70,60],
[47,74,47,49,46,63,60,0,52],
[64,79,60,67,66,64,70,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,60,72,57,58,58,74,55],
[71,0,67,81,60,70,66,63,68],
[70,63,0,63,47,58,53,68,56],
[58,49,67,0,56,74,50,61,53],
[73,70,83,74,0,71,72,64,64],
[72,60,72,56,59,0,58,59,63],
[72,64,77,80,58,72,0,72,72],
[56,67,62,69,66,71,58,0,63],
[75,62,74,77,66,67,58,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,61,58,61,60,67,60,75],
[73,0,70,66,69,64,62,69,66],
[69,60,0,64,53,63,76,65,68],
[72,64,66,0,63,66,69,68,75],
[69,61,77,67,0,61,64,71,73],
[70,66,67,64,69,0,70,71,70],
[63,68,54,61,66,60,0,67,71],
[70,61,65,62,59,59,63,0,68],
[55,64,62,55,57,60,59,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,56,65,64,53,56,56,59],
[64,0,53,70,51,62,51,64,71],
[74,77,0,67,74,66,61,77,75],
[65,60,63,0,57,62,51,57,70],
[66,79,56,73,0,60,67,62,70],
[77,68,64,68,70,0,57,76,71],
[74,79,69,79,63,73,0,76,69],
[74,66,53,73,68,54,54,0,69],
[71,59,55,60,60,59,61,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,57,65,80,72,58,69,64],
[72,0,58,61,63,74,68,72,62],
[73,72,0,74,71,61,61,71,74],
[65,69,56,0,70,68,58,68,66],
[50,67,59,60,0,59,62,62,59],
[58,56,69,62,71,0,54,63,67],
[72,62,69,72,68,76,0,74,75],
[61,58,59,62,68,67,56,0,63],
[66,68,56,64,71,63,55,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,38,38,52,90,49,38,51],
[52,0,39,65,67,103,51,66,65],
[92,91,0,78,117,91,65,79,104],
[92,65,52,0,79,104,65,52,65],
[78,63,13,51,0,63,37,38,50],
[40,27,39,26,67,0,39,41,66],
[81,79,65,65,93,91,0,66,79],
[92,64,51,78,92,89,64,0,50],
[79,65,26,65,80,64,51,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,75,78,79,72,78,78,74],
[66,0,67,65,65,63,73,67,59],
[55,63,0,57,70,63,68,66,56],
[52,65,73,0,66,70,74,67,59],
[51,65,60,64,0,64,69,60,56],
[58,67,67,60,66,0,67,69,61],
[52,57,62,56,61,63,0,65,52],
[52,63,64,63,70,61,65,0,64],
[56,71,74,71,74,69,78,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,45,66,87,66,87,66,66],
[87,0,67,65,86,65,65,44,66],
[85,63,0,42,63,63,86,63,64],
[64,65,88,0,87,87,108,87,65],
[43,44,67,43,0,66,109,65,65],
[64,65,67,43,64,0,130,64,86],
[43,65,44,22,21,0,0,22,22],
[64,86,67,43,65,66,108,0,22],
[64,64,66,65,65,44,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,83,92,82,68,64,57,74],
[63,0,49,76,58,76,65,57,74],
[47,81,0,73,66,75,46,74,82],
[38,54,57,0,41,73,31,57,82],
[48,72,64,89,0,66,55,72,74],
[62,54,55,57,64,0,63,72,81],
[66,65,84,99,75,67,0,74,74],
[73,73,56,73,58,58,56,0,66],
[56,56,48,48,56,49,56,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,63,71,62,58,68,83,74],
[63,0,68,78,61,50,60,67,71],
[67,62,0,75,53,65,69,68,81],
[59,52,55,0,52,56,61,56,73],
[68,69,77,78,0,61,79,70,68],
[72,80,65,74,69,0,83,71,78],
[62,70,61,69,51,47,0,69,59],
[47,63,62,74,60,59,61,0,62],
[56,59,49,57,62,52,71,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,56,61,78,60,65,61,62],
[72,0,61,65,81,63,78,62,68],
[74,69,0,61,78,69,72,69,64],
[69,65,69,0,68,70,78,70,66],
[52,49,52,62,0,61,60,59,57],
[70,67,61,60,69,0,72,68,70],
[65,52,58,52,70,58,0,52,58],
[69,68,61,60,71,62,78,0,56],
[68,62,66,64,73,60,72,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,63,52,60,57,53,56,54],
[79,0,68,59,67,63,72,66,65],
[67,62,0,60,68,59,69,61,65],
[78,71,70,0,69,73,77,68,65],
[70,63,62,61,0,58,73,68,67],
[73,67,71,57,72,0,73,70,63],
[77,58,61,53,57,57,0,59,62],
[74,64,69,62,62,60,71,0,64],
[76,65,65,65,63,67,68,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,62,68,62,68,66,55],
[68,0,65,69,70,63,67,72,61],
[69,65,0,68,69,60,64,69,67],
[68,61,62,0,62,56,64,72,70],
[62,60,61,68,0,59,71,69,58],
[68,67,70,74,71,0,61,71,62],
[62,63,66,66,59,69,0,68,61],
[64,58,61,58,61,59,62,0,58],
[75,69,63,60,72,68,69,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,67,60,74,69,70,68,58],
[60,0,66,57,61,55,60,61,58],
[63,64,0,72,70,71,61,69,55],
[70,73,58,0,71,68,70,68,64],
[56,69,60,59,0,53,63,65,61],
[61,75,59,62,77,0,70,73,69],
[60,70,69,60,67,60,0,71,69],
[62,69,61,62,65,57,59,0,54],
[72,72,75,66,69,61,61,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,40,55,59,78,74,58,65],
[67,0,65,67,85,83,101,85,69],
[90,65,0,83,83,88,91,83,90],
[75,63,47,0,91,88,82,84,82],
[71,45,47,39,0,60,64,64,55],
[52,47,42,42,70,0,81,67,58],
[56,29,39,48,66,49,0,47,48],
[72,45,47,46,66,63,83,0,64],
[65,61,40,48,75,72,82,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,80,62,75,68,65,80,70],
[66,0,73,74,73,63,61,70,73],
[50,57,0,68,75,66,54,61,66],
[68,56,62,0,68,68,64,69,66],
[55,57,55,62,0,66,53,57,68],
[62,67,64,62,64,0,55,62,71],
[65,69,76,66,77,75,0,58,74],
[50,60,69,61,73,68,72,0,54],
[60,57,64,64,62,59,56,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,62,58,75,74,62,68,65],
[66,0,56,67,67,74,70,74,64],
[68,74,0,71,79,73,72,68,63],
[72,63,59,0,61,65,63,67,47],
[55,63,51,69,0,62,67,61,57],
[56,56,57,65,68,0,53,58,40],
[68,60,58,67,63,77,0,63,61],
[62,56,62,63,69,72,67,0,53],
[65,66,67,83,73,90,69,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,72,66,59,64,65,66,77],
[66,0,72,69,55,72,74,66,80],
[58,58,0,61,65,58,64,51,74],
[64,61,69,0,61,56,55,53,73],
[71,75,65,69,0,61,66,66,75],
[66,58,72,74,69,0,72,58,73],
[65,56,66,75,64,58,0,59,67],
[64,64,79,77,64,72,71,0,77],
[53,50,56,57,55,57,63,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,68,60,59,64,67,74,70],
[67,0,67,69,60,68,64,68,66],
[62,63,0,63,68,64,67,72,67],
[70,61,67,0,60,63,60,78,61],
[71,70,62,70,0,72,65,79,66],
[66,62,66,67,58,0,61,76,68],
[63,66,63,70,65,69,0,69,65],
[56,62,58,52,51,54,61,0,60],
[60,64,63,69,64,62,65,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,64,59,66,60,71,64,57],
[64,0,59,60,63,69,70,53,65],
[66,71,0,58,78,58,63,56,69],
[71,70,72,0,77,63,74,70,70],
[64,67,52,53,0,53,60,59,58],
[70,61,72,67,77,0,74,66,77],
[59,60,67,56,70,56,0,51,63],
[66,77,74,60,71,64,79,0,64],
[73,65,61,60,72,53,67,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,68,65,66,78,73,64,69],
[58,0,68,55,63,69,70,55,69],
[62,62,0,56,63,61,63,49,70],
[65,75,74,0,64,76,73,65,83],
[64,67,67,66,0,68,70,63,73],
[52,61,69,54,62,0,72,62,59],
[57,60,67,57,60,58,0,55,62],
[66,75,81,65,67,68,75,0,72],
[61,61,60,47,57,71,68,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,65,63,66,67,60,51,54],
[80,0,74,71,82,85,77,65,74],
[65,56,0,66,60,62,66,54,70],
[67,59,64,0,79,82,62,59,72],
[64,48,70,51,0,62,64,54,60],
[63,45,68,48,68,0,66,48,59],
[70,53,64,68,66,64,0,66,65],
[79,65,76,71,76,82,64,0,79],
[76,56,60,58,70,71,65,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,79,67,69,71,78,64,79],
[61,0,78,65,74,74,74,64,73],
[51,52,0,56,57,54,67,60,69],
[63,65,74,0,69,70,80,67,71],
[61,56,73,61,0,60,69,64,68],
[59,56,76,60,70,0,74,64,69],
[52,56,63,50,61,56,0,57,62],
[66,66,70,63,66,66,73,0,75],
[51,57,61,59,62,61,68,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,58,71,66,67,62,64,54],
[68,0,67,61,62,66,59,53,65],
[72,63,0,64,61,72,59,63,51],
[59,69,66,0,64,65,66,62,75],
[64,68,69,66,0,59,60,67,60],
[63,64,58,65,71,0,55,64,55],
[68,71,71,64,70,75,0,60,58],
[66,77,67,68,63,66,70,0,69],
[76,65,79,55,70,75,72,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,54,73,67,62,59,57,61],
[71,0,53,72,74,77,69,69,70],
[76,77,0,68,63,78,79,80,68],
[57,58,62,0,57,67,71,71,64],
[63,56,67,73,0,67,71,77,71],
[68,53,52,63,63,0,71,74,65],
[71,61,51,59,59,59,0,73,64],
[73,61,50,59,53,56,57,0,67],
[69,60,62,66,59,65,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,69,65,48,41,58,36,41],
[91,0,87,78,83,74,97,72,63],
[61,43,0,53,61,42,51,41,34],
[65,52,77,0,72,56,79,58,65],
[82,47,69,58,0,59,73,53,41],
[89,56,88,74,71,0,80,45,50],
[72,33,79,51,57,50,0,40,40],
[94,58,89,72,77,85,90,0,50],
[89,67,96,65,89,80,90,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,30,67,51,67,48,49,67],
[47,0,45,33,67,51,48,49,80],
[100,85,0,67,69,85,51,65,69],
[63,97,63,0,65,65,63,63,81],
[79,63,61,65,0,79,45,63,63],
[63,79,45,65,51,0,63,31,63],
[82,82,79,67,85,67,0,49,66],
[81,81,65,67,67,99,81,0,81],
[63,50,61,49,67,67,64,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,72,75,58,65,62,69,66],
[63,0,71,73,62,68,62,64,71],
[58,59,0,72,60,66,63,64,51],
[55,57,58,0,58,56,54,60,46],
[72,68,70,72,0,68,65,71,67],
[65,62,64,74,62,0,61,72,62],
[68,68,67,76,65,69,0,63,64],
[61,66,66,70,59,58,67,0,65],
[64,59,79,84,63,68,66,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,65,63,71,66,61,75,59],
[69,0,48,65,77,70,69,62,67],
[65,82,0,66,74,74,61,62,63],
[67,65,64,0,71,63,58,66,55],
[59,53,56,59,0,48,53,61,57],
[64,60,56,67,82,0,69,70,70],
[69,61,69,72,77,61,0,79,71],
[55,68,68,64,69,60,51,0,61],
[71,63,67,75,73,60,59,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,53,63,59,79,63,63,64],
[52,0,64,65,62,68,68,62,78],
[77,66,0,72,65,85,78,75,84],
[67,65,58,0,58,77,69,67,64],
[71,68,65,72,0,81,84,65,73],
[51,62,45,53,49,0,64,57,61],
[67,62,52,61,46,66,0,70,54],
[67,68,55,63,65,73,60,0,70],
[66,52,46,66,57,69,76,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,60,44,55,40,43,60,38],
[80,0,69,67,71,50,54,71,53],
[70,61,0,74,60,71,67,76,56],
[86,63,56,0,58,69,59,75,54],
[75,59,70,72,0,71,58,79,61],
[90,80,59,61,59,0,66,77,63],
[87,76,63,71,72,64,0,71,69],
[70,59,54,55,51,53,59,0,60],
[92,77,74,76,69,67,61,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,64,74,88,88,80,82,86],
[26,0,32,41,41,59,44,40,51],
[66,98,0,68,66,84,63,68,71],
[56,89,62,0,79,75,56,60,65],
[42,89,64,51,0,72,72,58,68],
[42,71,46,55,58,0,54,60,52],
[50,86,67,74,58,76,0,69,76],
[48,90,62,70,72,70,61,0,68],
[44,79,59,65,62,78,54,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,55,60,62,57,58,67,47],
[75,0,54,59,63,69,69,79,59],
[75,76,0,72,75,57,73,70,66],
[70,71,58,0,67,51,65,74,48],
[68,67,55,63,0,65,70,70,59],
[73,61,73,79,65,0,84,88,63],
[72,61,57,65,60,46,0,70,58],
[63,51,60,56,60,42,60,0,55],
[83,71,64,82,71,67,72,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,61,78,69,74,73,73,66],
[65,0,55,83,49,65,59,74,74],
[69,75,0,77,59,66,72,64,67],
[52,47,53,0,53,69,61,62,65],
[61,81,71,77,0,67,61,62,78],
[56,65,64,61,63,0,51,66,68],
[57,71,58,69,69,79,0,63,51],
[57,56,66,68,68,64,67,0,77],
[64,56,63,65,52,62,79,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,59,66,57,65,77,60,60],
[71,0,61,65,72,56,74,54,59],
[71,69,0,61,72,62,72,61,63],
[64,65,69,0,67,59,77,61,68],
[73,58,58,63,0,56,64,62,54],
[65,74,68,71,74,0,79,67,65],
[53,56,58,53,66,51,0,54,62],
[70,76,69,69,68,63,76,0,62],
[70,71,67,62,76,65,68,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,63,59,72,64,66,66,65],
[75,0,55,67,74,67,69,64,69],
[67,75,0,63,80,71,71,62,68],
[71,63,67,0,67,67,72,64,65],
[58,56,50,63,0,59,60,64,61],
[66,63,59,63,71,0,67,71,64],
[64,61,59,58,70,63,0,67,72],
[64,66,68,66,66,59,63,0,72],
[65,61,62,65,69,66,58,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,69,87,72,72,76,69,60],
[55,0,60,71,77,73,72,66,66],
[61,70,0,63,76,79,63,75,66],
[43,59,67,0,70,67,58,67,56],
[58,53,54,60,0,70,49,59,56],
[58,57,51,63,60,0,58,65,53],
[54,58,67,72,81,72,0,74,60],
[61,64,55,63,71,65,56,0,58],
[70,64,64,74,74,77,70,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,70,56,62,63,60,69,66],
[71,0,67,65,69,59,57,69,57],
[60,63,0,55,60,57,60,69,57],
[74,65,75,0,76,71,69,73,64],
[68,61,70,54,0,60,54,70,56],
[67,71,73,59,70,0,69,67,66],
[70,73,70,61,76,61,0,68,68],
[61,61,61,57,60,63,62,0,58],
[64,73,73,66,74,64,62,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,79,52,79,66,63,59,61],
[71,0,65,64,72,65,69,61,66],
[51,65,0,56,60,59,55,48,60],
[78,66,74,0,74,70,76,67,60],
[51,58,70,56,0,49,51,50,61],
[64,65,71,60,81,0,66,52,60],
[67,61,75,54,79,64,0,56,68],
[71,69,82,63,80,78,74,0,73],
[69,64,70,70,69,70,62,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,56,61,58,58,47,54,69],
[76,0,68,71,64,75,62,68,81],
[74,62,0,58,69,63,59,53,82],
[69,59,72,0,57,72,57,67,70],
[72,66,61,73,0,71,61,63,74],
[72,55,67,58,59,0,54,63,55],
[83,68,71,73,69,76,0,64,76],
[76,62,77,63,67,67,66,0,76],
[61,49,48,60,56,75,54,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,68,65,63,73,63,73,73],
[62,0,81,59,72,68,70,71,80],
[62,49,0,63,62,56,59,63,67],
[65,71,67,0,70,67,61,61,59],
[67,58,68,60,0,57,68,56,76],
[57,62,74,63,73,0,64,72,79],
[67,60,71,69,62,66,0,68,74],
[57,59,67,69,74,58,62,0,75],
[57,50,63,71,54,51,56,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,97,33,31,66,81,32,47],
[114,0,97,50,64,66,97,33,48],
[33,33,0,33,16,50,50,49,32],
[97,80,97,0,80,98,114,80,64],
[99,66,114,50,0,83,83,83,81],
[64,64,80,32,47,0,48,32,31],
[49,33,80,16,47,82,0,49,47],
[98,97,81,50,47,98,81,0,64],
[83,82,98,66,49,99,83,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,66,61,61,44,61,54,58],
[75,0,71,76,61,50,55,65,69],
[64,59,0,68,72,50,70,56,60],
[69,54,62,0,64,44,65,57,54],
[69,69,58,66,0,45,67,50,49],
[86,80,80,86,85,0,90,68,64],
[69,75,60,65,63,40,0,42,52],
[76,65,74,73,80,62,88,0,59],
[72,61,70,76,81,66,78,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,71,65,61,68,64,62,64],
[62,0,67,70,65,58,62,55,53],
[59,63,0,67,67,57,66,64,56],
[65,60,63,0,63,60,54,65,52],
[69,65,63,67,0,66,57,65,62],
[62,72,73,70,64,0,58,65,56],
[66,68,64,76,73,72,0,69,68],
[68,75,66,65,65,65,61,0,61],
[66,77,74,78,68,74,62,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,80,78,65,57,81,93,56],
[63,0,81,64,49,43,62,94,69],
[50,49,0,62,43,72,71,89,55],
[52,66,68,0,45,57,63,81,71],
[65,81,87,85,0,64,74,95,63],
[73,87,58,73,66,0,102,109,71],
[49,68,59,67,56,28,0,74,55],
[37,36,41,49,35,21,56,0,50],
[74,61,75,59,67,59,75,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,71,79,49,57,51,50,42],
[73,0,67,80,55,55,54,67,60],
[59,63,0,64,56,66,43,74,47],
[51,50,66,0,59,60,40,60,43],
[81,75,74,71,0,63,54,65,71],
[73,75,64,70,67,0,56,68,65],
[79,76,87,90,76,74,0,68,64],
[80,63,56,70,65,62,62,0,67],
[88,70,83,87,59,65,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,65,43,42,64,43,64,64],
[66,0,66,66,63,130,88,87,66],
[65,64,0,42,63,64,43,85,63],
[87,64,88,0,85,85,64,86,109],
[88,67,67,45,0,67,67,67,45],
[66,0,66,45,63,0,65,66,66],
[87,42,87,66,63,65,0,87,87],
[66,43,45,44,63,64,43,0,44],
[66,64,67,21,85,64,43,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,75,76,68,63,66,75,67],
[52,0,66,74,64,77,67,79,78],
[55,64,0,74,63,61,73,64,74],
[54,56,56,0,57,58,61,63,57],
[62,66,67,73,0,73,75,70,76],
[67,53,69,72,57,0,73,70,79],
[64,63,57,69,55,57,0,68,62],
[55,51,66,67,60,60,62,0,71],
[63,52,56,73,54,51,68,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,82,67,75,77,63,69,61],
[33,0,84,39,62,63,43,61,56],
[48,46,0,48,47,53,35,52,60],
[63,91,82,0,78,54,63,82,66],
[55,68,83,52,0,62,62,69,61],
[53,67,77,76,68,0,66,72,69],
[67,87,95,67,68,64,0,86,69],
[61,69,78,48,61,58,44,0,64],
[69,74,70,64,69,61,61,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,68,62,71,68,67,65,73],
[61,0,59,50,55,58,59,56,59],
[62,71,0,59,60,59,70,59,58],
[68,80,71,0,64,72,68,57,68],
[59,75,70,66,0,62,72,67,64],
[62,72,71,58,68,0,73,67,75],
[63,71,60,62,58,57,0,63,62],
[65,74,71,73,63,63,67,0,61],
[57,71,72,62,66,55,68,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,62,49,87,58,30,40,87],
[70,0,70,62,69,70,70,70,91],
[68,60,0,69,88,90,72,48,98],
[81,68,61,0,89,89,81,60,100],
[43,61,42,41,0,51,33,20,80],
[72,60,40,41,79,0,42,39,70],
[100,60,58,49,97,88,0,78,79],
[90,60,82,70,110,91,52,0,110],
[43,39,32,30,50,60,51,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,66,61,57,63,64,62,55],
[74,0,71,68,61,66,71,78,73],
[64,59,0,64,56,61,62,72,63],
[69,62,66,0,62,57,65,71,63],
[73,69,74,68,0,57,68,73,66],
[67,64,69,73,73,0,76,69,65],
[66,59,68,65,62,54,0,63,58],
[68,52,58,59,57,61,67,0,54],
[75,57,67,67,64,65,72,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,54,50,61,53,61,68,59],
[75,0,58,58,62,60,60,72,68],
[76,72,0,53,53,63,64,68,80],
[80,72,77,0,68,71,65,66,69],
[69,68,77,62,0,70,77,64,74],
[77,70,67,59,60,0,61,81,73],
[69,70,66,65,53,69,0,72,74],
[62,58,62,64,66,49,58,0,71],
[71,62,50,61,56,57,56,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,60,63,69,62,76,74],
[63,0,64,61,66,63,67,79,72],
[62,66,0,63,68,66,62,66,78],
[70,69,67,0,65,69,65,77,72],
[67,64,62,65,0,65,68,78,75],
[61,67,64,61,65,0,70,68,82],
[68,63,68,65,62,60,0,69,71],
[54,51,64,53,52,62,61,0,68],
[56,58,52,58,55,48,59,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,74,91,94,80,77,72,81],
[70,0,75,82,85,71,63,69,72],
[56,55,0,69,65,66,67,47,58],
[39,48,61,0,48,52,37,43,50],
[36,45,65,82,0,63,53,45,60],
[50,59,64,78,67,0,60,61,70],
[53,67,63,93,77,70,0,57,75],
[58,61,83,87,85,69,73,0,72],
[49,58,72,80,70,60,55,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,43,45,43,43,0,0,43],
[130,0,88,88,130,43,43,43,88],
[87,42,0,87,42,0,42,42,42],
[85,42,43,0,85,43,43,85,85],
[87,0,88,45,0,0,0,0,45],
[87,87,130,87,130,0,87,42,87],
[130,87,88,87,130,43,0,85,130],
[130,87,88,45,130,88,45,0,130],
[87,42,88,45,85,43,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,43,61,64,63,64,59,65],
[74,0,66,80,78,74,90,65,75],
[87,64,0,89,91,78,85,73,75],
[69,50,41,0,58,62,74,67,63],
[66,52,39,72,0,51,72,56,54],
[67,56,52,68,79,0,79,62,62],
[66,40,45,56,58,51,0,53,62],
[71,65,57,63,74,68,77,0,71],
[65,55,55,67,76,68,68,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,60,76,62,67,57,71,63],
[78,0,62,81,67,88,74,72,82],
[70,68,0,78,61,67,62,71,74],
[54,49,52,0,54,59,51,59,59],
[68,63,69,76,0,61,70,75,61],
[63,42,63,71,69,0,65,67,71],
[73,56,68,79,60,65,0,66,71],
[59,58,59,71,55,63,64,0,57],
[67,48,56,71,69,59,59,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,75,55,77,60,89,71,80],
[55,0,83,64,78,70,62,72,84],
[55,47,0,55,64,44,62,49,67],
[75,66,75,0,63,71,64,58,57],
[53,52,66,67,0,43,84,56,71],
[70,60,86,59,87,0,83,50,52],
[41,68,68,66,46,47,0,49,59],
[59,58,81,72,74,80,81,0,88],
[50,46,63,73,59,78,71,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,63,77,77,71,68,65,53],
[72,0,61,70,71,61,77,73,54],
[67,69,0,65,67,62,68,69,56],
[53,60,65,0,51,67,69,67,52],
[53,59,63,79,0,62,69,70,56],
[59,69,68,63,68,0,67,73,65],
[62,53,62,61,61,63,0,68,60],
[65,57,61,63,60,57,62,0,54],
[77,76,74,78,74,65,70,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,70,72,75,73,67,72,58],
[67,0,69,66,75,75,65,62,70],
[60,61,0,71,75,65,68,67,60],
[58,64,59,0,66,67,56,57,57],
[55,55,55,64,0,63,59,59,62],
[57,55,65,63,67,0,58,60,63],
[63,65,62,74,71,72,0,68,69],
[58,68,63,73,71,70,62,0,66],
[72,60,70,73,68,67,61,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,69,77,69,72,67,64,84],
[80,0,70,76,77,70,73,62,78],
[61,60,0,68,72,75,73,76,74],
[53,54,62,0,70,59,67,66,55],
[61,53,58,60,0,67,71,65,70],
[58,60,55,71,63,0,71,59,60],
[63,57,57,63,59,59,0,48,68],
[66,68,54,64,65,71,82,0,71],
[46,52,56,75,60,70,62,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,76,75,57,62,64,75,60],
[67,0,71,84,67,66,68,68,64],
[54,59,0,63,52,56,58,69,56],
[55,46,67,0,63,59,65,60,61],
[73,63,78,67,0,73,72,66,68],
[68,64,74,71,57,0,49,65,41],
[66,62,72,65,58,81,0,68,56],
[55,62,61,70,64,65,62,0,67],
[70,66,74,69,62,89,74,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,59,68,70,70,70,73,62],
[53,0,64,54,73,53,64,70,55],
[71,66,0,67,71,59,61,69,65],
[62,76,63,0,77,60,72,77,71],
[60,57,59,53,0,50,58,71,57],
[60,77,71,70,80,0,75,73,80],
[60,66,69,58,72,55,0,65,67],
[57,60,61,53,59,57,65,0,62],
[68,75,65,59,73,50,63,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,61,64,73,71,61,69,63],
[66,0,69,64,74,77,67,63,72],
[69,61,0,64,62,73,61,63,68],
[66,66,66,0,72,72,65,64,66],
[57,56,68,58,0,71,62,68,61],
[59,53,57,58,59,0,51,61,56],
[69,63,69,65,68,79,0,61,65],
[61,67,67,66,62,69,69,0,65],
[67,58,62,64,69,74,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,62,65,65,67,65,65,66],
[71,0,69,75,65,78,62,64,61],
[68,61,0,78,67,64,66,59,66],
[65,55,52,0,66,58,57,66,58],
[65,65,63,64,0,65,63,63,65],
[63,52,66,72,65,0,57,61,59],
[65,68,64,73,67,73,0,69,59],
[65,66,71,64,67,69,61,0,63],
[64,69,64,72,65,71,71,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,74,73,70,83,63,74,75],
[55,0,66,57,58,71,64,57,64],
[56,64,0,63,64,65,61,61,61],
[57,73,67,0,62,73,67,75,63],
[60,72,66,68,0,75,56,64,66],
[47,59,65,57,55,0,60,49,61],
[67,66,69,63,74,70,0,63,68],
[56,73,69,55,66,81,67,0,59],
[55,66,69,67,64,69,62,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,55,44,56,56,50,47,61],
[79,0,63,70,62,78,64,60,80],
[75,67,0,62,59,65,54,59,69],
[86,60,68,0,79,63,71,69,82],
[74,68,71,51,0,70,58,66,69],
[74,52,65,67,60,0,69,58,74],
[80,66,76,59,72,61,0,56,78],
[83,70,71,61,64,72,74,0,84],
[69,50,61,48,61,56,52,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,73,74,56,68,62,72,64],
[56,0,60,60,59,62,60,68,48],
[57,70,0,73,60,62,59,65,61],
[56,70,57,0,52,52,52,63,53],
[74,71,70,78,0,65,80,76,68],
[62,68,68,78,65,0,72,67,64],
[68,70,71,78,50,58,0,68,62],
[58,62,65,67,54,63,62,0,44],
[66,82,69,77,62,66,68,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,65,65,42,39,46,52,71],
[59,0,48,64,33,58,53,57,63],
[65,82,0,72,48,64,75,66,64],
[65,66,58,0,50,60,76,54,71],
[88,97,82,80,0,82,59,68,78],
[91,72,66,70,48,0,60,59,97],
[84,77,55,54,71,70,0,66,62],
[78,73,64,76,62,71,64,0,72],
[59,67,66,59,52,33,68,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,71,76,65,70,69,69,66],
[57,0,60,69,67,70,63,59,60],
[59,70,0,71,65,63,72,63,56],
[54,61,59,0,62,67,59,60,55],
[65,63,65,68,0,69,64,69,52],
[60,60,67,63,61,0,59,61,64],
[61,67,58,71,66,71,0,52,63],
[61,71,67,70,61,69,78,0,62],
[64,70,74,75,78,66,67,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,63,68,80,68,54,74,62],
[59,0,52,69,82,54,71,64,53],
[67,78,0,70,71,59,67,76,66],
[62,61,60,0,82,60,76,66,61],
[50,48,59,48,0,55,40,54,53],
[62,76,71,70,75,0,64,76,58],
[76,59,63,54,90,66,0,70,66],
[56,66,54,64,76,54,60,0,47],
[68,77,64,69,77,72,64,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,59,70,60,59,67,68,63],
[66,0,65,72,64,63,70,68,62],
[71,65,0,70,64,64,70,67,62],
[60,58,60,0,56,60,66,61,58],
[70,66,66,74,0,62,71,70,68],
[71,67,66,70,68,0,71,67,65],
[63,60,60,64,59,59,0,66,58],
[62,62,63,69,60,63,64,0,60],
[67,68,68,72,62,65,72,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,80,75,75,65,68,72,70],
[55,0,69,58,70,64,52,82,68],
[50,61,0,49,70,65,45,75,65],
[55,72,81,0,70,73,55,83,63],
[55,60,60,60,0,69,58,67,80],
[65,66,65,57,61,0,58,80,73],
[62,78,85,75,72,72,0,83,83],
[58,48,55,47,63,50,47,0,64],
[60,62,65,67,50,57,47,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,76,72,62,60,62,80,63],
[56,0,67,61,57,57,55,71,67],
[54,63,0,53,55,57,52,66,67],
[58,69,77,0,64,59,69,81,80],
[68,73,75,66,0,73,65,79,68],
[70,73,73,71,57,0,67,73,77],
[68,75,78,61,65,63,0,82,74],
[50,59,64,49,51,57,48,0,63],
[67,63,63,50,62,53,56,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,66,55,71,60,59,32,71],
[74,0,61,52,98,68,65,56,81],
[64,69,0,65,84,68,77,65,75],
[75,78,65,0,96,69,63,54,79],
[59,32,46,34,0,61,65,35,70],
[70,62,62,61,69,0,83,67,95],
[71,65,53,67,65,47,0,37,74],
[98,74,65,76,95,63,93,0,92],
[59,49,55,51,60,35,56,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,73,66,69,70,65,69,69],
[60,0,66,63,61,53,61,62,65],
[57,64,0,61,55,58,58,59,62],
[64,67,69,0,68,62,66,62,64],
[61,69,75,62,0,68,65,74,71],
[60,77,72,68,62,0,64,63,70],
[65,69,72,64,65,66,0,64,70],
[61,68,71,68,56,67,66,0,67],
[61,65,68,66,59,60,60,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,66,55,66,87,66,66,43],
[75,0,54,66,74,76,53,51,63],
[64,76,0,54,75,67,75,76,75],
[75,64,76,0,98,77,74,74,51],
[64,56,55,32,0,53,51,63,61],
[43,54,63,53,77,0,76,74,74],
[64,77,55,56,79,54,0,77,50],
[64,79,54,56,67,56,53,0,51],
[87,67,55,79,69,56,80,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,63,57,55,62,69,70,63],
[65,0,65,56,68,63,64,79,64],
[67,65,0,63,60,59,67,72,63],
[73,74,67,0,71,63,72,79,64],
[75,62,70,59,0,66,75,78,68],
[68,67,71,67,64,0,73,72,67],
[61,66,63,58,55,57,0,69,61],
[60,51,58,51,52,58,61,0,49],
[67,66,67,66,62,63,69,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,52,64,57,71,68,60,57],
[71,0,65,71,82,77,78,71,62],
[78,65,0,69,68,78,74,88,73],
[66,59,61,0,87,79,78,73,73],
[73,48,62,43,0,56,63,58,55],
[59,53,52,51,74,0,71,67,63],
[62,52,56,52,67,59,0,58,57],
[70,59,42,57,72,63,72,0,58],
[73,68,57,57,75,67,73,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,63,57,60,61,50,61,48],
[74,0,84,77,65,75,67,82,79],
[67,46,0,64,69,73,62,69,69],
[73,53,66,0,57,69,59,66,59],
[70,65,61,73,0,79,63,76,75],
[69,55,57,61,51,0,57,71,64],
[80,63,68,71,67,73,0,76,64],
[69,48,61,64,54,59,54,0,47],
[82,51,61,71,55,66,66,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,72,63,66,71,67,64,80],
[71,0,77,70,70,73,62,79,73],
[58,53,0,51,57,62,58,60,66],
[67,60,79,0,69,68,70,65,73],
[64,60,73,61,0,71,61,59,62],
[59,57,68,62,59,0,63,58,62],
[63,68,72,60,69,67,0,62,71],
[66,51,70,65,71,72,68,0,65],
[50,57,64,57,68,68,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,62,56,58,48,76,69,45],
[82,0,70,74,51,64,59,72,58],
[68,60,0,66,51,55,54,63,56],
[74,56,64,0,64,85,69,68,65],
[72,79,79,66,0,71,71,59,63],
[82,66,75,45,59,0,66,60,43],
[54,71,76,61,59,64,0,79,59],
[61,58,67,62,71,70,51,0,63],
[85,72,74,65,67,87,71,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,66,73,54,69,65,55,70],
[67,0,69,74,63,63,67,67,71],
[64,61,0,68,56,51,69,57,62],
[57,56,62,0,49,57,60,57,53],
[76,67,74,81,0,65,68,70,73],
[61,67,79,73,65,0,64,69,70],
[65,63,61,70,62,66,0,66,68],
[75,63,73,73,60,61,64,0,72],
[60,59,68,77,57,60,62,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,71,68,72,64,65,48,60],
[52,0,49,58,53,52,61,46,60],
[59,81,0,68,64,63,70,52,65],
[62,72,62,0,63,61,68,66,70],
[58,77,66,67,0,59,61,61,69],
[66,78,67,69,71,0,73,55,63],
[65,69,60,62,69,57,0,49,60],
[82,84,78,64,69,75,81,0,68],
[70,70,65,60,61,67,70,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,57,67,65,88,63,65,71],
[65,0,69,73,60,69,67,81,69],
[73,61,0,75,67,76,55,69,73],
[63,57,55,0,63,68,62,56,59],
[65,70,63,67,0,75,58,72,62],
[42,61,54,62,55,0,61,67,62],
[67,63,75,68,72,69,0,79,67],
[65,49,61,74,58,63,51,0,60],
[59,61,57,71,68,68,63,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,60,56,63,66,57,62,65],
[66,0,61,63,63,59,72,60,66],
[70,69,0,66,62,69,64,59,68],
[74,67,64,0,64,74,68,68,73],
[67,67,68,66,0,68,64,68,65],
[64,71,61,56,62,0,67,60,68],
[73,58,66,62,66,63,0,67,72],
[68,70,71,62,62,70,63,0,64],
[65,64,62,57,65,62,58,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,50,51,60,62,60,66,48],
[81,0,76,69,78,87,84,82,65],
[80,54,0,78,79,75,75,69,54],
[79,61,52,0,70,74,70,68,56],
[70,52,51,60,0,76,59,58,51],
[68,43,55,56,54,0,68,67,45],
[70,46,55,60,71,62,0,70,70],
[64,48,61,62,72,63,60,0,51],
[82,65,76,74,79,85,60,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,78,69,87,71,52,71,73],
[64,0,75,70,80,77,48,64,57],
[52,55,0,70,66,54,42,44,61],
[61,60,60,0,65,55,43,45,56],
[43,50,64,65,0,62,26,50,55],
[59,53,76,75,68,0,45,56,78],
[78,82,88,87,104,85,0,60,91],
[59,66,86,85,80,74,70,0,74],
[57,73,69,74,75,52,39,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,50,39,53,47,70,45,57],
[72,0,41,45,52,51,63,54,56],
[80,89,0,70,63,67,69,73,64],
[91,85,60,0,79,60,82,72,81],
[77,78,67,51,0,53,63,55,60],
[83,79,63,70,77,0,78,77,69],
[60,67,61,48,67,52,0,69,78],
[85,76,57,58,75,53,61,0,68],
[73,74,66,49,70,61,52,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,65,78,64,66,85,63,74],
[63,0,63,76,52,66,74,70,54],
[65,67,0,80,64,54,65,68,59],
[52,54,50,0,40,33,67,40,58],
[66,78,66,90,0,59,86,59,69],
[64,64,76,97,71,0,78,65,63],
[45,56,65,63,44,52,0,52,55],
[67,60,62,90,71,65,78,0,78],
[56,76,71,72,61,67,75,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,97,81,64,95,84,72,81],
[43,0,70,70,57,52,69,65,68],
[33,60,0,49,42,67,46,54,59],
[49,60,81,0,56,63,70,78,67],
[66,73,88,74,0,69,55,80,52],
[35,78,63,67,61,0,70,73,77],
[46,61,84,60,75,60,0,67,83],
[58,65,76,52,50,57,63,0,65],
[49,62,71,63,78,53,47,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,61,68,63,66,58,62,67],
[65,0,64,62,65,68,62,68,67],
[69,66,0,80,62,66,67,72,66],
[62,68,50,0,51,53,53,51,59],
[67,65,68,79,0,66,65,70,65],
[64,62,64,77,64,0,64,63,71],
[72,68,63,77,65,66,0,68,59],
[68,62,58,79,60,67,62,0,66],
[63,63,64,71,65,59,71,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,91,51,60,89,53,63,61],
[71,0,82,52,68,88,51,60,70],
[39,48,0,41,57,86,48,37,49],
[79,78,89,0,65,99,79,80,90],
[70,62,73,65,0,62,43,43,72],
[41,42,44,31,68,0,50,60,53],
[77,79,82,51,87,80,0,53,81],
[67,70,93,50,87,70,77,0,60],
[69,60,81,40,58,77,49,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,45,96,62,43,61,82,64],
[65,0,59,94,59,66,70,61,62],
[85,71,0,111,78,86,83,85,60],
[34,36,19,0,42,60,41,59,19],
[68,71,52,88,0,53,53,70,60],
[87,64,44,70,77,0,61,54,36],
[69,60,47,89,77,69,0,79,71],
[48,69,45,71,60,76,51,0,44],
[66,68,70,111,70,94,59,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,60,70,47,46,69,52,60],
[82,0,61,74,60,57,63,65,82],
[70,69,0,86,59,71,64,59,84],
[60,56,44,0,51,51,51,36,64],
[83,70,71,79,0,64,63,64,66],
[84,73,59,79,66,0,71,68,81],
[61,67,66,79,67,59,0,58,79],
[78,65,71,94,66,62,72,0,78],
[70,48,46,66,64,49,51,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,66,70,71,62,57,72,71],
[67,0,72,60,68,50,59,65,72],
[64,58,0,67,65,61,55,65,67],
[60,70,63,0,68,61,67,68,70],
[59,62,65,62,0,65,59,74,62],
[68,80,69,69,65,0,71,66,69],
[73,71,75,63,71,59,0,68,80],
[58,65,65,62,56,64,62,0,59],
[59,58,63,60,68,61,50,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,55,60,64,58,63,60,64],
[67,0,60,71,65,60,71,66,58],
[75,70,0,78,71,67,66,59,67],
[70,59,52,0,60,50,61,52,53],
[66,65,59,70,0,61,68,58,64],
[72,70,63,80,69,0,70,59,70],
[67,59,64,69,62,60,0,66,63],
[70,64,71,78,72,71,64,0,68],
[66,72,63,77,66,60,67,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,59,56,60,58,64,51,57],
[69,0,72,56,84,70,73,68,69],
[71,58,0,59,52,67,66,49,47],
[74,74,71,0,70,64,66,64,66],
[70,46,78,60,0,59,61,52,68],
[72,60,63,66,71,0,74,50,64],
[66,57,64,64,69,56,0,49,59],
[79,62,81,66,78,80,81,0,71],
[73,61,83,64,62,66,71,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,67,73,65,66,58,73,68],
[77,0,71,87,62,60,71,77,67],
[63,59,0,70,65,70,61,67,65],
[57,43,60,0,55,57,46,64,60],
[65,68,65,75,0,61,71,72,70],
[64,70,60,73,69,0,65,71,66],
[72,59,69,84,59,65,0,76,70],
[57,53,63,66,58,59,54,0,67],
[62,63,65,70,60,64,60,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,58,65,61,66,67,63,54],
[63,0,66,63,59,73,62,56,58],
[72,64,0,68,64,71,70,64,74],
[65,67,62,0,64,65,67,58,59],
[69,71,66,66,0,78,69,65,61],
[64,57,59,65,52,0,58,47,52],
[63,68,60,63,61,72,0,63,62],
[67,74,66,72,65,83,67,0,65],
[76,72,56,71,69,78,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,76,63,68,63,71,75,86],
[61,0,68,70,65,60,70,61,68],
[54,62,0,70,62,73,72,70,75],
[67,60,60,0,61,70,66,59,80],
[62,65,68,69,0,69,71,68,76],
[67,70,57,60,61,0,69,62,72],
[59,60,58,64,59,61,0,64,68],
[55,69,60,71,62,68,66,0,64],
[44,62,55,50,54,58,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,62,56,50,42,57,63,57],
[74,0,70,61,70,59,68,62,66],
[68,60,0,59,44,53,67,70,55],
[74,69,71,0,60,46,75,65,54],
[80,60,86,70,0,58,69,82,69],
[88,71,77,84,72,0,73,77,60],
[73,62,63,55,61,57,0,66,56],
[67,68,60,65,48,53,64,0,46],
[73,64,75,76,61,70,74,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,56,57,59,60,55,54,57],
[78,0,78,61,70,71,69,65,74],
[74,52,0,50,61,59,63,55,60],
[73,69,80,0,65,64,65,62,62],
[71,60,69,65,0,67,73,59,68],
[70,59,71,66,63,0,59,61,62],
[75,61,67,65,57,71,0,61,60],
[76,65,75,68,71,69,69,0,72],
[73,56,70,68,62,68,70,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,56,64,60,68,72,63,60],
[78,0,75,75,78,72,78,70,63],
[74,55,0,73,66,64,74,67,71],
[66,55,57,0,56,77,74,69,66],
[70,52,64,74,0,69,74,70,69],
[62,58,66,53,61,0,72,65,62],
[58,52,56,56,56,58,0,55,59],
[67,60,63,61,60,65,75,0,66],
[70,67,59,64,61,68,71,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,82,68,79,75,72,65,75],
[57,0,63,55,66,62,69,40,57],
[48,67,0,76,69,69,76,65,68],
[62,75,54,0,68,72,78,54,50],
[51,64,61,62,0,74,83,49,66],
[55,68,61,58,56,0,65,43,65],
[58,61,54,52,47,65,0,53,62],
[65,90,65,76,81,87,77,0,80],
[55,73,62,80,64,65,68,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,62,68,55,65,57,61,62],
[55,0,58,67,51,62,66,64,64],
[68,72,0,66,75,68,60,78,62],
[62,63,64,0,63,65,52,58,60],
[75,79,55,67,0,64,54,67,64],
[65,68,62,65,66,0,50,68,60],
[73,64,70,78,76,80,0,78,73],
[69,66,52,72,63,62,52,0,67],
[68,66,68,70,66,70,57,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,60,61,61,54,69,58,46],
[76,0,76,76,64,70,69,65,59],
[70,54,0,69,56,59,69,55,53],
[69,54,61,0,55,65,51,53,44],
[69,66,74,75,0,65,70,58,61],
[76,60,71,65,65,0,65,56,53],
[61,61,61,79,60,65,0,63,57],
[72,65,75,77,72,74,67,0,69],
[84,71,77,86,69,77,73,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,70,67,66,60,70,67,70],
[61,0,62,62,62,62,71,63,61],
[60,68,0,70,58,66,65,63,67],
[63,68,60,0,65,65,78,66,64],
[64,68,72,65,0,62,70,72,70],
[70,68,64,65,68,0,74,64,62],
[60,59,65,52,60,56,0,59,62],
[63,67,67,64,58,66,71,0,64],
[60,69,63,66,60,68,68,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,51,56,43,46,71,57,48],
[74,0,52,64,71,64,68,66,65],
[79,78,0,79,50,64,79,60,57],
[74,66,51,0,60,73,81,63,74],
[87,59,80,70,0,67,72,57,60],
[84,66,66,57,63,0,72,67,68],
[59,62,51,49,58,58,0,54,57],
[73,64,70,67,73,63,76,0,72],
[82,65,73,56,70,62,73,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,62,54,56,54,64,55,57],
[73,0,66,76,61,60,59,52,57],
[68,64,0,68,60,63,67,51,62],
[76,54,62,0,67,52,59,57,71],
[74,69,70,63,0,68,70,70,72],
[76,70,67,78,62,0,72,65,67],
[66,71,63,71,60,58,0,51,63],
[75,78,79,73,60,65,79,0,71],
[73,73,68,59,58,63,67,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,65,63,70,66,63,76,67],
[59,0,65,65,61,70,68,67,63],
[65,65,0,64,68,69,56,67,62],
[67,65,66,0,61,66,64,63,62],
[60,69,62,69,0,67,63,67,61],
[64,60,61,64,63,0,58,60,61],
[67,62,74,66,67,72,0,76,73],
[54,63,63,67,63,70,54,0,61],
[63,67,68,68,69,69,57,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,109,67,74,88,105,65,87],
[41,0,87,56,41,64,65,62,64],
[21,43,0,49,35,37,42,33,49],
[63,74,81,0,59,83,91,63,76],
[56,89,95,71,0,67,80,60,50],
[42,66,93,47,63,0,73,54,71],
[25,65,88,39,50,57,0,69,64],
[65,68,97,67,70,76,61,0,82],
[43,66,81,54,80,59,66,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,81,74,67,66,68,64,71],
[70,0,70,93,71,62,63,68,70],
[49,60,0,49,48,44,64,53,58],
[56,37,81,0,53,58,74,71,69],
[63,59,82,77,0,62,70,61,71],
[64,68,86,72,68,0,69,69,79],
[62,67,66,56,60,61,0,54,60],
[66,62,77,59,69,61,76,0,70],
[59,60,72,61,59,51,70,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,77,64,66,78,61,70,68],
[60,0,65,69,64,72,67,64,71],
[53,65,0,60,53,62,66,55,69],
[66,61,70,0,60,63,59,58,71],
[64,66,77,70,0,78,68,66,67],
[52,58,68,67,52,0,51,59,62],
[69,63,64,71,62,79,0,67,72],
[60,66,75,72,64,71,63,0,73],
[62,59,61,59,63,68,58,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,64,60,65,59,55,71,65],
[72,0,75,64,64,73,71,72,67],
[66,55,0,57,67,71,74,69,59],
[70,66,73,0,68,72,78,64,68],
[65,66,63,62,0,64,66,68,56],
[71,57,59,58,66,0,62,62,67],
[75,59,56,52,64,68,0,68,68],
[59,58,61,66,62,68,62,0,58],
[65,63,71,62,74,63,62,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,59,46,57,54,45,59,56],
[85,0,82,78,67,67,60,70,68],
[71,48,0,52,73,63,69,60,63],
[84,52,78,0,74,59,66,59,71],
[73,63,57,56,0,67,63,57,66],
[76,63,67,71,63,0,66,56,62],
[85,70,61,64,67,64,0,75,76],
[71,60,70,71,73,74,55,0,61],
[74,62,67,59,64,68,54,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,71,59,60,55,62,59,62],
[73,0,53,49,66,49,53,54,61],
[59,77,0,61,61,65,56,51,71],
[71,81,69,0,68,57,75,68,76],
[70,64,69,62,0,51,71,47,59],
[75,81,65,73,79,0,72,74,57],
[68,77,74,55,59,58,0,60,57],
[71,76,79,62,83,56,70,0,67],
[68,69,59,54,71,73,73,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,77,74,59,71,67,71,56],
[72,0,66,66,67,62,63,58,68],
[53,64,0,57,62,63,66,62,54],
[56,64,73,0,63,70,66,77,60],
[71,63,68,67,0,68,72,73,63],
[59,68,67,60,62,0,67,73,54],
[63,67,64,64,58,63,0,86,58],
[59,72,68,53,57,57,44,0,57],
[74,62,76,70,67,76,72,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,71,67,67,68,66,77,59],
[55,0,69,66,59,63,69,78,56],
[59,61,0,68,66,63,65,68,60],
[63,64,62,0,65,65,73,66,67],
[63,71,64,65,0,63,55,64,61],
[62,67,67,65,67,0,68,77,73],
[64,61,65,57,75,62,0,76,60],
[53,52,62,64,66,53,54,0,57],
[71,74,70,63,69,57,70,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,60,65,53,65,59,62,47],
[81,0,74,69,66,58,69,62,66],
[70,56,0,65,60,61,57,60,56],
[65,61,65,0,63,63,56,67,61],
[77,64,70,67,0,76,69,65,63],
[65,72,69,67,54,0,61,68,65],
[71,61,73,74,61,69,0,70,66],
[68,68,70,63,65,62,60,0,59],
[83,64,74,69,67,65,64,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,65,63,53,70,57,66,65],
[70,0,72,68,76,77,66,69,65],
[65,58,0,68,67,70,54,73,61],
[67,62,62,0,64,70,59,72,63],
[77,54,63,66,0,73,66,66,65],
[60,53,60,60,57,0,60,60,58],
[73,64,76,71,64,70,0,70,67],
[64,61,57,58,64,70,60,0,67],
[65,65,69,67,65,72,63,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,68,64,69,66,69,76,77],
[73,0,66,62,66,62,63,64,73],
[62,64,0,70,76,61,73,74,71],
[66,68,60,0,67,65,67,80,71],
[61,64,54,63,0,64,57,80,71],
[64,68,69,65,66,0,70,73,73],
[61,67,57,63,73,60,0,65,79],
[54,66,56,50,50,57,65,0,67],
[53,57,59,59,59,57,51,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,83,60,68,61,72,54,64],
[67,0,90,73,76,76,71,69,60],
[47,40,0,60,57,58,55,62,51],
[70,57,70,0,73,66,58,56,59],
[62,54,73,57,0,65,48,59,44],
[69,54,72,64,65,0,63,54,54],
[58,59,75,72,82,67,0,75,77],
[76,61,68,74,71,76,55,0,74],
[66,70,79,71,86,76,53,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,47,62,53,57,61,58,59],
[68,0,55,61,65,62,62,64,65],
[83,75,0,69,69,65,79,67,64],
[68,69,61,0,64,62,67,60,66],
[77,65,61,66,0,60,73,66,62],
[73,68,65,68,70,0,78,71,61],
[69,68,51,63,57,52,0,58,62],
[72,66,63,70,64,59,72,0,63],
[71,65,66,64,68,69,68,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,71,51,49,76,56,52,44],
[80,0,87,69,58,82,76,66,62],
[59,43,0,49,46,62,54,46,34],
[79,61,81,0,62,87,74,60,60],
[81,72,84,68,0,74,58,46,64],
[54,48,68,43,56,0,58,43,40],
[74,54,76,56,72,72,0,54,55],
[78,64,84,70,84,87,76,0,69],
[86,68,96,70,66,90,75,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,54,66,78,69,67,64,63],
[72,0,58,72,83,69,65,72,66],
[76,72,0,62,85,87,77,77,70],
[64,58,68,0,72,69,77,69,46],
[52,47,45,58,0,48,58,52,51],
[61,61,43,61,82,0,75,54,67],
[63,65,53,53,72,55,0,58,57],
[66,58,53,61,78,76,72,0,62],
[67,64,60,84,79,63,73,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,58,70,70,59,65,94,67],
[47,0,42,59,56,46,61,75,49],
[72,88,0,64,80,59,76,94,67],
[60,71,66,0,67,44,63,68,63],
[60,74,50,63,0,64,64,74,73],
[71,84,71,86,66,0,71,91,63],
[65,69,54,67,66,59,0,88,61],
[36,55,36,62,56,39,42,0,53],
[63,81,63,67,57,67,69,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,76,77,77,73,66,69,63],
[69,0,84,78,91,58,71,60,66],
[54,46,0,55,61,62,57,61,64],
[53,52,75,0,64,61,75,51,51],
[53,39,69,66,0,62,49,58,61],
[57,72,68,69,68,0,63,68,59],
[64,59,73,55,81,67,0,61,63],
[61,70,69,79,72,62,69,0,73],
[67,64,66,79,69,71,67,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,83,64,77,73,78,62,85],
[49,0,70,62,56,45,83,52,75],
[47,60,0,66,61,52,78,40,75],
[66,68,64,0,59,53,65,54,57],
[53,74,69,71,0,44,86,74,70],
[57,85,78,77,86,0,81,61,78],
[52,47,52,65,44,49,0,67,82],
[68,78,90,76,56,69,63,0,77],
[45,55,55,73,60,52,48,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,66,97,33,64,32,32,0],
[97,0,65,97,65,64,32,65,97],
[64,65,0,97,64,64,32,64,32],
[33,33,33,0,33,65,33,65,33],
[97,65,66,97,0,97,65,65,65],
[66,66,66,65,33,0,33,66,33],
[98,98,98,97,65,97,0,130,65],
[98,65,66,65,65,64,0,0,32],
[130,33,98,97,65,97,65,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,80,75,65,65,52,88,58],
[62,0,65,58,65,64,68,78,50],
[50,65,0,62,52,59,49,71,45],
[55,72,68,0,58,71,50,89,49],
[65,65,78,72,0,66,73,79,67],
[65,66,71,59,64,0,69,82,56],
[78,62,81,80,57,61,0,83,60],
[42,52,59,41,51,48,47,0,35],
[72,80,85,81,63,74,70,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,94,78,73,47,58,78,66],
[53,0,69,57,51,63,50,76,56],
[36,61,0,43,43,43,37,67,50],
[52,73,87,0,55,79,78,80,80],
[57,79,87,75,0,66,48,66,67],
[83,67,87,51,64,0,56,89,78],
[72,80,93,52,82,74,0,94,62],
[52,54,63,50,64,41,36,0,61],
[64,74,80,50,63,52,68,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,70,62,73,66,60,62,55],
[61,0,69,67,68,62,72,56,60],
[60,61,0,56,65,55,50,50,55],
[68,63,74,0,72,53,63,55,63],
[57,62,65,58,0,69,58,61,62],
[64,68,75,77,61,0,74,65,65],
[70,58,80,67,72,56,0,53,72],
[68,74,80,75,69,65,77,0,69],
[75,70,75,67,68,65,58,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,63,68,73,61,66,70,52],
[75,0,57,90,59,55,66,65,45],
[67,73,0,87,79,72,93,62,50],
[62,40,43,0,66,54,40,48,40],
[57,71,51,64,0,62,66,53,47],
[69,75,58,76,68,0,68,65,73],
[64,64,37,90,64,62,0,61,58],
[60,65,68,82,77,65,69,0,62],
[78,85,80,90,83,57,72,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,57,59,75,60,72,67,58],
[71,0,63,63,67,47,79,66,50],
[73,67,0,69,68,59,76,63,66],
[71,67,61,0,66,57,89,65,60],
[55,63,62,64,0,56,78,72,64],
[70,83,71,73,74,0,92,78,64],
[58,51,54,41,52,38,0,51,49],
[63,64,67,65,58,52,79,0,52],
[72,80,64,70,66,66,81,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,69,70,56,66,60,56,60],
[55,0,65,66,48,69,63,66,58],
[61,65,0,78,67,55,58,61,59],
[60,64,52,0,61,70,55,64,54],
[74,82,63,69,0,79,68,73,66],
[64,61,75,60,51,0,51,59,57],
[70,67,72,75,62,79,0,72,73],
[74,64,69,66,57,71,58,0,62],
[70,72,71,76,64,73,57,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,60,59,58,65,66,46,64],
[72,0,64,60,61,60,61,53,61],
[70,66,0,65,66,71,73,62,54],
[71,70,65,0,71,69,66,68,67],
[72,69,64,59,0,63,65,62,65],
[65,70,59,61,67,0,64,61,64],
[64,69,57,64,65,66,0,50,68],
[84,77,68,62,68,69,80,0,75],
[66,69,76,63,65,66,62,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,65,69,66,63,75,63,70],
[66,0,66,73,74,66,73,65,71],
[65,64,0,73,74,70,73,69,66],
[61,57,57,0,64,59,61,63,66],
[64,56,56,66,0,56,62,57,63],
[67,64,60,71,74,0,70,65,69],
[55,57,57,69,68,60,0,63,61],
[67,65,61,67,73,65,67,0,66],
[60,59,64,64,67,61,69,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,61,71,69,71,64,57,72],
[72,0,67,77,61,83,66,53,82],
[69,63,0,68,66,72,72,65,72],
[59,53,62,0,53,53,56,52,63],
[61,69,64,77,0,75,73,64,81],
[59,47,58,77,55,0,64,59,73],
[66,64,58,74,57,66,0,57,78],
[73,77,65,78,66,71,73,0,76],
[58,48,58,67,49,57,52,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,57,67,61,60,66,65,64],
[68,0,65,64,61,68,62,61,68],
[73,65,0,65,71,65,64,69,68],
[63,66,65,0,64,68,66,68,77],
[69,69,59,66,0,71,59,75,69],
[70,62,65,62,59,0,69,70,70],
[64,68,66,64,71,61,0,76,69],
[65,69,61,62,55,60,54,0,60],
[66,62,62,53,61,60,61,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,66,74,69,58,65,70,82],
[75,0,61,83,79,60,72,70,85],
[64,69,0,90,78,76,81,78,78],
[56,47,40,0,59,47,57,56,76],
[61,51,52,71,0,62,57,63,71],
[72,70,54,83,68,0,60,78,80],
[65,58,49,73,73,70,0,66,73],
[60,60,52,74,67,52,64,0,68],
[48,45,52,54,59,50,57,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,89,74,60,71,70,77,77],
[58,0,78,66,62,62,64,74,81],
[41,52,0,54,53,56,65,63,58],
[56,64,76,0,73,67,63,79,72],
[70,68,77,57,0,86,76,79,91],
[59,68,74,63,44,0,63,71,76],
[60,66,65,67,54,67,0,69,76],
[53,56,67,51,51,59,61,0,60],
[53,49,72,58,39,54,54,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,66,62,72,70,60,68,58],
[62,0,69,66,63,71,72,68,72],
[64,61,0,60,72,73,66,67,51],
[68,64,70,0,70,63,68,70,62],
[58,67,58,60,0,60,61,60,47],
[60,59,57,67,70,0,60,70,55],
[70,58,64,62,69,70,0,73,44],
[62,62,63,60,70,60,57,0,57],
[72,58,79,68,83,75,86,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,72,63,64,74,65,65,61],
[79,0,80,81,65,91,77,84,79],
[58,50,0,63,63,62,60,76,72],
[67,49,67,0,61,70,71,65,70],
[66,65,67,69,0,75,63,71,67],
[56,39,68,60,55,0,62,68,72],
[65,53,70,59,67,68,0,78,79],
[65,46,54,65,59,62,52,0,63],
[69,51,58,60,63,58,51,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,67,66,66,49,61,60,55],
[64,0,69,61,72,77,63,62,63],
[63,61,0,67,72,64,57,59,61],
[64,69,63,0,66,60,68,58,59],
[64,58,58,64,0,58,57,59,54],
[81,53,66,70,72,0,70,71,65],
[69,67,73,62,73,60,0,67,67],
[70,68,71,72,71,59,63,0,59],
[75,67,69,71,76,65,63,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,71,67,67,70,58,76,62],
[74,0,68,75,61,68,59,75,67],
[59,62,0,56,62,67,52,63,50],
[63,55,74,0,62,64,61,67,53],
[63,69,68,68,0,68,57,78,60],
[60,62,63,66,62,0,54,75,54],
[72,71,78,69,73,76,0,75,63],
[54,55,67,63,52,55,55,0,53],
[68,63,80,77,70,76,67,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,54,46,42,81,62,39,51],
[48,0,59,49,56,72,64,53,68],
[76,71,0,54,52,82,62,70,67],
[84,81,76,0,61,82,72,77,70],
[88,74,78,69,0,80,62,54,64],
[49,58,48,48,50,0,62,59,45],
[68,66,68,58,68,68,0,80,73],
[91,77,60,53,76,71,50,0,63],
[79,62,63,60,66,85,57,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,82,73,71,62,69,63,64],
[61,0,71,69,45,63,58,74,60],
[48,59,0,67,58,51,65,59,51],
[57,61,63,0,50,38,58,59,47],
[59,85,72,80,0,60,66,56,67],
[68,67,79,92,70,0,64,81,58],
[61,72,65,72,64,66,0,71,77],
[67,56,71,71,74,49,59,0,57],
[66,70,79,83,63,72,53,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,61,51,58,56,65,53,71],
[71,0,80,70,56,58,84,71,66],
[69,50,0,51,54,58,69,59,63],
[79,60,79,0,71,70,80,73,64],
[72,74,76,59,0,79,84,81,80],
[74,72,72,60,51,0,88,60,79],
[65,46,61,50,46,42,0,72,54],
[77,59,71,57,49,70,58,0,62],
[59,64,67,66,50,51,76,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,61,70,59,62,58,64,60],
[72,0,76,66,58,65,65,68,75],
[69,54,0,58,57,44,58,46,55],
[60,64,72,0,48,71,63,74,69],
[71,72,73,82,0,66,63,71,69],
[68,65,86,59,64,0,73,66,71],
[72,65,72,67,67,57,0,68,72],
[66,62,84,56,59,64,62,0,60],
[70,55,75,61,61,59,58,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,59,71,59,53,72,68,68],
[64,0,73,87,74,68,77,76,85],
[71,57,0,78,83,76,80,74,83],
[59,43,52,0,67,60,61,71,74],
[71,56,47,63,0,60,62,63,72],
[77,62,54,70,70,0,76,64,68],
[58,53,50,69,68,54,0,69,71],
[62,54,56,59,67,66,61,0,58],
[62,45,47,56,58,62,59,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,59,49,61,65,64,74,65],
[63,0,68,64,72,69,71,73,61],
[71,62,0,67,67,69,67,73,75],
[81,66,63,0,73,74,73,74,68],
[69,58,63,57,0,70,72,68,67],
[65,61,61,56,60,0,65,69,69],
[66,59,63,57,58,65,0,63,61],
[56,57,57,56,62,61,67,0,63],
[65,69,55,62,63,61,69,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,76,72,82,75,67,57,64],
[61,0,68,62,65,56,72,64,53],
[54,62,0,50,65,58,57,46,67],
[58,68,80,0,66,74,76,56,59],
[48,65,65,64,0,65,65,59,59],
[55,74,72,56,65,0,62,65,61],
[63,58,73,54,65,68,0,66,67],
[73,66,84,74,71,65,64,0,63],
[66,77,63,71,71,69,63,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,0,0,0,0,0,0],
[130,0,65,65,0,0,0,0,65],
[130,65,0,130,0,65,65,65,0],
[130,65,0,0,0,65,65,65,0],
[130,130,130,130,0,65,65,130,130],
[130,130,65,65,65,0,130,130,65],
[130,130,65,65,65,0,0,65,65],
[130,130,65,65,0,0,65,0,65],
[130,65,130,130,0,65,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,82,80,66,74,69,62,77],
[63,0,81,72,73,75,64,75,63],
[48,49,0,73,62,67,73,60,64],
[50,58,57,0,54,55,54,50,51],
[64,57,68,76,0,69,62,58,61],
[56,55,63,75,61,0,58,54,57],
[61,66,57,76,68,72,0,64,67],
[68,55,70,80,72,76,66,0,67],
[53,67,66,79,69,73,63,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,67,22,43,44,45,45,22],
[85,0,64,64,43,22,107,22,44],
[63,66,0,42,21,0,85,45,22],
[108,66,88,0,65,66,108,45,44],
[87,87,109,65,0,87,87,87,87],
[86,108,130,64,43,0,108,65,64],
[85,23,45,22,43,22,0,23,22],
[85,108,85,85,43,65,107,0,44],
[108,86,108,86,43,66,108,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,61,67,65,68,70,72],
[63,0,67,65,71,65,68,69,69],
[63,63,0,66,80,65,67,68,65],
[69,65,64,0,67,62,64,61,65],
[63,59,50,63,0,54,62,60,53],
[65,65,65,68,76,0,76,73,75],
[62,62,63,66,68,54,0,59,69],
[60,61,62,69,70,57,71,0,63],
[58,61,65,65,77,55,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,78,71,86,70,74,71,68],
[65,0,69,65,64,67,59,56,58],
[52,61,0,73,58,66,73,70,52],
[59,65,57,0,47,66,63,60,57],
[44,66,72,83,0,75,81,72,71],
[60,63,64,64,55,0,69,65,67],
[56,71,57,67,49,61,0,80,59],
[59,74,60,70,58,65,50,0,61],
[62,72,78,73,59,63,71,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,63,67,63,50,65,63,48],
[64,0,62,58,61,60,60,57,45],
[67,68,0,58,84,63,72,60,53],
[63,72,72,0,58,61,61,66,60],
[67,69,46,72,0,58,63,74,50],
[80,70,67,69,72,0,64,59,65],
[65,70,58,69,67,66,0,48,56],
[67,73,70,64,56,71,82,0,62],
[82,85,77,70,80,65,74,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,55,66,53,47,66,61,62],
[80,0,73,70,68,65,67,66,67],
[75,57,0,78,64,65,70,66,60],
[64,60,52,0,60,50,69,52,61],
[77,62,66,70,0,58,77,69,63],
[83,65,65,80,72,0,73,63,71],
[64,63,60,61,53,57,0,58,65],
[69,64,64,78,61,67,72,0,70],
[68,63,70,69,67,59,65,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,77,87,87,71,73,68],
[66,0,52,74,80,65,59,64,59],
[64,78,0,89,104,90,83,70,78],
[53,56,41,0,70,70,55,56,62],
[43,50,26,60,0,57,54,44,48],
[43,65,40,60,73,0,54,64,56],
[59,71,47,75,76,76,0,64,66],
[57,66,60,74,86,66,66,0,64],
[62,71,52,68,82,74,64,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,61,60,50,51,58,61,56],
[66,0,57,50,39,48,52,54,49],
[69,73,0,62,55,60,59,63,59],
[70,80,68,0,53,58,68,64,58],
[80,91,75,77,0,62,70,66,69],
[79,82,70,72,68,0,69,63,72],
[72,78,71,62,60,61,0,68,64],
[69,76,67,66,64,67,62,0,73],
[74,81,71,72,61,58,66,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,76,67,74,58,76,71,63],
[61,0,75,57,70,58,78,83,69],
[54,55,0,62,65,54,69,69,65],
[63,73,68,0,71,71,79,77,75],
[56,60,65,59,0,53,59,57,64],
[72,72,76,59,77,0,75,71,75],
[54,52,61,51,71,55,0,53,56],
[59,47,61,53,73,59,77,0,53],
[67,61,65,55,66,55,74,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,62,65,43,51,55,72,58],
[68,0,70,66,57,56,69,74,60],
[68,60,0,65,52,61,71,70,59],
[65,64,65,0,43,52,64,79,57],
[87,73,78,87,0,67,74,88,65],
[79,74,69,78,63,0,69,82,69],
[75,61,59,66,56,61,0,75,48],
[58,56,60,51,42,48,55,0,44],
[72,70,71,73,65,61,82,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,86,80,66,68,59,84,65],
[63,0,88,81,84,81,66,87,63],
[44,42,0,61,40,43,40,58,40],
[50,49,69,0,65,49,46,68,49],
[64,46,90,65,0,40,55,74,51],
[62,49,87,81,90,0,66,81,70],
[71,64,90,84,75,64,0,80,65],
[46,43,72,62,56,49,50,0,45],
[65,67,90,81,79,60,65,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,69,75,75,71,65,67,67],
[57,0,74,74,74,73,72,66,65],
[61,56,0,63,66,67,69,61,71],
[55,56,67,0,66,67,65,57,60],
[55,56,64,64,0,63,62,63,59],
[59,57,63,63,67,0,57,61,59],
[65,58,61,65,68,73,0,64,66],
[63,64,69,73,67,69,66,0,65],
[63,65,59,70,71,71,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,60,65,81,71,77,77,66],
[60,0,43,71,71,58,71,68,69],
[70,87,0,65,84,77,81,88,79],
[65,59,65,0,65,54,61,69,56],
[49,59,46,65,0,48,70,66,57],
[59,72,53,76,82,0,76,67,72],
[53,59,49,69,60,54,0,71,67],
[53,62,42,61,64,63,59,0,47],
[64,61,51,74,73,58,63,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,68,69,89,69,82,61,74],
[64,0,66,66,81,61,71,72,66],
[62,64,0,66,85,71,93,79,74],
[61,64,64,0,91,69,80,68,79],
[41,49,45,39,0,46,66,63,51],
[61,69,59,61,84,0,72,78,76],
[48,59,37,50,64,58,0,54,65],
[69,58,51,62,67,52,76,0,69],
[56,64,56,51,79,54,65,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,59,56,69,66,55,62,82],
[77,0,69,71,65,66,70,74,80],
[71,61,0,71,67,69,63,68,74],
[74,59,59,0,52,67,73,59,81],
[61,65,63,78,0,70,67,65,70],
[64,64,61,63,60,0,72,63,82],
[75,60,67,57,63,58,0,60,83],
[68,56,62,71,65,67,70,0,66],
[48,50,56,49,60,48,47,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,62,55,66,54,68,65,64],
[70,0,61,61,66,65,72,76,72],
[68,69,0,64,70,62,69,69,68],
[75,69,66,0,70,59,69,70,70],
[64,64,60,60,0,59,68,63,60],
[76,65,68,71,71,0,63,70,63],
[62,58,61,61,62,67,0,57,66],
[65,54,61,60,67,60,73,0,57],
[66,58,62,60,70,67,64,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,62,69,61,70,58,56,86],
[72,0,61,73,46,70,57,68,76],
[68,69,0,73,68,73,63,77,73],
[61,57,57,0,51,65,59,53,70],
[69,84,62,79,0,80,67,74,82],
[60,60,57,65,50,0,62,54,65],
[72,73,67,71,63,68,0,66,81],
[74,62,53,77,56,76,64,0,77],
[44,54,57,60,48,65,49,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,66,73,63,66,75,65,73],
[57,0,67,82,62,75,90,81,108],
[64,63,0,72,83,72,87,64,78],
[57,48,58,0,55,56,60,44,69],
[67,68,47,75,0,60,82,75,82],
[64,55,58,74,70,0,74,81,85],
[55,40,43,70,48,56,0,27,61],
[65,49,66,86,55,49,103,0,79],
[57,22,52,61,48,45,69,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,67,56,67,73,66,70,58],
[74,0,65,52,66,68,63,62,61],
[63,65,0,50,63,68,68,64,61],
[74,78,80,0,65,67,72,85,69],
[63,64,67,65,0,59,60,68,58],
[57,62,62,63,71,0,63,73,67],
[64,67,62,58,70,67,0,70,64],
[60,68,66,45,62,57,60,0,44],
[72,69,69,61,72,63,66,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,98,65,33,33,65,65,33],
[97,0,130,130,98,65,130,98,98],
[32,0,0,65,0,33,32,65,33],
[65,0,65,0,33,0,32,65,66],
[97,32,130,97,0,33,64,65,33],
[97,65,97,130,97,0,97,65,66],
[65,0,98,98,66,33,0,98,66],
[65,32,65,65,65,65,32,0,66],
[97,32,97,64,97,64,64,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,57,68,66,56,72,64,55],
[69,0,74,68,76,58,85,77,60],
[73,56,0,62,60,50,65,68,55],
[62,62,68,0,62,62,67,56,65],
[64,54,70,68,0,58,58,70,40],
[74,72,80,68,72,0,68,76,59],
[58,45,65,63,72,62,0,78,67],
[66,53,62,74,60,54,52,0,55],
[75,70,75,65,90,71,63,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,56,55,68,58,66,68,62],
[60,0,50,62,62,57,60,59,70],
[74,80,0,71,67,62,75,70,83],
[75,68,59,0,61,75,65,75,71],
[62,68,63,69,0,52,70,67,72],
[72,73,68,55,78,0,80,75,69],
[64,70,55,65,60,50,0,61,57],
[62,71,60,55,63,55,69,0,70],
[68,60,47,59,58,61,73,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,60,67,61,62,66,62,57],
[55,0,56,60,53,65,67,52,53],
[70,74,0,66,62,75,74,61,64],
[63,70,64,0,67,69,70,62,65],
[69,77,68,63,0,68,67,63,58],
[68,65,55,61,62,0,69,60,61],
[64,63,56,60,63,61,0,60,60],
[68,78,69,68,67,70,70,0,63],
[73,77,66,65,72,69,70,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,76,68,69,68,72,63,60],
[57,0,63,70,67,63,59,70,54],
[54,67,0,70,75,60,63,69,60],
[62,60,60,0,68,66,63,68,51],
[61,63,55,62,0,64,57,72,72],
[62,67,70,64,66,0,57,55,63],
[58,71,67,67,73,73,0,64,68],
[67,60,61,62,58,75,66,0,67],
[70,76,70,79,58,67,62,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,62,74,57,68,56,65],
[65,0,66,68,70,62,65,66,71],
[63,64,0,61,66,61,67,59,61],
[68,62,69,0,69,51,75,56,64],
[56,60,64,61,0,55,59,45,58],
[73,68,69,79,75,0,76,72,61],
[62,65,63,55,71,54,0,54,61],
[74,64,71,74,85,58,76,0,70],
[65,59,69,66,72,69,69,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,61,51,64,64,60,41,50],
[70,0,60,59,50,41,38,38,59],
[69,70,0,50,72,91,90,71,50],
[79,71,80,0,70,73,60,50,68],
[66,80,58,60,0,82,79,50,68],
[66,89,39,57,48,0,39,59,68],
[70,92,40,70,51,91,0,72,82],
[89,92,59,80,80,71,58,0,90],
[80,71,80,62,62,62,48,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,54,62,68,68,65,64,63],
[62,0,59,57,65,61,58,61,57],
[76,71,0,69,76,72,70,69,63],
[68,73,61,0,76,72,61,73,64],
[62,65,54,54,0,60,60,57,53],
[62,69,58,58,70,0,61,53,51],
[65,72,60,69,70,69,0,68,65],
[66,69,61,57,73,77,62,0,64],
[67,73,67,66,77,79,65,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,56,56,77,73,57,48],
[71,0,59,61,50,74,61,54,59],
[65,71,0,64,52,72,66,51,58],
[74,69,66,0,62,71,67,58,61],
[74,80,78,68,0,82,70,65,68],
[53,56,58,59,48,0,53,45,51],
[57,69,64,63,60,77,0,46,54],
[73,76,79,72,65,85,84,0,65],
[82,71,72,69,62,79,76,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,65,52,64,66,65,61,63],
[67,0,63,65,66,64,57,69,72],
[65,67,0,67,68,61,70,70,73],
[78,65,63,0,71,61,64,74,74],
[66,64,62,59,0,71,60,69,67],
[64,66,69,69,59,0,55,73,64],
[65,73,60,66,70,75,0,75,76],
[69,61,60,56,61,57,55,0,62],
[67,58,57,56,63,66,54,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,67,83,68,67,52,71,65],
[57,0,85,83,77,86,63,85,65],
[63,45,0,68,59,64,55,85,55],
[47,47,62,0,58,59,40,69,51],
[62,53,71,72,0,44,50,61,61],
[63,44,66,71,86,0,53,78,74],
[78,67,75,90,80,77,0,80,61],
[59,45,45,61,69,52,50,0,58],
[65,65,75,79,69,56,69,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,70,57,70,67,72,74,67],
[64,0,74,64,74,77,73,73,64],
[60,56,0,65,61,64,60,59,57],
[73,66,65,0,75,73,71,68,69],
[60,56,69,55,0,58,64,62,52],
[63,53,66,57,72,0,62,65,52],
[58,57,70,59,66,68,0,67,66],
[56,57,71,62,68,65,63,0,57],
[63,66,73,61,78,78,64,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,61,47,56,50,75,66,66],
[52,0,60,58,64,48,65,64,73],
[69,70,0,66,74,61,68,66,78],
[83,72,64,0,58,60,76,70,71],
[74,66,56,72,0,67,69,66,72],
[80,82,69,70,63,0,85,87,79],
[55,65,62,54,61,45,0,47,73],
[64,66,64,60,64,43,83,0,63],
[64,57,52,59,58,51,57,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,58,73,70,58,58,70,55],
[60,0,61,67,65,63,63,63,63],
[72,69,0,70,62,64,64,66,55],
[57,63,60,0,64,57,62,57,54],
[60,65,68,66,0,63,58,65,68],
[72,67,66,73,67,0,60,69,66],
[72,67,66,68,72,70,0,64,63],
[60,67,64,73,65,61,66,0,59],
[75,67,75,76,62,64,67,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,57,56,61,74,74,74,56],
[69,0,59,62,69,74,60,69,67],
[73,71,0,67,64,83,73,68,63],
[74,68,63,0,70,75,70,78,70],
[69,61,66,60,0,76,73,66,55],
[56,56,47,55,54,0,58,60,53],
[56,70,57,60,57,72,0,65,63],
[56,61,62,52,64,70,65,0,57],
[74,63,67,60,75,77,67,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,54,64,61,61,60,56,64],
[67,0,63,67,68,66,62,58,70],
[76,67,0,77,72,62,63,64,69],
[66,63,53,0,59,58,56,58,71],
[69,62,58,71,0,67,64,64,69],
[69,64,68,72,63,0,67,66,67],
[70,68,67,74,66,63,0,69,76],
[74,72,66,72,66,64,61,0,66],
[66,60,61,59,61,63,54,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,72,82,78,67,63,73,81],
[49,0,68,72,74,66,55,62,76],
[58,62,0,71,71,57,54,63,62],
[48,58,59,0,55,62,50,60,69],
[52,56,59,75,0,58,48,62,69],
[63,64,73,68,72,0,71,64,60],
[67,75,76,80,82,59,0,76,78],
[57,68,67,70,68,66,54,0,73],
[49,54,68,61,61,70,52,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,59,66,66,65,68,71,66],
[54,0,66,67,57,63,66,47,48],
[71,64,0,68,70,71,70,62,57],
[64,63,62,0,58,60,63,51,48],
[64,73,60,72,0,63,70,53,66],
[65,67,59,70,67,0,75,62,58],
[62,64,60,67,60,55,0,66,57],
[59,83,68,79,77,68,64,0,72],
[64,82,73,82,64,72,73,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,54,62,73,67,67,54,61],
[67,0,58,63,61,69,59,56,52],
[76,72,0,75,76,80,69,64,67],
[68,67,55,0,67,67,59,66,63],
[57,69,54,63,0,63,59,57,64],
[63,61,50,63,67,0,51,49,58],
[63,71,61,71,71,79,0,56,60],
[76,74,66,64,73,81,74,0,73],
[69,78,63,67,66,72,70,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,67,70,65,72,60,65,65],
[70,0,73,78,62,71,65,71,63],
[63,57,0,67,60,63,59,65,67],
[60,52,63,0,58,66,62,67,60],
[65,68,70,72,0,69,57,76,71],
[58,59,67,64,61,0,61,68,64],
[70,65,71,68,73,69,0,76,56],
[65,59,65,63,54,62,54,0,61],
[65,67,63,70,59,66,74,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,70,61,71,63,60,83,73],
[59,0,71,56,58,65,66,79,69],
[60,59,0,48,63,59,45,66,66],
[69,74,82,0,70,63,68,89,76],
[59,72,67,60,0,62,67,85,73],
[67,65,71,67,68,0,62,80,75],
[70,64,85,62,63,68,0,83,83],
[47,51,64,41,45,50,47,0,58],
[57,61,64,54,57,55,47,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,49,48,52,47,81,56,35],
[58,0,70,60,25,48,92,69,58],
[81,60,0,48,38,70,118,70,60],
[82,70,82,0,71,58,82,71,59],
[78,105,92,59,0,81,104,68,70],
[83,82,60,72,49,0,79,69,59],
[49,38,12,48,26,51,0,22,38],
[74,61,60,59,62,61,108,0,57],
[95,72,70,71,60,71,92,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,51,62,55,61,54,62,67],
[54,0,51,61,51,58,58,47,80],
[79,79,0,70,64,67,78,55,89],
[68,69,60,0,56,60,55,51,74],
[75,79,66,74,0,59,67,68,78],
[69,72,63,70,71,0,66,67,86],
[76,72,52,75,63,64,0,65,80],
[68,83,75,79,62,63,65,0,81],
[63,50,41,56,52,44,50,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,54,60,67,57,58,62,70],
[72,0,77,73,84,70,78,65,79],
[76,53,0,64,68,60,67,52,70],
[70,57,66,0,71,62,71,50,64],
[63,46,62,59,0,48,56,56,57],
[73,60,70,68,82,0,77,66,81],
[72,52,63,59,74,53,0,53,71],
[68,65,78,80,74,64,77,0,81],
[60,51,60,66,73,49,59,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,41,38,55,84,72,59,38],
[64,0,59,43,63,58,50,70,57],
[89,71,0,73,78,93,69,74,63],
[92,87,57,0,77,97,70,67,67],
[75,67,52,53,0,84,67,69,59],
[46,72,37,33,46,0,48,44,42],
[58,80,61,60,63,82,0,76,56],
[71,60,56,63,61,86,54,0,53],
[92,73,67,63,71,88,74,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,72,65,63,62,77,73,58],
[63,0,73,57,64,58,59,81,49],
[58,57,0,58,47,61,52,73,62],
[65,73,72,0,64,62,69,76,73],
[67,66,83,66,0,66,68,80,55],
[68,72,69,68,64,0,68,79,56],
[53,71,78,61,62,62,0,64,59],
[57,49,57,54,50,51,66,0,57],
[72,81,68,57,75,74,71,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,65,56,67,69,76,52,58],
[54,0,50,52,55,68,68,59,69],
[65,80,0,67,66,71,78,60,64],
[74,78,63,0,68,76,75,67,74],
[63,75,64,62,0,70,73,55,64],
[61,62,59,54,60,0,67,66,66],
[54,62,52,55,57,63,0,56,54],
[78,71,70,63,75,64,74,0,69],
[72,61,66,56,66,64,76,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,50,50,77,77,104,76,51],
[80,0,53,53,77,104,80,79,27],
[80,77,0,50,104,104,104,130,77],
[80,77,80,0,104,104,104,106,51],
[53,53,26,26,0,77,27,53,53],
[53,26,26,26,53,0,80,79,27],
[26,50,26,26,103,50,0,52,26],
[54,51,0,24,77,51,78,0,51],
[79,103,53,79,77,103,104,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,66,69,53,65,73,95,68],
[56,0,63,68,42,54,66,74,65],
[64,67,0,69,72,73,63,83,70],
[61,62,61,0,67,55,65,76,70],
[77,88,58,63,0,67,71,83,66],
[65,76,57,75,63,0,70,90,78],
[57,64,67,65,59,60,0,77,60],
[35,56,47,54,47,40,53,0,51],
[62,65,60,60,64,52,70,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,58,54,50,59,60,57,63],
[64,0,50,56,45,62,52,56,56],
[72,80,0,60,58,71,61,64,75],
[76,74,70,0,71,72,69,65,84],
[80,85,72,59,0,78,73,70,77],
[71,68,59,58,52,0,68,54,57],
[70,78,69,61,57,62,0,60,61],
[73,74,66,65,60,76,70,0,78],
[67,74,55,46,53,73,69,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,55,49,57,69,75,76,69],
[77,0,78,60,76,64,78,94,64],
[75,52,0,75,70,69,72,69,77],
[81,70,55,0,75,78,70,91,77],
[73,54,60,55,0,66,67,68,64],
[61,66,61,52,64,0,75,88,57],
[55,52,58,60,63,55,0,86,52],
[54,36,61,39,62,42,44,0,50],
[61,66,53,53,66,73,78,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,51,70,58,57,43,62,36],
[83,0,54,61,70,50,49,72,51],
[79,76,0,70,68,56,62,86,56],
[60,69,60,0,74,71,57,75,51],
[72,60,62,56,0,56,60,73,52],
[73,80,74,59,74,0,68,70,68],
[87,81,68,73,70,62,0,84,64],
[68,58,44,55,57,60,46,0,47],
[94,79,74,79,78,62,66,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,57,52,56,48,56,53],
[68,0,61,61,57,61,50,61,50],
[69,69,0,65,60,65,59,62,49],
[73,69,65,0,67,70,64,69,55],
[78,73,70,63,0,74,66,63,61],
[74,69,65,60,56,0,64,61,52],
[82,80,71,66,64,66,0,70,57],
[74,69,68,61,67,69,60,0,65],
[77,80,81,75,69,78,73,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,64,62,57,67,65,65,60],
[67,0,58,60,63,67,67,69,63],
[66,72,0,68,61,68,69,67,66],
[68,70,62,0,62,63,65,66,60],
[73,67,69,68,0,66,69,67,61],
[63,63,62,67,64,0,66,71,60],
[65,63,61,65,61,64,0,63,56],
[65,61,63,64,63,59,67,0,51],
[70,67,64,70,69,70,74,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,48,64,47,48,65,67,56],
[74,0,65,58,81,73,74,92,59],
[82,65,0,59,66,58,81,76,49],
[66,72,71,0,73,64,89,68,71],
[83,49,64,57,0,74,98,100,56],
[82,57,72,66,56,0,88,91,57],
[65,56,49,41,32,42,0,67,49],
[63,38,54,62,30,39,63,0,45],
[74,71,81,59,74,73,81,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,68,67,66,62,62,64,66],
[70,0,73,61,63,64,63,61,61],
[62,57,0,62,53,52,52,65,52],
[63,69,68,0,60,64,62,71,68],
[64,67,77,70,0,69,69,70,69],
[68,66,78,66,61,0,64,65,71],
[68,67,78,68,61,66,0,79,70],
[66,69,65,59,60,65,51,0,61],
[64,69,78,62,61,59,60,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,54,74,62,67,64,66,65],
[60,0,64,66,63,66,72,73,66],
[76,66,0,71,63,70,63,72,69],
[56,64,59,0,61,65,63,66,59],
[68,67,67,69,0,68,71,64,69],
[63,64,60,65,62,0,65,65,64],
[66,58,67,67,59,65,0,66,72],
[64,57,58,64,66,65,64,0,64],
[65,64,61,71,61,66,58,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,73,67,73,64,67,68,68],
[58,0,63,66,68,60,59,71,63],
[57,67,0,67,62,59,54,67,65],
[63,64,63,0,69,58,50,73,60],
[57,62,68,61,0,56,51,68,63],
[66,70,71,72,74,0,55,72,69],
[63,71,76,80,79,75,0,74,71],
[62,59,63,57,62,58,56,0,62],
[62,67,65,70,67,61,59,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,59,63,73,58,54,68,62],
[66,0,63,67,73,57,65,73,69],
[71,67,0,75,81,63,66,76,76],
[67,63,55,0,72,54,70,64,63],
[57,57,49,58,0,45,51,63,54],
[72,73,67,76,85,0,65,73,76],
[76,65,64,60,79,65,0,68,68],
[62,57,54,66,67,57,62,0,64],
[68,61,54,67,76,54,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,57,57,68,50,53,48,63],
[79,0,79,82,72,64,73,72,76],
[73,51,0,63,62,60,59,59,60],
[73,48,67,0,69,55,65,47,69],
[62,58,68,61,0,59,73,52,67],
[80,66,70,75,71,0,72,55,74],
[77,57,71,65,57,58,0,58,68],
[82,58,71,83,78,75,72,0,73],
[67,54,70,61,63,56,62,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,65,70,62,67,72,64,55],
[72,0,71,72,75,70,69,70,65],
[65,59,0,75,68,70,57,65,61],
[60,58,55,0,62,65,69,55,60],
[68,55,62,68,0,74,69,64,70],
[63,60,60,65,56,0,63,60,66],
[58,61,73,61,61,67,0,62,60],
[66,60,65,75,66,70,68,0,70],
[75,65,69,70,60,64,70,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,39,60,66,66,58,66,65],
[66,0,66,48,70,73,65,73,78],
[91,64,0,70,54,72,86,68,74],
[70,82,60,0,74,69,68,89,76],
[64,60,76,56,0,76,73,65,61],
[64,57,58,61,54,0,74,77,74],
[72,65,44,62,57,56,0,57,70],
[64,57,62,41,65,53,73,0,68],
[65,52,56,54,69,56,60,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,78,77,68,67,70,60,68],
[68,0,82,66,66,61,70,65,74],
[52,48,0,54,50,53,60,51,52],
[53,64,76,0,65,54,58,67,69],
[62,64,80,65,0,71,66,62,72],
[63,69,77,76,59,0,76,75,67],
[60,60,70,72,64,54,0,63,60],
[70,65,79,63,68,55,67,0,73],
[62,56,78,61,58,63,70,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,65,60,70,67,70,67,58],
[69,0,66,68,65,68,61,73,64],
[65,64,0,66,61,69,67,62,62],
[70,62,64,0,62,71,60,64,60],
[60,65,69,68,0,72,67,69,67],
[63,62,61,59,58,0,54,67,60],
[60,69,63,70,63,76,0,69,61],
[63,57,68,66,61,63,61,0,57],
[72,66,68,70,63,70,69,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,62,50,55,53,55,62,58],
[73,0,77,91,67,68,70,65,77],
[68,53,0,64,50,52,58,64,67],
[80,39,66,0,54,52,72,57,63],
[75,63,80,76,0,74,77,70,81],
[77,62,78,78,56,0,71,76,77],
[75,60,72,58,53,59,0,52,84],
[68,65,66,73,60,54,78,0,61],
[72,53,63,67,49,53,46,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,72,73,67,62,63,69,65],
[73,0,72,72,60,58,66,74,70],
[58,58,0,70,52,61,51,75,69],
[57,58,60,0,49,59,59,55,62],
[63,70,78,81,0,67,65,72,68],
[68,72,69,71,63,0,71,78,72],
[67,64,79,71,65,59,0,75,75],
[61,56,55,75,58,52,55,0,56],
[65,60,61,68,62,58,55,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,66,69,79,64,59,80,44],
[67,0,62,66,65,62,69,73,50],
[64,68,0,73,69,61,69,66,53],
[61,64,57,0,69,76,57,75,67],
[51,65,61,61,0,73,66,62,53],
[66,68,69,54,57,0,49,71,61],
[71,61,61,73,64,81,0,67,56],
[50,57,64,55,68,59,63,0,60],
[86,80,77,63,77,69,74,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,47,75,88,77,76,70,72],
[53,0,62,66,82,86,53,55,59],
[83,68,0,83,99,97,87,77,63],
[55,64,47,0,69,80,67,64,60],
[42,48,31,61,0,72,67,54,64],
[53,44,33,50,58,0,49,48,40],
[54,77,43,63,63,81,0,51,59],
[60,75,53,66,76,82,79,0,64],
[58,71,67,70,66,90,71,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,73,62,74,65,63,61,74],
[65,0,66,73,60,73,68,62,83],
[57,64,0,60,60,59,60,70,69],
[68,57,70,0,68,66,61,67,74],
[56,70,70,62,0,67,60,69,71],
[65,57,71,64,63,0,56,65,80],
[67,62,70,69,70,74,0,72,84],
[69,68,60,63,61,65,58,0,72],
[56,47,61,56,59,50,46,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,87,44,44,130,0,43,44],
[87,0,130,87,87,130,43,130,87],
[43,0,0,43,43,43,0,43,0],
[86,43,87,0,86,130,43,43,0],
[86,43,87,44,0,130,43,43,0],
[0,0,87,0,0,0,0,0,0],
[130,87,130,87,87,130,0,130,44],
[87,0,87,87,87,130,0,0,44],
[86,43,130,130,130,130,86,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,51,70,67,67,68,59,62],
[77,0,65,82,78,80,71,74,70],
[79,65,0,78,71,78,69,78,64],
[60,48,52,0,58,62,54,66,57],
[63,52,59,72,0,73,56,66,65],
[63,50,52,68,57,0,58,66,63],
[62,59,61,76,74,72,0,72,69],
[71,56,52,64,64,64,58,0,53],
[68,60,66,73,65,67,61,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,52,26,52,78,26,53,52],
[104,0,52,78,105,52,78,27,52],
[78,78,0,79,104,105,78,53,79],
[104,52,51,0,78,52,52,27,79],
[78,25,26,52,0,26,52,27,52],
[52,78,25,78,104,0,78,53,79],
[104,52,52,78,78,52,0,79,52],
[77,103,77,103,103,77,51,0,52],
[78,78,51,51,78,51,78,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,70,65,53,54,72,69,61],
[73,0,70,67,44,56,67,59,68],
[60,60,0,61,58,66,64,74,67],
[65,63,69,0,67,71,72,72,65],
[77,86,72,63,0,73,75,75,62],
[76,74,64,59,57,0,79,82,72],
[58,63,66,58,55,51,0,68,62],
[61,71,56,58,55,48,62,0,50],
[69,62,63,65,68,58,68,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,77,70,67,47,59,60,72],
[62,0,68,59,72,57,68,63,65],
[53,62,0,68,74,53,61,55,64],
[60,71,62,0,70,60,75,69,71],
[63,58,56,60,0,54,67,58,57],
[83,73,77,70,76,0,81,61,74],
[71,62,69,55,63,49,0,53,53],
[70,67,75,61,72,69,77,0,69],
[58,65,66,59,73,56,77,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,62,64,69,58,70,56],
[68,0,62,65,66,70,61,68,59],
[67,68,0,66,73,72,65,73,60],
[68,65,64,0,62,71,56,62,57],
[66,64,57,68,0,68,58,66,57],
[61,60,58,59,62,0,62,61,57],
[72,69,65,74,72,68,0,67,66],
[60,62,57,68,64,69,63,0,53],
[74,71,70,73,73,73,64,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,73,70,75,74,74,68],
[66,0,71,68,77,59,69,73,69],
[61,59,0,57,72,56,51,55,64],
[57,62,73,0,67,63,70,61,69],
[60,53,58,63,0,59,57,58,63],
[55,71,74,67,71,0,72,70,69],
[56,61,79,60,73,58,0,65,65],
[56,57,75,69,72,60,65,0,67],
[62,61,66,61,67,61,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,70,80,53,64,83,70,60],
[77,0,73,79,57,59,66,85,61],
[60,57,0,77,53,58,76,71,68],
[50,51,53,0,43,61,63,59,58],
[77,73,77,87,0,79,85,58,66],
[66,71,72,69,51,0,70,74,61],
[47,64,54,67,45,60,0,67,64],
[60,45,59,71,72,56,63,0,48],
[70,69,62,72,64,69,66,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,69,53,57,92,49,64,59],
[78,0,59,71,77,73,65,71,78],
[61,71,0,60,86,77,62,78,87],
[77,59,70,0,74,97,66,80,80],
[73,53,44,56,0,100,81,65,82],
[38,57,53,33,30,0,49,39,64],
[81,65,68,64,49,81,0,82,90],
[66,59,52,50,65,91,48,0,83],
[71,52,43,50,48,66,40,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,47,53,58,45,51,48,71],
[92,0,60,73,82,65,68,71,79],
[83,70,0,61,65,63,65,72,84],
[77,57,69,0,67,64,52,86,58],
[72,48,65,63,0,76,52,69,66],
[85,65,67,66,54,0,55,80,60],
[79,62,65,78,78,75,0,76,82],
[82,59,58,44,61,50,54,0,66],
[59,51,46,72,64,70,48,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,63,60,61,68,73,68,64],
[72,0,64,61,70,66,80,72,71],
[67,66,0,63,61,62,71,69,63],
[70,69,67,0,60,67,84,73,66],
[69,60,69,70,0,63,78,66,67],
[62,64,68,63,67,0,75,77,59],
[57,50,59,46,52,55,0,56,62],
[62,58,61,57,64,53,74,0,64],
[66,59,67,64,63,71,68,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,56,66,55,73,67,51,53],
[62,0,54,59,47,56,50,52,49],
[74,76,0,70,56,62,70,65,69],
[64,71,60,0,58,64,64,45,58],
[75,83,74,72,0,72,75,62,55],
[57,74,68,66,58,0,70,66,56],
[63,80,60,66,55,60,0,48,61],
[79,78,65,85,68,64,82,0,67],
[77,81,61,72,75,74,69,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,58,57,48,58,59,60,70],
[71,0,61,53,63,58,65,63,76],
[72,69,0,65,60,72,68,74,72],
[73,77,65,0,68,74,69,64,69],
[82,67,70,62,0,63,70,69,70],
[72,72,58,56,67,0,66,62,81],
[71,65,62,61,60,64,0,63,75],
[70,67,56,66,61,68,67,0,76],
[60,54,58,61,60,49,55,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,72,69,72,69,65,62,78],
[64,0,68,75,73,68,62,66,73],
[58,62,0,62,55,53,60,62,68],
[61,55,68,0,62,66,56,64,61],
[58,57,75,68,0,61,63,63,66],
[61,62,77,64,69,0,62,57,74],
[65,68,70,74,67,68,0,66,73],
[68,64,68,66,67,73,64,0,68],
[52,57,62,69,64,56,57,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,64,57,71,66,67,51,63],
[65,0,59,54,81,61,63,56,62],
[66,71,0,62,75,64,61,57,64],
[73,76,68,0,83,67,65,66,78],
[59,49,55,47,0,60,69,55,64],
[64,69,66,63,70,0,70,74,78],
[63,67,69,65,61,60,0,50,69],
[79,74,73,64,75,56,80,0,68],
[67,68,66,52,66,52,61,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,78,68,78,77,75,79,63],
[70,0,71,72,59,78,77,68,64],
[52,59,0,60,53,71,70,62,61],
[62,58,70,0,61,68,63,71,68],
[52,71,77,69,0,72,63,74,73],
[53,52,59,62,58,0,68,60,70],
[55,53,60,67,67,62,0,58,53],
[51,62,68,59,56,70,72,0,64],
[67,66,69,62,57,60,77,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,69,61,60,69,66,58,66],
[65,0,65,59,50,76,52,61,57],
[61,65,0,65,49,71,65,53,62],
[69,71,65,0,68,69,59,62,56],
[70,80,81,62,0,80,69,67,67],
[61,54,59,61,50,0,50,65,55],
[64,78,65,71,61,80,0,62,65],
[72,69,77,68,63,65,68,0,64],
[64,73,68,74,63,75,65,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,72,61,75,64,66,69,65],
[71,0,63,76,68,72,66,62,75],
[58,67,0,74,55,62,65,57,56],
[69,54,56,0,61,65,66,58,59],
[55,62,75,69,0,56,70,63,58],
[66,58,68,65,74,0,60,55,70],
[64,64,65,64,60,70,0,72,64],
[61,68,73,72,67,75,58,0,70],
[65,55,74,71,72,60,66,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,70,65,62,68,57,66,69],
[71,0,78,64,68,63,60,75,66],
[60,52,0,60,58,57,64,84,73],
[65,66,70,0,69,69,64,78,76],
[68,62,72,61,0,59,65,74,63],
[62,67,73,61,71,0,63,82,76],
[73,70,66,66,65,67,0,63,76],
[64,55,46,52,56,48,67,0,62],
[61,64,57,54,67,54,54,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,69,75,74,60,78,81,62],
[61,0,72,81,72,65,82,78,69],
[61,58,0,75,68,63,69,71,68],
[55,49,55,0,55,62,69,64,63],
[56,58,62,75,0,60,66,71,59],
[70,65,67,68,70,0,81,75,70],
[52,48,61,61,64,49,0,63,57],
[49,52,59,66,59,55,67,0,51],
[68,61,62,67,71,60,73,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,60,76,72,79,73,84,59],
[66,0,49,68,77,68,64,80,64],
[70,81,0,79,76,81,65,78,76],
[54,62,51,0,68,61,59,68,66],
[58,53,54,62,0,61,62,67,62],
[51,62,49,69,69,0,51,73,62],
[57,66,65,71,68,79,0,86,67],
[46,50,52,62,63,57,44,0,45],
[71,66,54,64,68,68,63,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,71,79,68,78,72,65,69],
[56,0,59,50,47,40,62,37,61],
[59,71,0,60,48,59,67,52,68],
[51,80,70,0,51,44,66,64,58],
[62,83,82,79,0,64,85,68,61],
[52,90,71,86,66,0,75,77,83],
[58,68,63,64,45,55,0,64,46],
[65,93,78,66,62,53,66,0,57],
[61,69,62,72,69,47,84,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,68,62,64,58,72,66,64],
[73,0,68,74,71,62,67,75,67],
[62,62,0,74,72,62,73,81,70],
[68,56,56,0,71,45,65,66,61],
[66,59,58,59,0,65,60,69,70],
[72,68,68,85,65,0,71,69,66],
[58,63,57,65,70,59,0,59,69],
[64,55,49,64,61,61,71,0,65],
[66,63,60,69,60,64,61,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,81,68,71,61,72,73,71],
[64,0,79,63,67,62,74,67,70],
[49,51,0,61,64,57,58,68,55],
[62,67,69,0,74,65,69,68,68],
[59,63,66,56,0,66,59,65,62],
[69,68,73,65,64,0,61,71,70],
[58,56,72,61,71,69,0,66,66],
[57,63,62,62,65,59,64,0,61],
[59,60,75,62,68,60,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,65,63,72,65,54,33,48],
[58,0,55,54,79,65,29,40,55],
[65,75,0,48,81,72,50,58,47],
[67,76,82,0,64,99,65,32,47],
[58,51,49,66,0,50,50,41,58],
[65,65,58,31,80,0,41,23,31],
[76,101,80,65,80,89,0,56,71],
[97,90,72,98,89,107,74,0,63],
[82,75,83,83,72,99,59,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,33,98,65,32,97,66,33],
[98,0,65,98,66,65,130,66,66],
[97,65,0,98,98,65,130,98,65],
[32,32,32,0,32,0,65,65,32],
[65,64,32,98,0,32,97,66,65],
[98,65,65,130,98,0,130,98,65],
[33,0,0,65,33,0,0,66,33],
[64,64,32,65,64,32,64,0,64],
[97,64,65,98,65,65,97,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,64,77,66,71,72,67,68],
[72,0,75,74,78,79,78,77,64],
[66,55,0,58,58,70,62,54,59],
[53,56,72,0,68,76,73,70,69],
[64,52,72,62,0,68,66,67,67],
[59,51,60,54,62,0,54,65,61],
[58,52,68,57,64,76,0,62,61],
[63,53,76,60,63,65,68,0,71],
[62,66,71,61,63,69,69,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,68,63,74,64,77,62,86],
[61,0,71,66,76,68,71,59,75],
[62,59,0,69,77,71,74,73,73],
[67,64,61,0,68,54,68,69,70],
[56,54,53,62,0,55,57,66,55],
[66,62,59,76,75,0,68,68,60],
[53,59,56,62,73,62,0,57,70],
[68,71,57,61,64,62,73,0,76],
[44,55,57,60,75,70,60,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,63,67,57,70,71,56,59],
[86,0,77,71,63,76,90,59,63],
[67,53,0,58,38,57,59,53,44],
[63,59,72,0,57,62,72,72,66],
[73,67,92,73,0,72,71,59,63],
[60,54,73,68,58,0,60,59,58],
[59,40,71,58,59,70,0,60,58],
[74,71,77,58,71,71,70,0,59],
[71,67,86,64,67,72,72,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,53,59,58,69,50,45,70],
[70,0,64,60,62,63,57,61,77],
[77,66,0,73,78,64,64,60,81],
[71,70,57,0,59,68,63,47,61],
[72,68,52,71,0,57,56,61,74],
[61,67,66,62,73,0,60,67,61],
[80,73,66,67,74,70,0,65,76],
[85,69,70,83,69,63,65,0,67],
[60,53,49,69,56,69,54,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,63,72,67,63,55,69,62],
[64,0,68,68,63,69,59,68,69],
[67,62,0,72,71,67,57,70,57],
[58,62,58,0,61,60,60,69,54],
[63,67,59,69,0,72,65,69,61],
[67,61,63,70,58,0,62,66,61],
[75,71,73,70,65,68,0,78,67],
[61,62,60,61,61,64,52,0,64],
[68,61,73,76,69,69,63,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,64,88,63,66,88,109,88],
[67,0,43,46,87,45,88,67,88],
[66,87,0,66,108,45,66,88,109],
[42,84,64,0,63,66,64,85,109],
[67,43,22,67,0,46,67,46,88],
[64,85,85,64,84,0,64,85,85],
[42,42,64,66,63,66,0,88,109],
[21,63,42,45,84,45,42,0,87],
[42,42,21,21,42,45,21,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,80,65,82,73,78,73,80],
[49,0,55,61,70,56,63,60,55],
[50,75,0,77,67,57,69,69,41],
[65,69,53,0,72,52,64,64,44],
[48,60,63,58,0,61,64,72,65],
[57,74,73,78,69,0,71,75,47],
[52,67,61,66,66,59,0,59,41],
[57,70,61,66,58,55,71,0,55],
[50,75,89,86,65,83,89,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,42,41,33,52,41,52,50],
[103,0,68,77,60,77,103,69,86],
[88,62,0,75,85,84,94,51,76],
[89,53,55,0,62,71,86,81,88],
[97,70,45,68,0,79,86,96,95],
[78,53,46,59,51,0,85,69,94],
[89,27,36,44,44,45,0,72,88],
[78,61,79,49,34,61,58,0,68],
[80,44,54,42,35,36,42,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,70,74,62,64,65,65,75],
[59,0,60,64,57,62,60,64,68],
[60,70,0,67,62,68,57,66,70],
[56,66,63,0,68,54,58,60,68],
[68,73,68,62,0,70,60,61,66],
[66,68,62,76,60,0,56,64,75],
[65,70,73,72,70,74,0,68,80],
[65,66,64,70,69,66,62,0,68],
[55,62,60,62,64,55,50,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,64,68,59,59,67,70,56],
[70,0,64,71,69,66,72,75,72],
[66,66,0,69,59,64,65,63,70],
[62,59,61,0,56,57,62,60,56],
[71,61,71,74,0,61,68,71,64],
[71,64,66,73,69,0,65,62,65],
[63,58,65,68,62,65,0,68,58],
[60,55,67,70,59,68,62,0,53],
[74,58,60,74,66,65,72,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,55,67,84,81,56,68],
[68,0,60,69,67,80,63,69,65],
[67,70,0,62,67,82,69,67,63],
[75,61,68,0,65,86,74,64,70],
[63,63,63,65,0,79,58,62,69],
[46,50,48,44,51,0,44,47,46],
[49,67,61,56,72,86,0,71,66],
[74,61,63,66,68,83,59,0,66],
[62,65,67,60,61,84,64,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,64,82,100,99,116,116,82],
[51,0,82,82,84,83,83,99,66],
[66,48,0,96,81,66,82,67,51],
[48,48,34,0,65,52,34,69,17],
[30,46,49,65,0,65,32,65,49],
[31,47,64,78,65,0,80,64,63],
[14,47,48,96,98,50,0,83,48],
[14,31,63,61,65,66,47,0,33],
[48,64,79,113,81,67,82,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,39,39,39,48,70,40,51],
[76,0,61,79,69,67,95,59,74],
[91,69,0,75,64,68,103,59,81],
[91,51,55,0,76,65,87,67,80],
[91,61,66,54,0,54,94,53,64],
[82,63,62,65,76,0,75,61,67],
[60,35,27,43,36,55,0,41,53],
[90,71,71,63,77,69,89,0,69],
[79,56,49,50,66,63,77,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,76,60,77,76,80,62,78],
[45,0,56,56,56,53,63,62,54],
[54,74,0,52,64,68,76,60,54],
[70,74,78,0,69,66,85,57,68],
[53,74,66,61,0,64,81,63,55],
[54,77,62,64,66,0,72,69,64],
[50,67,54,45,49,58,0,63,49],
[68,68,70,73,67,61,67,0,62],
[52,76,76,62,75,66,81,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,76,73,85,58,51,80],
[63,0,69,88,80,88,71,52,73],
[66,61,0,85,82,96,60,52,79],
[54,42,45,0,66,71,55,56,67],
[57,50,48,64,0,70,52,54,57],
[45,42,34,59,60,0,38,32,50],
[72,59,70,75,78,92,0,70,74],
[79,78,78,74,76,98,60,0,88],
[50,57,51,63,73,80,56,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,76,72,66,72,74,65,72],
[58,0,71,64,65,72,65,69,67],
[54,59,0,64,60,61,70,56,67],
[58,66,66,0,67,66,76,69,79],
[64,65,70,63,0,68,69,63,65],
[58,58,69,64,62,0,68,68,66],
[56,65,60,54,61,62,0,57,68],
[65,61,74,61,67,62,73,0,71],
[58,63,63,51,65,64,62,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,61,68,65,67,67,59,55],
[78,0,71,57,72,74,72,79,68],
[69,59,0,63,60,65,68,70,66],
[62,73,67,0,71,84,79,82,80],
[65,58,70,59,0,62,68,64,64],
[63,56,65,46,68,0,69,59,71],
[63,58,62,51,62,61,0,56,70],
[71,51,60,48,66,71,74,0,69],
[75,62,64,50,66,59,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,71,67,58,62,66,65,63],
[66,0,70,69,60,66,72,60,59],
[59,60,0,71,60,54,58,63,57],
[63,61,59,0,62,61,65,57,59],
[72,70,70,68,0,67,73,65,56],
[68,64,76,69,63,0,67,72,56],
[64,58,72,65,57,63,0,59,50],
[65,70,67,73,65,58,71,0,67],
[67,71,73,71,74,74,80,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,64,59,54,65,61,53,68],
[70,0,81,67,68,60,76,63,67],
[66,49,0,57,59,66,61,50,59],
[71,63,73,0,77,69,80,70,72],
[76,62,71,53,0,53,56,61,67],
[65,70,64,61,77,0,62,67,69],
[69,54,69,50,74,68,0,58,63],
[77,67,80,60,69,63,72,0,63],
[62,63,71,58,63,61,67,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,57,67,55,59,62,51,69],
[72,0,63,65,65,67,69,62,78],
[73,67,0,76,67,67,73,65,73],
[63,65,54,0,62,60,61,50,72],
[75,65,63,68,0,60,59,62,72],
[71,63,63,70,70,0,65,66,76],
[68,61,57,69,71,65,0,63,79],
[79,68,65,80,68,64,67,0,71],
[61,52,57,58,58,54,51,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,67,71,63,67,71,65,66],
[67,0,67,78,65,68,71,72,68],
[63,63,0,67,62,58,68,57,68],
[59,52,63,0,55,58,65,60,76],
[67,65,68,75,0,58,64,69,76],
[63,62,72,72,72,0,71,72,71],
[59,59,62,65,66,59,0,57,62],
[65,58,73,70,61,58,73,0,65],
[64,62,62,54,54,59,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,68,57,74,69,67,65,68],
[64,0,64,59,69,68,71,74,64],
[62,66,0,60,71,71,61,69,65],
[73,71,70,0,68,68,66,63,73],
[56,61,59,62,0,70,65,63,67],
[61,62,59,62,60,0,67,64,63],
[63,59,69,64,65,63,0,58,60],
[65,56,61,67,67,66,72,0,68],
[62,66,65,57,63,67,70,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,62,63,58,63,75,63,55],
[66,0,66,68,63,68,79,56,68],
[68,64,0,52,66,71,71,74,56],
[67,62,78,0,67,77,80,63,69],
[72,67,64,63,0,62,76,66,73],
[67,62,59,53,68,0,77,66,65],
[55,51,59,50,54,53,0,52,51],
[67,74,56,67,64,64,78,0,61],
[75,62,74,61,57,65,79,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,71,76,75,68,74,65,78],
[57,0,67,64,80,69,76,63,77],
[59,63,0,68,64,62,54,61,67],
[54,66,62,0,64,60,67,62,65],
[55,50,66,66,0,69,60,59,63],
[62,61,68,70,61,0,67,58,66],
[56,54,76,63,70,63,0,67,63],
[65,67,69,68,71,72,63,0,66],
[52,53,63,65,67,64,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,68,62,66,58,73,58,55],
[61,0,51,61,54,57,64,38,53],
[62,79,0,61,65,58,71,58,58],
[68,69,69,0,78,65,66,58,54],
[64,76,65,52,0,69,70,54,58],
[72,73,72,65,61,0,80,65,55],
[57,66,59,64,60,50,0,50,50],
[72,92,72,72,76,65,80,0,65],
[75,77,72,76,72,75,80,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,63,54,54,52,60,61,62],
[76,0,66,62,62,72,65,63,60],
[67,64,0,59,57,64,59,68,66],
[76,68,71,0,66,70,80,73,65],
[76,68,73,64,0,69,69,62,74],
[78,58,66,60,61,0,63,70,65],
[70,65,71,50,61,67,0,62,71],
[69,67,62,57,68,60,68,0,62],
[68,70,64,65,56,65,59,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,61,82,75,67,70,72,67],
[62,0,67,75,78,72,67,77,64],
[69,63,0,72,60,68,60,64,69],
[48,55,58,0,58,46,37,73,53],
[55,52,70,72,0,50,50,76,68],
[63,58,62,84,80,0,68,97,77],
[60,63,70,93,80,62,0,95,80],
[58,53,66,57,54,33,35,0,56],
[63,66,61,77,62,53,50,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,69,65,60,60,66,65,63],
[54,0,63,49,50,58,58,52,55],
[61,67,0,61,55,61,67,59,60],
[65,81,69,0,62,73,76,67,58],
[70,80,75,68,0,68,75,66,63],
[70,72,69,57,62,0,70,64,63],
[64,72,63,54,55,60,0,55,61],
[65,78,71,63,64,66,75,0,72],
[67,75,70,72,67,67,69,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,107,86,86,86,42,64,43],
[88,0,107,86,65,109,65,85,43],
[23,23,0,22,43,23,23,44,0],
[44,44,108,0,88,44,65,65,44],
[44,65,87,42,0,44,65,65,65],
[44,21,107,86,86,0,44,43,43],
[88,65,107,65,65,86,0,85,65],
[66,45,86,65,65,87,45,0,22],
[87,87,130,86,65,87,65,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,63,69,72,62,68,66,63],
[63,0,68,78,68,66,63,71,66],
[67,62,0,63,71,58,59,67,65],
[61,52,67,0,58,62,54,62,61],
[58,62,59,72,0,58,66,73,63],
[68,64,72,68,72,0,62,75,70],
[62,67,71,76,64,68,0,71,70],
[64,59,63,68,57,55,59,0,62],
[67,64,65,69,67,60,60,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,65,65,0,65,0,65,0],
[130,0,65,65,65,130,65,65,65],
[65,65,0,65,65,65,65,130,0],
[65,65,65,0,0,130,0,65,65],
[130,65,65,130,0,130,130,65,65],
[65,0,65,0,0,0,0,65,0],
[130,65,65,130,0,130,0,65,65],
[65,65,0,65,65,65,65,0,0],
[130,65,130,65,65,130,65,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,52,45,50,44,57,48,59],
[80,0,63,62,56,64,72,68,67],
[78,67,0,54,63,72,68,60,74],
[85,68,76,0,64,63,80,82,89],
[80,74,67,66,0,63,77,86,88],
[86,66,58,67,67,0,80,76,71],
[73,58,62,50,53,50,0,67,75],
[82,62,70,48,44,54,63,0,79],
[71,63,56,41,42,59,55,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,64,62,73,71,73,68,79],
[60,0,75,62,62,68,75,74,77],
[66,55,0,67,71,65,78,71,81],
[68,68,63,0,62,65,64,64,64],
[57,68,59,68,0,59,72,65,77],
[59,62,65,65,71,0,76,69,75],
[57,55,52,66,58,54,0,64,66],
[62,56,59,66,65,61,66,0,64],
[51,53,49,66,53,55,64,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,68,77,71,65,71,60,79],
[59,0,65,59,62,67,68,71,73],
[62,65,0,70,69,64,70,66,66],
[53,71,60,0,67,61,57,61,65],
[59,68,61,63,0,59,70,69,72],
[65,63,66,69,71,0,61,69,66],
[59,62,60,73,60,69,0,74,70],
[70,59,64,69,61,61,56,0,71],
[51,57,64,65,58,64,60,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,79,72,70,69,53,84,67],
[57,0,78,64,67,68,64,74,70],
[51,52,0,44,54,53,27,45,54],
[58,66,86,0,66,71,66,76,73],
[60,63,76,64,0,49,60,77,62],
[61,62,77,59,81,0,57,78,61],
[77,66,103,64,70,73,0,86,85],
[46,56,85,54,53,52,44,0,75],
[63,60,76,57,68,69,45,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,61,72,61,65,67,66,64],
[58,0,65,62,59,60,56,55,54],
[69,65,0,67,59,63,69,55,64],
[58,68,63,0,66,66,56,57,56],
[69,71,71,64,0,67,75,74,65],
[65,70,67,64,63,0,70,68,66],
[63,74,61,74,55,60,0,59,58],
[64,75,75,73,56,62,71,0,68],
[66,76,66,74,65,64,72,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,83,90,83,70,83,63,72],
[56,0,64,69,66,74,82,57,73],
[47,66,0,79,58,61,76,56,66],
[40,61,51,0,61,59,71,49,69],
[47,64,72,69,0,65,77,53,75],
[60,56,69,71,65,0,76,65,64],
[47,48,54,59,53,54,0,52,44],
[67,73,74,81,77,65,78,0,73],
[58,57,64,61,55,66,86,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,77,62,76,62,68,64,70],
[63,0,70,59,72,59,72,67,64],
[53,60,0,58,61,55,64,60,61],
[68,71,72,0,75,65,63,69,69],
[54,58,69,55,0,54,65,67,67],
[68,71,75,65,76,0,80,80,78],
[62,58,66,67,65,50,0,56,65],
[66,63,70,61,63,50,74,0,75],
[60,66,69,61,63,52,65,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,65,60,50,59,60,55,60],
[74,0,67,65,69,70,66,73,65],
[65,63,0,68,69,60,77,68,64],
[70,65,62,0,57,56,74,69,67],
[80,61,61,73,0,68,62,64,65],
[71,60,70,74,62,0,65,64,61],
[70,64,53,56,68,65,0,60,60],
[75,57,62,61,66,66,70,0,57],
[70,65,66,63,65,69,70,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,64,58,66,68,59,61,61],
[68,0,63,66,55,64,57,59,68],
[66,67,0,59,60,65,57,58,73],
[72,64,71,0,71,70,69,67,74],
[64,75,70,59,0,66,66,64,71],
[62,66,65,60,64,0,62,59,61],
[71,73,73,61,64,68,0,66,68],
[69,71,72,63,66,71,64,0,73],
[69,62,57,56,59,69,62,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,58,71,58,65,74,71,74],
[66,0,61,76,72,69,76,67,74],
[72,69,0,67,68,63,58,65,68],
[59,54,63,0,53,57,57,58,59],
[72,58,62,77,0,62,72,71,67],
[65,61,67,73,68,0,74,63,65],
[56,54,72,73,58,56,0,52,60],
[59,63,65,72,59,67,78,0,66],
[56,56,62,71,63,65,70,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,77,65,60,74,67,79,64],
[69,0,67,48,49,67,59,43,69],
[53,63,0,44,60,63,71,70,59],
[65,82,86,0,78,76,76,83,60],
[70,81,70,52,0,67,69,85,73],
[56,63,67,54,63,0,63,66,57],
[63,71,59,54,61,67,0,64,58],
[51,87,60,47,45,64,66,0,61],
[66,61,71,70,57,73,72,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,62,66,65,68,69,78,66],
[51,0,53,58,52,58,57,59,64],
[68,77,0,62,70,67,70,72,70],
[64,72,68,0,71,71,71,77,71],
[65,78,60,59,0,67,69,68,74],
[62,72,63,59,63,0,64,67,77],
[61,73,60,59,61,66,0,71,74],
[52,71,58,53,62,63,59,0,70],
[64,66,60,59,56,53,56,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,53,57,64,61,69,60,79],
[68,0,66,67,64,71,67,72,81],
[77,64,0,71,75,59,74,69,75],
[73,63,59,0,71,62,68,67,82],
[66,66,55,59,0,63,66,61,77],
[69,59,71,68,67,0,70,64,75],
[61,63,56,62,64,60,0,57,68],
[70,58,61,63,69,66,73,0,78],
[51,49,55,48,53,55,62,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,55,73,56,58,66,58,64],
[76,0,62,75,65,72,71,69,69],
[75,68,0,71,64,66,73,62,70],
[57,55,59,0,60,57,58,46,58],
[74,65,66,70,0,63,73,62,68],
[72,58,64,73,67,0,67,64,61],
[64,59,57,72,57,63,0,57,65],
[72,61,68,84,68,66,73,0,63],
[66,61,60,72,62,69,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,92,76,110,70,54,76,74],
[38,0,57,38,56,37,18,38,16],
[38,73,0,77,89,71,53,77,56],
[54,92,53,0,88,71,88,76,56],
[20,74,41,42,0,37,19,22,38],
[60,93,59,59,93,0,37,59,38],
[76,112,77,42,111,93,0,42,58],
[54,92,53,54,108,71,88,0,16],
[56,114,74,74,92,92,72,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,60,65,55,65,62,60,63],
[66,0,77,65,65,79,63,71,74],
[70,53,0,59,71,68,65,63,65],
[65,65,71,0,73,83,71,72,66],
[75,65,59,57,0,59,63,54,66],
[65,51,62,47,71,0,62,67,59],
[68,67,65,59,67,68,0,68,61],
[70,59,67,58,76,63,62,0,68],
[67,56,65,64,64,71,69,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,67,49,54,71,50,57,61],
[81,0,54,57,57,70,55,35,53],
[63,76,0,48,57,74,49,45,69],
[81,73,82,0,81,73,73,65,77],
[76,73,73,49,0,61,64,56,63],
[59,60,56,57,69,0,53,47,76],
[80,75,81,57,66,77,0,74,69],
[73,95,85,65,74,83,56,0,94],
[69,77,61,53,67,54,61,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,57,55,76,62,55,57,53],
[80,0,66,68,81,74,59,73,66],
[73,64,0,70,75,66,64,69,64],
[75,62,60,0,86,57,52,62,66],
[54,49,55,44,0,60,51,44,38],
[68,56,64,73,70,0,66,62,68],
[75,71,66,78,79,64,0,71,72],
[73,57,61,68,86,68,59,0,63],
[77,64,66,64,92,62,58,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,56,56,49,56,56,49,54],
[75,0,55,58,64,64,61,53,60],
[74,75,0,72,64,68,66,69,68],
[74,72,58,0,62,66,73,59,59],
[81,66,66,68,0,68,65,57,57],
[74,66,62,64,62,0,68,60,57],
[74,69,64,57,65,62,0,66,57],
[81,77,61,71,73,70,64,0,68],
[76,70,62,71,73,73,73,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,68,75,59,74,63,63,67],
[65,0,70,63,66,68,62,71,74],
[62,60,0,57,68,65,49,66,77],
[55,67,73,0,56,65,58,60,69],
[71,64,62,74,0,64,62,68,74],
[56,62,65,65,66,0,65,70,71],
[67,68,81,72,68,65,0,61,82],
[67,59,64,70,62,60,69,0,72],
[63,56,53,61,56,59,48,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,72,65,70,59,60,61],
[60,0,57,66,65,64,60,53,73],
[65,73,0,76,72,70,64,63,68],
[58,64,54,0,68,65,59,53,61],
[65,65,58,62,0,66,54,68,64],
[60,66,60,65,64,0,67,61,58],
[71,70,66,71,76,63,0,63,70],
[70,77,67,77,62,69,67,0,69],
[69,57,62,69,66,72,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,63,64,67,79,66,80],
[61,0,60,55,66,69,66,59,68],
[65,70,0,74,63,67,73,70,81],
[67,75,56,0,55,53,66,51,73],
[66,64,67,75,0,69,84,65,80],
[63,61,63,77,61,0,71,67,72],
[51,64,57,64,46,59,0,59,64],
[64,71,60,79,65,63,71,0,63],
[50,62,49,57,50,58,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,62,88,87,71,88,96,71],
[59,0,74,62,87,69,98,90,87],
[68,56,0,49,58,68,80,88,64],
[42,68,81,0,73,41,73,83,70],
[43,43,72,57,0,64,82,89,73],
[59,61,62,89,66,0,54,82,65],
[42,32,50,57,48,76,0,89,65],
[34,40,42,47,41,48,41,0,42],
[59,43,66,60,57,65,65,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,58,91,73,77,37,75,95],
[92,0,74,74,91,95,73,55,113],
[72,56,0,72,91,94,37,57,75],
[39,56,58,0,112,95,58,58,76],
[57,39,39,18,0,58,37,39,58],
[53,35,36,35,72,0,18,35,57],
[93,57,93,72,93,112,0,93,112],
[55,75,73,72,91,95,37,0,58],
[35,17,55,54,72,73,18,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,61,61,65,72,75,67,72],
[71,0,55,63,61,66,77,58,64],
[69,75,0,73,81,74,98,62,73],
[69,67,57,0,70,66,75,64,69],
[65,69,49,60,0,60,77,64,71],
[58,64,56,64,70,0,68,59,62],
[55,53,32,55,53,62,0,63,55],
[63,72,68,66,66,71,67,0,73],
[58,66,57,61,59,68,75,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,60,69,69,68,67,62,67],
[62,0,72,69,64,66,66,65,77],
[70,58,0,68,68,66,63,76,74],
[61,61,62,0,64,69,63,55,67],
[61,66,62,66,0,65,60,60,68],
[62,64,64,61,65,0,70,66,72],
[63,64,67,67,70,60,0,74,78],
[68,65,54,75,70,64,56,0,71],
[63,53,56,63,62,58,52,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,49,50,54,60,54,44,51],
[80,0,56,50,67,68,62,59,43],
[81,74,0,66,77,81,79,60,67],
[80,80,64,0,77,68,73,68,70],
[76,63,53,53,0,66,59,58,55],
[70,62,49,62,64,0,57,60,57],
[76,68,51,57,71,73,0,55,58],
[86,71,70,62,72,70,75,0,55],
[79,87,63,60,75,73,72,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,57,68,65,62,63,66,62],
[67,0,67,76,71,67,70,71,64],
[73,63,0,73,73,68,69,68,70],
[62,54,57,0,59,61,59,68,61],
[65,59,57,71,0,67,67,65,69],
[68,63,62,69,63,0,65,72,69],
[67,60,61,71,63,65,0,63,58],
[64,59,62,62,65,58,67,0,61],
[68,66,60,69,61,61,72,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,61,55,66,74,69,69],
[65,0,69,70,58,60,74,66,66],
[64,61,0,63,64,62,72,63,75],
[69,60,67,0,56,56,69,59,66],
[75,72,66,74,0,61,77,78,66],
[64,70,68,74,69,0,67,63,73],
[56,56,58,61,53,63,0,60,59],
[61,64,67,71,52,67,70,0,65],
[61,64,55,64,64,57,71,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,71,61,66,67,63,68,63],
[60,0,63,65,65,70,61,65,67],
[59,67,0,57,60,62,57,55,71],
[69,65,73,0,50,70,58,48,62],
[64,65,70,80,0,58,64,71,78],
[63,60,68,60,72,0,74,66,64],
[67,69,73,72,66,56,0,85,71],
[62,65,75,82,59,64,45,0,56],
[67,63,59,68,52,66,59,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,55,34,76,55,45,55,65],
[53,0,55,21,54,32,56,45,22],
[75,75,0,54,76,76,67,66,64],
[96,109,76,0,98,77,57,77,75],
[54,76,54,32,0,67,67,67,44],
[75,98,54,53,63,0,66,65,76],
[85,74,63,73,63,64,0,96,74],
[75,85,64,53,63,65,34,0,52],
[65,108,66,55,86,54,56,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,52,63,72,74,67,55,84],
[49,0,56,52,60,74,55,64,63],
[78,74,0,67,74,85,71,62,91],
[67,78,63,0,84,94,61,62,78],
[58,70,56,46,0,64,53,52,62],
[56,56,45,36,66,0,53,38,64],
[63,75,59,69,77,77,0,71,76],
[75,66,68,68,78,92,59,0,83],
[46,67,39,52,68,66,54,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,75,70,63,62,63,64,65],
[62,0,69,63,65,65,61,64,64],
[55,61,0,60,55,63,61,54,60],
[60,67,70,0,66,65,64,68,62],
[67,65,75,64,0,63,64,61,59],
[68,65,67,65,67,0,66,60,70],
[67,69,69,66,66,64,0,71,54],
[66,66,76,62,69,70,59,0,69],
[65,66,70,68,71,60,76,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,60,61,66,67,59,56,66],
[72,0,65,72,76,70,78,62,64],
[70,65,0,75,74,78,73,74,87],
[69,58,55,0,58,52,72,64,71],
[64,54,56,72,0,66,64,69,76],
[63,60,52,78,64,0,66,60,71],
[71,52,57,58,66,64,0,58,70],
[74,68,56,66,61,70,72,0,81],
[64,66,43,59,54,59,60,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,72,65,59,68,63,71,57],
[64,0,55,56,55,58,59,71,57],
[58,75,0,62,63,61,63,78,64],
[65,74,68,0,71,73,75,85,75],
[71,75,67,59,0,65,68,74,64],
[62,72,69,57,65,0,63,79,60],
[67,71,67,55,62,67,0,74,65],
[59,59,52,45,56,51,56,0,55],
[73,73,66,55,66,70,65,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,61,68,63,80,70,64,61],
[56,0,54,60,58,64,70,55,54],
[69,76,0,64,66,75,71,56,62],
[62,70,66,0,66,71,67,67,64],
[67,72,64,64,0,76,70,63,63],
[50,66,55,59,54,0,61,53,55],
[60,60,59,63,60,69,0,55,59],
[66,75,74,63,67,77,75,0,67],
[69,76,68,66,67,75,71,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,72,58,57,51,63,54,40],
[78,0,90,70,84,69,77,66,57],
[58,40,0,54,53,57,51,47,39],
[72,60,76,0,62,61,76,65,54],
[73,46,77,68,0,63,64,67,69],
[79,61,73,69,67,0,77,65,47],
[67,53,79,54,66,53,0,64,45],
[76,64,83,65,63,65,66,0,45],
[90,73,91,76,61,83,85,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,58,58,69,72,58,69,63],
[63,0,60,61,56,61,71,64,64],
[72,70,0,63,62,67,71,62,69],
[72,69,67,0,64,67,70,69,64],
[61,74,68,66,0,67,71,73,63],
[58,69,63,63,63,0,55,62,53],
[72,59,59,60,59,75,0,57,58],
[61,66,68,61,57,68,73,0,68],
[67,66,61,66,67,77,72,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,60,66,79,73,66,64,76],
[71,0,71,76,74,75,68,61,75],
[70,59,0,65,74,64,64,59,71],
[64,54,65,0,66,69,61,74,70],
[51,56,56,64,0,65,59,61,68],
[57,55,66,61,65,0,69,53,70],
[64,62,66,69,71,61,0,58,69],
[66,69,71,56,69,77,72,0,71],
[54,55,59,60,62,60,61,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,73,63,67,64,69,70,61],
[64,0,63,58,62,66,68,54,67],
[57,67,0,65,58,63,65,65,54],
[67,72,65,0,71,70,70,71,65],
[63,68,72,59,0,66,74,67,66],
[66,64,67,60,64,0,65,59,61],
[61,62,65,60,56,65,0,67,55],
[60,76,65,59,63,71,63,0,65],
[69,63,76,65,64,69,75,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,55,62,77,76,67,61],
[68,0,67,62,59,75,80,64,51],
[67,63,0,63,50,66,77,63,68],
[75,68,67,0,73,83,93,61,46],
[68,71,80,57,0,68,93,64,52],
[53,55,64,47,62,0,65,63,42],
[54,50,53,37,37,65,0,43,49],
[63,66,67,69,66,67,87,0,74],
[69,79,62,84,78,88,81,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,65,70,65,72,74,53,67],
[55,0,73,61,62,67,59,47,56],
[65,57,0,70,61,72,61,58,58],
[60,69,60,0,61,66,67,51,58],
[65,68,69,69,0,68,63,51,57],
[58,63,58,64,62,0,65,59,55],
[56,71,69,63,67,65,0,58,58],
[77,83,72,79,79,71,72,0,65],
[63,74,72,72,73,75,72,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,66,57,60,49,57,58,51],
[82,0,75,53,65,55,67,62,64],
[64,55,0,53,60,49,59,56,57],
[73,77,77,0,71,67,73,76,64],
[70,65,70,59,0,67,74,69,69],
[81,75,81,63,63,0,69,65,68],
[73,63,71,57,56,61,0,66,67],
[72,68,74,54,61,65,64,0,61],
[79,66,73,66,61,62,63,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,71,65,66,56,72,72,64],
[70,0,67,56,63,77,88,83,79],
[59,63,0,72,65,59,66,70,81],
[65,74,58,0,59,61,87,67,65],
[64,67,65,71,0,69,83,74,65],
[74,53,71,69,61,0,89,75,72],
[58,42,64,43,47,41,0,55,49],
[58,47,60,63,56,55,75,0,56],
[66,51,49,65,65,58,81,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,51,61,65,65,66,52,61],
[72,0,72,73,58,71,71,64,76],
[79,58,0,67,66,74,67,64,53],
[69,57,63,0,68,71,60,53,73],
[65,72,64,62,0,80,71,60,68],
[65,59,56,59,50,0,61,51,56],
[64,59,63,70,59,69,0,46,63],
[78,66,66,77,70,79,84,0,64],
[69,54,77,57,62,74,67,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,59,62,61,59,74,64,60],
[61,0,55,59,69,60,62,60,56],
[71,75,0,67,70,67,74,65,61],
[68,71,63,0,66,66,79,64,69],
[69,61,60,64,0,65,69,61,57],
[71,70,63,64,65,0,65,68,58],
[56,68,56,51,61,65,0,64,55],
[66,70,65,66,69,62,66,0,61],
[70,74,69,61,73,72,75,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,18,53,56,36,37,38,38],
[74,0,74,110,75,56,75,56,57],
[112,56,0,73,76,56,55,76,58],
[77,20,57,0,58,18,37,58,40],
[74,55,54,72,0,53,72,93,35],
[94,74,74,112,77,0,57,58,59],
[93,55,75,93,58,73,0,93,93],
[92,74,54,72,37,72,37,0,19],
[92,73,72,90,95,71,37,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,69,70,76,69,78,92,59],
[60,0,58,68,62,66,65,73,62],
[61,72,0,62,66,61,65,72,60],
[60,62,68,0,77,61,76,77,70],
[54,68,64,53,0,57,68,61,48],
[61,64,69,69,73,0,72,81,53],
[52,65,65,54,62,58,0,85,68],
[38,57,58,53,69,49,45,0,43],
[71,68,70,60,82,77,62,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,60,63,70,56,60,51,65],
[66,0,57,66,62,69,70,62,71],
[70,73,0,67,61,67,78,73,69],
[67,64,63,0,57,68,68,49,64],
[60,68,69,73,0,56,63,57,62],
[74,61,63,62,74,0,74,69,69],
[70,60,52,62,67,56,0,44,51],
[79,68,57,81,73,61,86,0,45],
[65,59,61,66,68,61,79,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,56,60,53,61,51,58,60],
[77,0,70,77,60,59,63,66,79],
[74,60,0,84,71,69,56,76,50],
[70,53,46,0,61,60,73,68,61],
[77,70,59,69,0,74,62,74,46],
[69,71,61,70,56,0,52,53,73],
[79,67,74,57,68,78,0,66,61],
[72,64,54,62,56,77,64,0,68],
[70,51,80,69,84,57,69,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,0,0,65,0,65,65,65],
[0,0,0,0,0,0,0,0,0],
[130,130,0,65,130,65,65,130,130],
[130,130,65,0,130,65,130,130,130],
[65,130,0,0,0,0,0,65,65],
[130,130,65,65,130,0,130,65,130],
[65,130,65,0,130,0,0,65,65],
[65,130,0,0,65,65,65,0,130],
[65,130,0,0,65,0,65,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,74,71,70,68,80,62,75],
[48,0,56,71,60,56,71,57,60],
[56,74,0,66,69,69,82,78,71],
[59,59,64,0,71,77,78,71,51],
[60,70,61,59,0,68,69,61,65],
[62,74,61,53,62,0,80,63,55],
[50,59,48,52,61,50,0,58,56],
[68,73,52,59,69,67,72,0,71],
[55,70,59,79,65,75,74,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,60,73,69,62,51,67,59],
[66,0,65,79,79,58,60,76,67],
[70,65,0,79,74,63,65,55,78],
[57,51,51,0,53,56,67,67,60],
[61,51,56,77,0,61,59,69,77],
[68,72,67,74,69,0,65,69,72],
[79,70,65,63,71,65,0,67,69],
[63,54,75,63,61,61,63,0,80],
[71,63,52,70,53,58,61,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,53,58,53,51,57,57,61],
[70,0,53,63,73,63,61,67,71],
[77,77,0,75,72,62,67,73,74],
[72,67,55,0,64,64,68,61,71],
[77,57,58,66,0,57,63,69,66],
[79,67,68,66,73,0,62,71,73],
[73,69,63,62,67,68,0,69,71],
[73,63,57,69,61,59,61,0,68],
[69,59,56,59,64,57,59,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,60,67,70,72,67,64,59],
[71,0,59,63,72,75,72,68,63],
[70,71,0,60,64,65,66,68,57],
[63,67,70,0,64,74,69,70,68],
[60,58,66,66,0,58,62,68,64],
[58,55,65,56,72,0,64,56,55],
[63,58,64,61,68,66,0,69,57],
[66,62,62,60,62,74,61,0,51],
[71,67,73,62,66,75,73,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,74,75,64,77,81,68,75],
[61,0,74,59,70,75,57,63,74],
[56,56,0,51,51,74,67,57,54],
[55,71,79,0,51,75,73,70,69],
[66,60,79,79,0,77,76,74,67],
[53,55,56,55,53,0,49,48,64],
[49,73,63,57,54,81,0,77,70],
[62,67,73,60,56,82,53,0,81],
[55,56,76,61,63,66,60,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,69,66,67,58,69,64],
[63,0,64,66,63,64,57,62,68],
[60,66,0,64,56,55,57,58,53],
[61,64,66,0,57,67,65,73,69],
[64,67,74,73,0,70,68,73,68],
[63,66,75,63,60,0,68,65,68],
[72,73,73,65,62,62,0,60,69],
[61,68,72,57,57,65,70,0,61],
[66,62,77,61,62,62,61,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,54,63,68,63,73,66,70],
[71,0,67,64,70,68,81,69,69],
[76,63,0,56,72,74,74,67,76],
[67,66,74,0,74,71,70,56,72],
[62,60,58,56,0,71,61,64,58],
[67,62,56,59,59,0,59,61,66],
[57,49,56,60,69,71,0,65,64],
[64,61,63,74,66,69,65,0,65],
[60,61,54,58,72,64,66,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,78,64,59,73,73,66,69],
[63,0,69,68,62,64,64,66,47],
[52,61,0,55,49,53,54,61,55],
[66,62,75,0,55,59,70,69,57],
[71,68,81,75,0,71,66,66,59],
[57,66,77,71,59,0,66,67,66],
[57,66,76,60,64,64,0,64,57],
[64,64,69,61,64,63,66,0,58],
[61,83,75,73,71,64,73,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,55,51,66,71,54,63,45],
[58,0,49,51,62,67,56,59,57],
[75,81,0,59,53,82,60,66,64],
[79,79,71,0,71,70,55,59,69],
[64,68,77,59,0,73,59,64,64],
[59,63,48,60,57,0,33,47,47],
[76,74,70,75,71,97,0,64,71],
[67,71,64,71,66,83,66,0,65],
[85,73,66,61,66,83,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,64,62,72,69,66,78,68],
[64,0,68,67,82,74,71,76,75],
[66,62,0,69,70,70,61,74,71],
[68,63,61,0,71,77,58,89,72],
[58,48,60,59,0,59,58,74,56],
[61,56,60,53,71,0,56,69,58],
[64,59,69,72,72,74,0,78,70],
[52,54,56,41,56,61,52,0,67],
[62,55,59,58,74,72,60,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,64,66,58,68,64,59,81],
[61,0,59,65,64,65,56,67,70],
[66,71,0,66,67,75,67,65,73],
[64,65,64,0,56,66,65,62,75],
[72,66,63,74,0,74,68,66,77],
[62,65,55,64,56,0,52,59,74],
[66,74,63,65,62,78,0,74,83],
[71,63,65,68,64,71,56,0,69],
[49,60,57,55,53,56,47,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,63,64,56,69,59,66,60],
[67,0,73,68,63,76,64,62,64],
[67,57,0,69,56,69,63,58,75],
[66,62,61,0,52,64,63,62,63],
[74,67,74,78,0,75,65,67,72],
[61,54,61,66,55,0,57,57,64],
[71,66,67,67,65,73,0,67,74],
[64,68,72,68,63,73,63,0,78],
[70,66,55,67,58,66,56,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,68,83,89,68,67,82,68],
[70,0,69,62,74,68,54,82,71],
[62,61,0,56,75,61,67,75,68],
[47,68,74,0,67,67,74,84,59],
[41,56,55,63,0,63,61,61,62],
[62,62,69,63,67,0,61,84,39],
[63,76,63,56,69,69,0,63,56],
[48,48,55,46,69,46,67,0,55],
[62,59,62,71,68,91,74,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,58,59,58,59,56,60,58],
[62,0,59,53,67,60,64,64,59],
[72,71,0,60,75,67,61,75,61],
[71,77,70,0,74,75,68,75,58],
[72,63,55,56,0,60,57,67,61],
[71,70,63,55,70,0,69,67,60],
[74,66,69,62,73,61,0,69,67],
[70,66,55,55,63,63,61,0,52],
[72,71,69,72,69,70,63,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,55,73,61,49,55,55,66],
[81,0,77,76,58,65,60,65,91],
[75,53,0,74,68,48,54,72,75],
[57,54,56,0,67,49,57,54,57],
[69,72,62,63,0,52,68,71,70],
[81,65,82,81,78,0,70,70,83],
[75,70,76,73,62,60,0,61,79],
[75,65,58,76,59,60,69,0,69],
[64,39,55,73,60,47,51,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,74,58,66,63,63,70,64],
[68,0,68,62,64,64,57,69,59],
[56,62,0,56,54,61,62,69,57],
[72,68,74,0,61,73,70,73,72],
[64,66,76,69,0,74,66,71,57],
[67,66,69,57,56,0,62,55,63],
[67,73,68,60,64,68,0,71,63],
[60,61,61,57,59,75,59,0,62],
[66,71,73,58,73,67,67,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,47,61,55,51,65,70,84],
[57,0,57,67,72,54,60,64,69],
[83,73,0,66,77,70,55,69,88],
[69,63,64,0,72,59,73,59,76],
[75,58,53,58,0,64,63,63,68],
[79,76,60,71,66,0,62,59,78],
[65,70,75,57,67,68,0,64,91],
[60,66,61,71,67,71,66,0,75],
[46,61,42,54,62,52,39,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,70,74,76,70,62,67,82],
[71,0,74,58,74,58,63,65,73],
[60,56,0,64,74,56,56,69,78],
[56,72,66,0,83,58,68,81,83],
[54,56,56,47,0,53,48,67,69],
[60,72,74,72,77,0,70,81,91],
[68,67,74,62,82,60,0,78,81],
[63,65,61,49,63,49,52,0,73],
[48,57,52,47,61,39,49,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,66,68,68,68,50,70,73],
[72,0,71,60,60,64,69,64,78],
[64,59,0,61,71,62,60,68,66],
[62,70,69,0,71,72,56,64,69],
[62,70,59,59,0,68,53,71,72],
[62,66,68,58,62,0,51,63,63],
[80,61,70,74,77,79,0,67,71],
[60,66,62,66,59,67,63,0,72],
[57,52,64,61,58,67,59,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,66,58,60,72,53,66,61],
[74,0,69,61,64,81,65,73,59],
[64,61,0,60,56,67,64,68,59],
[72,69,70,0,67,72,61,73,56],
[70,66,74,63,0,81,56,72,60],
[58,49,63,58,49,0,50,58,51],
[77,65,66,69,74,80,0,82,70],
[64,57,62,57,58,72,48,0,52],
[69,71,71,74,70,79,60,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,66,71,72,59,65,67,63],
[68,0,60,70,77,70,73,78,74],
[64,70,0,84,83,67,71,71,72],
[59,60,46,0,71,61,59,74,75],
[58,53,47,59,0,57,62,63,63],
[71,60,63,69,73,0,74,79,71],
[65,57,59,71,68,56,0,75,62],
[63,52,59,56,67,51,55,0,61],
[67,56,58,55,67,59,68,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,65,59,72,70,73,62,69],
[70,0,65,61,65,65,70,61,66],
[65,65,0,71,68,74,79,73,75],
[71,69,59,0,68,64,79,65,73],
[58,65,62,62,0,66,74,64,65],
[60,65,56,66,64,0,74,69,63],
[57,60,51,51,56,56,0,58,65],
[68,69,57,65,66,61,72,0,65],
[61,64,55,57,65,67,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,76,72,91,78,88,65,75],
[54,0,60,46,61,55,75,58,65],
[54,70,0,50,67,64,76,49,71],
[58,84,80,0,80,80,93,68,75],
[39,69,63,50,0,63,77,52,64],
[52,75,66,50,67,0,76,62,53],
[42,55,54,37,53,54,0,53,62],
[65,72,81,62,78,68,77,0,77],
[55,65,59,55,66,77,68,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,63,31,31,64,31,63,31],
[67,0,65,31,64,64,64,31,64],
[67,65,0,65,31,98,65,31,65],
[99,99,65,0,65,130,130,63,65],
[99,66,99,65,0,130,130,97,99],
[66,66,32,0,0,0,31,63,0],
[99,66,65,0,0,99,0,63,33],
[67,99,99,67,33,67,67,0,67],
[99,66,65,65,31,130,97,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,65,0,65,0,0,0,130],
[0,0,0,0,0,0,0,0,65],
[65,130,0,0,65,0,65,65,65],
[130,130,130,0,130,130,65,65,130],
[65,130,65,0,0,0,0,0,130],
[130,130,130,0,130,0,65,65,130],
[130,130,65,65,130,65,0,130,130],
[130,130,65,65,130,65,0,0,130],
[0,65,65,0,0,0,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,73,46,61,63,57,59,63],
[78,0,66,63,61,69,69,63,78],
[57,64,0,65,64,62,62,71,58],
[84,67,65,0,65,63,69,62,73],
[69,69,66,65,0,80,83,74,73],
[67,61,68,67,50,0,54,63,75],
[73,61,68,61,47,76,0,64,66],
[71,67,59,68,56,67,66,0,72],
[67,52,72,57,57,55,64,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,71,54,64,60,63,71],
[66,0,78,83,62,71,65,68,68],
[61,52,0,55,48,61,63,62,58],
[59,47,75,0,50,48,53,59,49],
[76,68,82,80,0,63,70,66,70],
[66,59,69,82,67,0,64,64,68],
[70,65,67,77,60,66,0,58,55],
[67,62,68,71,64,66,72,0,66],
[59,62,72,81,60,62,75,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,68,71,65,77,65,62,75],
[58,0,58,61,63,59,54,60,57],
[62,72,0,69,58,60,68,59,70],
[59,69,61,0,65,67,76,57,79],
[65,67,72,65,0,70,75,52,65],
[53,71,70,63,60,0,66,56,69],
[65,76,62,54,55,64,0,65,68],
[68,70,71,73,78,74,65,0,62],
[55,73,60,51,65,61,62,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,65,65,0,65,65,65],
[65,0,0,130,0,65,0,65,65],
[65,130,0,130,0,65,65,65,65],
[65,0,0,0,0,0,0,0,65],
[65,130,130,130,0,65,130,65,65],
[130,65,65,130,65,0,65,65,130],
[65,130,65,130,0,65,0,65,65],
[65,65,65,130,65,65,65,0,65],
[65,65,65,65,65,0,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,44,86,86,130,86,88,86],
[44,0,44,86,44,88,44,88,86],
[86,86,0,86,86,130,42,44,86],
[44,44,44,0,44,88,44,88,44],
[44,86,44,86,0,86,86,44,86],
[0,42,0,42,44,0,42,0,42],
[44,86,88,86,44,88,0,44,86],
[42,42,86,42,86,130,86,0,86],
[44,44,44,86,44,88,44,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,72,76,70,75,63,75,77],
[63,0,72,80,74,59,70,66,82],
[58,58,0,66,79,60,57,66,59],
[54,50,64,0,64,62,50,73,59],
[60,56,51,66,0,69,52,52,56],
[55,71,70,68,61,0,72,71,63],
[67,60,73,80,78,58,0,74,74],
[55,64,64,57,78,59,56,0,66],
[53,48,71,71,74,67,56,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,64,58,66,58,59,73,89],
[49,0,78,38,45,39,65,55,67],
[66,52,0,51,64,46,45,64,51],
[72,92,79,0,47,68,46,56,83],
[64,85,66,83,0,54,57,84,91],
[72,91,84,62,76,0,56,82,80],
[71,65,85,84,73,74,0,59,82],
[57,75,66,74,46,48,71,0,83],
[41,63,79,47,39,50,48,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,54,82,63,41,63,80,56],
[65,0,48,58,57,67,81,63,57],
[76,82,0,92,65,74,99,71,76],
[48,72,38,0,62,47,64,77,64],
[67,73,65,68,0,67,76,79,76],
[89,63,56,83,63,0,90,69,57],
[67,49,31,66,54,40,0,63,35],
[50,67,59,53,51,61,67,0,54],
[74,73,54,66,54,73,95,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,69,57,51,55,67,56,46],
[75,0,76,72,67,64,69,66,66],
[61,54,0,60,60,60,68,59,47],
[73,58,70,0,54,63,68,63,58],
[79,63,70,76,0,70,69,62,60],
[75,66,70,67,60,0,65,57,66],
[63,61,62,62,61,65,0,58,50],
[74,64,71,67,68,73,72,0,58],
[84,64,83,72,70,64,80,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,69,66,77,69,82,72,71],
[68,0,63,64,72,75,70,66,63],
[61,67,0,68,75,76,73,67,68],
[64,66,62,0,70,72,71,66,69],
[53,58,55,60,0,64,59,64,62],
[61,55,54,58,66,0,67,64,62],
[48,60,57,59,71,63,0,63,65],
[58,64,63,64,66,66,67,0,67],
[59,67,62,61,68,68,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,97,79,91,72,65,90,90],
[49,0,87,77,75,52,51,57,77],
[33,43,0,75,63,22,16,75,63],
[51,53,55,0,60,30,47,66,91],
[39,55,67,70,0,52,24,74,57],
[58,78,108,100,78,0,57,85,95],
[65,79,114,83,106,73,0,92,86],
[40,73,55,64,56,45,38,0,71],
[40,53,67,39,73,35,44,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,64,59,57,61,60,57,56],
[74,0,64,72,67,70,68,68,66],
[66,66,0,64,60,68,66,63,66],
[71,58,66,0,66,61,70,57,62],
[73,63,70,64,0,64,64,69,69],
[69,60,62,69,66,0,68,70,69],
[70,62,64,60,66,62,0,64,65],
[73,62,67,73,61,60,66,0,69],
[74,64,64,68,61,61,65,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,72,73,68,77,56,67,77],
[66,0,85,65,57,65,50,57,60],
[58,45,0,81,52,60,51,51,57],
[57,65,49,0,42,42,54,43,51],
[62,73,78,88,0,67,58,70,70],
[53,65,70,88,63,0,75,63,75],
[74,80,79,76,72,55,0,58,87],
[63,73,79,87,60,67,72,0,77],
[53,70,73,79,60,55,43,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,70,80,78,64,71,72,65],
[50,0,67,84,63,65,73,79,68],
[60,63,0,71,81,51,74,64,63],
[50,46,59,0,67,58,72,74,62],
[52,67,49,63,0,40,59,50,52],
[66,65,79,72,90,0,80,61,65],
[59,57,56,58,71,50,0,53,55],
[58,51,66,56,80,69,77,0,70],
[65,62,67,68,78,65,75,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,0,32,33,66,0,0,65],
[97,0,32,65,33,33,33,32,98],
[130,98,0,98,66,66,98,65,130],
[98,65,32,0,66,98,33,32,98],
[97,97,64,64,0,97,64,64,97],
[64,97,64,32,33,0,32,32,97],
[130,97,32,97,66,98,0,32,98],
[130,98,65,98,66,98,98,0,130],
[65,32,0,32,33,33,32,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,67,69,59,64,60,66,68],
[61,0,67,62,55,69,64,73,65],
[63,63,0,63,62,67,49,56,61],
[61,68,67,0,61,65,67,67,68],
[71,75,68,69,0,74,65,70,67],
[66,61,63,65,56,0,64,61,55],
[70,66,81,63,65,66,0,69,73],
[64,57,74,63,60,69,61,0,63],
[62,65,69,62,63,75,57,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,34,48,48,81,33,64,50],
[99,0,66,81,81,81,64,80,101],
[96,64,0,95,95,96,81,112,81],
[82,49,35,0,83,79,84,95,67],
[82,49,35,47,0,64,50,78,67],
[49,49,34,51,66,0,51,81,67],
[97,66,49,46,80,79,0,78,82],
[66,50,18,35,52,49,52,0,52],
[80,29,49,63,63,63,48,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,44,54,43,35,52,54,46],
[95,0,83,74,74,55,64,66,75],
[86,47,0,57,55,47,64,57,56],
[76,56,73,0,74,35,45,36,66],
[87,56,75,56,0,63,55,65,75],
[95,75,83,95,67,0,46,76,94],
[78,66,66,85,75,84,0,65,77],
[76,64,73,94,65,54,65,0,75],
[84,55,74,64,55,36,53,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,64,64,60,60,55,55,54],
[80,0,78,80,76,77,60,74,70],
[66,52,0,60,65,66,51,58,62],
[66,50,70,0,66,68,57,59,63],
[70,54,65,64,0,73,66,68,56],
[70,53,64,62,57,0,49,57,56],
[75,70,79,73,64,81,0,64,63],
[75,56,72,71,62,73,66,0,64],
[76,60,68,67,74,74,67,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,63,70,62,69,74,73,71],
[49,0,52,50,50,53,60,64,64],
[67,78,0,67,67,65,64,76,80],
[60,80,63,0,64,63,69,70,62],
[68,80,63,66,0,63,66,76,62],
[61,77,65,67,67,0,67,74,75],
[56,70,66,61,64,63,0,70,65],
[57,66,54,60,54,56,60,0,63],
[59,66,50,68,68,55,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,65,69,77,64,64,64,77],
[55,0,62,57,65,65,52,57,64],
[65,68,0,63,63,64,59,54,63],
[61,73,67,0,71,59,59,57,65],
[53,65,67,59,0,59,55,51,64],
[66,65,66,71,71,0,57,62,71],
[66,78,71,71,75,73,0,65,77],
[66,73,76,73,79,68,65,0,65],
[53,66,67,65,66,59,53,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,65,130,130,65,130,65,130],
[0,0,65,130,65,65,130,0,130],
[65,65,0,130,130,65,130,65,130],
[0,0,0,0,65,65,65,0,65],
[0,65,0,65,0,65,130,65,130],
[65,65,65,65,65,0,130,65,65],
[0,0,0,65,0,0,0,0,65],
[65,130,65,130,65,65,130,0,130],
[0,0,0,65,0,65,65,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,74,60,66,55,63,59,71],
[66,0,68,63,63,64,52,60,68],
[56,62,0,66,51,52,60,64,63],
[70,67,64,0,66,64,67,66,59],
[64,67,79,64,0,62,69,54,68],
[75,66,78,66,68,0,64,72,82],
[67,78,70,63,61,66,0,73,75],
[71,70,66,64,76,58,57,0,80],
[59,62,67,71,62,48,55,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,73,78,56,75,66,79,69],
[50,0,61,57,48,59,52,58,49],
[57,69,0,62,66,80,62,67,60],
[52,73,68,0,59,77,66,74,56],
[74,82,64,71,0,70,63,73,71],
[55,71,50,53,60,0,56,58,54],
[64,78,68,64,67,74,0,72,65],
[51,72,63,56,57,72,58,0,57],
[61,81,70,74,59,76,65,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,73,61,76,59,74,67,56],
[70,0,69,65,85,68,65,63,68],
[57,61,0,56,62,61,65,78,63],
[69,65,74,0,75,59,70,73,59],
[54,45,68,55,0,60,72,51,55],
[71,62,69,71,70,0,67,64,58],
[56,65,65,60,58,63,0,63,60],
[63,67,52,57,79,66,67,0,57],
[74,62,67,71,75,72,70,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,64,69,72,63,64,69,70],
[58,0,60,52,70,65,54,53,60],
[66,70,0,68,65,67,52,71,60],
[61,78,62,0,69,74,65,64,70],
[58,60,65,61,0,64,61,62,71],
[67,65,63,56,66,0,59,58,72],
[66,76,78,65,69,71,0,64,67],
[61,77,59,66,68,72,66,0,64],
[60,70,70,60,59,58,63,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,78,73,67,72,64,68,69],
[65,0,73,70,72,62,72,68,64],
[52,57,0,68,66,56,62,59,68],
[57,60,62,0,63,57,58,58,62],
[63,58,64,67,0,55,61,61,60],
[58,68,74,73,75,0,62,59,57],
[66,58,68,72,69,68,0,59,61],
[62,62,71,72,69,71,71,0,56],
[61,66,62,68,70,73,69,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,59,57,63,64,68,63,65],
[69,0,61,66,65,71,67,60,65],
[71,69,0,69,72,70,65,69,63],
[73,64,61,0,67,73,69,68,65],
[67,65,58,63,0,69,61,61,62],
[66,59,60,57,61,0,63,60,61],
[62,63,65,61,69,67,0,65,60],
[67,70,61,62,69,70,65,0,57],
[65,65,67,65,68,69,70,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,74,54,65,75,75,75,73],
[76,0,76,55,85,68,85,57,74],
[56,54,0,72,56,57,75,65,63],
[76,75,58,0,66,68,84,76,75],
[65,45,74,64,0,56,66,56,55],
[55,62,73,62,74,0,75,65,35],
[55,45,55,46,64,55,0,56,46],
[55,73,65,54,74,65,74,0,63],
[57,56,67,55,75,95,84,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,74,76,71,57,78,75],
[65,0,56,82,68,71,68,76,76],
[64,74,0,64,70,53,56,73,70],
[56,48,66,0,55,50,55,68,68],
[54,62,60,75,0,63,55,79,72],
[59,59,77,80,67,0,75,76,64],
[73,62,74,75,75,55,0,71,64],
[52,54,57,62,51,54,59,0,60],
[55,54,60,62,58,66,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,72,49,65,60,59,56,55],
[72,0,58,49,64,71,54,69,45],
[58,72,0,48,59,70,53,64,54],
[81,81,82,0,58,72,52,64,63],
[65,66,71,72,0,60,61,44,55],
[70,59,60,58,70,0,75,52,51],
[71,76,77,78,69,55,0,64,79],
[74,61,66,66,86,78,66,0,73],
[75,85,76,67,75,79,51,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,66,71,62,67,59,71,59],
[59,0,71,69,71,60,60,72,70],
[64,59,0,70,71,62,63,77,65],
[59,61,60,0,66,53,55,75,60],
[68,59,59,64,0,48,61,75,49],
[63,70,68,77,82,0,70,82,65],
[71,70,67,75,69,60,0,74,70],
[59,58,53,55,55,48,56,0,60],
[71,60,65,70,81,65,60,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,80,130,53,53,78,78,103],
[27,0,52,102,52,27,50,27,105],
[50,78,0,78,78,53,78,53,103],
[0,28,52,0,25,28,53,28,53],
[77,78,52,105,0,80,78,78,103],
[77,103,77,102,50,0,75,50,103],
[52,80,52,77,52,55,0,80,130],
[52,103,77,102,52,80,50,0,130],
[27,25,27,77,27,27,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,64,55,59,72,65,73,66],
[71,0,73,55,65,63,70,64,63],
[66,57,0,59,60,60,63,65,53],
[75,75,71,0,64,66,75,72,65],
[71,65,70,66,0,63,70,75,56],
[58,67,70,64,67,0,70,71,60],
[65,60,67,55,60,60,0,60,63],
[57,66,65,58,55,59,70,0,60],
[64,67,77,65,74,70,67,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,84,70,71,78,77,61,75],
[55,0,70,67,66,70,81,58,70],
[46,60,0,49,51,53,61,46,52],
[60,63,81,0,71,77,77,61,74],
[59,64,79,59,0,77,77,65,68],
[52,60,77,53,53,0,65,52,64],
[53,49,69,53,53,65,0,47,65],
[69,72,84,69,65,78,83,0,74],
[55,60,78,56,62,66,65,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,62,60,66,55,59,67,55],
[68,0,64,59,59,64,64,72,65],
[68,66,0,64,68,63,61,66,72],
[70,71,66,0,77,63,70,71,64],
[64,71,62,53,0,61,49,54,60],
[75,66,67,67,69,0,60,72,65],
[71,66,69,60,81,70,0,76,68],
[63,58,64,59,76,58,54,0,62],
[75,65,58,66,70,65,62,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,53,55,65,87,46,77,46],
[66,0,79,73,55,68,54,74,65],
[77,51,0,67,58,78,52,72,52],
[75,57,63,0,42,66,46,61,52],
[65,75,72,88,0,78,76,86,66],
[43,62,52,64,52,0,72,87,62],
[84,76,78,84,54,58,0,79,72],
[53,56,58,69,44,43,51,0,53],
[84,65,78,78,64,68,58,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,59,67,63,63,65,70],
[63,0,69,65,72,76,71,71,73],
[62,61,0,53,66,73,68,71,63],
[71,65,77,0,70,72,69,66,68],
[63,58,64,60,0,68,72,72,72],
[67,54,57,58,62,0,68,67,63],
[67,59,62,61,58,62,0,74,54],
[65,59,59,64,58,63,56,0,63],
[60,57,67,62,58,67,76,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,49,66,68,70,60,76,66],
[63,0,55,59,72,67,59,73,57],
[81,75,0,62,74,72,67,70,61],
[64,71,68,0,73,74,74,78,67],
[62,58,56,57,0,67,55,68,59],
[60,63,58,56,63,0,66,70,58],
[70,71,63,56,75,64,0,73,70],
[54,57,60,52,62,60,57,0,54],
[64,73,69,63,71,72,60,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,63,82,84,62,74,60,64],
[45,0,49,62,79,59,67,67,57],
[67,81,0,73,93,76,82,62,67],
[48,68,57,0,73,59,71,55,66],
[46,51,37,57,0,63,57,55,55],
[68,71,54,71,67,0,73,46,53],
[56,63,48,59,73,57,0,55,46],
[70,63,68,75,75,84,75,0,51],
[66,73,63,64,75,77,84,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,41,58,65,60,56,52,62],
[84,0,58,65,66,79,75,58,68],
[89,72,0,69,76,80,82,49,82],
[72,65,61,0,65,64,68,58,61],
[65,64,54,65,0,68,62,46,62],
[70,51,50,66,62,0,43,61,66],
[74,55,48,62,68,87,0,67,70],
[78,72,81,72,84,69,63,0,88],
[68,62,48,69,68,64,60,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,68,54,56,67,64,70,56],
[68,0,69,75,58,68,65,75,47],
[62,61,0,54,65,55,61,57,59],
[76,55,76,0,68,59,62,74,55],
[74,72,65,62,0,60,55,82,61],
[63,62,75,71,70,0,68,70,75],
[66,65,69,68,75,62,0,72,67],
[60,55,73,56,48,60,58,0,54],
[74,83,71,75,69,55,63,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,66,67,72,71,75,71,56],
[71,0,64,65,72,65,73,66,60],
[64,66,0,74,69,57,72,68,71],
[63,65,56,0,60,58,68,57,59],
[58,58,61,70,0,61,59,68,66],
[59,65,73,72,69,0,68,64,73],
[55,57,58,62,71,62,0,58,54],
[59,64,62,73,62,66,72,0,61],
[74,70,59,71,64,57,76,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,66,65,64,73,65,73,55],
[59,0,60,60,60,66,60,52,60],
[64,70,0,61,63,63,58,56,56],
[65,70,69,0,61,67,61,59,61],
[66,70,67,69,0,69,59,59,67],
[57,64,67,63,61,0,45,51,54],
[65,70,72,69,71,85,0,69,62],
[57,78,74,71,71,79,61,0,60],
[75,70,74,69,63,76,68,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,80,67,64,61,64,64],
[65,0,75,71,75,53,65,71,70],
[63,55,0,56,65,55,53,56,56],
[50,59,74,0,67,59,66,66,62],
[63,55,65,63,0,54,60,52,51],
[66,77,75,71,76,0,68,64,66],
[69,65,77,64,70,62,0,64,61],
[66,59,74,64,78,66,66,0,69],
[66,60,74,68,79,64,69,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,71,72,57,44,100,72,58],
[15,0,57,43,42,44,59,43,27],
[59,73,0,58,72,59,60,73,44],
[58,87,72,0,56,58,72,72,73],
[73,88,58,74,0,44,73,73,44],
[86,86,71,72,86,0,71,59,42],
[30,71,70,58,57,59,0,59,43],
[58,87,57,58,57,71,71,0,42],
[72,103,86,57,86,88,87,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,55,63,60,69,69,63,73],
[62,0,61,65,68,67,65,72,68],
[75,69,0,60,73,65,66,68,68],
[67,65,70,0,72,74,66,77,78],
[70,62,57,58,0,63,64,78,71],
[61,63,65,56,67,0,62,64,66],
[61,65,64,64,66,68,0,63,61],
[67,58,62,53,52,66,67,0,65],
[57,62,62,52,59,64,69,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,70,50,70,59,89,43,70],
[59,0,52,54,57,61,77,53,68],
[60,78,0,72,78,63,98,78,63],
[80,76,58,0,62,74,96,57,64],
[60,73,52,68,0,65,86,57,66],
[71,69,67,56,65,0,82,52,69],
[41,53,32,34,44,48,0,28,37],
[87,77,52,73,73,78,102,0,76],
[60,62,67,66,64,61,93,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,70,67,66,75,69,68,65],
[67,0,59,66,70,74,63,65,60],
[60,71,0,71,76,71,78,70,68],
[63,64,59,0,60,67,67,60,57],
[64,60,54,70,0,70,70,62,65],
[55,56,59,63,60,0,62,59,55],
[61,67,52,63,60,68,0,61,58],
[62,65,60,70,68,71,69,0,63],
[65,70,62,73,65,75,72,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,61,64,75,58,76,60,65],
[61,0,54,63,55,43,57,55,48],
[69,76,0,75,72,75,81,59,63],
[66,67,55,0,66,63,61,59,67],
[55,75,58,64,0,55,54,69,62],
[72,87,55,67,75,0,76,70,71],
[54,73,49,69,76,54,0,69,51],
[70,75,71,71,61,60,61,0,60],
[65,82,67,63,68,59,79,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,62,61,48,66,25,69,63],
[49,0,57,52,58,81,27,58,35],
[68,73,0,62,72,78,39,75,46],
[69,78,68,0,68,66,38,64,52],
[82,72,58,62,0,84,30,76,60],
[64,49,52,64,46,0,26,76,48],
[105,103,91,92,100,104,0,83,65],
[61,72,55,66,54,54,47,0,52],
[67,95,84,78,70,82,65,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,51,63,70,59,61,68,55],
[66,0,54,64,67,72,57,69,53],
[79,76,0,67,76,66,67,79,60],
[67,66,63,0,72,64,60,79,59],
[60,63,54,58,0,63,58,62,54],
[71,58,64,66,67,0,50,74,66],
[69,73,63,70,72,80,0,70,56],
[62,61,51,51,68,56,60,0,52],
[75,77,70,71,76,64,74,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,66,89,65,80,79,80,81],
[56,0,54,72,78,58,60,74,68],
[64,76,0,75,71,69,81,70,64],
[41,58,55,0,82,58,69,70,59],
[65,52,59,48,0,67,71,58,59],
[50,72,61,72,63,0,67,81,54],
[51,70,49,61,59,63,0,68,56],
[50,56,60,60,72,49,62,0,53],
[49,62,66,71,71,76,74,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,70,60,60,63,67,53,65],
[60,0,69,69,62,62,72,60,68],
[60,61,0,52,56,65,64,56,57],
[70,61,78,0,66,71,75,67,63],
[70,68,74,64,0,69,72,68,71],
[67,68,65,59,61,0,64,59,59],
[63,58,66,55,58,66,0,62,68],
[77,70,74,63,62,71,68,0,63],
[65,62,73,67,59,71,62,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,66,61,61,63,64,58,68],
[70,0,73,64,68,77,67,68,79],
[64,57,0,56,63,64,56,57,68],
[69,66,74,0,63,67,64,68,73],
[69,62,67,67,0,74,64,67,67],
[67,53,66,63,56,0,62,63,67],
[66,63,74,66,66,68,0,63,70],
[72,62,73,62,63,67,67,0,67],
[62,51,62,57,63,63,60,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,54,49,59,54,66,57,55],
[75,0,67,59,61,63,66,61,58],
[76,63,0,60,69,60,62,55,64],
[81,71,70,0,81,79,81,69,65],
[71,69,61,49,0,54,72,57,57],
[76,67,70,51,76,0,67,65,63],
[64,64,68,49,58,63,0,48,55],
[73,69,75,61,73,65,82,0,61],
[75,72,66,65,73,67,75,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,74,62,59,61,57,65,71],
[69,0,66,65,62,64,67,56,70],
[56,64,0,64,60,61,56,55,61],
[68,65,66,0,58,70,68,62,76],
[71,68,70,72,0,71,72,64,70],
[69,66,69,60,59,0,69,61,72],
[73,63,74,62,58,61,0,69,78],
[65,74,75,68,66,69,61,0,72],
[59,60,69,54,60,58,52,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,75,73,81,53,60,68,59],
[79,0,62,81,87,72,65,71,69],
[55,68,0,74,74,64,54,63,72],
[57,49,56,0,58,64,55,51,48],
[49,43,56,72,0,60,62,52,59],
[77,58,66,66,70,0,59,62,62],
[70,65,76,75,68,71,0,62,71],
[62,59,67,79,78,68,68,0,72],
[71,61,58,82,71,68,59,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,61,69,52,51,67,72],
[66,0,75,62,68,53,70,62,58],
[63,55,0,45,66,46,62,75,55],
[69,68,85,0,64,72,76,62,52],
[61,62,64,66,0,65,58,71,51],
[78,77,84,58,65,0,77,67,69],
[79,60,68,54,72,53,0,72,57],
[63,68,55,68,59,63,58,0,73],
[58,72,75,78,79,61,73,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,70,60,68,70,66,69,63],
[68,0,65,59,69,64,54,60,69],
[60,65,0,63,64,64,58,64,70],
[70,71,67,0,65,66,67,70,62],
[62,61,66,65,0,66,61,56,70],
[60,66,66,64,64,0,64,60,72],
[64,76,72,63,69,66,0,69,69],
[61,70,66,60,74,70,61,0,70],
[67,61,60,68,60,58,61,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,90,52,37,117,63,51,77],
[41,0,80,52,25,93,67,27,53],
[40,50,0,39,37,105,52,39,50],
[78,78,91,0,51,119,65,65,64],
[93,105,93,79,0,106,78,79,53],
[13,37,25,11,24,0,26,25,37],
[67,63,78,65,52,104,0,41,65],
[79,103,91,65,51,105,89,0,52],
[53,77,80,66,77,93,65,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,54,55,64,40,51,60,66],
[77,0,75,67,64,65,74,73,83],
[76,55,0,61,63,54,75,67,62],
[75,63,69,0,74,68,69,69,73],
[66,66,67,56,0,56,64,65,76],
[90,65,76,62,74,0,70,77,82],
[79,56,55,61,66,60,0,67,59],
[70,57,63,61,65,53,63,0,71],
[64,47,68,57,54,48,71,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,70,74,63,65,59,70,49],
[70,0,78,106,73,67,55,94,67],
[60,52,0,93,72,58,65,78,55],
[56,24,37,0,43,55,46,65,35],
[67,57,58,87,0,48,72,82,62],
[65,63,72,75,82,0,71,86,47],
[71,75,65,84,58,59,0,83,77],
[60,36,52,65,48,44,47,0,40],
[81,63,75,95,68,83,53,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,54,44,60,21,31,66,43],
[92,0,58,64,71,76,63,59,69],
[76,72,0,61,79,69,80,92,69],
[86,66,69,0,64,68,65,46,68],
[70,59,51,66,0,77,56,67,51],
[109,54,61,62,53,0,49,60,46],
[99,67,50,65,74,81,0,73,56],
[64,71,38,84,63,70,57,0,54],
[87,61,61,62,79,84,74,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,54,28,57,81,53,93,56],
[40,0,52,37,42,59,39,66,48],
[76,78,0,69,68,78,53,82,67],
[102,93,61,0,90,104,73,91,74],
[73,88,62,40,0,76,54,86,69],
[49,71,52,26,54,0,39,62,40],
[77,91,77,57,76,91,0,84,73],
[37,64,48,39,44,68,46,0,49],
[74,82,63,56,61,90,57,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,74,63,76,66,54,72,63],
[67,0,72,57,76,63,54,65,61],
[56,58,0,44,67,52,46,59,52],
[67,73,86,0,77,70,62,78,65],
[54,54,63,53,0,53,50,63,54],
[64,67,78,60,77,0,65,69,58],
[76,76,84,68,80,65,0,74,67],
[58,65,71,52,67,61,56,0,50],
[67,69,78,65,76,72,63,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,72,81,64,46,58,67,64],
[64,0,66,78,56,41,53,53,64],
[58,64,0,79,66,44,47,53,70],
[49,52,51,0,47,43,42,58,51],
[66,74,64,83,0,49,59,54,66],
[84,89,86,87,81,0,55,69,82],
[72,77,83,88,71,75,0,60,79],
[63,77,77,72,76,61,70,0,80],
[66,66,60,79,64,48,51,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,66,49,43,42,44,69,41],
[72,0,64,56,61,77,47,78,54],
[64,66,0,50,61,67,61,69,40],
[81,74,80,0,62,83,57,87,63],
[87,69,69,68,0,71,44,87,66],
[88,53,63,47,59,0,47,80,47],
[86,83,69,73,86,83,0,89,58],
[61,52,61,43,43,50,41,0,32],
[89,76,90,67,64,83,72,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,74,67,53,74,65,71,62],
[52,0,61,64,63,57,54,60,62],
[56,69,0,74,54,60,68,72,69],
[63,66,56,0,63,58,57,61,55],
[77,67,76,67,0,62,67,61,64],
[56,73,70,72,68,0,56,75,70],
[65,76,62,73,63,74,0,70,63],
[59,70,58,69,69,55,60,0,67],
[68,68,61,75,66,60,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,72,69,69,67,66,68,60],
[65,0,60,68,65,63,69,76,66],
[58,70,0,71,62,67,62,70,55],
[61,62,59,0,56,63,65,68,60],
[61,65,68,74,0,72,67,70,62],
[63,67,63,67,58,0,59,72,65],
[64,61,68,65,63,71,0,77,64],
[62,54,60,62,60,58,53,0,53],
[70,64,75,70,68,65,66,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,63,57,60,69,50,56,52],
[71,0,72,58,57,71,59,68,65],
[67,58,0,53,60,67,51,65,57],
[73,72,77,0,65,74,68,65,60],
[70,73,70,65,0,72,60,61,59],
[61,59,63,56,58,0,52,60,59],
[80,71,79,62,70,78,0,77,71],
[74,62,65,65,69,70,53,0,60],
[78,65,73,70,71,71,59,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,73,72,72,66,76,61,73],
[58,0,73,63,71,64,68,66,62],
[57,57,0,66,60,53,68,62,59],
[58,67,64,0,68,64,69,62,60],
[58,59,70,62,0,64,70,58,55],
[64,66,77,66,66,0,71,67,62],
[54,62,62,61,60,59,0,60,62],
[69,64,68,68,72,63,70,0,68],
[57,68,71,70,75,68,68,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,77,67,60,71,64,70,72],
[53,0,52,55,50,50,50,57,55],
[53,78,0,58,60,55,60,59,63],
[63,75,72,0,66,67,61,69,69],
[70,80,70,64,0,76,63,72,64],
[59,80,75,63,54,0,60,71,69],
[66,80,70,69,67,70,0,65,69],
[60,73,71,61,58,59,65,0,58],
[58,75,67,61,66,61,61,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,81,86,72,73,65,60,72],
[39,0,68,53,80,73,74,63,60],
[49,62,0,71,85,73,79,74,64],
[44,77,59,0,65,66,78,81,72],
[58,50,45,65,0,41,51,64,51],
[57,57,57,64,89,0,91,72,56],
[65,56,51,52,79,39,0,59,47],
[70,67,56,49,66,58,71,0,50],
[58,70,66,58,79,74,83,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,66,65,45,55,51,56,66],
[78,0,76,69,63,81,63,66,79],
[64,54,0,66,51,51,64,59,64],
[65,61,64,0,53,65,59,62,64],
[85,67,79,77,0,65,65,65,77],
[75,49,79,65,65,0,72,72,69],
[79,67,66,71,65,58,0,76,65],
[74,64,71,68,65,58,54,0,65],
[64,51,66,66,53,61,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,46,53,62,60,46,52,68],
[61,0,39,70,52,69,61,61,61],
[84,91,0,77,70,66,37,52,77],
[77,60,53,0,70,58,55,55,77],
[68,78,60,60,0,76,67,44,83],
[70,61,64,72,54,0,47,70,75],
[84,69,93,75,63,83,0,69,83],
[78,69,78,75,86,60,61,0,83],
[62,69,53,53,47,55,47,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,60,62,64,55,63,64,62],
[77,0,65,76,72,61,73,74,67],
[70,65,0,73,72,67,67,77,63],
[68,54,57,0,70,64,64,63,63],
[66,58,58,60,0,62,58,66,56],
[75,69,63,66,68,0,69,75,69],
[67,57,63,66,72,61,0,71,64],
[66,56,53,67,64,55,59,0,60],
[68,63,67,67,74,61,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,64,65,82,55,54,82,63],
[77,0,83,73,92,74,64,74,71],
[66,47,0,58,65,48,38,56,57],
[65,57,72,0,74,56,44,84,56],
[48,38,65,56,0,55,44,66,55],
[75,56,82,74,75,0,72,85,54],
[76,66,92,86,86,58,0,74,57],
[48,56,74,46,64,45,56,0,64],
[67,59,73,74,75,76,73,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,64,66,74,79,51,63],
[65,0,68,55,59,54,63,65,48],
[64,62,0,65,47,50,62,66,58],
[66,75,65,0,61,76,66,53,76],
[64,71,83,69,0,59,78,78,69],
[56,76,80,54,71,0,64,52,75],
[51,67,68,64,52,66,0,69,67],
[79,65,64,77,52,78,61,0,66],
[67,82,72,54,61,55,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,58,42,70,53,59,52,43],
[68,0,53,58,89,57,58,67,47],
[72,77,0,60,89,70,66,71,71],
[88,72,70,0,82,73,68,75,64],
[60,41,41,48,0,45,35,56,46],
[77,73,60,57,85,0,67,71,59],
[71,72,64,62,95,63,0,65,66],
[78,63,59,55,74,59,65,0,56],
[87,83,59,66,84,71,64,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,27,52,78,53,53,53,53],
[53,0,53,53,78,106,79,51,78],
[103,77,0,49,102,130,130,77,78],
[78,77,81,0,102,105,105,77,53],
[52,52,28,28,0,78,78,54,81],
[77,24,0,25,52,0,51,0,27],
[77,51,0,25,52,79,0,0,27],
[77,79,53,53,76,130,130,0,78],
[77,52,52,77,49,103,103,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,61,51,52,63,48,57,56],
[63,0,55,62,52,61,43,62,48],
[69,75,0,59,54,62,56,65,48],
[79,68,71,0,66,64,69,75,69],
[78,78,76,64,0,73,59,62,64],
[67,69,68,66,57,0,56,72,66],
[82,87,74,61,71,74,0,79,75],
[73,68,65,55,68,58,51,0,67],
[74,82,82,61,66,64,55,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,71,71,64,55,63,70,73],
[58,0,58,66,63,55,59,64,54],
[59,72,0,61,62,65,62,66,57],
[59,64,69,0,63,67,62,53,49],
[66,67,68,67,0,71,63,55,66],
[75,75,65,63,59,0,76,65,76],
[67,71,68,68,67,54,0,70,60],
[60,66,64,77,75,65,60,0,61],
[57,76,73,81,64,54,70,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,60,67,63,73,59,76,76],
[51,0,54,54,54,53,47,69,60],
[70,76,0,64,69,65,71,74,75],
[63,76,66,0,66,59,67,77,73],
[67,76,61,64,0,61,63,77,70],
[57,77,65,71,69,0,62,74,70],
[71,83,59,63,67,68,0,78,76],
[54,61,56,53,53,56,52,0,62],
[54,70,55,57,60,60,54,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,72,79,79,67,60,61,64],
[49,0,57,64,69,51,59,49,60],
[58,73,0,63,83,60,53,49,65],
[51,66,67,0,82,64,58,49,60],
[51,61,47,48,0,56,54,46,59],
[63,79,70,66,74,0,72,59,68],
[70,71,77,72,76,58,0,69,67],
[69,81,81,81,84,71,61,0,80],
[66,70,65,70,71,62,63,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,76,63,69,68,67,62,71],
[58,0,73,63,61,57,61,61,59],
[54,57,0,68,65,58,62,61,60],
[67,67,62,0,73,62,68,64,75],
[61,69,65,57,0,73,63,67,75],
[62,73,72,68,57,0,62,56,64],
[63,69,68,62,67,68,0,72,71],
[68,69,69,66,63,74,58,0,68],
[59,71,70,55,55,66,59,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,68,64,68,70,60,70,71],
[60,0,66,58,59,68,56,60,57],
[62,64,0,59,62,65,60,73,58],
[66,72,71,0,69,68,64,62,63],
[62,71,68,61,0,77,71,63,64],
[60,62,65,62,53,0,55,57,63],
[70,74,70,66,59,75,0,64,63],
[60,70,57,68,67,73,66,0,70],
[59,73,72,67,66,67,67,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,92,77,79,65,92,77,51],
[66,0,104,91,91,79,106,78,39],
[38,26,0,51,53,64,105,53,52],
[53,39,79,0,41,65,91,52,65],
[51,39,77,89,0,63,90,64,65],
[65,51,66,65,67,0,79,79,52],
[38,24,25,39,40,51,0,39,26],
[53,52,77,78,66,51,91,0,51],
[79,91,78,65,65,78,104,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,67,68,71,52,70,73,67],
[61,0,63,69,66,60,61,63,60],
[63,67,0,64,69,57,51,56,59],
[62,61,66,0,70,64,60,60,65],
[59,64,61,60,0,57,60,59,61],
[78,70,73,66,73,0,67,62,65],
[60,69,79,70,70,63,0,68,65],
[57,67,74,70,71,68,62,0,60],
[63,70,71,65,69,65,65,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,84,78,92,70,71,64,93],
[45,0,77,55,76,62,52,76,96],
[46,53,0,75,62,56,64,53,66],
[52,75,55,0,59,60,56,48,69],
[38,54,68,71,0,66,58,39,54],
[60,68,74,70,64,0,73,61,99],
[59,78,66,74,72,57,0,60,80],
[66,54,77,82,91,69,70,0,78],
[37,34,64,61,76,31,50,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,62,79,65,87,70,87,73],
[57,0,68,68,56,86,71,72,74],
[68,62,0,68,66,79,62,76,66],
[51,62,62,0,61,69,64,64,57],
[65,74,64,69,0,69,74,78,61],
[43,44,51,61,61,0,62,73,64],
[60,59,68,66,56,68,0,75,61],
[43,58,54,66,52,57,55,0,69],
[57,56,64,73,69,66,69,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,63,83,78,78,76,72,77],
[41,0,45,81,44,80,62,56,71],
[67,85,0,84,77,78,77,64,65],
[47,49,46,0,54,52,51,47,51],
[52,86,53,76,0,79,76,56,61],
[52,50,52,78,51,0,67,62,67],
[54,68,53,79,54,63,0,39,49],
[58,74,66,83,74,68,91,0,58],
[53,59,65,79,69,63,81,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,63,72,73,60,65,63,65],
[65,0,68,75,77,68,67,79,73],
[67,62,0,65,68,67,66,62,64],
[58,55,65,0,60,56,56,68,55],
[57,53,62,70,0,57,52,67,56],
[70,62,63,74,73,0,61,71,64],
[65,63,64,74,78,69,0,79,70],
[67,51,68,62,63,59,51,0,64],
[65,57,66,75,74,66,60,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,73,71,67,65,73,68,69],
[55,0,57,58,57,57,55,61,53],
[57,73,0,68,68,58,62,64,63],
[59,72,62,0,69,61,62,57,62],
[63,73,62,61,0,60,56,68,61],
[65,73,72,69,70,0,68,70,67],
[57,75,68,68,74,62,0,74,65],
[62,69,66,73,62,60,56,0,64],
[61,77,67,68,69,63,65,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,56,55,57,62,54,59,59],
[69,0,64,58,64,64,64,63,62],
[74,66,0,53,69,66,61,66,73],
[75,72,77,0,80,70,66,74,64],
[73,66,61,50,0,58,56,68,64],
[68,66,64,60,72,0,60,70,60],
[76,66,69,64,74,70,0,73,60],
[71,67,64,56,62,60,57,0,63],
[71,68,57,66,66,70,70,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,63,61,67,44,66,70,56],
[70,0,75,72,69,69,61,69,82],
[67,55,0,74,62,70,82,62,65],
[69,58,56,0,71,41,63,70,63],
[63,61,68,59,0,50,71,74,68],
[86,61,60,89,80,0,82,76,80],
[64,69,48,67,59,48,0,69,70],
[60,61,68,60,56,54,61,0,63],
[74,48,65,67,62,50,60,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,66,66,56,56,58,51,62],
[74,0,82,72,54,80,59,58,60],
[64,48,0,65,61,72,61,58,67],
[64,58,65,0,50,76,47,55,55],
[74,76,69,80,0,87,71,64,74],
[74,50,58,54,43,0,42,52,58],
[72,71,69,83,59,88,0,65,66],
[79,72,72,75,66,78,65,0,67],
[68,70,63,75,56,72,64,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,43,42,53,62,63,45,52],
[86,0,59,46,61,69,68,58,64],
[87,71,0,65,73,78,77,70,96],
[88,84,65,0,64,76,75,67,67],
[77,69,57,66,0,84,71,67,79],
[68,61,52,54,46,0,64,52,60],
[67,62,53,55,59,66,0,54,59],
[85,72,60,63,63,78,76,0,75],
[78,66,34,63,51,70,71,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,63,50,76,62,81,70,66],
[59,0,60,44,47,60,73,55,51],
[67,70,0,53,71,57,69,65,54],
[80,86,77,0,83,74,75,86,65],
[54,83,59,47,0,62,75,70,52],
[68,70,73,56,68,0,85,75,71],
[49,57,61,55,55,45,0,67,45],
[60,75,65,44,60,55,63,0,60],
[64,79,76,65,78,59,85,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,53,64,65,64,60,64,55],
[70,0,62,70,75,74,64,63,70],
[77,68,0,77,79,84,65,77,65],
[66,60,53,0,68,69,67,66,58],
[65,55,51,62,0,62,66,59,56],
[66,56,46,61,68,0,62,63,58],
[70,66,65,63,64,68,0,65,58],
[66,67,53,64,71,67,65,0,60],
[75,60,65,72,74,72,72,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,65,66,56,53,62,57,60],
[74,0,67,79,72,66,67,62,61],
[65,63,0,65,70,59,59,60,65],
[64,51,65,0,58,60,62,58,60],
[74,58,60,72,0,60,63,51,60],
[77,64,71,70,70,0,71,65,63],
[68,63,71,68,67,59,0,61,61],
[73,68,70,72,79,65,69,0,65],
[70,69,65,70,70,67,69,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,51,58,54,60,64,58,61],
[82,0,63,73,61,75,64,75,68],
[79,67,0,67,66,64,70,66,63],
[72,57,63,0,58,70,55,65,68],
[76,69,64,72,0,67,62,67,68],
[70,55,66,60,63,0,61,65,63],
[66,66,60,75,68,69,0,69,68],
[72,55,64,65,63,65,61,0,69],
[69,62,67,62,62,67,62,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,48,56,68,59,90,100,59],
[78,0,77,48,67,50,79,99,70],
[82,53,0,58,40,60,81,91,50],
[74,82,72,0,73,63,83,93,42],
[62,63,90,57,0,50,101,90,60],
[71,80,70,67,80,0,83,80,30],
[40,51,49,47,29,47,0,67,28],
[30,31,39,37,40,50,63,0,28],
[71,60,80,88,70,100,102,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,75,63,107,84,85,87,97],
[34,0,44,56,56,65,56,77,33],
[55,86,0,98,77,85,75,67,65],
[67,74,32,0,87,62,75,78,86],
[23,74,53,43,0,64,65,66,45],
[46,65,45,68,66,0,65,67,65],
[45,74,55,55,65,65,0,78,65],
[43,53,63,52,64,63,52,0,53],
[33,97,65,44,85,65,65,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,54,68,73,59,78,63,55],
[54,0,61,72,51,51,70,68,50],
[76,69,0,88,66,68,87,79,63],
[62,58,42,0,49,51,74,69,48],
[57,79,64,81,0,70,92,72,72],
[71,79,62,79,60,0,88,73,74],
[52,60,43,56,38,42,0,57,37],
[67,62,51,61,58,57,73,0,62],
[75,80,67,82,58,56,93,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,70,70,63,60,67,69,64],
[64,0,65,58,69,68,62,67,66],
[60,65,0,61,62,59,70,67,67],
[60,72,69,0,69,60,69,70,65],
[67,61,68,61,0,58,65,60,66],
[70,62,71,70,72,0,66,69,71],
[63,68,60,61,65,64,0,71,59],
[61,63,63,60,70,61,59,0,60],
[66,64,63,65,64,59,71,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,71,74,66,68,61,70,68],
[58,0,63,66,59,62,61,59,54],
[59,67,0,76,67,64,71,70,67],
[56,64,54,0,69,59,58,62,58],
[64,71,63,61,0,59,59,58,58],
[62,68,66,71,71,0,75,70,63],
[69,69,59,72,71,55,0,64,62],
[60,71,60,68,72,60,66,0,64],
[62,76,63,72,72,67,68,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,75,65,66,79,78,77,66],
[63,0,64,56,62,73,73,64,63],
[55,66,0,61,67,74,67,60,70],
[65,74,69,0,67,78,83,74,57],
[64,68,63,63,0,72,83,72,62],
[51,57,56,52,58,0,70,66,57],
[52,57,63,47,47,60,0,66,46],
[53,66,70,56,58,64,64,0,56],
[64,67,60,73,68,73,84,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,75,71,69,72,65,74,73],
[65,0,68,70,67,71,61,67,59],
[55,62,0,67,53,61,61,65,56],
[59,60,63,0,60,62,57,61,53],
[61,63,77,70,0,65,63,60,68],
[58,59,69,68,65,0,57,63,66],
[65,69,69,73,67,73,0,69,58],
[56,63,65,69,70,67,61,0,63],
[57,71,74,77,62,64,72,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,49,55,51,50,54,58,66],
[69,0,55,67,59,64,68,58,61],
[81,75,0,69,70,65,72,78,73],
[75,63,61,0,64,52,65,65,66],
[79,71,60,66,0,53,69,71,78],
[80,66,65,78,77,0,73,72,81],
[76,62,58,65,61,57,0,68,64],
[72,72,52,65,59,58,62,0,69],
[64,69,57,64,52,49,66,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,73,62,70,84,86,67,78],
[44,0,68,66,56,70,74,51,62],
[57,62,0,64,68,70,71,73,68],
[68,64,66,0,83,79,71,62,57],
[60,74,62,47,0,53,65,65,60],
[46,60,60,51,77,0,70,62,47],
[44,56,59,59,65,60,0,63,53],
[63,79,57,68,65,68,67,0,69],
[52,68,62,73,70,83,77,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,65,49,60,52,49,51,57],
[74,0,71,54,74,60,63,64,63],
[65,59,0,56,63,75,41,62,44],
[81,76,74,0,78,74,63,58,65],
[70,56,67,52,0,57,57,56,56],
[78,70,55,56,73,0,59,62,56],
[81,67,89,67,73,71,0,66,65],
[79,66,68,72,74,68,64,0,62],
[73,67,86,65,74,74,65,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,0,0,38,38,19,38,19],
[76,0,57,57,38,39,38,56,57],
[130,73,0,56,75,57,56,38,76],
[130,73,74,0,38,75,55,74,94],
[92,92,55,92,0,74,72,73,111],
[92,91,73,55,56,0,54,56,94],
[111,92,74,75,58,76,0,57,75],
[92,74,92,56,57,74,73,0,75],
[111,73,54,36,19,36,55,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,55,58,63,54,60,63,61],
[71,0,61,65,67,57,66,70,68],
[75,69,0,64,73,67,60,80,80],
[72,65,66,0,69,69,58,79,75],
[67,63,57,61,0,56,64,57,70],
[76,73,63,61,74,0,56,86,62],
[70,64,70,72,66,74,0,66,74],
[67,60,50,51,73,44,64,0,65],
[69,62,50,55,60,68,56,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,64,65,65,63,53,58,56],
[74,0,76,70,71,64,70,64,69],
[66,54,0,62,61,53,53,58,59],
[65,60,68,0,66,65,58,61,64],
[65,59,69,64,0,59,54,58,68],
[67,66,77,65,71,0,62,66,66],
[77,60,77,72,76,68,0,73,73],
[72,66,72,69,72,64,57,0,63],
[74,61,71,66,62,64,57,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,71,81,86,58,88,71,70],
[55,0,57,81,72,60,76,60,66],
[59,73,0,81,74,67,93,76,64],
[49,49,49,0,67,44,74,43,54],
[44,58,56,63,0,64,74,63,57],
[72,70,63,86,66,0,79,75,59],
[42,54,37,56,56,51,0,50,45],
[59,70,54,87,67,55,80,0,71],
[60,64,66,76,73,71,85,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,54,37,49,61,42,35,43],
[60,0,68,62,74,62,50,60,49],
[76,62,0,63,86,76,64,70,57],
[93,68,67,0,92,69,62,67,59],
[81,56,44,38,0,57,47,45,62],
[69,68,54,61,73,0,61,55,47],
[88,80,66,68,83,69,0,68,62],
[95,70,60,63,85,75,62,0,69],
[87,81,73,71,68,83,68,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,61,68,58,69,65,62,65],
[56,0,57,65,52,61,64,62,61],
[69,73,0,66,59,64,67,58,64],
[62,65,64,0,67,58,68,55,61],
[72,78,71,63,0,72,75,70,67],
[61,69,66,72,58,0,73,66,66],
[65,66,63,62,55,57,0,64,59],
[68,68,72,75,60,64,66,0,57],
[65,69,66,69,63,64,71,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,77,81,72,76,65,66,70],
[57,0,68,66,71,65,52,60,65],
[53,62,0,68,67,70,59,62,63],
[49,64,62,0,68,68,52,61,66],
[58,59,63,62,0,64,54,60,60],
[54,65,60,62,66,0,56,59,57],
[65,78,71,78,76,74,0,72,72],
[64,70,68,69,70,71,58,0,68],
[60,65,67,64,70,73,58,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,73,70,66,55,61,58,70],
[63,0,67,67,64,59,61,52,64],
[57,63,0,63,55,53,50,48,55],
[60,63,67,0,65,53,51,61,67],
[64,66,75,65,0,58,54,63,67],
[75,71,77,77,72,0,64,66,71],
[69,69,80,79,76,66,0,61,70],
[72,78,82,69,67,64,69,0,79],
[60,66,75,63,63,59,60,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,42,55,55,57,53,61,64],
[73,0,62,63,61,62,62,68,57],
[88,68,0,65,81,64,55,79,74],
[75,67,65,0,75,62,68,73,66],
[75,69,49,55,0,68,54,68,60],
[73,68,66,68,62,0,59,78,72],
[77,68,75,62,76,71,0,78,69],
[69,62,51,57,62,52,52,0,63],
[66,73,56,64,70,58,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,64,73,69,61,65,59,66],
[64,0,65,57,59,68,66,60,62],
[66,65,0,66,59,60,55,63,64],
[57,73,64,0,62,69,65,64,66],
[61,71,71,68,0,64,63,66,67],
[69,62,70,61,66,0,61,67,65],
[65,64,75,65,67,69,0,70,71],
[71,70,67,66,64,63,60,0,65],
[64,68,66,64,63,65,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,99,95,81,69,90,80,50],
[62,0,74,73,60,65,68,79,55],
[31,56,0,75,45,43,45,77,41],
[35,57,55,0,54,47,59,57,41],
[49,70,85,76,0,68,105,71,70],
[61,65,87,83,62,0,82,80,63],
[40,62,85,71,25,48,0,79,48],
[50,51,53,73,59,50,51,0,42],
[80,75,89,89,60,67,82,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,57,72,66,60,68,67,81],
[63,0,63,62,61,57,62,75,64],
[73,67,0,73,58,67,79,77,71],
[58,68,57,0,51,56,66,75,69],
[64,69,72,79,0,62,72,72,82],
[70,73,63,74,68,0,65,72,67],
[62,68,51,64,58,65,0,70,64],
[63,55,53,55,58,58,60,0,58],
[49,66,59,61,48,63,66,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,69,77,73,64,77,66,64],
[59,0,77,82,61,70,69,76,74],
[61,53,0,69,63,56,69,66,67],
[53,48,61,0,60,60,59,63,69],
[57,69,67,70,0,62,60,68,65],
[66,60,74,70,68,0,65,67,71],
[53,61,61,71,70,65,0,68,65],
[64,54,64,67,62,63,62,0,70],
[66,56,63,61,65,59,65,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,66,63,63,66,68,66,67],
[62,0,61,69,67,74,63,70,65],
[64,69,0,68,72,71,63,72,59],
[67,61,62,0,71,65,63,67,60],
[67,63,58,59,0,69,62,63,63],
[64,56,59,65,61,0,63,72,67],
[62,67,67,67,68,67,0,74,65],
[64,60,58,63,67,58,56,0,58],
[63,65,71,70,67,63,65,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,70,51,67,67,58,53,56],
[72,0,79,61,75,88,74,67,66],
[60,51,0,55,55,69,53,52,61],
[79,69,75,0,77,73,72,64,74],
[63,55,75,53,0,73,63,68,73],
[63,42,61,57,57,0,60,60,61],
[72,56,77,58,67,70,0,66,64],
[77,63,78,66,62,70,64,0,66],
[74,64,69,56,57,69,66,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,82,61,58,81,71,64,79],
[69,0,75,73,65,82,73,75,84],
[48,55,0,53,50,65,66,55,72],
[69,57,77,0,59,76,74,77,81],
[72,65,80,71,0,81,69,71,82],
[49,48,65,54,49,0,60,54,66],
[59,57,64,56,61,70,0,58,88],
[66,55,75,53,59,76,72,0,82],
[51,46,58,49,48,64,42,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,52,64,56,61,68,68,58],
[67,0,62,64,52,57,65,70,59],
[78,68,0,68,61,66,81,73,64],
[66,66,62,0,57,57,61,68,60],
[74,78,69,73,0,62,74,78,66],
[69,73,64,73,68,0,68,67,66],
[62,65,49,69,56,62,0,74,58],
[62,60,57,62,52,63,56,0,53],
[72,71,66,70,64,64,72,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,72,59,76,79,69,63,76],
[50,0,62,52,62,58,59,60,62],
[58,68,0,67,69,66,65,68,59],
[71,78,63,0,73,82,69,69,69],
[54,68,61,57,0,62,49,63,58],
[51,72,64,48,68,0,54,60,57],
[61,71,65,61,81,76,0,65,85],
[67,70,62,61,67,70,65,0,65],
[54,68,71,61,72,73,45,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,72,83,62,85,71,92,71],
[58,0,84,73,63,107,73,70,25],
[58,46,0,23,62,72,48,31,48],
[47,57,107,0,64,97,70,69,46],
[68,67,68,66,0,68,43,54,54],
[45,23,58,33,62,0,60,43,36],
[59,57,82,60,87,70,0,57,46],
[38,60,99,61,76,87,73,0,61],
[59,105,82,84,76,94,84,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,49,53,53,48,54,48,62],
[74,0,57,52,64,62,66,62,68],
[81,73,0,63,79,58,72,73,74],
[77,78,67,0,62,66,69,73,75],
[77,66,51,68,0,58,72,58,70],
[82,68,72,64,72,0,70,73,68],
[76,64,58,61,58,60,0,55,71],
[82,68,57,57,72,57,75,0,78],
[68,62,56,55,60,62,59,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,62,56,45,54,52,59,64],
[50,0,56,53,41,44,64,42,53],
[68,74,0,67,55,62,57,53,67],
[74,77,63,0,54,47,65,55,63],
[85,89,75,76,0,65,77,65,77],
[76,86,68,83,65,0,74,60,75],
[78,66,73,65,53,56,0,43,69],
[71,88,77,75,65,70,87,0,83],
[66,77,63,67,53,55,61,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,52,55,52,68,55,70,57],
[66,0,52,56,62,61,55,60,62],
[78,78,0,64,60,61,58,61,65],
[75,74,66,0,65,70,71,80,62],
[78,68,70,65,0,67,67,71,71],
[62,69,69,60,63,0,65,72,65],
[75,75,72,59,63,65,0,64,60],
[60,70,69,50,59,58,66,0,60],
[73,68,65,68,59,65,70,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,76,61,60,53,64,65,61],
[69,0,61,61,63,55,60,53,52],
[54,69,0,55,60,49,55,65,59],
[69,69,75,0,55,60,69,64,63],
[70,67,70,75,0,67,68,68,60],
[77,75,81,70,63,0,74,75,69],
[66,70,75,61,62,56,0,66,62],
[65,77,65,66,62,55,64,0,65],
[69,78,71,67,70,61,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,65,61,59,49,66,70,60],
[49,0,62,60,56,45,48,54,45],
[65,68,0,59,55,68,58,61,66],
[69,70,71,0,71,52,62,73,67],
[71,74,75,59,0,62,63,77,79],
[81,85,62,78,68,0,55,71,79],
[64,82,72,68,67,75,0,78,68],
[60,76,69,57,53,59,52,0,68],
[70,85,64,63,51,51,62,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,66,67,72,65,65,58,56],
[73,0,59,80,64,77,67,66,67],
[64,71,0,70,71,67,75,69,59],
[63,50,60,0,62,58,61,56,52],
[58,66,59,68,0,65,65,65,58],
[65,53,63,72,65,0,67,68,51],
[65,63,55,69,65,63,0,70,52],
[72,64,61,74,65,62,60,0,62],
[74,63,71,78,72,79,78,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,64,70,54,71,65,54,59],
[53,0,64,51,55,46,39,46,60],
[66,66,0,51,62,62,63,72,56],
[60,79,79,0,66,78,70,61,87],
[76,75,68,64,0,65,58,56,69],
[59,84,68,52,65,0,51,58,77],
[65,91,67,60,72,79,0,53,95],
[76,84,58,69,74,72,77,0,78],
[71,70,74,43,61,53,35,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,74,59,53,64,53,88],
[63,0,68,76,64,59,62,69,83],
[60,62,0,58,59,69,65,60,76],
[56,54,72,0,49,63,56,58,75],
[71,66,71,81,0,69,62,65,84],
[77,71,61,67,61,0,59,67,95],
[66,68,65,74,68,71,0,70,70],
[77,61,70,72,65,63,60,0,77],
[42,47,54,55,46,35,60,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,59,59,67,65,72,62,62],
[70,0,64,67,67,57,77,61,68],
[71,66,0,64,60,54,70,58,66],
[71,63,66,0,71,54,72,60,62],
[63,63,70,59,0,52,67,59,67],
[65,73,76,76,78,0,73,72,73],
[58,53,60,58,63,57,0,60,59],
[68,69,72,70,71,58,70,0,65],
[68,62,64,68,63,57,71,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,61,70,58,65,57,65,68],
[63,0,63,60,64,66,58,55,60],
[69,67,0,64,59,74,65,61,62],
[60,70,66,0,54,71,67,57,62],
[72,66,71,76,0,76,73,63,72],
[65,64,56,59,54,0,64,62,63],
[73,72,65,63,57,66,0,64,62],
[65,75,69,73,67,68,66,0,74],
[62,70,68,68,58,67,68,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,32,65,32,65,0,0,33],
[130,0,97,130,130,97,65,65,66],
[98,33,0,66,66,33,33,33,66],
[65,0,64,0,0,97,0,0,0],
[98,0,64,130,0,97,0,33,33],
[65,33,97,33,33,0,33,0,33],
[130,65,97,130,130,97,0,65,66],
[130,65,97,130,97,130,65,0,33],
[97,64,64,130,97,97,64,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,64,74,64,55,61,64,67],
[66,0,67,71,55,60,65,59,61],
[66,63,0,63,58,55,55,61,56],
[56,59,67,0,54,54,55,60,57],
[66,75,72,76,0,59,62,65,67],
[75,70,75,76,71,0,58,69,65],
[69,65,75,75,68,72,0,75,63],
[66,71,69,70,65,61,55,0,63],
[63,69,74,73,63,65,67,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,65,61,66,59,65,57,63],
[74,0,70,62,73,72,70,69,68],
[65,60,0,74,67,60,66,73,72],
[69,68,56,0,65,69,62,71,60],
[64,57,63,65,0,66,61,64,65],
[71,58,70,61,64,0,73,62,63],
[65,60,64,68,69,57,0,64,67],
[73,61,57,59,66,68,66,0,60],
[67,62,58,70,65,67,63,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,66,65,71,55,66,72,73],
[78,0,75,68,74,59,74,73,85],
[64,55,0,59,73,54,63,64,72],
[65,62,71,0,77,69,68,75,77],
[59,56,57,53,0,43,53,56,67],
[75,71,76,61,87,0,61,68,78],
[64,56,67,62,77,69,0,80,72],
[58,57,66,55,74,62,50,0,66],
[57,45,58,53,63,52,58,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,75,70,69,71,70,68,70],
[65,0,72,71,62,68,69,74,68],
[55,58,0,63,66,64,70,71,61],
[60,59,67,0,62,65,72,74,60],
[61,68,64,68,0,59,73,70,65],
[59,62,66,65,71,0,74,68,62],
[60,61,60,58,57,56,0,68,58],
[62,56,59,56,60,62,62,0,61],
[60,62,69,70,65,68,72,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,61,65,71,89,65,80,78],
[57,0,67,44,64,69,46,62,77],
[69,63,0,64,77,89,63,63,81],
[65,86,66,0,67,79,43,89,71],
[59,66,53,63,0,81,66,70,72],
[41,61,41,51,49,0,37,67,74],
[65,84,67,87,64,93,0,72,89],
[50,68,67,41,60,63,58,0,64],
[52,53,49,59,58,56,41,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,73,62,60,58,65,67,67],
[67,0,72,66,65,60,60,67,62],
[57,58,0,60,66,56,59,56,60],
[68,64,70,0,72,60,69,58,63],
[70,65,64,58,0,68,66,62,62],
[72,70,74,70,62,0,68,67,64],
[65,70,71,61,64,62,0,61,59],
[63,63,74,72,68,63,69,0,63],
[63,68,70,67,68,66,71,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,74,66,63,60,72,69,64],
[62,0,58,54,60,56,76,62,55],
[56,72,0,60,59,65,77,68,54],
[64,76,70,0,72,65,80,67,63],
[67,70,71,58,0,63,82,58,62],
[70,74,65,65,67,0,74,70,65],
[58,54,53,50,48,56,0,60,55],
[61,68,62,63,72,60,70,0,56],
[66,75,76,67,68,65,75,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,60,66,70,63,69,61,64],
[69,0,69,77,69,66,71,64,68],
[70,61,0,53,51,56,73,62,68],
[64,53,77,0,59,54,77,60,79],
[60,61,79,71,0,64,80,67,73],
[67,64,74,76,66,0,67,59,72],
[61,59,57,53,50,63,0,60,57],
[69,66,68,70,63,71,70,0,77],
[66,62,62,51,57,58,73,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,59,54,65,67,58,59,63],
[65,0,62,64,67,64,63,62,61],
[71,68,0,57,69,76,70,61,76],
[76,66,73,0,75,83,69,65,67],
[65,63,61,55,0,69,59,63,65],
[63,66,54,47,61,0,60,61,62],
[72,67,60,61,71,70,0,64,75],
[71,68,69,65,67,69,66,0,65],
[67,69,54,63,65,68,55,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,60,52,61,52,60,62,66],
[75,0,61,57,65,69,68,68,70],
[70,69,0,67,69,70,70,60,84],
[78,73,63,0,68,57,65,76,73],
[69,65,61,62,0,60,77,65,69],
[78,61,60,73,70,0,80,66,85],
[70,62,60,65,53,50,0,67,73],
[68,62,70,54,65,64,63,0,69],
[64,60,46,57,61,45,57,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,69,70,65,68,65,70,66],
[52,0,67,61,57,55,62,57,67],
[61,63,0,62,53,62,60,58,64],
[60,69,68,0,63,61,60,55,67],
[65,73,77,67,0,58,62,56,65],
[62,75,68,69,72,0,66,59,69],
[65,68,70,70,68,64,0,58,66],
[60,73,72,75,74,71,72,0,72],
[64,63,66,63,65,61,64,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,61,54,60,65,69,57,64],
[59,0,69,54,71,63,76,64,64],
[69,61,0,69,65,68,74,73,64],
[76,76,61,0,57,72,75,64,59],
[70,59,65,73,0,66,68,73,66],
[65,67,62,58,64,0,62,75,70],
[61,54,56,55,62,68,0,60,59],
[73,66,57,66,57,55,70,0,56],
[66,66,66,71,64,60,71,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,58,71,76,75,70,85,68],
[56,0,65,76,79,73,72,73,69],
[72,65,0,73,70,87,80,69,71],
[59,54,57,0,77,57,67,59,60],
[54,51,60,53,0,51,61,57,58],
[55,57,43,73,79,0,61,74,73],
[60,58,50,63,69,69,0,52,56],
[45,57,61,71,73,56,78,0,67],
[62,61,59,70,72,57,74,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,64,70,73,62,58,62,69],
[54,0,53,63,56,59,54,68,60],
[66,77,0,74,61,56,65,51,60],
[60,67,56,0,63,57,55,55,68],
[57,74,69,67,0,55,62,60,68],
[68,71,74,73,75,0,65,70,79],
[72,76,65,75,68,65,0,72,75],
[68,62,79,75,70,60,58,0,73],
[61,70,70,62,62,51,55,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,72,63,59,66,72,67,62],
[65,0,61,52,59,67,61,74,57],
[58,69,0,76,63,72,72,69,62],
[67,78,54,0,66,77,73,78,59],
[71,71,67,64,0,62,59,68,68],
[64,63,58,53,68,0,61,59,56],
[58,69,58,57,71,69,0,70,57],
[63,56,61,52,62,71,60,0,52],
[68,73,68,71,62,74,73,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,44,44,87,44,87,87,87],
[43,0,44,87,87,87,130,130,130],
[86,86,0,130,43,87,86,130,130],
[86,43,0,0,43,43,86,86,43],
[43,43,87,87,0,87,87,130,130],
[86,43,43,87,43,0,86,130,87],
[43,0,44,44,43,44,0,87,87],
[43,0,0,44,0,0,43,0,44],
[43,0,0,87,0,43,43,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,69,72,70,74,74,74,64],
[60,0,60,55,54,61,59,66,51],
[61,70,0,62,63,66,70,63,58],
[58,75,68,0,62,58,73,68,66],
[60,76,67,68,0,68,72,66,66],
[56,69,64,72,62,0,70,73,67],
[56,71,60,57,58,60,0,62,48],
[56,64,67,62,64,57,68,0,51],
[66,79,72,64,64,63,82,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,73,68,69,70,79,70,80],
[66,0,61,80,53,69,64,53,60],
[57,69,0,73,53,66,59,56,65],
[62,50,57,0,56,55,69,53,59],
[61,77,77,74,0,68,79,55,72],
[60,61,64,75,62,0,66,61,70],
[51,66,71,61,51,64,0,52,65],
[60,77,74,77,75,69,78,0,68],
[50,70,65,71,58,60,65,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,74,67,80,69,64,74,79],
[62,0,68,66,69,56,68,59,69],
[56,62,0,74,59,60,51,63,62],
[63,64,56,0,42,63,57,66,55],
[50,61,71,88,0,55,57,74,68],
[61,74,70,67,75,0,65,68,74],
[66,62,79,73,73,65,0,71,75],
[56,71,67,64,56,62,59,0,59],
[51,61,68,75,62,56,55,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,65,78,77,75,67,79,72],
[64,0,71,75,76,76,74,80,79],
[65,59,0,63,66,75,54,70,61],
[52,55,67,0,69,71,57,69,57],
[53,54,64,61,0,60,50,53,53],
[55,54,55,59,70,0,45,63,59],
[63,56,76,73,80,85,0,59,65],
[51,50,60,61,77,67,71,0,47],
[58,51,69,73,77,71,65,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,56,67,60,63,58,65,62],
[75,0,65,69,72,65,70,75,69],
[74,65,0,74,74,74,65,75,78],
[63,61,56,0,74,65,62,76,69],
[70,58,56,56,0,53,65,70,64],
[67,65,56,65,77,0,66,68,65],
[72,60,65,68,65,64,0,74,67],
[65,55,55,54,60,62,56,0,67],
[68,61,52,61,66,65,63,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,62,56,65,65,57,64,62],
[69,0,59,60,54,68,50,55,58],
[68,71,0,63,67,74,63,57,62],
[74,70,67,0,65,75,64,65,72],
[65,76,63,65,0,73,62,62,62],
[65,62,56,55,57,0,55,59,63],
[73,80,67,66,68,75,0,65,75],
[66,75,73,65,68,71,65,0,67],
[68,72,68,58,68,67,55,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,32,46,48,46,66,32,63],
[81,0,51,65,81,81,83,35,81],
[98,79,0,98,97,63,114,81,114],
[84,65,32,0,65,49,100,32,114],
[82,49,33,65,0,80,84,51,82],
[84,49,67,81,50,0,84,51,81],
[64,47,16,30,46,46,0,14,30],
[98,95,49,98,79,79,116,0,98],
[67,49,16,16,48,49,100,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,70,72,70,69,66,65],
[61,0,47,55,70,67,51,58,64],
[65,83,0,76,82,69,67,70,71],
[60,75,54,0,80,60,61,60,65],
[58,60,48,50,0,62,46,52,61],
[60,63,61,70,68,0,52,54,68],
[61,79,63,69,84,78,0,72,77],
[64,72,60,70,78,76,58,0,75],
[65,66,59,65,69,62,53,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,68,77,65,72,71,77,66],
[68,0,74,66,64,68,69,73,65],
[62,56,0,71,60,62,60,66,66],
[53,64,59,0,60,64,61,66,58],
[65,66,70,70,0,65,62,75,65],
[58,62,68,66,65,0,68,72,64],
[59,61,70,69,68,62,0,68,65],
[53,57,64,64,55,58,62,0,59],
[64,65,64,72,65,66,65,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,91,65,59,75,90,97,87],
[51,0,62,62,50,66,70,64,70],
[39,68,0,77,42,59,78,47,62],
[65,68,53,0,66,59,78,72,66],
[71,80,88,64,0,67,90,70,75],
[55,64,71,71,63,0,82,74,79],
[40,60,52,52,40,48,0,66,49],
[33,66,83,58,60,56,64,0,92],
[43,60,68,64,55,51,81,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,52,53,63,58,63,56,61],
[68,0,62,61,69,64,69,49,64],
[78,68,0,68,71,61,63,62,65],
[77,69,62,0,74,60,63,60,66],
[67,61,59,56,0,51,65,62,56],
[72,66,69,70,79,0,70,68,62],
[67,61,67,67,65,60,0,62,61],
[74,81,68,70,68,62,68,0,69],
[69,66,65,64,74,68,69,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,130,65,130,130,130,130,130],
[0,0,130,65,130,130,130,65,65],
[0,0,0,0,130,0,65,0,0],
[65,65,130,0,130,65,65,65,65],
[0,0,0,0,0,0,65,0,0],
[0,0,130,65,130,0,65,0,65],
[0,0,65,65,65,65,0,0,0],
[0,65,130,65,130,130,130,0,130],
[0,65,130,65,130,65,130,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,60,61,51,57,53,66,56],
[77,0,53,56,70,69,58,73,52],
[70,77,0,61,62,68,69,61,65],
[69,74,69,0,70,74,58,66,64],
[79,60,68,60,0,77,60,74,62],
[73,61,62,56,53,0,56,51,60],
[77,72,61,72,70,74,0,66,62],
[64,57,69,64,56,79,64,0,48],
[74,78,65,66,68,70,68,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,62,70,70,70,72,74,65],
[64,0,72,69,75,69,70,71,64],
[68,58,0,64,60,64,60,72,66],
[60,61,66,0,67,59,66,68,62],
[60,55,70,63,0,62,64,73,58],
[60,61,66,71,68,0,68,70,66],
[58,60,70,64,66,62,0,70,64],
[56,59,58,62,57,60,60,0,58],
[65,66,64,68,72,64,66,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,75,71,71,74,69,67,72],
[66,0,69,68,71,69,81,61,78],
[55,61,0,67,67,66,64,62,74],
[59,62,63,0,69,63,69,59,66],
[59,59,63,61,0,62,62,57,65],
[56,61,64,67,68,0,62,58,65],
[61,49,66,61,68,68,0,61,68],
[63,69,68,71,73,72,69,0,76],
[58,52,56,64,65,65,62,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,62,71,77,63,67,70,71],
[58,0,51,73,76,52,61,65,74],
[68,79,0,73,77,66,65,74,72],
[59,57,57,0,71,47,59,70,63],
[53,54,53,59,0,47,54,60,58],
[67,78,64,83,83,0,65,72,70],
[63,69,65,71,76,65,0,80,64],
[60,65,56,60,70,58,50,0,61],
[59,56,58,67,72,60,66,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,74,81,57,64,61,75,79],
[59,0,79,77,73,61,66,67,83],
[56,51,0,64,36,54,73,71,72],
[49,53,66,0,52,47,62,58,60],
[73,57,94,78,0,65,67,81,77],
[66,69,76,83,65,0,58,71,69],
[69,64,57,68,63,72,0,67,80],
[55,63,59,72,49,59,63,0,69],
[51,47,58,70,53,61,50,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,68,69,61,52,54,71,59],
[59,0,67,74,67,65,67,76,78],
[62,63,0,73,56,52,60,75,64],
[61,56,57,0,56,56,64,70,63],
[69,63,74,74,0,69,59,80,68],
[78,65,78,74,61,0,67,86,78],
[76,63,70,66,71,63,0,74,76],
[59,54,55,60,50,44,56,0,48],
[71,52,66,67,62,52,54,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,68,64,71,57,67,71,65],
[58,0,55,72,71,68,70,68,53],
[62,75,0,71,74,76,77,74,59],
[66,58,59,0,74,74,71,64,55],
[59,59,56,56,0,59,69,65,52],
[73,62,54,56,71,0,68,71,60],
[63,60,53,59,61,62,0,68,54],
[59,62,56,66,65,59,62,0,61],
[65,77,71,75,78,70,76,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,50,59,60,53,45,38,54],
[62,0,55,61,60,71,58,51,55],
[80,75,0,54,61,75,62,67,59],
[71,69,76,0,68,65,69,50,57],
[70,70,69,62,0,81,58,53,65],
[77,59,55,65,49,0,55,54,52],
[85,72,68,61,72,75,0,58,67],
[92,79,63,80,77,76,72,0,64],
[76,75,71,73,65,78,63,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,64,72,67,75,89,73,55],
[67,0,67,69,62,63,82,74,67],
[66,63,0,66,68,72,82,72,68],
[58,61,64,0,63,58,70,65,67],
[63,68,62,67,0,55,78,66,68],
[55,67,58,72,75,0,83,69,61],
[41,48,48,60,52,47,0,45,60],
[57,56,58,65,64,61,85,0,52],
[75,63,62,63,62,69,70,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,49,91,61,36,49,74,24],
[55,0,66,55,38,39,52,52,13],
[81,64,0,80,76,65,78,92,39],
[39,75,50,0,50,37,52,64,25],
[69,92,54,80,0,51,78,118,39],
[94,91,65,93,79,0,66,80,66],
[81,78,52,78,52,64,0,103,65],
[56,78,38,66,12,50,27,0,12],
[106,117,91,105,91,64,65,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,80,104,51,104,78,104,27],
[53,0,80,78,80,80,78,104,80],
[50,50,0,50,50,77,51,104,0],
[26,52,80,0,26,53,80,80,26],
[79,50,80,104,0,80,78,104,53],
[26,50,53,77,50,0,78,77,26],
[52,52,79,50,52,52,0,103,26],
[26,26,26,50,26,53,27,0,0],
[103,50,130,104,77,104,104,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,52,91,76,82,65,73,81],
[60,0,66,63,70,77,81,88,61],
[78,64,0,60,64,72,62,64,88],
[39,67,70,0,70,78,69,75,56],
[54,60,66,60,0,50,47,73,68],
[48,53,58,52,80,0,78,95,54],
[65,49,68,61,83,52,0,78,70],
[57,42,66,55,57,35,52,0,65],
[49,69,42,74,62,76,60,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,72,83,66,77,73,82,65],
[61,0,76,67,70,56,52,68,69],
[58,54,0,63,66,46,52,62,55],
[47,63,67,0,60,72,63,75,52],
[64,60,64,70,0,57,60,65,59],
[53,74,84,58,73,0,69,73,71],
[57,78,78,67,70,61,0,81,73],
[48,62,68,55,65,57,49,0,59],
[65,61,75,78,71,59,57,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,54,57,62,58,56,66,57],
[69,0,68,65,68,63,63,64,64],
[76,62,0,64,66,67,72,70,66],
[73,65,66,0,65,68,71,70,65],
[68,62,64,65,0,65,57,68,68],
[72,67,63,62,65,0,67,69,63],
[74,67,58,59,73,63,0,71,68],
[64,66,60,60,62,61,59,0,65],
[73,66,64,65,62,67,62,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,64,71,68,63,72,72,70],
[57,0,65,72,62,59,62,52,63],
[66,65,0,60,64,59,66,54,57],
[59,58,70,0,76,71,58,63,59],
[62,68,66,54,0,60,67,54,63],
[67,71,71,59,70,0,68,56,54],
[58,68,64,72,63,62,0,63,56],
[58,78,76,67,76,74,67,0,61],
[60,67,73,71,67,76,74,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,66,72,64,71,78,79,70],
[53,0,54,70,67,45,72,55,47],
[64,76,0,66,74,65,87,72,42],
[58,60,64,0,65,56,75,74,59],
[66,63,56,65,0,56,75,64,43],
[59,85,65,74,74,0,95,73,68],
[52,58,43,55,55,35,0,48,30],
[51,75,58,56,66,57,82,0,57],
[60,83,88,71,87,62,100,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,62,57,68,75,60,61,65],
[69,0,64,62,61,66,58,56,67],
[68,66,0,61,61,67,55,53,61],
[73,68,69,0,63,70,59,65,74],
[62,69,69,67,0,66,66,65,67],
[55,64,63,60,64,0,55,60,66],
[70,72,75,71,64,75,0,64,82],
[69,74,77,65,65,70,66,0,76],
[65,63,69,56,63,64,48,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,76,65,56,58,55,54,58],
[64,0,73,57,65,68,53,56,64],
[54,57,0,50,66,55,53,50,51],
[65,73,80,0,67,71,65,64,68],
[74,65,64,63,0,71,54,68,61],
[72,62,75,59,59,0,48,55,64],
[75,77,77,65,76,82,0,81,66],
[76,74,80,66,62,75,49,0,66],
[72,66,79,62,69,66,64,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,64,60,65,59,67,62,51],
[71,0,64,70,60,55,65,69,57],
[66,66,0,70,70,64,70,65,59],
[70,60,60,0,65,57,63,68,55],
[65,70,60,65,0,65,69,70,57],
[71,75,66,73,65,0,69,78,67],
[63,65,60,67,61,61,0,71,62],
[68,61,65,62,60,52,59,0,58],
[79,73,71,75,73,63,68,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,77,74,52,60,68,51,59],
[51,0,66,67,63,61,52,57,69],
[53,64,0,67,59,55,62,52,60],
[56,63,63,0,56,66,58,54,65],
[78,67,71,74,0,64,66,75,66],
[70,69,75,64,66,0,72,64,79],
[62,78,68,72,64,58,0,56,60],
[79,73,78,76,55,66,74,0,71],
[71,61,70,65,64,51,70,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,63,63,66,61,68,62,76],
[64,0,60,68,68,74,60,67,68],
[67,70,0,69,73,60,80,70,67],
[67,62,61,0,75,69,72,72,71],
[64,62,57,55,0,54,58,67,62],
[69,56,70,61,76,0,71,78,72],
[62,70,50,58,72,59,0,72,60],
[68,63,60,58,63,52,58,0,69],
[54,62,63,59,68,58,70,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,48,65,72,66,47,57,72],
[83,0,73,78,91,81,76,66,65],
[82,57,0,76,82,84,49,49,82],
[65,52,54,0,80,70,72,57,53],
[58,39,48,50,0,55,57,57,58],
[64,49,46,60,75,0,64,32,89],
[83,54,81,58,73,66,0,65,80],
[73,64,81,73,73,98,65,0,73],
[58,65,48,77,72,41,50,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,70,80,70,59,60,61,73],
[57,0,50,68,76,51,56,57,59],
[60,80,0,58,69,58,61,56,65],
[50,62,72,0,66,58,48,61,77],
[60,54,61,64,0,48,52,58,64],
[71,79,72,72,82,0,70,59,67],
[70,74,69,82,78,60,0,66,76],
[69,73,74,69,72,71,64,0,74],
[57,71,65,53,66,63,54,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,54,60,63,56,55,56,44],
[84,0,76,71,63,68,54,68,51],
[76,54,0,64,60,59,57,69,56],
[70,59,66,0,72,72,60,70,62],
[67,67,70,58,0,72,54,62,66],
[74,62,71,58,58,0,64,71,59],
[75,76,73,70,76,66,0,69,54],
[74,62,61,60,68,59,61,0,55],
[86,79,74,68,64,71,76,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,68,63,63,62,62,59,68],
[73,0,68,72,78,69,68,59,66],
[62,62,0,62,62,63,57,47,69],
[67,58,68,0,66,60,66,61,73],
[67,52,68,64,0,60,62,65,67],
[68,61,67,70,70,0,65,65,73],
[68,62,73,64,68,65,0,61,63],
[71,71,83,69,65,65,69,0,76],
[62,64,61,57,63,57,67,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,59,51,68,61,57,65,57],
[64,0,51,51,60,71,54,58,49],
[71,79,0,63,79,71,66,68,69],
[79,79,67,0,71,77,65,63,68],
[62,70,51,59,0,57,55,59,65],
[69,59,59,53,73,0,51,63,65],
[73,76,64,65,75,79,0,65,71],
[65,72,62,67,71,67,65,0,64],
[73,81,61,62,65,65,59,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,69,70,63,64,76,63,72],
[69,0,72,63,71,69,81,76,77],
[61,58,0,65,59,66,68,59,75],
[60,67,65,0,67,64,72,68,74],
[67,59,71,63,0,63,66,61,75],
[66,61,64,66,67,0,67,66,68],
[54,49,62,58,64,63,0,62,74],
[67,54,71,62,69,64,68,0,70],
[58,53,55,56,55,62,56,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,74,73,73,76,56,85,59],
[57,0,62,73,61,74,59,76,64],
[56,68,0,62,60,68,61,80,58],
[57,57,68,0,52,57,61,64,48],
[57,69,70,78,0,69,76,79,64],
[54,56,62,73,61,0,58,73,64],
[74,71,69,69,54,72,0,85,70],
[45,54,50,66,51,57,45,0,61],
[71,66,72,82,66,66,60,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,79,66,67,56,43,58,61],
[43,0,49,46,54,25,53,47,29],
[51,81,0,72,45,37,43,39,42],
[64,84,58,0,61,36,42,56,52],
[63,76,85,69,0,49,51,54,40],
[74,105,93,94,81,0,74,67,57],
[87,77,87,88,79,56,0,64,51],
[72,83,91,74,76,63,66,0,65],
[69,101,88,78,90,73,79,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,67,61,65,78,67,66,64],
[60,0,63,63,74,70,59,66,62],
[63,67,0,62,58,57,58,67,62],
[69,67,68,0,66,73,65,69,61],
[65,56,72,64,0,68,65,67,62],
[52,60,73,57,62,0,57,66,75],
[63,71,72,65,65,73,0,72,73],
[64,64,63,61,63,64,58,0,65],
[66,68,68,69,68,55,57,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,75,67,67,64,61,68,71],
[79,0,75,71,71,72,68,69,59],
[55,55,0,62,60,55,67,60,53],
[63,59,68,0,79,65,73,71,69],
[63,59,70,51,0,55,59,58,58],
[66,58,75,65,75,0,66,71,58],
[69,62,63,57,71,64,0,68,73],
[62,61,70,59,72,59,62,0,69],
[59,71,77,61,72,72,57,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,65,96,65,34,34,65,65],
[62,0,65,96,96,65,31,31,62],
[65,65,0,31,65,31,65,96,62],
[34,34,99,0,99,34,34,65,65],
[65,34,65,31,0,34,65,65,96],
[96,65,99,96,96,0,65,65,62],
[96,99,65,96,65,65,0,65,65],
[65,99,34,65,65,65,65,0,31],
[65,68,68,65,34,68,65,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,15,38,63,64,62,78,55],
[57,0,46,71,65,61,55,54,70],
[115,84,0,71,82,82,65,89,81],
[92,59,59,0,74,81,75,66,89],
[67,65,48,56,0,55,54,64,56],
[66,69,48,49,75,0,48,66,57],
[68,75,65,55,76,82,0,73,73],
[52,76,41,64,66,64,57,0,72],
[75,60,49,41,74,73,57,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,52,39,65,65,52,90,66],
[64,0,65,65,52,65,103,103,92],
[78,65,0,65,52,89,76,77,78],
[91,65,65,0,51,78,64,104,66],
[65,78,78,79,0,91,64,91,92],
[65,65,41,52,39,0,50,64,39],
[78,27,54,66,66,80,0,92,67],
[40,27,53,26,39,66,38,0,39],
[64,38,52,64,38,91,63,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,80,71,63,69,73,74,71],
[55,0,61,58,67,57,67,67,60],
[50,69,0,66,60,68,64,74,65],
[59,72,64,0,57,70,70,72,68],
[67,63,70,73,0,74,74,72,69],
[61,73,62,60,56,0,65,73,66],
[57,63,66,60,56,65,0,59,52],
[56,63,56,58,58,57,71,0,59],
[59,70,65,62,61,64,78,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,75,77,65,81,68,69,79],
[52,0,81,76,56,75,66,72,67],
[55,49,0,70,58,66,58,66,50],
[53,54,60,0,50,71,59,59,64],
[65,74,72,80,0,77,63,69,73],
[49,55,64,59,53,0,53,65,65],
[62,64,72,71,67,77,0,87,66],
[61,58,64,71,61,65,43,0,68],
[51,63,80,66,57,65,64,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,80,70,65,69,70,78,76],
[61,0,74,75,58,64,63,67,74],
[50,56,0,64,57,63,61,62,64],
[60,55,66,0,56,55,53,54,52],
[65,72,73,74,0,71,64,68,77],
[61,66,67,75,59,0,58,63,64],
[60,67,69,77,66,72,0,74,68],
[52,63,68,76,62,67,56,0,65],
[54,56,66,78,53,66,62,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,62,69,65,57,64,62,63],
[71,0,65,65,70,62,68,70,63],
[68,65,0,65,70,64,66,68,60],
[61,65,65,0,64,65,70,59,62],
[65,60,60,66,0,64,65,66,70],
[73,68,66,65,66,0,64,67,68],
[66,62,64,60,65,66,0,71,61],
[68,60,62,71,64,63,59,0,55],
[67,67,70,68,60,62,69,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,58,67,62,65,66,56,70],
[64,0,58,68,55,69,75,69,66],
[72,72,0,77,67,75,82,65,69],
[63,62,53,0,61,62,62,57,57],
[68,75,63,69,0,64,72,64,61],
[65,61,55,68,66,0,66,64,60],
[64,55,48,68,58,64,0,58,54],
[74,61,65,73,66,66,72,0,67],
[60,64,61,73,69,70,76,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,57,64,70,80,66,68,63],
[63,0,68,66,69,68,78,66,62],
[73,62,0,71,71,65,63,64,65],
[66,64,59,0,60,62,59,49,59],
[60,61,59,70,0,67,81,59,56],
[50,62,65,68,63,0,63,54,60],
[64,52,67,71,49,67,0,53,50],
[62,64,66,81,71,76,77,0,57],
[67,68,65,71,74,70,80,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,56,66,74,57,81,53,68],
[67,0,64,72,88,58,69,72,52],
[74,66,0,83,80,61,87,68,64],
[64,58,47,0,69,50,68,51,62],
[56,42,50,61,0,51,64,40,40],
[73,72,69,80,79,0,71,71,65],
[49,61,43,62,66,59,0,50,45],
[77,58,62,79,90,59,80,0,67],
[62,78,66,68,90,65,85,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,67,69,67,63,62,61,60],
[57,0,59,54,51,58,52,60,53],
[63,71,0,73,74,73,62,63,67],
[61,76,57,0,67,56,56,43,64],
[63,79,56,63,0,59,56,55,61],
[67,72,57,74,71,0,71,72,59],
[68,78,68,74,74,59,0,70,59],
[69,70,67,87,75,58,60,0,60],
[70,77,63,66,69,71,71,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,74,52,70,44,52,57,61],
[69,0,72,69,78,65,58,61,82],
[56,58,0,36,65,44,37,55,63],
[78,61,94,0,82,57,62,77,74],
[60,52,65,48,0,34,39,63,57],
[86,65,86,73,96,0,73,78,93],
[78,72,93,68,91,57,0,75,83],
[73,69,75,53,67,52,55,0,72],
[69,48,67,56,73,37,47,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,71,68,65,79,57,58,70],
[56,0,71,64,57,72,71,59,66],
[59,59,0,62,59,76,60,58,62],
[62,66,68,0,63,72,66,58,66],
[65,73,71,67,0,75,64,71,66],
[51,58,54,58,55,0,53,48,58],
[73,59,70,64,66,77,0,63,65],
[72,71,72,72,59,82,67,0,75],
[60,64,68,64,64,72,65,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,70,74,68,66,62,64,63],
[65,0,72,65,74,65,65,70,59],
[60,58,0,65,77,63,60,64,64],
[56,65,65,0,64,60,59,57,57],
[62,56,53,66,0,59,53,55,58],
[64,65,67,70,71,0,63,69,70],
[68,65,70,71,77,67,0,63,69],
[66,60,66,73,75,61,67,0,67],
[67,71,66,73,72,60,61,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,72,63,55,60,74,58,67],
[67,0,72,62,64,68,80,75,73],
[58,58,0,67,61,63,75,70,72],
[67,68,63,0,67,62,70,67,60],
[75,66,69,63,0,88,72,79,78],
[70,62,67,68,42,0,61,77,78],
[56,50,55,60,58,69,0,67,59],
[72,55,60,63,51,53,63,0,68],
[63,57,58,70,52,52,71,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,61,63,67,56,67,69,83],
[47,0,51,55,57,54,56,57,65],
[69,79,0,64,58,60,61,67,74],
[67,75,66,0,70,69,61,69,70],
[63,73,72,60,0,55,64,64,84],
[74,76,70,61,75,0,72,78,86],
[63,74,69,69,66,58,0,63,68],
[61,73,63,61,66,52,67,0,81],
[47,65,56,60,46,44,62,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,74,64,73,67,63,76,77],
[53,0,61,77,76,34,69,60,83],
[56,69,0,66,72,44,59,41,47],
[66,53,64,0,90,41,64,55,63],
[57,54,58,40,0,47,61,56,55],
[63,96,86,89,83,0,84,79,85],
[67,61,71,66,69,46,0,62,79],
[54,70,89,75,74,51,68,0,71],
[53,47,83,67,75,45,51,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,49,57,60,68,55,63,56],
[61,0,53,56,52,60,53,59,57],
[81,77,0,63,66,71,59,72,72],
[73,74,67,0,68,68,61,65,74],
[70,78,64,62,0,80,61,69,70],
[62,70,59,62,50,0,56,65,69],
[75,77,71,69,69,74,0,59,79],
[67,71,58,65,61,65,71,0,77],
[74,73,58,56,60,61,51,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,69,67,80,83,73,74,65],
[54,0,58,59,68,70,55,60,59],
[61,72,0,66,64,67,74,69,68],
[63,71,64,0,66,80,66,84,57],
[50,62,66,64,0,74,73,71,59],
[47,60,63,50,56,0,54,60,59],
[57,75,56,64,57,76,0,69,60],
[56,70,61,46,59,70,61,0,63],
[65,71,62,73,71,71,70,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,65,86,65,89,87,85,44],
[21,0,43,63,65,44,87,85,65],
[65,87,0,65,86,65,85,86,45],
[44,67,65,0,65,67,65,85,44],
[65,65,44,65,0,87,85,43,45],
[41,86,65,63,43,0,85,63,43],
[43,43,45,65,45,45,0,65,45],
[45,45,44,45,87,67,65,0,67],
[86,65,85,86,85,87,85,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,67,63,72,83,78,72,71],
[64,0,61,57,57,71,68,89,69],
[63,69,0,65,67,82,79,77,77],
[67,73,65,0,64,101,79,79,70],
[58,73,63,66,0,82,67,75,70],
[47,59,48,29,48,0,53,56,48],
[52,62,51,51,63,77,0,78,65],
[58,41,53,51,55,74,52,0,59],
[59,61,53,60,60,82,65,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,68,60,65,57,59,61,58],
[57,0,61,57,54,59,64,71,61],
[62,69,0,60,59,68,66,69,64],
[70,73,70,0,57,65,68,61,68],
[65,76,71,73,0,54,61,58,55],
[73,71,62,65,76,0,60,67,62],
[71,66,64,62,69,70,0,64,57],
[69,59,61,69,72,63,66,0,60],
[72,69,66,62,75,68,73,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,66,70,80,68,51,63,60],
[58,0,65,71,65,65,45,40,39],
[64,65,0,62,67,74,56,59,58],
[60,59,68,0,62,63,63,46,52],
[50,65,63,68,0,67,56,55,62],
[62,65,56,67,63,0,50,75,48],
[79,85,74,67,74,80,0,61,60],
[67,90,71,84,75,55,69,0,65],
[70,91,72,78,68,82,70,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,72,66,71,70,75,64,68],
[59,0,63,59,70,65,65,67,67],
[58,67,0,67,72,67,65,57,73],
[64,71,63,0,74,64,80,59,65],
[59,60,58,56,0,59,68,57,58],
[60,65,63,66,71,0,66,62,62],
[55,65,65,50,62,64,0,64,64],
[66,63,73,71,73,68,66,0,63],
[62,63,57,65,72,68,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,63,74,63,66,69,68,71],
[63,0,66,63,67,59,65,61,61],
[67,64,0,61,66,60,80,66,61],
[56,67,69,0,65,64,72,68,70],
[67,63,64,65,0,57,68,69,66],
[64,71,70,66,73,0,77,64,64],
[61,65,50,58,62,53,0,55,59],
[62,69,64,62,61,66,75,0,70],
[59,69,69,60,64,66,71,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,68,62,61,69,63,71,66],
[59,0,67,62,67,71,67,65,62],
[62,63,0,71,71,66,62,58,70],
[68,68,59,0,66,74,59,64,72],
[69,63,59,64,0,64,65,61,66],
[61,59,64,56,66,0,59,61,69],
[67,63,68,71,65,71,0,68,74],
[59,65,72,66,69,69,62,0,69],
[64,68,60,58,64,61,56,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,51,56,59,40,48,62,63],
[65,0,55,64,65,60,58,64,55],
[79,75,0,71,64,48,68,62,66],
[74,66,59,0,51,55,60,57,53],
[71,65,66,79,0,72,64,73,74],
[90,70,82,75,58,0,66,64,66],
[82,72,62,70,66,64,0,63,63],
[68,66,68,73,57,66,67,0,71],
[67,75,64,77,56,64,67,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,49,57,60,53,63,70,59],
[69,0,60,64,60,57,62,75,57],
[81,70,0,69,58,81,59,76,72],
[73,66,61,0,55,71,80,78,77],
[70,70,72,75,0,80,70,82,60],
[77,73,49,59,50,0,64,79,59],
[67,68,71,50,60,66,0,84,61],
[60,55,54,52,48,51,46,0,41],
[71,73,58,53,70,71,69,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,74,60,71,63,70,64,68],
[57,0,68,66,65,63,61,60,61],
[56,62,0,66,72,60,70,65,62],
[70,64,64,0,79,65,71,68,66],
[59,65,58,51,0,64,58,57,63],
[67,67,70,65,66,0,63,68,62],
[60,69,60,59,72,67,0,65,58],
[66,70,65,62,73,62,65,0,64],
[62,69,68,64,67,68,72,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,61,74,61,81,54,72,77],
[58,0,57,83,65,65,55,61,67],
[69,73,0,67,62,64,59,71,71],
[56,47,63,0,69,58,50,63,57],
[69,65,68,61,0,67,66,74,65],
[49,65,66,72,63,0,50,51,53],
[76,75,71,80,64,80,0,83,76],
[58,69,59,67,56,79,47,0,68],
[53,63,59,73,65,77,54,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,73,64,66,63,68,69,73],
[52,0,63,57,57,51,61,56,65],
[57,67,0,62,70,65,69,62,61],
[66,73,68,0,70,69,64,71,72],
[64,73,60,60,0,60,66,58,74],
[67,79,65,61,70,0,71,66,76],
[62,69,61,66,64,59,0,68,73],
[61,74,68,59,72,64,62,0,73],
[57,65,69,58,56,54,57,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,47,59,62,64,59,56,55],
[64,0,34,62,64,66,61,73,56],
[83,96,0,65,75,80,80,86,78],
[71,68,65,0,81,75,67,65,63],
[68,66,55,49,0,73,63,70,51],
[66,64,50,55,57,0,59,57,59],
[71,69,50,63,67,71,0,70,65],
[74,57,44,65,60,73,60,0,51],
[75,74,52,67,79,71,65,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,46,75,51,52,66,64,66],
[47,0,63,82,63,72,65,63,66],
[84,67,0,72,76,55,68,93,81],
[55,48,58,0,35,37,54,54,42],
[79,67,54,95,0,47,52,70,53],
[78,58,75,93,83,0,66,71,59],
[64,65,62,76,78,64,0,70,84],
[66,67,37,76,60,59,60,0,69],
[64,64,49,88,77,71,46,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,72,76,60,75,52,72,63],
[51,0,65,64,55,58,51,62,66],
[58,65,0,67,45,60,48,67,48],
[54,66,63,0,61,62,60,62,68],
[70,75,85,69,0,71,65,74,72],
[55,72,70,68,59,0,61,61,67],
[78,79,82,70,65,69,0,74,74],
[58,68,63,68,56,69,56,0,61],
[67,64,82,62,58,63,56,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,54,68,61,60,65,57,60],
[66,0,66,69,63,61,67,67,62],
[76,64,0,69,58,64,71,70,63],
[62,61,61,0,60,56,58,61,63],
[69,67,72,70,0,71,64,60,66],
[70,69,66,74,59,0,59,68,66],
[65,63,59,72,66,71,0,69,65],
[73,63,60,69,70,62,61,0,61],
[70,68,67,67,64,64,65,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,53,52,65,60,68,71,67],
[62,0,58,59,53,54,51,61,55],
[77,72,0,73,73,69,65,75,65],
[78,71,57,0,65,59,70,75,67],
[65,77,57,65,0,67,66,71,68],
[70,76,61,71,63,0,67,73,74],
[62,79,65,60,64,63,0,61,72],
[59,69,55,55,59,57,69,0,67],
[63,75,65,63,62,56,58,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,57,65,71,50,64,71,54],
[76,0,64,65,82,61,72,80,64],
[73,66,0,65,78,66,69,74,68],
[65,65,65,0,82,60,73,81,65],
[59,48,52,48,0,48,67,75,59],
[80,69,64,70,82,0,79,86,67],
[66,58,61,57,63,51,0,72,59],
[59,50,56,49,55,44,58,0,62],
[76,66,62,65,71,63,71,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,72,61,74,67,70,61,58],
[79,0,75,69,79,75,67,63,65],
[58,55,0,74,68,70,59,66,55],
[69,61,56,0,71,59,56,59,42],
[56,51,62,59,0,69,59,62,56],
[63,55,60,71,61,0,57,57,53],
[60,63,71,74,71,73,0,60,52],
[69,67,64,71,68,73,70,0,65],
[72,65,75,88,74,77,78,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,65,79,66,80,66,80,78],
[90,0,51,66,104,79,91,67,51],
[65,79,0,93,104,81,66,92,64],
[51,64,37,0,51,67,78,66,38],
[64,26,26,79,0,80,27,53,39],
[50,51,49,63,50,0,64,64,63],
[64,39,64,52,103,66,0,93,64],
[50,63,38,64,77,66,37,0,51],
[52,79,66,92,91,67,66,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,82,73,75,70,75,64,70],
[69,0,71,56,60,66,71,64,62],
[48,59,0,58,50,67,67,56,57],
[57,74,72,0,65,73,73,67,59],
[55,70,80,65,0,70,66,65,62],
[60,64,63,57,60,0,61,63,61],
[55,59,63,57,64,69,0,55,61],
[66,66,74,63,65,67,75,0,67],
[60,68,73,71,68,69,69,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,71,58,49,88,63,63,67],
[65,0,67,58,54,77,70,66,66],
[59,63,0,52,57,76,66,59,60],
[72,72,78,0,58,79,69,74,72],
[81,76,73,72,0,84,81,69,63],
[42,53,54,51,46,0,55,60,47],
[67,60,64,61,49,75,0,61,59],
[67,64,71,56,61,70,69,0,63],
[63,64,70,58,67,83,71,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,81,79,59,51,69,53,62],
[57,0,56,77,41,52,66,50,57],
[49,74,0,75,50,65,63,52,58],
[51,53,55,0,37,58,56,55,46],
[71,89,80,93,0,62,73,50,69],
[79,78,65,72,68,0,73,58,58],
[61,64,67,74,57,57,0,46,69],
[77,80,78,75,80,72,84,0,57],
[68,73,72,84,61,72,61,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,75,76,73,66,79,77,62],
[57,0,57,60,53,60,59,52,57],
[55,73,0,66,66,64,79,63,65],
[54,70,64,0,54,73,71,65,62],
[57,77,64,76,0,57,72,48,67],
[64,70,66,57,73,0,81,68,72],
[51,71,51,59,58,49,0,54,57],
[53,78,67,65,82,62,76,0,62],
[68,73,65,68,63,58,73,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,63,55,66,67,61,66],
[66,0,72,64,67,61,66,62,66],
[63,58,0,62,65,62,68,62,63],
[67,66,68,0,66,59,74,59,66],
[75,63,65,64,0,73,70,60,61],
[64,69,68,71,57,0,73,67,67],
[63,64,62,56,60,57,0,60,71],
[69,68,68,71,70,63,70,0,68],
[64,64,67,64,69,63,59,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,75,68,72,62,72,64,65],
[69,0,87,64,75,77,67,56,60],
[55,43,0,58,75,74,60,63,66],
[62,66,72,0,85,73,76,57,55],
[58,55,55,45,0,55,44,47,55],
[68,53,56,57,75,0,61,61,50],
[58,63,70,54,86,69,0,68,61],
[66,74,67,73,83,69,62,0,74],
[65,70,64,75,75,80,69,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,61,62,59,61,58,54,53],
[77,0,68,75,73,65,78,72,76],
[69,62,0,71,66,61,73,54,65],
[68,55,59,0,68,58,62,65,63],
[71,57,64,62,0,57,58,65,65],
[69,65,69,72,73,0,77,57,63],
[72,52,57,68,72,53,0,68,51],
[76,58,76,65,65,73,62,0,73],
[77,54,65,67,65,67,79,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,55,64,68,52,60,54,44],
[68,0,52,77,69,54,69,56,68],
[75,78,0,81,75,62,70,64,57],
[66,53,49,0,72,46,51,45,48],
[62,61,55,58,0,59,62,53,61],
[78,76,68,84,71,0,69,65,72],
[70,61,60,79,68,61,0,63,67],
[76,74,66,85,77,65,67,0,64],
[86,62,73,82,69,58,63,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,83,83,77,57,71,73,73],
[48,0,68,67,57,62,55,60,55],
[47,62,0,73,75,67,60,79,64],
[47,63,57,0,54,47,47,61,46],
[53,73,55,76,0,54,68,74,75],
[73,68,63,83,76,0,69,70,71],
[59,75,70,83,62,61,0,66,65],
[57,70,51,69,56,60,64,0,56],
[57,75,66,84,55,59,65,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,62,67,65,66,71,67,61],
[64,0,57,63,51,65,63,57,58],
[68,73,0,71,64,75,73,66,67],
[63,67,59,0,60,61,69,52,63],
[65,79,66,70,0,71,80,72,75],
[64,65,55,69,59,0,73,55,63],
[59,67,57,61,50,57,0,65,61],
[63,73,64,78,58,75,65,0,66],
[69,72,63,67,55,67,69,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,54,64,59,60,59,53,65],
[68,0,56,68,64,63,60,62,69],
[76,74,0,75,72,73,65,65,72],
[66,62,55,0,68,66,58,65,58],
[71,66,58,62,0,61,51,65,59],
[70,67,57,64,69,0,62,57,62],
[71,70,65,72,79,68,0,72,61],
[77,68,65,65,65,73,58,0,60],
[65,61,58,72,71,68,69,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,68,60,68,64,68,67,64],
[58,0,68,56,64,66,66,59,61],
[62,62,0,48,61,66,68,60,59],
[70,74,82,0,72,73,76,61,69],
[62,66,69,58,0,65,66,62,66],
[66,64,64,57,65,0,66,59,66],
[62,64,62,54,64,64,0,62,59],
[63,71,70,69,68,71,68,0,67],
[66,69,71,61,64,64,71,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,59,57,59,76,51,93,78],
[74,0,70,51,54,69,64,95,70],
[71,60,0,53,55,79,61,68,72],
[73,79,77,0,72,92,62,82,89],
[71,76,75,58,0,73,66,71,79],
[54,61,51,38,57,0,50,75,57],
[79,66,69,68,64,80,0,80,75],
[37,35,62,48,59,55,50,0,69],
[52,60,58,41,51,73,55,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,70,74,66,75,70,68,66],
[66,0,65,70,63,70,60,57,56],
[60,65,0,66,54,62,55,60,67],
[56,60,64,0,57,68,52,65,58],
[64,67,76,73,0,74,65,68,66],
[55,60,68,62,56,0,54,61,56],
[60,70,75,78,65,76,0,65,61],
[62,73,70,65,62,69,65,0,60],
[64,74,63,72,64,74,69,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,73,63,67,68,69,63,66],
[62,0,69,57,63,75,62,50,53],
[57,61,0,59,59,69,69,56,61],
[67,73,71,0,75,75,62,65,61],
[63,67,71,55,0,71,66,52,59],
[62,55,61,55,59,0,59,59,59],
[61,68,61,68,64,71,0,66,62],
[67,80,74,65,78,71,64,0,71],
[64,77,69,69,71,71,68,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,52,60,59,64,67,63,63],
[88,0,75,78,60,79,74,74,76],
[78,55,0,78,58,51,76,58,75],
[70,52,52,0,58,50,66,54,69],
[71,70,72,72,0,80,78,53,68],
[66,51,79,80,50,0,62,66,70],
[63,56,54,64,52,68,0,66,58],
[67,56,72,76,77,64,64,0,61],
[67,54,55,61,62,60,72,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,59,67,65,61,72,62],
[66,0,61,64,63,74,74,79,71],
[64,69,0,71,62,65,70,72,65],
[71,66,59,0,70,75,70,72,68],
[63,67,68,60,0,61,68,69,66],
[65,56,65,55,69,0,71,61,61],
[69,56,60,60,62,59,0,64,65],
[58,51,58,58,61,69,66,0,67],
[68,59,65,62,64,69,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,36,70,45,58,47,50,63],
[65,0,68,86,68,83,56,64,73],
[94,62,0,94,49,76,73,71,93],
[60,44,36,0,57,59,41,50,41],
[85,62,81,73,0,64,72,70,65],
[72,47,54,71,66,0,65,55,73],
[83,74,57,89,58,65,0,42,82],
[80,66,59,80,60,75,88,0,76],
[67,57,37,89,65,57,48,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,74,88,43,75,72,86],
[27,0,43,59,45,57,59,59,58],
[28,87,0,59,60,14,59,45,70],
[56,71,71,0,61,43,75,44,69],
[42,85,70,69,0,70,72,55,54],
[87,73,116,87,60,0,60,85,99],
[55,71,71,55,58,70,0,55,82],
[58,71,85,86,75,45,75,0,83],
[44,72,60,61,76,31,48,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,68,64,68,70,69,56,67],
[61,0,66,65,56,67,64,66,56],
[62,64,0,67,58,59,75,57,67],
[66,65,63,0,61,68,71,60,56],
[62,74,72,69,0,65,65,60,64],
[60,63,71,62,65,0,62,59,62],
[61,66,55,59,65,68,0,60,63],
[74,64,73,70,70,71,70,0,65],
[63,74,63,74,66,68,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,63,76,74,76,60,84,66],
[50,0,53,73,67,81,75,80,68],
[67,77,0,85,63,69,83,83,74],
[54,57,45,0,69,60,71,61,58],
[56,63,67,61,0,61,75,66,68],
[54,49,61,70,69,0,62,53,55],
[70,55,47,59,55,68,0,65,58],
[46,50,47,69,64,77,65,0,59],
[64,62,56,72,62,75,72,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,60,78,69,65,77,76,71],
[58,0,50,66,62,63,63,55,70],
[70,80,0,82,83,58,78,71,80],
[52,64,48,0,72,54,63,67,71],
[61,68,47,58,0,56,77,59,59],
[65,67,72,76,74,0,81,63,84],
[53,67,52,67,53,49,0,58,57],
[54,75,59,63,71,67,72,0,77],
[59,60,50,59,71,46,73,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,69,72,60,62,61,80,71],
[50,0,73,58,56,66,64,68,59],
[61,57,0,50,54,54,55,55,65],
[58,72,80,0,73,68,68,59,74],
[70,74,76,57,0,63,79,69,78],
[68,64,76,62,67,0,66,80,68],
[69,66,75,62,51,64,0,64,68],
[50,62,75,71,61,50,66,0,69],
[59,71,65,56,52,62,62,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,67,60,59,69,71,65,60],
[58,0,62,69,58,70,71,62,57],
[63,68,0,64,62,64,75,59,61],
[70,61,66,0,62,59,72,70,63],
[71,72,68,68,0,74,77,70,65],
[61,60,66,71,56,0,72,65,64],
[59,59,55,58,53,58,0,60,60],
[65,68,71,60,60,65,70,0,57],
[70,73,69,67,65,66,70,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,60,65,62,62,60,71,56],
[79,0,71,64,72,69,71,70,65],
[70,59,0,63,66,63,59,70,56],
[65,66,67,0,66,58,59,74,62],
[68,58,64,64,0,59,59,64,58],
[68,61,67,72,71,0,58,75,65],
[70,59,71,71,71,72,0,76,65],
[59,60,60,56,66,55,54,0,57],
[74,65,74,68,72,65,65,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,81,67,77,83,73,76,78],
[65,0,85,66,83,83,70,77,81],
[49,45,0,46,65,66,58,61,71],
[63,64,84,0,82,76,68,67,84],
[53,47,65,48,0,65,55,59,68],
[47,47,64,54,65,0,54,67,65],
[57,60,72,62,75,76,0,61,81],
[54,53,69,63,71,63,69,0,70],
[52,49,59,46,62,65,49,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,38,67,80,82,58,54,61],
[69,0,65,78,62,66,63,46,51],
[92,65,0,88,76,80,80,89,81],
[63,52,42,0,79,53,54,55,39],
[50,68,54,51,0,59,51,54,54],
[48,64,50,77,71,0,56,67,52],
[72,67,50,76,79,74,0,76,51],
[76,84,41,75,76,63,54,0,50],
[69,79,49,91,76,78,79,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,54,54,71,70,56,61,73],
[56,0,43,54,66,69,55,47,43],
[76,87,0,70,71,74,70,76,64],
[76,76,60,0,71,76,64,64,68],
[59,64,59,59,0,67,57,65,61],
[60,61,56,54,63,0,47,46,52],
[74,75,60,66,73,83,0,63,57],
[69,83,54,66,65,84,67,0,54],
[57,87,66,62,69,78,73,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,76,98,72,71,66,72,65],
[48,0,64,77,41,56,58,68,44],
[54,66,0,71,60,64,58,63,56],
[32,53,59,0,49,57,53,53,59],
[58,89,70,81,0,69,70,81,83],
[59,74,66,73,61,0,59,66,66],
[64,72,72,77,60,71,0,73,74],
[58,62,67,77,49,64,57,0,61],
[65,86,74,71,47,64,56,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,52,65,59,55,58,49,60],
[69,0,69,68,62,66,64,67,58],
[78,61,0,68,67,68,61,61,65],
[65,62,62,0,63,61,58,66,56],
[71,68,63,67,0,66,71,68,68],
[75,64,62,69,64,0,75,59,68],
[72,66,69,72,59,55,0,64,58],
[81,63,69,64,62,71,66,0,60],
[70,72,65,74,62,62,72,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,65,44,68,52,48,57,45],
[90,0,61,77,72,62,65,69,66],
[65,69,0,69,70,66,59,68,68],
[86,53,61,0,69,68,75,65,66],
[62,58,60,61,0,63,54,61,66],
[78,68,64,62,67,0,65,77,67],
[82,65,71,55,76,65,0,66,57],
[73,61,62,65,69,53,64,0,43],
[85,64,62,64,64,63,73,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,50,50,59,66,66,49,58],
[74,0,64,56,72,60,84,69,74],
[80,66,0,59,65,71,80,68,83],
[80,74,71,0,64,76,77,68,71],
[71,58,65,66,0,62,72,68,76],
[64,70,59,54,68,0,73,63,77],
[64,46,50,53,58,57,0,53,65],
[81,61,62,62,62,67,77,0,69],
[72,56,47,59,54,53,65,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,71,70,67,75,67,64,71],
[57,0,69,75,59,70,55,66,67],
[59,61,0,68,67,69,61,64,72],
[60,55,62,0,60,60,56,55,68],
[63,71,63,70,0,76,63,58,67],
[55,60,61,70,54,0,56,57,56],
[63,75,69,74,67,74,0,67,72],
[66,64,66,75,72,73,63,0,70],
[59,63,58,62,63,74,58,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,71,63,54,51,79,72,71],
[76,0,59,52,41,67,58,60,59],
[59,71,0,88,69,60,87,69,62],
[67,78,42,0,59,59,86,60,76],
[76,89,61,71,0,104,87,70,61],
[79,63,70,71,26,0,70,46,44],
[51,72,43,44,43,60,0,44,45],
[58,70,61,70,60,84,86,0,77],
[59,71,68,54,69,86,85,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,65,55,69,70,62,65,72],
[67,0,71,58,68,73,66,69,66],
[65,59,0,61,65,68,56,60,66],
[75,72,69,0,73,82,66,65,70],
[61,62,65,57,0,75,64,56,63],
[60,57,62,48,55,0,53,52,63],
[68,64,74,64,66,77,0,67,73],
[65,61,70,65,74,78,63,0,73],
[58,64,64,60,67,67,57,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,56,56,93,68,68,68,69],
[62,0,37,41,68,64,25,65,79],
[74,93,0,68,93,39,92,78,104],
[74,89,62,0,104,75,62,77,104],
[37,62,37,26,0,49,25,53,92],
[62,66,91,55,81,0,65,65,104],
[62,105,38,68,105,65,0,52,80],
[62,65,52,53,77,65,78,0,78],
[61,51,26,26,38,26,50,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,57,78,54,65,60,53,75],
[67,0,62,81,60,69,54,54,71],
[73,68,0,70,59,70,72,71,61],
[52,49,60,0,53,62,55,49,60],
[76,70,71,77,0,71,65,63,73],
[65,61,60,68,59,0,64,66,75],
[70,76,58,75,65,66,0,57,61],
[77,76,59,81,67,64,73,0,68],
[55,59,69,70,57,55,69,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,70,80,88,77,73,86,65],
[60,0,76,63,75,82,69,80,67],
[60,54,0,64,55,60,69,64,59],
[50,67,66,0,70,83,64,70,57],
[42,55,75,60,0,64,71,72,46],
[53,48,70,47,66,0,70,55,54],
[57,61,61,66,59,60,0,68,47],
[44,50,66,60,58,75,62,0,61],
[65,63,71,73,84,76,83,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,63,75,65,72,54,56,54],
[62,0,56,52,48,60,47,51,60],
[67,74,0,73,57,78,49,60,63],
[55,78,57,0,55,61,52,59,66],
[65,82,73,75,0,78,62,59,68],
[58,70,52,69,52,0,36,54,65],
[76,83,81,78,68,94,0,60,72],
[74,79,70,71,71,76,70,0,59],
[76,70,67,64,62,65,58,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,67,65,71,71,91,58,77],
[54,0,56,59,74,71,85,60,59],
[63,74,0,62,71,79,74,66,65],
[65,71,68,0,74,73,78,73,67],
[59,56,59,56,0,67,71,55,50],
[59,59,51,57,63,0,76,64,54],
[39,45,56,52,59,54,0,48,53],
[72,70,64,57,75,66,82,0,61],
[53,71,65,63,80,76,77,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,73,75,62,66,50,73,67],
[66,0,57,73,62,67,69,78,71],
[57,73,0,65,62,63,60,58,64],
[55,57,65,0,59,60,48,45,49],
[68,68,68,71,0,60,60,70,74],
[64,63,67,70,70,0,58,65,63],
[80,61,70,82,70,72,0,65,62],
[57,52,72,85,60,65,65,0,65],
[63,59,66,81,56,67,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,55,61,87,84,60,67,63],
[63,0,69,64,84,82,68,74,66],
[75,61,0,64,82,76,68,71,61],
[69,66,66,0,93,86,64,81,68],
[43,46,48,37,0,67,43,47,46],
[46,48,54,44,63,0,36,50,51],
[70,62,62,66,87,94,0,69,62],
[63,56,59,49,83,80,61,0,77],
[67,64,69,62,84,79,68,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,66,74,66,63,69,66,74],
[62,0,68,67,61,64,59,62,65],
[64,62,0,72,61,61,66,61,71],
[56,63,58,0,56,58,65,63,71],
[64,69,69,74,0,64,66,67,68],
[67,66,69,72,66,0,61,65,69],
[61,71,64,65,64,69,0,66,72],
[64,68,69,67,63,65,64,0,66],
[56,65,59,59,62,61,58,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,57,57,55,65,62,64,61],
[86,0,71,69,52,65,77,65,75],
[73,59,0,64,64,60,83,59,70],
[73,61,66,0,63,66,83,63,70],
[75,78,66,67,0,59,78,80,73],
[65,65,70,64,71,0,77,66,69],
[68,53,47,47,52,53,0,51,60],
[66,65,71,67,50,64,79,0,69],
[69,55,60,60,57,61,70,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,51,61,66,55,68,67,57],
[71,0,69,70,77,60,58,71,61],
[79,61,0,67,72,60,68,73,66],
[69,60,63,0,63,54,65,68,59],
[64,53,58,67,0,48,60,64,59],
[75,70,70,76,82,0,63,77,75],
[62,72,62,65,70,67,0,67,66],
[63,59,57,62,66,53,63,0,61],
[73,69,64,71,71,55,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,54,59,51,53,53,54,58],
[81,0,62,78,69,62,69,64,71],
[76,68,0,79,62,55,65,64,65],
[71,52,51,0,65,58,61,53,53],
[79,61,68,65,0,65,68,60,60],
[77,68,75,72,65,0,67,68,66],
[77,61,65,69,62,63,0,56,66],
[76,66,66,77,70,62,74,0,71],
[72,59,65,77,70,64,64,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,63,66,41,57,62,63,62],
[75,0,71,69,65,72,68,67,65],
[67,59,0,65,53,60,59,63,69],
[64,61,65,0,58,64,72,63,60],
[89,65,77,72,0,74,73,73,70],
[73,58,70,66,56,0,67,64,62],
[68,62,71,58,57,63,0,72,66],
[67,63,67,67,57,66,58,0,60],
[68,65,61,70,60,68,64,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,48,66,56,47,68,59,66],
[60,0,43,59,56,47,64,48,47],
[82,87,0,84,74,65,81,66,71],
[64,71,46,0,63,57,57,58,63],
[74,74,56,67,0,55,68,65,63],
[83,83,65,73,75,0,66,63,71],
[62,66,49,73,62,64,0,62,61],
[71,82,64,72,65,67,68,0,66],
[64,83,59,67,67,59,69,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,64,63,98,16,82,97,49],
[81,0,81,97,97,81,97,97,65],
[66,49,0,113,97,65,65,81,82],
[67,33,17,0,67,16,50,50,50],
[32,33,33,63,0,16,82,82,33],
[114,49,65,114,114,0,82,98,83],
[48,33,65,80,48,48,0,81,33],
[33,33,49,80,48,32,49,0,49],
[81,65,48,80,97,47,97,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,72,62,79,61,75,55,74],
[66,0,75,57,72,74,76,65,65],
[58,55,0,55,59,58,63,53,61],
[68,73,75,0,70,69,71,68,65],
[51,58,71,60,0,57,69,61,66],
[69,56,72,61,73,0,69,69,64],
[55,54,67,59,61,61,0,52,57],
[75,65,77,62,69,61,78,0,72],
[56,65,69,65,64,66,73,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,68,49,54,53,60,61,67],
[68,0,71,53,90,65,69,71,62],
[62,59,0,59,78,55,62,64,50],
[81,77,71,0,72,44,77,71,63],
[76,40,52,58,0,50,57,38,57],
[77,65,75,86,80,0,84,51,71],
[70,61,68,53,73,46,0,54,57],
[69,59,66,59,92,79,76,0,58],
[63,68,80,67,73,59,73,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,60,77,62,65,73,64,76],
[66,0,63,67,51,69,64,70,61],
[70,67,0,63,70,60,63,54,56],
[53,63,67,0,57,68,59,58,69],
[68,79,60,73,0,64,73,66,60],
[65,61,70,62,66,0,64,54,69],
[57,66,67,71,57,66,0,59,60],
[66,60,76,72,64,76,71,0,65],
[54,69,74,61,70,61,70,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,68,67,60,56,60,63,51],
[75,0,67,71,62,64,62,70,63],
[62,63,0,65,65,54,66,66,55],
[63,59,65,0,67,64,62,69,55],
[70,68,65,63,0,61,64,75,66],
[74,66,76,66,69,0,73,80,63],
[70,68,64,68,66,57,0,69,58],
[67,60,64,61,55,50,61,0,56],
[79,67,75,75,64,67,72,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,72,72,60,67,73,75,65],
[59,0,68,60,59,63,61,67,53],
[58,62,0,61,48,67,76,72,59],
[58,70,69,0,57,72,75,64,66],
[70,71,82,73,0,71,80,74,60],
[63,67,63,58,59,0,71,69,51],
[57,69,54,55,50,59,0,67,58],
[55,63,58,66,56,61,63,0,52],
[65,77,71,64,70,79,72,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,54,75,76,70,71,68,69],
[65,0,62,65,70,59,57,61,58],
[76,68,0,73,63,69,68,68,63],
[55,65,57,0,58,58,57,52,49],
[54,60,67,72,0,66,53,61,49],
[60,71,61,72,64,0,65,63,49],
[59,73,62,73,77,65,0,64,62],
[62,69,62,78,69,67,66,0,61],
[61,72,67,81,81,81,68,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,62,75,61,74,62,70,59],
[61,0,60,60,50,64,60,55,56],
[68,70,0,75,66,77,65,72,66],
[55,70,55,0,53,62,54,65,57],
[69,80,64,77,0,79,68,73,69],
[56,66,53,68,51,0,54,60,56],
[68,70,65,76,62,76,0,72,68],
[60,75,58,65,57,70,58,0,60],
[71,74,64,73,61,74,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,68,58,64,54,65,50,62],
[71,0,72,59,76,67,75,69,71],
[62,58,0,57,69,58,64,58,60],
[72,71,73,0,73,68,67,64,69],
[66,54,61,57,0,55,64,50,55],
[76,63,72,62,75,0,67,58,74],
[65,55,66,63,66,63,0,58,71],
[80,61,72,66,80,72,72,0,67],
[68,59,70,61,75,56,59,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,50,55,60,48,48,53,49],
[80,0,65,67,63,78,60,64,58],
[80,65,0,68,62,75,65,66,50],
[75,63,62,0,67,63,57,64,59],
[70,67,68,63,0,63,59,68,57],
[82,52,55,67,67,0,63,58,60],
[82,70,65,73,71,67,0,76,70],
[77,66,64,66,62,72,54,0,66],
[81,72,80,71,73,70,60,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,54,69,65,55,59,65,61],
[54,0,51,60,58,44,60,53,48],
[76,79,0,69,72,65,68,72,70],
[61,70,61,0,62,59,67,59,61],
[65,72,58,68,0,60,58,61,59],
[75,86,65,71,70,0,69,68,57],
[71,70,62,63,72,61,0,72,61],
[65,77,58,71,69,62,58,0,60],
[69,82,60,69,71,73,69,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,62,71,69,65,55,56,63],
[53,0,51,52,57,56,43,51,62],
[68,79,0,83,72,59,42,68,70],
[59,78,47,0,85,58,54,72,73],
[61,73,58,45,0,56,52,46,65],
[65,74,71,72,74,0,66,69,74],
[75,87,88,76,78,64,0,68,64],
[74,79,62,58,84,61,62,0,71],
[67,68,60,57,65,56,66,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,61,55,61,71,66,76],
[71,0,61,76,61,59,69,65,81],
[65,69,0,63,57,66,74,64,80],
[69,54,67,0,65,55,71,66,69],
[75,69,73,65,0,74,76,71,72],
[69,71,64,75,56,0,65,66,69],
[59,61,56,59,54,65,0,61,70],
[64,65,66,64,59,64,69,0,76],
[54,49,50,61,58,61,60,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,75,72,67,76,66,71,63],
[56,0,73,67,54,63,67,69,62],
[55,57,0,63,61,77,68,66,64],
[58,63,67,0,58,71,54,63,64],
[63,76,69,72,0,82,76,73,80],
[54,67,53,59,48,0,64,63,61],
[64,63,62,76,54,66,0,59,66],
[59,61,64,67,57,67,71,0,71],
[67,68,66,66,50,69,64,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,71,54,61,62,67,73],
[66,0,53,82,66,54,66,72,64],
[63,77,0,82,65,65,72,64,86],
[59,48,48,0,50,54,50,62,78],
[76,64,65,80,0,67,74,72,69],
[69,76,65,76,63,0,72,70,75],
[68,64,58,80,56,58,0,55,72],
[63,58,66,68,58,60,75,0,68],
[57,66,44,52,61,55,58,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,84,58,55,72,73,72,86],
[75,0,103,72,74,59,76,72,87],
[46,27,0,43,44,43,58,43,86],
[72,58,87,0,58,57,60,87,86],
[75,56,86,72,0,44,87,86,85],
[58,71,87,73,86,0,87,84,100],
[57,54,72,70,43,43,0,54,86],
[58,58,87,43,44,46,76,0,116],
[44,43,44,44,45,30,44,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,66,67,75,62,70,78,67],
[46,0,65,63,68,44,61,62,60],
[64,65,0,58,67,61,65,77,70],
[63,67,72,0,70,57,62,75,67],
[55,62,63,60,0,51,59,62,64],
[68,86,69,73,79,0,63,80,75],
[60,69,65,68,71,67,0,69,64],
[52,68,53,55,68,50,61,0,62],
[63,70,60,63,66,55,66,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,64,71,55,58,59,61,63],
[66,0,67,74,53,59,57,65,58],
[66,63,0,75,58,61,66,65,63],
[59,56,55,0,46,55,56,60,57],
[75,77,72,84,0,68,66,69,65],
[72,71,69,75,62,0,67,73,69],
[71,73,64,74,64,63,0,63,66],
[69,65,65,70,61,57,67,0,61],
[67,72,67,73,65,61,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,64,63,66,63,58,62,67],
[67,0,65,67,67,64,59,64,66],
[66,65,0,61,70,56,59,58,66],
[67,63,69,0,68,61,64,71,69],
[64,63,60,62,0,67,64,65,61],
[67,66,74,69,63,0,62,67,70],
[72,71,71,66,66,68,0,60,67],
[68,66,72,59,65,63,70,0,54],
[63,64,64,61,69,60,63,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,61,59,63,73,56,55,73],
[63,0,61,71,70,64,62,59,71],
[69,69,0,70,75,81,67,65,69],
[71,59,60,0,62,75,60,61,65],
[67,60,55,68,0,70,55,56,69],
[57,66,49,55,60,0,55,58,62],
[74,68,63,70,75,75,0,65,75],
[75,71,65,69,74,72,65,0,75],
[57,59,61,65,61,68,55,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,86,71,80,88,37,61,80],
[44,0,70,53,35,88,27,34,72],
[44,60,0,53,26,63,35,17,71],
[59,77,77,0,44,85,69,62,88],
[50,95,104,86,0,86,52,71,95],
[42,42,67,45,44,0,45,27,53],
[93,103,95,61,78,85,0,79,89],
[69,96,113,68,59,103,51,0,95],
[50,58,59,42,35,77,41,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,77,64,65,79,76,77,77],
[27,0,38,38,41,53,25,66,51],
[53,92,0,64,41,52,66,78,54],
[66,92,66,0,68,53,91,66,93],
[65,89,89,62,0,51,62,63,77],
[51,77,78,77,79,0,63,90,91],
[54,105,64,39,68,67,0,92,94],
[53,64,52,64,67,40,38,0,52],
[53,79,76,37,53,39,36,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,64,64,59,71,65,59,58],
[66,0,57,73,59,75,60,51,66],
[66,73,0,75,73,80,70,62,66],
[66,57,55,0,57,75,60,59,55],
[71,71,57,73,0,86,72,69,66],
[59,55,50,55,44,0,52,57,66],
[65,70,60,70,58,78,0,72,64],
[71,79,68,71,61,73,58,0,65],
[72,64,64,75,64,64,66,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,59,57,62,64,65,61,63],
[73,0,69,75,74,74,66,67,65],
[71,61,0,72,66,65,67,69,63],
[73,55,58,0,64,68,66,70,62],
[68,56,64,66,0,71,74,62,59],
[66,56,65,62,59,0,65,59,57],
[65,64,63,64,56,65,0,63,54],
[69,63,61,60,68,71,67,0,60],
[67,65,67,68,71,73,76,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,67,73,74,71,72,71,73],
[70,0,73,76,67,63,68,77,77],
[63,57,0,65,62,65,66,62,62],
[57,54,65,0,61,63,66,69,68],
[56,63,68,69,0,76,72,72,72],
[59,67,65,67,54,0,69,68,64],
[58,62,64,64,58,61,0,68,63],
[59,53,68,61,58,62,62,0,60],
[57,53,68,62,58,66,67,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,60,62,50,44,55,64,67],
[70,0,81,67,58,67,74,63,68],
[70,49,0,63,51,53,67,61,73],
[68,63,67,0,53,54,66,69,74],
[80,72,79,77,0,63,69,80,76],
[86,63,77,76,67,0,68,78,80],
[75,56,63,64,61,62,0,59,74],
[66,67,69,61,50,52,71,0,64],
[63,62,57,56,54,50,56,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,65,68,72,63,61,68,67],
[58,0,56,63,62,60,56,62,54],
[65,74,0,61,60,61,52,59,56],
[62,67,69,0,67,59,69,68,64],
[58,68,70,63,0,53,60,62,62],
[67,70,69,71,77,0,68,64,69],
[69,74,78,61,70,62,0,66,65],
[62,68,71,62,68,66,64,0,68],
[63,76,74,66,68,61,65,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,63,65,69,74,64,66,75],
[69,0,65,60,71,67,67,63,76],
[67,65,0,62,64,64,61,59,68],
[65,70,68,0,68,79,66,66,76],
[61,59,66,62,0,68,67,62,71],
[56,63,66,51,62,0,60,56,63],
[66,63,69,64,63,70,0,55,78],
[64,67,71,64,68,74,75,0,71],
[55,54,62,54,59,67,52,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,53,75,68,57,61,56,62],
[68,0,66,67,67,57,67,62,64],
[77,64,0,81,76,66,63,59,72],
[55,63,49,0,54,52,52,52,53],
[62,63,54,76,0,65,62,57,62],
[73,73,64,78,65,0,68,61,66],
[69,63,67,78,68,62,0,71,66],
[74,68,71,78,73,69,59,0,66],
[68,66,58,77,68,64,64,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,73,72,65,65,66,65,66],
[66,0,75,64,54,57,62,66,59],
[57,55,0,66,51,64,52,69,60],
[58,66,64,0,60,54,54,70,59],
[65,76,79,70,0,73,73,75,69],
[65,73,66,76,57,0,65,71,64],
[64,68,78,76,57,65,0,75,65],
[65,64,61,60,55,59,55,0,65],
[64,71,70,71,61,66,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,60,58,56,65,72,53,56],
[63,0,67,68,74,58,77,62,67],
[70,63,0,68,69,77,78,65,69],
[72,62,62,0,66,63,68,61,67],
[74,56,61,64,0,60,77,68,76],
[65,72,53,67,70,0,65,69,76],
[58,53,52,62,53,65,0,70,55],
[77,68,65,69,62,61,60,0,58],
[74,63,61,63,54,54,75,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,61,72,62,61,60,77,63],
[61,0,60,72,68,63,61,66,73],
[69,70,0,76,68,71,57,66,61],
[58,58,54,0,62,64,54,63,61],
[68,62,62,68,0,67,69,68,58],
[69,67,59,66,63,0,56,62,60],
[70,69,73,76,61,74,0,62,64],
[53,64,64,67,62,68,68,0,66],
[67,57,69,69,72,70,66,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,71,57,65,51,50,65,58],
[66,0,70,67,70,67,60,62,71],
[59,60,0,66,69,57,66,58,62],
[73,63,64,0,65,65,59,57,66],
[65,60,61,65,0,52,57,59,63],
[79,63,73,65,78,0,66,69,75],
[80,70,64,71,73,64,0,65,69],
[65,68,72,73,71,61,65,0,65],
[72,59,68,64,67,55,61,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,64,78,60,66,68,68,72],
[69,0,78,69,77,65,75,68,65],
[66,52,0,71,68,61,56,72,58],
[52,61,59,0,78,68,59,69,71],
[70,53,62,52,0,71,57,61,65],
[64,65,69,62,59,0,68,59,69],
[62,55,74,71,73,62,0,70,65],
[62,62,58,61,69,71,60,0,63],
[58,65,72,59,65,61,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,71,71,79,73,64,80,83],
[35,0,48,58,53,49,64,57,50],
[59,82,0,67,53,79,77,78,73],
[59,72,63,0,72,67,65,77,64],
[51,77,77,58,0,64,65,68,65],
[57,81,51,63,66,0,56,62,53],
[66,66,53,65,65,74,0,78,58],
[50,73,52,53,62,68,52,0,67],
[47,80,57,66,65,77,72,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,65,74,69,66,79,75,68],
[53,0,51,62,54,61,73,57,56],
[65,79,0,63,62,64,70,67,64],
[56,68,67,0,58,66,72,63,62],
[61,76,68,72,0,68,78,70,66],
[64,69,66,64,62,0,73,80,64],
[51,57,60,58,52,57,0,60,54],
[55,73,63,67,60,50,70,0,62],
[62,74,66,68,64,66,76,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,66,67,72,77,70,63,71],
[67,0,66,63,76,73,66,69,67],
[64,64,0,64,74,74,71,65,68],
[63,67,66,0,79,73,66,71,73],
[58,54,56,51,0,60,48,53,54],
[53,57,56,57,70,0,54,58,68],
[60,64,59,64,82,76,0,64,72],
[67,61,65,59,77,72,66,0,66],
[59,63,62,57,76,62,58,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,65,65,56,69,68,54,66],
[59,0,67,68,57,72,70,61,67],
[65,63,0,74,67,67,72,63,74],
[65,62,56,0,55,63,54,49,59],
[74,73,63,75,0,64,70,65,72],
[61,58,63,67,66,0,72,59,69],
[62,60,58,76,60,58,0,49,61],
[76,69,67,81,65,71,81,0,71],
[64,63,56,71,58,61,69,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,60,75,53,67,72,73,82],
[63,0,69,61,82,63,68,73,75],
[70,61,0,63,73,63,76,70,74],
[55,69,67,0,68,65,61,78,77],
[77,48,57,62,0,66,61,62,73],
[63,67,67,65,64,0,66,75,76],
[58,62,54,69,69,64,0,67,76],
[57,57,60,52,68,55,63,0,68],
[48,55,56,53,57,54,54,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,51,69,79,68,65,42,60],
[74,0,63,82,91,73,81,67,64],
[79,67,0,80,93,69,76,73,61],
[61,48,50,0,75,57,70,46,54],
[51,39,37,55,0,48,54,33,47],
[62,57,61,73,82,0,80,49,64],
[65,49,54,60,76,50,0,56,50],
[88,63,57,84,97,81,74,0,72],
[70,66,69,76,83,66,80,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,65,114,81,82,82,49,32],
[17,0,31,95,33,47,48,0,17],
[65,99,0,64,63,65,64,66,48],
[16,35,66,0,51,50,34,19,16],
[49,97,67,79,0,63,32,19,17],
[48,83,65,80,67,0,63,50,33],
[48,82,66,96,98,67,0,34,48],
[81,130,64,111,111,80,96,0,66],
[98,113,82,114,113,97,82,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,79,71,54,78,78,69,78],
[60,0,71,52,47,66,46,71,75],
[51,59,0,39,22,58,29,69,44],
[59,78,91,0,46,53,62,63,74],
[76,83,108,84,0,83,50,82,101],
[52,64,72,77,47,0,47,63,89],
[52,84,101,68,80,83,0,75,107],
[61,59,61,67,48,67,55,0,83],
[52,55,86,56,29,41,23,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,63,63,63,60,59,69,53],
[69,0,60,71,69,66,72,72,74],
[67,70,0,70,66,69,67,77,63],
[67,59,60,0,53,59,54,66,53],
[67,61,64,77,0,61,67,70,68],
[70,64,61,71,69,0,70,71,68],
[71,58,63,76,63,60,0,74,71],
[61,58,53,64,60,59,56,0,63],
[77,56,67,77,62,62,59,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,63,74,71,81,67,67,72],
[52,0,56,56,65,59,61,61,59],
[67,74,0,80,76,66,71,70,61],
[56,74,50,0,53,60,50,59,52],
[59,65,54,77,0,61,66,69,54],
[49,71,64,70,69,0,62,63,50],
[63,69,59,80,64,68,0,75,64],
[63,69,60,71,61,67,55,0,58],
[58,71,69,78,76,80,66,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,65,71,61,64,57,64,68],
[59,0,56,58,55,66,59,69,62],
[65,74,0,61,64,59,60,55,56],
[59,72,69,0,84,60,64,64,68],
[69,75,66,46,0,63,62,67,68],
[66,64,71,70,67,0,62,69,60],
[73,71,70,66,68,68,0,64,65],
[66,61,75,66,63,61,66,0,58],
[62,68,74,62,62,70,65,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,72,66,70,66,63,63,71],
[67,0,69,73,61,64,69,69,60],
[58,61,0,64,52,62,54,62,53],
[64,57,66,0,67,61,68,49,64],
[60,69,78,63,0,68,73,65,59],
[64,66,68,69,62,0,63,64,53],
[67,61,76,62,57,67,0,67,62],
[67,61,68,81,65,66,63,0,60],
[59,70,77,66,71,77,68,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,76,87,65,69,67,77,69],
[57,0,64,76,60,55,60,70,70],
[54,66,0,80,63,67,64,77,73],
[43,54,50,0,44,52,56,63,48],
[65,70,67,86,0,64,77,81,71],
[61,75,63,78,66,0,68,70,68],
[63,70,66,74,53,62,0,67,64],
[53,60,53,67,49,60,63,0,73],
[61,60,57,82,59,62,66,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,71,66,62,57,71,68,63],
[57,0,64,64,62,57,61,61,64],
[59,66,0,53,62,62,61,51,56],
[64,66,77,0,78,65,67,67,69],
[68,68,68,52,0,69,56,58,61],
[73,73,68,65,61,0,63,69,62],
[59,69,69,63,74,67,0,65,72],
[62,69,79,63,72,61,65,0,61],
[67,66,74,61,69,68,58,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,74,75,65,67,68,74],
[63,0,60,66,66,67,65,65,68],
[62,70,0,64,68,67,68,62,71],
[56,64,66,0,75,67,69,65,75],
[55,64,62,55,0,63,62,60,69],
[65,63,63,63,67,0,66,57,65],
[63,65,62,61,68,64,0,65,72],
[62,65,68,65,70,73,65,0,70],
[56,62,59,55,61,65,58,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,58,61,66,56,61,77,63],
[65,0,56,67,64,64,69,67,61],
[72,74,0,68,68,66,74,71,60],
[69,63,62,0,65,56,64,68,53],
[64,66,62,65,0,58,66,68,64],
[74,66,64,74,72,0,72,80,65],
[69,61,56,66,64,58,0,67,60],
[53,63,59,62,62,50,63,0,53],
[67,69,70,77,66,65,70,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,58,57,59,56,67,58,54],
[70,0,62,59,62,56,69,53,53],
[72,68,0,69,59,62,81,59,60],
[73,71,61,0,65,69,68,60,64],
[71,68,71,65,0,65,78,67,55],
[74,74,68,61,65,0,74,67,68],
[63,61,49,62,52,56,0,60,43],
[72,77,71,70,63,63,70,0,59],
[76,77,70,66,75,62,87,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,65,0,65,0,0,65],
[65,0,130,130,65,65,0,0,65],
[65,0,0,65,65,0,0,0,0],
[65,0,65,0,65,65,0,0,0],
[130,65,65,65,0,65,0,0,65],
[65,65,130,65,65,0,65,65,65],
[130,130,130,130,130,65,0,65,130],
[130,130,130,130,130,65,65,0,130],
[65,65,130,130,65,65,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,48,60,53,97,74,69,69],
[54,0,41,48,51,69,59,67,76],
[82,89,0,65,77,80,78,85,93],
[70,82,65,0,53,100,75,82,98],
[77,79,53,77,0,81,76,77,82],
[33,61,50,30,49,0,48,62,75],
[56,71,52,55,54,82,0,62,88],
[61,63,45,48,53,68,68,0,45],
[61,54,37,32,48,55,42,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,65,71,73,68,78,63,78],
[62,0,67,76,75,67,76,68,70],
[65,63,0,71,64,62,72,60,66],
[59,54,59,0,60,62,66,60,59],
[57,55,66,70,0,65,75,59,63],
[62,63,68,68,65,0,72,65,72],
[52,54,58,64,55,58,0,53,63],
[67,62,70,70,71,65,77,0,70],
[52,60,64,71,67,58,67,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,67,65,79,72,73,64,78],
[69,0,67,63,64,65,65,77,80],
[63,63,0,59,67,52,76,77,72],
[65,67,71,0,78,75,67,89,79],
[51,66,63,52,0,58,62,67,65],
[58,65,78,55,72,0,75,75,80],
[57,65,54,63,68,55,0,68,73],
[66,53,53,41,63,55,62,0,69],
[52,50,58,51,65,50,57,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,60,58,51,61,69,58,53],
[73,0,59,68,64,69,78,63,63],
[70,71,0,70,69,77,71,72,62],
[72,62,60,0,64,70,70,72,66],
[79,66,61,66,0,71,71,67,59],
[69,61,53,60,59,0,67,59,53],
[61,52,59,60,59,63,0,66,59],
[72,67,58,58,63,71,64,0,63],
[77,67,68,64,71,77,71,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,57,69,63,59,72,61,64],
[69,0,65,62,62,70,68,65,59],
[73,65,0,71,69,67,61,71,61],
[61,68,59,0,66,74,62,67,59],
[67,68,61,64,0,68,70,67,66],
[71,60,63,56,62,0,69,59,60],
[58,62,69,68,60,61,0,64,57],
[69,65,59,63,63,71,66,0,65],
[66,71,69,71,64,70,73,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,70,81,66,63,74,71,73],
[64,0,60,65,58,60,59,65,69],
[60,70,0,76,82,69,76,66,73],
[49,65,54,0,61,53,66,60,64],
[64,72,48,69,0,56,78,62,69],
[67,70,61,77,74,0,86,58,75],
[56,71,54,64,52,44,0,54,60],
[59,65,64,70,68,72,76,0,65],
[57,61,57,66,61,55,70,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,64,65,62,62,61,59,63],
[68,0,68,62,57,58,56,61,60],
[66,62,0,63,62,58,54,63,64],
[65,68,67,0,62,66,59,65,60],
[68,73,68,68,0,57,70,61,60],
[68,72,72,64,73,0,75,69,69],
[69,74,76,71,60,55,0,63,67],
[71,69,67,65,69,61,67,0,66],
[67,70,66,70,70,61,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,61,71,74,63,65,68,78],
[71,0,62,73,63,72,64,66,62],
[69,68,0,66,69,61,68,57,67],
[59,57,64,0,63,53,76,63,61],
[56,67,61,67,0,58,82,57,72],
[67,58,69,77,72,0,79,78,72],
[65,66,62,54,48,51,0,57,63],
[62,64,73,67,73,52,73,0,61],
[52,68,63,69,58,58,67,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,72,70,68,74,62,66,63],
[70,0,71,76,69,80,65,72,62],
[58,59,0,68,65,70,63,66,69],
[60,54,62,0,62,72,58,58,57],
[62,61,65,68,0,63,61,63,66],
[56,50,60,58,67,0,49,69,48],
[68,65,67,72,69,81,0,70,64],
[64,58,64,72,67,61,60,0,63],
[67,68,61,73,64,82,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,68,67,75,72,66,69],
[65,0,65,72,66,68,66,69,68],
[63,65,0,67,66,71,73,65,70],
[62,58,63,0,62,66,64,63,65],
[63,64,64,68,0,82,73,59,67],
[55,62,59,64,48,0,58,57,59],
[58,64,57,66,57,72,0,59,67],
[64,61,65,67,71,73,71,0,67],
[61,62,60,65,63,71,63,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,79,68,75,69,67,71],
[66,0,62,68,75,71,62,80,66],
[64,68,0,65,79,80,72,86,73],
[51,62,65,0,66,72,61,62,59],
[62,55,51,64,0,66,52,65,63],
[55,59,50,58,64,0,49,55,57],
[61,68,58,69,78,81,0,68,59],
[63,50,44,68,65,75,62,0,71],
[59,64,57,71,67,73,71,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,71,64,64,58,59,70,73],
[76,0,78,58,71,51,61,70,75],
[59,52,0,66,60,53,68,56,54],
[66,72,64,0,54,51,64,61,66],
[66,59,70,76,0,62,59,70,77],
[72,79,77,79,68,0,66,68,55],
[71,69,62,66,71,64,0,75,76],
[60,60,74,69,60,62,55,0,62],
[57,55,76,64,53,75,54,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,53,82,56,67,53,53,67],
[72,0,69,86,52,86,63,63,79],
[77,61,0,81,78,82,67,75,84],
[48,44,49,0,39,63,39,50,70],
[74,78,52,91,0,88,76,69,73],
[63,44,48,67,42,0,43,55,53],
[77,67,63,91,54,87,0,72,77],
[77,67,55,80,61,75,58,0,78],
[63,51,46,60,57,77,53,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,57,57,67,61,63,61,69],
[69,0,64,63,68,68,70,66,75],
[73,66,0,59,63,64,70,65,76],
[73,67,71,0,64,69,72,64,74],
[63,62,67,66,0,65,69,61,72],
[69,62,66,61,65,0,66,64,74],
[67,60,60,58,61,64,0,61,57],
[69,64,65,66,69,66,69,0,70],
[61,55,54,56,58,56,73,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,61,75,70,67,71,63],
[63,0,69,63,69,70,71,65,66],
[63,61,0,56,64,64,69,62,61],
[69,67,74,0,79,76,68,63,60],
[55,61,66,51,0,72,68,54,58],
[60,60,66,54,58,0,70,60,65],
[63,59,61,62,62,60,0,61,57],
[59,65,68,67,76,70,69,0,64],
[67,64,69,70,72,65,73,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,55,83,44,39,53,65,56],
[74,0,85,93,60,67,60,67,81],
[75,45,0,79,66,55,67,54,72],
[47,37,51,0,41,34,21,54,58],
[86,70,64,89,0,65,49,53,65],
[91,63,75,96,65,0,63,58,76],
[77,70,63,109,81,67,0,61,51],
[65,63,76,76,77,72,69,0,82],
[74,49,58,72,65,54,79,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,64,81,58,61,63,68,79],
[64,0,65,60,66,73,69,68,62],
[66,65,0,75,56,61,57,69,57],
[49,70,55,0,45,61,52,68,64],
[72,64,74,85,0,74,64,73,80],
[69,57,69,69,56,0,60,74,70],
[67,61,73,78,66,70,0,68,71],
[62,62,61,62,57,56,62,0,48],
[51,68,73,66,50,60,59,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,63,71,67,64,66,72,61],
[71,0,70,65,73,64,62,58,62],
[67,60,0,58,70,67,69,69,63],
[59,65,72,0,61,68,64,62,66],
[63,57,60,69,0,69,74,65,72],
[66,66,63,62,61,0,64,52,64],
[64,68,61,66,56,66,0,61,56],
[58,72,61,68,65,78,69,0,69],
[69,68,67,64,58,66,74,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,69,69,73,61,68,73,60],
[60,0,59,62,71,62,61,69,57],
[61,71,0,60,70,59,67,68,61],
[61,68,70,0,67,60,73,62,62],
[57,59,60,63,0,51,59,67,51],
[69,68,71,70,79,0,68,76,65],
[62,69,63,57,71,62,0,63,66],
[57,61,62,68,63,54,67,0,68],
[70,73,69,68,79,65,64,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,73,63,69,68,70,74,56],
[64,0,72,62,61,62,67,65,53],
[57,58,0,68,66,57,60,64,48],
[67,68,62,0,67,65,64,70,55],
[61,69,64,63,0,64,70,76,65],
[62,68,73,65,66,0,64,71,61],
[60,63,70,66,60,66,0,67,57],
[56,65,66,60,54,59,63,0,55],
[74,77,82,75,65,69,73,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,68,61,57,53,62,62,58],
[67,0,67,62,66,64,72,67,71],
[62,63,0,63,56,65,64,70,62],
[69,68,67,0,67,56,62,65,69],
[73,64,74,63,0,70,70,74,68],
[77,66,65,74,60,0,66,70,66],
[68,58,66,68,60,64,0,65,61],
[68,63,60,65,56,60,65,0,57],
[72,59,68,61,62,64,69,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,64,74,76,78,75,83,79],
[59,0,64,63,64,72,72,66,71],
[66,66,0,67,68,69,62,67,66],
[56,67,63,0,70,71,71,74,72],
[54,66,62,60,0,57,57,66,64],
[52,58,61,59,73,0,61,70,66],
[55,58,68,59,73,69,0,62,64],
[47,64,63,56,64,60,68,0,60],
[51,59,64,58,66,64,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,67,57,77,78,70,59,71],
[61,0,56,65,82,67,75,66,64],
[63,74,0,70,72,71,72,75,75],
[73,65,60,0,72,67,67,61,64],
[53,48,58,58,0,66,62,59,59],
[52,63,59,63,64,0,55,54,63],
[60,55,58,63,68,75,0,73,69],
[71,64,55,69,71,76,57,0,72],
[59,66,55,66,71,67,61,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,62,65,55,51,58,52,57],
[76,0,60,67,69,63,69,52,62],
[68,70,0,75,69,63,71,70,68],
[65,63,55,0,75,63,83,61,50],
[75,61,61,55,0,58,68,56,54],
[79,67,67,67,72,0,79,60,51],
[72,61,59,47,62,51,0,67,58],
[78,78,60,69,74,70,63,0,65],
[73,68,62,80,76,79,72,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,74,56,63,78,65,68,68],
[58,0,65,59,63,79,61,70,73],
[56,65,0,54,59,60,54,59,58],
[74,71,76,0,70,65,65,68,70],
[67,67,71,60,0,67,63,71,62],
[52,51,70,65,63,0,61,60,58],
[65,69,76,65,67,69,0,67,65],
[62,60,71,62,59,70,63,0,60],
[62,57,72,60,68,72,65,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,66,60,60,64,62,62,63],
[57,0,60,58,65,68,64,52,69],
[64,70,0,72,71,74,71,71,74],
[70,72,58,0,71,60,61,71,71],
[70,65,59,59,0,62,55,56,67],
[66,62,56,70,68,0,61,59,72],
[68,66,59,69,75,69,0,64,75],
[68,78,59,59,74,71,66,0,67],
[67,61,56,59,63,58,55,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,50,58,60,57,58,75,57],
[70,0,53,77,53,58,64,68,61],
[80,77,0,73,55,54,66,80,69],
[72,53,57,0,59,47,56,55,61],
[70,77,75,71,0,69,63,66,52],
[73,72,76,83,61,0,62,74,63],
[72,66,64,74,67,68,0,82,62],
[55,62,50,75,64,56,48,0,50],
[73,69,61,69,78,67,68,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,63,59,47,48,56,67,67],
[64,0,63,68,72,60,64,73,68],
[67,67,0,73,76,58,79,81,82],
[71,62,57,0,65,62,60,83,69],
[83,58,54,65,0,67,66,69,69],
[82,70,72,68,63,0,65,76,87],
[74,66,51,70,64,65,0,72,70],
[63,57,49,47,61,54,58,0,63],
[63,62,48,61,61,43,60,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,66,61,60,56,65,65,61],
[69,0,50,58,48,55,54,72,63],
[64,80,0,68,60,65,53,70,64],
[69,72,62,0,54,56,58,71,62],
[70,82,70,76,0,55,72,84,76],
[74,75,65,74,75,0,69,80,67],
[65,76,77,72,58,61,0,77,67],
[65,58,60,59,46,50,53,0,58],
[69,67,66,68,54,63,63,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,61,67,61,66,58,50,71],
[72,0,64,76,84,82,72,48,70],
[69,66,0,67,73,63,59,69,68],
[63,54,63,0,74,61,47,56,47],
[69,46,57,56,0,77,62,44,62],
[64,48,67,69,53,0,61,70,45],
[72,58,71,83,68,69,0,48,71],
[80,82,61,74,86,60,82,0,59],
[59,60,62,83,68,85,59,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,63,60,56,57,62,67,66],
[64,0,58,70,60,59,68,70,69],
[67,72,0,63,65,70,70,75,73],
[70,60,67,0,64,67,65,63,68],
[74,70,65,66,0,74,68,80,69],
[73,71,60,63,56,0,71,68,68],
[68,62,60,65,62,59,0,71,60],
[63,60,55,67,50,62,59,0,57],
[64,61,57,62,61,62,70,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,63,59,55,64,65,59,64],
[67,0,70,59,55,66,67,60,66],
[67,60,0,58,56,66,66,57,71],
[71,71,72,0,65,66,67,69,64],
[75,75,74,65,0,73,68,69,69],
[66,64,64,64,57,0,63,65,56],
[65,63,64,63,62,67,0,65,70],
[71,70,73,61,61,65,65,0,67],
[66,64,59,66,61,74,60,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,72,64,73,73,80,63,75],
[60,0,63,67,66,70,70,67,64],
[58,67,0,60,63,58,76,58,64],
[66,63,70,0,65,66,77,60,65],
[57,64,67,65,0,60,77,55,69],
[57,60,72,64,70,0,72,61,68],
[50,60,54,53,53,58,0,50,48],
[67,63,72,70,75,69,80,0,74],
[55,66,66,65,61,62,82,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,78,75,62,68,46,63,68],
[57,0,48,59,64,55,58,56,70],
[52,82,0,71,73,67,41,69,75],
[55,71,59,0,74,66,37,52,61],
[68,66,57,56,0,59,54,42,72],
[62,75,63,64,71,0,45,42,70],
[84,72,89,93,76,85,0,65,84],
[67,74,61,78,88,88,65,0,87],
[62,60,55,69,58,60,46,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,68,74,58,70,65,70],
[68,0,56,63,81,65,62,60,67],
[67,74,0,65,78,75,75,75,63],
[62,67,65,0,66,67,76,72,76],
[56,49,52,64,0,53,62,54,55],
[72,65,55,63,77,0,74,71,62],
[60,68,55,54,68,56,0,72,59],
[65,70,55,58,76,59,58,0,66],
[60,63,67,54,75,68,71,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,59,64,55,70,71,64,73],
[58,0,61,61,54,47,69,71,71],
[71,69,0,59,63,61,75,63,70],
[66,69,71,0,64,53,69,68,67],
[75,76,67,66,0,62,72,72,74],
[60,83,69,77,68,0,71,73,79],
[59,61,55,61,58,59,0,63,72],
[66,59,67,62,58,57,67,0,68],
[57,59,60,63,56,51,58,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,45,59,76,59,64,64,59],
[85,0,65,63,94,62,66,81,53],
[85,65,0,74,78,81,68,69,65],
[71,67,56,0,82,65,55,85,64],
[54,36,52,48,0,53,24,52,38],
[71,68,49,65,77,0,44,73,60],
[66,64,62,75,106,86,0,69,64],
[66,49,61,45,78,57,61,0,52],
[71,77,65,66,92,70,66,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,74,83,86,65,80,79,85],
[64,0,65,75,67,65,74,84,73],
[56,65,0,66,73,63,69,80,70],
[47,55,64,0,68,57,72,74,78],
[44,63,57,62,0,60,63,73,69],
[65,65,67,73,70,0,78,75,73],
[50,56,61,58,67,52,0,76,62],
[51,46,50,56,57,55,54,0,63],
[45,57,60,52,61,57,68,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,75,79,78,78,68,63,78],
[59,0,52,57,64,65,58,54,68],
[55,78,0,82,71,69,59,60,76],
[51,73,48,0,58,69,55,51,65],
[52,66,59,72,0,62,60,52,50],
[52,65,61,61,68,0,61,48,63],
[62,72,71,75,70,69,0,65,62],
[67,76,70,79,78,82,65,0,66],
[52,62,54,65,80,67,68,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,61,68,68,76,70,62,68],
[60,0,68,65,62,62,61,53,58],
[69,62,0,68,63,68,65,58,60],
[62,65,62,0,66,72,68,57,67],
[62,68,67,64,0,69,69,62,64],
[54,68,62,58,61,0,60,53,57],
[60,69,65,62,61,70,0,61,61],
[68,77,72,73,68,77,69,0,65],
[62,72,70,63,66,73,69,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,64,55,57,56,60,49,56],
[64,0,65,57,68,56,74,54,70],
[66,65,0,73,59,67,74,60,67],
[75,73,57,0,62,71,66,70,71],
[73,62,71,68,0,65,68,64,68],
[74,74,63,59,65,0,63,64,65],
[70,56,56,64,62,67,0,55,77],
[81,76,70,60,66,66,75,0,66],
[74,60,63,59,62,65,53,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,61,66,65,58,59,63,58],
[67,0,69,67,63,53,61,68,61],
[69,61,0,76,65,64,56,68,57],
[64,63,54,0,56,54,53,58,53],
[65,67,65,74,0,65,61,69,65],
[72,77,66,76,65,0,66,72,64],
[71,69,74,77,69,64,0,73,60],
[67,62,62,72,61,58,57,0,59],
[72,69,73,77,65,66,70,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,70,88,63,87,82,80,73],
[45,0,59,74,61,70,58,69,59],
[60,71,0,75,83,82,81,89,69],
[42,56,55,0,66,66,71,82,59],
[67,69,47,64,0,71,74,67,64],
[43,60,48,64,59,0,49,54,49],
[48,72,49,59,56,81,0,70,68],
[50,61,41,48,63,76,60,0,64],
[57,71,61,71,66,81,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,57,51,62,59,54,41,55],
[81,0,67,82,74,66,81,64,61],
[73,63,0,72,70,76,71,65,82],
[79,48,58,0,78,61,47,34,70],
[68,56,60,52,0,76,53,34,51],
[71,64,54,69,54,0,60,44,70],
[76,49,59,83,77,70,0,55,74],
[89,66,65,96,96,86,75,0,92],
[75,69,48,60,79,60,56,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,71,61,72,61,57,63,63],
[71,0,64,71,74,64,64,68,57],
[59,66,0,70,78,70,61,65,64],
[69,59,60,0,72,59,53,57,56],
[58,56,52,58,0,63,46,63,52],
[69,66,60,71,67,0,62,53,62],
[73,66,69,77,84,68,0,58,64],
[67,62,65,73,67,77,72,0,74],
[67,73,66,74,78,68,66,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,65,0,65,130,130,65],
[65,0,65,65,65,65,65,65,130],
[65,65,0,65,0,65,65,130,130],
[65,65,65,0,65,65,65,65,65],
[130,65,130,65,0,130,130,130,130],
[65,65,65,65,0,0,65,130,65],
[0,65,65,65,0,65,0,130,65],
[0,65,0,65,0,0,0,0,65],
[65,0,0,65,0,65,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,58,84,81,106,81,106,82],
[12,0,36,73,47,61,60,83,82],
[72,94,0,84,47,59,70,95,95],
[46,57,46,0,80,70,70,82,93],
[49,83,83,50,0,84,59,83,82],
[24,69,71,60,46,0,70,71,71],
[49,70,60,60,71,60,0,108,95],
[24,47,35,48,47,59,22,0,60],
[48,48,35,37,48,59,35,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,77,60,61,58,59,64,64],
[69,0,76,61,68,63,66,65,69],
[53,54,0,57,58,56,58,60,56],
[70,69,73,0,66,57,68,66,61],
[69,62,72,64,0,58,62,60,58],
[72,67,74,73,72,0,74,71,62],
[71,64,72,62,68,56,0,69,60],
[66,65,70,64,70,59,61,0,64],
[66,61,74,69,72,68,70,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,76,55,43,87,43,74,64],
[46,0,45,35,23,67,66,66,44],
[54,85,0,66,54,52,76,63,53],
[75,95,64,0,66,63,53,63,52],
[87,107,76,64,0,84,86,74,73],
[43,63,78,67,46,0,66,87,54],
[87,64,54,77,44,64,0,65,53],
[56,64,67,67,56,43,65,0,64],
[66,86,77,78,57,76,77,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,66,57,68,57,70,66,67],
[52,0,55,54,51,51,54,49,60],
[64,75,0,60,66,59,64,61,64],
[73,76,70,0,67,59,66,57,66],
[62,79,64,63,0,63,63,51,66],
[73,79,71,71,67,0,58,66,64],
[60,76,66,64,67,72,0,61,64],
[64,81,69,73,79,64,69,0,70],
[63,70,66,64,64,66,66,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,47,71,61,52,57,56,55],
[76,0,75,84,58,60,64,58,60],
[83,55,0,74,62,61,56,55,58],
[59,46,56,0,68,53,48,58,51],
[69,72,68,62,0,53,57,56,54],
[78,70,69,77,77,0,61,65,68],
[73,66,74,82,73,69,0,62,51],
[74,72,75,72,74,65,68,0,53],
[75,70,72,79,76,62,79,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,63,62,69,69,73,67,72],
[61,0,63,66,70,68,71,63,63],
[67,67,0,63,63,67,73,70,74],
[68,64,67,0,66,74,63,65,64],
[61,60,67,64,0,72,71,62,71],
[61,62,63,56,58,0,65,66,63],
[57,59,57,67,59,65,0,61,58],
[63,67,60,65,68,64,69,0,66],
[58,67,56,66,59,67,72,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,73,68,78,83,54,45,70],
[38,0,73,47,59,67,50,59,52],
[57,57,0,72,70,58,81,45,44],
[62,83,58,0,77,85,68,36,57],
[52,71,60,53,0,72,81,60,52],
[47,63,72,45,58,0,54,51,63],
[76,80,49,62,49,76,0,55,73],
[85,71,85,94,70,79,75,0,57],
[60,78,86,73,78,67,57,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,62,73,68,73,59,74,77],
[56,0,68,69,68,64,65,64,67],
[68,62,0,74,64,74,70,72,63],
[57,61,56,0,59,66,69,68,62],
[62,62,66,71,0,61,68,63,67],
[57,66,56,64,69,0,70,64,66],
[71,65,60,61,62,60,0,73,60],
[56,66,58,62,67,66,57,0,62],
[53,63,67,68,63,64,70,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,62,56,63,63,55,55],
[61,0,69,66,59,63,62,52,58],
[65,61,0,59,66,70,57,57,57],
[68,64,71,0,70,68,72,66,59],
[74,71,64,60,0,66,64,61,63],
[67,67,60,62,64,0,53,59,64],
[67,68,73,58,66,77,0,65,61],
[75,78,73,64,69,71,65,0,67],
[75,72,73,71,67,66,69,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,59,66,75,66,67,72,66],
[66,0,66,60,67,65,71,71,62],
[71,64,0,65,67,65,71,71,73],
[64,70,65,0,61,66,68,73,69],
[55,63,63,69,0,69,63,65,61],
[64,65,65,64,61,0,73,68,76],
[63,59,59,62,67,57,0,67,62],
[58,59,59,57,65,62,63,0,69],
[64,68,57,61,69,54,68,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,75,68,74,66,62,73,67],
[49,0,72,66,74,62,67,63,70],
[55,58,0,53,68,59,58,70,71],
[62,64,77,0,73,65,63,66,66],
[56,56,62,57,0,56,55,57,61],
[64,68,71,65,74,0,66,70,69],
[68,63,72,67,75,64,0,62,69],
[57,67,60,64,73,60,68,0,62],
[63,60,59,64,69,61,61,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,64,62,67,71,57,64,69],
[60,0,60,61,59,70,48,64,58],
[66,70,0,72,66,70,74,69,55],
[68,69,58,0,76,75,63,77,71],
[63,71,64,54,0,64,50,58,54],
[59,60,60,55,66,0,51,53,66],
[73,82,56,67,80,79,0,67,74],
[66,66,61,53,72,77,63,0,71],
[61,72,75,59,76,64,56,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,65,68,63,65,66,77,67],
[62,0,51,64,57,61,57,65,63],
[65,79,0,75,66,65,71,75,71],
[62,66,55,0,53,51,57,70,67],
[67,73,64,77,0,66,60,72,73],
[65,69,65,79,64,0,68,70,72],
[64,73,59,73,70,62,0,73,72],
[53,65,55,60,58,60,57,0,70],
[63,67,59,63,57,58,58,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,60,60,56,65,55,36,43],
[61,0,60,55,59,63,54,46,49],
[70,70,0,56,76,73,70,58,72],
[70,75,74,0,69,78,61,49,55],
[74,71,54,61,0,65,61,58,50],
[65,67,57,52,65,0,49,54,43],
[75,76,60,69,69,81,0,67,67],
[94,84,72,81,72,76,63,0,60],
[87,81,58,75,80,87,63,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,77,66,77,62,66,72,70],
[67,0,79,65,74,75,71,76,72],
[53,51,0,54,55,57,60,58,59],
[64,65,76,0,76,65,83,72,56],
[53,56,75,54,0,59,64,67,64],
[68,55,73,65,71,0,73,76,67],
[64,59,70,47,66,57,0,67,62],
[58,54,72,58,63,54,63,0,59],
[60,58,71,74,66,63,68,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,60,65,50,58,76,70],
[61,0,60,60,51,63,63,74,61],
[59,70,0,62,67,53,57,70,70],
[70,70,68,0,60,56,55,71,69],
[65,79,63,70,0,56,67,81,80],
[80,67,77,74,74,0,64,78,79],
[72,67,73,75,63,66,0,76,74],
[54,56,60,59,49,52,54,0,66],
[60,69,60,61,50,51,56,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,55,59,74,63,71,43,61],
[70,0,74,64,86,69,82,63,70],
[75,56,0,59,68,62,66,54,71],
[71,66,71,0,74,69,70,64,58],
[56,44,62,56,0,55,59,49,63],
[67,61,68,61,75,0,67,58,65],
[59,48,64,60,71,63,0,67,60],
[87,67,76,66,81,72,63,0,64],
[69,60,59,72,67,65,70,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,68,72,66,71,80,64,71],
[62,0,65,78,60,66,72,74,66],
[62,65,0,74,69,66,76,71,70],
[58,52,56,0,59,61,76,55,70],
[64,70,61,71,0,65,76,71,69],
[59,64,64,69,65,0,75,72,68],
[50,58,54,54,54,55,0,55,55],
[66,56,59,75,59,58,75,0,72],
[59,64,60,60,61,62,75,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,69,70,65,65,66,70,73],
[65,0,63,75,60,73,69,81,73],
[61,67,0,67,61,67,57,85,68],
[60,55,63,0,56,69,50,70,66],
[65,70,69,74,0,70,64,74,76],
[65,57,63,61,60,0,57,74,63],
[64,61,73,80,66,73,0,72,74],
[60,49,45,60,56,56,58,0,65],
[57,57,62,64,54,67,56,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,71,57,60,65,66,60,67],
[63,0,68,58,53,62,67,56,61],
[59,62,0,62,61,62,64,58,59],
[73,72,68,0,58,68,65,71,72],
[70,77,69,72,0,64,70,73,65],
[65,68,68,62,66,0,64,54,61],
[64,63,66,65,60,66,0,60,64],
[70,74,72,59,57,76,70,0,71],
[63,69,71,58,65,69,66,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,64,64,64,59,67,56,65],
[72,0,66,61,78,78,75,67,71],
[66,64,0,63,66,70,79,61,65],
[66,69,67,0,68,69,70,68,61],
[66,52,64,62,0,66,67,58,62],
[71,52,60,61,64,0,67,61,61],
[63,55,51,60,63,63,0,58,57],
[74,63,69,62,72,69,72,0,73],
[65,59,65,69,68,69,73,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,78,73,60,74,69,73,78],
[65,0,68,75,71,74,74,73,71],
[52,62,0,74,71,66,75,76,77],
[57,55,56,0,50,60,61,61,65],
[70,59,59,80,0,76,74,74,76],
[56,56,64,70,54,0,63,77,71],
[61,56,55,69,56,67,0,66,61],
[57,57,54,69,56,53,64,0,63],
[52,59,53,65,54,59,69,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,58,67,41,63,62,69,50],
[81,0,58,79,63,57,72,79,64],
[72,72,0,80,54,59,84,63,65],
[63,51,50,0,51,58,79,54,56],
[89,67,76,79,0,74,83,65,65],
[67,73,71,72,56,0,81,71,65],
[68,58,46,51,47,49,0,63,55],
[61,51,67,76,65,59,67,0,47],
[80,66,65,74,65,65,75,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,72,74,80,74,76,79],
[60,0,60,60,74,62,67,66,75],
[65,70,0,68,60,67,61,86,66],
[58,70,62,0,56,78,70,69,75],
[56,56,70,74,0,65,49,72,70],
[50,68,63,52,65,0,66,62,83],
[56,63,69,60,81,64,0,69,71],
[54,64,44,61,58,68,61,0,55],
[51,55,64,55,60,47,59,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,81,72,64,64,56,55,72],
[58,0,71,75,76,70,63,52,81],
[49,59,0,73,60,53,78,35,62],
[58,55,57,0,84,39,63,36,64],
[66,54,70,46,0,78,54,37,55],
[66,60,77,91,52,0,63,54,69],
[74,67,52,67,76,67,0,66,69],
[75,78,95,94,93,76,64,0,73],
[58,49,68,66,75,61,61,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,62,82,75,54,69,63,81],
[68,0,67,64,82,86,66,70,81],
[68,63,0,72,82,66,65,70,77],
[48,66,58,0,68,52,65,60,64],
[55,48,48,62,0,59,69,50,65],
[76,44,64,78,71,0,68,78,80],
[61,64,65,65,61,62,0,64,60],
[67,60,60,70,80,52,66,0,69],
[49,49,53,66,65,50,70,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,70,58,66,63,57,67],
[63,0,65,69,67,71,59,57,68],
[60,65,0,65,59,60,65,64,66],
[60,61,65,0,54,66,63,60,62],
[72,63,71,76,0,72,61,70,73],
[64,59,70,64,58,0,63,59,69],
[67,71,65,67,69,67,0,62,65],
[73,73,66,70,60,71,68,0,75],
[63,62,64,68,57,61,65,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,69,72,84,78,68,61,71],
[51,0,52,58,69,63,59,57,62],
[61,78,0,67,80,76,74,68,70],
[58,72,63,0,80,73,74,66,71],
[46,61,50,50,0,63,66,51,63],
[52,67,54,57,67,0,68,61,66],
[62,71,56,56,64,62,0,57,69],
[69,73,62,64,79,69,73,0,72],
[59,68,60,59,67,64,61,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,68,92,66,71,84,78,72],
[65,0,64,80,74,83,82,68,77],
[62,66,0,96,84,77,70,73,68],
[38,50,34,0,41,64,66,56,75],
[64,56,46,89,0,71,75,73,84],
[59,47,53,66,59,0,74,58,68],
[46,48,60,64,55,56,0,58,66],
[52,62,57,74,57,72,72,0,79],
[58,53,62,55,46,62,64,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,63,63,63,58,55,64,70],
[65,0,59,61,67,66,66,66,64],
[67,71,0,60,69,67,68,63,65],
[67,69,70,0,67,67,65,70,68],
[67,63,61,63,0,68,57,64,61],
[72,64,63,63,62,0,62,58,63],
[75,64,62,65,73,68,0,62,79],
[66,64,67,60,66,72,68,0,65],
[60,66,65,62,69,67,51,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,69,57,77,59,66,70,75],
[68,0,54,58,61,53,64,71,70],
[61,76,0,62,68,71,66,69,71],
[73,72,68,0,79,59,71,78,72],
[53,69,62,51,0,50,61,70,59],
[71,77,59,71,80,0,71,77,72],
[64,66,64,59,69,59,0,70,70],
[60,59,61,52,60,53,60,0,63],
[55,60,59,58,71,58,60,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,65,62,64,63,64,75,62],
[70,0,72,70,73,75,63,71,74],
[65,58,0,72,71,67,61,67,68],
[68,60,58,0,68,67,62,71,61],
[66,57,59,62,0,63,64,68,61],
[67,55,63,63,67,0,61,62,59],
[66,67,69,68,66,69,0,71,60],
[55,59,63,59,62,68,59,0,55],
[68,56,62,69,69,71,70,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,81,61,68,69,70,68],
[66,0,49,57,44,67,52,48,58],
[64,81,0,70,64,69,65,51,77],
[49,73,60,0,56,47,79,50,60],
[69,86,66,74,0,60,72,66,79],
[62,63,61,83,70,0,72,65,74],
[61,78,65,51,58,58,0,56,57],
[60,82,79,80,64,65,74,0,80],
[62,72,53,70,51,56,73,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,56,76,63,68,63,60,61],
[61,0,57,69,61,66,60,57,56],
[74,73,0,79,70,75,72,65,67],
[54,61,51,0,55,60,63,59,54],
[67,69,60,75,0,68,62,59,59],
[62,64,55,70,62,0,67,53,54],
[67,70,58,67,68,63,0,57,58],
[70,73,65,71,71,77,73,0,72],
[69,74,63,76,71,76,72,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,76,66,76,82,70,59,71],
[64,0,67,67,74,72,67,71,62],
[54,63,0,57,75,76,65,63,72],
[64,63,73,0,63,78,69,67,65],
[54,56,55,67,0,69,60,63,71],
[48,58,54,52,61,0,57,56,59],
[60,63,65,61,70,73,0,57,56],
[71,59,67,63,67,74,73,0,64],
[59,68,58,65,59,71,74,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,52,57,65,63,56,57,64],
[68,0,67,72,71,72,56,72,71],
[78,63,0,64,75,69,70,69,66],
[73,58,66,0,74,63,60,60,66],
[65,59,55,56,0,61,48,48,55],
[67,58,61,67,69,0,57,66,66],
[74,74,60,70,82,73,0,70,74],
[73,58,61,70,82,64,60,0,72],
[66,59,64,64,75,64,56,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,65,66,73,56,64,67,65],
[54,0,69,61,64,52,61,58,56],
[65,61,0,55,59,55,60,60,62],
[64,69,75,0,74,61,69,67,68],
[57,66,71,56,0,55,61,67,69],
[74,78,75,69,75,0,73,70,64],
[66,69,70,61,69,57,0,68,66],
[63,72,70,63,63,60,62,0,70],
[65,74,68,62,61,66,64,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,86,65,78,76,69,76,71],
[54,0,68,49,69,59,58,59,68],
[44,62,0,56,57,59,60,67,52],
[65,81,74,0,80,71,68,65,73],
[52,61,73,50,0,64,66,60,68],
[54,71,71,59,66,0,64,63,69],
[61,72,70,62,64,66,0,62,64],
[54,71,63,65,70,67,68,0,71],
[59,62,78,57,62,61,66,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,64,63,70,66,70,58,64],
[68,0,69,65,77,75,79,70,64],
[66,61,0,67,79,60,76,68,64],
[67,65,63,0,68,68,72,64,64],
[60,53,51,62,0,65,68,60,58],
[64,55,70,62,65,0,74,60,69],
[60,51,54,58,62,56,0,57,60],
[72,60,62,66,70,70,73,0,68],
[66,66,66,66,72,61,70,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,65,78,58,70,69,69,71],
[54,0,63,64,48,60,67,57,63],
[65,67,0,84,64,63,55,65,69],
[52,66,46,0,60,63,61,60,59],
[72,82,66,70,0,71,67,65,60],
[60,70,67,67,59,0,60,67,66],
[61,63,75,69,63,70,0,61,76],
[61,73,65,70,65,63,69,0,72],
[59,67,61,71,70,64,54,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,67,60,72,61,74,63,70],
[64,0,61,66,69,68,68,67,60],
[63,69,0,51,65,64,69,69,60],
[70,64,79,0,79,77,68,72,71],
[58,61,65,51,0,60,67,58,63],
[69,62,66,53,70,0,66,68,66],
[56,62,61,62,63,64,0,54,62],
[67,63,61,58,72,62,76,0,72],
[60,70,70,59,67,64,68,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,64,32,32,32,0,64,32],
[98,0,32,32,32,32,65,65,65],
[66,98,0,66,98,0,33,97,33],
[98,98,64,0,98,0,33,97,33],
[98,98,32,32,0,0,65,97,65],
[98,98,130,130,130,0,65,97,130],
[130,65,97,97,65,65,0,97,97],
[66,65,33,33,33,33,33,0,33],
[98,65,97,97,65,0,33,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,55,65,62,60,63,71,62],
[60,0,45,60,55,51,59,70,62],
[75,85,0,70,60,66,71,78,72],
[65,70,60,0,61,60,73,72,75],
[68,75,70,69,0,60,70,79,73],
[70,79,64,70,70,0,75,77,83],
[67,71,59,57,60,55,0,68,63],
[59,60,52,58,51,53,62,0,61],
[68,68,58,55,57,47,67,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,62,64,74,62,60,60,65],
[68,0,59,64,77,71,61,61,62],
[68,71,0,70,71,74,65,67,73],
[66,66,60,0,68,61,57,60,55],
[56,53,59,62,0,58,50,63,66],
[68,59,56,69,72,0,60,71,63],
[70,69,65,73,80,70,0,66,70],
[70,69,63,70,67,59,64,0,62],
[65,68,57,75,64,67,60,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,69,73,66,68,69,68,70],
[65,0,62,73,65,60,66,65,67],
[61,68,0,71,65,64,62,53,65],
[57,57,59,0,64,60,68,53,64],
[64,65,65,66,0,63,67,58,65],
[62,70,66,70,67,0,60,60,65],
[61,64,68,62,63,70,0,61,69],
[62,65,77,77,72,70,69,0,70],
[60,63,65,66,65,65,61,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,64,69,74,67,65,78,68],
[51,0,45,54,67,63,62,65,61],
[66,85,0,57,69,56,59,72,56],
[61,76,73,0,76,74,63,71,72],
[56,63,61,54,0,51,59,69,67],
[63,67,74,56,79,0,71,79,67],
[65,68,71,67,71,59,0,77,60],
[52,65,58,59,61,51,53,0,53],
[62,69,74,58,63,63,70,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,65,80,90,90,61,72,70],
[63,0,58,56,47,47,55,71,66],
[65,72,0,90,69,77,56,63,84],
[50,74,40,0,57,66,61,68,62],
[40,83,61,73,0,81,71,61,71],
[40,83,53,64,49,0,60,71,77],
[69,75,74,69,59,70,0,77,82],
[58,59,67,62,69,59,53,0,78],
[60,64,46,68,59,53,48,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,76,39,65,87,55,30,46],
[75,0,84,60,98,73,98,63,65],
[54,46,0,31,79,44,48,44,44],
[91,70,99,0,80,90,78,56,59],
[65,32,51,50,0,65,55,65,30],
[43,57,86,40,65,0,67,31,30],
[75,32,82,52,75,63,0,65,43],
[100,67,86,74,65,99,65,0,44],
[84,65,86,71,100,100,87,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,75,64,79,69,84,65,80],
[65,0,70,68,67,70,75,69,69],
[55,60,0,55,61,62,68,60,79],
[66,62,75,0,66,68,78,64,71],
[51,63,69,64,0,64,74,61,74],
[61,60,68,62,66,0,75,60,73],
[46,55,62,52,56,55,0,57,66],
[65,61,70,66,69,70,73,0,73],
[50,61,51,59,56,57,64,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,75,79,59,47,74,72,89],
[71,0,84,78,72,67,64,72,77],
[55,46,0,45,62,60,67,62,62],
[51,52,85,0,59,61,77,67,71],
[71,58,68,71,0,72,72,77,74],
[83,63,70,69,58,0,78,69,81],
[56,66,63,53,58,52,0,74,82],
[58,58,68,63,53,61,56,0,57],
[41,53,68,59,56,49,48,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,64,65,34,65,49,65,64],
[81,0,98,98,99,83,64,65,65],
[66,32,0,81,32,84,47,81,97],
[65,32,49,0,50,65,32,50,47],
[96,31,98,80,0,114,49,81,80],
[65,47,46,65,16,0,31,81,64],
[81,66,83,98,81,99,0,66,65],
[65,65,49,80,49,49,64,0,49],
[66,65,33,83,50,66,65,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,51,53,56,72,74,70,66],
[77,0,64,65,71,81,87,66,74],
[79,66,0,67,51,80,74,66,68],
[77,65,63,0,75,85,85,82,81],
[74,59,79,55,0,77,77,68,77],
[58,49,50,45,53,0,78,48,47],
[56,43,56,45,53,52,0,50,47],
[60,64,64,48,62,82,80,0,75],
[64,56,62,49,53,83,83,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,68,70,63,70,91,72,73],
[57,0,52,60,63,64,62,64,68],
[62,78,0,77,72,86,99,83,72],
[60,70,53,0,61,69,72,65,70],
[67,67,58,69,0,68,74,78,74],
[60,66,44,61,62,0,72,74,57],
[39,68,31,58,56,58,0,60,70],
[58,66,47,65,52,56,70,0,56],
[57,62,58,60,56,73,60,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,61,66,70,54,60,72,67],
[74,0,60,68,71,72,66,69,62],
[69,70,0,68,74,61,73,80,73],
[64,62,62,0,64,58,58,67,59],
[60,59,56,66,0,57,63,68,62],
[76,58,69,72,73,0,65,79,70],
[70,64,57,72,67,65,0,70,66],
[58,61,50,63,62,51,60,0,56],
[63,68,57,71,68,60,64,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,74,78,77,70,65,77,80],
[56,0,74,58,58,61,49,70,66],
[56,56,0,74,58,58,64,81,68],
[52,72,56,0,59,69,51,65,69],
[53,72,72,71,0,70,67,90,78],
[60,69,72,61,60,0,62,66,73],
[65,81,66,79,63,68,0,74,76],
[53,60,49,65,40,64,56,0,69],
[50,64,62,61,52,57,54,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,80,64,80,70,62,65,70],
[64,0,77,56,65,69,63,65,74],
[50,53,0,58,60,54,56,54,66],
[66,74,72,0,73,71,61,61,68],
[50,65,70,57,0,69,68,52,66],
[60,61,76,59,61,0,63,58,63],
[68,67,74,69,62,67,0,66,66],
[65,65,76,69,78,72,64,0,70],
[60,56,64,62,64,67,64,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,71,60,66,69,79,71,68],
[69,0,69,57,60,76,76,67,69],
[59,61,0,61,55,65,71,60,75],
[70,73,69,0,61,72,79,73,68],
[64,70,75,69,0,78,88,64,77],
[61,54,65,58,52,0,72,65,66],
[51,54,59,51,42,58,0,55,56],
[59,63,70,57,66,65,75,0,77],
[62,61,55,62,53,64,74,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,62,64,62,62,58,80],
[66,0,71,66,56,67,72,59,71],
[62,59,0,60,61,57,66,62,66],
[68,64,70,0,67,60,62,64,78],
[66,74,69,63,0,69,71,65,79],
[68,63,73,70,61,0,69,69,76],
[68,58,64,68,59,61,0,63,66],
[72,71,68,66,65,61,67,0,77],
[50,59,64,52,51,54,64,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,64,64,65,64,65,61,61],
[71,0,66,66,64,71,68,63,68],
[66,64,0,60,74,70,65,66,68],
[66,64,70,0,69,69,67,70,58],
[65,66,56,61,0,65,57,67,66],
[66,59,60,61,65,0,67,66,60],
[65,62,65,63,73,63,0,65,62],
[69,67,64,60,63,64,65,0,58],
[69,62,62,72,64,70,68,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,60,68,53,62,56,56,53],
[69,0,60,68,62,65,70,74,75],
[70,70,0,67,63,64,64,69,66],
[62,62,63,0,60,62,63,67,60],
[77,68,67,70,0,71,70,70,63],
[68,65,66,68,59,0,65,65,53],
[74,60,66,67,60,65,0,67,66],
[74,56,61,63,60,65,63,0,67],
[77,55,64,70,67,77,64,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,64,59,69,69,57,69,81],
[53,0,52,53,57,57,56,66,65],
[66,78,0,61,67,66,67,64,84],
[71,77,69,0,74,69,64,68,80],
[61,73,63,56,0,63,66,63,73],
[61,73,64,61,67,0,57,64,66],
[73,74,63,66,64,73,0,50,75],
[61,64,66,62,67,66,80,0,75],
[49,65,46,50,57,64,55,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,72,66,69,68,75,65,58],
[54,0,62,55,59,54,61,61,58],
[58,68,0,69,63,67,64,67,63],
[64,75,61,0,59,57,67,66,67],
[61,71,67,71,0,59,71,69,64],
[62,76,63,73,71,0,72,69,62],
[55,69,66,63,59,58,0,63,60],
[65,69,63,64,61,61,67,0,62],
[72,72,67,63,66,68,70,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,65,130,130,65,0,65],
[65,0,0,0,130,65,0,0,0],
[65,130,0,0,130,65,65,0,65],
[65,130,130,0,130,65,130,65,130],
[0,0,0,0,0,65,0,0,0],
[0,65,65,65,65,0,65,0,65],
[65,130,65,0,130,65,0,0,0],
[130,130,130,65,130,130,130,0,130],
[65,130,65,0,130,65,130,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,62,64,74,68,66,66],
[65,0,57,60,62,70,66,67,66],
[65,73,0,69,63,68,68,67,63],
[68,70,61,0,57,64,68,61,62],
[66,68,67,73,0,68,75,66,60],
[56,60,62,66,62,0,67,62,57],
[62,64,62,62,55,63,0,67,61],
[64,63,63,69,64,68,63,0,68],
[64,64,67,68,70,73,69,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,40,67,67,67,79,53,53],
[63,0,65,79,67,79,92,66,52],
[90,65,0,79,67,79,78,53,65],
[63,51,51,0,54,78,64,77,37],
[63,63,63,76,0,91,50,50,50],
[63,51,51,52,39,0,51,26,38],
[51,38,52,66,80,79,0,64,38],
[77,64,77,53,80,104,66,0,65],
[77,78,65,93,80,92,92,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,66,71,68,70,64,78,66],
[57,0,59,63,61,65,68,69,60],
[64,71,0,74,67,66,59,68,68],
[59,67,56,0,56,71,61,65,64],
[62,69,63,74,0,72,68,75,73],
[60,65,64,59,58,0,60,65,65],
[66,62,71,69,62,70,0,67,59],
[52,61,62,65,55,65,63,0,65],
[64,70,62,66,57,65,71,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,56,71,56,57,71,74,63],
[55,0,51,59,57,70,52,57,71],
[74,79,0,66,65,77,69,73,64],
[59,71,64,0,62,61,63,74,54],
[74,73,65,68,0,73,63,75,66],
[73,60,53,69,57,0,65,69,74],
[59,78,61,67,67,65,0,80,60],
[56,73,57,56,55,61,50,0,58],
[67,59,66,76,64,56,70,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,73,85,60,58,66,63,68],
[66,0,66,76,69,62,62,63,76],
[57,64,0,57,48,58,55,72,64],
[45,54,73,0,43,52,48,58,62],
[70,61,82,87,0,68,63,84,79],
[72,68,72,78,62,0,69,71,72],
[64,68,75,82,67,61,0,67,73],
[67,67,58,72,46,59,63,0,62],
[62,54,66,68,51,58,57,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,81,87,72,63,70,58,62],
[52,0,76,73,45,59,56,74,55],
[49,54,0,65,40,55,56,59,59],
[43,57,65,0,29,24,32,60,45],
[58,85,90,101,0,71,62,83,65],
[67,71,75,106,59,0,63,76,67],
[60,74,74,98,68,67,0,77,59],
[72,56,71,70,47,54,53,0,63],
[68,75,71,85,65,63,71,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,65,71,74,64,80,75,57],
[53,0,58,68,65,68,69,73,62],
[65,72,0,78,64,74,76,66,70],
[59,62,52,0,66,70,71,64,62],
[56,65,66,64,0,66,75,57,50],
[66,62,56,60,64,0,75,67,59],
[50,61,54,59,55,55,0,61,55],
[55,57,64,66,73,63,69,0,59],
[73,68,60,68,80,71,75,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,66,71,55,61,57,56,67],
[58,0,62,65,54,63,65,58,64],
[64,68,0,69,62,64,62,63,73],
[59,65,61,0,52,56,59,52,55],
[75,76,68,78,0,67,65,70,69],
[69,67,66,74,63,0,59,66,66],
[73,65,68,71,65,71,0,60,73],
[74,72,67,78,60,64,70,0,63],
[63,66,57,75,61,64,57,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,53,56,69,61,58,62,58],
[71,0,68,68,74,73,63,71,70],
[77,62,0,65,77,69,65,72,73],
[74,62,65,0,81,71,61,62,66],
[61,56,53,49,0,62,58,60,63],
[69,57,61,59,68,0,56,61,68],
[72,67,65,69,72,74,0,67,67],
[68,59,58,68,70,69,63,0,70],
[72,60,57,64,67,62,63,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,43,74,65,71,59,57,85],
[56,0,57,59,67,56,49,61,74],
[87,73,0,73,61,71,67,72,79],
[56,71,57,0,63,71,64,73,58],
[65,63,69,67,0,71,58,82,78],
[59,74,59,59,59,0,63,77,70],
[71,81,63,66,72,67,0,86,76],
[73,69,58,57,48,53,44,0,76],
[45,56,51,72,52,60,54,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,69,73,70,78,97,68,57],
[74,0,75,80,76,58,76,61,54],
[61,55,0,60,61,60,88,52,47],
[57,50,70,0,74,57,68,67,43],
[60,54,69,56,0,51,69,47,43],
[52,72,70,73,79,0,92,46,65],
[33,54,42,62,61,38,0,40,49],
[62,69,78,63,83,84,90,0,59],
[73,76,83,87,87,65,81,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,54,54,42,42,56,41,67],
[63,0,50,39,12,55,78,66,79],
[76,80,0,55,39,56,53,67,68],
[76,91,75,0,50,41,66,67,89],
[88,118,91,80,0,57,78,81,91],
[88,75,74,89,73,0,64,77,74],
[74,52,77,64,52,66,0,67,78],
[89,64,63,63,49,53,63,0,78],
[63,51,62,41,39,56,52,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,72,66,67,62,67,66,68],
[61,0,67,64,55,69,69,59,68],
[58,63,0,66,51,64,65,69,64],
[64,66,64,0,60,72,71,61,60],
[63,75,79,70,0,68,74,69,70],
[68,61,66,58,62,0,66,57,62],
[63,61,65,59,56,64,0,65,71],
[64,71,61,69,61,73,65,0,69],
[62,62,66,70,60,68,59,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,92,67,27,33,61,71,60],
[79,0,70,76,47,40,57,68,57],
[38,60,0,49,36,30,59,29,56],
[63,54,81,0,52,74,53,83,82],
[103,83,94,78,0,52,83,83,81],
[97,90,100,56,78,0,79,89,98],
[69,73,71,77,47,51,0,79,67],
[59,62,101,47,47,41,51,0,80],
[70,73,74,48,49,32,63,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,91,79,62,76,89,98,77],
[52,0,74,78,86,61,96,82,61],
[39,56,0,40,40,48,77,57,47],
[51,52,90,0,69,52,96,80,53],
[68,44,90,61,0,50,63,79,44],
[54,69,82,78,80,0,107,82,71],
[41,34,53,34,67,23,0,69,42],
[32,48,73,50,51,48,61,0,23],
[53,69,83,77,86,59,88,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,62,64,71,71,76,62,73],
[65,0,70,66,77,70,68,59,66],
[68,60,0,68,65,70,74,61,66],
[66,64,62,0,71,76,71,72,68],
[59,53,65,59,0,67,69,59,61],
[59,60,60,54,63,0,63,54,60],
[54,62,56,59,61,67,0,60,60],
[68,71,69,58,71,76,70,0,70],
[57,64,64,62,69,70,70,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,73,68,70,73,72,63,71],
[52,0,62,70,67,64,70,66,72],
[57,68,0,65,69,73,71,72,57],
[62,60,65,0,63,64,71,64,75],
[60,63,61,67,0,60,65,64,62],
[57,66,57,66,70,0,70,60,59],
[58,60,59,59,65,60,0,60,59],
[67,64,58,66,66,70,70,0,70],
[59,58,73,55,68,71,71,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,73,68,75,66,63,72,65],
[71,0,77,72,74,63,67,77,68],
[57,53,0,66,73,55,57,67,63],
[62,58,64,0,67,61,56,72,62],
[55,56,57,63,0,49,52,62,60],
[64,67,75,69,81,0,65,75,67],
[67,63,73,74,78,65,0,70,70],
[58,53,63,58,68,55,60,0,58],
[65,62,67,68,70,63,60,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,76,65,56,57,74,60,79],
[42,0,58,50,39,56,56,51,62],
[54,72,0,45,37,57,54,58,53],
[65,80,85,0,76,52,63,60,45],
[74,91,93,54,0,58,81,67,64],
[73,74,73,78,72,0,82,50,70],
[56,74,76,67,49,48,0,64,62],
[70,79,72,70,63,80,66,0,68],
[51,68,77,85,66,60,68,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,74,65,68,64,66,70,57],
[59,0,68,49,60,62,60,67,62],
[56,62,0,49,59,51,59,70,62],
[65,81,81,0,64,60,70,76,65],
[62,70,71,66,0,66,64,67,69],
[66,68,79,70,64,0,65,79,71],
[64,70,71,60,66,65,0,72,60],
[60,63,60,54,63,51,58,0,58],
[73,68,68,65,61,59,70,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,69,56,62,64,73,58,72],
[62,0,69,63,66,69,66,49,63],
[61,61,0,53,60,63,66,53,56],
[74,67,77,0,57,72,72,63,73],
[68,64,70,73,0,78,75,54,64],
[66,61,67,58,52,0,63,54,64],
[57,64,64,58,55,67,0,56,58],
[72,81,77,67,76,76,74,0,63],
[58,67,74,57,66,66,72,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,73,66,72,67,59,54,65],
[67,0,61,60,66,57,60,65,54],
[57,69,0,61,66,60,61,63,59],
[64,70,69,0,74,74,63,68,59],
[58,64,64,56,0,58,53,56,59],
[63,73,70,56,72,0,66,63,65],
[71,70,69,67,77,64,0,68,68],
[76,65,67,62,74,67,62,0,69],
[65,76,71,71,71,65,62,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,56,69,49,71,67,62,62],
[62,0,63,68,64,69,67,70,58],
[74,67,0,73,63,71,82,68,70],
[61,62,57,0,54,66,67,63,55],
[81,66,67,76,0,71,79,78,63],
[59,61,59,64,59,0,63,71,55],
[63,63,48,63,51,67,0,64,59],
[68,60,62,67,52,59,66,0,56],
[68,72,60,75,67,75,71,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,62,65,72,68,66,63,66],
[55,0,57,53,54,52,61,67,66],
[68,73,0,67,65,67,66,74,66],
[65,77,63,0,74,64,69,80,68],
[58,76,65,56,0,61,70,66,64],
[62,78,63,66,69,0,68,71,63],
[64,69,64,61,60,62,0,71,66],
[67,63,56,50,64,59,59,0,65],
[64,64,64,62,66,67,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,53,79,66,80,118,92,80],
[40,0,55,79,43,80,81,92,68],
[77,75,0,91,54,105,78,118,64],
[51,51,39,0,40,39,65,63,52],
[64,87,76,90,0,101,102,101,77],
[50,50,25,91,29,0,51,76,52],
[12,49,52,65,28,79,0,66,92],
[38,38,12,67,29,54,64,0,38],
[50,62,66,78,53,78,38,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,63,71,63,74,77,78,75],
[64,0,50,66,70,61,82,58,68],
[67,80,0,81,65,80,89,76,80],
[59,64,49,0,65,68,79,68,74],
[67,60,65,65,0,76,84,65,72],
[56,69,50,62,54,0,70,53,66],
[53,48,41,51,46,60,0,62,64],
[52,72,54,62,65,77,68,0,70],
[55,62,50,56,58,64,66,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,75,67,65,72,86,84,70],
[55,0,72,59,61,68,82,73,66],
[55,58,0,66,63,66,81,69,64],
[63,71,64,0,59,69,74,74,65],
[65,69,67,71,0,70,78,68,59],
[58,62,64,61,60,0,67,67,65],
[44,48,49,56,52,63,0,63,56],
[46,57,61,56,62,63,67,0,64],
[60,64,66,65,71,65,74,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,38,57,55,52,42,45,57],
[75,0,58,60,86,60,32,61,76],
[92,72,0,87,95,86,67,61,104],
[73,70,43,0,92,57,49,40,95],
[75,44,35,38,0,52,32,44,36],
[78,70,44,73,78,0,52,51,79],
[88,98,63,81,98,78,0,89,106],
[85,69,69,90,86,79,41,0,96],
[73,54,26,35,94,51,24,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,61,71,73,71,73,52,82],
[67,0,60,39,69,49,82,50,58],
[69,70,0,58,58,81,70,61,69],
[59,91,72,0,70,72,80,71,79],
[57,61,72,60,0,61,70,69,48],
[59,81,49,58,69,0,82,81,67],
[57,48,60,50,60,48,0,49,58],
[78,80,69,59,61,49,81,0,48],
[48,72,61,51,82,63,72,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,61,61,69,78,71,66,74],
[65,0,67,58,77,81,74,64,78],
[69,63,0,58,68,80,77,60,77],
[69,72,72,0,77,81,77,64,71],
[61,53,62,53,0,72,59,60,72],
[52,49,50,49,58,0,65,52,66],
[59,56,53,53,71,65,0,50,70],
[64,66,70,66,70,78,80,0,81],
[56,52,53,59,58,64,60,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,62,70,58,64,50,55,76],
[59,0,74,60,50,63,55,65,68],
[68,56,0,59,63,58,71,66,64],
[60,70,71,0,62,63,59,64,69],
[72,80,67,68,0,69,72,77,62],
[66,67,72,67,61,0,70,71,59],
[80,75,59,71,58,60,0,77,56],
[75,65,64,66,53,59,53,0,64],
[54,62,66,61,68,71,74,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,56,66,72,62,59,49,65],
[62,0,58,74,74,76,69,61,65],
[74,72,0,67,73,76,74,58,67],
[64,56,63,0,74,55,62,58,57],
[58,56,57,56,0,59,60,59,66],
[68,54,54,75,71,0,75,65,61],
[71,61,56,68,70,55,0,69,59],
[81,69,72,72,71,65,61,0,69],
[65,65,63,73,64,69,71,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,61,68,70,65,68,72,84],
[53,0,62,71,53,65,66,58,67],
[69,68,0,60,66,63,68,72,76],
[62,59,70,0,57,68,64,77,61],
[60,77,64,73,0,69,72,78,69],
[65,65,67,62,61,0,72,73,67],
[62,64,62,66,58,58,0,69,62],
[58,72,58,53,52,57,61,0,65],
[46,63,54,69,61,63,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,82,74,79,75,74,68,63],
[55,0,68,62,68,63,65,60,74],
[48,62,0,64,67,62,59,64,63],
[56,68,66,0,71,64,66,61,62],
[51,62,63,59,0,55,66,53,62],
[55,67,68,66,75,0,65,72,68],
[56,65,71,64,64,65,0,70,63],
[62,70,66,69,77,58,60,0,66],
[67,56,67,68,68,62,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,67,55,75,72,66,69,55],
[70,0,65,63,49,73,55,73,61],
[63,65,0,60,58,77,58,65,56],
[75,67,70,0,59,84,68,68,56],
[55,81,72,71,0,87,68,73,53],
[58,57,53,46,43,0,44,55,48],
[64,75,72,62,62,86,0,65,68],
[61,57,65,62,57,75,65,0,57],
[75,69,74,74,77,82,62,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,56,49,62,57,50,55],
[67,0,67,56,56,67,60,61,58],
[59,63,0,50,51,47,58,62,50],
[74,74,80,0,71,72,68,73,62],
[81,74,79,59,0,72,67,77,75],
[68,63,83,58,58,0,57,68,69],
[73,70,72,62,63,73,0,64,65],
[80,69,68,57,53,62,66,0,52],
[75,72,80,68,55,61,65,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,66,67,71,60,65,77,57],
[76,0,74,73,81,77,70,84,63],
[64,56,0,56,74,57,63,73,56],
[63,57,74,0,79,66,74,73,56],
[59,49,56,51,0,58,56,68,59],
[70,53,73,64,72,0,65,78,65],
[65,60,67,56,74,65,0,75,61],
[53,46,57,57,62,52,55,0,53],
[73,67,74,74,71,65,69,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,46,59,62,61,58,80,51],
[57,0,48,53,68,52,53,63,39],
[84,82,0,76,65,70,66,73,40],
[71,77,54,0,81,71,65,83,68],
[68,62,65,49,0,62,68,77,56],
[69,78,60,59,68,0,62,85,59],
[72,77,64,65,62,68,0,72,66],
[50,67,57,47,53,45,58,0,49],
[79,91,90,62,74,71,64,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,81,55,64,49,61,57,59],
[78,0,68,62,64,65,80,62,71],
[49,62,0,63,59,51,60,56,57],
[75,68,67,0,75,58,75,63,62],
[66,66,71,55,0,59,74,65,61],
[81,65,79,72,71,0,78,63,68],
[69,50,70,55,56,52,0,62,62],
[73,68,74,67,65,67,68,0,84],
[71,59,73,68,69,62,68,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,79,78,26,79,104,79,51],
[130,0,130,104,52,130,104,104,51],
[51,0,0,25,0,104,25,25,25],
[52,26,105,0,52,105,105,79,77],
[104,78,130,78,0,130,130,104,51],
[51,0,26,25,0,0,51,25,25],
[26,26,105,25,0,79,0,27,25],
[51,26,105,51,26,105,103,0,77],
[79,79,105,53,79,105,105,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,65,61,66,70,85,62,70],
[56,0,72,56,63,65,89,70,79],
[65,58,0,47,56,60,81,66,76],
[69,74,83,0,77,63,86,74,87],
[64,67,74,53,0,68,79,68,77],
[60,65,70,67,62,0,76,76,77],
[45,41,49,44,51,54,0,56,66],
[68,60,64,56,62,54,74,0,71],
[60,51,54,43,53,53,64,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,66,62,63,57,60,58,71],
[64,0,58,65,64,54,60,56,74],
[64,72,0,71,65,61,65,66,71],
[68,65,59,0,65,52,61,58,69],
[67,66,65,65,0,55,64,60,71],
[73,76,69,78,75,0,61,72,80],
[70,70,65,69,66,69,0,69,76],
[72,74,64,72,70,58,61,0,69],
[59,56,59,61,59,50,54,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,68,70,65,66,57,64,59],
[76,0,80,69,75,78,64,76,79],
[62,50,0,76,67,67,58,64,70],
[60,61,54,0,66,59,62,65,57],
[65,55,63,64,0,67,52,54,63],
[64,52,63,71,63,0,58,66,62],
[73,66,72,68,78,72,0,64,70],
[66,54,66,65,76,64,66,0,63],
[71,51,60,73,67,68,60,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,65,65,0,65,0,0],
[65,0,65,65,65,0,0,0,0],
[65,65,0,130,130,65,65,65,65],
[65,65,0,0,65,0,0,0,0],
[65,65,0,65,0,0,0,65,0],
[130,130,65,130,130,0,65,65,65],
[65,130,65,130,130,65,0,65,65],
[130,130,65,130,65,65,65,0,65],
[130,130,65,130,130,65,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,56,74,67,61,68,63,69],
[58,0,56,68,64,73,61,67,65],
[74,74,0,65,69,66,73,71,66],
[56,62,65,0,59,65,64,57,49],
[63,66,61,71,0,66,68,71,59],
[69,57,64,65,64,0,62,65,62],
[62,69,57,66,62,68,0,65,59],
[67,63,59,73,59,65,65,0,64],
[61,65,64,81,71,68,71,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,62,72,76,68,69,61,68],
[68,0,75,61,74,81,76,62,69],
[68,55,0,56,63,61,76,63,52],
[58,69,74,0,74,73,83,63,66],
[54,56,67,56,0,65,79,64,61],
[62,49,69,57,65,0,68,66,70],
[61,54,54,47,51,62,0,58,53],
[69,68,67,67,66,64,72,0,63],
[62,61,78,64,69,60,77,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,68,66,60,58,70,69,71],
[61,0,72,70,66,66,63,61,63],
[62,58,0,64,62,64,63,64,63],
[64,60,66,0,56,58,68,62,59],
[70,64,68,74,0,69,69,70,69],
[72,64,66,72,61,0,73,59,69],
[60,67,67,62,61,57,0,62,70],
[61,69,66,68,60,71,68,0,68],
[59,67,67,71,61,61,60,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,66,62,80,75,66,74,62],
[58,0,59,60,64,59,70,66,53],
[64,71,0,59,75,70,68,64,68],
[68,70,71,0,81,62,72,75,61],
[50,66,55,49,0,60,68,63,55],
[55,71,60,68,70,0,72,71,55],
[64,60,62,58,62,58,0,72,64],
[56,64,66,55,67,59,58,0,59],
[68,77,62,69,75,75,66,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,58,59,64,63,60,61,57],
[60,0,66,59,70,60,59,61,53],
[72,64,0,62,66,56,57,62,54],
[71,71,68,0,79,62,68,66,60],
[66,60,64,51,0,52,54,54,58],
[67,70,74,68,78,0,63,62,67],
[70,71,73,62,76,67,0,50,55],
[69,69,68,64,76,68,80,0,69],
[73,77,76,70,72,63,75,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,83,67,60,83,69,60,75],
[77,0,84,84,69,90,55,69,69],
[47,46,0,46,61,75,45,38,59],
[63,46,84,0,68,76,52,44,37],
[70,61,69,62,0,68,55,51,58],
[47,40,55,54,62,0,47,39,38],
[61,75,85,78,75,83,0,76,59],
[70,61,92,86,79,91,54,0,54],
[55,61,71,93,72,92,71,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,59,54,46,63,58,64,49],
[71,0,73,65,58,69,72,63,72],
[71,57,0,55,58,54,53,51,67],
[76,65,75,0,54,65,57,56,57],
[84,72,72,76,0,76,76,62,75],
[67,61,76,65,54,0,61,62,72],
[72,58,77,73,54,69,0,68,70],
[66,67,79,74,68,68,62,0,66],
[81,58,63,73,55,58,60,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,64,53,58,70,56,57,68],
[71,0,63,62,65,71,67,70,72],
[66,67,0,61,56,82,60,62,58],
[77,68,69,0,73,75,72,63,63],
[72,65,74,57,0,77,77,73,68],
[60,59,48,55,53,0,54,56,62],
[74,63,70,58,53,76,0,65,68],
[73,60,68,67,57,74,65,0,64],
[62,58,72,67,62,68,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,68,56,62,55,66,55,59],
[74,0,76,55,61,53,68,58,65],
[62,54,0,54,65,54,55,53,56],
[74,75,76,0,69,69,67,64,64],
[68,69,65,61,0,64,78,65,66],
[75,77,76,61,66,0,71,64,60],
[64,62,75,63,52,59,0,65,65],
[75,72,77,66,65,66,65,0,64],
[71,65,74,66,64,70,65,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,64,66,62,60,67,66,64],
[67,0,60,68,59,62,57,56,61],
[66,70,0,65,75,64,60,58,63],
[64,62,65,0,65,58,68,65,60],
[68,71,55,65,0,59,59,65,67],
[70,68,66,72,71,0,74,60,68],
[63,73,70,62,71,56,0,70,63],
[64,74,72,65,65,70,60,0,72],
[66,69,67,70,63,62,67,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,67,64,72,84,65,62,72],
[60,0,74,67,61,71,71,65,66],
[63,56,0,49,59,74,63,58,71],
[66,63,81,0,62,82,68,65,75],
[58,69,71,68,0,82,74,70,66],
[46,59,56,48,48,0,60,61,52],
[65,59,67,62,56,70,0,59,71],
[68,65,72,65,60,69,71,0,68],
[58,64,59,55,64,78,59,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,64,56,62,67,62,68,62],
[65,0,69,64,62,66,64,75,56],
[66,61,0,59,59,64,61,68,60],
[74,66,71,0,70,68,58,83,63],
[68,68,71,60,0,73,66,72,66],
[63,64,66,62,57,0,59,69,54],
[68,66,69,72,64,71,0,78,61],
[62,55,62,47,58,61,52,0,51],
[68,74,70,67,64,76,69,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,71,65,71,59,62,72,65],
[66,0,75,67,64,67,64,71,68],
[59,55,0,65,62,75,58,66,54],
[65,63,65,0,65,72,56,71,61],
[59,66,68,65,0,63,60,67,60],
[71,63,55,58,67,0,58,69,57],
[68,66,72,74,70,72,0,69,62],
[58,59,64,59,63,61,61,0,63],
[65,62,76,69,70,73,68,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,32,32,98,0,65,66,33],
[32,0,0,64,64,32,65,65,33],
[98,130,0,97,130,65,98,98,98],
[98,66,33,0,130,0,65,98,33],
[32,66,0,0,0,0,33,65,33],
[130,98,65,130,130,0,65,130,65],
[65,65,32,65,97,65,0,65,32],
[64,65,32,32,65,0,65,0,33],
[97,97,32,97,97,65,98,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,76,74,69,66,65,75,66],
[53,0,71,64,61,59,56,64,58],
[54,59,0,53,56,50,50,63,56],
[56,66,77,0,67,61,63,71,61],
[61,69,74,63,0,65,60,74,71],
[64,71,80,69,65,0,60,67,62],
[65,74,80,67,70,70,0,70,69],
[55,66,67,59,56,63,60,0,58],
[64,72,74,69,59,68,61,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,59,71,69,69,68,64,67],
[63,0,59,71,72,67,70,61,69],
[71,71,0,74,70,69,71,65,73],
[59,59,56,0,68,67,60,61,72],
[61,58,60,62,0,67,56,60,60],
[61,63,61,63,63,0,60,61,65],
[62,60,59,70,74,70,0,66,67],
[66,69,65,69,70,69,64,0,70],
[63,61,57,58,70,65,63,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,58,61,59,65,71,66,65],
[63,0,62,75,70,66,72,68,62],
[72,68,0,70,63,74,76,66,66],
[69,55,60,0,53,69,76,65,58],
[71,60,67,77,0,63,80,69,64],
[65,64,56,61,67,0,67,60,59],
[59,58,54,54,50,63,0,63,56],
[64,62,64,65,61,70,67,0,55],
[65,68,64,72,66,71,74,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,66,64,68,69,64,64,60],
[58,0,54,59,67,59,66,55,57],
[64,76,0,69,67,73,63,55,64],
[66,71,61,0,61,71,70,62,71],
[62,63,63,69,0,69,62,56,60],
[61,71,57,59,61,0,59,60,67],
[66,64,67,60,68,71,0,69,70],
[66,75,75,68,74,70,61,0,75],
[70,73,66,59,70,63,60,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,75,68,76,76,68,64,67],
[58,0,65,50,63,72,57,60,52],
[55,65,0,58,58,65,56,68,71],
[62,80,72,0,63,74,63,74,68],
[54,67,72,67,0,78,65,72,61],
[54,58,65,56,52,0,56,65,63],
[62,73,74,67,65,74,0,68,66],
[66,70,62,56,58,65,62,0,72],
[63,78,59,62,69,67,64,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,76,70,62,60,76,66,68],
[64,0,63,63,53,68,69,56,61],
[54,67,0,44,58,62,63,64,60],
[60,67,86,0,58,68,77,67,69],
[68,77,72,72,0,64,73,69,62],
[70,62,68,62,66,0,69,62,66],
[54,61,67,53,57,61,0,65,56],
[64,74,66,63,61,68,65,0,65],
[62,69,70,61,68,64,74,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,71,66,60,69,61,66,73],
[59,0,62,63,65,66,63,63,73],
[59,68,0,61,71,68,61,66,79],
[64,67,69,0,64,63,57,66,70],
[70,65,59,66,0,69,62,58,75],
[61,64,62,67,61,0,65,62,70],
[69,67,69,73,68,65,0,58,71],
[64,67,64,64,72,68,72,0,64],
[57,57,51,60,55,60,59,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,58,66,85,71,67,62,67],
[42,0,44,49,51,43,41,52,38],
[72,86,0,80,77,68,82,62,66],
[64,81,50,0,65,68,59,72,59],
[45,79,53,65,0,79,47,54,58],
[59,87,62,62,51,0,57,73,55],
[63,89,48,71,83,73,0,71,64],
[68,78,68,58,76,57,59,0,64],
[63,92,64,71,72,75,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,82,79,80,78,78,78,61],
[43,0,60,45,61,61,48,66,46],
[48,70,0,76,61,74,71,62,65],
[51,85,54,0,80,81,64,57,74],
[50,69,69,50,0,66,65,72,63],
[52,69,56,49,64,0,59,61,55],
[52,82,59,66,65,71,0,68,63],
[52,64,68,73,58,69,62,0,53],
[69,84,65,56,67,75,67,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,69,53,63,77,49,56,58],
[71,0,61,63,71,64,71,68,58],
[61,69,0,64,64,63,60,60,61],
[77,67,66,0,71,76,72,55,68],
[67,59,66,59,0,65,64,61,68],
[53,66,67,54,65,0,57,57,62],
[81,59,70,58,66,73,0,59,63],
[74,62,70,75,69,73,71,0,61],
[72,72,69,62,62,68,67,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,66,71,70,62,71,78],
[66,0,63,59,75,69,59,55,68],
[61,67,0,64,69,60,62,58,78],
[64,71,66,0,64,58,60,64,67],
[59,55,61,66,0,63,61,56,72],
[60,61,70,72,67,0,62,59,64],
[68,71,68,70,69,68,0,55,67],
[59,75,72,66,74,71,75,0,68],
[52,62,52,63,58,66,63,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,43,51,46,35,63,67,40],
[88,0,49,74,62,59,55,73,55],
[87,81,0,83,73,52,76,51,68],
[79,56,47,0,43,35,38,53,53],
[84,68,57,87,0,54,68,67,70],
[95,71,78,95,76,0,83,75,64],
[67,75,54,92,62,47,0,70,60],
[63,57,79,77,63,55,60,0,57],
[90,75,62,77,60,66,70,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,63,57,61,51,55,49,63],
[62,0,59,60,56,47,55,58,55],
[67,71,0,71,60,54,64,60,67],
[73,70,59,0,64,53,67,66,60],
[69,74,70,66,0,62,56,64,73],
[79,83,76,77,68,0,61,64,64],
[75,75,66,63,74,69,0,65,65],
[81,72,70,64,66,66,65,0,71],
[67,75,63,70,57,66,65,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,26,54,55,54,52,77,26],
[78,0,51,106,81,54,106,77,53],
[104,79,0,130,55,52,104,79,81],
[76,24,0,0,55,52,79,51,27],
[75,49,75,75,0,50,77,50,26],
[76,76,78,78,80,0,104,76,53],
[78,24,26,51,53,26,0,77,53],
[53,53,51,79,80,54,53,0,54],
[104,77,49,103,104,77,77,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,60,63,58,56,69,64,62],
[68,0,65,69,66,52,71,74,63],
[70,65,0,68,56,68,62,77,74],
[67,61,62,0,60,61,67,72,64],
[72,64,74,70,0,63,68,75,75],
[74,78,62,69,67,0,68,79,60],
[61,59,68,63,62,62,0,67,59],
[66,56,53,58,55,51,63,0,54],
[68,67,56,66,55,70,71,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,67,55,71,68,54,61,59],
[58,0,60,64,66,64,61,66,56],
[63,70,0,64,75,74,72,59,72],
[75,66,66,0,68,75,59,63,67],
[59,64,55,62,0,71,61,61,62],
[62,66,56,55,59,0,48,59,50],
[76,69,58,71,69,82,0,64,67],
[69,64,71,67,69,71,66,0,70],
[71,74,58,63,68,80,63,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,69,77,62,64,63,59,75],
[49,0,53,59,51,55,55,54,61],
[61,77,0,70,56,55,54,62,72],
[53,71,60,0,55,55,54,57,70],
[68,79,74,75,0,68,70,63,77],
[66,75,75,75,62,0,68,69,71],
[67,75,76,76,60,62,0,63,69],
[71,76,68,73,67,61,67,0,74],
[55,69,58,60,53,59,61,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,70,63,71,63,62,62,61],
[54,0,63,65,61,59,61,62,62],
[60,67,0,63,67,77,69,72,64],
[67,65,67,0,65,77,75,70,71],
[59,69,63,65,0,69,66,75,61],
[67,71,53,53,61,0,70,68,60],
[68,69,61,55,64,60,0,62,50],
[68,68,58,60,55,62,68,0,55],
[69,68,66,59,69,70,80,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,70,60,62,67,56,66],
[62,0,66,59,63,56,57,57,56],
[60,64,0,56,66,56,69,69,61],
[60,71,74,0,70,64,73,59,65],
[70,67,64,60,0,46,64,65,67],
[68,74,74,66,84,0,78,65,76],
[63,73,61,57,66,52,0,60,63],
[74,73,61,71,65,65,70,0,76],
[64,74,69,65,63,54,67,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,62,63,72,76,73,65,76],
[59,0,65,71,72,78,74,72,70],
[68,65,0,69,70,73,75,66,67],
[67,59,61,0,56,70,68,68,67],
[58,58,60,74,0,66,67,62,60],
[54,52,57,60,64,0,75,59,67],
[57,56,55,62,63,55,0,46,56],
[65,58,64,62,68,71,84,0,64],
[54,60,63,63,70,63,74,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,68,67,72,71,68,63,70],
[65,0,70,67,67,74,70,68,60],
[62,60,0,61,63,68,67,59,59],
[63,63,69,0,69,69,65,56,71],
[58,63,67,61,0,61,60,60,67],
[59,56,62,61,69,0,58,55,52],
[62,60,63,65,70,72,0,61,70],
[67,62,71,74,70,75,69,0,67],
[60,70,71,59,63,78,60,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,105,104,105,79,53,26,79],
[77,0,105,78,105,79,27,26,53],
[25,25,0,25,52,25,0,26,0],
[26,52,105,0,105,52,79,52,53],
[25,25,78,25,0,25,0,51,25],
[51,51,105,78,105,0,27,26,79],
[77,103,130,51,130,103,0,103,104],
[104,104,104,78,79,104,27,0,79],
[51,77,130,77,105,51,26,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,75,57,74,94,57,57,75],
[74,0,56,75,74,75,38,38,74],
[55,74,0,55,56,94,55,94,74],
[73,55,75,0,74,75,37,75,73],
[56,56,74,56,0,76,74,76,74],
[36,55,36,55,54,0,55,55,73],
[73,92,75,93,56,75,0,75,73],
[73,92,36,55,54,75,55,0,54],
[55,56,56,57,56,57,57,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,44,69,67,66,59,55,73],
[72,0,72,70,76,77,62,61,74],
[86,58,0,80,75,73,63,65,80],
[61,60,50,0,68,66,51,54,68],
[63,54,55,62,0,70,61,60,71],
[64,53,57,64,60,0,55,52,68],
[71,68,67,79,69,75,0,63,73],
[75,69,65,76,70,78,67,0,82],
[57,56,50,62,59,62,57,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,65,60,59,66,66,65,56],
[66,0,65,54,60,67,63,61,61],
[65,65,0,53,55,59,62,63,55],
[70,76,77,0,70,66,61,74,64],
[71,70,75,60,0,74,70,67,68],
[64,63,71,64,56,0,61,63,58],
[64,67,68,69,60,69,0,59,61],
[65,69,67,56,63,67,71,0,68],
[74,69,75,66,62,72,69,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,66,68,67,55,74,58,63],
[62,0,61,48,51,52,57,50,59],
[64,69,0,60,66,56,69,60,62],
[62,82,70,0,62,60,73,51,67],
[63,79,64,68,0,66,70,70,70],
[75,78,74,70,64,0,81,66,77],
[56,73,61,57,60,49,0,54,62],
[72,80,70,79,60,64,76,0,68],
[67,71,68,63,60,53,68,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,64,72,68,61,81,74,65],
[42,0,63,73,72,47,66,71,55],
[66,67,0,63,64,47,64,72,56],
[58,57,67,0,71,55,60,73,57],
[62,58,66,59,0,65,64,77,62],
[69,83,83,75,65,0,78,72,65],
[49,64,66,70,66,52,0,83,54],
[56,59,58,57,53,58,47,0,43],
[65,75,74,73,68,65,76,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,65,67,70,66,68,62,78],
[62,0,58,75,66,66,61,68,73],
[65,72,0,68,60,67,66,69,66],
[63,55,62,0,69,55,61,57,60],
[60,64,70,61,0,67,72,66,65],
[64,64,63,75,63,0,62,66,70],
[62,69,64,69,58,68,0,67,66],
[68,62,61,73,64,64,63,0,67],
[52,57,64,70,65,60,64,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,87,87,86,43,87,86,43],
[43,0,44,0,43,43,87,43,43],
[43,86,0,0,86,86,43,43,86],
[43,130,130,0,86,86,87,86,86],
[44,87,44,44,0,44,44,0,43],
[87,87,44,44,86,0,44,43,43],
[43,43,87,43,86,86,0,86,43],
[44,87,87,44,130,87,44,0,43],
[87,87,44,44,87,87,87,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,65,54,66,63,64,68,64],
[58,0,63,54,64,57,66,63,52],
[65,67,0,61,63,67,65,67,66],
[76,76,69,0,66,62,65,71,62],
[64,66,67,64,0,67,69,74,69],
[67,73,63,68,63,0,65,60,54],
[66,64,65,65,61,65,0,68,66],
[62,67,63,59,56,70,62,0,59],
[66,78,64,68,61,76,64,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,51,58,49,65,80,62,51],
[80,0,77,67,70,68,79,77,61],
[79,53,0,59,61,65,71,68,57],
[72,63,71,0,51,55,77,63,65],
[81,60,69,79,0,62,80,71,59],
[65,62,65,75,68,0,78,73,66],
[50,51,59,53,50,52,0,56,49],
[68,53,62,67,59,57,74,0,69],
[79,69,73,65,71,64,81,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,61,69,72,66,66,68,64],
[65,0,58,64,75,63,63,64,71],
[69,72,0,69,76,73,64,68,64],
[61,66,61,0,64,66,58,65,61],
[58,55,54,66,0,63,57,62,56],
[64,67,57,64,67,0,56,67,64],
[64,67,66,72,73,74,0,70,62],
[62,66,62,65,68,63,60,0,67],
[66,59,66,69,74,66,68,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,63,62,51,69,58,52,70],
[69,0,54,62,70,69,68,58,80],
[67,76,0,71,63,70,69,64,88],
[68,68,59,0,47,54,63,62,81],
[79,60,67,83,0,62,72,72,78],
[61,61,60,76,68,0,60,59,68],
[72,62,61,67,58,70,0,68,68],
[78,72,66,68,58,71,62,0,57],
[60,50,42,49,52,62,62,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,90,60,52,44,76,60,45],
[67,0,59,50,52,58,65,67,67],
[40,71,0,55,48,43,66,55,54],
[70,80,75,0,54,61,74,53,68],
[78,78,82,76,0,62,76,59,86],
[86,72,87,69,68,0,62,76,77],
[54,65,64,56,54,68,0,37,46],
[70,63,75,77,71,54,93,0,63],
[85,63,76,62,44,53,84,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,68,86,92,65,85,75,72],
[38,0,84,74,58,42,70,54,50],
[62,46,0,69,70,32,76,48,56],
[44,56,61,0,60,42,67,43,44],
[38,72,60,70,0,60,76,57,53],
[65,88,98,88,70,0,82,61,79],
[45,60,54,63,54,48,0,53,60],
[55,76,82,87,73,69,77,0,72],
[58,80,74,86,77,51,70,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,48,81,35,58,54,84,49],
[51,0,37,76,56,59,43,70,52],
[82,93,0,94,65,80,76,96,67],
[49,54,36,0,19,57,47,57,46],
[95,74,65,111,0,96,84,80,84],
[72,71,50,73,34,0,57,72,66],
[76,87,54,83,46,73,0,78,68],
[46,60,34,73,50,58,52,0,60],
[81,78,63,84,46,64,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,60,63,68,60,68,64],
[61,0,69,65,61,68,58,71,60],
[65,61,0,65,61,64,68,60,59],
[70,65,65,0,64,64,67,63,69],
[67,69,69,66,0,66,70,63,64],
[62,62,66,66,64,0,59,69,60],
[70,72,62,63,60,71,0,65,56],
[62,59,70,67,67,61,65,0,69],
[66,70,71,61,66,70,74,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,50,73,70,61,67,65,63],
[73,0,51,76,70,60,61,60,66],
[80,79,0,74,72,57,61,61,72],
[57,54,56,0,71,63,54,69,51],
[60,60,58,59,0,56,57,61,55],
[69,70,73,67,74,0,61,66,50],
[63,69,69,76,73,69,0,64,55],
[65,70,69,61,69,64,66,0,60],
[67,64,58,79,75,80,75,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,49,54,54,56,46,46,52],
[70,0,58,68,64,80,70,62,53],
[81,72,0,58,74,71,66,72,62],
[76,62,72,0,62,69,69,66,66],
[76,66,56,68,0,70,54,71,60],
[74,50,59,61,60,0,60,59,45],
[84,60,64,61,76,70,0,68,57],
[84,68,58,64,59,71,62,0,65],
[78,77,68,64,70,85,73,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,66,68,67,66,67,68,58],
[63,0,64,71,62,66,73,66,65],
[64,66,0,63,64,64,68,66,63],
[62,59,67,0,68,72,71,67,74],
[63,68,66,62,0,68,68,67,64],
[64,64,66,58,62,0,71,69,56],
[63,57,62,59,62,59,0,65,69],
[62,64,64,63,63,61,65,0,67],
[72,65,67,56,66,74,61,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,73,67,69,74,71,64,71],
[57,0,57,61,74,57,65,61,62],
[57,73,0,70,68,66,55,58,74],
[63,69,60,0,60,65,64,66,71],
[61,56,62,70,0,67,63,59,67],
[56,73,64,65,63,0,62,62,71],
[59,65,75,66,67,68,0,60,73],
[66,69,72,64,71,68,70,0,69],
[59,68,56,59,63,59,57,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,70,66,69,75,70,73,71],
[66,0,63,82,72,79,64,68,65],
[60,67,0,74,66,68,76,67,65],
[64,48,56,0,66,77,63,60,51],
[61,58,64,64,0,70,58,68,68],
[55,51,62,53,60,0,57,56,54],
[60,66,54,67,72,73,0,56,54],
[57,62,63,70,62,74,74,0,59],
[59,65,65,79,62,76,76,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,63,37,47,50,69,58,53],
[64,0,58,54,64,75,79,55,69],
[67,72,0,50,64,56,81,44,65],
[93,76,80,0,65,66,81,65,78],
[83,66,66,65,0,82,89,72,72],
[80,55,74,64,48,0,76,47,77],
[61,51,49,49,41,54,0,51,57],
[72,75,86,65,58,83,79,0,79],
[77,61,65,52,58,53,73,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,78,71,82,68,65,69,67],
[65,0,70,66,62,66,65,78,62],
[52,60,0,58,65,58,70,65,63],
[59,64,72,0,74,62,55,66,55],
[48,68,65,56,0,57,66,70,58],
[62,64,72,68,73,0,76,68,54],
[65,65,60,75,64,54,0,66,56],
[61,52,65,64,60,62,64,0,49],
[63,68,67,75,72,76,74,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,61,56,65,67,60,73,66],
[61,0,61,62,70,63,62,65,64],
[69,69,0,64,71,63,65,72,66],
[74,68,66,0,70,65,64,70,65],
[65,60,59,60,0,62,62,63,57],
[63,67,67,65,68,0,59,63,67],
[70,68,65,66,68,71,0,74,67],
[57,65,58,60,67,67,56,0,58],
[64,66,64,65,73,63,63,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,62,69,69,68,69,74,74],
[69,0,67,65,69,61,78,72,74],
[68,63,0,75,69,64,80,69,81],
[61,65,55,0,62,64,66,63,75],
[61,61,61,68,0,68,74,70,71],
[62,69,66,66,62,0,75,72,75],
[61,52,50,64,56,55,0,66,71],
[56,58,61,67,60,58,64,0,71],
[56,56,49,55,59,55,59,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,66,87,44,108,86,66,44],
[64,0,65,108,42,107,107,107,42],
[64,65,0,109,64,107,86,86,64],
[43,22,21,0,21,86,43,44,42],
[86,88,66,109,0,107,86,65,65],
[22,23,23,44,23,0,43,23,21],
[44,23,44,87,44,87,0,45,44],
[64,23,44,86,65,107,85,0,42],
[86,88,66,88,65,109,86,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,69,67,65,61,69,55,59],
[60,0,58,68,71,58,65,64,65],
[61,72,0,74,72,61,66,63,66],
[63,62,56,0,67,58,59,59,62],
[65,59,58,63,0,59,63,53,54],
[69,72,69,72,71,0,61,64,61],
[61,65,64,71,67,69,0,61,68],
[75,66,67,71,77,66,69,0,64],
[71,65,64,68,76,69,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,70,69,65,57,70,58,64],
[67,0,67,66,63,63,64,67,69],
[60,63,0,71,60,63,68,66,61],
[61,64,59,0,64,61,69,63,63],
[65,67,70,66,0,68,75,60,64],
[73,67,67,69,62,0,71,63,69],
[60,66,62,61,55,59,0,65,68],
[72,63,64,67,70,67,65,0,64],
[66,61,69,67,66,61,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,52,45,25,52,44,31,52],
[85,0,86,80,70,74,80,60,81],
[78,44,0,58,43,46,45,57,52],
[85,50,72,0,43,65,25,53,50],
[105,60,87,87,0,81,72,53,72],
[78,56,84,65,49,0,57,64,71],
[86,50,85,105,58,73,0,70,65],
[99,70,73,77,77,66,60,0,59],
[78,49,78,80,58,59,65,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,0,0,0,45,42,42,87],
[88,0,45,88,43,45,42,87,87],
[130,85,0,88,43,130,85,130,130],
[130,42,42,0,85,87,42,42,87],
[130,87,87,45,0,87,42,87,87],
[85,85,0,43,43,0,85,85,85],
[88,88,45,88,88,45,0,45,88],
[88,43,0,88,43,45,85,0,130],
[43,43,0,43,43,45,42,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,53,54,58,56,69,53,52],
[74,0,53,86,63,60,88,79,78],
[77,77,0,75,65,74,83,63,79],
[76,44,55,0,40,61,74,63,58],
[72,67,65,90,0,67,68,81,73],
[74,70,56,69,63,0,90,86,83],
[61,42,47,56,62,40,0,53,50],
[77,51,67,67,49,44,77,0,54],
[78,52,51,72,57,47,80,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,52,63,57,60,60,63,49],
[64,0,56,55,56,55,57,62,52],
[78,74,0,78,65,65,74,73,72],
[67,75,52,0,54,63,63,59,56],
[73,74,65,76,0,67,83,73,62],
[70,75,65,67,63,0,69,67,57],
[70,73,56,67,47,61,0,52,60],
[67,68,57,71,57,63,78,0,53],
[81,78,58,74,68,73,70,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,74,76,70,60,68,68,63],
[55,0,75,62,72,66,62,59,61],
[56,55,0,68,64,49,60,59,63],
[54,68,62,0,63,65,59,56,72],
[60,58,66,67,0,61,53,47,66],
[70,64,81,65,69,0,79,67,61],
[62,68,70,71,77,51,0,61,64],
[62,71,71,74,83,63,69,0,61],
[67,69,67,58,64,69,66,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,72,58,44,29,59,86,59],
[72,0,74,100,72,73,59,100,60],
[58,56,0,86,71,27,15,101,59],
[72,30,44,0,29,29,45,57,30],
[86,58,59,101,0,57,59,101,45],
[101,57,103,101,73,0,73,101,88],
[71,71,115,85,71,57,0,86,87],
[44,30,29,73,29,29,44,0,30],
[71,70,71,100,85,42,43,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,58,62,64,54,53,55,59],
[82,0,74,72,79,82,66,64,63],
[72,56,0,65,75,64,62,69,64],
[68,58,65,0,67,50,56,47,61],
[66,51,55,63,0,60,37,61,55],
[76,48,66,80,70,0,60,56,65],
[77,64,68,74,93,70,0,68,68],
[75,66,61,83,69,74,62,0,63],
[71,67,66,69,75,65,62,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,70,71,76,57,73,73,73],
[57,0,76,74,72,62,68,80,70],
[60,54,0,70,61,58,62,69,62],
[59,56,60,0,65,66,62,72,70],
[54,58,69,65,0,65,70,79,79],
[73,68,72,64,65,0,79,72,81],
[57,62,68,68,60,51,0,68,66],
[57,50,61,58,51,58,62,0,58],
[57,60,68,60,51,49,64,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,76,68,66,68,74,80,58],
[59,0,61,63,52,62,60,82,64],
[54,69,0,71,53,63,75,64,47],
[62,67,59,0,60,63,64,74,54],
[64,78,77,70,0,60,67,71,68],
[62,68,67,67,70,0,75,70,43],
[56,70,55,66,63,55,0,65,42],
[50,48,66,56,59,60,65,0,61],
[72,66,83,76,62,87,88,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,57,72,70,65,61,66,77],
[64,0,52,58,48,75,55,63,68],
[73,78,0,61,76,78,65,63,75],
[58,72,69,0,71,70,61,51,62],
[60,82,54,59,0,71,64,62,70],
[65,55,52,60,59,0,53,63,74],
[69,75,65,69,66,77,0,61,77],
[64,67,67,79,68,67,69,0,70],
[53,62,55,68,60,56,53,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,74,68,59,89,58,78,74],
[58,0,67,65,70,76,69,76,71],
[56,63,0,63,58,73,52,73,69],
[62,65,67,0,68,77,49,66,74],
[71,60,72,62,0,75,57,68,68],
[41,54,57,53,55,0,55,63,59],
[72,61,78,81,73,75,0,76,67],
[52,54,57,64,62,67,54,0,70],
[56,59,61,56,62,71,63,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,66,65,63,69,70,56,71],
[75,0,72,78,65,76,79,69,69],
[64,58,0,59,60,67,62,58,72],
[65,52,71,0,64,65,74,54,72],
[67,65,70,66,0,74,74,70,73],
[61,54,63,65,56,0,57,49,68],
[60,51,68,56,56,73,0,62,69],
[74,61,72,76,60,81,68,0,76],
[59,61,58,58,57,62,61,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,65,65,69,69,69,77,61],
[59,0,58,64,62,70,71,75,68],
[65,72,0,66,56,66,74,72,56],
[65,66,64,0,62,65,76,73,55],
[61,68,74,68,0,75,74,76,69],
[61,60,64,65,55,0,78,70,57],
[61,59,56,54,56,52,0,64,51],
[53,55,58,57,54,60,66,0,53],
[69,62,74,75,61,73,79,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,74,64,65,65,47,61,70],
[55,0,68,60,68,58,59,66,68],
[56,62,0,60,58,47,59,55,67],
[66,70,70,0,70,57,54,71,67],
[65,62,72,60,0,58,60,61,64],
[65,72,83,73,72,0,77,61,76],
[83,71,71,76,70,53,0,78,67],
[69,64,75,59,69,69,52,0,70],
[60,62,63,63,66,54,63,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,65,72,63,66,69,58,71],
[64,0,66,76,65,78,66,70,66],
[65,64,0,66,61,69,68,60,72],
[58,54,64,0,55,65,61,50,61],
[67,65,69,75,0,70,67,53,67],
[64,52,61,65,60,0,58,55,58],
[61,64,62,69,63,72,0,56,60],
[72,60,70,80,77,75,74,0,73],
[59,64,58,69,63,72,70,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,58,57,57,43,61,50,51],
[66,0,71,64,63,60,86,55,59],
[72,59,0,55,64,48,76,47,57],
[73,66,75,0,52,56,72,53,66],
[73,67,66,78,0,64,76,56,64],
[87,70,82,74,66,0,79,71,60],
[69,44,54,58,54,51,0,49,41],
[80,75,83,77,74,59,81,0,65],
[79,71,73,64,66,70,89,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,53,60,79,62,67,63,71],
[56,0,32,45,64,62,43,50,61],
[77,98,0,75,76,62,78,71,78],
[70,85,55,0,78,66,63,61,75],
[51,66,54,52,0,49,61,60,60],
[68,68,68,64,81,0,61,61,88],
[63,87,52,67,69,69,0,60,76],
[67,80,59,69,70,69,70,0,70],
[59,69,52,55,70,42,54,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,66,63,59,59,75,65,67],
[67,0,71,64,56,66,65,64,68],
[64,59,0,73,61,64,71,68,74],
[67,66,57,0,57,50,62,64,83],
[71,74,69,73,0,67,65,67,87],
[71,64,66,80,63,0,67,76,71],
[55,65,59,68,65,63,0,69,72],
[65,66,62,66,63,54,61,0,70],
[63,62,56,47,43,59,58,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,78,67,62,81,90,72,55],
[63,0,77,75,73,78,88,74,63],
[52,53,0,42,55,62,70,60,44],
[63,55,88,0,77,79,89,76,64],
[68,57,75,53,0,69,78,77,69],
[49,52,68,51,61,0,72,55,57],
[40,42,60,41,52,58,0,57,46],
[58,56,70,54,53,75,73,0,53],
[75,67,86,66,61,73,84,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,77,63,71,79,85,81,64],
[57,0,56,62,67,65,69,66,61],
[53,74,0,56,64,62,66,67,55],
[67,68,74,0,65,70,70,73,66],
[59,63,66,65,0,70,72,75,61],
[51,65,68,60,60,0,70,81,54],
[45,61,64,60,58,60,0,68,49],
[49,64,63,57,55,49,62,0,49],
[66,69,75,64,69,76,81,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,65,60,62,68,61,67,62],
[64,0,67,63,71,65,69,70,58],
[65,63,0,66,67,62,67,69,64],
[70,67,64,0,76,60,68,59,61],
[68,59,63,54,0,53,70,67,66],
[62,65,68,70,77,0,76,65,66],
[69,61,63,62,60,54,0,75,58],
[63,60,61,71,63,65,55,0,59],
[68,72,66,69,64,64,72,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,67,64,68,66,70,71,67],
[56,0,60,56,58,54,58,61,55],
[63,70,0,62,61,64,57,60,65],
[66,74,68,0,67,65,60,65,66],
[62,72,69,63,0,61,54,64,63],
[64,76,66,65,69,0,55,65,60],
[60,72,73,70,76,75,0,74,68],
[59,69,70,65,66,65,56,0,64],
[63,75,65,64,67,70,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,58,65,62,78,70,55,64],
[61,0,71,67,68,71,60,58,50],
[72,59,0,59,61,71,67,56,49],
[65,63,71,0,65,79,68,57,53],
[68,62,69,65,0,70,61,66,65],
[52,59,59,51,60,0,60,52,62],
[60,70,63,62,69,70,0,64,60],
[75,72,74,73,64,78,66,0,62],
[66,80,81,77,65,68,70,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,70,63,77,75,64,68],
[65,0,69,71,53,66,71,57,67],
[65,61,0,62,59,69,66,55,63],
[60,59,68,0,59,64,73,56,67],
[67,77,71,71,0,75,80,65,71],
[53,64,61,66,55,0,74,55,64],
[55,59,64,57,50,56,0,61,63],
[66,73,75,74,65,75,69,0,71],
[62,63,67,63,59,66,67,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,71,61,65,65,72,61,76],
[65,0,68,55,65,63,67,62,68],
[59,62,0,57,61,60,61,60,61],
[69,75,73,0,64,71,75,56,67],
[65,65,69,66,0,63,65,59,58],
[65,67,70,59,67,0,67,67,66],
[58,63,69,55,65,63,0,60,56],
[69,68,70,74,71,63,70,0,72],
[54,62,69,63,72,64,74,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,76,64,61,59,63,70],
[68,0,63,72,59,68,62,69,73],
[67,67,0,62,60,68,63,68,70],
[54,58,68,0,59,68,65,64,66],
[66,71,70,71,0,64,63,71,67],
[69,62,62,62,66,0,61,66,68],
[71,68,67,65,67,69,0,71,69],
[67,61,62,66,59,64,59,0,66],
[60,57,60,64,63,62,61,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,64,75,62,58,73,72],
[66,0,76,66,62,73,68,74,67],
[64,54,0,66,79,73,62,79,58],
[66,64,64,0,64,71,58,71,67],
[55,68,51,66,0,53,66,69,58],
[68,57,57,59,77,0,62,76,64],
[72,62,68,72,64,68,0,74,75],
[57,56,51,59,61,54,56,0,58],
[58,63,72,63,72,66,55,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,65,68,71,64,69,73,67],
[56,0,55,61,62,60,60,67,61],
[65,75,0,63,63,70,69,73,68],
[62,69,67,0,61,59,61,63,61],
[59,68,67,69,0,66,68,71,65],
[66,70,60,71,64,0,68,76,58],
[61,70,61,69,62,62,0,69,75],
[57,63,57,67,59,54,61,0,60],
[63,69,62,69,65,72,55,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,57,59,71,59,60,63,62],
[62,0,67,67,68,66,61,67,74],
[73,63,0,61,80,59,59,79,72],
[71,63,69,0,70,59,61,63,72],
[59,62,50,60,0,67,67,59,59],
[71,64,71,71,63,0,59,67,62],
[70,69,71,69,63,71,0,65,60],
[67,63,51,67,71,63,65,0,61],
[68,56,58,58,71,68,70,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,53,78,104,104,53,78,51],
[77,0,26,51,51,77,26,51,51],
[77,104,0,77,104,51,77,104,77],
[52,79,53,0,79,53,53,53,26],
[26,79,26,51,0,77,0,26,26],
[26,53,79,77,53,0,53,53,26],
[77,104,53,77,130,77,0,104,77],
[52,79,26,77,104,77,26,0,51],
[79,79,53,104,104,104,53,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,66,58,64,47,57,63,69],
[68,0,62,58,78,68,65,64,74],
[64,68,0,63,66,63,64,54,58],
[72,72,67,0,89,76,74,55,62],
[66,52,64,41,0,58,42,46,60],
[83,62,67,54,72,0,62,68,66],
[73,65,66,56,88,68,0,74,65],
[67,66,76,75,84,62,56,0,89],
[61,56,72,68,70,64,65,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,71,53,71,58,78,66,68],
[63,0,70,67,76,58,76,57,63],
[59,60,0,52,67,60,72,63,64],
[77,63,78,0,78,70,75,70,77],
[59,54,63,52,0,50,69,63,59],
[72,72,70,60,80,0,79,71,73],
[52,54,58,55,61,51,0,52,57],
[64,73,67,60,67,59,78,0,67],
[62,67,66,53,71,57,73,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,63,59,52,71,59,69,65],
[70,0,64,60,68,71,68,65,66],
[67,66,0,65,68,69,66,68,67],
[71,70,65,0,68,70,61,69,65],
[78,62,62,62,0,63,56,66,59],
[59,59,61,60,67,0,59,67,63],
[71,62,64,69,74,71,0,71,69],
[61,65,62,61,64,63,59,0,66],
[65,64,63,65,71,67,61,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,48,61,59,51,55,65,62],
[57,0,43,54,44,55,49,50,51],
[82,87,0,72,75,68,65,82,82],
[69,76,58,0,71,61,61,70,68],
[71,86,55,59,0,54,60,72,66],
[79,75,62,69,76,0,75,73,72],
[75,81,65,69,70,55,0,62,72],
[65,80,48,60,58,57,68,0,59],
[68,79,48,62,64,58,58,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,69,64,67,69,71,59,67],
[60,0,63,58,59,62,67,66,64],
[61,67,0,53,61,66,55,54,68],
[66,72,77,0,70,63,66,64,66],
[63,71,69,60,0,65,62,63,74],
[61,68,64,67,65,0,68,62,72],
[59,63,75,64,68,62,0,62,73],
[71,64,76,66,67,68,68,0,72],
[63,66,62,64,56,58,57,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,86,69,91,73,86,69,63],
[62,0,86,67,64,73,87,55,78],
[44,44,0,46,53,44,69,44,48],
[61,63,84,0,75,66,79,61,64],
[39,66,77,55,0,67,64,48,62],
[57,57,86,64,63,0,72,58,71],
[44,43,61,51,66,58,0,39,39],
[61,75,86,69,82,72,91,0,72],
[67,52,82,66,68,59,91,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,41,52,48,54,59,55,52],
[90,0,66,69,65,73,84,76,73],
[89,64,0,72,74,81,85,85,82],
[78,61,58,0,67,57,80,72,79],
[82,65,56,63,0,56,71,64,82],
[76,57,49,73,74,0,73,68,69],
[71,46,45,50,59,57,0,53,67],
[75,54,45,58,66,62,77,0,59],
[78,57,48,51,48,61,63,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,56,57,58,58,59,65,74],
[70,0,62,68,64,60,72,70,73],
[74,68,0,67,62,62,65,70,68],
[73,62,63,0,70,65,65,59,76],
[72,66,68,60,0,67,71,73,80],
[72,70,68,65,63,0,67,73,77],
[71,58,65,65,59,63,0,64,74],
[65,60,60,71,57,57,66,0,71],
[56,57,62,54,50,53,56,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,63,68,69,67,72,69,70],
[62,0,68,59,67,61,68,60,64],
[67,62,0,62,60,64,71,68,69],
[62,71,68,0,77,64,73,67,69],
[61,63,70,53,0,64,63,65,68],
[63,69,66,66,66,0,71,69,68],
[58,62,59,57,67,59,0,74,70],
[61,70,62,63,65,61,56,0,59],
[60,66,61,61,62,62,60,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,60,64,63,63,65,64,61],
[61,0,65,60,57,66,61,68,62],
[70,65,0,62,61,69,64,63,62],
[66,70,68,0,61,66,63,65,62],
[67,73,69,69,0,62,63,64,60],
[67,64,61,64,68,0,56,62,54],
[65,69,66,67,67,74,0,63,66],
[66,62,67,65,66,68,67,0,65],
[69,68,68,68,70,76,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,32,32,32,64,32,64,32],
[66,0,66,32,32,32,32,32,32],
[98,64,0,32,96,64,64,64,32],
[98,98,98,0,64,64,64,64,64],
[98,98,34,66,0,98,98,98,34],
[66,98,66,66,32,0,66,32,66],
[98,98,66,66,32,64,0,32,34],
[66,98,66,66,32,98,98,0,34],
[98,98,98,66,96,64,96,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,69,61,83,51,61,55,67],
[55,0,51,57,55,52,56,42,58],
[61,79,0,82,83,54,62,72,71],
[69,73,48,0,54,50,64,52,68],
[47,75,47,76,0,43,57,48,68],
[79,78,76,80,87,0,71,58,81],
[69,74,68,66,73,59,0,60,77],
[75,88,58,78,82,72,70,0,81],
[63,72,59,62,62,49,53,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,61,64,58,66,66,59,64],
[58,0,54,58,54,60,69,61,59],
[69,76,0,66,61,61,70,65,69],
[66,72,64,0,59,63,62,73,69],
[72,76,69,71,0,63,79,76,68],
[64,70,69,67,67,0,67,63,65],
[64,61,60,68,51,63,0,62,62],
[71,69,65,57,54,67,68,0,69],
[66,71,61,61,62,65,68,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 130, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_9_130.csv", index=False, header=False)
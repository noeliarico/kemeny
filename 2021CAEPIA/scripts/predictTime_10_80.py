
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,39,34,35,35,28,30,35,28,34],
[41,0,38,48,39,29,38,42,53,45],
[46,42,0,45,39,37,35,37,31,38],
[45,32,35,0,32,38,33,38,34,35],
[45,41,41,48,0,31,26,35,41,42],
[52,51,43,42,49,0,53,46,39,40],
[50,42,45,47,54,27,0,43,35,43],
[45,38,43,42,45,34,37,0,29,34],
[52,27,49,46,39,41,45,51,0,31],
[46,35,42,45,38,40,37,46,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,51,36,37,53,41,28,50,29],
[54,0,62,71,65,73,69,57,61,39],
[29,18,0,47,38,42,36,18,39,21],
[44,9,33,0,39,43,50,31,39,40],
[43,15,42,41,0,56,52,31,54,39],
[27,7,38,37,24,0,41,18,48,20],
[39,11,44,30,28,39,0,21,30,24],
[52,23,62,49,49,62,59,0,62,59],
[30,19,41,41,26,32,50,18,0,29],
[51,41,59,40,41,60,56,21,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,42,24,52,27,20,42,39,17],
[53,0,37,38,41,38,38,54,62,54],
[38,43,0,35,63,54,40,38,46,39],
[56,42,45,0,55,65,41,52,38,56],
[28,39,17,25,0,29,28,41,38,29],
[53,42,26,15,51,0,38,43,41,54],
[60,42,40,39,52,42,0,40,39,43],
[38,26,42,28,39,37,40,0,52,27],
[41,18,34,42,42,39,41,28,0,54],
[63,26,41,24,51,26,37,53,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,44,47,38,35,32,37,36,41],
[45,0,43,42,38,36,35,42,33,46],
[36,37,0,36,40,39,33,34,33,45],
[33,38,44,0,40,33,36,36,42,50],
[42,42,40,40,0,43,44,44,35,37],
[45,44,41,47,37,0,43,37,41,40],
[48,45,47,44,36,37,0,39,36,40],
[43,38,46,44,36,43,41,0,44,51],
[44,47,47,38,45,39,44,36,0,44],
[39,34,35,30,43,40,40,29,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,28,41,49,56,42,43,57,42],
[38,0,31,44,58,59,37,47,65,46],
[52,49,0,32,65,59,43,53,57,45],
[39,36,48,0,34,48,51,55,64,38],
[31,22,15,46,0,34,39,38,65,47],
[24,21,21,32,46,0,23,46,51,44],
[38,43,37,29,41,57,0,50,41,22],
[37,33,27,25,42,34,30,0,36,31],
[23,15,23,16,15,29,39,44,0,20],
[38,34,35,42,33,36,58,49,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,51,58,32,45,63,38,51,51],
[37,0,66,37,46,39,59,53,66,52],
[29,14,0,19,46,23,52,31,71,20],
[22,43,61,0,32,51,73,52,65,64],
[48,34,34,48,0,52,65,44,65,42],
[35,41,57,29,28,0,62,56,49,43],
[17,21,28,7,15,18,0,22,44,21],
[42,27,49,28,36,24,58,0,59,49],
[29,14,9,15,15,31,36,21,0,17],
[29,28,60,16,38,37,59,31,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,44,35,44,36,38,35,39,39],
[42,0,47,39,50,50,47,44,44,48],
[36,33,0,39,50,42,36,34,41,38],
[45,41,41,0,48,44,43,38,44,42],
[36,30,30,32,0,36,39,34,37,39],
[44,30,38,36,44,0,41,28,35,37],
[42,33,44,37,41,39,0,33,33,36],
[45,36,46,42,46,52,47,0,43,47],
[41,36,39,36,43,45,47,37,0,36],
[41,32,42,38,41,43,44,33,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,42,45,42,45,39,44,36,44],
[26,0,30,41,33,46,38,31,26,31],
[38,50,0,44,41,48,41,46,45,50],
[35,39,36,0,37,40,36,40,32,36],
[38,47,39,43,0,38,41,41,33,46],
[35,34,32,40,42,0,34,39,32,42],
[41,42,39,44,39,46,0,36,37,42],
[36,49,34,40,39,41,44,0,36,47],
[44,54,35,48,47,48,43,44,0,45],
[36,49,30,44,34,38,38,33,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,39,44,47,37,37,43,38,45],
[34,0,35,36,38,38,34,32,29,36],
[41,45,0,44,44,37,35,41,38,39],
[36,44,36,0,43,44,40,40,45,43],
[33,42,36,37,0,47,37,32,39,36],
[43,42,43,36,33,0,32,41,41,41],
[43,46,45,40,43,48,0,42,48,44],
[37,48,39,40,48,39,38,0,34,44],
[42,51,42,35,41,39,32,46,0,41],
[35,44,41,37,44,39,36,36,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,33,34,34,41,35,44,42,36],
[36,0,35,34,32,33,30,47,35,30],
[47,45,0,44,41,44,40,48,44,37],
[46,46,36,0,40,41,47,49,39,39],
[46,48,39,40,0,38,37,48,48,35],
[39,47,36,39,42,0,42,37,41,40],
[45,50,40,33,43,38,0,41,45,40],
[36,33,32,31,32,43,39,0,33,30],
[38,45,36,41,32,39,35,47,0,35],
[44,50,43,41,45,40,40,50,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,38,40,42,38,43,40,39,40],
[43,0,37,42,38,47,47,43,44,46],
[42,43,0,50,49,37,49,45,39,37],
[40,38,30,0,47,43,47,38,30,37],
[38,42,31,33,0,34,43,34,29,38],
[42,33,43,37,46,0,53,37,33,36],
[37,33,31,33,37,27,0,35,32,32],
[40,37,35,42,46,43,45,0,38,43],
[41,36,41,50,51,47,48,42,0,40],
[40,34,43,43,42,44,48,37,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,28,41,37,47,48,26,44,42],
[34,0,41,24,29,45,48,36,37,40],
[52,39,0,42,34,30,48,34,45,44],
[39,56,38,0,46,53,53,24,50,56],
[43,51,46,34,0,54,56,47,40,59],
[33,35,50,27,26,0,46,37,26,48],
[32,32,32,27,24,34,0,19,32,38],
[54,44,46,56,33,43,61,0,49,42],
[36,43,35,30,40,54,48,31,0,50],
[38,40,36,24,21,32,42,38,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,40,46,32,42,43,38,42,39],
[31,0,41,35,35,37,28,35,42,43],
[40,39,0,39,30,36,23,38,33,31],
[34,45,41,0,30,37,36,47,39,40],
[48,45,50,50,0,39,36,51,43,48],
[38,43,44,43,41,0,33,43,48,35],
[37,52,57,44,44,47,0,49,44,44],
[42,45,42,33,29,37,31,0,35,41],
[38,38,47,41,37,32,36,45,0,45],
[41,37,49,40,32,45,36,39,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,41,50,53,46,41,44,40,52],
[31,0,43,33,41,35,44,31,39,37],
[39,37,0,47,39,40,41,35,36,44],
[30,47,33,0,46,39,44,32,37,43],
[27,39,41,34,0,42,37,34,31,48],
[34,45,40,41,38,0,46,39,38,44],
[39,36,39,36,43,34,0,35,34,45],
[36,49,45,48,46,41,45,0,38,49],
[40,41,44,43,49,42,46,42,0,46],
[28,43,36,37,32,36,35,31,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,35,36,39,42,36,34,39,36],
[45,0,36,36,37,43,35,35,40,39],
[45,44,0,45,44,43,33,36,35,34],
[44,44,35,0,40,42,35,40,35,39],
[41,43,36,40,0,45,33,35,41,41],
[38,37,37,38,35,0,34,32,36,38],
[44,45,47,45,47,46,0,40,51,47],
[46,45,44,40,45,48,40,0,40,41],
[41,40,45,45,39,44,29,40,0,44],
[44,41,46,41,39,42,33,39,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,28,32,37,35,38,31,40,31],
[47,0,43,42,53,43,43,37,51,43],
[52,37,0,46,52,47,49,48,55,46],
[48,38,34,0,52,43,50,40,49,48],
[43,27,28,28,0,38,30,39,37,24],
[45,37,33,37,42,0,42,42,45,31],
[42,37,31,30,50,38,0,44,49,35],
[49,43,32,40,41,38,36,0,50,42],
[40,29,25,31,43,35,31,30,0,25],
[49,37,34,32,56,49,45,38,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,33,40,38,29,22,27,33,35],
[43,0,36,48,48,40,31,36,40,43],
[47,44,0,48,49,36,41,36,45,47],
[40,32,32,0,42,41,24,31,37,45],
[42,32,31,38,0,40,29,36,35,33],
[51,40,44,39,40,0,29,43,38,42],
[58,49,39,56,51,51,0,49,57,48],
[53,44,44,49,44,37,31,0,45,42],
[47,40,35,43,45,42,23,35,0,37],
[45,37,33,35,47,38,32,38,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,34,33,33,38,26,40,34,33],
[60,0,51,43,40,44,48,38,48,46],
[46,29,0,39,34,44,36,44,44,33],
[47,37,41,0,43,42,44,39,46,41],
[47,40,46,37,0,47,49,57,48,40],
[42,36,36,38,33,0,41,41,36,28],
[54,32,44,36,31,39,0,38,48,33],
[40,42,36,41,23,39,42,0,45,32],
[46,32,36,34,32,44,32,35,0,38],
[47,34,47,39,40,52,47,48,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,61,45,48,57,43,50,34,39],
[32,0,60,47,42,44,52,60,60,48],
[19,20,0,41,36,43,23,51,43,25],
[35,33,39,0,51,47,30,42,33,25],
[32,38,44,29,0,43,38,39,38,39],
[23,36,37,33,37,0,27,45,36,27],
[37,28,57,50,42,53,0,61,60,46],
[30,20,29,38,41,35,19,0,28,25],
[46,20,37,47,42,44,20,52,0,42],
[41,32,55,55,41,53,34,55,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,38,39,45,35,35,39,42,42],
[34,0,33,39,32,25,35,38,40,35],
[42,47,0,42,42,43,40,49,48,41],
[41,41,38,0,39,37,39,43,40,41],
[35,48,38,41,0,36,35,39,37,30],
[45,55,37,43,44,0,37,43,45,41],
[45,45,40,41,45,43,0,49,47,41],
[41,42,31,37,41,37,31,0,44,31],
[38,40,32,40,43,35,33,36,0,37],
[38,45,39,39,50,39,39,49,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,53,37,38,36,39,36,33,31],
[50,0,53,39,43,39,45,46,44,34],
[27,27,0,36,42,31,39,41,44,27],
[43,41,44,0,40,34,39,51,44,44],
[42,37,38,40,0,42,34,34,38,37],
[44,41,49,46,38,0,38,38,46,43],
[41,35,41,41,46,42,0,43,42,33],
[44,34,39,29,46,42,37,0,32,40],
[47,36,36,36,42,34,38,48,0,34],
[49,46,53,36,43,37,47,40,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,33,29,42,51,22,33,43,41],
[49,0,32,42,33,39,42,36,44,58],
[47,48,0,25,43,53,41,52,50,45],
[51,38,55,0,43,55,33,39,44,32],
[38,47,37,37,0,55,37,44,51,39],
[29,41,27,25,25,0,16,41,25,40],
[58,38,39,47,43,64,0,50,46,59],
[47,44,28,41,36,39,30,0,43,47],
[37,36,30,36,29,55,34,37,0,58],
[39,22,35,48,41,40,21,33,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,44,42,33,43,37,45,38,50],
[46,0,46,44,37,40,41,43,48,48],
[36,34,0,31,27,39,24,34,35,42],
[38,36,49,0,38,46,35,41,44,45],
[47,43,53,42,0,46,44,49,39,42],
[37,40,41,34,34,0,31,38,40,45],
[43,39,56,45,36,49,0,52,50,45],
[35,37,46,39,31,42,28,0,43,40],
[42,32,45,36,41,40,30,37,0,36],
[30,32,38,35,38,35,35,40,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,40,37,38,35,34,34,43,34],
[38,0,40,35,29,30,35,30,33,31],
[40,40,0,47,34,28,40,38,31,34],
[43,45,33,0,34,33,37,34,37,41],
[42,51,46,46,0,36,45,35,46,31],
[45,50,52,47,44,0,46,41,41,32],
[46,45,40,43,35,34,0,34,43,35],
[46,50,42,46,45,39,46,0,48,42],
[37,47,49,43,34,39,37,32,0,39],
[46,49,46,39,49,48,45,38,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,31,34,40,37,32,37,44,35],
[34,0,21,32,31,26,27,23,35,31],
[49,59,0,48,43,43,40,44,50,43],
[46,48,32,0,44,34,40,38,47,47],
[40,49,37,36,0,36,33,36,38,40],
[43,54,37,46,44,0,37,45,46,46],
[48,53,40,40,47,43,0,39,40,45],
[43,57,36,42,44,35,41,0,47,44],
[36,45,30,33,42,34,40,33,0,36],
[45,49,37,33,40,34,35,36,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,28,34,39,39,39,25,30,35],
[37,0,34,36,32,33,43,33,34,38],
[52,46,0,38,32,36,43,35,31,35],
[46,44,42,0,47,43,51,37,32,46],
[41,48,48,33,0,42,43,31,29,42],
[41,47,44,37,38,0,51,37,40,37],
[41,37,37,29,37,29,0,26,29,27],
[55,47,45,43,49,43,54,0,37,45],
[50,46,49,48,51,40,51,43,0,48],
[45,42,45,34,38,43,53,35,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,43,37,52,50,41,36,38,43],
[31,0,41,34,42,42,24,38,40,32],
[37,39,0,46,48,45,40,36,44,39],
[43,46,34,0,49,45,42,37,36,38],
[28,38,32,31,0,37,29,34,31,41],
[30,38,35,35,43,0,34,28,43,36],
[39,56,40,38,51,46,0,41,41,42],
[44,42,44,43,46,52,39,0,40,34],
[42,40,36,44,49,37,39,40,0,39],
[37,48,41,42,39,44,38,46,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,45,36,53,41,47,39,38,39],
[37,0,34,39,53,36,43,41,32,40],
[35,46,0,45,45,49,52,44,34,41],
[44,41,35,0,49,42,39,33,48,37],
[27,27,35,31,0,47,36,30,27,30],
[39,44,31,38,33,0,38,27,40,41],
[33,37,28,41,44,42,0,16,32,40],
[41,39,36,47,50,53,64,0,48,45],
[42,48,46,32,53,40,48,32,0,26],
[41,40,39,43,50,39,40,35,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,60,41,52,28,48,72,59,50],
[58,0,52,65,66,51,41,73,38,53],
[20,28,0,27,51,34,40,58,58,30],
[39,15,53,0,53,21,40,79,52,30],
[28,14,29,27,0,14,41,58,28,15],
[52,29,46,59,66,0,34,66,53,61],
[32,39,40,40,39,46,0,52,60,40],
[8,7,22,1,22,14,28,0,21,30],
[21,42,22,28,52,27,20,59,0,30],
[30,27,50,50,65,19,40,50,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,47,46,51,51,56,36,48,42],
[39,0,38,40,40,31,45,36,43,39],
[33,42,0,41,62,35,40,36,41,49],
[34,40,39,0,45,35,37,36,38,50],
[29,40,18,35,0,42,33,43,37,37],
[29,49,45,45,38,0,43,41,23,39],
[24,35,40,43,47,37,0,40,24,41],
[44,44,44,44,37,39,40,0,40,35],
[32,37,39,42,43,57,56,40,0,31],
[38,41,31,30,43,41,39,45,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,38,30,38,51,23,38,42,33],
[37,0,39,37,27,36,29,29,27,41],
[42,41,0,42,43,39,36,33,38,33],
[50,43,38,0,36,41,28,44,37,33],
[42,53,37,44,0,48,40,53,40,46],
[29,44,41,39,32,0,20,32,25,28],
[57,51,44,52,40,60,0,51,41,50],
[42,51,47,36,27,48,29,0,42,40],
[38,53,42,43,40,55,39,38,0,46],
[47,39,47,47,34,52,30,40,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,43,45,38,44,36,41,43,48],
[36,0,38,41,34,38,40,41,39,41],
[37,42,0,41,33,40,38,33,36,39],
[35,39,39,0,32,42,36,37,32,34],
[42,46,47,48,0,49,45,40,47,46],
[36,42,40,38,31,0,42,41,36,41],
[44,40,42,44,35,38,0,43,35,38],
[39,39,47,43,40,39,37,0,47,41],
[37,41,44,48,33,44,45,33,0,42],
[32,39,41,46,34,39,42,39,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,45,50,44,32,45,42,42,39],
[32,0,36,39,36,31,32,30,40,31],
[35,44,0,39,49,42,34,38,43,45],
[30,41,41,0,47,41,38,24,38,33],
[36,44,31,33,0,38,37,33,40,36],
[48,49,38,39,42,0,43,43,44,35],
[35,48,46,42,43,37,0,37,51,38],
[38,50,42,56,47,37,43,0,46,34],
[38,40,37,42,40,36,29,34,0,39],
[41,49,35,47,44,45,42,46,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,48,46,63,41,29,54,29,46],
[44,0,52,58,78,51,43,63,42,19],
[32,28,0,19,37,29,20,24,17,24],
[34,22,61,0,76,56,33,29,41,29],
[17,2,43,4,0,30,16,23,12,12],
[39,29,51,24,50,0,41,36,21,26],
[51,37,60,47,64,39,0,55,30,47],
[26,17,56,51,57,44,25,0,34,30],
[51,38,63,39,68,59,50,46,0,35],
[34,61,56,51,68,54,33,50,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,46,34,38,50,41,27,42,23],
[50,0,48,52,47,40,48,53,49,50],
[34,32,0,33,49,42,32,37,36,40],
[46,28,47,0,45,45,43,50,47,46],
[42,33,31,35,0,39,30,31,36,33],
[30,40,38,35,41,0,37,37,45,40],
[39,32,48,37,50,43,0,41,54,42],
[53,27,43,30,49,43,39,0,49,36],
[38,31,44,33,44,35,26,31,0,39],
[57,30,40,34,47,40,38,44,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,37,38,32,27,45,29,53,29],
[62,0,68,53,40,55,62,68,48,40],
[43,12,0,29,52,23,38,29,29,23],
[42,27,51,0,29,15,31,18,27,0],
[48,40,28,51,0,22,57,51,51,41],
[53,25,57,65,58,0,45,56,45,29],
[35,18,42,49,23,35,0,38,44,40],
[51,12,51,62,29,24,42,0,60,20],
[27,32,51,53,29,35,36,20,0,20],
[51,40,57,80,39,51,40,60,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,43,45,45,37,34,35,39,40],
[31,0,39,45,34,31,35,43,37,48],
[37,41,0,45,39,37,37,40,38,37],
[35,35,35,0,37,29,38,26,38,38],
[35,46,41,43,0,33,38,35,43,37],
[43,49,43,51,47,0,48,38,55,50],
[46,45,43,42,42,32,0,36,43,44],
[45,37,40,54,45,42,44,0,41,45],
[41,43,42,42,37,25,37,39,0,35],
[40,32,43,42,43,30,36,35,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,32,32,27,31,27,24,36,33],
[55,0,32,37,40,37,43,38,52,44],
[48,48,0,44,39,40,43,37,43,48],
[48,43,36,0,35,50,42,39,47,34],
[53,40,41,45,0,37,43,37,46,50],
[49,43,40,30,43,0,40,35,42,42],
[53,37,37,38,37,40,0,43,47,47],
[56,42,43,41,43,45,37,0,39,44],
[44,28,37,33,34,38,33,41,0,38],
[47,36,32,46,30,38,33,36,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,38,30,40,41,33,35,35,39],
[45,0,41,41,42,37,36,38,40,35],
[42,39,0,27,43,33,33,33,31,31],
[50,39,53,0,46,47,41,39,39,50],
[40,38,37,34,0,36,31,39,40,40],
[39,43,47,33,44,0,42,37,44,46],
[47,44,47,39,49,38,0,43,41,37],
[45,42,47,41,41,43,37,0,38,46],
[45,40,49,41,40,36,39,42,0,43],
[41,45,49,30,40,34,43,34,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,37,37,41,40,33,36,42,39],
[39,0,31,37,37,37,37,35,41,37],
[43,49,0,43,46,49,38,49,46,42],
[43,43,37,0,45,41,42,38,39,47],
[39,43,34,35,0,40,40,42,39,36],
[40,43,31,39,40,0,37,32,38,41],
[47,43,42,38,40,43,0,42,42,46],
[44,45,31,42,38,48,38,0,41,42],
[38,39,34,41,41,42,38,39,0,45],
[41,43,38,33,44,39,34,38,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,32,43,42,49,38,39,46,41],
[37,0,37,41,49,44,33,42,51,41],
[48,43,0,47,45,45,34,38,47,33],
[37,39,33,0,42,43,38,41,46,40],
[38,31,35,38,0,37,36,30,42,33],
[31,36,35,37,43,0,33,41,46,30],
[42,47,46,42,44,47,0,40,49,43],
[41,38,42,39,50,39,40,0,47,30],
[34,29,33,34,38,34,31,33,0,30],
[39,39,47,40,47,50,37,50,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,47,43,40,45,43,37,43,37],
[37,0,39,42,37,50,36,42,39,38],
[33,41,0,35,32,40,38,32,35,33],
[37,38,45,0,32,40,43,39,36,33],
[40,43,48,48,0,43,46,41,43,40],
[35,30,40,40,37,0,38,33,37,29],
[37,44,42,37,34,42,0,40,36,34],
[43,38,48,41,39,47,40,0,40,33],
[37,41,45,44,37,43,44,40,0,37],
[43,42,47,47,40,51,46,47,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,35,36,32,35,38,40,40,36],
[44,0,37,43,35,37,48,49,42,38],
[45,43,0,40,35,40,41,40,43,36],
[44,37,40,0,35,31,38,42,37,38],
[48,45,45,45,0,29,37,49,43,43],
[45,43,40,49,51,0,43,44,46,47],
[42,32,39,42,43,37,0,47,41,41],
[40,31,40,38,31,36,33,0,39,40],
[40,38,37,43,37,34,39,41,0,43],
[44,42,44,42,37,33,39,40,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,44,42,36,46,41,35,39,43],
[31,0,39,34,35,48,42,41,41,41],
[36,41,0,36,35,46,42,38,33,46],
[38,46,44,0,43,52,45,41,43,50],
[44,45,45,37,0,50,49,41,38,50],
[34,32,34,28,30,0,37,33,34,43],
[39,38,38,35,31,43,0,42,39,42],
[45,39,42,39,39,47,38,0,32,40],
[41,39,47,37,42,46,41,48,0,45],
[37,39,34,30,30,37,38,40,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,49,36,42,52,39,44,44,38],
[38,0,36,32,25,24,26,33,37,32],
[31,44,0,36,29,44,30,29,28,24],
[44,48,44,0,35,52,47,32,39,46],
[38,55,51,45,0,39,36,43,40,45],
[28,56,36,28,41,0,31,30,40,27],
[41,54,50,33,44,49,0,45,45,44],
[36,47,51,48,37,50,35,0,44,45],
[36,43,52,41,40,40,35,36,0,38],
[42,48,56,34,35,53,36,35,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,39,56,23,48,47,56,36,42],
[39,0,41,48,29,47,52,48,44,43],
[41,39,0,50,40,42,32,48,44,51],
[24,32,30,0,23,38,38,33,43,42],
[57,51,40,57,0,52,47,61,49,50],
[32,33,38,42,28,0,44,61,44,46],
[33,28,48,42,33,36,0,47,52,52],
[24,32,32,47,19,19,33,0,21,32],
[44,36,36,37,31,36,28,59,0,48],
[38,37,29,38,30,34,28,48,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,46,40,52,48,76,48,39,43],
[46,0,34,46,36,32,80,33,36,46],
[34,46,0,53,16,27,49,12,15,26],
[40,34,27,0,33,12,76,29,3,22],
[28,44,64,47,0,30,47,12,18,13],
[32,48,53,68,50,0,68,21,43,34],
[4,0,31,4,33,12,0,12,7,14],
[32,47,68,51,68,59,68,0,41,32],
[41,44,65,77,62,37,73,39,0,26],
[37,34,54,58,67,46,66,48,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,34,33,38,34,50,45,39,40],
[49,0,48,42,43,37,57,48,37,50],
[46,32,0,41,40,38,48,45,37,42],
[47,38,39,0,35,41,46,50,46,45],
[42,37,40,45,0,40,48,52,39,45],
[46,43,42,39,40,0,46,48,44,49],
[30,23,32,34,32,34,0,39,33,35],
[35,32,35,30,28,32,41,0,32,37],
[41,43,43,34,41,36,47,48,0,45],
[40,30,38,35,35,31,45,43,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,33,51,36,35,35,36,22,52],
[48,0,51,42,51,62,50,37,47,51],
[47,29,0,33,42,42,52,32,43,49],
[29,38,47,0,35,50,46,35,36,45],
[44,29,38,45,0,39,49,36,36,50],
[45,18,38,30,41,0,56,32,21,43],
[45,30,28,34,31,24,0,35,26,51],
[44,43,48,45,44,48,45,0,36,50],
[58,33,37,44,44,59,54,44,0,57],
[28,29,31,35,30,37,29,30,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,38,33,39,39,37,31,44,51],
[47,0,41,34,52,47,39,43,49,52],
[42,39,0,42,46,40,43,34,51,50],
[47,46,38,0,44,46,39,43,43,50],
[41,28,34,36,0,44,30,31,39,43],
[41,33,40,34,36,0,31,33,43,42],
[43,41,37,41,50,49,0,41,45,53],
[49,37,46,37,49,47,39,0,50,50],
[36,31,29,37,41,37,35,30,0,41],
[29,28,30,30,37,38,27,30,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,36,39,34,41,36,44,42,40],
[41,0,29,32,38,38,34,35,40,46],
[44,51,0,42,38,47,44,45,51,53],
[41,48,38,0,42,45,45,45,48,43],
[46,42,42,38,0,45,45,51,47,42],
[39,42,33,35,35,0,40,41,41,38],
[44,46,36,35,35,40,0,44,45,42],
[36,45,35,35,29,39,36,0,38,43],
[38,40,29,32,33,39,35,42,0,36],
[40,34,27,37,38,42,38,37,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,44,33,43,24,37,36,37,36],
[31,0,45,37,28,40,41,34,37,38],
[36,35,0,41,37,32,41,37,29,37],
[47,43,39,0,36,35,40,38,33,42],
[37,52,43,44,0,38,43,46,35,34],
[56,40,48,45,42,0,45,51,40,58],
[43,39,39,40,37,35,0,51,36,48],
[44,46,43,42,34,29,29,0,39,41],
[43,43,51,47,45,40,44,41,0,44],
[44,42,43,38,46,22,32,39,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,37,40,42,43,43,36,38,46],
[41,0,38,44,43,44,42,43,44,49],
[43,42,0,44,42,43,41,45,37,48],
[40,36,36,0,39,42,36,45,33,44],
[38,37,38,41,0,41,36,41,35,39],
[37,36,37,38,39,0,37,38,40,41],
[37,38,39,44,44,43,0,47,44,49],
[44,37,35,35,39,42,33,0,32,40],
[42,36,43,47,45,40,36,48,0,45],
[34,31,32,36,41,39,31,40,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,35,47,43,40,29,39,37,48],
[40,0,40,47,40,41,32,38,38,48],
[45,40,0,49,46,40,43,41,38,52],
[33,33,31,0,37,29,21,35,34,43],
[37,40,34,43,0,35,29,37,34,48],
[40,39,40,51,45,0,36,42,40,54],
[51,48,37,59,51,44,0,43,42,51],
[41,42,39,45,43,38,37,0,38,49],
[43,42,42,46,46,40,38,42,0,49],
[32,32,28,37,32,26,29,31,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,65,64,58,69,55,46,44,38],
[20,0,37,25,41,15,30,10,33,17],
[15,43,0,24,50,43,38,21,42,24],
[16,55,56,0,48,47,41,28,44,31],
[22,39,30,32,0,42,12,16,31,11],
[11,65,37,33,38,0,24,11,44,19],
[25,50,42,39,68,56,0,27,36,25],
[34,70,59,52,64,69,53,0,55,37],
[36,47,38,36,49,36,44,25,0,41],
[42,63,56,49,69,61,55,43,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,44,39,41,41,36,42,32,43],
[42,0,50,31,44,39,35,48,36,39],
[36,30,0,31,37,37,32,36,35,34],
[41,49,49,0,38,44,40,42,33,44],
[39,36,43,42,0,37,35,40,36,33],
[39,41,43,36,43,0,45,42,48,37],
[44,45,48,40,45,35,0,40,45,41],
[38,32,44,38,40,38,40,0,40,43],
[48,44,45,47,44,32,35,40,0,38],
[37,41,46,36,47,43,39,37,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,50,60,55,40,42,41,48,44],
[38,0,32,48,40,24,27,36,40,31],
[30,48,0,42,51,32,22,43,33,32],
[20,32,38,0,39,27,25,29,31,28],
[25,40,29,41,0,32,18,44,28,32],
[40,56,48,53,48,0,34,38,36,44],
[38,53,58,55,62,46,0,45,47,46],
[39,44,37,51,36,42,35,0,37,31],
[32,40,47,49,52,44,33,43,0,40],
[36,49,48,52,48,36,34,49,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,43,44,45,44,40,42,34,42],
[30,0,38,37,37,42,39,33,30,31],
[37,42,0,43,40,41,42,37,44,39],
[36,43,37,0,40,42,41,35,32,42],
[35,43,40,40,0,41,39,43,27,37],
[36,38,39,38,39,0,41,30,39,32],
[40,41,38,39,41,39,0,43,36,39],
[38,47,43,45,37,50,37,0,39,35],
[46,50,36,48,53,41,44,41,0,48],
[38,49,41,38,43,48,41,45,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,46,57,41,44,47,40,61,50],
[25,0,39,32,32,38,34,26,46,36],
[34,41,0,42,28,44,32,28,41,38],
[23,48,38,0,36,37,48,28,52,36],
[39,48,52,44,0,38,46,35,44,46],
[36,42,36,43,42,0,39,36,46,38],
[33,46,48,32,34,41,0,32,49,39],
[40,54,52,52,45,44,48,0,53,43],
[19,34,39,28,36,34,31,27,0,40],
[30,44,42,44,34,42,41,37,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,51,52,46,51,48,37,52,53],
[42,0,53,41,40,55,44,43,51,48],
[29,27,0,42,34,38,38,33,41,43],
[28,39,38,0,35,42,47,34,36,47],
[34,40,46,45,0,49,42,35,44,54],
[29,25,42,38,31,0,39,24,37,45],
[32,36,42,33,38,41,0,35,40,45],
[43,37,47,46,45,56,45,0,51,52],
[28,29,39,44,36,43,40,29,0,46],
[27,32,37,33,26,35,35,28,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,32,48,43,35,39,50,41,39],
[37,0,43,35,37,44,30,40,30,36],
[48,37,0,47,41,40,46,41,46,46],
[32,45,33,0,27,48,28,31,25,32],
[37,43,39,53,0,31,39,36,36,30],
[45,36,40,32,49,0,32,49,34,37],
[41,50,34,52,41,48,0,46,41,48],
[30,40,39,49,44,31,34,0,34,40],
[39,50,34,55,44,46,39,46,0,39],
[41,44,34,48,50,43,32,40,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,40,43,45,45,43,40,37,41],
[41,0,39,34,38,45,39,31,40,37],
[40,41,0,36,49,44,37,31,41,31],
[37,46,44,0,50,52,51,39,42,48],
[35,42,31,30,0,35,38,31,35,34],
[35,35,36,28,45,0,40,32,37,37],
[37,41,43,29,42,40,0,33,38,31],
[40,49,49,41,49,48,47,0,47,43],
[43,40,39,38,45,43,42,33,0,46],
[39,43,49,32,46,43,49,37,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,34,40,30,33,32,43,38,34],
[37,0,40,34,35,30,36,36,39,40],
[46,40,0,46,42,38,38,43,43,42],
[40,46,34,0,38,36,42,46,43,40],
[50,45,38,42,0,35,37,43,42,39],
[47,50,42,44,45,0,37,42,41,41],
[48,44,42,38,43,43,0,44,40,43],
[37,44,37,34,37,38,36,0,37,38],
[42,41,37,37,38,39,40,43,0,36],
[46,40,38,40,41,39,37,42,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,40,38,39,45,51,42,36,50],
[38,0,43,48,43,41,33,48,43,45],
[40,37,0,35,41,41,35,40,39,44],
[42,32,45,0,39,34,35,38,35,51],
[41,37,39,41,0,44,47,50,39,41],
[35,39,39,46,36,0,41,42,33,42],
[29,47,45,45,33,39,0,43,37,42],
[38,32,40,42,30,38,37,0,34,46],
[44,37,41,45,41,47,43,46,0,48],
[30,35,36,29,39,38,38,34,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,41,35,51,44,43,40,44,41],
[37,0,45,41,45,33,32,36,53,38],
[39,35,0,26,53,30,34,40,40,36],
[45,39,54,0,50,34,42,45,38,45],
[29,35,27,30,0,30,25,40,43,32],
[36,47,50,46,50,0,41,37,54,43],
[37,48,46,38,55,39,0,43,47,38],
[40,44,40,35,40,43,37,0,46,45],
[36,27,40,42,37,26,33,34,0,36],
[39,42,44,35,48,37,42,35,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,24,49,38,34,44,34,37,41],
[49,0,46,55,35,45,42,48,47,48],
[56,34,0,48,40,49,32,44,42,46],
[31,25,32,0,34,27,28,35,33,34],
[42,45,40,46,0,47,44,44,35,42],
[46,35,31,53,33,0,38,45,40,35],
[36,38,48,52,36,42,0,43,48,43],
[46,32,36,45,36,35,37,0,44,35],
[43,33,38,47,45,40,32,36,0,43],
[39,32,34,46,38,45,37,45,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,33,30,31,41,36,35,31,31],
[44,0,38,37,40,46,42,42,32,32],
[47,42,0,38,38,45,41,52,42,43],
[50,43,42,0,40,51,48,47,39,41],
[49,40,42,40,0,50,45,50,40,37],
[39,34,35,29,30,0,34,44,37,32],
[44,38,39,32,35,46,0,42,35,35],
[45,38,28,33,30,36,38,0,37,29],
[49,48,38,41,40,43,45,43,0,41],
[49,48,37,39,43,48,45,51,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,38,46,48,41,34,40,40,38],
[40,0,38,39,54,40,33,43,44,36],
[42,42,0,45,51,42,30,43,41,36],
[34,41,35,0,47,33,31,34,34,35],
[32,26,29,33,0,32,28,28,30,36],
[39,40,38,47,48,0,35,41,39,36],
[46,47,50,49,52,45,0,38,46,41],
[40,37,37,46,52,39,42,0,41,39],
[40,36,39,46,50,41,34,39,0,40],
[42,44,44,45,44,44,39,41,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,41,35,41,47,41,45,43,42],
[34,0,35,39,33,43,30,42,41,39],
[39,45,0,41,42,51,39,46,49,42],
[45,41,39,0,37,42,34,50,43,39],
[39,47,38,43,0,40,38,50,46,45],
[33,37,29,38,40,0,32,42,42,36],
[39,50,41,46,42,48,0,45,49,49],
[35,38,34,30,30,38,35,0,44,34],
[37,39,31,37,34,38,31,36,0,38],
[38,41,38,41,35,44,31,46,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,47,47,29,47,75,47,47,0],
[51,0,51,51,47,23,51,75,51,51],
[33,29,0,5,29,28,33,24,56,5],
[33,29,75,0,29,47,75,75,80,5],
[51,33,51,51,0,51,51,75,51,28],
[33,57,52,33,29,0,28,52,56,33],
[5,29,47,5,29,52,0,47,28,5],
[33,5,56,5,5,28,33,0,56,5],
[33,29,24,0,29,24,52,24,0,5],
[80,29,75,75,52,47,75,75,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,48,46,40,41,55,43,50,56],
[26,0,41,29,20,29,56,29,35,49],
[32,39,0,20,20,34,36,32,22,51],
[34,51,60,0,35,39,49,51,48,58],
[40,60,60,45,0,57,60,43,51,66],
[39,51,46,41,23,0,46,37,42,45],
[25,24,44,31,20,34,0,31,9,47],
[37,51,48,29,37,43,49,0,42,48],
[30,45,58,32,29,38,71,38,0,57],
[24,31,29,22,14,35,33,32,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,52,46,36,48,43,44,46,36],
[45,0,50,38,32,42,30,39,38,29],
[28,30,0,28,38,42,20,31,36,22],
[34,42,52,0,40,51,48,34,45,29],
[44,48,42,40,0,51,28,40,45,31],
[32,38,38,29,29,0,29,34,40,21],
[37,50,60,32,52,51,0,33,53,41],
[36,41,49,46,40,46,47,0,46,39],
[34,42,44,35,35,40,27,34,0,23],
[44,51,58,51,49,59,39,41,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,57,49,45,48,58,39,34],
[36,0,29,21,34,30,52,44,47,26],
[38,51,0,27,48,38,51,40,39,38],
[23,59,53,0,33,30,51,43,32,34],
[31,46,32,47,0,32,44,49,37,30],
[35,50,42,50,48,0,49,57,49,40],
[32,28,29,29,36,31,0,44,33,22],
[22,36,40,37,31,23,36,0,27,11],
[41,33,41,48,43,31,47,53,0,34],
[46,54,42,46,50,40,58,69,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,32,19,17,28,40,21,28,26],
[38,0,43,36,41,43,46,25,30,29],
[48,37,0,50,14,27,48,13,19,27],
[61,44,30,0,23,32,42,27,37,41],
[63,39,66,57,0,36,39,38,43,55],
[52,37,53,48,44,0,55,43,31,60],
[40,34,32,38,41,25,0,34,33,37],
[59,55,67,53,42,37,46,0,55,61],
[52,50,61,43,37,49,47,25,0,44],
[54,51,53,39,25,20,43,19,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,42,40,51,48,37,50,47,44],
[42,0,43,46,48,57,38,49,42,48],
[38,37,0,40,50,41,38,40,41,49],
[40,34,40,0,43,44,44,48,47,42],
[29,32,30,37,0,34,40,39,39,38],
[32,23,39,36,46,0,29,36,43,41],
[43,42,42,36,40,51,0,46,41,41],
[30,31,40,32,41,44,34,0,40,38],
[33,38,39,33,41,37,39,40,0,36],
[36,32,31,38,42,39,39,42,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,23,30,39,28,27,45,27,44],
[56,0,37,45,62,42,50,46,41,63],
[57,43,0,40,50,31,54,40,34,58],
[50,35,40,0,33,43,37,53,33,47],
[41,18,30,47,0,27,47,46,20,43],
[52,38,49,37,53,0,49,39,44,51],
[53,30,26,43,33,31,0,46,35,33],
[35,34,40,27,34,41,34,0,38,42],
[53,39,46,47,60,36,45,42,0,40],
[36,17,22,33,37,29,47,38,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,48,43,38,47,51,43,32,44],
[32,0,50,41,37,34,52,53,38,41],
[32,30,0,39,32,31,47,42,30,44],
[37,39,41,0,36,31,53,42,31,40],
[42,43,48,44,0,38,53,47,44,40],
[33,46,49,49,42,0,71,53,38,47],
[29,28,33,27,27,9,0,28,17,28],
[37,27,38,38,33,27,52,0,28,40],
[48,42,50,49,36,42,63,52,0,49],
[36,39,36,40,40,33,52,40,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,42,49,40,47,42,37,57,53],
[32,0,49,44,41,33,38,35,44,42],
[38,31,0,39,36,39,41,48,49,50],
[31,36,41,0,39,37,35,29,35,41],
[40,39,44,41,0,37,46,38,42,49],
[33,47,41,43,43,0,38,37,52,33],
[38,42,39,45,34,42,0,42,47,45],
[43,45,32,51,42,43,38,0,48,49],
[23,36,31,45,38,28,33,32,0,44],
[27,38,30,39,31,47,35,31,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,55,32,50,51,39,48,32,39],
[45,0,60,41,49,55,46,43,41,40],
[25,20,0,17,23,27,24,27,16,27],
[48,39,63,0,44,56,49,48,43,48],
[30,31,57,36,0,48,35,37,42,37],
[29,25,53,24,32,0,27,33,26,34],
[41,34,56,31,45,53,0,50,37,45],
[32,37,53,32,43,47,30,0,31,42],
[48,39,64,37,38,54,43,49,0,42],
[41,40,53,32,43,46,35,38,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,32,43,37,42,38,39,35,28],
[41,0,27,41,39,35,41,44,40,35],
[48,53,0,53,43,39,44,44,50,37],
[37,39,27,0,39,40,39,40,40,32],
[43,41,37,41,0,46,39,36,41,41],
[38,45,41,40,34,0,38,42,42,34],
[42,39,36,41,41,42,0,39,36,32],
[41,36,36,40,44,38,41,0,43,35],
[45,40,30,40,39,38,44,37,0,40],
[52,45,43,48,39,46,48,45,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,56,27,42,12,38,49,4,28],
[45,0,57,56,60,27,51,55,41,43],
[24,23,0,27,39,11,23,23,15,16],
[53,24,53,0,52,12,38,38,30,28],
[38,20,41,28,0,9,46,34,24,25],
[68,53,69,68,71,0,67,62,33,46],
[42,29,57,42,34,13,0,38,33,17],
[31,25,57,42,46,18,42,0,18,30],
[76,39,65,50,56,47,47,62,0,37],
[52,37,64,52,55,34,63,50,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,36,62,57,52,39,39,42,45],
[51,0,36,41,54,31,36,34,57,42],
[44,44,0,44,62,54,36,55,47,45],
[18,39,36,0,31,49,49,26,37,37],
[23,26,18,49,0,29,31,21,44,37],
[28,49,26,31,51,0,28,36,44,55],
[41,44,44,31,49,52,0,34,37,45],
[41,46,25,54,59,44,46,0,57,55],
[38,23,33,43,36,36,43,23,0,47],
[35,38,35,43,43,25,35,25,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,51,41,36,45,53,42,42,42],
[39,0,39,37,41,44,46,39,45,33],
[29,41,0,39,34,39,43,37,42,38],
[39,43,41,0,35,38,47,41,37,40],
[44,39,46,45,0,45,54,39,40,40],
[35,36,41,42,35,0,44,33,32,38],
[27,34,37,33,26,36,0,27,33,42],
[38,41,43,39,41,47,53,0,39,45],
[38,35,38,43,40,48,47,41,0,40],
[38,47,42,40,40,42,38,35,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,59,38,52,80,59,59,59,59],
[49,0,28,28,70,49,28,49,28,28],
[21,52,0,0,42,70,21,52,38,21],
[42,52,80,0,42,70,42,52,80,21],
[28,10,38,38,0,28,38,38,38,28],
[0,31,10,10,52,0,31,31,38,10],
[21,52,59,38,42,49,0,52,59,0],
[21,31,28,28,42,49,28,0,28,28],
[21,52,42,0,42,42,21,52,0,21],
[21,52,59,59,52,70,80,52,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,35,42,40,32,39,41,27,41],
[48,0,46,45,56,40,45,49,41,47],
[45,34,0,39,38,43,34,44,35,41],
[38,35,41,0,43,32,35,41,35,45],
[40,24,42,37,0,30,36,42,36,43],
[48,40,37,48,50,0,42,45,43,40],
[41,35,46,45,44,38,0,44,35,34],
[39,31,36,39,38,35,36,0,37,41],
[53,39,45,45,44,37,45,43,0,45],
[39,33,39,35,37,40,46,39,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,39,47,46,34,35,42,40,48],
[43,0,34,51,39,28,42,54,43,50],
[41,46,0,47,47,38,48,60,27,57],
[33,29,33,0,44,20,37,46,28,49],
[34,41,33,36,0,26,47,57,40,45],
[46,52,42,60,54,0,51,59,35,54],
[45,38,32,43,33,29,0,55,29,50],
[38,26,20,34,23,21,25,0,20,31],
[40,37,53,52,40,45,51,60,0,48],
[32,30,23,31,35,26,30,49,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,45,41,32,43,41,33,39,18],
[59,0,58,51,30,58,65,44,42,47],
[35,22,0,29,34,45,37,47,25,34],
[39,29,51,0,31,53,43,44,32,36],
[48,50,46,49,0,63,61,53,39,25],
[37,22,35,27,17,0,32,24,17,23],
[39,15,43,37,19,48,0,29,35,26],
[47,36,33,36,27,56,51,0,42,27],
[41,38,55,48,41,63,45,38,0,27],
[62,33,46,44,55,57,54,53,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,43,28,30,26,36,39,26,43],
[53,0,35,27,34,58,60,47,44,50],
[37,45,0,24,27,32,35,30,35,51],
[52,53,56,0,38,49,47,55,45,44],
[50,46,53,42,0,44,51,50,38,34],
[54,22,48,31,36,0,56,58,36,36],
[44,20,45,33,29,24,0,48,24,34],
[41,33,50,25,30,22,32,0,22,47],
[54,36,45,35,42,44,56,58,0,49],
[37,30,29,36,46,44,46,33,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,38,46,42,37,39,42,40,40],
[38,0,35,41,36,35,44,43,43,37],
[42,45,0,46,37,34,37,44,43,41],
[34,39,34,0,28,36,35,38,30,36],
[38,44,43,52,0,39,36,49,46,40],
[43,45,46,44,41,0,39,43,48,46],
[41,36,43,45,44,41,0,42,44,41],
[38,37,36,42,31,37,38,0,39,34],
[40,37,37,50,34,32,36,41,0,36],
[40,43,39,44,40,34,39,46,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,48,57,43,32,43,42,33,29],
[28,0,61,59,46,51,37,41,30,25],
[32,19,0,53,26,24,33,20,20,33],
[23,21,27,0,29,21,21,9,22,6],
[37,34,54,51,0,40,44,24,41,36],
[48,29,56,59,40,0,33,19,35,18],
[37,43,47,59,36,47,0,36,37,19],
[38,39,60,71,56,61,44,0,38,46],
[47,50,60,58,39,45,43,42,0,20],
[51,55,47,74,44,62,61,34,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,41,28,34,35,40,31,42,33],
[43,0,41,31,44,35,42,42,46,48],
[39,39,0,35,39,30,39,39,41,29],
[52,49,45,0,48,38,56,43,50,35],
[46,36,41,32,0,37,37,34,40,38],
[45,45,50,42,43,0,46,44,38,39],
[40,38,41,24,43,34,0,33,44,32],
[49,38,41,37,46,36,47,0,39,29],
[38,34,39,30,40,42,36,41,0,36],
[47,32,51,45,42,41,48,51,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,56,40,34,49,44,48,43,43],
[42,0,45,42,24,50,42,43,41,46],
[24,35,0,37,26,41,42,34,43,37],
[40,38,43,0,42,48,48,48,43,37],
[46,56,54,38,0,46,51,49,56,48],
[31,30,39,32,34,0,40,39,39,38],
[36,38,38,32,29,40,0,37,39,33],
[32,37,46,32,31,41,43,0,31,36],
[37,39,37,37,24,41,41,49,0,30],
[37,34,43,43,32,42,47,44,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,38,36,45,39,46,42,42,38],
[40,0,41,40,44,45,49,55,46,47],
[42,39,0,43,42,38,44,48,49,50],
[44,40,37,0,41,42,39,46,43,43],
[35,36,38,39,0,41,39,44,40,38],
[41,35,42,38,39,0,46,49,45,39],
[34,31,36,41,41,34,0,42,46,36],
[38,25,32,34,36,31,38,0,40,37],
[38,34,31,37,40,35,34,40,0,37],
[42,33,30,37,42,41,44,43,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,39,40,45,33,41,39,38,40],
[40,0,44,42,50,39,49,46,38,40],
[41,36,0,43,40,39,44,37,31,41],
[40,38,37,0,45,36,37,36,36,45],
[35,30,40,35,0,35,43,36,31,40],
[47,41,41,44,45,0,46,40,46,42],
[39,31,36,43,37,34,0,36,31,36],
[41,34,43,44,44,40,44,0,35,45],
[42,42,49,44,49,34,49,45,0,49],
[40,40,39,35,40,38,44,35,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,37,32,31,34,37,32,36,33],
[45,0,38,43,38,47,39,32,43,44],
[43,42,0,34,34,39,42,29,34,39],
[48,37,46,0,46,41,55,46,50,39],
[49,42,46,34,0,50,48,34,43,39],
[46,33,41,39,30,0,37,42,43,40],
[43,41,38,25,32,43,0,33,34,28],
[48,48,51,34,46,38,47,0,38,40],
[44,37,46,30,37,37,46,42,0,36],
[47,36,41,41,41,40,52,40,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,35,16,25,23,21,34,24,12],
[54,0,66,44,47,37,38,51,39,37],
[45,14,0,36,53,34,43,18,20,18],
[64,36,44,0,62,38,27,38,35,37],
[55,33,27,18,0,35,32,24,29,21],
[57,43,46,42,45,0,40,31,45,21],
[59,42,37,53,48,40,0,34,27,20],
[46,29,62,42,56,49,46,0,43,39],
[56,41,60,45,51,35,53,37,0,43],
[68,43,62,43,59,59,60,41,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,46,43,40,53,44,49,33,48],
[47,0,46,44,45,42,36,41,37,55],
[34,34,0,30,36,45,30,43,33,46],
[37,36,50,0,38,35,37,40,33,41],
[40,35,44,42,0,58,39,43,42,55],
[27,38,35,45,22,0,36,20,27,40],
[36,44,50,43,41,44,0,46,43,53],
[31,39,37,40,37,60,34,0,40,42],
[47,43,47,47,38,53,37,40,0,48],
[32,25,34,39,25,40,27,38,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,25,21,28,20,25,19,34,26],
[51,0,40,43,37,36,37,35,50,35],
[55,40,0,44,43,31,30,39,51,48],
[59,37,36,0,31,34,38,33,37,31],
[52,43,37,49,0,38,36,41,50,37],
[60,44,49,46,42,0,35,40,54,40],
[55,43,50,42,44,45,0,36,52,34],
[61,45,41,47,39,40,44,0,46,49],
[46,30,29,43,30,26,28,34,0,38],
[54,45,32,49,43,40,46,31,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,35,44,38,41,46,43,38,34],
[41,0,32,44,45,47,45,47,42,34],
[45,48,0,41,46,44,43,42,41,40],
[36,36,39,0,31,36,41,39,38,34],
[42,35,34,49,0,49,46,45,36,40],
[39,33,36,44,31,0,31,39,40,33],
[34,35,37,39,34,49,0,46,36,34],
[37,33,38,41,35,41,34,0,40,34],
[42,38,39,42,44,40,44,40,0,37],
[46,46,40,46,40,47,46,46,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,48,41,46,38,46,47,45,44],
[27,0,32,41,39,37,29,35,35,38],
[32,48,0,37,43,39,37,43,36,47],
[39,39,43,0,38,32,33,41,37,47],
[34,41,37,42,0,38,37,43,35,43],
[42,43,41,48,42,0,38,45,43,51],
[34,51,43,47,43,42,0,40,40,48],
[33,45,37,39,37,35,40,0,25,42],
[35,45,44,43,45,37,40,55,0,43],
[36,42,33,33,37,29,32,38,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,42,39,36,35,40,39,39,43],
[47,0,41,46,39,35,45,41,35,43],
[38,39,0,43,38,36,45,42,40,39],
[41,34,37,0,33,35,43,38,37,35],
[44,41,42,47,0,39,48,42,39,38],
[45,45,44,45,41,0,38,47,39,42],
[40,35,35,37,32,42,0,41,40,39],
[41,39,38,42,38,33,39,0,37,38],
[41,45,40,43,41,41,40,43,0,36],
[37,37,41,45,42,38,41,42,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,40,38,47,47,43,46,46,44],
[31,0,34,34,41,30,37,43,41,40],
[40,46,0,41,44,46,38,50,45,43],
[42,46,39,0,43,41,42,47,43,44],
[33,39,36,37,0,39,34,36,37,36],
[33,50,34,39,41,0,36,44,42,42],
[37,43,42,38,46,44,0,46,39,44],
[34,37,30,33,44,36,34,0,32,43],
[34,39,35,37,43,38,41,48,0,39],
[36,40,37,36,44,38,36,37,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,45,37,45,38,34,37,39,50],
[42,0,36,45,27,32,23,38,28,38],
[35,44,0,40,42,48,40,34,40,39],
[43,35,40,0,40,38,31,41,46,45],
[35,53,38,40,0,33,39,35,39,40],
[42,48,32,42,47,0,37,40,42,50],
[46,57,40,49,41,43,0,42,43,49],
[43,42,46,39,45,40,38,0,47,42],
[41,52,40,34,41,38,37,33,0,41],
[30,42,41,35,40,30,31,38,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,49,32,46,44,33,29,40,46],
[31,0,43,43,34,45,35,26,40,38],
[31,37,0,23,32,45,25,24,37,37],
[48,37,57,0,44,49,38,36,38,45],
[34,46,48,36,0,41,32,35,38,40],
[36,35,35,31,39,0,27,27,32,40],
[47,45,55,42,48,53,0,42,35,47],
[51,54,56,44,45,53,38,0,45,51],
[40,40,43,42,42,48,45,35,0,48],
[34,42,43,35,40,40,33,29,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,28,43,41,50,36,45,68,38],
[23,0,19,29,27,18,24,10,39,23],
[52,61,0,43,43,47,47,24,68,46],
[37,51,37,0,42,60,60,51,48,62],
[39,53,37,38,0,34,48,39,48,48],
[30,62,33,20,46,0,24,50,39,38],
[44,56,33,20,32,56,0,42,53,44],
[35,70,56,29,41,30,38,0,44,38],
[12,41,12,32,32,41,27,36,0,37],
[42,57,34,18,32,42,36,42,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,49,34,47,30,44,49,38,44],
[35,0,49,31,43,25,35,47,35,31],
[31,31,0,40,31,26,42,37,38,38],
[46,49,40,0,47,34,41,44,43,41],
[33,37,49,33,0,30,37,48,39,42],
[50,55,54,46,50,0,51,45,44,38],
[36,45,38,39,43,29,0,55,39,38],
[31,33,43,36,32,35,25,0,34,32],
[42,45,42,37,41,36,41,46,0,41],
[36,49,42,39,38,42,42,48,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,36,28,60,38,57,51,49,38],
[34,0,40,41,69,38,46,48,55,29],
[44,40,0,36,56,38,50,49,52,32],
[52,39,44,0,72,45,66,67,58,46],
[20,11,24,8,0,22,23,14,22,14],
[42,42,42,35,58,0,52,48,49,26],
[23,34,30,14,57,28,0,43,46,36],
[29,32,31,13,66,32,37,0,28,27],
[31,25,28,22,58,31,34,52,0,32],
[42,51,48,34,66,54,44,53,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,38,20,27,24,33,31,24,39],
[54,0,41,38,40,42,62,49,34,48],
[42,39,0,41,36,29,54,43,28,37],
[60,42,39,0,45,33,55,58,28,42],
[53,40,44,35,0,40,52,41,44,37],
[56,38,51,47,40,0,51,55,24,34],
[47,18,26,25,28,29,0,24,23,35],
[49,31,37,22,39,25,56,0,34,46],
[56,46,52,52,36,56,57,46,0,50],
[41,32,43,38,43,46,45,34,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,38,33,26,27,36,30,37,54],
[49,0,43,24,37,30,34,24,38,49],
[42,37,0,37,36,41,32,43,44,48],
[47,56,43,0,38,30,34,38,48,59],
[54,43,44,42,0,36,46,40,43,56],
[53,50,39,50,44,0,40,43,48,59],
[44,46,48,46,34,40,0,39,39,53],
[50,56,37,42,40,37,41,0,48,53],
[43,42,36,32,37,32,41,32,0,44],
[26,31,32,21,24,21,27,27,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,41,49,62,44,50,28,49,47],
[25,0,12,42,45,19,27,24,29,37],
[39,68,0,53,62,51,65,48,51,45],
[31,38,27,0,42,32,36,45,32,30],
[18,35,18,38,0,36,43,27,34,30],
[36,61,29,48,44,0,54,43,46,49],
[30,53,15,44,37,26,0,27,22,32],
[52,56,32,35,53,37,53,0,32,36],
[31,51,29,48,46,34,58,48,0,35],
[33,43,35,50,50,31,48,44,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,32,46,33,45,41,32,44,30],
[43,0,37,54,35,45,35,45,43,37],
[48,43,0,47,41,47,45,41,48,40],
[34,26,33,0,32,39,35,42,40,23],
[47,45,39,48,0,46,40,44,42,41],
[35,35,33,41,34,0,38,35,40,30],
[39,45,35,45,40,42,0,36,45,30],
[48,35,39,38,36,45,44,0,43,33],
[36,37,32,40,38,40,35,37,0,40],
[50,43,40,57,39,50,50,47,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,28,40,42,38,38,34,45,37],
[30,0,35,35,38,31,32,37,40,32],
[52,45,0,39,52,45,44,39,46,48],
[40,45,41,0,38,39,38,28,48,42],
[38,42,28,42,0,35,37,32,46,40],
[42,49,35,41,45,0,36,38,50,34],
[42,48,36,42,43,44,0,40,46,46],
[46,43,41,52,48,42,40,0,52,45],
[35,40,34,32,34,30,34,28,0,33],
[43,48,32,38,40,46,34,35,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,46,25,43,44,39,48,40,41],
[40,0,50,42,46,41,40,36,37,40],
[34,30,0,27,25,35,34,39,32,31],
[55,38,53,0,48,53,48,61,61,51],
[37,34,55,32,0,43,36,37,39,23],
[36,39,45,27,37,0,36,39,37,36],
[41,40,46,32,44,44,0,44,31,37],
[32,44,41,19,43,41,36,0,43,29],
[40,43,48,19,41,43,49,37,0,42],
[39,40,49,29,57,44,43,51,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,49,49,42,55,43,50,53,51],
[43,0,42,58,51,59,40,46,59,51],
[31,38,0,45,49,57,36,39,44,47],
[31,22,35,0,30,46,33,29,36,41],
[38,29,31,50,0,48,35,36,46,45],
[25,21,23,34,32,0,26,23,44,34],
[37,40,44,47,45,54,0,44,52,48],
[30,34,41,51,44,57,36,0,49,55],
[27,21,36,44,34,36,28,31,0,32],
[29,29,33,39,35,46,32,25,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,45,39,45,40,34,45,35,41],
[45,0,49,44,45,35,39,51,36,38],
[35,31,0,35,30,41,37,38,36,29],
[41,36,45,0,41,26,35,39,36,36],
[35,35,50,39,0,39,38,37,32,29],
[40,45,39,54,41,0,36,42,37,38],
[46,41,43,45,42,44,0,40,30,32],
[35,29,42,41,43,38,40,0,32,34],
[45,44,44,44,48,43,50,48,0,36],
[39,42,51,44,51,42,48,46,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,43,39,48,43,43,35,54,39],
[32,0,23,33,43,25,39,31,37,35],
[37,57,0,40,47,36,42,40,56,45],
[41,47,40,0,54,40,47,31,49,44],
[32,37,33,26,0,29,41,25,36,35],
[37,55,44,40,51,0,45,40,53,48],
[37,41,38,33,39,35,0,27,41,30],
[45,49,40,49,55,40,53,0,60,43],
[26,43,24,31,44,27,39,20,0,34],
[41,45,35,36,45,32,50,37,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,40,40,79,49,51,45,44,73],
[3,0,12,1,11,12,12,5,5,5],
[40,68,0,40,40,45,40,45,40,73],
[40,79,40,0,79,52,40,9,73,37],
[1,69,40,1,0,46,7,6,41,34],
[31,68,35,28,34,0,35,28,69,28],
[29,68,40,40,73,45,0,5,68,33],
[35,75,35,71,74,52,75,0,73,72],
[36,75,40,7,39,11,12,7,0,33],
[7,75,7,43,46,52,47,8,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,44,39,43,46,28,37,35,35],
[40,0,30,37,33,35,35,35,36,38],
[36,50,0,41,37,38,40,39,40,44],
[41,43,39,0,38,37,37,36,37,48],
[37,47,43,42,0,44,35,38,34,39],
[34,45,42,43,36,0,40,33,34,42],
[52,45,40,43,45,40,0,39,38,46],
[43,45,41,44,42,47,41,0,37,43],
[45,44,40,43,46,46,42,43,0,43],
[45,42,36,32,41,38,34,37,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,46,53,40,31,41,48,36,44],
[32,0,38,45,33,32,36,41,34,36],
[34,42,0,38,37,34,35,37,36,31],
[27,35,42,0,30,36,39,36,42,37],
[40,47,43,50,0,48,47,46,46,46],
[49,48,46,44,32,0,42,47,37,42],
[39,44,45,41,33,38,0,49,37,48],
[32,39,43,44,34,33,31,0,32,32],
[44,46,44,38,34,43,43,48,0,38],
[36,44,49,43,34,38,32,48,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,34,40,32,32,41,49,31,31],
[47,0,28,40,42,40,44,31,31,34],
[46,52,0,47,48,48,34,53,31,34],
[40,40,33,0,48,39,28,31,31,33],
[48,38,32,32,0,36,31,46,28,31],
[48,40,32,41,44,0,48,42,43,41],
[39,36,46,52,49,32,0,51,40,40],
[31,49,27,49,34,38,29,0,17,19],
[49,49,49,49,52,37,40,63,0,45],
[49,46,46,47,49,39,40,61,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,32,33,34,44,37,40,48,40],
[42,0,34,42,33,47,34,48,44,40],
[48,46,0,44,39,50,39,47,51,48],
[47,38,36,0,31,42,32,42,44,47],
[46,47,41,49,0,45,32,46,47,51],
[36,33,30,38,35,0,28,32,43,37],
[43,46,41,48,48,52,0,39,49,48],
[40,32,33,38,34,48,41,0,47,45],
[32,36,29,36,33,37,31,33,0,39],
[40,40,32,33,29,43,32,35,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,32,32,32,32,34,0,46,32],
[66,0,32,32,66,66,34,32,32,66],
[48,48,0,80,66,66,34,14,48,80],
[48,48,0,0,66,66,34,14,14,80],
[48,14,14,14,0,14,48,14,14,46],
[48,14,14,14,66,0,34,14,14,46],
[46,46,46,46,32,46,0,46,46,46],
[80,48,66,66,66,66,34,0,80,66],
[34,48,32,66,66,66,34,0,0,66],
[48,14,0,0,34,34,34,14,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,37,51,25,39,37,23,27,44],
[35,0,35,43,30,47,33,28,22,51],
[43,45,0,38,42,44,32,30,27,43],
[29,37,42,0,37,33,35,22,16,36],
[55,50,38,43,0,44,39,47,41,43],
[41,33,36,47,36,0,24,17,27,50],
[43,47,48,45,41,56,0,34,42,36],
[57,52,50,58,33,63,46,0,42,46],
[53,58,53,64,39,53,38,38,0,50],
[36,29,37,44,37,30,44,34,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,35,45,51,36,30,45,35,28],
[41,0,34,41,43,42,34,38,42,47],
[45,46,0,63,54,40,29,53,34,43],
[35,39,17,0,40,28,25,46,32,34],
[29,37,26,40,0,31,34,46,37,40],
[44,38,40,52,49,0,32,44,33,46],
[50,46,51,55,46,48,0,53,51,39],
[35,42,27,34,34,36,27,0,37,32],
[45,38,46,48,43,47,29,43,0,34],
[52,33,37,46,40,34,41,48,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,35,43,44,48,38,41,38,50],
[37,0,44,41,39,45,39,51,42,50],
[45,36,0,39,35,41,37,47,37,45],
[37,39,41,0,42,41,42,47,26,35],
[36,41,45,38,0,44,41,47,30,41],
[32,35,39,39,36,0,34,40,31,41],
[42,41,43,38,39,46,0,53,38,41],
[39,29,33,33,33,40,27,0,26,43],
[42,38,43,54,50,49,42,54,0,49],
[30,30,35,45,39,39,39,37,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,38,43,39,54,47,52,41,41],
[27,0,50,37,50,45,23,60,44,35],
[42,30,0,35,37,57,41,47,52,33],
[37,43,45,0,38,58,37,36,61,38],
[41,30,43,42,0,52,24,40,40,35],
[26,35,23,22,28,0,32,46,32,39],
[33,57,39,43,56,48,0,58,43,44],
[28,20,33,44,40,34,22,0,39,24],
[39,36,28,19,40,48,37,41,0,22],
[39,45,47,42,45,41,36,56,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,49,32,43,57,29,54,51,54],
[36,0,43,45,31,56,42,42,48,48],
[31,37,0,33,46,64,25,53,47,48],
[48,35,47,0,48,53,31,56,51,46],
[37,49,34,32,0,47,27,34,53,46],
[23,24,16,27,33,0,27,44,46,43],
[51,38,55,49,53,53,0,50,35,49],
[26,38,27,24,46,36,30,0,49,54],
[29,32,33,29,27,34,45,31,0,34],
[26,32,32,34,34,37,31,26,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,48,51,33,53,45,46,51,40],
[13,0,31,23,31,30,37,37,30,26],
[32,49,0,47,52,49,41,45,45,40],
[29,57,33,0,54,38,32,41,32,38],
[47,49,28,26,0,29,49,37,33,34],
[27,50,31,42,51,0,37,31,36,28],
[35,43,39,48,31,43,0,43,42,40],
[34,43,35,39,43,49,37,0,53,52],
[29,50,35,48,47,44,38,27,0,30],
[40,54,40,42,46,52,40,28,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,53,41,39,40,44,40,45,44],
[37,0,44,40,41,36,41,36,41,43],
[27,36,0,39,36,33,37,32,40,36],
[39,40,41,0,47,41,44,34,39,44],
[41,39,44,33,0,38,44,33,35,42],
[40,44,47,39,42,0,40,43,43,46],
[36,39,43,36,36,40,0,33,37,40],
[40,44,48,46,47,37,47,0,43,47],
[35,39,40,41,45,37,43,37,0,41],
[36,37,44,36,38,34,40,33,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,20,37,34,30,55,43,37,40],
[50,0,41,48,57,41,63,43,44,35],
[60,39,0,33,62,40,59,47,34,27],
[43,32,47,0,62,26,49,44,38,21],
[46,23,18,18,0,27,59,54,17,30],
[50,39,40,54,53,0,54,50,43,43],
[25,17,21,31,21,26,0,42,31,16],
[37,37,33,36,26,30,38,0,36,26],
[43,36,46,42,63,37,49,44,0,22],
[40,45,53,59,50,37,64,54,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,44,48,51,51,36,46,48,49],
[39,0,36,39,44,34,38,43,37,41],
[36,44,0,41,39,37,40,44,47,47],
[32,41,39,0,40,34,42,39,43,43],
[29,36,41,40,0,40,40,43,36,37],
[29,46,43,46,40,0,43,40,42,46],
[44,42,40,38,40,37,0,38,39,45],
[34,37,36,41,37,40,42,0,37,38],
[32,43,33,37,44,38,41,43,0,49],
[31,39,33,37,43,34,35,42,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,46,54,37,61,51,41,31,33],
[31,0,22,39,38,40,45,33,25,28],
[34,58,0,51,44,58,47,43,38,31],
[26,41,29,0,26,44,37,31,31,30],
[43,42,36,54,0,43,57,42,35,40],
[19,40,22,36,37,0,36,35,21,30],
[29,35,33,43,23,44,0,34,32,31],
[39,47,37,49,38,45,46,0,38,37],
[49,55,42,49,45,59,48,42,0,39],
[47,52,49,50,40,50,49,43,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,40,43,49,40,43,42,50,48],
[27,0,38,37,48,36,36,33,38,46],
[40,42,0,42,41,34,36,44,43,46],
[37,43,38,0,44,38,42,37,45,41],
[31,32,39,36,0,31,34,29,36,39],
[40,44,46,42,49,0,48,43,46,39],
[37,44,44,38,46,32,0,40,38,39],
[38,47,36,43,51,37,40,0,43,40],
[30,42,37,35,44,34,42,37,0,40],
[32,34,34,39,41,41,41,40,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,59,69,41,28,64,58,53,55],
[21,0,26,48,22,19,19,31,24,20],
[21,54,0,54,20,19,37,31,26,31],
[11,32,26,0,9,16,32,15,32,32],
[39,58,60,71,0,42,54,70,54,46],
[52,61,61,64,38,0,60,41,49,61],
[16,61,43,48,26,20,0,35,36,36],
[22,49,49,65,10,39,45,0,41,39],
[27,56,54,48,26,31,44,39,0,27],
[25,60,49,48,34,19,44,41,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,45,44,48,40,49,44,47,44],
[36,0,52,41,46,43,47,40,53,44],
[35,28,0,36,38,41,43,36,42,43],
[36,39,44,0,39,45,50,48,46,53],
[32,34,42,41,0,42,47,46,47,52],
[40,37,39,35,38,0,45,47,44,45],
[31,33,37,30,33,35,0,31,40,29],
[36,40,44,32,34,33,49,0,53,39],
[33,27,38,34,33,36,40,27,0,41],
[36,36,37,27,28,35,51,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,49,47,38,40,45,46,40,40],
[35,0,40,41,35,33,35,38,31,28],
[31,40,0,41,34,34,37,38,33,24],
[33,39,39,0,38,33,38,34,34,33],
[42,45,46,42,0,47,46,39,42,40],
[40,47,46,47,33,0,47,38,33,34],
[35,45,43,42,34,33,0,42,32,33],
[34,42,42,46,41,42,38,0,34,32],
[40,49,47,46,38,47,48,46,0,38],
[40,52,56,47,40,46,47,48,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,41,40,37,48,46,42,36,47],
[45,0,45,46,47,43,48,45,35,53],
[39,35,0,42,43,40,47,42,40,48],
[40,34,38,0,38,40,44,36,38,50],
[43,33,37,42,0,39,43,42,40,48],
[32,37,40,40,41,0,49,40,29,47],
[34,32,33,36,37,31,0,40,33,45],
[38,35,38,44,38,40,40,0,38,47],
[44,45,40,42,40,51,47,42,0,49],
[33,27,32,30,32,33,35,33,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,35,27,32,25,35,32,34,33],
[52,0,45,36,36,39,46,41,40,35],
[45,35,0,34,34,30,41,39,34,24],
[53,44,46,0,40,37,45,40,41,50],
[48,44,46,40,0,41,51,39,48,46],
[55,41,50,43,39,0,44,42,43,42],
[45,34,39,35,29,36,0,43,32,31],
[48,39,41,40,41,38,37,0,39,43],
[46,40,46,39,32,37,48,41,0,37],
[47,45,56,30,34,38,49,37,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,45,42,44,51,40,44,43],
[39,0,35,49,37,36,48,36,49,36],
[39,45,0,47,37,40,44,40,53,44],
[35,31,33,0,27,32,34,35,46,32],
[38,43,43,53,0,35,47,39,48,44],
[36,44,40,48,45,0,45,44,45,43],
[29,32,36,46,33,35,0,35,36,33],
[40,44,40,45,41,36,45,0,48,42],
[36,31,27,34,32,35,44,32,0,37],
[37,44,36,48,36,37,47,38,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,58,47,32,31,31,18,32,42],
[64,0,55,56,62,37,58,18,43,60],
[22,25,0,54,34,50,50,24,27,47],
[33,24,26,0,38,23,49,36,27,63],
[48,18,46,42,0,41,54,27,18,49],
[49,43,30,57,39,0,54,27,31,60],
[49,22,30,31,26,26,0,19,14,45],
[62,62,56,44,53,53,61,0,27,58],
[48,37,53,53,62,49,66,53,0,60],
[38,20,33,17,31,20,35,22,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,38,40,35,33,36,45,39,30],
[43,0,36,39,40,36,41,49,39,34],
[42,44,0,47,42,37,42,50,46,36],
[40,41,33,0,37,40,36,43,36,36],
[45,40,38,43,0,35,40,45,36,33],
[47,44,43,40,45,0,47,55,45,47],
[44,39,38,44,40,33,0,49,45,34],
[35,31,30,37,35,25,31,0,35,32],
[41,41,34,44,44,35,35,45,0,38],
[50,46,44,44,47,33,46,48,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,37,55,49,35,45,53,38,59],
[26,0,36,44,34,32,39,40,31,46],
[43,44,0,72,52,33,40,70,45,54],
[25,36,8,0,33,34,17,38,31,28],
[31,46,28,47,0,34,41,37,34,47],
[45,48,47,46,46,0,41,55,26,45],
[35,41,40,63,39,39,0,57,45,33],
[27,40,10,42,43,25,23,0,18,25],
[42,49,35,49,46,54,35,62,0,43],
[21,34,26,52,33,35,47,55,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,28,36,38,35,33,35,34,33],
[48,0,37,51,44,42,43,45,38,42],
[52,43,0,51,46,41,47,46,43,39],
[44,29,29,0,39,37,34,38,36,36],
[42,36,34,41,0,38,35,43,39,42],
[45,38,39,43,42,0,35,45,37,46],
[47,37,33,46,45,45,0,43,36,41],
[45,35,34,42,37,35,37,0,36,43],
[46,42,37,44,41,43,44,44,0,45],
[47,38,41,44,38,34,39,37,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,44,47,43,43,40,39,40,31],
[34,0,43,40,53,39,34,34,37,36],
[36,37,0,43,49,43,40,37,37,35],
[33,40,37,0,39,32,34,30,35,31],
[37,27,31,41,0,44,34,38,30,35],
[37,41,37,48,36,0,34,40,42,29],
[40,46,40,46,46,46,0,38,32,41],
[41,46,43,50,42,40,42,0,40,41],
[40,43,43,45,50,38,48,40,0,42],
[49,44,45,49,45,51,39,39,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,24,42,33,33,39,44,45,43],
[40,0,27,45,36,40,32,28,41,33],
[56,53,0,56,42,43,41,53,55,39],
[38,35,24,0,29,35,24,37,48,33],
[47,44,38,51,0,37,45,43,59,41],
[47,40,37,45,43,0,30,35,49,39],
[41,48,39,56,35,50,0,49,50,47],
[36,52,27,43,37,45,31,0,49,34],
[35,39,25,32,21,31,30,31,0,25],
[37,47,41,47,39,41,33,46,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,25,38,31,44,34,38,56,7],
[63,0,55,54,51,68,37,52,63,38],
[55,25,0,54,43,60,42,32,54,37],
[42,26,26,0,49,32,28,33,58,39],
[49,29,37,31,0,31,37,19,51,22],
[36,12,20,48,49,0,36,36,44,41],
[46,43,38,52,43,44,0,44,69,43],
[42,28,48,47,61,44,36,0,48,47],
[24,17,26,22,29,36,11,32,0,16],
[73,42,43,41,58,39,37,33,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,49,49,44,45,39,55,43,34],
[36,0,29,46,33,40,30,37,32,30],
[31,51,0,37,53,48,44,55,35,48],
[31,34,43,0,39,41,27,49,27,31],
[36,47,27,41,0,49,47,51,37,40],
[35,40,32,39,31,0,31,44,37,28],
[41,50,36,53,33,49,0,52,35,32],
[25,43,25,31,29,36,28,0,36,33],
[37,48,45,53,43,43,45,44,0,41],
[46,50,32,49,40,52,48,47,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,37,44,41,43,39,41,35,37],
[42,0,34,38,42,33,41,38,42,35],
[43,46,0,49,47,45,45,40,38,37],
[36,42,31,0,37,25,41,40,40,35],
[39,38,33,43,0,32,28,37,28,40],
[37,47,35,55,48,0,31,52,39,33],
[41,39,35,39,52,49,0,42,46,48],
[39,42,40,40,43,28,38,0,36,38],
[45,38,42,40,52,41,34,44,0,47],
[43,45,43,45,40,47,32,42,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,46,76,46,45,43,67,46,0],
[45,0,11,43,45,43,45,76,76,43],
[34,69,0,45,34,36,34,69,78,34],
[4,37,35,0,37,2,34,35,35,0],
[34,35,46,43,0,34,43,67,44,0],
[35,37,44,78,46,0,45,37,46,0],
[37,35,46,46,37,35,0,35,46,2],
[13,4,11,45,13,43,45,0,46,11],
[34,4,2,45,36,34,34,34,0,32],
[80,37,46,80,80,80,78,69,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,41,54,45,41,53,43,53,54],
[41,0,49,55,48,43,56,33,49,52],
[39,31,0,49,53,36,49,43,50,57],
[26,25,31,0,47,37,46,37,45,45],
[35,32,27,33,0,20,35,32,54,37],
[39,37,44,43,60,0,49,42,56,48],
[27,24,31,34,45,31,0,27,45,42],
[37,47,37,43,48,38,53,0,49,55],
[27,31,30,35,26,24,35,31,0,45],
[26,28,23,35,43,32,38,25,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,42,43,41,45,56,43,37,40],
[27,0,34,40,33,40,40,40,37,37],
[38,46,0,42,37,52,50,46,40,48],
[37,40,38,0,34,39,51,40,35,37],
[39,47,43,46,0,40,50,40,33,47],
[35,40,28,41,40,0,55,41,39,39],
[24,40,30,29,30,25,0,26,38,32],
[37,40,34,40,40,39,54,0,38,44],
[43,43,40,45,47,41,42,42,0,52],
[40,43,32,43,33,41,48,36,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,34,47,42,39,40,41,36,41],
[39,0,35,34,40,35,37,36,39,41],
[46,45,0,39,46,41,46,39,42,39],
[33,46,41,0,39,35,38,35,41,36],
[38,40,34,41,0,39,29,31,36,36],
[41,45,39,45,41,0,39,38,36,43],
[40,43,34,42,51,41,0,39,41,37],
[39,44,41,45,49,42,41,0,38,40],
[44,41,38,39,44,44,39,42,0,44],
[39,39,41,44,44,37,43,40,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,41,41,42,48,37,42,35],
[38,0,42,40,40,41,43,37,39,45],
[38,38,0,37,42,36,41,45,43,41],
[39,40,43,0,42,43,41,33,36,42],
[39,40,38,38,0,38,38,31,39,45],
[38,39,44,37,42,0,41,36,41,40],
[32,37,39,39,42,39,0,34,38,39],
[43,43,35,47,49,44,46,0,48,45],
[38,41,37,44,41,39,42,32,0,42],
[45,35,39,38,35,40,41,35,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,44,48,38,47,49,42,41,45],
[35,0,40,44,43,41,37,36,37,37],
[36,40,0,39,40,44,40,37,38,42],
[32,36,41,0,33,39,45,33,32,37],
[42,37,40,47,0,41,46,37,46,42],
[33,39,36,41,39,0,40,40,32,38],
[31,43,40,35,34,40,0,30,30,37],
[38,44,43,47,43,40,50,0,41,43],
[39,43,42,48,34,48,50,39,0,45],
[35,43,38,43,38,42,43,37,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,38,41,38,33,44,36,35],
[37,0,49,38,45,34,36,44,40,34],
[40,31,0,40,43,35,38,37,37,33],
[42,42,40,0,44,36,40,40,43,33],
[39,35,37,36,0,37,34,36,33,32],
[42,46,45,44,43,0,39,46,43,40],
[47,44,42,40,46,41,0,50,39,42],
[36,36,43,40,44,34,30,0,36,36],
[44,40,43,37,47,37,41,44,0,37],
[45,46,47,47,48,40,38,44,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,54,42,40,59,37,39,49,43],
[27,0,43,30,21,45,29,34,41,28],
[26,37,0,33,36,39,28,34,36,37],
[38,50,47,0,37,54,44,50,49,41],
[40,59,44,43,0,53,41,45,51,38],
[21,35,41,26,27,0,28,18,32,29],
[43,51,52,36,39,52,0,43,53,45],
[41,46,46,30,35,62,37,0,52,42],
[31,39,44,31,29,48,27,28,0,41],
[37,52,43,39,42,51,35,38,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,37,52,33,30,23,38,35,13],
[55,0,24,57,24,28,31,37,42,38],
[43,56,0,45,53,41,52,40,54,39],
[28,23,35,0,27,33,19,34,43,13],
[47,56,27,53,0,40,38,40,59,35],
[50,52,39,47,40,0,42,45,54,43],
[57,49,28,61,42,38,0,57,45,56],
[42,43,40,46,40,35,23,0,40,36],
[45,38,26,37,21,26,35,40,0,36],
[67,42,41,67,45,37,24,44,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,53,40,32,39,35,34,35,39],
[43,0,50,47,36,37,32,44,37,35],
[27,30,0,38,21,36,30,31,30,40],
[40,33,42,0,31,32,28,33,39,37],
[48,44,59,49,0,43,40,47,46,45],
[41,43,44,48,37,0,35,45,43,44],
[45,48,50,52,40,45,0,38,49,43],
[46,36,49,47,33,35,42,0,33,35],
[45,43,50,41,34,37,31,47,0,32],
[41,45,40,43,35,36,37,45,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,41,42,47,45,34,37,41,40],
[38,0,38,36,38,39,40,37,37,39],
[39,42,0,40,41,44,39,36,37,38],
[38,44,40,0,40,45,33,36,37,30],
[33,42,39,40,0,38,39,32,39,37],
[35,41,36,35,42,0,40,39,38,33],
[46,40,41,47,41,40,0,41,43,43],
[43,43,44,44,48,41,39,0,41,37],
[39,43,43,43,41,42,37,39,0,40],
[40,41,42,50,43,47,37,43,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,35,51,45,47,54,57,55,50],
[25,0,35,34,37,37,43,41,37,26],
[45,45,0,46,31,39,48,38,52,31],
[29,46,34,0,37,31,39,35,46,38],
[35,43,49,43,0,27,30,38,50,24],
[33,43,41,49,53,0,44,32,55,41],
[26,37,32,41,50,36,0,35,57,45],
[23,39,42,45,42,48,45,0,55,51],
[25,43,28,34,30,25,23,25,0,24],
[30,54,49,42,56,39,35,29,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,48,32,46,47,39,64,53,46],
[39,0,37,36,41,45,40,46,47,33],
[32,43,0,38,49,32,33,50,47,43],
[48,44,42,0,50,48,35,54,49,45],
[34,39,31,30,0,37,33,48,38,39],
[33,35,48,32,43,0,29,52,48,42],
[41,40,47,45,47,51,0,49,47,45],
[16,34,30,26,32,28,31,0,44,27],
[27,33,33,31,42,32,33,36,0,41],
[34,47,37,35,41,38,35,53,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,35,52,0,61,33,0,12],
[80,0,33,35,52,0,61,33,40,73],
[80,47,0,35,52,19,80,52,52,80],
[45,45,45,0,45,12,73,45,45,45],
[28,28,28,35,0,0,28,33,0,40],
[80,80,61,68,80,0,61,33,52,80],
[19,19,0,7,52,19,0,45,19,19],
[47,47,28,35,47,47,35,0,19,47],
[80,40,28,35,80,28,61,61,0,40],
[68,7,0,35,40,0,61,33,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,52,28,25,45,35,31,31,28],
[45,0,49,24,21,34,45,23,56,35],
[28,31,0,14,27,30,45,16,45,31],
[52,56,66,0,35,69,48,35,51,38],
[55,59,53,45,0,44,73,40,59,45],
[35,46,50,11,36,0,42,31,39,36],
[45,35,35,32,7,38,0,34,35,25],
[49,57,64,45,40,49,46,0,63,26],
[49,24,35,29,21,41,45,17,0,24],
[52,45,49,42,35,44,55,54,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,28,37,34,14,34,30,33,41],
[50,0,35,56,45,38,28,29,32,38],
[52,45,0,61,46,31,48,38,43,49],
[43,24,19,0,43,29,37,28,29,43],
[46,35,34,37,0,30,39,38,43,37],
[66,42,49,51,50,0,43,43,39,44],
[46,52,32,43,41,37,0,37,45,33],
[50,51,42,52,42,37,43,0,48,33],
[47,48,37,51,37,41,35,32,0,48],
[39,42,31,37,43,36,47,47,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,50,49,48,51,33,44,34,40],
[39,0,43,48,53,46,44,44,38,40],
[30,37,0,54,38,35,27,37,34,38],
[31,32,26,0,35,33,26,33,25,29],
[32,27,42,45,0,40,18,31,26,32],
[29,34,45,47,40,0,26,42,31,41],
[47,36,53,54,62,54,0,51,46,50],
[36,36,43,47,49,38,29,0,37,40],
[46,42,46,55,54,49,34,43,0,38],
[40,40,42,51,48,39,30,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,46,31,45,44,50,37,47,42],
[40,0,42,40,42,42,46,38,45,35],
[34,38,0,36,45,42,52,47,52,31],
[49,40,44,0,43,42,49,36,47,42],
[35,38,35,37,0,31,43,40,42,42],
[36,38,38,38,49,0,55,47,49,45],
[30,34,28,31,37,25,0,31,39,35],
[43,42,33,44,40,33,49,0,46,38],
[33,35,28,33,38,31,41,34,0,35],
[38,45,49,38,38,35,45,42,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,59,50,45,65,40,50,55,56],
[34,0,41,43,38,39,52,35,52,34],
[21,39,0,28,34,37,39,29,45,27],
[30,37,52,0,33,45,40,24,44,47],
[35,42,46,47,0,36,40,39,47,40],
[15,41,43,35,44,0,43,35,35,43],
[40,28,41,40,40,37,0,32,44,35],
[30,45,51,56,41,45,48,0,56,44],
[25,28,35,36,33,45,36,24,0,35],
[24,46,53,33,40,37,45,36,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,40,46,36,42,35,45,46,45],
[41,0,42,43,39,42,47,45,36,45],
[40,38,0,38,41,38,39,48,37,45],
[34,37,42,0,41,36,40,47,35,37],
[44,41,39,39,0,42,42,45,35,45],
[38,38,42,44,38,0,36,47,43,43],
[45,33,41,40,38,44,0,48,32,48],
[35,35,32,33,35,33,32,0,33,37],
[34,44,43,45,45,37,48,47,0,46],
[35,35,35,43,35,37,32,43,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,39,38,43,37,45,40,40,40],
[36,0,38,38,41,37,37,36,32,36],
[41,42,0,43,40,35,41,36,35,39],
[42,42,37,0,44,36,40,40,39,37],
[37,39,40,36,0,40,42,38,41,42],
[43,43,45,44,40,0,48,47,46,44],
[35,43,39,40,38,32,0,34,35,37],
[40,44,44,40,42,33,46,0,41,42],
[40,48,45,41,39,34,45,39,0,37],
[40,44,41,43,38,36,43,38,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,30,32,46,40,34,41,35,40],
[50,0,36,44,43,49,34,32,33,43],
[50,44,0,44,53,49,38,44,41,47],
[48,36,36,0,50,48,31,39,43,49],
[34,37,27,30,0,34,31,29,29,36],
[40,31,31,32,46,0,28,28,30,41],
[46,46,42,49,49,52,0,38,34,53],
[39,48,36,41,51,52,42,0,41,53],
[45,47,39,37,51,50,46,39,0,53],
[40,37,33,31,44,39,27,27,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,54,53,43,37,45,46,42,55],
[39,0,48,44,44,42,45,37,33,44],
[26,32,0,40,26,29,37,29,31,41],
[27,36,40,0,37,27,41,37,43,46],
[37,36,54,43,0,38,42,44,35,52],
[43,38,51,53,42,0,37,40,38,43],
[35,35,43,39,38,43,0,32,40,35],
[34,43,51,43,36,40,48,0,40,51],
[38,47,49,37,45,42,40,40,0,51],
[25,36,39,34,28,37,45,29,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,44,34,48,33,45,32,62,39],
[21,0,28,12,33,30,12,26,32,34],
[36,52,0,37,45,43,39,31,49,46],
[46,68,43,0,30,57,49,47,52,61],
[32,47,35,50,0,35,50,38,40,38],
[47,50,37,23,45,0,34,25,63,55],
[35,68,41,31,30,46,0,42,62,57],
[48,54,49,33,42,55,38,0,48,56],
[18,48,31,28,40,17,18,32,0,47],
[41,46,34,19,42,25,23,24,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,43,67,27,45,59,57,41,45],
[21,0,42,48,35,29,35,24,40,43],
[37,38,0,45,48,34,30,51,51,24],
[13,32,35,0,37,18,32,48,35,32],
[53,45,32,43,0,18,45,38,30,48],
[35,51,46,62,62,0,32,51,49,54],
[21,45,50,48,35,48,0,24,40,35],
[23,56,29,32,42,29,56,0,16,45],
[39,40,29,45,50,31,40,64,0,48],
[35,37,56,48,32,26,45,35,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,44,32,42,42,25,38,32,40],
[39,0,54,31,38,35,44,39,41,48],
[36,26,0,24,30,25,16,21,22,35],
[48,49,56,0,51,47,31,35,41,37],
[38,42,50,29,0,33,29,32,40,35],
[38,45,55,33,47,0,40,39,41,42],
[55,36,64,49,51,40,0,28,38,57],
[42,41,59,45,48,41,52,0,37,48],
[48,39,58,39,40,39,42,43,0,49],
[40,32,45,43,45,38,23,32,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,32,49,57,56,56,39,40,40],
[35,0,25,55,50,54,48,41,33,26],
[48,55,0,59,51,57,50,44,38,47],
[31,25,21,0,57,40,52,35,25,29],
[23,30,29,23,0,42,34,33,21,30],
[24,26,23,40,38,0,57,50,29,23],
[24,32,30,28,46,23,0,19,26,21],
[41,39,36,45,47,30,61,0,34,38],
[40,47,42,55,59,51,54,46,0,65],
[40,54,33,51,50,57,59,42,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,49,44,38,46,39,30,39,40],
[45,0,37,45,33,49,40,36,50,37],
[31,43,0,34,36,43,38,30,39,40],
[36,35,46,0,34,51,39,38,45,40],
[42,47,44,46,0,46,39,41,43,41],
[34,31,37,29,34,0,36,33,37,29],
[41,40,42,41,41,44,0,35,41,43],
[50,44,50,42,39,47,45,0,48,49],
[41,30,41,35,37,43,39,32,0,36],
[40,43,40,40,39,51,37,31,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,51,40,53,45,54,60,46,42],
[27,0,34,31,38,34,45,43,43,34],
[29,46,0,40,54,43,51,48,39,26],
[40,49,40,0,45,48,47,63,43,28],
[27,42,26,35,0,41,31,45,37,19],
[35,46,37,32,39,0,40,46,30,34],
[26,35,29,33,49,40,0,45,34,35],
[20,37,32,17,35,34,35,0,30,35],
[34,37,41,37,43,50,46,50,0,33],
[38,46,54,52,61,46,45,45,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,37,32,35,39,30,37,45,42],
[45,0,33,39,37,46,33,36,42,42],
[43,47,0,43,46,52,40,42,50,46],
[48,41,37,0,38,47,43,45,49,46],
[45,43,34,42,0,45,35,36,44,37],
[41,34,28,33,35,0,29,32,40,38],
[50,47,40,37,45,51,0,41,54,51],
[43,44,38,35,44,48,39,0,44,45],
[35,38,30,31,36,40,26,36,0,37],
[38,38,34,34,43,42,29,35,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,43,45,44,42,46,48,38,36],
[36,0,45,47,46,37,40,39,43,35],
[37,35,0,39,47,46,40,43,45,36],
[35,33,41,0,45,38,38,36,44,33],
[36,34,33,35,0,39,35,33,41,34],
[38,43,34,42,41,0,41,42,37,36],
[34,40,40,42,45,39,0,38,42,40],
[32,41,37,44,47,38,42,0,42,36],
[42,37,35,36,39,43,38,38,0,32],
[44,45,44,47,46,44,40,44,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,38,39,41,33,40,36,34,37],
[39,0,32,43,38,37,37,38,31,39],
[42,48,0,47,43,34,52,31,37,45],
[41,37,33,0,37,34,44,43,39,43],
[39,42,37,43,0,34,51,34,38,39],
[47,43,46,46,46,0,42,32,35,46],
[40,43,28,36,29,38,0,40,34,33],
[44,42,49,37,46,48,40,0,43,48],
[46,49,43,41,42,45,46,37,0,41],
[43,41,35,37,41,34,47,32,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,36,38,32,32,40,35,36,43],
[46,0,35,46,34,36,37,30,37,45],
[44,45,0,48,47,45,39,46,40,50],
[42,34,32,0,40,36,29,33,28,32],
[48,46,33,40,0,33,38,39,37,41],
[48,44,35,44,47,0,39,40,37,44],
[40,43,41,51,42,41,0,41,34,45],
[45,50,34,47,41,40,39,0,34,39],
[44,43,40,52,43,43,46,46,0,51],
[37,35,30,48,39,36,35,41,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,37,44,41,36,40,35,41,38],
[43,0,36,42,39,38,39,42,47,40],
[43,44,0,44,37,36,34,45,41,40],
[36,38,36,0,38,28,29,34,33,37],
[39,41,43,42,0,33,38,41,41,39],
[44,42,44,52,47,0,37,41,37,43],
[40,41,46,51,42,43,0,43,44,40],
[45,38,35,46,39,39,37,0,38,38],
[39,33,39,47,39,43,36,42,0,39],
[42,40,40,43,41,37,40,42,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,46,41,44,40,40,48,44,46],
[31,0,30,37,32,38,40,38,37,31],
[34,50,0,41,39,39,36,43,44,42],
[39,43,39,0,35,39,45,49,43,38],
[36,48,41,45,0,45,46,44,42,39],
[40,42,41,41,35,0,41,41,35,42],
[40,40,44,35,34,39,0,39,36,33],
[32,42,37,31,36,39,41,0,35,38],
[36,43,36,37,38,45,44,45,0,43],
[34,49,38,42,41,38,47,42,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,40,39,40,42,47,42,40,36],
[38,0,38,39,46,45,45,42,42,41],
[40,42,0,42,43,43,46,40,40,42],
[41,41,38,0,44,45,46,38,40,41],
[40,34,37,36,0,41,41,40,33,40],
[38,35,37,35,39,0,44,39,39,38],
[33,35,34,34,39,36,0,38,34,34],
[38,38,40,42,40,41,42,0,38,40],
[40,38,40,40,47,41,46,42,0,40],
[44,39,38,39,40,42,46,40,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,33,40,48,26,28,52,30,56],
[28,0,15,36,37,35,28,27,20,44],
[47,65,0,27,52,48,39,47,51,49],
[40,44,53,0,55,56,45,60,40,63],
[32,43,28,25,0,36,37,47,30,40],
[54,45,32,24,44,0,26,53,40,48],
[52,52,41,35,43,54,0,51,43,44],
[28,53,33,20,33,27,29,0,19,46],
[50,60,29,40,50,40,37,61,0,50],
[24,36,31,17,40,32,36,34,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,33,37,32,41,43,42,34],
[52,0,45,35,30,41,45,49,40,47],
[54,35,0,36,36,44,55,47,39,45],
[47,45,44,0,38,47,48,47,42,43],
[43,50,44,42,0,46,47,45,40,50],
[48,39,36,33,34,0,39,43,35,38],
[39,35,25,32,33,41,0,41,30,38],
[37,31,33,33,35,37,39,0,39,44],
[38,40,41,38,40,45,50,41,0,40],
[46,33,35,37,30,42,42,36,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,41,31,42,28,30,33,42,38],
[38,0,33,28,34,24,31,28,41,29],
[39,47,0,31,36,38,39,33,40,34],
[49,52,49,0,51,44,38,38,49,45],
[38,46,44,29,0,30,40,35,43,33],
[52,56,42,36,50,0,43,41,45,47],
[50,49,41,42,40,37,0,44,46,45],
[47,52,47,42,45,39,36,0,40,42],
[38,39,40,31,37,35,34,40,0,31],
[42,51,46,35,47,33,35,38,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,43,40,53,39,47,39,43,44],
[36,0,40,35,45,37,42,36,35,42],
[37,40,0,43,49,37,37,44,41,43],
[40,45,37,0,51,40,47,37,44,49],
[27,35,31,29,0,31,34,31,36,41],
[41,43,43,40,49,0,44,39,49,50],
[33,38,43,33,46,36,0,41,43,46],
[41,44,36,43,49,41,39,0,41,45],
[37,45,39,36,44,31,37,39,0,40],
[36,38,37,31,39,30,34,35,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,30,36,35,34,35,23,28,31],
[46,0,32,43,53,49,42,42,39,43],
[50,48,0,44,42,42,39,36,35,39],
[44,37,36,0,38,36,32,38,43,44],
[45,27,38,42,0,40,42,36,25,40],
[46,31,38,44,40,0,35,37,43,42],
[45,38,41,48,38,45,0,33,36,42],
[57,38,44,42,44,43,47,0,41,50],
[52,41,45,37,55,37,44,39,0,46],
[49,37,41,36,40,38,38,30,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,49,36,54,41,50,51,51,49],
[32,0,43,40,41,39,41,42,39,38],
[31,37,0,34,39,40,45,40,37,36],
[44,40,46,0,58,41,47,48,39,39],
[26,39,41,22,0,34,46,37,29,28],
[39,41,40,39,46,0,45,41,34,38],
[30,39,35,33,34,35,0,41,35,40],
[29,38,40,32,43,39,39,0,31,35],
[29,41,43,41,51,46,45,49,0,44],
[31,42,44,41,52,42,40,45,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,34,46,45,38,42,31,42,31],
[50,0,45,56,47,55,48,38,49,43],
[46,35,0,50,40,39,37,34,47,35],
[34,24,30,0,35,34,36,18,32,28],
[35,33,40,45,0,34,42,37,34,25],
[42,25,41,46,46,0,35,37,33,32],
[38,32,43,44,38,45,0,39,35,29],
[49,42,46,62,43,43,41,0,41,35],
[38,31,33,48,46,47,45,39,0,21],
[49,37,45,52,55,48,51,45,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,37,42,38,43,39,35,32,42],
[30,0,24,30,33,38,34,34,32,29],
[43,56,0,42,49,47,42,52,40,50],
[38,50,38,0,37,45,41,35,33,38],
[42,47,31,43,0,40,32,37,40,49],
[37,42,33,35,40,0,38,38,32,36],
[41,46,38,39,48,42,0,45,42,49],
[45,46,28,45,43,42,35,0,32,48],
[48,48,40,47,40,48,38,48,0,50],
[38,51,30,42,31,44,31,32,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,40,50,40,39,41,44,35,45],
[38,0,40,44,37,34,36,40,36,42],
[40,40,0,39,36,40,32,45,34,39],
[30,36,41,0,37,39,32,39,35,35],
[40,43,44,43,0,43,43,46,40,42],
[41,46,40,41,37,0,38,41,37,43],
[39,44,48,48,37,42,0,45,37,39],
[36,40,35,41,34,39,35,0,39,41],
[45,44,46,45,40,43,43,41,0,43],
[35,38,41,45,38,37,41,39,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,40,48,34,44,38,49,41,42],
[32,0,43,39,38,41,39,42,37,33],
[40,37,0,41,35,40,39,41,43,35],
[32,41,39,0,37,33,40,42,36,37],
[46,42,45,43,0,41,40,47,43,40],
[36,39,40,47,39,0,43,43,41,35],
[42,41,41,40,40,37,0,49,42,40],
[31,38,39,38,33,37,31,0,34,28],
[39,43,37,44,37,39,38,46,0,38],
[38,47,45,43,40,45,40,52,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,39,62,53,53,14,41,80,32],
[0,0,21,35,39,21,14,14,14,14],
[41,59,0,62,53,35,14,41,41,14],
[18,45,18,0,18,39,0,18,18,32],
[27,41,27,62,0,21,41,41,41,41],
[27,59,45,41,59,0,41,41,59,59],
[66,66,66,80,39,39,0,80,80,80],
[39,66,39,62,39,39,0,0,53,32],
[0,66,39,62,39,21,0,27,0,14],
[48,66,66,48,39,21,0,48,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,47,34,60,37,38,49,48,35],
[40,0,35,39,38,21,24,53,30,39],
[33,45,0,46,57,39,54,50,58,24],
[46,41,34,0,53,16,24,55,35,30],
[20,42,23,27,0,17,25,34,25,33],
[43,59,41,64,63,0,39,41,58,40],
[42,56,26,56,55,41,0,54,47,27],
[31,27,30,25,46,39,26,0,41,23],
[32,50,22,45,55,22,33,39,0,29],
[45,41,56,50,47,40,53,57,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,41,39,47,39,47,39,32,33],
[38,0,32,28,40,46,30,40,28,40],
[39,48,0,41,54,44,48,39,41,37],
[41,52,39,0,46,46,44,43,33,44],
[33,40,26,34,0,44,33,27,28,35],
[41,34,36,34,36,0,28,35,31,29],
[33,50,32,36,47,52,0,29,35,47],
[41,40,41,37,53,45,51,0,37,42],
[48,52,39,47,52,49,45,43,0,43],
[47,40,43,36,45,51,33,38,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,36,41,37,46,47,33,43,36],
[41,0,42,46,43,43,41,39,37,40],
[44,38,0,43,44,49,36,41,35,40],
[39,34,37,0,35,43,38,42,37,42],
[43,37,36,45,0,48,33,42,34,37],
[34,37,31,37,32,0,31,34,30,32],
[33,39,44,42,47,49,0,49,37,44],
[47,41,39,38,38,46,31,0,32,42],
[37,43,45,43,46,50,43,48,0,46],
[44,40,40,38,43,48,36,38,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,41,48,46,48,43,36,42,38],
[42,0,29,52,36,36,36,42,40,32],
[39,51,0,53,40,39,50,38,37,49],
[32,28,27,0,38,41,38,35,32,32],
[34,44,40,42,0,44,48,30,37,39],
[32,44,41,39,36,0,41,32,48,32],
[37,44,30,42,32,39,0,34,35,35],
[44,38,42,45,50,48,46,0,45,48],
[38,40,43,48,43,32,45,35,0,36],
[42,48,31,48,41,48,45,32,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,28,44,25,32,35,39,32,24],
[39,0,32,39,28,35,42,26,28,36],
[52,48,0,46,32,31,45,32,37,31],
[36,41,34,0,38,34,39,36,35,33],
[55,52,48,42,0,40,52,45,54,40],
[48,45,49,46,40,0,43,32,54,42],
[45,38,35,41,28,37,0,37,36,28],
[41,54,48,44,35,48,43,0,50,35],
[48,52,43,45,26,26,44,30,0,28],
[56,44,49,47,40,38,52,45,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,43,39,44,36,46,38,42,36],
[46,0,50,36,49,46,42,50,48,41],
[37,30,0,29,38,40,34,35,38,30],
[41,44,51,0,50,43,35,42,44,39],
[36,31,42,30,0,47,42,30,40,35],
[44,34,40,37,33,0,41,29,26,40],
[34,38,46,45,38,39,0,31,44,29],
[42,30,45,38,50,51,49,0,36,32],
[38,32,42,36,40,54,36,44,0,46],
[44,39,50,41,45,40,51,48,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,47,45,39,47,43,53,51],
[39,0,32,42,42,40,43,44,45,42],
[39,48,0,49,48,51,46,52,42,47],
[33,38,31,0,39,33,43,39,37,38],
[35,38,32,41,0,40,46,45,49,47],
[41,40,29,47,40,0,57,39,42,39],
[33,37,34,37,34,23,0,33,42,43],
[37,36,28,41,35,41,47,0,44,38],
[27,35,38,43,31,38,38,36,0,38],
[29,38,33,42,33,41,37,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,43,43,41,40,34,40,40,43],
[40,0,39,32,33,30,33,37,34,41],
[37,41,0,35,32,32,38,40,40,43],
[37,48,45,0,37,40,45,40,40,42],
[39,47,48,43,0,37,44,42,36,42],
[40,50,48,40,43,0,47,41,44,45],
[46,47,42,35,36,33,0,40,41,34],
[40,43,40,40,38,39,40,0,37,50],
[40,46,40,40,44,36,39,43,0,50],
[37,39,37,38,38,35,46,30,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,46,48,39,44,46,41,40,45],
[42,0,49,44,34,42,45,44,45,40],
[34,31,0,40,30,38,41,29,37,39],
[32,36,40,0,29,39,38,36,35,37],
[41,46,50,51,0,44,44,45,40,41],
[36,38,42,41,36,0,43,35,37,36],
[34,35,39,42,36,37,0,42,39,35],
[39,36,51,44,35,45,38,0,45,42],
[40,35,43,45,40,43,41,35,0,35],
[35,40,41,43,39,44,45,38,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,42,43,44,42,42,46,33,41],
[37,0,34,44,36,38,43,41,32,40],
[38,46,0,41,45,42,44,47,43,47],
[37,36,39,0,39,44,40,39,35,43],
[36,44,35,41,0,42,44,40,38,39],
[38,42,38,36,38,0,37,42,34,40],
[38,37,36,40,36,43,0,46,40,40],
[34,39,33,41,40,38,34,0,28,40],
[47,48,37,45,42,46,40,52,0,47],
[39,40,33,37,41,40,40,40,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,35,34,32,33,32,31,37,40],
[44,0,34,39,40,45,42,39,42,43],
[45,46,0,46,36,43,34,37,46,50],
[46,41,34,0,37,36,40,42,51,43],
[48,40,44,43,0,42,41,29,43,43],
[47,35,37,44,38,0,39,38,46,46],
[48,38,46,40,39,41,0,39,42,46],
[49,41,43,38,51,42,41,0,49,48],
[43,38,34,29,37,34,38,31,0,34],
[40,37,30,37,37,34,34,32,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,35,25,24,48,56,55,40,24],
[43,0,46,47,45,35,39,44,41,36],
[45,34,0,40,29,38,59,62,51,37],
[55,33,40,0,29,56,62,59,37,32],
[56,35,51,51,0,58,43,45,42,44],
[32,45,42,24,22,0,52,42,39,31],
[24,41,21,18,37,28,0,49,39,7],
[25,36,18,21,35,38,31,0,36,18],
[40,39,29,43,38,41,41,44,0,31],
[56,44,43,48,36,49,73,62,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,43,38,43,44,40,41,37,47],
[32,0,40,35,44,38,36,42,40,44],
[37,40,0,38,38,34,29,43,37,40],
[42,45,42,0,43,50,37,44,41,41],
[37,36,42,37,0,42,31,40,41,48],
[36,42,46,30,38,0,37,42,37,38],
[40,44,51,43,49,43,0,47,38,49],
[39,38,37,36,40,38,33,0,36,45],
[43,40,43,39,39,43,42,44,0,41],
[33,36,40,39,32,42,31,35,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,66,37,56,53,3,39,58,45],
[43,0,56,45,53,51,34,43,48,60],
[14,24,0,35,40,35,14,16,48,29],
[43,35,45,0,58,50,41,44,43,49],
[24,27,40,22,0,47,22,24,25,31],
[27,29,45,30,33,0,25,32,39,33],
[77,46,66,39,58,55,0,70,60,75],
[41,37,64,36,56,48,10,0,62,45],
[22,32,32,37,55,41,20,18,0,20],
[35,20,51,31,49,47,5,35,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,31,31,27,31,27,30,28,32],
[46,0,34,34,31,33,32,35,35,32],
[49,46,0,50,33,37,31,33,40,39],
[49,46,30,0,43,35,37,36,45,39],
[53,49,47,37,0,37,37,43,43,49],
[49,47,43,45,43,0,41,34,46,46],
[53,48,49,43,43,39,0,41,47,44],
[50,45,47,44,37,46,39,0,42,50],
[52,45,40,35,37,34,33,38,0,41],
[48,48,41,41,31,34,36,30,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,34,36,33,41,25,31,33,31],
[58,0,39,59,50,41,42,41,43,41],
[46,41,0,55,46,48,43,46,49,37],
[44,21,25,0,34,26,21,30,38,23],
[47,30,34,46,0,35,30,34,36,22],
[39,39,32,54,45,0,40,33,32,32],
[55,38,37,59,50,40,0,40,45,38],
[49,39,34,50,46,47,40,0,35,30],
[47,37,31,42,44,48,35,45,0,41],
[49,39,43,57,58,48,42,50,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,48,36,45,53,54,41,50,46],
[35,0,40,32,41,35,45,40,41,30],
[32,40,0,34,32,45,52,44,41,43],
[44,48,46,0,40,42,55,45,47,46],
[35,39,48,40,0,47,53,43,50,44],
[27,45,35,38,33,0,52,41,41,35],
[26,35,28,25,27,28,0,39,35,30],
[39,40,36,35,37,39,41,0,39,43],
[30,39,39,33,30,39,45,41,0,42],
[34,50,37,34,36,45,50,37,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,45,56,71,6,21,0,51,21],
[59,0,53,80,71,30,50,59,77,50],
[35,27,0,56,47,6,50,35,53,47],
[24,0,24,0,71,6,0,0,51,0],
[9,9,33,9,0,9,9,9,33,6],
[74,50,74,74,71,0,50,29,74,47],
[59,30,30,80,71,30,0,59,51,30],
[80,21,45,80,71,51,21,0,51,21],
[29,3,27,29,47,6,29,29,0,26],
[59,30,33,80,74,33,50,59,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,41,39,39,40,52,55,49,44],
[34,0,53,44,42,33,58,45,41,34],
[39,27,0,27,44,36,35,36,43,45],
[41,36,53,0,41,34,53,61,44,42],
[41,38,36,39,0,47,48,56,36,41],
[40,47,44,46,33,0,55,47,35,45],
[28,22,45,27,32,25,0,36,35,45],
[25,35,44,19,24,33,44,0,40,37],
[31,39,37,36,44,45,45,40,0,32],
[36,46,35,38,39,35,35,43,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,45,43,44,41,46,44,40],
[37,0,40,46,36,35,44,37,42,31],
[40,40,0,46,42,34,35,42,42,38],
[35,34,34,0,35,34,28,42,37,39],
[37,44,38,45,0,35,42,44,40,40],
[36,45,46,46,45,0,44,45,46,44],
[39,36,45,52,38,36,0,38,47,39],
[34,43,38,38,36,35,42,0,42,34],
[36,38,38,43,40,34,33,38,0,36],
[40,49,42,41,40,36,41,46,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,30,42,35,66,48,41,35,68],
[32,0,28,37,33,58,34,43,48,37],
[50,52,0,48,46,58,31,58,56,53],
[38,43,32,0,45,56,37,33,40,55],
[45,47,34,35,0,54,40,45,47,62],
[14,22,22,24,26,0,30,38,27,39],
[32,46,49,43,40,50,0,46,42,34],
[39,37,22,47,35,42,34,0,57,48],
[45,32,24,40,33,53,38,23,0,50],
[12,43,27,25,18,41,46,32,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,43,50,45,45,44,51,45,37],
[35,0,35,34,39,41,36,40,31,35],
[37,45,0,38,49,44,35,51,41,42],
[30,46,42,0,47,49,44,51,42,39],
[35,41,31,33,0,34,33,48,38,35],
[35,39,36,31,46,0,38,40,40,39],
[36,44,45,36,47,42,0,47,45,41],
[29,40,29,29,32,40,33,0,24,31],
[35,49,39,38,42,40,35,56,0,43],
[43,45,38,41,45,41,39,49,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,37,37,38,47,44,37,41,43],
[37,0,34,36,39,48,49,38,35,48],
[43,46,0,42,42,49,53,40,43,46],
[43,44,38,0,46,52,52,47,38,52],
[42,41,38,34,0,49,51,41,40,50],
[33,32,31,28,31,0,36,25,31,45],
[36,31,27,28,29,44,0,34,32,38],
[43,42,40,33,39,55,46,0,37,54],
[39,45,37,42,40,49,48,43,0,52],
[37,32,34,28,30,35,42,26,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,46,30,39,44,33,37,32,30],
[45,0,51,33,39,42,31,49,36,38],
[34,29,0,29,32,36,30,35,31,34],
[50,47,51,0,47,46,38,52,44,42],
[41,41,48,33,0,49,35,47,38,34],
[36,38,44,34,31,0,29,41,33,33],
[47,49,50,42,45,51,0,49,43,40],
[43,31,45,28,33,39,31,0,29,33],
[48,44,49,36,42,47,37,51,0,43],
[50,42,46,38,46,47,40,47,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,51,53,44,53,36,37,44,48],
[40,0,56,49,38,49,49,50,37,46],
[29,24,0,46,28,31,29,39,29,41],
[27,31,34,0,37,47,36,34,29,43],
[36,42,52,43,0,46,45,41,35,56],
[27,31,49,33,34,0,40,38,33,34],
[44,31,51,44,35,40,0,39,36,47],
[43,30,41,46,39,42,41,0,32,41],
[36,43,51,51,45,47,44,48,0,45],
[32,34,39,37,24,46,33,39,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,49,38,38,32,31,45,36,45],
[36,0,38,36,38,35,35,47,42,46],
[31,42,0,36,36,27,29,42,43,36],
[42,44,44,0,36,32,42,44,39,39],
[42,42,44,44,0,38,38,49,43,47],
[48,45,53,48,42,0,37,52,47,54],
[49,45,51,38,42,43,0,51,45,43],
[35,33,38,36,31,28,29,0,39,39],
[44,38,37,41,37,33,35,41,0,50],
[35,34,44,41,33,26,37,41,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,44,25,36,27,38,28,22,37],
[58,0,52,39,46,37,48,43,40,53],
[36,28,0,29,39,31,40,40,38,45],
[55,41,51,0,46,44,43,37,35,40],
[44,34,41,34,0,32,34,29,39,42],
[53,43,49,36,48,0,44,43,42,50],
[42,32,40,37,46,36,0,30,39,47],
[52,37,40,43,51,37,50,0,45,48],
[58,40,42,45,41,38,41,35,0,48],
[43,27,35,40,38,30,33,32,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,30,31,38,43,38,34,42,48],
[58,0,39,45,40,49,44,42,49,43],
[50,41,0,42,42,55,43,34,50,50],
[49,35,38,0,41,46,37,29,52,39],
[42,40,38,39,0,48,37,39,45,45],
[37,31,25,34,32,0,34,28,45,38],
[42,36,37,43,43,46,0,29,41,50],
[46,38,46,51,41,52,51,0,47,46],
[38,31,30,28,35,35,39,33,0,31],
[32,37,30,41,35,42,30,34,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,40,32,38,39,36,32,36,36],
[39,0,36,31,36,38,36,31,36,34],
[40,44,0,41,45,40,34,36,37,37],
[48,49,39,0,45,47,39,38,41,39],
[42,44,35,35,0,39,35,37,38,32],
[41,42,40,33,41,0,37,35,34,34],
[44,44,46,41,45,43,0,45,42,39],
[48,49,44,42,43,45,35,0,38,39],
[44,44,43,39,42,46,38,42,0,43],
[44,46,43,41,48,46,41,41,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,45,36,39,50,44,43,39,41],
[40,0,44,44,44,48,39,38,42,41],
[35,36,0,31,28,33,39,32,35,28],
[44,36,49,0,31,40,38,43,43,39],
[41,36,52,49,0,44,44,42,40,37],
[30,32,47,40,36,0,36,40,35,40],
[36,41,41,42,36,44,0,36,40,38],
[37,42,48,37,38,40,44,0,43,41],
[41,38,45,37,40,45,40,37,0,44],
[39,39,52,41,43,40,42,39,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,38,43,24,41,31,35,40,45],
[42,0,38,42,26,42,40,31,44,40],
[42,42,0,34,21,36,40,41,44,48],
[37,38,46,0,40,37,40,30,34,44],
[56,54,59,40,0,34,54,38,53,51],
[39,38,44,43,46,0,39,38,34,35],
[49,40,40,40,26,41,0,38,55,50],
[45,49,39,50,42,42,42,0,54,53],
[40,36,36,46,27,46,25,26,0,33],
[35,40,32,36,29,45,30,27,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,48,35,34,33,36,33,34,30],
[45,0,49,38,31,44,46,39,36,27],
[32,31,0,34,35,42,48,33,31,29],
[45,42,46,0,44,27,49,40,35,36],
[46,49,45,36,0,43,44,39,32,44],
[47,36,38,53,37,0,49,49,46,32],
[44,34,32,31,36,31,0,32,29,28],
[47,41,47,40,41,31,48,0,45,41],
[46,44,49,45,48,34,51,35,0,32],
[50,53,51,44,36,48,52,39,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,36,50,40,42,47,38,50,48],
[53,0,37,62,50,53,48,54,59,53],
[44,43,0,49,38,50,40,41,54,48],
[30,18,31,0,25,33,42,38,46,45],
[40,30,42,55,0,40,45,46,48,51],
[38,27,30,47,40,0,44,41,57,55],
[33,32,40,38,35,36,0,45,44,45],
[42,26,39,42,34,39,35,0,55,57],
[30,21,26,34,32,23,36,25,0,41],
[32,27,32,35,29,25,35,23,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,43,39,38,41,41,37,42,37],
[46,0,44,43,39,40,44,45,42,48],
[37,36,0,38,38,32,39,42,40,36],
[41,37,42,0,35,33,42,39,37,40],
[42,41,42,45,0,38,46,36,44,40],
[39,40,48,47,42,0,42,42,39,45],
[39,36,41,38,34,38,0,37,34,36],
[43,35,38,41,44,38,43,0,39,42],
[38,38,40,43,36,41,46,41,0,39],
[43,32,44,40,40,35,44,38,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,34,34,41,51,43,39,43,41],
[41,0,38,50,37,41,43,41,49,49],
[46,42,0,41,38,39,52,53,46,40],
[46,30,39,0,24,34,34,25,43,43],
[39,43,42,56,0,49,59,61,54,46],
[29,39,41,46,31,0,30,37,44,26],
[37,37,28,46,21,50,0,45,45,44],
[41,39,27,55,19,43,35,0,56,45],
[37,31,34,37,26,36,35,24,0,46],
[39,31,40,37,34,54,36,35,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,46,47,59,80,32,75,61,53],
[25,0,37,47,18,52,14,76,34,53],
[34,43,0,33,46,67,20,63,49,54],
[33,33,47,0,47,66,46,53,53,53],
[21,62,34,33,0,38,34,62,30,40],
[0,28,13,14,42,0,13,62,48,19],
[48,66,60,34,46,67,0,67,53,62],
[5,4,17,27,18,18,13,0,5,0],
[19,46,31,27,50,32,27,75,0,33],
[27,27,26,27,40,61,18,80,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,38,37,37,35,32,41,35,32],
[38,0,39,33,39,34,33,42,34,32],
[42,41,0,37,43,33,36,34,38,30],
[43,47,43,0,39,42,39,45,41,33],
[43,41,37,41,0,38,35,43,37,36],
[45,46,47,38,42,0,35,45,38,34],
[48,47,44,41,45,45,0,39,40,44],
[39,38,46,35,37,35,41,0,39,32],
[45,46,42,39,43,42,40,41,0,38],
[48,48,50,47,44,46,36,48,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,39,44,40,40,43,46,41,47],
[46,0,46,44,47,39,37,43,45,48],
[41,34,0,40,39,50,38,42,38,40],
[36,36,40,0,39,41,43,43,41,47],
[40,33,41,41,0,44,45,44,38,43],
[40,41,30,39,36,0,38,40,39,42],
[37,43,42,37,35,42,0,39,38,47],
[34,37,38,37,36,40,41,0,42,48],
[39,35,42,39,42,41,42,38,0,45],
[33,32,40,33,37,38,33,32,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,37,58,52,58,49,50,50,48],
[46,0,40,43,39,48,36,51,37,44],
[43,40,0,44,51,39,42,33,39,26],
[22,37,36,0,36,10,34,51,31,23],
[28,41,29,44,0,32,22,38,22,33],
[22,32,41,70,48,0,29,58,54,57],
[31,44,38,46,58,51,0,53,43,53],
[30,29,47,29,42,22,27,0,22,22],
[30,43,41,49,58,26,37,58,0,37],
[32,36,54,57,47,23,27,58,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,45,41,44,36,47,49,40,41],
[36,0,43,40,35,38,39,46,41,37],
[35,37,0,46,39,49,41,49,42,37],
[39,40,34,0,46,40,37,49,41,49],
[36,45,41,34,0,45,39,48,40,36],
[44,42,31,40,35,0,43,43,39,32],
[33,41,39,43,41,37,0,38,39,37],
[31,34,31,31,32,37,42,0,32,28],
[40,39,38,39,40,41,41,48,0,40],
[39,43,43,31,44,48,43,52,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,34,43,44,40,37,42,44,38],
[39,0,41,43,50,49,41,51,42,38],
[46,39,0,42,47,48,45,48,43,45],
[37,37,38,0,42,48,39,42,36,41],
[36,30,33,38,0,38,40,44,35,32],
[40,31,32,32,42,0,41,42,36,34],
[43,39,35,41,40,39,0,43,46,41],
[38,29,32,38,36,38,37,0,34,34],
[36,38,37,44,45,44,34,46,0,42],
[42,42,35,39,48,46,39,46,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,38,34,42,38,28,40,43,35],
[42,0,41,33,39,38,37,43,39,47],
[42,39,0,35,42,46,30,36,42,35],
[46,47,45,0,55,28,38,42,40,35],
[38,41,38,25,0,30,33,40,39,31],
[42,42,34,52,50,0,34,44,50,38],
[52,43,50,42,47,46,0,50,46,38],
[40,37,44,38,40,36,30,0,42,38],
[37,41,38,40,41,30,34,38,0,42],
[45,33,45,45,49,42,42,42,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,33,42,27,27,30,40,31,30],
[44,0,42,47,40,46,39,53,35,45],
[47,38,0,54,40,35,34,46,33,39],
[38,33,26,0,25,31,30,38,33,38],
[53,40,40,55,0,38,48,48,50,42],
[53,34,45,49,42,0,38,48,38,42],
[50,41,46,50,32,42,0,54,46,43],
[40,27,34,42,32,32,26,0,31,40],
[49,45,47,47,30,42,34,49,0,43],
[50,35,41,42,38,38,37,40,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,37,34,39,39,38,40,40,37],
[47,0,43,37,45,42,43,42,40,39],
[43,37,0,39,38,42,41,41,41,42],
[46,43,41,0,37,49,47,48,49,41],
[41,35,42,43,0,39,44,38,50,38],
[41,38,38,31,41,0,42,42,38,42],
[42,37,39,33,36,38,0,42,42,45],
[40,38,39,32,42,38,38,0,40,40],
[40,40,39,31,30,42,38,40,0,42],
[43,41,38,39,42,38,35,40,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,33,39,49,40,39,37,49,50],
[45,0,47,44,46,49,44,39,46,46],
[47,33,0,40,49,40,47,44,47,42],
[41,36,40,0,53,41,39,42,44,46],
[31,34,31,27,0,30,23,25,30,32],
[40,31,40,39,50,0,41,39,39,47],
[41,36,33,41,57,39,0,43,41,35],
[43,41,36,38,55,41,37,0,44,46],
[31,34,33,36,50,41,39,36,0,37],
[30,34,38,34,48,33,45,34,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,60,61,54,56,53,30,56,54],
[30,0,38,42,35,38,41,13,34,37],
[20,42,0,48,33,37,26,26,42,29],
[19,38,32,0,37,41,48,21,29,37],
[26,45,47,43,0,45,31,23,40,34],
[24,42,43,39,35,0,23,16,42,27],
[27,39,54,32,49,57,0,30,35,31],
[50,67,54,59,57,64,50,0,47,34],
[24,46,38,51,40,38,45,33,0,37],
[26,43,51,43,46,53,49,46,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,40,43,32,37,16,41,31,40],
[54,0,40,51,34,44,33,40,43,47],
[40,40,0,41,36,40,35,34,36,38],
[37,29,39,0,29,36,25,39,36,38],
[48,46,44,51,0,43,33,37,37,45],
[43,36,40,44,37,0,25,47,31,40],
[64,47,45,55,47,55,0,43,40,51],
[39,40,46,41,43,33,37,0,28,56],
[49,37,44,44,43,49,40,52,0,48],
[40,33,42,42,35,40,29,24,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,37,48,46,49,53,50,45],
[38,0,45,35,42,44,31,52,35,35],
[38,35,0,41,44,39,39,44,42,52],
[43,45,39,0,44,51,36,57,44,35],
[32,38,36,36,0,39,34,51,33,29],
[34,36,41,29,41,0,42,57,43,32],
[31,49,41,44,46,38,0,63,48,38],
[27,28,36,23,29,23,17,0,34,21],
[30,45,38,36,47,37,32,46,0,31],
[35,45,28,45,51,48,42,59,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,36,43,32,42,34,38,39,35],
[45,0,46,46,43,41,40,45,41,41],
[44,34,0,40,37,34,37,39,39,37],
[37,34,40,0,34,41,34,29,34,32],
[48,37,43,46,0,43,43,39,41,43],
[38,39,46,39,37,0,43,32,40,41],
[46,40,43,46,37,37,0,37,40,46],
[42,35,41,51,41,48,43,0,39,47],
[41,39,41,46,39,40,40,41,0,45],
[45,39,43,48,37,39,34,33,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,46,44,46,50,41,45,44,39],
[36,0,35,38,38,49,35,38,43,40],
[34,45,0,40,40,48,38,36,41,42],
[36,42,40,0,41,42,38,40,44,40],
[34,42,40,39,0,47,46,40,47,39],
[30,31,32,38,33,0,37,32,38,36],
[39,45,42,42,34,43,0,41,45,37],
[35,42,44,40,40,48,39,0,46,40],
[36,37,39,36,33,42,35,34,0,32],
[41,40,38,40,41,44,43,40,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,48,37,40,43,35,39,38],
[39,0,40,43,42,40,48,43,38,39],
[39,40,0,44,33,38,44,40,41,39],
[32,37,36,0,35,46,40,37,35,42],
[43,38,47,45,0,43,47,44,44,42],
[40,40,42,34,37,0,39,38,34,37],
[37,32,36,40,33,41,0,35,35,35],
[45,37,40,43,36,42,45,0,37,50],
[41,42,39,45,36,46,45,43,0,42],
[42,41,41,38,38,43,45,30,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,39,37,41,41,49,46,46,42],
[39,0,35,34,35,33,40,38,38,39],
[41,45,0,36,36,32,47,38,49,40],
[43,46,44,0,39,39,43,47,45,44],
[39,45,44,41,0,40,46,42,48,38],
[39,47,48,41,40,0,44,48,51,45],
[31,40,33,37,34,36,0,41,43,39],
[34,42,42,33,38,32,39,0,46,39],
[34,42,31,35,32,29,37,34,0,38],
[38,41,40,36,42,35,41,41,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,50,43,31,42,42,47,53,42],
[28,0,41,29,23,33,40,22,29,42],
[30,39,0,23,32,28,39,31,27,38],
[37,51,57,0,43,40,58,42,38,50],
[49,57,48,37,0,46,57,43,44,48],
[38,47,52,40,34,0,49,39,51,42],
[38,40,41,22,23,31,0,35,33,28],
[33,58,49,38,37,41,45,0,38,46],
[27,51,53,42,36,29,47,42,0,42],
[38,38,42,30,32,38,52,34,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,40,51,29,48,51,62,54,33],
[31,0,28,52,24,38,38,50,33,19],
[40,52,0,38,39,44,37,41,38,27],
[29,28,42,0,28,29,19,26,26,26],
[51,56,41,52,0,49,47,61,47,37],
[32,42,36,51,31,0,31,33,40,20],
[29,42,43,61,33,49,0,38,42,41],
[18,30,39,54,19,47,42,0,43,31],
[26,47,42,54,33,40,38,37,0,34],
[47,61,53,54,43,60,39,49,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,37,48,48,38,41,49,41,36],
[44,0,47,47,45,43,47,52,46,39],
[43,33,0,44,43,37,39,44,41,37],
[32,33,36,0,42,36,42,48,34,36],
[32,35,37,38,0,37,40,42,34,33],
[42,37,43,44,43,0,48,50,39,38],
[39,33,41,38,40,32,0,49,33,37],
[31,28,36,32,38,30,31,0,34,32],
[39,34,39,46,46,41,47,46,0,43],
[44,41,43,44,47,42,43,48,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,43,47,44,36,47,46,46,44],
[41,0,46,50,39,38,52,51,49,45],
[37,34,0,40,37,34,40,37,39,41],
[33,30,40,0,34,29,41,43,43,34],
[36,41,43,46,0,38,44,42,41,41],
[44,42,46,51,42,0,43,38,47,36],
[33,28,40,39,36,37,0,40,39,38],
[34,29,43,37,38,42,40,0,43,43],
[34,31,41,37,39,33,41,37,0,47],
[36,35,39,46,39,44,42,37,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,54,39,44,47,47,47,47,45],
[40,0,49,47,36,26,50,33,36,49],
[26,31,0,41,36,27,46,33,45,25],
[41,33,39,0,42,29,46,34,48,39],
[36,44,44,38,0,27,52,31,43,34],
[33,54,53,51,53,0,55,50,53,43],
[33,30,34,34,28,25,0,34,35,29],
[33,47,47,46,49,30,46,0,48,41],
[33,44,35,32,37,27,45,32,0,31],
[35,31,55,41,46,37,51,39,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,41,40,41,42,44,44,46,40],
[35,0,27,32,44,43,30,37,32,31],
[39,53,0,41,42,44,39,41,47,43],
[40,48,39,0,38,43,40,42,51,41],
[39,36,38,42,0,46,44,37,42,29],
[38,37,36,37,34,0,38,39,39,35],
[36,50,41,40,36,42,0,34,41,51],
[36,43,39,38,43,41,46,0,47,43],
[34,48,33,29,38,41,39,33,0,36],
[40,49,37,39,51,45,29,37,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,40,48,45,40,49,44,47],
[36,0,42,48,45,41,44,47,43,44],
[38,38,0,44,45,43,37,47,38,44],
[40,32,36,0,42,44,39,42,36,38],
[32,35,35,38,0,40,39,42,36,35],
[35,39,37,36,40,0,35,42,31,41],
[40,36,43,41,41,45,0,42,37,42],
[31,33,33,38,38,38,38,0,35,33],
[36,37,42,44,44,49,43,45,0,45],
[33,36,36,42,45,39,38,47,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,41,47,35,33,41,33,38,41],
[32,0,34,33,39,29,35,30,43,32],
[39,46,0,41,40,31,47,34,49,48],
[33,47,39,0,41,25,45,35,39,33],
[45,41,40,39,0,35,41,30,41,30],
[47,51,49,55,45,0,47,37,53,41],
[39,45,33,35,39,33,0,34,41,37],
[47,50,46,45,50,43,46,0,47,39],
[42,37,31,41,39,27,39,33,0,34],
[39,48,32,47,50,39,43,41,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,21,8,31,37,37,55,16,33],
[38,0,38,23,40,40,27,37,25,48],
[59,42,0,43,36,59,36,50,28,59],
[72,57,37,0,53,65,72,56,64,68],
[49,40,44,27,0,50,50,47,34,53],
[43,40,21,15,30,0,51,50,33,26],
[43,53,44,8,30,29,0,43,27,35],
[25,43,30,24,33,30,37,0,19,24],
[64,55,52,16,46,47,53,61,0,32],
[47,32,21,12,27,54,45,56,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,33,37,35,38,34,32,31,43],
[34,0,41,37,41,33,46,32,40,33],
[47,39,0,33,31,38,39,36,34,42],
[43,43,47,0,48,51,48,40,47,47],
[45,39,49,32,0,41,47,34,45,41],
[42,47,42,29,39,0,47,33,43,41],
[46,34,41,32,33,33,0,29,45,32],
[48,48,44,40,46,47,51,0,51,39],
[49,40,46,33,35,37,35,29,0,36],
[37,47,38,33,39,39,48,41,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,46,41,37,42,38,36,41,36],
[41,0,41,49,40,46,48,46,36,37],
[34,39,0,28,42,40,38,37,32,34],
[39,31,52,0,40,43,40,42,35,41],
[43,40,38,40,0,47,41,41,39,35],
[38,34,40,37,33,0,39,34,34,32],
[42,32,42,40,39,41,0,46,44,45],
[44,34,43,38,39,46,34,0,37,36],
[39,44,48,45,41,46,36,43,0,39],
[44,43,46,39,45,48,35,44,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,41,42,46,44,48,44,43,38],
[43,0,43,42,42,46,51,34,41,44],
[39,37,0,39,40,36,40,33,39,44],
[38,38,41,0,43,41,46,45,46,41],
[34,38,40,37,0,40,45,38,41,36],
[36,34,44,39,40,0,46,35,42,38],
[32,29,40,34,35,34,0,31,37,41],
[36,46,47,35,42,45,49,0,43,47],
[37,39,41,34,39,38,43,37,0,41],
[42,36,36,39,44,42,39,33,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,30,35,38,42,43,37,44,29],
[36,0,32,41,45,40,35,37,43,26],
[50,48,0,46,57,47,46,48,49,40],
[45,39,34,0,40,39,37,38,47,26],
[42,35,23,40,0,38,36,35,38,31],
[38,40,33,41,42,0,42,40,41,35],
[37,45,34,43,44,38,0,34,43,34],
[43,43,32,42,45,40,46,0,48,34],
[36,37,31,33,42,39,37,32,0,32],
[51,54,40,54,49,45,46,46,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,38,27,17,34,35,23,15,35],
[46,0,37,44,47,51,35,42,38,41],
[42,43,0,40,46,59,49,46,33,44],
[53,36,40,0,52,50,50,31,35,47],
[63,33,34,28,0,47,41,24,30,40],
[46,29,21,30,33,0,37,34,24,36],
[45,45,31,30,39,43,0,38,28,30],
[57,38,34,49,56,46,42,0,47,35],
[65,42,47,45,50,56,52,33,0,43],
[45,39,36,33,40,44,50,45,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,47,31,40,34,40,45,46,41],
[43,0,45,37,50,38,45,46,41,44],
[33,35,0,42,39,36,41,41,31,39],
[49,43,38,0,46,39,46,47,38,48],
[40,30,41,34,0,38,43,40,36,36],
[46,42,44,41,42,0,44,43,37,40],
[40,35,39,34,37,36,0,36,32,31],
[35,34,39,33,40,37,44,0,38,38],
[34,39,49,42,44,43,48,42,0,44],
[39,36,41,32,44,40,49,42,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,37,41,33,39,30,44,46,44],
[37,0,35,45,43,39,41,47,38,35],
[43,45,0,45,51,43,40,52,52,57],
[39,35,35,0,37,41,34,45,36,41],
[47,37,29,43,0,41,33,46,42,35],
[41,41,37,39,39,0,32,46,38,38],
[50,39,40,46,47,48,0,47,43,34],
[36,33,28,35,34,34,33,0,36,35],
[34,42,28,44,38,42,37,44,0,41],
[36,45,23,39,45,42,46,45,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,37,35,42,40,33,31,38,33],
[41,0,41,36,45,42,35,38,41,32],
[43,39,0,44,45,43,40,36,44,39],
[45,44,36,0,45,45,39,39,41,35],
[38,35,35,35,0,35,32,30,36,34],
[40,38,37,35,45,0,37,36,42,36],
[47,45,40,41,48,43,0,43,47,42],
[49,42,44,41,50,44,37,0,42,41],
[42,39,36,39,44,38,33,38,0,32],
[47,48,41,45,46,44,38,39,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,39,35,43,39,31,30,40,23],
[52,0,42,51,45,49,41,43,51,39],
[41,38,0,36,37,40,35,42,37,36],
[45,29,44,0,48,37,30,39,41,34],
[37,35,43,32,0,39,24,34,35,34],
[41,31,40,43,41,0,30,28,37,28],
[49,39,45,50,56,50,0,44,46,47],
[50,37,38,41,46,52,36,0,41,35],
[40,29,43,39,45,43,34,39,0,31],
[57,41,44,46,46,52,33,45,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,42,35,44,29,38,45,34,39],
[35,0,43,33,40,31,40,43,23,45],
[38,37,0,30,44,36,47,46,29,46],
[45,47,50,0,51,35,48,50,36,51],
[36,40,36,29,0,29,44,44,34,34],
[51,49,44,45,51,0,51,56,39,47],
[42,40,33,32,36,29,0,37,25,40],
[35,37,34,30,36,24,43,0,30,41],
[46,57,51,44,46,41,55,50,0,38],
[41,35,34,29,46,33,40,39,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,26,37,37,31,26,35,35,31],
[60,0,47,55,43,44,39,48,39,53],
[54,33,0,45,55,37,39,38,43,28],
[43,25,35,0,50,47,25,43,35,35],
[43,37,25,30,0,26,30,19,31,29],
[49,36,43,33,54,0,42,29,35,41],
[54,41,41,55,50,38,0,51,38,35],
[45,32,42,37,61,51,29,0,46,40],
[45,41,37,45,49,45,42,34,0,42],
[49,27,52,45,51,39,45,40,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,42,42,49,64,29,29,58,44],
[26,0,31,26,33,46,34,55,42,32],
[38,49,0,26,37,49,49,33,48,28],
[38,54,54,0,45,54,29,29,54,45],
[31,47,43,35,0,42,12,42,38,28],
[16,34,31,26,38,0,18,18,42,22],
[51,46,31,51,68,62,0,36,58,41],
[51,25,47,51,38,62,44,0,58,32],
[22,38,32,26,42,38,22,22,0,44],
[36,48,52,35,52,58,39,48,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,45,52,45,46,58,43,53,45],
[43,0,44,53,52,39,49,52,55,40],
[35,36,0,47,41,32,40,34,54,35],
[28,27,33,0,49,27,35,34,46,39],
[35,28,39,31,0,20,33,38,48,29],
[34,41,48,53,60,0,47,39,55,43],
[22,31,40,45,47,33,0,39,48,30],
[37,28,46,46,42,41,41,0,38,35],
[27,25,26,34,32,25,32,42,0,26],
[35,40,45,41,51,37,50,45,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,38,45,42,35,39,36,42,40],
[40,0,31,41,37,38,33,35,38,37],
[42,49,0,39,40,42,38,41,47,35],
[35,39,41,0,36,32,39,41,40,38],
[38,43,40,44,0,38,39,41,48,35],
[45,42,38,48,42,0,45,44,44,46],
[41,47,42,41,41,35,0,41,41,40],
[44,45,39,39,39,36,39,0,45,38],
[38,42,33,40,32,36,39,35,0,33],
[40,43,45,42,45,34,40,42,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,49,39,57,45,45,56,53,57],
[38,0,41,42,52,44,40,57,45,54],
[31,39,0,35,47,40,31,46,49,45],
[41,38,45,0,50,42,42,44,57,54],
[23,28,33,30,0,31,23,40,36,44],
[35,36,40,38,49,0,33,53,49,53],
[35,40,49,38,57,47,0,49,49,63],
[24,23,34,36,40,27,31,0,41,43],
[27,35,31,23,44,31,31,39,0,36],
[23,26,35,26,36,27,17,37,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,41,25,53,29,27,49,31,39],
[49,0,63,38,41,46,35,58,58,57],
[39,17,0,20,28,24,11,48,24,34],
[55,42,60,0,59,42,43,64,40,45],
[27,39,52,21,0,30,29,43,28,35],
[51,34,56,38,50,0,26,66,34,48],
[53,45,69,37,51,54,0,66,45,44],
[31,22,32,16,37,14,14,0,26,16],
[49,22,56,40,52,46,35,54,0,38],
[41,23,46,35,45,32,36,64,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,35,31,44,27,40,31,43,39],
[38,0,46,42,46,49,43,49,50,46],
[45,34,0,39,42,41,43,49,41,40],
[49,38,41,0,44,36,45,48,44,46],
[36,34,38,36,0,38,40,38,36,34],
[53,31,39,44,42,0,43,48,42,37],
[40,37,37,35,40,37,0,40,37,44],
[49,31,31,32,42,32,40,0,37,34],
[37,30,39,36,44,38,43,43,0,40],
[41,34,40,34,46,43,36,46,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,43,44,45,31,35,40,44,38],
[43,0,43,42,41,41,42,44,43,37],
[37,37,0,41,42,37,36,43,36,31],
[36,38,39,0,39,41,33,41,38,42],
[35,39,38,41,0,39,33,37,41,34],
[49,39,43,39,41,0,38,47,42,39],
[45,38,44,47,47,42,0,38,41,42],
[40,36,37,39,43,33,42,0,37,32],
[36,37,44,42,39,38,39,43,0,41],
[42,43,49,38,46,41,38,48,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,42,42,43,43,38,41,42],
[41,0,45,37,44,43,42,40,46,39],
[41,35,0,35,41,40,39,39,38,33],
[38,43,45,0,49,45,41,41,46,37],
[38,36,39,31,0,41,37,41,43,41],
[37,37,40,35,39,0,37,36,39,37],
[37,38,41,39,43,43,0,40,41,38],
[42,40,41,39,39,44,40,0,46,41],
[39,34,42,34,37,41,39,34,0,37],
[38,41,47,43,39,43,42,39,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,37,40,44,35,38,49,46,40],
[42,0,36,41,43,42,46,41,43,42],
[43,44,0,43,42,39,40,39,43,42],
[40,39,37,0,40,36,44,46,40,40],
[36,37,38,40,0,37,43,46,44,43],
[45,38,41,44,43,0,48,47,47,43],
[42,34,40,36,37,32,0,41,44,40],
[31,39,41,34,34,33,39,0,40,32],
[34,37,37,40,36,33,36,40,0,38],
[40,38,38,40,37,37,40,48,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,52,39,41,36,40,36,39,49],
[34,0,41,30,41,24,35,39,32,39],
[28,39,0,29,43,29,27,40,33,35],
[41,50,51,0,43,40,37,45,49,56],
[39,39,37,37,0,34,39,41,42,42],
[44,56,51,40,46,0,41,47,57,54],
[40,45,53,43,41,39,0,41,43,50],
[44,41,40,35,39,33,39,0,47,46],
[41,48,47,31,38,23,37,33,0,48],
[31,41,45,24,38,26,30,34,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,33,50,41,39,42,31,38,37],
[35,0,36,37,37,39,34,30,34,43],
[47,44,0,49,35,42,38,48,52,47],
[30,43,31,0,35,28,35,34,35,41],
[39,43,45,45,0,37,39,36,46,43],
[41,41,38,52,43,0,45,34,45,43],
[38,46,42,45,41,35,0,44,40,44],
[49,50,32,46,44,46,36,0,41,44],
[42,46,28,45,34,35,40,39,0,37],
[43,37,33,39,37,37,36,36,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,40,52,47,31,43,31,40,38],
[33,0,44,46,42,37,47,44,42,36],
[40,36,0,47,48,40,46,48,32,40],
[28,34,33,0,27,23,37,30,37,26],
[33,38,32,53,0,32,29,26,40,39],
[49,43,40,57,48,0,38,40,45,41],
[37,33,34,43,51,42,0,33,33,38],
[49,36,32,50,54,40,47,0,39,46],
[40,38,48,43,40,35,47,41,0,33],
[42,44,40,54,41,39,42,34,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,38,38,43,37,40,38,36,35],
[37,0,30,37,41,31,39,36,29,38],
[42,50,0,36,50,36,44,41,46,38],
[42,43,44,0,42,45,50,47,39,45],
[37,39,30,38,0,34,37,37,33,33],
[43,49,44,35,46,0,46,41,38,47],
[40,41,36,30,43,34,0,40,34,41],
[42,44,39,33,43,39,40,0,39,48],
[44,51,34,41,47,42,46,41,0,44],
[45,42,42,35,47,33,39,32,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,41,52,37,57,46,41,38,51],
[31,0,43,36,44,45,40,54,47,52],
[39,37,0,40,31,42,25,23,27,28],
[28,44,40,0,36,27,34,38,45,50],
[43,36,49,44,0,49,26,43,53,47],
[23,35,38,53,31,0,31,36,44,50],
[34,40,55,46,54,49,0,49,57,55],
[39,26,57,42,37,44,31,0,36,49],
[42,33,53,35,27,36,23,44,0,42],
[29,28,52,30,33,30,25,31,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,48,39,40,37,39,37,36,43],
[39,0,44,37,39,40,40,37,41,34],
[32,36,0,35,37,36,37,34,35,35],
[41,43,45,0,42,38,40,34,34,31],
[40,41,43,38,0,41,38,40,36,35],
[43,40,44,42,39,0,43,42,42,40],
[41,40,43,40,42,37,0,34,33,38],
[43,43,46,46,40,38,46,0,34,40],
[44,39,45,46,44,38,47,46,0,44],
[37,46,45,49,45,40,42,40,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,34,37,38,31,40,19,25,19],
[38,0,37,47,38,35,50,26,18,15],
[46,43,0,42,36,33,36,35,33,29],
[43,33,38,0,48,21,22,30,29,20],
[42,42,44,32,0,31,32,28,37,27],
[49,45,47,59,49,0,50,37,44,40],
[40,30,44,58,48,30,0,21,36,28],
[61,54,45,50,52,43,59,0,42,27],
[55,62,47,51,43,36,44,38,0,26],
[61,65,51,60,53,40,52,53,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,33,39,35,36,17,33,33,31],
[49,0,30,30,43,39,24,39,51,36],
[47,50,0,41,44,42,40,38,60,51],
[41,50,39,0,46,33,35,40,55,40],
[45,37,36,34,0,32,32,46,45,42],
[44,41,38,47,48,0,40,42,47,46],
[63,56,40,45,48,40,0,48,63,46],
[47,41,42,40,34,38,32,0,44,42],
[47,29,20,25,35,33,17,36,0,20],
[49,44,29,40,38,34,34,38,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,43,55,38,48,42,35,46,42],
[33,0,41,60,31,38,44,38,30,41],
[37,39,0,41,44,33,53,42,37,39],
[25,20,39,0,27,28,36,27,20,24],
[42,49,36,53,0,40,48,46,47,40],
[32,42,47,52,40,0,45,41,31,38],
[38,36,27,44,32,35,0,35,41,33],
[45,42,38,53,34,39,45,0,38,41],
[34,50,43,60,33,49,39,42,0,34],
[38,39,41,56,40,42,47,39,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,36,36,35,34,32,31,37,39],
[44,0,43,42,50,46,37,42,43,48],
[44,37,0,37,37,40,32,39,35,41],
[44,38,43,0,39,40,31,30,39,44],
[45,30,43,41,0,38,35,37,39,43],
[46,34,40,40,42,0,32,37,37,46],
[48,43,48,49,45,48,0,39,46,51],
[49,38,41,50,43,43,41,0,45,46],
[43,37,45,41,41,43,34,35,0,46],
[41,32,39,36,37,34,29,34,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,57,46,31,60,53,43,50],
[38,0,37,46,25,40,50,59,42,46],
[38,43,0,48,30,36,33,49,42,42],
[23,34,32,0,25,33,47,44,43,46],
[34,55,50,55,0,48,54,44,59,51],
[49,40,44,47,32,0,37,53,32,43],
[20,30,47,33,26,43,0,45,33,38],
[27,21,31,36,36,27,35,0,42,36],
[37,38,38,37,21,48,47,38,0,48],
[30,34,38,34,29,37,42,44,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,41,40,38,29,39,29,47,29],
[46,0,42,40,43,31,40,36,45,41],
[39,38,0,38,47,34,43,34,47,37],
[40,40,42,0,51,37,45,28,41,35],
[42,37,33,29,0,34,43,29,39,34],
[51,49,46,43,46,0,42,40,43,44],
[41,40,37,35,37,38,0,36,37,36],
[51,44,46,52,51,40,44,0,50,38],
[33,35,33,39,41,37,43,30,0,32],
[51,39,43,45,46,36,44,42,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,29,24,34,29,32,42,28,28],
[31,0,19,18,19,14,27,10,30,32],
[51,61,0,50,36,51,24,31,25,51],
[56,62,30,0,41,40,31,39,29,26],
[46,61,44,39,0,30,49,56,38,36],
[51,66,29,40,50,0,47,46,45,43],
[48,53,56,49,31,33,0,40,34,42],
[38,70,49,41,24,34,40,0,46,38],
[52,50,55,51,42,35,46,34,0,56],
[52,48,29,54,44,37,38,42,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,41,61,37,55,48,45,38,51],
[31,0,15,42,29,36,32,33,29,33],
[39,65,0,52,49,51,55,34,48,54],
[19,38,28,0,26,29,30,33,33,45],
[43,51,31,54,0,55,36,35,39,42],
[25,44,29,51,25,0,36,22,35,35],
[32,48,25,50,44,44,0,33,37,44],
[35,47,46,47,45,58,47,0,48,50],
[42,51,32,47,41,45,43,32,0,48],
[29,47,26,35,38,45,36,30,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,25,41,29,40,33,38,42,30],
[49,0,40,41,35,51,35,38,51,33],
[55,40,0,41,44,52,36,44,51,43],
[39,39,39,0,37,45,36,34,29,26],
[51,45,36,43,0,48,37,32,48,31],
[40,29,28,35,32,0,21,33,35,32],
[47,45,44,44,43,59,0,48,46,28],
[42,42,36,46,48,47,32,0,45,42],
[38,29,29,51,32,45,34,35,0,38],
[50,47,37,54,49,48,52,38,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,43,35,51,43,25,41,51,36],
[33,0,38,35,43,28,30,32,48,31],
[37,42,0,43,57,38,34,33,51,39],
[45,45,37,0,57,31,33,44,42,34],
[29,37,23,23,0,27,23,25,35,26],
[37,52,42,49,53,0,39,39,44,41],
[55,50,46,47,57,41,0,49,56,37],
[39,48,47,36,55,41,31,0,49,38],
[29,32,29,38,45,36,24,31,0,33],
[44,49,41,46,54,39,43,42,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,17,28,63,28,29,39,46,13],
[39,0,39,10,30,32,39,38,46,30],
[63,41,0,41,70,56,34,44,51,41],
[52,70,39,0,42,23,29,39,51,35],
[17,50,10,38,0,38,39,38,45,22],
[52,48,24,57,42,0,46,39,51,20],
[51,41,46,51,41,34,0,45,50,34],
[41,42,36,41,42,41,35,0,30,42],
[34,34,29,29,35,29,30,50,0,42],
[67,50,39,45,58,60,46,38,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,44,34,45,45,46,37,44,46],
[39,0,45,36,39,46,40,41,46,37],
[36,35,0,37,30,52,43,39,43,40],
[46,44,43,0,40,45,40,41,48,44],
[35,41,50,40,0,45,45,41,47,35],
[35,34,28,35,35,0,44,32,33,32],
[34,40,37,40,35,36,0,38,43,36],
[43,39,41,39,39,48,42,0,41,47],
[36,34,37,32,33,47,37,39,0,36],
[34,43,40,36,45,48,44,33,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,41,33,56,50,42,33,43,35],
[43,0,24,34,54,36,47,25,30,38],
[39,56,0,42,57,41,52,39,40,44],
[47,46,38,0,44,46,46,43,39,43],
[24,26,23,36,0,34,42,36,36,18],
[30,44,39,34,46,0,47,37,42,39],
[38,33,28,34,38,33,0,37,27,32],
[47,55,41,37,44,43,43,0,33,45],
[37,50,40,41,44,38,53,47,0,47],
[45,42,36,37,62,41,48,35,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,54,44,39,53,40,51,49,47],
[47,0,52,51,47,44,36,43,43,47],
[26,28,0,41,33,40,25,36,44,32],
[36,29,39,0,38,42,34,30,40,29],
[41,33,47,42,0,51,39,43,44,46],
[27,36,40,38,29,0,28,26,41,27],
[40,44,55,46,41,52,0,41,40,40],
[29,37,44,50,37,54,39,0,52,40],
[31,37,36,40,36,39,40,28,0,32],
[33,33,48,51,34,53,40,40,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,46,27,44,18,28,25,27],
[53,0,30,68,48,48,49,47,50,50],
[52,50,0,51,60,49,35,62,49,53],
[34,12,29,0,29,49,17,28,20,35],
[53,32,20,51,0,48,31,39,31,51],
[36,32,31,31,32,0,21,31,22,22],
[62,31,45,63,49,59,0,67,29,31],
[52,33,18,52,41,49,13,0,32,31],
[55,30,31,60,49,58,51,48,0,33],
[53,30,27,45,29,58,49,49,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,43,46,49,36,34,30,24,36],
[36,0,43,40,50,28,52,36,28,24],
[37,37,0,29,44,25,51,24,31,27],
[34,40,51,0,48,23,53,37,42,22],
[31,30,36,32,0,33,38,30,39,36],
[44,52,55,57,47,0,51,56,45,32],
[46,28,29,27,42,29,0,35,31,24],
[50,44,56,43,50,24,45,0,38,36],
[56,52,49,38,41,35,49,42,0,44],
[44,56,53,58,44,48,56,44,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,39,44,46,49,42,38,35,37],
[31,0,32,34,47,40,40,36,33,35],
[41,48,0,41,49,48,42,40,35,43],
[36,46,39,0,42,42,42,37,35,42],
[34,33,31,38,0,37,39,33,28,31],
[31,40,32,38,43,0,38,28,32,34],
[38,40,38,38,41,42,0,31,31,31],
[42,44,40,43,47,52,49,0,41,45],
[45,47,45,45,52,48,49,39,0,47],
[43,45,37,38,49,46,49,35,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,37,45,49,43,49,38,48,41],
[43,0,31,47,51,41,52,45,43,48],
[43,49,0,50,50,40,41,50,42,50],
[35,33,30,0,45,38,43,40,36,37],
[31,29,30,35,0,28,40,42,39,32],
[37,39,40,42,52,0,42,39,43,39],
[31,28,39,37,40,38,0,36,48,37],
[42,35,30,40,38,41,44,0,38,41],
[32,37,38,44,41,37,32,42,0,32],
[39,32,30,43,48,41,43,39,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,35,41,46,36,37,41,38],
[41,0,41,39,43,46,39,41,43,36],
[41,39,0,38,41,49,37,39,39,40],
[45,41,42,0,42,46,34,37,35,38],
[39,37,39,38,0,44,37,41,42,42],
[34,34,31,34,36,0,34,31,38,34],
[44,41,43,46,43,46,0,36,42,37],
[43,39,41,43,39,49,44,0,38,41],
[39,37,41,45,38,42,38,42,0,33],
[42,44,40,42,38,46,43,39,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,32,34,38,35,44,32,37,36],
[44,0,44,36,38,42,41,37,39,37],
[48,36,0,35,32,33,41,45,41,47],
[46,44,45,0,44,37,51,43,49,55],
[42,42,48,36,0,38,45,34,42,47],
[45,38,47,43,42,0,46,45,42,39],
[36,39,39,29,35,34,0,43,39,38],
[48,43,35,37,46,35,37,0,42,45],
[43,41,39,31,38,38,41,38,0,35],
[44,43,33,25,33,41,42,35,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,45,39,40,39,37,37,37,40],
[39,0,45,42,40,36,42,38,43,50],
[35,35,0,40,35,35,32,36,34,37],
[41,38,40,0,34,33,33,36,34,36],
[40,40,45,46,0,40,36,43,46,43],
[41,44,45,47,40,0,40,43,37,44],
[43,38,48,47,44,40,0,35,39,36],
[43,42,44,44,37,37,45,0,38,39],
[43,37,46,46,34,43,41,42,0,34],
[40,30,43,44,37,36,44,41,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,32,42,25,55,36,28,51,36],
[31,0,29,43,29,29,34,34,33,33],
[48,51,0,42,39,43,44,37,42,34],
[38,37,38,0,38,44,36,43,36,35],
[55,51,41,42,0,46,39,37,43,37],
[25,51,37,36,34,0,34,36,36,43],
[44,46,36,44,41,46,0,24,36,43],
[52,46,43,37,43,44,56,0,47,46],
[29,47,38,44,37,44,44,33,0,38],
[44,47,46,45,43,37,37,34,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,43,47,48,52,42,44,42,43],
[40,0,43,43,39,52,38,43,38,41],
[37,37,0,34,42,44,34,44,42,40],
[33,37,46,0,42,43,39,39,34,37],
[32,41,38,38,0,40,32,41,37,37],
[28,28,36,37,40,0,27,37,31,38],
[38,42,46,41,48,53,0,40,38,39],
[36,37,36,41,39,43,40,0,39,36],
[38,42,38,46,43,49,42,41,0,38],
[37,39,40,43,43,42,41,44,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,44,33,38,31,44,38,29,38],
[48,0,45,35,33,41,42,37,34,38],
[36,35,0,30,30,29,33,28,29,30],
[47,45,50,0,45,43,40,49,51,48],
[42,47,50,35,0,39,33,43,39,45],
[49,39,51,37,41,0,46,38,44,40],
[36,38,47,40,47,34,0,49,43,45],
[42,43,52,31,37,42,31,0,36,38],
[51,46,51,29,41,36,37,44,0,38],
[42,42,50,32,35,40,35,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,27,28,21,35,32,35,38,32],
[51,0,40,46,30,45,31,44,45,35],
[53,40,0,39,42,47,37,49,44,44],
[52,34,41,0,33,46,34,58,36,34],
[59,50,38,47,0,53,36,51,45,42],
[45,35,33,34,27,0,50,47,48,28],
[48,49,43,46,44,30,0,43,23,50],
[45,36,31,22,29,33,37,0,27,29],
[42,35,36,44,35,32,57,53,0,35],
[48,45,36,46,38,52,30,51,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,43,45,35,44,32,42,42,48],
[38,0,35,38,36,37,36,41,37,42],
[37,45,0,40,37,40,36,39,40,47],
[35,42,40,0,42,41,32,41,38,45],
[45,44,43,38,0,49,43,48,43,50],
[36,43,40,39,31,0,38,32,38,48],
[48,44,44,48,37,42,0,46,42,48],
[38,39,41,39,32,48,34,0,40,42],
[38,43,40,42,37,42,38,40,0,43],
[32,38,33,35,30,32,32,38,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,43,44,35,40,38,36,41,37],
[39,0,44,33,26,44,32,30,34,32],
[37,36,0,42,21,31,33,30,37,30],
[36,47,38,0,27,40,43,46,42,38],
[45,54,59,53,0,39,43,47,43,36],
[40,36,49,40,41,0,40,34,37,27],
[42,48,47,37,37,40,0,38,45,32],
[44,50,50,34,33,46,42,0,40,41],
[39,46,43,38,37,43,35,40,0,30],
[43,48,50,42,44,53,48,39,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,42,43,36,34,36,40,37,32],
[41,0,33,25,27,24,23,42,33,35],
[38,47,0,41,42,34,37,46,47,37],
[37,55,39,0,38,35,39,42,51,42],
[44,53,38,42,0,33,35,48,45,36],
[46,56,46,45,47,0,40,53,50,47],
[44,57,43,41,45,40,0,48,51,42],
[40,38,34,38,32,27,32,0,36,30],
[43,47,33,29,35,30,29,44,0,40],
[48,45,43,38,44,33,38,50,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,48,38,42,51,47,40,38,47],
[40,0,48,36,41,45,46,41,41,48],
[32,32,0,33,34,41,32,36,27,38],
[42,44,47,0,35,48,45,45,36,49],
[38,39,46,45,0,48,45,42,39,48],
[29,35,39,32,32,0,37,41,30,39],
[33,34,48,35,35,43,0,38,37,41],
[40,39,44,35,38,39,42,0,38,50],
[42,39,53,44,41,50,43,42,0,41],
[33,32,42,31,32,41,39,30,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,49,21,38,38,29,31,35,44],
[55,0,56,43,40,43,39,45,36,47],
[31,24,0,26,18,35,28,29,17,33],
[59,37,54,0,41,41,35,46,41,42],
[42,40,62,39,0,38,50,34,41,47],
[42,37,45,39,42,0,41,44,34,49],
[51,41,52,45,30,39,0,36,40,49],
[49,35,51,34,46,36,44,0,45,48],
[45,44,63,39,39,46,40,35,0,52],
[36,33,47,38,33,31,31,32,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,32,45,37,34,24,35,40,32],
[39,0,35,40,38,31,40,42,41,38],
[48,45,0,54,39,38,36,36,47,36],
[35,40,26,0,31,34,30,33,35,34],
[43,42,41,49,0,32,34,36,32,38],
[46,49,42,46,48,0,37,39,44,43],
[56,40,44,50,46,43,0,46,44,40],
[45,38,44,47,44,41,34,0,46,35],
[40,39,33,45,48,36,36,34,0,32],
[48,42,44,46,42,37,40,45,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,41,44,39,33,41,42,45,48],
[32,0,44,39,38,32,41,42,39,44],
[39,36,0,36,41,33,38,47,39,42],
[36,41,44,0,37,33,32,41,43,39],
[41,42,39,43,0,40,37,43,45,41],
[47,48,47,47,40,0,49,44,46,44],
[39,39,42,48,43,31,0,37,42,43],
[38,38,33,39,37,36,43,0,43,40],
[35,41,41,37,35,34,38,37,0,35],
[32,36,38,41,39,36,37,40,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,42,48,41,50,36,35,32,28],
[31,0,38,33,33,40,46,37,39,20],
[38,42,0,36,49,53,42,52,33,34],
[32,47,44,0,46,52,38,52,40,42],
[39,47,31,34,0,38,37,43,22,37],
[30,40,27,28,42,0,23,29,17,13],
[44,34,38,42,43,57,0,52,29,39],
[45,43,28,28,37,51,28,0,24,29],
[48,41,47,40,58,63,51,56,0,44],
[52,60,46,38,43,67,41,51,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,45,39,37,43,42,35,40,45],
[41,0,34,35,25,41,37,42,46,30],
[35,46,0,43,33,39,32,41,46,43],
[41,45,37,0,38,42,38,44,44,37],
[43,55,47,42,0,48,46,49,41,40],
[37,39,41,38,32,0,33,46,46,38],
[38,43,48,42,34,47,0,35,40,34],
[45,38,39,36,31,34,45,0,34,31],
[40,34,34,36,39,34,40,46,0,35],
[35,50,37,43,40,42,46,49,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,37,31,34,30,43,39,40,40],
[40,0,46,41,39,41,43,49,45,44],
[43,34,0,26,30,35,46,44,39,40],
[49,39,54,0,42,51,56,46,46,38],
[46,41,50,38,0,46,46,49,43,49],
[50,39,45,29,34,0,43,40,41,41],
[37,37,34,24,34,37,0,41,43,34],
[41,31,36,34,31,40,39,0,38,32],
[40,35,41,34,37,39,37,42,0,44],
[40,36,40,42,31,39,46,48,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,25,68,67,55,30,68,37,37],
[50,0,50,50,50,38,50,80,37,50],
[55,30,0,68,55,55,30,68,67,67],
[12,30,12,0,42,30,30,43,12,12],
[13,30,25,38,0,55,43,68,37,50],
[25,42,25,50,25,0,25,55,12,25],
[50,30,50,50,37,55,0,68,37,37],
[12,0,12,37,12,25,12,0,37,37],
[43,43,13,68,43,68,43,43,0,43],
[43,30,13,68,30,55,43,43,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,47,29,19,50,38,48,32,42],
[41,0,37,40,42,45,47,52,38,40],
[33,43,0,26,21,48,37,38,24,46],
[51,40,54,0,33,59,57,62,40,58],
[61,38,59,47,0,56,49,59,39,47],
[30,35,32,21,24,0,37,33,14,39],
[42,33,43,23,31,43,0,56,34,36],
[32,28,42,18,21,47,24,0,21,35],
[48,42,56,40,41,66,46,59,0,52],
[38,40,34,22,33,41,44,45,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,41,47,45,40,43,47,46,47],
[34,0,32,34,40,23,33,41,39,36],
[39,48,0,40,40,36,39,44,43,44],
[33,46,40,0,43,39,37,44,41,39],
[35,40,40,37,0,33,39,38,34,38],
[40,57,44,41,47,0,40,51,44,47],
[37,47,41,43,41,40,0,43,45,47],
[33,39,36,36,42,29,37,0,41,40],
[34,41,37,39,46,36,35,39,0,41],
[33,44,36,41,42,33,33,40,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,42,32,29,46,27,48,41,33],
[34,0,25,33,32,39,27,45,30,31],
[38,55,0,45,26,30,37,43,55,44],
[48,47,35,0,43,45,35,56,35,37],
[51,48,54,37,0,53,45,52,50,41],
[34,41,50,35,27,0,32,49,44,36],
[53,53,43,45,35,48,0,42,41,31],
[32,35,37,24,28,31,38,0,30,22],
[39,50,25,45,30,36,39,50,0,31],
[47,49,36,43,39,44,49,58,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,39,30,43,45,42,34,27,30],
[50,0,35,37,33,40,47,57,29,28],
[41,45,0,39,46,40,49,58,35,22],
[50,43,41,0,42,47,64,60,39,46],
[37,47,34,38,0,49,42,39,39,28],
[35,40,40,33,31,0,49,49,22,29],
[38,33,31,16,38,31,0,41,26,14],
[46,23,22,20,41,31,39,0,18,27],
[53,51,45,41,41,58,54,62,0,37],
[50,52,58,34,52,51,66,53,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,33,41,32,33,35,36,29,21],
[51,0,46,46,39,47,36,30,31,33],
[47,34,0,49,34,32,29,39,32,26],
[39,34,31,0,23,31,32,35,15,28],
[48,41,46,57,0,32,50,39,38,40],
[47,33,48,49,48,0,40,44,36,39],
[45,44,51,48,30,40,0,39,26,34],
[44,50,41,45,41,36,41,0,41,36],
[51,49,48,65,42,44,54,39,0,42],
[59,47,54,52,40,41,46,44,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,42,49,27,27,35,32,31,39],
[40,0,41,42,45,35,26,42,31,28],
[38,39,0,28,27,23,26,25,21,32],
[31,38,52,0,42,29,35,41,30,34],
[53,35,53,38,0,35,27,37,33,36],
[53,45,57,51,45,0,45,48,39,46],
[45,54,54,45,53,35,0,48,38,48],
[48,38,55,39,43,32,32,0,41,35],
[49,49,59,50,47,41,42,39,0,43],
[41,52,48,46,44,34,32,45,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,30,32,51,37,44,45,38,45],
[38,0,31,35,52,35,45,44,44,35],
[50,49,0,28,52,34,44,39,40,38],
[48,45,52,0,60,34,44,60,48,50],
[29,28,28,20,0,24,33,37,36,29],
[43,45,46,46,56,0,41,46,44,38],
[36,35,36,36,47,39,0,42,39,37],
[35,36,41,20,43,34,38,0,33,24],
[42,36,40,32,44,36,41,47,0,42],
[35,45,42,30,51,42,43,56,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,36,34,36,43,28,35,40,40],
[39,0,39,31,37,42,38,35,28,32],
[44,41,0,31,44,42,45,41,38,35],
[46,49,49,0,39,44,43,39,38,46],
[44,43,36,41,0,43,38,35,37,30],
[37,38,38,36,37,0,39,35,20,38],
[52,42,35,37,42,41,0,37,36,38],
[45,45,39,41,45,45,43,0,35,34],
[40,52,42,42,43,60,44,45,0,39],
[40,48,45,34,50,42,42,46,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,45,44,48,47,35,39,37,41],
[37,0,38,32,45,39,36,38,34,38],
[35,42,0,34,39,32,27,36,31,29],
[36,48,46,0,52,35,40,44,35,39],
[32,35,41,28,0,37,26,36,27,35],
[33,41,48,45,43,0,36,39,38,38],
[45,44,53,40,54,44,0,48,48,47],
[41,42,44,36,44,41,32,0,33,40],
[43,46,49,45,53,42,32,47,0,45],
[39,42,51,41,45,42,33,40,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,36,41,37,37,44,39,42,35],
[32,0,38,34,36,33,43,37,31,35],
[44,42,0,40,44,37,52,41,39,46],
[39,46,40,0,39,35,47,40,41,41],
[43,44,36,41,0,40,43,41,38,43],
[43,47,43,45,40,0,51,39,40,45],
[36,37,28,33,37,29,0,37,32,36],
[41,43,39,40,39,41,43,0,37,45],
[38,49,41,39,42,40,48,43,0,50],
[45,45,34,39,37,35,44,35,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,40,40,41,48,37,40,39,38],
[43,0,43,39,38,42,45,47,41,51],
[40,37,0,37,39,38,30,46,36,41],
[40,41,43,0,44,44,40,40,38,42],
[39,42,41,36,0,43,40,41,37,42],
[32,38,42,36,37,0,35,42,42,41],
[43,35,50,40,40,45,0,41,46,48],
[40,33,34,40,39,38,39,0,40,35],
[41,39,44,42,43,38,34,40,0,43],
[42,29,39,38,38,39,32,45,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,42,28,43,31,31,51,35,39],
[64,0,46,48,44,39,42,54,59,52],
[38,34,0,28,39,30,39,39,37,40],
[52,32,52,0,47,35,37,33,38,45],
[37,36,41,33,0,38,32,40,37,24],
[49,41,50,45,42,0,36,44,45,40],
[49,38,41,43,48,44,0,38,49,54],
[29,26,41,47,40,36,42,0,38,36],
[45,21,43,42,43,35,31,42,0,36],
[41,28,40,35,56,40,26,44,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,40,20,40,35,30,34,22,29],
[63,0,39,41,36,40,46,48,35,55],
[40,41,0,37,44,43,38,32,38,49],
[60,39,43,0,39,38,57,40,31,54],
[40,44,36,41,0,30,26,37,28,49],
[45,40,37,42,50,0,50,45,30,46],
[50,34,42,23,54,30,0,37,22,41],
[46,32,48,40,43,35,43,0,41,46],
[58,45,42,49,52,50,58,39,0,49],
[51,25,31,26,31,34,39,34,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,47,32,38,40,47,33,35,38],
[39,0,51,47,47,51,44,46,30,38],
[33,29,0,30,37,45,41,21,32,28],
[48,33,50,0,41,53,49,40,35,32],
[42,33,43,39,0,44,42,38,36,35],
[40,29,35,27,36,0,30,40,26,22],
[33,36,39,31,38,50,0,37,29,35],
[47,34,59,40,42,40,43,0,40,41],
[45,50,48,45,44,54,51,40,0,52],
[42,42,52,48,45,58,45,39,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,41,22,26,15,22,60,70,70],
[10,0,22,0,7,15,0,42,18,29],
[39,58,0,29,39,26,20,73,50,50],
[58,80,51,0,46,34,20,73,50,57],
[54,73,41,34,0,41,46,73,63,63],
[65,65,54,46,39,0,35,65,65,65],
[58,80,60,60,34,45,0,71,56,70],
[20,38,7,7,7,15,9,0,36,36],
[10,62,30,30,17,15,24,44,0,35],
[10,51,30,23,17,15,10,44,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,43,43,40,48,48,49,44,39],
[43,0,48,48,45,45,39,52,52,48],
[37,32,0,44,33,37,33,46,36,37],
[37,32,36,0,32,40,32,43,30,30],
[40,35,47,48,0,42,44,47,44,46],
[32,35,43,40,38,0,36,46,37,41],
[32,41,47,48,36,44,0,48,40,39],
[31,28,34,37,33,34,32,0,30,31],
[36,28,44,50,36,43,40,50,0,35],
[41,32,43,50,34,39,41,49,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,37,36,41,40,35,43,37,41],
[35,0,28,29,31,36,33,33,35,34],
[43,52,0,35,43,44,41,48,44,41],
[44,51,45,0,42,40,39,43,44,44],
[39,49,37,38,0,42,40,44,43,39],
[40,44,36,40,38,0,42,42,37,39],
[45,47,39,41,40,38,0,43,46,41],
[37,47,32,37,36,38,37,0,37,37],
[43,45,36,36,37,43,34,43,0,39],
[39,46,39,36,41,41,39,43,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,41,53,39,37,36,39,46,42],
[53,0,39,54,42,41,48,43,46,37],
[39,41,0,34,39,46,45,44,58,44],
[27,26,46,0,50,42,31,40,49,37],
[41,38,41,30,0,30,34,46,44,45],
[43,39,34,38,50,0,35,42,44,34],
[44,32,35,49,46,45,0,37,58,41],
[41,37,36,40,34,38,43,0,45,37],
[34,34,22,31,36,36,22,35,0,33],
[38,43,36,43,35,46,39,43,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,43,42,36,44,46,41,42,43],
[42,0,36,53,40,44,46,49,41,42],
[37,44,0,46,37,50,47,43,43,41],
[38,27,34,0,33,38,42,37,39,37],
[44,40,43,47,0,51,42,43,48,41],
[36,36,30,42,29,0,40,33,35,44],
[34,34,33,38,38,40,0,44,39,33],
[39,31,37,43,37,47,36,0,38,42],
[38,39,37,41,32,45,41,42,0,38],
[37,38,39,43,39,36,47,38,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,37,39,55,57,49,40,51,49],
[41,0,44,30,53,52,36,42,45,38],
[43,36,0,31,49,45,31,39,34,37],
[41,50,49,0,44,54,42,37,44,45],
[25,27,31,36,0,33,26,34,36,29],
[23,28,35,26,47,0,39,41,35,42],
[31,44,49,38,54,41,0,46,38,32],
[40,38,41,43,46,39,34,0,40,47],
[29,35,46,36,44,45,42,40,0,41],
[31,42,43,35,51,38,48,33,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,39,40,40,30,40,30,40,37],
[51,0,38,48,46,38,46,41,45,40],
[41,42,0,50,43,40,43,43,45,37],
[40,32,30,0,35,34,37,29,43,34],
[40,34,37,45,0,32,37,37,34,36],
[50,42,40,46,48,0,39,39,51,40],
[40,34,37,43,43,41,0,43,36,37],
[50,39,37,51,43,41,37,0,43,42],
[40,35,35,37,46,29,44,37,0,39],
[43,40,43,46,44,40,43,38,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,37,36,43,36,32,38,28,40],
[44,0,34,33,32,38,40,38,35,36],
[43,46,0,36,35,33,41,40,43,36],
[44,47,44,0,37,36,40,41,38,38],
[37,48,45,43,0,43,41,42,40,39],
[44,42,47,44,37,0,34,39,45,35],
[48,40,39,40,39,46,0,45,40,37],
[42,42,40,39,38,41,35,0,35,43],
[52,45,37,42,40,35,40,45,0,39],
[40,44,44,42,41,45,43,37,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,18,18,26,27,30,35,33,12],
[50,0,45,46,43,42,53,54,49,40],
[62,35,0,39,28,32,53,33,38,19],
[62,34,41,0,47,56,53,38,61,58],
[54,37,52,33,0,37,54,41,48,47],
[53,38,48,24,43,0,49,34,39,51],
[50,27,27,27,26,31,0,28,43,31],
[45,26,47,42,39,46,52,0,53,45],
[47,31,42,19,32,41,37,27,0,48],
[68,40,61,22,33,29,49,35,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,30,41,44,31,35,36,40,46],
[35,0,30,29,41,35,33,29,32,32],
[50,50,0,51,49,42,39,32,36,45],
[39,51,29,0,38,30,36,27,37,44],
[36,39,31,42,0,32,37,36,34,37],
[49,45,38,50,48,0,48,45,43,55],
[45,47,41,44,43,32,0,40,34,48],
[44,51,48,53,44,35,40,0,41,52],
[40,48,44,43,46,37,46,39,0,48],
[34,48,35,36,43,25,32,28,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,36,42,40,32,42,42,45,46],
[50,0,39,45,47,42,46,55,51,43],
[44,41,0,44,52,38,51,53,44,50],
[38,35,36,0,35,39,44,42,44,48],
[40,33,28,45,0,37,39,44,41,51],
[48,38,42,41,43,0,49,54,51,52],
[38,34,29,36,41,31,0,45,44,40],
[38,25,27,38,36,26,35,0,36,40],
[35,29,36,36,39,29,36,44,0,44],
[34,37,30,32,29,28,40,40,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,30,51,36,44,22,54,39,11],
[46,0,37,56,44,24,11,61,28,28],
[50,43,0,58,55,42,39,39,26,38],
[29,24,22,0,23,23,8,34,32,10],
[44,36,25,57,0,57,24,57,29,34],
[36,56,38,57,23,0,16,50,39,28],
[58,69,41,72,56,64,0,53,50,40],
[26,19,41,46,23,30,27,0,39,20],
[41,52,54,48,51,41,30,41,0,30],
[69,52,42,70,46,52,40,60,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,49,40,40,36,39,43,44,46],
[45,0,50,49,48,39,41,50,52,43],
[31,30,0,36,33,30,29,36,39,36],
[40,31,44,0,43,34,38,42,45,39],
[40,32,47,37,0,34,34,45,45,41],
[44,41,50,46,46,0,38,55,48,46],
[41,39,51,42,46,42,0,48,43,45],
[37,30,44,38,35,25,32,0,42,34],
[36,28,41,35,35,32,37,38,0,35],
[34,37,44,41,39,34,35,46,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,42,43,25,31,39,33,38,39],
[45,0,39,46,39,37,47,46,43,42],
[38,41,0,36,30,33,39,27,37,41],
[37,34,44,0,31,32,41,42,37,37],
[55,41,50,49,0,41,37,46,49,39],
[49,43,47,48,39,0,50,46,41,49],
[41,33,41,39,43,30,0,39,26,38],
[47,34,53,38,34,34,41,0,44,41],
[42,37,43,43,31,39,54,36,0,37],
[41,38,39,43,41,31,42,39,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,37,39,46,46,45,38,40,45],
[40,0,43,44,50,45,48,46,47,49],
[43,37,0,45,47,43,40,38,42,45],
[41,36,35,0,40,40,47,36,45,49],
[34,30,33,40,0,39,38,34,41,46],
[34,35,37,40,41,0,36,35,42,49],
[35,32,40,33,42,44,0,33,36,41],
[42,34,42,44,46,45,47,0,41,47],
[40,33,38,35,39,38,44,39,0,40],
[35,31,35,31,34,31,39,33,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,26,32,29,28,26,33,26,44],
[42,0,35,42,36,34,27,38,34,48],
[54,45,0,47,43,49,42,39,41,50],
[48,38,33,0,32,31,29,39,29,33],
[51,44,37,48,0,48,34,51,38,51],
[52,46,31,49,32,0,38,38,42,50],
[54,53,38,51,46,42,0,48,41,56],
[47,42,41,41,29,42,32,0,35,46],
[54,46,39,51,42,38,39,45,0,41],
[36,32,30,47,29,30,24,34,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,45,48,46,35,45,51,42,36],
[34,0,41,32,46,35,35,39,43,36],
[35,39,0,34,43,45,41,32,44,29],
[32,48,46,0,40,30,42,39,38,42],
[34,34,37,40,0,32,31,40,40,33],
[45,45,35,50,48,0,42,44,44,41],
[35,45,39,38,49,38,0,45,47,39],
[29,41,48,41,40,36,35,0,46,40],
[38,37,36,42,40,36,33,34,0,30],
[44,44,51,38,47,39,41,40,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,31,44,28,22,37,23,26,27],
[47,0,36,46,40,37,48,36,36,42],
[49,44,0,49,38,44,46,38,40,48],
[36,34,31,0,28,29,40,37,34,40],
[52,40,42,52,0,45,39,48,43,47],
[58,43,36,51,35,0,40,43,36,37],
[43,32,34,40,41,40,0,32,35,40],
[57,44,42,43,32,37,48,0,43,37],
[54,44,40,46,37,44,45,37,0,30],
[53,38,32,40,33,43,40,43,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,36,43,36,43,30,37,50,36],
[51,0,37,46,43,47,40,43,47,41],
[44,43,0,40,36,47,34,31,42,37],
[37,34,40,0,40,41,35,38,48,32],
[44,37,44,40,0,44,39,39,54,40],
[37,33,33,39,36,0,31,33,44,30],
[50,40,46,45,41,49,0,47,62,49],
[43,37,49,42,41,47,33,0,46,38],
[30,33,38,32,26,36,18,34,0,27],
[44,39,43,48,40,50,31,42,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,44,44,40,41,42,36,44,40],
[32,0,35,30,32,39,35,30,37,29],
[36,45,0,38,40,48,41,35,41,36],
[36,50,42,0,44,43,41,38,40,41],
[40,48,40,36,0,43,44,38,40,44],
[39,41,32,37,37,0,33,34,34,34],
[38,45,39,39,36,47,0,37,35,44],
[44,50,45,42,42,46,43,0,45,40],
[36,43,39,40,40,46,45,35,0,40],
[40,51,44,39,36,46,36,40,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,28,33,27,35,36,45,46,14],
[44,0,53,37,38,42,34,55,42,46],
[52,27,0,37,45,28,40,53,41,32],
[47,43,43,0,41,44,38,65,44,38],
[53,42,35,39,0,32,41,51,42,27],
[45,38,52,36,48,0,43,53,54,36],
[44,46,40,42,39,37,0,44,58,44],
[35,25,27,15,29,27,36,0,28,30],
[34,38,39,36,38,26,22,52,0,29],
[66,34,48,42,53,44,36,50,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,41,42,41,40,41,37,42,38],
[38,0,40,39,36,40,41,32,35,36],
[39,40,0,44,37,40,35,40,39,45],
[38,41,36,0,36,39,38,36,36,36],
[39,44,43,44,0,41,46,39,32,44],
[40,40,40,41,39,0,39,44,36,40],
[39,39,45,42,34,41,0,38,37,43],
[43,48,40,44,41,36,42,0,36,40],
[38,45,41,44,48,44,43,44,0,42],
[42,44,35,44,36,40,37,40,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,37,34,37,35,44,43,40,40],
[49,0,39,42,46,42,43,38,44,43],
[43,41,0,39,45,38,45,44,47,47],
[46,38,41,0,44,35,33,36,42,38],
[43,34,35,36,0,37,39,39,42,40],
[45,38,42,45,43,0,37,40,49,45],
[36,37,35,47,41,43,0,35,43,44],
[37,42,36,44,41,40,45,0,49,46],
[40,36,33,38,38,31,37,31,0,39],
[40,37,33,42,40,35,36,34,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,36,36,25,29,33,37,37,27],
[30,0,14,33,24,30,29,23,29,29],
[44,66,0,49,30,23,34,42,45,51],
[44,47,31,0,31,40,40,55,37,43],
[55,56,50,49,0,33,36,51,33,43],
[51,50,57,40,47,0,43,50,50,42],
[47,51,46,40,44,37,0,48,39,45],
[43,57,38,25,29,30,32,0,37,35],
[43,51,35,43,47,30,41,43,0,42],
[53,51,29,37,37,38,35,45,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,43,48,43,47,43,42,51,39],
[35,0,45,36,34,47,42,35,40,37],
[37,35,0,40,31,41,42,34,38,39],
[32,44,40,0,32,38,43,33,45,38],
[37,46,49,48,0,49,43,43,49,43],
[33,33,39,42,31,0,41,34,34,47],
[37,38,38,37,37,39,0,32,37,38],
[38,45,46,47,37,46,48,0,47,48],
[29,40,42,35,31,46,43,33,0,43],
[41,43,41,42,37,33,42,32,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,31,35,38,40,52,31,29,36],
[57,0,34,41,44,39,50,60,28,37],
[49,46,0,32,57,52,56,55,41,50],
[45,39,48,0,50,56,66,44,51,50],
[42,36,23,30,0,34,62,25,31,30],
[40,41,28,24,46,0,55,47,29,37],
[28,30,24,14,18,25,0,29,33,28],
[49,20,25,36,55,33,51,0,29,27],
[51,52,39,29,49,51,47,51,0,42],
[44,43,30,30,50,43,52,53,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,44,45,39,34,38,42,37,40],
[44,0,48,48,44,37,46,44,40,42],
[36,32,0,42,41,33,33,34,34,36],
[35,32,38,0,37,34,35,39,35,36],
[41,36,39,43,0,33,34,38,36,45],
[46,43,47,46,47,0,37,46,49,38],
[42,34,47,45,46,43,0,44,39,45],
[38,36,46,41,42,34,36,0,34,37],
[43,40,46,45,44,31,41,46,0,43],
[40,38,44,44,35,42,35,43,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,43,34,34,52,48,43,45,36],
[54,0,39,24,50,41,38,29,61,34],
[37,41,0,27,21,34,47,39,36,35],
[46,56,53,0,38,52,59,33,53,49],
[46,30,59,42,0,33,63,45,42,34],
[28,39,46,28,47,0,51,36,41,18],
[32,42,33,21,17,29,0,39,36,24],
[37,51,41,47,35,44,41,0,57,43],
[35,19,44,27,38,39,44,23,0,0],
[44,46,45,31,46,62,56,37,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,36,28,28,44,39,33,37,32],
[43,0,45,32,33,42,36,53,44,43],
[44,35,0,44,45,52,25,51,44,28],
[52,48,36,0,33,47,37,36,21,31],
[52,47,35,47,0,46,40,56,35,38],
[36,38,28,33,34,0,30,48,36,26],
[41,44,55,43,40,50,0,51,22,30],
[47,27,29,44,24,32,29,0,37,31],
[43,36,36,59,45,44,58,43,0,49],
[48,37,52,49,42,54,50,49,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,39,28,22,26,51,26,37,41],
[53,0,59,44,44,48,32,55,50,54],
[41,21,0,28,27,37,38,37,42,32],
[52,36,52,0,44,41,48,44,47,54],
[58,36,53,36,0,68,54,57,58,35],
[54,32,43,39,12,0,40,60,57,22],
[29,48,42,32,26,40,0,39,40,37],
[54,25,43,36,23,20,41,0,37,33],
[43,30,38,33,22,23,40,43,0,32],
[39,26,48,26,45,58,43,47,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,35,27,44,45,39,44,42,42],
[34,0,35,32,47,44,33,38,51,34],
[45,45,0,30,57,49,32,46,56,34],
[53,48,50,0,52,46,40,47,53,50],
[36,33,23,28,0,51,34,40,53,33],
[35,36,31,34,29,0,29,31,41,32],
[41,47,48,40,46,51,0,40,56,38],
[36,42,34,33,40,49,40,0,44,46],
[38,29,24,27,27,39,24,36,0,38],
[38,46,46,30,47,48,42,34,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,43,39,40,31,28,35,36,25],
[53,0,36,62,45,40,46,48,44,29],
[37,44,0,50,46,37,32,49,50,42],
[41,18,30,0,35,29,27,42,25,19],
[40,35,34,45,0,39,32,45,41,33],
[49,40,43,51,41,0,31,43,35,30],
[52,34,48,53,48,49,0,48,41,32],
[45,32,31,38,35,37,32,0,32,19],
[44,36,30,55,39,45,39,48,0,31],
[55,51,38,61,47,50,48,61,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,44,36,39,44,35,30,28,36],
[43,0,43,46,44,46,31,35,35,38],
[36,37,0,39,36,43,33,36,30,30],
[44,34,41,0,43,41,36,40,31,43],
[41,36,44,37,0,43,36,39,32,37],
[36,34,37,39,37,0,26,36,35,36],
[45,49,47,44,44,54,0,40,33,41],
[50,45,44,40,41,44,40,0,33,34],
[52,45,50,49,48,45,47,47,0,39],
[44,42,50,37,43,44,39,46,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,42,38,40,25,29,38,27,50],
[45,0,49,41,40,16,39,41,23,37],
[38,31,0,36,39,30,49,38,42,46],
[42,39,44,0,48,21,37,52,33,46],
[40,40,41,32,0,24,31,41,43,43],
[55,64,50,59,56,0,53,57,37,43],
[51,41,31,43,49,27,0,39,19,35],
[42,39,42,28,39,23,41,0,22,57],
[53,57,38,47,37,43,61,58,0,58],
[30,43,34,34,37,37,45,23,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,43,41,46,47,45,51,52,37],
[27,0,38,26,31,37,34,43,37,25],
[37,42,0,37,37,39,54,41,51,33],
[39,54,43,0,42,51,48,48,50,42],
[34,49,43,38,0,42,49,47,49,37],
[33,43,41,29,38,0,49,43,47,30],
[35,46,26,32,31,31,0,40,38,39],
[29,37,39,32,33,37,40,0,39,30],
[28,43,29,30,31,33,42,41,0,36],
[43,55,47,38,43,50,41,50,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,40,45,48,39,48,50,45,45],
[39,0,48,47,42,46,46,50,45,46],
[40,32,0,37,39,43,38,44,38,36],
[35,33,43,0,39,36,39,44,32,35],
[32,38,41,41,0,42,37,45,39,37],
[41,34,37,44,38,0,41,45,39,39],
[32,34,42,41,43,39,0,45,39,39],
[30,30,36,36,35,35,35,0,36,37],
[35,35,42,48,41,41,41,44,0,44],
[35,34,44,45,43,41,41,43,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,37,46,44,42,43,43,42,47],
[29,0,26,32,31,35,29,31,34,42],
[43,54,0,47,46,48,38,42,40,47],
[34,48,33,0,43,39,32,42,42,44],
[36,49,34,37,0,33,41,41,40,47],
[38,45,32,41,47,0,39,44,37,44],
[37,51,42,48,39,41,0,46,38,46],
[37,49,38,38,39,36,34,0,40,46],
[38,46,40,38,40,43,42,40,0,45],
[33,38,33,36,33,36,34,34,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,37,33,38,40,39,43,47,43],
[34,0,33,36,39,34,36,38,42,42],
[43,47,0,44,41,40,40,42,46,42],
[47,44,36,0,45,43,42,42,45,39],
[42,41,39,35,0,40,42,41,46,45],
[40,46,40,37,40,0,38,39,44,45],
[41,44,40,38,38,42,0,43,43,44],
[37,42,38,38,39,41,37,0,49,42],
[33,38,34,35,34,36,37,31,0,36],
[37,38,38,41,35,35,36,38,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,31,45,44,51,51,49,57,41],
[38,0,41,50,42,43,34,35,36,32],
[49,39,0,54,35,48,41,42,44,44],
[35,30,26,0,32,35,40,32,27,29],
[36,38,45,48,0,42,52,40,45,32],
[29,37,32,45,38,0,37,36,30,33],
[29,46,39,40,28,43,0,33,36,35],
[31,45,38,48,40,44,47,0,39,44],
[23,44,36,53,35,50,44,41,0,41],
[39,48,36,51,48,47,45,36,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,16,27,27,16,27,27,27,16],
[64,0,42,42,42,42,22,42,22,22],
[64,38,0,47,58,58,27,42,11,11],
[53,38,33,0,31,11,49,33,22,22],
[53,38,22,49,0,22,49,33,33,22],
[64,38,22,69,58,0,49,64,33,33],
[53,58,53,31,31,31,0,53,42,42],
[53,38,38,47,47,16,27,0,11,11],
[53,58,69,58,47,47,38,69,0,20],
[64,58,69,58,58,47,38,69,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,30,37,41,44,33,41,43,43],
[43,0,40,40,44,43,48,57,51,44],
[50,40,0,38,42,39,45,45,49,37],
[43,40,42,0,37,46,41,48,36,40],
[39,36,38,43,0,40,52,48,43,46],
[36,37,41,34,40,0,35,48,46,43],
[47,32,35,39,28,45,0,52,42,32],
[39,23,35,32,32,32,28,0,36,33],
[37,29,31,44,37,34,38,44,0,32],
[37,36,43,40,34,37,48,47,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,47,19,46,22,43,31,33,21],
[49,0,41,38,41,31,50,45,25,33],
[33,39,0,33,36,28,46,28,39,30],
[61,42,47,0,47,44,51,42,34,41],
[34,39,44,33,0,34,46,32,45,32],
[58,49,52,36,46,0,51,40,39,36],
[37,30,34,29,34,29,0,21,23,44],
[49,35,52,38,48,40,59,0,45,36],
[47,55,41,46,35,41,57,35,0,42],
[59,47,50,39,48,44,36,44,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,36,35,41,41,38,37,38,53],
[48,0,42,48,52,51,45,39,34,52],
[44,38,0,39,44,50,55,49,47,53],
[45,32,41,0,38,36,47,31,41,40],
[39,28,36,42,0,32,40,35,40,46],
[39,29,30,44,48,0,37,35,42,37],
[42,35,25,33,40,43,0,43,37,38],
[43,41,31,49,45,45,37,0,40,41],
[42,46,33,39,40,38,43,40,0,45],
[27,28,27,40,34,43,42,39,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,40,34,24,29,39,41,33,46],
[54,0,66,46,49,46,46,35,63,67],
[40,14,0,19,42,27,18,18,36,34],
[46,34,61,0,52,47,43,43,56,43],
[56,31,38,28,0,47,32,26,42,49],
[51,34,53,33,33,0,46,26,44,54],
[41,34,62,37,48,34,0,50,48,49],
[39,45,62,37,54,54,30,0,48,63],
[47,17,44,24,38,36,32,32,0,44],
[34,13,46,37,31,26,31,17,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,40,66,36,60,62,65,51,69],
[8,0,42,33,2,27,54,10,16,33],
[40,38,0,71,38,60,62,40,44,65],
[14,47,9,0,12,42,71,13,20,37],
[44,78,42,68,0,71,71,37,77,77],
[20,53,20,38,9,0,54,19,28,36],
[18,26,18,9,9,26,0,19,26,34],
[15,70,40,67,43,61,61,0,43,43],
[29,64,36,60,3,52,54,37,0,57],
[11,47,15,43,3,44,46,37,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,37,44,38,44,42,36,35,34],
[40,0,42,43,48,44,48,44,40,35],
[43,38,0,43,43,47,43,34,43,36],
[36,37,37,0,38,40,42,41,39,39],
[42,32,37,42,0,41,39,37,38,39],
[36,36,33,40,39,0,42,39,40,34],
[38,32,37,38,41,38,0,36,38,41],
[44,36,46,39,43,41,44,0,45,39],
[45,40,37,41,42,40,42,35,0,36],
[46,45,44,41,41,46,39,41,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,52,56,47,43,34,38,43,30],
[60,0,65,49,48,46,25,40,37,34],
[28,15,0,40,36,37,25,35,27,28],
[24,31,40,0,33,42,20,29,30,29],
[33,32,44,47,0,36,42,30,34,45],
[37,34,43,38,44,0,16,17,25,16],
[46,55,55,60,38,64,0,33,37,43],
[42,40,45,51,50,63,47,0,43,45],
[37,43,53,50,46,55,43,37,0,33],
[50,46,52,51,35,64,37,35,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,36,36,45,49,40,41,43,29],
[34,0,29,32,36,36,37,42,41,28],
[44,51,0,42,44,45,43,49,46,38],
[44,48,38,0,44,45,39,49,44,40],
[35,44,36,36,0,39,36,42,39,35],
[31,44,35,35,41,0,37,40,33,27],
[40,43,37,41,44,43,0,43,40,33],
[39,38,31,31,38,40,37,0,35,33],
[37,39,34,36,41,47,40,45,0,26],
[51,52,42,40,45,53,47,47,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,47,47,31,39,42,54,39,59],
[41,0,41,50,45,49,40,51,44,57],
[33,39,0,46,35,51,38,43,38,45],
[33,30,34,0,23,37,33,40,24,40],
[49,35,45,57,0,52,34,44,44,55],
[41,31,29,43,28,0,33,44,37,44],
[38,40,42,47,46,47,0,49,42,46],
[26,29,37,40,36,36,31,0,45,39],
[41,36,42,56,36,43,38,35,0,50],
[21,23,35,40,25,36,34,41,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,48,45,42,50,47,47,39,47],
[30,0,36,29,26,37,36,39,38,36],
[32,44,0,37,28,39,37,39,44,36],
[35,51,43,0,36,49,40,45,37,40],
[38,54,52,44,0,55,44,54,46,42],
[30,43,41,31,25,0,33,45,29,38],
[33,44,43,40,36,47,0,45,39,37],
[33,41,41,35,26,35,35,0,35,35],
[41,42,36,43,34,51,41,45,0,37],
[33,44,44,40,38,42,43,45,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,36,47,35,32,35,31,47,49],
[39,0,34,41,36,40,32,33,45,36],
[44,46,0,46,36,38,30,43,42,46],
[33,39,34,0,35,28,28,36,40,44],
[45,44,44,45,0,38,38,44,50,47],
[48,40,42,52,42,0,42,45,52,38],
[45,48,50,52,42,38,0,45,50,49],
[49,47,37,44,36,35,35,0,46,42],
[33,35,38,40,30,28,30,34,0,34],
[31,44,34,36,33,42,31,38,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,39,39,35,39,37,30,35,45],
[44,0,36,36,37,39,42,36,36,47],
[41,44,0,45,43,44,45,37,44,54],
[41,44,35,0,31,46,37,29,44,42],
[45,43,37,49,0,49,45,38,40,54],
[41,41,36,34,31,0,32,26,41,42],
[43,38,35,43,35,48,0,40,39,54],
[50,44,43,51,42,54,40,0,48,45],
[45,44,36,36,40,39,41,32,0,47],
[35,33,26,38,26,38,26,35,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,42,43,45,38,39,43,45,49],
[46,0,46,38,39,49,44,52,44,54],
[38,34,0,41,41,42,48,35,37,48],
[37,42,39,0,45,46,41,40,40,45],
[35,41,39,35,0,43,43,41,41,46],
[42,31,38,34,37,0,41,36,40,40],
[41,36,32,39,37,39,0,33,45,40],
[37,28,45,40,39,44,47,0,40,56],
[35,36,43,40,39,40,35,40,0,41],
[31,26,32,35,34,40,40,24,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,40,47,44,50,38,40,45,51],
[36,0,36,35,37,40,33,34,40,42],
[40,44,0,41,45,41,35,34,39,40],
[33,45,39,0,36,38,40,39,45,39],
[36,43,35,44,0,43,39,38,40,44],
[30,40,39,42,37,0,32,42,39,42],
[42,47,45,40,41,48,0,44,49,46],
[40,46,46,41,42,38,36,0,41,42],
[35,40,41,35,40,41,31,39,0,42],
[29,38,40,41,36,38,34,38,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,38,38,34,37,39,41,36,39],
[46,0,41,42,39,42,44,42,45,44],
[42,39,0,36,42,43,43,47,40,42],
[42,38,44,0,43,38,43,45,47,48],
[46,41,38,37,0,40,44,45,46,45],
[43,38,37,42,40,0,42,48,42,39],
[41,36,37,37,36,38,0,42,42,42],
[39,38,33,35,35,32,38,0,39,39],
[44,35,40,33,34,38,38,41,0,44],
[41,36,38,32,35,41,38,41,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,32,41,30,38,35,32,40,38],
[48,0,45,41,38,41,42,42,44,45],
[48,35,0,39,32,43,34,31,43,40],
[39,39,41,0,33,39,40,38,44,39],
[50,42,48,47,0,46,43,34,47,49],
[42,39,37,41,34,0,40,39,40,39],
[45,38,46,40,37,40,0,36,42,38],
[48,38,49,42,46,41,44,0,46,42],
[40,36,37,36,33,40,38,34,0,36],
[42,35,40,41,31,41,42,38,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,31,41,33,30,35,35,34,45],
[41,0,29,42,39,24,37,45,31,46],
[49,51,0,40,38,27,33,52,33,37],
[39,38,40,0,38,25,35,44,24,30],
[47,41,42,42,0,30,39,46,24,33],
[50,56,53,55,50,0,51,51,40,58],
[45,43,47,45,41,29,0,43,30,41],
[45,35,28,36,34,29,37,0,27,36],
[46,49,47,56,56,40,50,53,0,55],
[35,34,43,50,47,22,39,44,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,50,48,47,40,48,45,45,38],
[39,0,42,42,45,31,48,39,37,43],
[30,38,0,38,31,30,31,40,37,27],
[32,38,42,0,41,36,35,40,41,36],
[33,35,49,39,0,36,44,45,42,40],
[40,49,50,44,44,0,47,43,41,41],
[32,32,49,45,36,33,0,42,36,39],
[35,41,40,40,35,37,38,0,37,35],
[35,43,43,39,38,39,44,43,0,40],
[42,37,53,44,40,39,41,45,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,34,28,34,39,29,38,37,41],
[39,0,39,37,34,44,38,38,45,41],
[46,41,0,39,35,43,40,46,42,44],
[52,43,41,0,40,43,45,44,47,43],
[46,46,45,40,0,49,41,46,43,43],
[41,36,37,37,31,0,39,43,37,42],
[51,42,40,35,39,41,0,40,40,42],
[42,42,34,36,34,37,40,0,40,43],
[43,35,38,33,37,43,40,40,0,46],
[39,39,36,37,37,38,38,37,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,41,28,35,41,34,47,39],
[39,0,38,41,40,33,39,34,42,45],
[39,42,0,42,39,39,44,34,35,38],
[39,39,38,0,30,36,38,23,40,40],
[52,40,41,50,0,46,49,44,45,43],
[45,47,41,44,34,0,49,40,46,41],
[39,41,36,42,31,31,0,34,37,37],
[46,46,46,57,36,40,46,0,50,44],
[33,38,45,40,35,34,43,30,0,41],
[41,35,42,40,37,39,43,36,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,38,42,36,44,37,33,38,40],
[38,0,35,41,35,41,33,36,38,37],
[42,45,0,40,35,38,33,36,44,41],
[38,39,40,0,34,40,43,34,41,42],
[44,45,45,46,0,43,40,47,38,50],
[36,39,42,40,37,0,36,27,33,39],
[43,47,47,37,40,44,0,38,46,42],
[47,44,44,46,33,53,42,0,49,47],
[42,42,36,39,42,47,34,31,0,40],
[40,43,39,38,30,41,38,33,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,33,44,30,32,40,35,30],
[41,0,49,40,39,36,43,31,38,43],
[41,31,0,34,31,25,35,31,37,40],
[47,40,46,0,38,41,48,40,37,33],
[36,41,49,42,0,42,40,35,43,38],
[50,44,55,39,38,0,44,42,46,50],
[48,37,45,32,40,36,0,39,41,34],
[40,49,49,40,45,38,41,0,48,42],
[45,42,43,43,37,34,39,32,0,42],
[50,37,40,47,42,30,46,38,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,35,43,45,44,38,38,32,46],
[31,0,35,38,21,40,42,21,36,36],
[45,45,0,54,28,40,51,34,37,42],
[37,42,26,0,20,33,50,31,40,32],
[35,59,52,60,0,53,59,33,43,47],
[36,40,40,47,27,0,39,37,37,44],
[42,38,29,30,21,41,0,27,27,39],
[42,59,46,49,47,43,53,0,40,53],
[48,44,43,40,37,43,53,40,0,46],
[34,44,38,48,33,36,41,27,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,43,40,41,49,38,48,36,52],
[34,0,39,32,33,46,31,32,39,40],
[37,41,0,29,33,38,37,38,40,39],
[40,48,51,0,41,48,42,48,46,50],
[39,47,47,39,0,48,40,48,44,44],
[31,34,42,32,32,0,35,40,40,39],
[42,49,43,38,40,45,0,43,37,44],
[32,48,42,32,32,40,37,0,39,41],
[44,41,40,34,36,40,43,41,0,38],
[28,40,41,30,36,41,36,39,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,44,37,37,42,45,38,28,49],
[37,0,42,34,40,29,57,32,40,40],
[36,38,0,33,34,34,54,35,38,49],
[43,46,47,0,40,38,49,34,39,39],
[43,40,46,40,0,46,59,40,36,42],
[38,51,46,42,34,0,56,44,44,47],
[35,23,26,31,21,24,0,24,21,34],
[42,48,45,46,40,36,56,0,43,43],
[52,40,42,41,44,36,59,37,0,35],
[31,40,31,41,38,33,46,37,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,42,51,44,48,40,44,45,47],
[39,0,36,46,44,49,40,42,37,47],
[38,44,0,43,45,43,35,43,43,47],
[29,34,37,0,38,33,31,30,36,35],
[36,36,35,42,0,42,32,39,41,39],
[32,31,37,47,38,0,36,37,39,38],
[40,40,45,49,48,44,0,47,40,48],
[36,38,37,50,41,43,33,0,42,41],
[35,43,37,44,39,41,40,38,0,45],
[33,33,33,45,41,42,32,39,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,72,38,60,48,55,44,47,30],
[22,0,47,40,45,34,54,35,39,35],
[8,33,0,27,24,28,43,26,44,31],
[42,40,53,0,49,36,50,36,22,38],
[20,35,56,31,0,39,59,30,35,32],
[32,46,52,44,41,0,41,30,38,37],
[25,26,37,30,21,39,0,32,44,44],
[36,45,54,44,50,50,48,0,30,37],
[33,41,36,58,45,42,36,50,0,43],
[50,45,49,42,48,43,36,43,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,41,45,39,30,39,39,36,38],
[34,0,42,38,36,34,41,37,42,39],
[39,38,0,34,40,43,42,36,44,43],
[35,42,46,0,38,43,45,42,46,44],
[41,44,40,42,0,44,49,36,45,40],
[50,46,37,37,36,0,47,39,47,42],
[41,39,38,35,31,33,0,32,43,37],
[41,43,44,38,44,41,48,0,45,45],
[44,38,36,34,35,33,37,35,0,44],
[42,41,37,36,40,38,43,35,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,33,72,47,37,61,62,72,63],
[18,0,3,18,23,11,33,3,13,46],
[47,77,0,72,52,37,33,77,72,68],
[8,62,8,0,44,40,33,62,17,38],
[33,57,28,36,0,40,61,57,28,53],
[43,69,43,40,40,0,68,69,40,60],
[19,47,47,47,19,12,0,47,47,38],
[18,77,3,18,23,11,33,0,13,43],
[8,67,8,63,52,40,33,67,0,43],
[17,34,12,42,27,20,42,37,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,37,40,41,45,45,39,35,36],
[38,0,39,35,40,41,48,32,38,35],
[43,41,0,40,41,46,38,39,44,38],
[40,45,40,0,41,41,48,41,42,42],
[39,40,39,39,0,46,40,35,35,34],
[35,39,34,39,34,0,43,43,42,33],
[35,32,42,32,40,37,0,37,39,34],
[41,48,41,39,45,37,43,0,45,35],
[45,42,36,38,45,38,41,35,0,41],
[44,45,42,38,46,47,46,45,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,36,46,36,41,42,40,35,43],
[40,0,38,39,41,40,42,35,32,30],
[44,42,0,41,43,44,35,44,39,33],
[34,41,39,0,38,49,37,45,32,35],
[44,39,37,42,0,43,43,46,39,38],
[39,40,36,31,37,0,33,38,29,35],
[38,38,45,43,37,47,0,44,40,36],
[40,45,36,35,34,42,36,0,33,33],
[45,48,41,48,41,51,40,47,0,41],
[37,50,47,45,42,45,44,47,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,44,30,22,38,25,32,21,22],
[35,0,19,37,22,28,31,34,28,25],
[36,61,0,39,23,36,20,20,29,41],
[50,43,41,0,32,23,41,35,42,33],
[58,58,57,48,0,35,42,49,41,41],
[42,52,44,57,45,0,27,45,39,45],
[55,49,60,39,38,53,0,33,34,41],
[48,46,60,45,31,35,47,0,41,34],
[59,52,51,38,39,41,46,39,0,35],
[58,55,39,47,39,35,39,46,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,31,48,52,46,48,49,42,40],
[27,0,42,48,48,37,41,54,32,26],
[49,38,0,59,61,56,53,56,44,43],
[32,32,21,0,39,22,33,46,33,20],
[28,32,19,41,0,34,34,38,24,26],
[34,43,24,58,46,0,43,53,38,34],
[32,39,27,47,46,37,0,45,31,36],
[31,26,24,34,42,27,35,0,24,25],
[38,48,36,47,56,42,49,56,0,36],
[40,54,37,60,54,46,44,55,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,29,29,43,34,33,37,38,30],
[45,0,39,46,51,55,45,42,47,42],
[51,41,0,41,48,36,40,47,46,39],
[51,34,39,0,52,50,44,48,41,39],
[37,29,32,28,0,30,38,39,37,32],
[46,25,44,30,50,0,43,36,39,45],
[47,35,40,36,42,37,0,42,45,35],
[43,38,33,32,41,44,38,0,40,35],
[42,33,34,39,43,41,35,40,0,33],
[50,38,41,41,48,35,45,45,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,40,29,35,39,34,29,38,46],
[50,0,42,32,35,59,36,35,36,59],
[40,38,0,38,36,54,43,27,40,61],
[51,48,42,0,45,48,40,40,53,46],
[45,45,44,35,0,51,39,43,39,65],
[41,21,26,32,29,0,29,32,28,56],
[46,44,37,40,41,51,0,34,34,40],
[51,45,53,40,37,48,46,0,48,56],
[42,44,40,27,41,52,46,32,0,49],
[34,21,19,34,15,24,40,24,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,45,43,48,42,38,52,47,55],
[26,0,37,40,41,32,35,34,33,41],
[35,43,0,42,36,41,42,43,39,52],
[37,40,38,0,44,37,43,39,39,53],
[32,39,44,36,0,39,37,48,35,51],
[38,48,39,43,41,0,40,45,38,54],
[42,45,38,37,43,40,0,41,43,53],
[28,46,37,41,32,35,39,0,36,51],
[33,47,41,41,45,42,37,44,0,57],
[25,39,28,27,29,26,27,29,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,36,37,39,43,35,40,35,38],
[34,0,34,36,44,35,36,29,43,35],
[44,46,0,41,41,45,45,37,43,35],
[43,44,39,0,45,33,44,42,36,42],
[41,36,39,35,0,41,45,40,46,37],
[37,45,35,47,39,0,48,39,32,40],
[45,44,35,36,35,32,0,34,35,40],
[40,51,43,38,40,41,46,0,36,33],
[45,37,37,44,34,48,45,44,0,39],
[42,45,45,38,43,40,40,47,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,42,38,42,41,37,39,33,33],
[44,0,44,39,41,41,41,42,36,33],
[38,36,0,34,32,34,35,30,36,37],
[42,41,46,0,38,40,43,45,45,40],
[38,39,48,42,0,42,44,43,42,42],
[39,39,46,40,38,0,40,41,38,40],
[43,39,45,37,36,40,0,41,38,32],
[41,38,50,35,37,39,39,0,39,39],
[47,44,44,35,38,42,42,41,0,37],
[47,47,43,40,38,40,48,41,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,50,36,51,43,51,46,45,51],
[35,0,41,38,44,31,50,45,38,53],
[30,39,0,32,47,40,40,30,39,43],
[44,42,48,0,60,43,48,40,42,54],
[29,36,33,20,0,30,28,29,30,32],
[37,49,40,37,50,0,39,41,35,49],
[29,30,40,32,52,41,0,34,29,46],
[34,35,50,40,51,39,46,0,35,46],
[35,42,41,38,50,45,51,45,0,50],
[29,27,37,26,48,31,34,34,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,37,69,45,46,74,40,69,29],
[19,0,11,19,11,40,39,28,40,11],
[43,69,0,63,57,34,74,54,57,37],
[11,61,17,0,25,34,54,22,37,26],
[35,69,23,55,0,29,49,20,32,40],
[34,40,46,46,51,0,53,40,48,34],
[6,41,6,26,31,27,0,23,27,11],
[40,52,26,58,60,40,57,0,58,40],
[11,40,23,43,48,32,53,22,0,11],
[51,69,43,54,40,46,69,40,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,39,43,42,44,46,45,41,39],
[42,0,39,37,42,47,45,42,43,43],
[41,41,0,39,42,48,49,39,45,43],
[37,43,41,0,45,46,47,40,44,43],
[38,38,38,35,0,41,47,37,40,38],
[36,33,32,34,39,0,44,40,42,36],
[34,35,31,33,33,36,0,36,39,32],
[35,38,41,40,43,40,44,0,39,43],
[39,37,35,36,40,38,41,41,0,36],
[41,37,37,37,42,44,48,37,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,32,21,35,16,32,44,55,22],
[46,0,38,33,45,50,47,50,62,51],
[48,42,0,41,53,30,43,60,61,52],
[59,47,39,0,57,41,50,71,66,62],
[45,35,27,23,0,26,29,40,56,58],
[64,30,50,39,54,0,38,66,79,49],
[48,33,37,30,51,42,0,71,52,37],
[36,30,20,9,40,14,9,0,40,35],
[25,18,19,14,24,1,28,40,0,25],
[58,29,28,18,22,31,43,45,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,48,53,59,38,48,49,46,54],
[33,0,20,45,49,44,58,45,56,51],
[32,60,0,53,60,43,48,51,46,34],
[27,35,27,0,38,27,33,38,25,34],
[21,31,20,42,0,31,23,45,40,21],
[42,36,37,53,49,0,42,45,45,45],
[32,22,32,47,57,38,0,57,48,45],
[31,35,29,42,35,35,23,0,38,29],
[34,24,34,55,40,35,32,42,0,33],
[26,29,46,46,59,35,35,51,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,70,60,52,34,54,80,52,70],
[26,0,70,34,26,44,34,44,26,70],
[10,10,0,18,10,28,18,28,10,10],
[20,46,62,0,62,20,54,72,72,72],
[28,54,70,18,0,28,54,64,56,64],
[46,36,52,60,52,0,44,62,62,62],
[26,46,62,26,26,36,0,36,26,62],
[0,36,52,8,16,18,44,0,52,36],
[28,54,70,8,24,18,54,28,0,64],
[10,10,70,8,16,18,18,44,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,37,51,50,39,42,53,41,41],
[31,0,27,38,57,33,34,38,29,35],
[43,53,0,56,53,58,37,51,44,44],
[29,42,24,0,43,45,27,41,32,37],
[30,23,27,37,0,35,34,37,32,31],
[41,47,22,35,45,0,33,42,31,41],
[38,46,43,53,46,47,0,43,40,45],
[27,42,29,39,43,38,37,0,30,39],
[39,51,36,48,48,49,40,50,0,43],
[39,45,36,43,49,39,35,41,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,40,47,32,52,43,23,43,43],
[42,0,47,47,49,62,27,26,50,53],
[40,33,0,57,47,52,28,28,55,34],
[33,33,23,0,30,20,11,23,21,26],
[48,31,33,50,0,30,31,9,26,34],
[28,18,28,60,50,0,38,38,23,24],
[37,53,52,69,49,42,0,28,62,50],
[57,54,52,57,71,42,52,0,59,38],
[37,30,25,59,54,57,18,21,0,25],
[37,27,46,54,46,56,30,42,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,36,41,39,36,47,39,38,42],
[42,0,39,44,35,34,43,38,32,45],
[44,41,0,49,36,40,46,39,37,47],
[39,36,31,0,33,32,37,38,35,40],
[41,45,44,47,0,39,48,44,44,51],
[44,46,40,48,41,0,48,38,38,47],
[33,37,34,43,32,32,0,38,35,41],
[41,42,41,42,36,42,42,0,37,43],
[42,48,43,45,36,42,45,43,0,46],
[38,35,33,40,29,33,39,37,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,44,53,48,35,41,46,41,37],
[34,0,34,38,33,31,36,40,33,27],
[36,46,0,48,40,36,42,44,34,35],
[27,42,32,0,33,43,37,42,34,32],
[32,47,40,47,0,40,44,48,41,36],
[45,49,44,37,40,0,43,46,37,43],
[39,44,38,43,36,37,0,46,44,32],
[34,40,36,38,32,34,34,0,33,32],
[39,47,46,46,39,43,36,47,0,39],
[43,53,45,48,44,37,48,48,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,38,25,50,40,35,30,33,30],
[47,0,47,49,42,43,60,43,39,50],
[42,33,0,45,32,34,37,28,31,41],
[55,31,35,0,45,38,29,38,35,42],
[30,38,48,35,0,41,36,23,27,41],
[40,37,46,42,39,0,47,38,29,30],
[45,20,43,51,44,33,0,38,25,38],
[50,37,52,42,57,42,42,0,52,51],
[47,41,49,45,53,51,55,28,0,47],
[50,30,39,38,39,50,42,29,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,43,48,49,57,46,49,55,47],
[40,0,42,42,49,51,40,47,39,46],
[37,38,0,37,44,45,43,41,48,42],
[32,38,43,0,44,42,40,49,49,48],
[31,31,36,36,0,48,36,48,39,42],
[23,29,35,38,32,0,34,43,42,45],
[34,40,37,40,44,46,0,49,50,50],
[31,33,39,31,32,37,31,0,38,43],
[25,41,32,31,41,38,30,42,0,43],
[33,34,38,32,38,35,30,37,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,37,31,31,38,30,32,39,30],
[44,0,42,33,39,43,34,33,43,31],
[43,38,0,41,49,43,38,36,37,32],
[49,47,39,0,45,41,40,37,43,34],
[49,41,31,35,0,42,33,33,34,30],
[42,37,37,39,38,0,28,30,37,27],
[50,46,42,40,47,52,0,36,46,46],
[48,47,44,43,47,50,44,0,51,35],
[41,37,43,37,46,43,34,29,0,26],
[50,49,48,46,50,53,34,45,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,46,46,43,40,46,46,43,46],
[35,0,35,46,33,32,35,43,35,45],
[34,45,0,38,42,45,36,45,39,51],
[34,34,42,0,38,40,31,50,38,43],
[37,47,38,42,0,41,32,50,41,42],
[40,48,35,40,39,0,34,49,48,57],
[34,45,44,49,48,46,0,51,45,47],
[34,37,35,30,30,31,29,0,36,36],
[37,45,41,42,39,32,35,44,0,41],
[34,35,29,37,38,23,33,44,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,36,40,38,48,50,41,31,37],
[39,0,35,40,47,49,45,43,39,36],
[44,45,0,41,44,44,49,49,38,43],
[40,40,39,0,43,49,53,52,43,45],
[42,33,36,37,0,52,42,40,35,38],
[32,31,36,31,28,0,42,33,34,27],
[30,35,31,27,38,38,0,39,28,42],
[39,37,31,28,40,47,41,0,36,38],
[49,41,42,37,45,46,52,44,0,38],
[43,44,37,35,42,53,38,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,54,40,34,41,31,41,43,39],
[37,0,33,41,31,31,23,28,27,26],
[26,47,0,42,31,44,27,41,44,40],
[40,39,38,0,28,35,33,32,32,26],
[46,49,49,52,0,47,41,42,34,40],
[39,49,36,45,33,0,32,45,37,35],
[49,57,53,47,39,48,0,49,52,41],
[39,52,39,48,38,35,31,0,40,41],
[37,53,36,48,46,43,28,40,0,25],
[41,54,40,54,40,45,39,39,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,44,55,31,46,38,43,45,41],
[36,0,45,31,27,36,38,33,29,27],
[36,35,0,39,32,46,22,34,37,23],
[25,49,41,0,28,29,35,40,20,23],
[49,53,48,52,0,58,41,38,42,58],
[34,44,34,51,22,0,34,30,32,45],
[42,42,58,45,39,46,0,32,41,28],
[37,47,46,40,42,50,48,0,37,33],
[35,51,43,60,38,48,39,43,0,43],
[39,53,57,57,22,35,52,47,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,49,46,49,49,44,39,40,53],
[30,0,43,36,33,37,35,31,31,34],
[31,37,0,34,33,38,32,32,31,41],
[34,44,46,0,40,40,39,40,40,43],
[31,47,47,40,0,41,44,36,33,39],
[31,43,42,40,39,0,37,42,35,38],
[36,45,48,41,36,43,0,38,36,47],
[41,49,48,40,44,38,42,0,28,46],
[40,49,49,40,47,45,44,52,0,48],
[27,46,39,37,41,42,33,34,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,43,36,37,41,44,34,39,38],
[40,0,42,35,34,43,41,28,44,37],
[37,38,0,37,39,39,38,36,36,39],
[44,45,43,0,33,38,36,33,43,42],
[43,46,41,47,0,40,45,43,49,34],
[39,37,41,42,40,0,52,32,39,40],
[36,39,42,44,35,28,0,29,36,34],
[46,52,44,47,37,48,51,0,45,48],
[41,36,44,37,31,41,44,35,0,36],
[42,43,41,38,46,40,46,32,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,28,30,33,40,23,35,40,41],
[38,0,34,38,33,45,29,34,46,41],
[52,46,0,38,54,40,40,36,41,41],
[50,42,42,0,44,48,32,38,44,49],
[47,47,26,36,0,37,29,41,37,41],
[40,35,40,32,43,0,36,34,39,39],
[57,51,40,48,51,44,0,36,37,46],
[45,46,44,42,39,46,44,0,38,49],
[40,34,39,36,43,41,43,42,0,43],
[39,39,39,31,39,41,34,31,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,42,40,53,40,39,40,38,39],
[35,0,38,36,47,39,35,40,37,34],
[38,42,0,43,49,34,41,42,35,39],
[40,44,37,0,52,38,39,36,42,41],
[27,33,31,28,0,30,30,32,31,25],
[40,41,46,42,50,0,41,41,39,33],
[41,45,39,41,50,39,0,43,36,38],
[40,40,38,44,48,39,37,0,37,37],
[42,43,45,38,49,41,44,43,0,39],
[41,46,41,39,55,47,42,43,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,36,38,43,38,36,36,40,35],
[43,0,39,37,44,38,35,37,39,38],
[44,41,0,42,46,42,41,39,38,37],
[42,43,38,0,42,40,43,37,41,41],
[37,36,34,38,0,37,32,38,38,34],
[42,42,38,40,43,0,39,35,39,36],
[44,45,39,37,48,41,0,40,34,39],
[44,43,41,43,42,45,40,0,39,32],
[40,41,42,39,42,41,46,41,0,40],
[45,42,43,39,46,44,41,48,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,33,41,31,35,31,37,37,34],
[44,0,35,41,39,43,32,39,34,43],
[47,45,0,39,40,38,39,40,37,39],
[39,39,41,0,34,35,38,34,39,37],
[49,41,40,46,0,41,38,39,35,40],
[45,37,42,45,39,0,37,40,34,41],
[49,48,41,42,42,43,0,40,42,46],
[43,41,40,46,41,40,40,0,40,44],
[43,46,43,41,45,46,38,40,0,40],
[46,37,41,43,40,39,34,36,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,40,37,44,38,40,38,44,40],
[44,0,41,49,47,40,46,49,46,39],
[40,39,0,42,42,43,44,41,39,35],
[43,31,38,0,41,35,38,45,40,37],
[36,33,38,39,0,31,42,44,38,36],
[42,40,37,45,49,0,44,43,45,39],
[40,34,36,42,38,36,0,37,34,41],
[42,31,39,35,36,37,43,0,37,36],
[36,34,41,40,42,35,46,43,0,35],
[40,41,45,43,44,41,39,44,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,45,47,53,50,42,63,47,48],
[51,0,49,40,66,53,39,65,50,42],
[35,31,0,36,48,37,39,49,37,33],
[33,40,44,0,50,38,37,44,44,27],
[27,14,32,30,0,28,24,28,35,24],
[30,27,43,42,52,0,38,59,42,41],
[38,41,41,43,56,42,0,47,58,38],
[17,15,31,36,52,21,33,0,31,28],
[33,30,43,36,45,38,22,49,0,31],
[32,38,47,53,56,39,42,52,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,38,29,26,27,39,30,35,45],
[38,0,36,36,28,36,45,34,24,51],
[42,44,0,30,39,35,51,32,24,48],
[51,44,50,0,40,43,55,39,40,49],
[54,52,41,40,0,44,74,44,28,67],
[53,44,45,37,36,0,43,40,51,55],
[41,35,29,25,6,37,0,32,11,47],
[50,46,48,41,36,40,48,0,26,44],
[45,56,56,40,52,29,69,54,0,54],
[35,29,32,31,13,25,33,36,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,31,40,30,56,39,43,35,40],
[35,0,25,33,30,25,39,30,29,29],
[49,55,0,52,37,44,45,49,39,39],
[40,47,28,0,44,38,50,41,26,22],
[50,50,43,36,0,46,46,50,47,36],
[24,55,36,42,34,0,43,34,44,43],
[41,41,35,30,34,37,0,29,41,36],
[37,50,31,39,30,46,51,0,33,36],
[45,51,41,54,33,36,39,47,0,41],
[40,51,41,58,44,37,44,44,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,44,42,37,41,44,50,42,44],
[39,0,42,38,36,33,38,42,36,43],
[36,38,0,40,35,34,44,44,41,41],
[38,42,40,0,33,33,41,41,41,40],
[43,44,45,47,0,39,41,41,44,46],
[39,47,46,47,41,0,49,50,41,42],
[36,42,36,39,39,31,0,43,35,41],
[30,38,36,39,39,30,37,0,36,33],
[38,44,39,39,36,39,45,44,0,44],
[36,37,39,40,34,38,39,47,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,48,37,37,40,41,30,36,39],
[35,0,32,24,35,40,35,34,38,25],
[32,48,0,46,42,43,42,33,37,48],
[43,56,34,0,34,40,40,42,44,41],
[43,45,38,46,0,29,42,43,43,33],
[40,40,37,40,51,0,48,41,40,37],
[39,45,38,40,38,32,0,40,38,37],
[50,46,47,38,37,39,40,0,33,52],
[44,42,43,36,37,40,42,47,0,44],
[41,55,32,39,47,43,43,28,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,41,62,24,41,39,44,60,56],
[36,0,24,41,11,36,32,25,56,59],
[39,56,0,40,51,56,64,52,43,58],
[18,39,40,0,14,39,40,32,59,60],
[56,69,29,66,0,52,69,59,60,65],
[39,44,24,41,28,0,61,39,57,71],
[41,48,16,40,11,19,0,26,35,47],
[36,55,28,48,21,41,54,0,40,59],
[20,24,37,21,20,23,45,40,0,52],
[24,21,22,20,15,9,33,21,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,46,44,40,35,47,48,55,34],
[48,0,47,48,33,40,42,48,55,46],
[34,33,0,41,47,31,36,47,47,34],
[36,32,39,0,45,36,39,58,54,39],
[40,47,33,35,0,40,31,45,50,38],
[45,40,49,44,40,0,42,49,62,41],
[33,38,44,41,49,38,0,50,49,35],
[32,32,33,22,35,31,30,0,51,33],
[25,25,33,26,30,18,31,29,0,32],
[46,34,46,41,42,39,45,47,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,49,48,37,54,48,43,45,40],
[38,0,43,50,47,61,44,43,47,37],
[31,37,0,46,35,50,45,40,51,41],
[32,30,34,0,32,48,41,34,40,35],
[43,33,45,48,0,61,51,41,45,42],
[26,19,30,32,19,0,39,25,36,25],
[32,36,35,39,29,41,0,31,40,37],
[37,37,40,46,39,55,49,0,45,39],
[35,33,29,40,35,44,40,35,0,42],
[40,43,39,45,38,55,43,41,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,47,33,49,43,41,44,41,41],
[51,0,45,44,44,46,35,43,49,38],
[33,35,0,34,48,39,26,43,46,32],
[47,36,46,0,40,38,34,39,50,38],
[31,36,32,40,0,37,20,46,39,33],
[37,34,41,42,43,0,35,45,43,36],
[39,45,54,46,60,45,0,48,51,44],
[36,37,37,41,34,35,32,0,40,37],
[39,31,34,30,41,37,29,40,0,33],
[39,42,48,42,47,44,36,43,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,49,45,49,39,37,38,39,54],
[39,0,42,44,36,39,40,37,43,43],
[31,38,0,40,33,32,42,35,28,41],
[35,36,40,0,41,40,37,37,34,42],
[31,44,47,39,0,38,38,42,34,40],
[41,41,48,40,42,0,39,42,45,54],
[43,40,38,43,42,41,0,41,42,50],
[42,43,45,43,38,38,39,0,49,54],
[41,37,52,46,46,35,38,31,0,53],
[26,37,39,38,40,26,30,26,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,35,41,31,43,36,37,31,32],
[40,0,32,27,24,40,28,33,26,39],
[45,48,0,52,36,47,44,38,34,37],
[39,53,28,0,20,42,33,30,22,23],
[49,56,44,60,0,53,49,37,40,43],
[37,40,33,38,27,0,33,33,26,36],
[44,52,36,47,31,47,0,41,27,36],
[43,47,42,50,43,47,39,0,40,37],
[49,54,46,58,40,54,53,40,0,46],
[48,41,43,57,37,44,44,43,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,42,48,39,45,43,37,42,40],
[40,0,41,47,49,44,42,38,42,35],
[38,39,0,43,40,44,36,36,46,35],
[32,33,37,0,33,42,34,32,33,33],
[41,31,40,47,0,39,36,39,45,31],
[35,36,36,38,41,0,37,36,42,37],
[37,38,44,46,44,43,0,32,37,40],
[43,42,44,48,41,44,48,0,48,37],
[38,38,34,47,35,38,43,32,0,34],
[40,45,45,47,49,43,40,43,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,34,42,36,44,33,29,36,37],
[52,0,40,35,44,54,36,45,33,30],
[46,40,0,33,41,46,35,43,49,51],
[38,45,47,0,48,44,32,47,43,42],
[44,36,39,32,0,37,34,37,34,42],
[36,26,34,36,43,0,34,38,33,48],
[47,44,45,48,46,46,0,37,42,41],
[51,35,37,33,43,42,43,0,33,39],
[44,47,31,37,46,47,38,47,0,58],
[43,50,29,38,38,32,39,41,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,40,41,47,42,46,38,46,42],
[32,0,34,34,32,34,39,35,44,35],
[40,46,0,42,34,36,53,45,39,38],
[39,46,38,0,31,37,42,39,36,35],
[33,48,46,49,0,37,47,49,47,45],
[38,46,44,43,43,0,51,44,53,49],
[34,41,27,38,33,29,0,36,37,35],
[42,45,35,41,31,36,44,0,41,33],
[34,36,41,44,33,27,43,39,0,26],
[38,45,42,45,35,31,45,47,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,52,55,55,39,52,36,55,64],
[17,0,33,36,17,45,16,8,17,17],
[28,47,0,47,48,56,44,28,47,47],
[25,44,33,0,17,25,33,36,16,37],
[25,63,32,63,0,45,41,28,36,47],
[41,35,24,55,35,0,24,43,52,44],
[28,64,36,47,39,56,0,37,47,56],
[44,72,52,44,52,37,43,0,52,72],
[25,63,33,64,44,28,33,28,0,72],
[16,63,33,43,33,36,24,8,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,43,33,39,37,38,38,39,37],
[43,0,36,37,43,36,42,36,43,36],
[37,44,0,31,44,36,40,39,41,35],
[47,43,49,0,50,38,44,42,40,47],
[41,37,36,30,0,41,38,29,37,32],
[43,44,44,42,39,0,39,41,41,35],
[42,38,40,36,42,41,0,41,44,37],
[42,44,41,38,51,39,39,0,39,36],
[41,37,39,40,43,39,36,41,0,34],
[43,44,45,33,48,45,43,44,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,53,34,42,29,34,40,46,36],
[46,0,51,33,47,49,41,38,44,54],
[27,29,0,33,33,21,36,26,39,38],
[46,47,47,0,50,40,49,38,42,46],
[38,33,47,30,0,31,34,31,37,42],
[51,31,59,40,49,0,41,42,43,46],
[46,39,44,31,46,39,0,39,49,45],
[40,42,54,42,49,38,41,0,46,49],
[34,36,41,38,43,37,31,34,0,44],
[44,26,42,34,38,34,35,31,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,41,39,42,50,51,52,40,49],
[35,0,36,49,47,38,43,46,40,39],
[39,44,0,49,43,45,53,54,43,36],
[41,31,31,0,39,34,41,50,38,44],
[38,33,37,41,0,26,36,51,38,41],
[30,42,35,46,54,0,39,50,27,32],
[29,37,27,39,44,41,0,53,37,37],
[28,34,26,30,29,30,27,0,32,31],
[40,40,37,42,42,53,43,48,0,39],
[31,41,44,36,39,48,43,49,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,49,36,45,43,43,44,42,47],
[31,0,47,34,41,37,44,40,36,44],
[31,33,0,35,47,38,33,40,37,42],
[44,46,45,0,44,43,39,47,45,46],
[35,39,33,36,0,42,40,44,35,35],
[37,43,42,37,38,0,35,42,38,43],
[37,36,47,41,40,45,0,47,31,50],
[36,40,40,33,36,38,33,0,42,50],
[38,44,43,35,45,42,49,38,0,49],
[33,36,38,34,45,37,30,30,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,36,53,14,36,28,32,26,18],
[39,0,49,53,53,53,53,45,53,53],
[44,31,0,43,27,40,22,28,22,14],
[27,27,37,0,23,35,27,41,18,41],
[66,27,53,57,0,50,58,59,26,26],
[44,27,40,45,30,0,45,47,35,44],
[52,27,58,53,22,35,0,55,35,36],
[48,35,52,39,21,33,25,0,25,39],
[54,27,58,62,54,45,45,55,0,49],
[62,27,66,39,54,36,44,41,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,30,52,34,30,38,27,37,22],
[38,0,31,51,37,24,34,28,41,23],
[50,49,0,59,28,33,26,44,27,35],
[28,29,21,0,21,22,34,22,30,27],
[46,43,52,59,0,41,51,34,60,45],
[50,56,47,58,39,0,53,41,55,39],
[42,46,54,46,29,27,0,48,48,54],
[53,52,36,58,46,39,32,0,53,42],
[43,39,53,50,20,25,32,27,0,37],
[58,57,45,53,35,41,26,38,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,27,28,19,19,26,59,0,9],
[71,0,44,46,54,38,44,61,54,54],
[53,36,0,28,36,36,36,62,53,36],
[52,34,52,0,36,38,19,61,36,19],
[61,26,44,44,0,28,44,61,19,27],
[61,42,44,42,52,0,42,61,33,25],
[54,36,44,61,36,38,0,63,38,37],
[21,19,18,19,19,19,17,0,19,19],
[80,26,27,44,61,47,42,61,0,61],
[71,26,44,61,53,55,43,61,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,52,42,46,38,43,37,53,44],
[36,0,46,43,46,38,44,37,49,39],
[28,34,0,34,37,34,30,29,36,26],
[38,37,46,0,44,29,32,32,51,40],
[34,34,43,36,0,33,41,35,39,37],
[42,42,46,51,47,0,42,48,55,35],
[37,36,50,48,39,38,0,33,44,36],
[43,43,51,48,45,32,47,0,53,42],
[27,31,44,29,41,25,36,27,0,34],
[36,41,54,40,43,45,44,38,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,34,44,42,39,35,38,36,31],
[59,0,47,58,48,50,40,43,49,54],
[46,33,0,49,49,49,41,46,48,47],
[36,22,31,0,42,39,29,40,38,38],
[38,32,31,38,0,33,28,28,33,41],
[41,30,31,41,47,0,42,42,41,49],
[45,40,39,51,52,38,0,47,44,48],
[42,37,34,40,52,38,33,0,38,43],
[44,31,32,42,47,39,36,42,0,48],
[49,26,33,42,39,31,32,37,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,23,49,47,33,32,42,51,34],
[43,0,37,38,38,45,39,44,52,30],
[57,43,0,50,42,44,39,33,57,38],
[31,42,30,0,39,34,31,33,42,38],
[33,42,38,41,0,45,41,40,45,42],
[47,35,36,46,35,0,35,35,40,37],
[48,41,41,49,39,45,0,31,49,37],
[38,36,47,47,40,45,49,0,54,43],
[29,28,23,38,35,40,31,26,0,38],
[46,50,42,42,38,43,43,37,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,47,46,47,43,39,41,33,38],
[31,0,42,35,39,43,32,27,26,31],
[33,38,0,44,29,38,31,35,33,39],
[34,45,36,0,41,35,26,46,23,31],
[33,41,51,39,0,45,37,39,32,35],
[37,37,42,45,35,0,34,34,35,36],
[41,48,49,54,43,46,0,47,42,40],
[39,53,45,34,41,46,33,0,29,37],
[47,54,47,57,48,45,38,51,0,40],
[42,49,41,49,45,44,40,43,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,35,41,41,51,31,38,38],
[37,0,42,39,33,41,38,30,34,31],
[40,38,0,34,32,30,51,31,36,39],
[45,41,46,0,45,45,49,47,37,41],
[39,47,48,35,0,41,43,51,41,40],
[39,39,50,35,39,0,46,42,41,44],
[29,42,29,31,37,34,0,34,35,23],
[49,50,49,33,29,38,46,0,35,37],
[42,46,44,43,39,39,45,45,0,35],
[42,49,41,39,40,36,57,43,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,48,41,40,34,50,43,40,39],
[41,0,50,41,33,39,42,44,40,39],
[32,30,0,33,28,25,32,35,40,36],
[39,39,47,0,40,31,46,40,41,34],
[40,47,52,40,0,40,47,45,46,44],
[46,41,55,49,40,0,51,47,47,34],
[30,38,48,34,33,29,0,31,35,30],
[37,36,45,40,35,33,49,0,44,28],
[40,40,40,39,34,33,45,36,0,30],
[41,41,44,46,36,46,50,52,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,49,41,36,39,48,43,25,48],
[38,0,52,31,31,28,49,42,32,39],
[31,28,0,36,31,23,37,37,22,34],
[39,49,44,0,45,51,57,53,42,43],
[44,49,49,35,0,42,50,43,31,47],
[41,52,57,29,38,0,50,48,34,44],
[32,31,43,23,30,30,0,35,35,36],
[37,38,43,27,37,32,45,0,33,39],
[55,48,58,38,49,46,45,47,0,49],
[32,41,46,37,33,36,44,41,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,46,39,45,41,41,48,37,39],
[31,0,40,40,41,43,34,36,38,42],
[34,40,0,34,45,36,36,40,37,38],
[41,40,46,0,44,42,39,38,46,45],
[35,39,35,36,0,36,34,38,39,35],
[39,37,44,38,44,0,32,39,42,37],
[39,46,44,41,46,48,0,37,47,42],
[32,44,40,42,42,41,43,0,42,38],
[43,42,43,34,41,38,33,38,0,40],
[41,38,42,35,45,43,38,42,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,69,55,80,55,71,56,28,53],
[60,0,71,60,71,44,71,71,55,33],
[11,9,0,11,27,28,38,24,28,11],
[25,20,69,0,69,53,49,38,44,42],
[0,9,53,11,0,28,22,13,28,26],
[25,36,52,27,52,0,63,36,28,9],
[9,9,42,31,58,17,0,29,28,26],
[24,9,56,42,67,44,51,0,17,24],
[52,25,52,36,52,52,52,63,0,41],
[27,47,69,38,54,71,54,56,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,43,43,44,43,40,42,40,41],
[35,0,41,44,35,38,35,44,39,44],
[37,39,0,38,44,43,40,44,38,42],
[37,36,42,0,37,38,33,38,42,38],
[36,45,36,43,0,39,35,42,39,41],
[37,42,37,42,41,0,36,36,39,40],
[40,45,40,47,45,44,0,47,40,47],
[38,36,36,42,38,44,33,0,40,36],
[40,41,42,38,41,41,40,40,0,42],
[39,36,38,42,39,40,33,44,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,43,43,44,40,46,36,36,36],
[41,0,43,45,38,41,47,38,38,44],
[37,37,0,43,43,39,45,39,34,37],
[37,35,37,0,34,37,38,33,32,40],
[36,42,37,46,0,40,47,33,39,38],
[40,39,41,43,40,0,47,40,41,36],
[34,33,35,42,33,33,0,39,37,38],
[44,42,41,47,47,40,41,0,40,41],
[44,42,46,48,41,39,43,40,0,45],
[44,36,43,40,42,44,42,39,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,40,42,43,41,40,33,44,40],
[36,0,39,45,42,43,40,42,44,46],
[40,41,0,40,45,46,42,44,43,44],
[38,35,40,0,39,35,37,36,40,39],
[37,38,35,41,0,39,38,35,39,39],
[39,37,34,45,41,0,32,40,41,43],
[40,40,38,43,42,48,0,45,40,38],
[47,38,36,44,45,40,35,0,39,46],
[36,36,37,40,41,39,40,41,0,41],
[40,34,36,41,41,37,42,34,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,55,51,45,47,51,51,36,35],
[29,0,57,43,50,43,43,41,31,36],
[25,23,0,38,29,31,39,34,21,24],
[29,37,42,0,38,32,44,28,29,27],
[35,30,51,42,0,32,45,37,25,37],
[33,37,49,48,48,0,40,37,38,35],
[29,37,41,36,35,40,0,39,26,35],
[29,39,46,52,43,43,41,0,35,36],
[44,49,59,51,55,42,54,45,0,40],
[45,44,56,53,43,45,45,44,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,42,39,45,35,36,37,35,41],
[40,0,43,46,45,42,44,39,43,41],
[38,37,0,42,46,37,42,37,32,32],
[41,34,38,0,42,35,43,38,33,41],
[35,35,34,38,0,36,35,37,34,30],
[45,38,43,45,44,0,40,40,39,42],
[44,36,38,37,45,40,0,36,37,38],
[43,41,43,42,43,40,44,0,37,38],
[45,37,48,47,46,41,43,43,0,39],
[39,39,48,39,50,38,42,42,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,26,16,28,37,45,44,31,21],
[36,0,39,30,30,52,42,30,30,35],
[54,41,0,34,45,55,53,31,41,40],
[64,50,46,0,44,45,54,33,49,34],
[52,50,35,36,0,48,63,31,44,39],
[43,28,25,35,32,0,33,34,38,18],
[35,38,27,26,17,47,0,22,39,17],
[36,50,49,47,49,46,58,0,40,33],
[49,50,39,31,36,42,41,40,0,32],
[59,45,40,46,41,62,63,47,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,31,32,28,34,28,29,46,44],
[40,0,39,38,40,47,35,44,35,37],
[49,41,0,46,40,46,46,44,52,41],
[48,42,34,0,47,46,38,41,40,43],
[52,40,40,33,0,39,37,41,44,39],
[46,33,34,34,41,0,33,35,42,49],
[52,45,34,42,43,47,0,40,44,46],
[51,36,36,39,39,45,40,0,40,49],
[34,45,28,40,36,38,36,40,0,45],
[36,43,39,37,41,31,34,31,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,32,42,47,39,44,42,42,42],
[38,0,30,48,33,37,37,54,44,37],
[48,50,0,40,48,43,47,50,36,49],
[38,32,40,0,40,36,34,40,36,42],
[33,47,32,40,0,36,47,49,38,47],
[41,43,37,44,44,0,47,52,42,38],
[36,43,33,46,33,33,0,45,34,40],
[38,26,30,40,31,28,35,0,29,37],
[38,36,44,44,42,38,46,51,0,44],
[38,43,31,38,33,42,40,43,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,51,45,40,42,42,49,41,49],
[39,0,42,39,40,44,41,43,36,36],
[29,38,0,36,36,35,39,41,34,31],
[35,41,44,0,36,38,35,41,36,34],
[40,40,44,44,0,36,32,38,38,38],
[38,36,45,42,44,0,38,43,35,40],
[38,39,41,45,48,42,0,48,38,40],
[31,37,39,39,42,37,32,0,36,32],
[39,44,46,44,42,45,42,44,0,44],
[31,44,49,46,42,40,40,48,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,39,34,38,33,41,37,33,35],
[46,0,32,31,39,32,45,34,33,51],
[41,48,0,39,42,45,55,53,46,51],
[46,49,41,0,49,42,54,45,38,46],
[42,41,38,31,0,34,49,46,44,44],
[47,48,35,38,46,0,57,53,49,44],
[39,35,25,26,31,23,0,26,32,32],
[43,46,27,35,34,27,54,0,38,47],
[47,47,34,42,36,31,48,42,0,46],
[45,29,29,34,36,36,48,33,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,46,33,37,35,38,33,37,31],
[39,0,51,38,45,45,44,36,36,41],
[34,29,0,33,35,34,37,31,32,34],
[47,42,47,0,47,44,43,43,40,45],
[43,35,45,33,0,38,37,36,37,40],
[45,35,46,36,42,0,42,39,38,42],
[42,36,43,37,43,38,0,36,42,42],
[47,44,49,37,44,41,44,0,41,43],
[43,44,48,40,43,42,38,39,0,48],
[49,39,46,35,40,38,38,37,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,43,20,43,36,43,44,36,33],
[39,0,31,15,37,36,30,38,35,30],
[37,49,0,27,53,42,38,37,29,31],
[60,65,53,0,56,58,38,48,47,43],
[37,43,27,24,0,38,42,30,31,24],
[44,44,38,22,42,0,20,26,22,27],
[37,50,42,42,38,60,0,42,32,39],
[36,42,43,32,50,54,38,0,33,40],
[44,45,51,33,49,58,48,47,0,41],
[47,50,49,37,56,53,41,40,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,49,42,39,47,51,44,53,50],
[29,0,33,36,28,39,37,34,42,36],
[31,47,0,39,28,35,49,48,42,38],
[38,44,41,0,38,46,41,46,41,56],
[41,52,52,42,0,47,47,39,48,48],
[33,41,45,34,33,0,30,39,53,36],
[29,43,31,39,33,50,0,38,42,40],
[36,46,32,34,41,41,42,0,40,47],
[27,38,38,39,32,27,38,40,0,37],
[30,44,42,24,32,44,40,33,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,44,32,39,30,38,49,40,31],
[43,0,42,40,46,36,37,42,46,32],
[36,38,0,36,45,39,39,48,47,32],
[48,40,44,0,52,41,46,47,46,36],
[41,34,35,28,0,28,39,42,37,31],
[50,44,41,39,52,0,48,49,48,35],
[42,43,41,34,41,32,0,46,45,34],
[31,38,32,33,38,31,34,0,39,41],
[40,34,33,34,43,32,35,41,0,27],
[49,48,48,44,49,45,46,39,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,41,40,41,37,39,38,42,40],
[37,0,43,39,39,40,31,39,47,38],
[39,37,0,40,33,43,40,36,40,40],
[40,41,40,0,40,40,33,31,49,37],
[39,41,47,40,0,43,38,34,45,40],
[43,40,37,40,37,0,27,35,42,41],
[41,49,40,47,42,53,0,46,47,48],
[42,41,44,49,46,45,34,0,42,43],
[38,33,40,31,35,38,33,38,0,39],
[40,42,40,43,40,39,32,37,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,41,38,44,42,41,43,47,49],
[36,0,30,36,52,36,38,41,43,32],
[39,50,0,38,50,40,38,45,52,40],
[42,44,42,0,45,37,45,37,49,44],
[36,28,30,35,0,37,33,41,39,33],
[38,44,40,43,43,0,35,43,41,39],
[39,42,42,35,47,45,0,47,48,42],
[37,39,35,43,39,37,33,0,45,44],
[33,37,28,31,41,39,32,35,0,36],
[31,48,40,36,47,41,38,36,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,36,47,54,47,34,31,33,45],
[38,0,32,35,48,43,37,27,40,41],
[44,48,0,42,47,51,35,31,38,42],
[33,45,38,0,39,48,40,42,36,47],
[26,32,33,41,0,43,34,25,26,37],
[33,37,29,32,37,0,26,33,29,41],
[46,43,45,40,46,54,0,36,27,51],
[49,53,49,38,55,47,44,0,41,54],
[47,40,42,44,54,51,53,39,0,56],
[35,39,38,33,43,39,29,26,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,37,47,39,37,36,45,32,40],
[44,0,40,45,46,38,39,50,37,49],
[43,40,0,51,44,42,42,47,42,48],
[33,35,29,0,38,32,33,36,28,39],
[41,34,36,42,0,39,34,36,30,40],
[43,42,38,48,41,0,39,43,34,42],
[44,41,38,47,46,41,0,43,38,43],
[35,30,33,44,44,37,37,0,30,42],
[48,43,38,52,50,46,42,50,0,52],
[40,31,32,41,40,38,37,38,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,53,45,49,55,51,50,52,40],
[40,0,48,41,32,48,44,47,49,30],
[27,32,0,38,27,34,36,38,35,32],
[35,39,42,0,42,57,50,53,34,44],
[31,48,53,38,0,46,48,45,52,40],
[25,32,46,23,34,0,32,43,40,23],
[29,36,44,30,32,48,0,37,37,29],
[30,33,42,27,35,37,43,0,43,34],
[28,31,45,46,28,40,43,37,0,30],
[40,50,48,36,40,57,51,46,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,43,40,35,42,41,39,35,35],
[41,0,28,34,36,30,40,37,32,39],
[37,52,0,39,43,42,49,42,40,44],
[40,46,41,0,44,39,49,42,41,40],
[45,44,37,36,0,33,45,38,36,37],
[38,50,38,41,47,0,46,37,43,37],
[39,40,31,31,35,34,0,40,33,41],
[41,43,38,38,42,43,40,0,41,37],
[45,48,40,39,44,37,47,39,0,39],
[45,41,36,40,43,43,39,43,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,43,47,56,35,43,53,44,51],
[25,0,38,41,50,39,34,38,46,39],
[37,42,0,39,64,41,32,42,40,42],
[33,39,41,0,55,32,39,42,44,45],
[24,30,16,25,0,20,20,29,13,15],
[45,41,39,48,60,0,39,54,36,37],
[37,46,48,41,60,41,0,33,41,48],
[27,42,38,38,51,26,47,0,34,43],
[36,34,40,36,67,44,39,46,0,43],
[29,41,38,35,65,43,32,37,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,40,38,48,52,48,47,47,46],
[27,0,33,36,36,42,37,35,34,35],
[40,47,0,40,38,48,39,40,37,47],
[42,44,40,0,43,46,45,41,46,41],
[32,44,42,37,0,48,43,41,42,45],
[28,38,32,34,32,0,37,34,36,33],
[32,43,41,35,37,43,0,39,36,37],
[33,45,40,39,39,46,41,0,37,43],
[33,46,43,34,38,44,44,43,0,39],
[34,45,33,39,35,47,43,37,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,44,33,31,33,35,38,39,27],
[49,0,52,43,38,49,43,44,47,38],
[36,28,0,29,31,38,38,33,35,28],
[47,37,51,0,39,44,43,50,46,43],
[49,42,49,41,0,43,43,42,41,35],
[47,31,42,36,37,0,33,42,39,37],
[45,37,42,37,37,47,0,42,37,39],
[42,36,47,30,38,38,38,0,34,34],
[41,33,45,34,39,41,43,46,0,32],
[53,42,52,37,45,43,41,46,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,47,45,46,36,50,48,44,43],
[34,0,38,37,46,31,36,36,39,34],
[33,42,0,50,57,33,51,51,43,47],
[35,43,30,0,37,33,34,37,36,42],
[34,34,23,43,0,27,29,36,36,37],
[44,49,47,47,53,0,45,40,49,40],
[30,44,29,46,51,35,0,42,40,33],
[32,44,29,43,44,40,38,0,37,25],
[36,41,37,44,44,31,40,43,0,45],
[37,46,33,38,43,40,47,55,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,47,40,40,47,49,42,43,53],
[35,0,48,39,37,41,49,34,50,49],
[33,32,0,34,42,42,40,33,42,46],
[40,41,46,0,45,47,53,29,47,47],
[40,43,38,35,0,40,45,33,47,44],
[33,39,38,33,40,0,41,32,37,48],
[31,31,40,27,35,39,0,37,40,42],
[38,46,47,51,47,48,43,0,49,49],
[37,30,38,33,33,43,40,31,0,43],
[27,31,34,33,36,32,38,31,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,46,34,42,48,40,38,39,42],
[38,0,48,38,44,53,42,43,42,46],
[34,32,0,37,43,45,27,36,29,43],
[46,42,43,0,37,50,38,42,31,42],
[38,36,37,43,0,47,38,43,32,43],
[32,27,35,30,33,0,31,34,30,36],
[40,38,53,42,42,49,0,38,43,44],
[42,37,44,38,37,46,42,0,36,45],
[41,38,51,49,48,50,37,44,0,49],
[38,34,37,38,37,44,36,35,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,24,21,34,47,50,31,50,18],
[44,0,22,24,30,50,54,22,52,24],
[56,58,0,39,57,59,70,26,57,37],
[59,56,41,0,53,56,61,25,57,49],
[46,50,23,27,0,51,63,40,47,27],
[33,30,21,24,29,0,45,26,42,25],
[30,26,10,19,17,35,0,16,32,26],
[49,58,54,55,40,54,64,0,62,57],
[30,28,23,23,33,38,48,18,0,21],
[62,56,43,31,53,55,54,23,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,45,40,56,42,44,50,45,39],
[30,0,45,39,47,31,42,31,31,33],
[35,35,0,32,44,40,38,28,34,36],
[40,41,48,0,52,39,38,30,34,33],
[24,33,36,28,0,25,25,30,30,27],
[38,49,40,41,55,0,47,34,41,39],
[36,38,42,42,55,33,0,33,35,24],
[30,49,52,50,50,46,47,0,30,42],
[35,49,46,46,50,39,45,50,0,43],
[41,47,44,47,53,41,56,38,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,58,50,45,56,36,50,49,49],
[27,0,44,32,34,43,32,43,30,39],
[22,36,0,36,30,23,33,27,26,27],
[30,48,44,0,30,32,42,33,38,40],
[35,46,50,50,0,46,39,28,46,42],
[24,37,57,48,34,0,50,32,41,37],
[44,48,47,38,41,30,0,38,31,31],
[30,37,53,47,52,48,42,0,51,37],
[31,50,54,42,34,39,49,29,0,39],
[31,41,53,40,38,43,49,43,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,38,34,39,39,33,37,41,35],
[43,0,41,42,38,40,44,41,44,44],
[42,39,0,41,39,40,37,37,39,41],
[46,38,39,0,37,39,38,38,40,34],
[41,42,41,43,0,45,36,38,40,35],
[41,40,40,41,35,0,41,41,43,34],
[47,36,43,42,44,39,0,40,46,36],
[43,39,43,42,42,39,40,0,36,41],
[39,36,41,40,40,37,34,44,0,35],
[45,36,39,46,45,46,44,39,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,49,38,40,41,50,48,37,44],
[32,0,52,47,38,36,40,45,34,32],
[31,28,0,58,49,48,38,39,51,35],
[42,33,22,0,41,23,24,40,32,29],
[40,42,31,39,0,38,42,42,33,28],
[39,44,32,57,42,0,49,48,33,32],
[30,40,42,56,38,31,0,32,32,26],
[32,35,41,40,38,32,48,0,31,38],
[43,46,29,48,47,47,48,49,0,24],
[36,48,45,51,52,48,54,42,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,56,53,40,48,39,46,39,45],
[36,0,51,50,38,52,42,55,42,45],
[24,29,0,32,26,31,24,33,32,28],
[27,30,48,0,29,39,27,42,37,33],
[40,42,54,51,0,35,31,48,39,34],
[32,28,49,41,45,0,33,48,30,31],
[41,38,56,53,49,47,0,56,40,40],
[34,25,47,38,32,32,24,0,31,29],
[41,38,48,43,41,50,40,49,0,35],
[35,35,52,47,46,49,40,51,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,46,43,45,42,41,43,42,39],
[40,0,42,40,44,43,42,47,47,40],
[34,38,0,33,36,36,38,39,39,35],
[37,40,47,0,47,44,45,44,49,43],
[35,36,44,33,0,41,40,43,42,37],
[38,37,44,36,39,0,40,41,40,34],
[39,38,42,35,40,40,0,36,43,38],
[37,33,41,36,37,39,44,0,41,34],
[38,33,41,31,38,40,37,39,0,38],
[41,40,45,37,43,46,42,46,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,40,37,40,42,41,41,48],
[38,0,35,42,34,38,40,38,39,47],
[38,45,0,39,35,39,41,41,43,49],
[40,38,41,0,34,42,47,38,35,44],
[43,46,45,46,0,42,42,43,40,52],
[40,42,41,38,38,0,42,39,39,44],
[38,40,39,33,38,38,0,42,40,48],
[39,42,39,42,37,41,38,0,37,45],
[39,41,37,45,40,41,40,43,0,46],
[32,33,31,36,28,36,32,35,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,44,41,45,37,52,40,35,40],
[32,0,35,37,37,27,40,34,34,40],
[36,45,0,38,38,33,41,36,34,35],
[39,43,42,0,40,36,49,42,42,43],
[35,43,42,40,0,42,45,39,39,41],
[43,53,47,44,38,0,48,47,44,44],
[28,40,39,31,35,32,0,33,31,41],
[40,46,44,38,41,33,47,0,40,39],
[45,46,46,38,41,36,49,40,0,45],
[40,40,45,37,39,36,39,41,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,39,49,50,42,44,41,47,45],
[34,0,41,47,43,34,42,50,41,48],
[41,39,0,47,55,37,34,48,44,43],
[31,33,33,0,35,32,33,39,40,40],
[30,37,25,45,0,31,31,28,27,38],
[38,46,43,48,49,0,46,43,31,52],
[36,38,46,47,49,34,0,49,37,40],
[39,30,32,41,52,37,31,0,34,46],
[33,39,36,40,53,49,43,46,0,43],
[35,32,37,40,42,28,40,34,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,73,36,0,31,31,7,44,29],
[80,0,80,36,29,60,60,36,80,29],
[7,0,0,7,0,31,31,7,44,0],
[44,44,73,0,44,31,44,51,44,73],
[80,51,80,36,0,31,51,7,51,80],
[49,20,49,49,49,0,44,49,44,49],
[49,20,49,36,29,36,0,36,44,49],
[73,44,73,29,73,31,44,0,44,73],
[36,0,36,36,29,36,36,36,0,29],
[51,51,80,7,0,31,31,7,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,34,31,37,35,34,32,40,35],
[46,0,47,33,47,46,51,44,44,51],
[46,33,0,33,49,47,42,46,38,42],
[49,47,47,0,36,52,47,47,42,52],
[43,33,31,44,0,37,40,37,40,35],
[45,34,33,28,43,0,44,38,40,37],
[46,29,38,33,40,36,0,40,34,49],
[48,36,34,33,43,42,40,0,39,36],
[40,36,42,38,40,40,46,41,0,46],
[45,29,38,28,45,43,31,44,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,43,37,42,43,32,36,43,36],
[47,0,35,40,37,42,41,37,36,39],
[37,45,0,40,41,52,45,41,51,47],
[43,40,40,0,39,39,33,34,46,39],
[38,43,39,41,0,43,38,37,50,37],
[37,38,28,41,37,0,34,31,37,35],
[48,39,35,47,42,46,0,39,41,34],
[44,43,39,46,43,49,41,0,45,46],
[37,44,29,34,30,43,39,35,0,33],
[44,41,33,41,43,45,46,34,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,63,51,45,49,51,30,56,61],
[30,0,53,34,35,32,34,25,38,36],
[17,27,0,29,19,24,28,26,47,33],
[29,46,51,0,50,40,50,46,49,47],
[35,45,61,30,0,56,42,37,46,41],
[31,48,56,40,24,0,36,40,43,41],
[29,46,52,30,38,44,0,30,46,50],
[50,55,54,34,43,40,50,0,57,49],
[24,42,33,31,34,37,34,23,0,35],
[19,44,47,33,39,39,30,31,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,48,52,37,45,42,42,34],
[38,0,36,46,48,45,39,44,42,39],
[38,44,0,46,41,42,39,37,42,43],
[32,34,34,0,35,29,26,29,26,27],
[28,32,39,45,0,41,42,39,33,32],
[43,35,38,51,39,0,39,38,42,37],
[35,41,41,54,38,41,0,41,39,43],
[38,36,43,51,41,42,39,0,40,34],
[38,38,38,54,47,38,41,40,0,37],
[46,41,37,53,48,43,37,46,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,31,11,24,0,20,11,11,11],
[69,0,40,20,44,20,56,0,20,16],
[49,40,0,29,24,16,29,40,44,29],
[69,60,51,0,44,20,56,31,51,36],
[56,36,56,36,0,36,56,36,36,36],
[80,60,64,60,44,0,69,24,44,40],
[60,24,51,24,24,11,0,11,44,27],
[69,80,40,49,44,56,69,0,44,36],
[69,60,36,29,44,36,36,36,0,36],
[69,64,51,44,44,40,53,44,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,48,44,56,37,39,37,50,36],
[35,0,51,39,44,45,51,30,40,45],
[32,29,0,45,25,34,45,30,33,35],
[36,41,35,0,26,42,36,44,37,26],
[24,36,55,54,0,45,50,43,54,48],
[43,35,46,38,35,0,42,32,35,38],
[41,29,35,44,30,38,0,36,43,25],
[43,50,50,36,37,48,44,0,46,45],
[30,40,47,43,26,45,37,34,0,30],
[44,35,45,54,32,42,55,35,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,46,44,38,34,41,37,41,36],
[31,0,31,33,34,22,22,34,29,25],
[34,49,0,49,44,36,38,43,47,53],
[36,47,31,0,35,30,34,30,33,41],
[42,46,36,45,0,37,34,30,33,36],
[46,58,44,50,43,0,43,39,46,50],
[39,58,42,46,46,37,0,38,43,44],
[43,46,37,50,50,41,42,0,46,43],
[39,51,33,47,47,34,37,34,0,35],
[44,55,27,39,44,30,36,37,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,39,43,44,45,48,39,35,45],
[35,0,42,40,38,36,40,37,38,39],
[41,38,0,47,39,43,42,46,43,43],
[37,40,33,0,40,38,40,36,39,42],
[36,42,41,40,0,41,45,42,36,42],
[35,44,37,42,39,0,43,42,36,48],
[32,40,38,40,35,37,0,37,34,45],
[41,43,34,44,38,38,43,0,37,47],
[45,42,37,41,44,44,46,43,0,43],
[35,41,37,38,38,32,35,33,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,30,39,38,35,30,36,38,30],
[49,0,42,39,46,43,41,46,42,45],
[50,38,0,46,46,48,43,49,47,37],
[41,41,34,0,42,44,35,42,47,44],
[42,34,34,38,0,45,36,38,43,36],
[45,37,32,36,35,0,38,40,46,34],
[50,39,37,45,44,42,0,42,48,45],
[44,34,31,38,42,40,38,0,50,37],
[42,38,33,33,37,34,32,30,0,35],
[50,35,43,36,44,46,35,43,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,46,40,42,42,48,40,43,34],
[42,0,48,38,40,35,39,28,41,41],
[34,32,0,35,30,39,46,34,29,42],
[40,42,45,0,45,46,41,35,39,41],
[38,40,50,35,0,34,39,42,33,36],
[38,45,41,34,46,0,37,30,43,38],
[32,41,34,39,41,43,0,39,44,43],
[40,52,46,45,38,50,41,0,38,42],
[37,39,51,41,47,37,36,42,0,43],
[46,39,38,39,44,42,37,38,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,54,41,51,41,39,41,51,44],
[33,0,42,38,41,39,34,46,51,43],
[26,38,0,39,31,38,34,46,36,43],
[39,42,41,0,33,42,34,30,44,42],
[29,39,49,47,0,43,31,34,39,44],
[39,41,42,38,37,0,42,37,51,44],
[41,46,46,46,49,38,0,41,53,48],
[39,34,34,50,46,43,39,0,52,42],
[29,29,44,36,41,29,27,28,0,32],
[36,37,37,38,36,36,32,38,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,41,41,39,43,42,45,32,40],
[29,0,28,37,33,32,30,31,31,29],
[39,52,0,42,41,45,46,41,38,42],
[39,43,38,0,43,43,42,40,31,36],
[41,47,39,37,0,45,45,37,36,40],
[37,48,35,37,35,0,30,38,37,33],
[38,50,34,38,35,50,0,35,34,36],
[35,49,39,40,43,42,45,0,32,40],
[48,49,42,49,44,43,46,48,0,38],
[40,51,38,44,40,47,44,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,43,40,36,34,39,42,40,30],
[40,0,40,44,33,35,39,40,43,36],
[37,40,0,42,38,37,49,41,39,39],
[40,36,38,0,34,37,34,38,38,36],
[44,47,42,46,0,38,44,43,51,39],
[46,45,43,43,42,0,47,45,42,40],
[41,41,31,46,36,33,0,33,38,39],
[38,40,39,42,37,35,47,0,43,31],
[40,37,41,42,29,38,42,37,0,34],
[50,44,41,44,41,40,41,49,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,51,37,41,37,46,40,51,43],
[40,0,41,40,47,41,36,39,48,44],
[29,39,0,32,36,42,28,40,40,40],
[43,40,48,0,39,39,39,38,57,48],
[39,33,44,41,0,32,39,36,46,37],
[43,39,38,41,48,0,35,44,46,38],
[34,44,52,41,41,45,0,42,41,53],
[40,41,40,42,44,36,38,0,45,43],
[29,32,40,23,34,34,39,35,0,33],
[37,36,40,32,43,42,27,37,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,74,50,14,16,36,36,60,22],
[44,0,58,74,38,24,40,74,44,46],
[6,22,0,42,20,22,22,42,26,22],
[30,6,38,0,44,24,6,30,30,30],
[66,42,60,36,0,36,42,36,60,42],
[64,56,58,56,44,0,56,56,64,36],
[44,40,58,74,38,24,0,58,58,60],
[44,6,38,50,44,24,22,0,24,22],
[20,36,54,50,20,16,22,56,0,22],
[58,34,58,50,38,44,20,58,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,47,51,35,51,49,49,43,46],
[25,0,36,38,36,36,40,41,32,32],
[33,44,0,43,41,38,44,40,37,38],
[29,42,37,0,30,46,40,40,39,34],
[45,44,39,50,0,43,46,46,44,40],
[29,44,42,34,37,0,38,42,29,36],
[31,40,36,40,34,42,0,47,35,32],
[31,39,40,40,34,38,33,0,39,31],
[37,48,43,41,36,51,45,41,0,38],
[34,48,42,46,40,44,48,49,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,34,44,41,52,47,50,43,52],
[32,0,43,27,36,45,35,36,29,35],
[46,37,0,47,49,53,53,59,40,49],
[36,53,33,0,38,55,47,37,40,55],
[39,44,31,42,0,50,43,47,39,56],
[28,35,27,25,30,0,36,31,33,29],
[33,45,27,33,37,44,0,42,34,53],
[30,44,21,43,33,49,38,0,30,39],
[37,51,40,40,41,47,46,50,0,40],
[28,45,31,25,24,51,27,41,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,46,42,38,38,39,39,44,43],
[35,0,39,41,30,41,35,40,41,36],
[34,41,0,39,39,39,40,36,44,41],
[38,39,41,0,33,37,43,41,50,40],
[42,50,41,47,0,38,41,43,44,40],
[42,39,41,43,42,0,41,38,47,40],
[41,45,40,37,39,39,0,45,46,38],
[41,40,44,39,37,42,35,0,42,37],
[36,39,36,30,36,33,34,38,0,33],
[37,44,39,40,40,40,42,43,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,39,34,35,44,44,43,45,50],
[34,0,40,31,37,36,44,32,38,40],
[41,40,0,37,44,49,41,35,42,47],
[46,49,43,0,40,51,45,44,49,47],
[45,43,36,40,0,47,48,38,45,52],
[36,44,31,29,33,0,39,33,28,41],
[36,36,39,35,32,41,0,29,34,38],
[37,48,45,36,42,47,51,0,42,51],
[35,42,38,31,35,52,46,38,0,49],
[30,40,33,33,28,39,42,29,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,45,45,37,40,45,44,39,40],
[34,0,47,43,40,37,43,41,41,42],
[35,33,0,42,29,36,44,34,39,36],
[35,37,38,0,36,33,39,32,33,41],
[43,40,51,44,0,35,49,34,41,43],
[40,43,44,47,45,0,42,39,36,42],
[35,37,36,41,31,38,0,39,29,40],
[36,39,46,48,46,41,41,0,32,44],
[41,39,41,47,39,44,51,48,0,41],
[40,38,44,39,37,38,40,36,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,43,42,41,39,41,50,44],
[38,0,43,43,41,40,38,44,46,40],
[38,37,0,39,38,41,32,43,43,39],
[37,37,41,0,41,38,35,42,53,39],
[38,39,42,39,0,39,29,40,43,34],
[39,40,39,42,41,0,37,43,47,42],
[41,42,48,45,51,43,0,47,40,42],
[39,36,37,38,40,37,33,0,45,42],
[30,34,37,27,37,33,40,35,0,37],
[36,40,41,41,46,38,38,38,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,49,37,46,49,45,41,42,48],
[31,0,36,37,41,46,39,26,33,31],
[31,44,0,36,43,44,42,32,43,32],
[43,43,44,0,36,39,44,33,37,44],
[34,39,37,44,0,44,39,34,32,39],
[31,34,36,41,36,0,38,31,39,31],
[35,41,38,36,41,42,0,30,41,33],
[39,54,48,47,46,49,50,0,44,42],
[38,47,37,43,48,41,39,36,0,35],
[32,49,48,36,41,49,47,38,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,36,36,38,40,43,35,36,40],
[48,0,45,43,45,40,49,43,42,39],
[44,35,0,37,38,33,39,37,39,37],
[44,37,43,0,39,41,45,42,48,37],
[42,35,42,41,0,32,47,42,40,37],
[40,40,47,39,48,0,47,41,45,37],
[37,31,41,35,33,33,0,36,36,32],
[45,37,43,38,38,39,44,0,40,38],
[44,38,41,32,40,35,44,40,0,34],
[40,41,43,43,43,43,48,42,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,37,29,37,37,39,31,40,34],
[41,0,39,29,33,30,38,29,35,30],
[43,41,0,41,37,40,43,40,47,38],
[51,51,39,0,41,36,44,36,36,37],
[43,47,43,39,0,36,47,35,37,41],
[43,50,40,44,44,0,43,44,43,45],
[41,42,37,36,33,37,0,33,33,35],
[49,51,40,44,45,36,47,0,43,40],
[40,45,33,44,43,37,47,37,0,43],
[46,50,42,43,39,35,45,40,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,45,42,58,46,57,33,41,54],
[18,0,28,21,21,30,41,25,30,38],
[35,52,0,40,44,50,48,36,41,51],
[38,59,40,0,50,41,60,40,43,54],
[22,59,36,30,0,37,48,34,37,46],
[34,50,30,39,43,0,54,21,38,46],
[23,39,32,20,32,26,0,17,33,36],
[47,55,44,40,46,59,63,0,51,51],
[39,50,39,37,43,42,47,29,0,44],
[26,42,29,26,34,34,44,29,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,45,38,40,36,30,39,41,42],
[40,0,38,36,42,38,36,42,44,40],
[35,42,0,37,38,33,29,36,36,37],
[42,44,43,0,42,41,36,36,44,42],
[40,38,42,38,0,40,33,37,39,43],
[44,42,47,39,40,0,37,35,40,46],
[50,44,51,44,47,43,0,44,40,47],
[41,38,44,44,43,45,36,0,42,43],
[39,36,44,36,41,40,40,38,0,42],
[38,40,43,38,37,34,33,37,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,58,49,45,42,33,38,46,40],
[48,0,54,49,42,43,40,37,51,42],
[22,26,0,36,32,31,18,23,33,20],
[31,31,44,0,36,35,29,29,41,31],
[35,38,48,44,0,41,28,35,43,35],
[38,37,49,45,39,0,32,29,40,39],
[47,40,62,51,52,48,0,52,47,46],
[42,43,57,51,45,51,28,0,54,42],
[34,29,47,39,37,40,33,26,0,36],
[40,38,60,49,45,41,34,38,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,40,47,46,44,42,44,45,47],
[28,0,37,41,48,41,42,45,39,36],
[40,43,0,48,47,45,45,43,49,45],
[33,39,32,0,43,42,40,45,45,41],
[34,32,33,37,0,34,30,40,41,34],
[36,39,35,38,46,0,43,42,40,33],
[38,38,35,40,50,37,0,47,46,41],
[36,35,37,35,40,38,33,0,37,26],
[35,41,31,35,39,40,34,43,0,31],
[33,44,35,39,46,47,39,54,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,36,38,39,37,28,34,33,38],
[40,0,36,39,41,32,35,37,34,39],
[44,44,0,40,37,35,31,36,35,41],
[42,41,40,0,43,35,42,36,38,40],
[41,39,43,37,0,37,42,43,37,45],
[43,48,45,45,43,0,43,39,44,48],
[52,45,49,38,38,37,0,40,38,49],
[46,43,44,44,37,41,40,0,37,37],
[47,46,45,42,43,36,42,43,0,45],
[42,41,39,40,35,32,31,43,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,48,50,40,48,35,45,42,38],
[35,0,42,45,37,43,41,43,42,42],
[32,38,0,39,33,39,39,40,30,37],
[30,35,41,0,41,46,39,43,40,39],
[40,43,47,39,0,46,38,41,40,39],
[32,37,41,34,34,0,34,41,38,32],
[45,39,41,41,42,46,0,50,45,37],
[35,37,40,37,39,39,30,0,36,32],
[38,38,50,40,40,42,35,44,0,40],
[42,38,43,41,41,48,43,48,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,35,34,30,37,41,43,30,46],
[30,0,37,44,45,34,38,45,35,31],
[45,43,0,37,38,41,42,50,38,47],
[46,36,43,0,39,45,47,54,44,34],
[50,35,42,41,0,40,42,54,32,44],
[43,46,39,35,40,0,35,44,47,37],
[39,42,38,33,38,45,0,37,31,33],
[37,35,30,26,26,36,43,0,31,39],
[50,45,42,36,48,33,49,49,0,30],
[34,49,33,46,36,43,47,41,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,39,32,44,48,43,42,35,31],
[34,0,37,23,37,48,36,33,43,24],
[41,43,0,30,35,38,33,33,41,19],
[48,57,50,0,42,49,47,44,53,34],
[36,43,45,38,0,47,45,36,44,27],
[32,32,42,31,33,0,31,22,38,26],
[37,44,47,33,35,49,0,29,27,27],
[38,47,47,36,44,58,51,0,37,44],
[45,37,39,27,36,42,53,43,0,38],
[49,56,61,46,53,54,53,36,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,37,44,37,45,38,41,34,36],
[39,0,34,39,42,46,41,39,30,32],
[43,46,0,46,33,47,43,47,36,42],
[36,41,34,0,40,50,45,46,35,41],
[43,38,47,40,0,48,51,38,45,39],
[35,34,33,30,32,0,31,39,28,28],
[42,39,37,35,29,49,0,34,36,33],
[39,41,33,34,42,41,46,0,35,35],
[46,50,44,45,35,52,44,45,0,43],
[44,48,38,39,41,52,47,45,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,36,39,35,45,37,33,44,36],
[37,0,38,43,36,35,28,34,40,33],
[44,42,0,42,36,41,41,40,42,38],
[41,37,38,0,31,41,31,35,41,42],
[45,44,44,49,0,47,39,41,45,36],
[35,45,39,39,33,0,34,36,41,38],
[43,52,39,49,41,46,0,43,47,42],
[47,46,40,45,39,44,37,0,47,36],
[36,40,38,39,35,39,33,33,0,38],
[44,47,42,38,44,42,38,44,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,60,45,19,20,21,49,43,25],
[18,0,68,42,14,24,23,37,28,23],
[20,12,0,45,19,12,27,12,35,25],
[35,38,35,0,35,42,50,33,42,51],
[61,66,61,45,0,22,21,53,42,34],
[60,56,68,38,58,0,57,50,54,36],
[59,57,53,30,59,23,0,52,28,27],
[31,43,68,47,27,30,28,0,36,36],
[37,52,45,38,38,26,52,44,0,24],
[55,57,55,29,46,44,53,44,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,33,36,29,37,37,34,29,33],
[50,0,46,40,44,43,47,41,45,37],
[47,34,0,45,40,51,43,40,43,37],
[44,40,35,0,35,44,42,38,39,38],
[51,36,40,45,0,50,43,45,40,40],
[43,37,29,36,30,0,42,37,40,27],
[43,33,37,38,37,38,0,32,39,30],
[46,39,40,42,35,43,48,0,40,34],
[51,35,37,41,40,40,41,40,0,29],
[47,43,43,42,40,53,50,46,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,42,45,21,55,33,38,36,36],
[28,0,29,24,21,45,17,38,25,37],
[38,51,0,45,38,50,49,63,36,25],
[35,56,35,0,24,39,42,38,28,31],
[59,59,42,56,0,48,34,35,37,50],
[25,35,30,41,32,0,21,33,18,30],
[47,63,31,38,46,59,0,56,41,44],
[42,42,17,42,45,47,24,0,30,19],
[44,55,44,52,43,62,39,50,0,40],
[44,43,55,49,30,50,36,61,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,47,49,39,41,35,47,51,44],
[43,0,47,44,42,40,41,45,45,40],
[33,33,0,40,39,39,31,47,37,36],
[31,36,40,0,35,41,29,47,39,45],
[41,38,41,45,0,40,30,33,45,42],
[39,40,41,39,40,0,31,50,43,37],
[45,39,49,51,50,49,0,53,56,45],
[33,35,33,33,47,30,27,0,35,30],
[29,35,43,41,35,37,24,45,0,34],
[36,40,44,35,38,43,35,50,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,40,39,34,36,44,50,32,35],
[42,0,46,48,41,45,51,57,36,41],
[40,34,0,46,34,42,40,44,38,30],
[41,32,34,0,40,37,52,46,32,33],
[46,39,46,40,0,38,50,53,42,44],
[44,35,38,43,42,0,45,51,42,34],
[36,29,40,28,30,35,0,49,27,29],
[30,23,36,34,27,29,31,0,32,21],
[48,44,42,48,38,38,53,48,0,32],
[45,39,50,47,36,46,51,59,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,48,46,50,49,42,44,32,58],
[21,0,27,33,19,24,28,29,26,34],
[32,53,0,38,36,47,48,36,37,53],
[34,47,42,0,43,48,45,51,38,51],
[30,61,44,37,0,48,46,39,51,55],
[31,56,33,32,32,0,49,41,32,50],
[38,52,32,35,34,31,0,40,31,46],
[36,51,44,29,41,39,40,0,38,46],
[48,54,43,42,29,48,49,42,0,53],
[22,46,27,29,25,30,34,34,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,29,40,36,38,44,35,33,44],
[44,0,38,45,35,41,46,44,42,46],
[51,42,0,46,42,44,47,37,38,48],
[40,35,34,0,32,38,48,29,29,40],
[44,45,38,48,0,36,43,41,42,44],
[42,39,36,42,44,0,41,34,39,47],
[36,34,33,32,37,39,0,32,29,34],
[45,36,43,51,39,46,48,0,47,47],
[47,38,42,51,38,41,51,33,0,48],
[36,34,32,40,36,33,46,33,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,40,80,78,80,78,42,40,40],
[2,0,2,62,24,24,24,2,24,2],
[40,78,0,80,60,62,60,2,24,22],
[0,18,0,0,0,2,0,2,22,0],
[2,56,20,80,0,20,56,20,24,0],
[0,56,18,78,60,0,56,18,22,0],
[2,56,20,80,24,24,0,2,24,2],
[38,78,78,78,60,62,78,0,22,22],
[40,56,56,58,56,58,56,58,0,56],
[40,78,58,80,80,80,78,58,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,39,42,49,40,45,39,33],
[37,0,47,41,45,48,49,47,35,48],
[40,33,0,35,31,37,32,37,36,35],
[41,39,45,0,32,50,35,42,41,32],
[38,35,49,48,0,35,37,42,39,33],
[31,32,43,30,45,0,33,34,35,39],
[40,31,48,45,43,47,0,41,40,37],
[35,33,43,38,38,46,39,0,38,37],
[41,45,44,39,41,45,40,42,0,39],
[47,32,45,48,47,41,43,43,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,46,44,42,40,42,44,47,36],
[39,0,36,42,45,35,37,41,46,40],
[34,44,0,51,40,39,44,38,49,42],
[36,38,29,0,35,41,36,32,40,25],
[38,35,40,45,0,43,39,39,43,40],
[40,45,41,39,37,0,38,43,40,31],
[38,43,36,44,41,42,0,43,39,35],
[36,39,42,48,41,37,37,0,49,37],
[33,34,31,40,37,40,41,31,0,33],
[44,40,38,55,40,49,45,43,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,47,39,43,44,47,41,35,42],
[32,0,44,42,29,38,43,39,28,40],
[33,36,0,33,38,45,46,36,39,34],
[41,38,47,0,37,50,50,40,36,37],
[37,51,42,43,0,45,53,47,38,42],
[36,42,35,30,35,0,43,37,37,29],
[33,37,34,30,27,37,0,37,32,34],
[39,41,44,40,33,43,43,0,38,35],
[45,52,41,44,42,43,48,42,0,37],
[38,40,46,43,38,51,46,45,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,51,40,40,44,41,50,43,41],
[34,0,44,36,40,27,32,36,35,35],
[29,36,0,36,28,26,32,39,37,33],
[40,44,44,0,36,37,38,43,33,31],
[40,40,52,44,0,42,38,42,37,42],
[36,53,54,43,38,0,45,45,45,43],
[39,48,48,42,42,35,0,43,37,37],
[30,44,41,37,38,35,37,0,39,33],
[37,45,43,47,43,35,43,41,0,41],
[39,45,47,49,38,37,43,47,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,52,32,37,42,52,37,46,35],
[48,0,59,46,49,39,55,51,53,46],
[28,21,0,33,31,30,22,26,31,30],
[48,34,47,0,38,38,40,36,38,24],
[43,31,49,42,0,30,39,46,40,29],
[38,41,50,42,50,0,46,57,44,51],
[28,25,58,40,41,34,0,29,36,26],
[43,29,54,44,34,23,51,0,43,46],
[34,27,49,42,40,36,44,37,0,24],
[45,34,50,56,51,29,54,34,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,46,29,32,43,36,34,46,33],
[43,0,45,37,31,35,45,40,48,34],
[34,35,0,34,31,41,35,31,45,37],
[51,43,46,0,42,53,47,46,59,40],
[48,49,49,38,0,42,47,35,50,46],
[37,45,39,27,38,0,46,32,44,35],
[44,35,45,33,33,34,0,32,44,35],
[46,40,49,34,45,48,48,0,61,40],
[34,32,35,21,30,36,36,19,0,24],
[47,46,43,40,34,45,45,40,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,33,27,45,19,23,47,26,35],
[60,0,52,43,58,44,42,43,40,49],
[47,28,0,38,33,21,19,43,22,25],
[53,37,42,0,51,41,30,47,49,45],
[35,22,47,29,0,38,36,34,32,38],
[61,36,59,39,42,0,42,47,41,59],
[57,38,61,50,44,38,0,48,30,33],
[33,37,37,33,46,33,32,0,10,29],
[54,40,58,31,48,39,50,70,0,53],
[45,31,55,35,42,21,47,51,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,38,39,41,38,37,43,38,41],
[37,0,46,46,39,45,41,48,41,40],
[42,34,0,39,38,37,32,41,34,37],
[41,34,41,0,39,41,39,45,37,41],
[39,41,42,41,0,40,37,43,38,40],
[42,35,43,39,40,0,36,40,38,44],
[43,39,48,41,43,44,0,50,41,46],
[37,32,39,35,37,40,30,0,35,36],
[42,39,46,43,42,42,39,45,0,44],
[39,40,43,39,40,36,34,44,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,41,41,44,40,47,31,47,48],
[40,0,38,32,42,36,42,31,41,46],
[39,42,0,36,41,31,48,31,47,46],
[39,48,44,0,46,41,48,37,49,48],
[36,38,39,34,0,34,45,33,38,44],
[40,44,49,39,46,0,50,35,38,44],
[33,38,32,32,35,30,0,33,34,40],
[49,49,49,43,47,45,47,0,40,50],
[33,39,33,31,42,42,46,40,0,41],
[32,34,34,32,36,36,40,30,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,28,43,44,43,39,42,33,43],
[44,0,31,39,56,37,57,35,34,45],
[52,49,0,53,50,40,46,48,49,44],
[37,41,27,0,41,30,45,32,36,40],
[36,24,30,39,0,29,52,36,29,34],
[37,43,40,50,51,0,47,42,38,52],
[41,23,34,35,28,33,0,32,30,38],
[38,45,32,48,44,38,48,0,58,24],
[47,46,31,44,51,42,50,22,0,35],
[37,35,36,40,46,28,42,56,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,36,36,27,34,49,32,51,33],
[39,0,44,50,32,45,43,34,50,39],
[44,36,0,45,39,34,44,38,53,47],
[44,30,35,0,31,33,41,30,49,41],
[53,48,41,49,0,37,44,32,56,38],
[46,35,46,47,43,0,38,33,45,40],
[31,37,36,39,36,42,0,35,51,34],
[48,46,42,50,48,47,45,0,57,40],
[29,30,27,31,24,35,29,23,0,34],
[47,41,33,39,42,40,46,40,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,44,29,32,41,32,20,28,28],
[44,0,51,48,45,64,44,39,27,60],
[36,29,0,40,41,56,48,43,17,52],
[51,32,40,0,48,60,51,47,36,47],
[48,35,39,32,0,44,56,43,43,43],
[39,16,24,20,36,0,12,39,12,32],
[48,36,32,29,24,68,0,47,20,32],
[60,41,37,33,37,41,33,0,29,45],
[52,53,63,44,37,68,60,51,0,52],
[52,20,28,33,37,48,48,35,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,43,41,38,36,29,56,37,40],
[42,0,53,38,49,39,32,56,40,46],
[37,27,0,35,44,33,39,49,46,43],
[39,42,45,0,43,33,37,49,29,48],
[42,31,36,37,0,32,23,41,41,49],
[44,41,47,47,48,0,39,57,46,46],
[51,48,41,43,57,41,0,56,38,39],
[24,24,31,31,39,23,24,0,31,31],
[43,40,34,51,39,34,42,49,0,45],
[40,34,37,32,31,34,41,49,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,34,39,40,35,43,41,47,41],
[47,0,35,42,44,42,44,37,41,42],
[46,45,0,48,39,40,47,49,49,44],
[41,38,32,0,45,43,39,43,45,44],
[40,36,41,35,0,39,46,46,44,43],
[45,38,40,37,41,0,44,41,46,44],
[37,36,33,41,34,36,0,39,41,41],
[39,43,31,37,34,39,41,0,44,38],
[33,39,31,35,36,34,39,36,0,36],
[39,38,36,36,37,36,39,42,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,45,43,47,46,39,45,44,47],
[42,0,53,42,44,50,45,44,38,44],
[35,27,0,35,39,39,36,32,35,39],
[37,38,45,0,47,44,40,51,40,41],
[33,36,41,33,0,44,36,33,40,43],
[34,30,41,36,36,0,37,38,42,41],
[41,35,44,40,44,43,0,46,42,45],
[35,36,48,29,47,42,34,0,45,43],
[36,42,45,40,40,38,38,35,0,45],
[33,36,41,39,37,39,35,37,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,24,37,30,35,47,33,23,31],
[44,0,41,47,44,43,47,45,40,52],
[56,39,0,46,43,47,52,37,33,44],
[43,33,34,0,35,38,44,33,29,42],
[50,36,37,45,0,37,47,43,40,45],
[45,37,33,42,43,0,38,36,35,40],
[33,33,28,36,33,42,0,39,29,33],
[47,35,43,47,37,44,41,0,35,43],
[57,40,47,51,40,45,51,45,0,50],
[49,28,36,38,35,40,47,37,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,46,44,43,40,46,41,44,44],
[40,0,47,45,41,43,48,41,45,45],
[34,33,0,41,33,39,45,37,42,42],
[36,35,39,0,42,38,41,35,44,37],
[37,39,47,38,0,35,42,45,44,37],
[40,37,41,42,45,0,40,37,51,40],
[34,32,35,39,38,40,0,37,51,40],
[39,39,43,45,35,43,43,0,47,35],
[36,35,38,36,36,29,29,33,0,32],
[36,35,38,43,43,40,40,45,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,37,49,31,62,43,32,36,44],
[51,0,42,32,42,70,50,41,53,44],
[43,38,0,49,37,67,51,51,40,61],
[31,48,31,0,41,53,42,51,41,54],
[49,38,43,39,0,60,50,39,43,50],
[18,10,13,27,20,0,21,20,19,38],
[37,30,29,38,30,59,0,40,40,47],
[48,39,29,29,41,60,40,0,50,44],
[44,27,40,39,37,61,40,30,0,48],
[36,36,19,26,30,42,33,36,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,39,46,40,38,34,33,34,42],
[39,0,44,48,43,39,40,38,33,34],
[41,36,0,45,40,43,36,33,35,45],
[34,32,35,0,42,32,38,33,34,40],
[40,37,40,38,0,41,37,34,33,44],
[42,41,37,48,39,0,45,45,35,46],
[46,40,44,42,43,35,0,35,36,45],
[47,42,47,47,46,35,45,0,41,43],
[46,47,45,46,47,45,44,39,0,44],
[38,46,35,40,36,34,35,37,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,49,49,35,45,30,45,42,40],
[51,0,44,65,46,55,44,45,34,39],
[31,36,0,44,44,39,32,38,35,31],
[31,15,36,0,36,34,21,40,28,30],
[45,34,36,44,0,30,33,35,40,33],
[35,25,41,46,50,0,26,44,32,30],
[50,36,48,59,47,54,0,66,40,50],
[35,35,42,40,45,36,14,0,39,35],
[38,46,45,52,40,48,40,41,0,26],
[40,41,49,50,47,50,30,45,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,38,41,58,65,40,71,41,47],
[22,0,35,13,48,46,21,34,35,31],
[42,45,0,33,40,47,35,53,14,33],
[39,67,47,0,62,47,35,67,47,62],
[22,32,40,18,0,51,39,42,49,26],
[15,34,33,33,29,0,33,51,29,15],
[40,59,45,45,41,47,0,60,54,27],
[9,46,27,13,38,29,20,0,27,27],
[39,45,66,33,31,51,26,53,0,19],
[33,49,47,18,54,65,53,53,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,36,47,28,26,41,31,34,37],
[37,0,27,41,35,26,39,37,31,35],
[44,53,0,53,40,30,46,34,34,40],
[33,39,27,0,32,33,36,24,21,36],
[52,45,40,48,0,32,46,30,34,43],
[54,54,50,47,48,0,46,39,43,48],
[39,41,34,44,34,34,0,35,40,46],
[49,43,46,56,50,41,45,0,40,47],
[46,49,46,59,46,37,40,40,0,44],
[43,45,40,44,37,32,34,33,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,44,30,41,41,41,42,34,46],
[41,0,40,34,48,38,45,40,35,40],
[36,40,0,33,41,36,42,34,38,36],
[50,46,47,0,38,41,44,47,42,42],
[39,32,39,42,0,42,41,50,40,44],
[39,42,44,39,38,0,41,43,43,39],
[39,35,38,36,39,39,0,36,39,42],
[38,40,46,33,30,37,44,0,39,40],
[46,45,42,38,40,37,41,41,0,41],
[34,40,44,38,36,41,38,40,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,48,41,44,41,39,39,40,43],
[40,0,55,42,42,48,39,43,37,37],
[32,25,0,36,31,30,32,31,32,32],
[39,38,44,0,45,43,46,44,42,36],
[36,38,49,35,0,37,36,38,34,35],
[39,32,50,37,43,0,36,41,42,37],
[41,41,48,34,44,44,0,41,35,39],
[41,37,49,36,42,39,39,0,34,34],
[40,43,48,38,46,38,45,46,0,36],
[37,43,48,44,45,43,41,46,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,44,39,41,38,36,46,50,38],
[36,0,37,35,39,41,34,43,32,41],
[36,43,0,40,40,36,39,41,38,37],
[41,45,40,0,44,37,37,43,36,40],
[39,41,40,36,0,37,31,42,37,42],
[42,39,44,43,43,0,36,47,39,47],
[44,46,41,43,49,44,0,47,45,40],
[34,37,39,37,38,33,33,0,33,36],
[30,48,42,44,43,41,35,47,0,43],
[42,39,43,40,38,33,40,44,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,37,42,42,40,40,35,42,42],
[44,0,40,45,48,46,43,38,43,47],
[43,40,0,46,48,44,44,39,41,48],
[38,35,34,0,43,40,39,37,34,37],
[38,32,32,37,0,36,38,39,43,37],
[40,34,36,40,44,0,41,33,37,32],
[40,37,36,41,42,39,0,34,39,42],
[45,42,41,43,41,47,46,0,47,39],
[38,37,39,46,37,43,41,33,0,43],
[38,33,32,43,43,48,38,41,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,43,48,37,49,48,44,60,36],
[32,0,44,45,37,37,44,48,44,42],
[37,36,0,42,36,40,34,40,44,41],
[32,35,38,0,32,35,35,38,36,43],
[43,43,44,48,0,50,38,41,46,48],
[31,43,40,45,30,0,41,46,47,44],
[32,36,46,45,42,39,0,39,43,42],
[36,32,40,42,39,34,41,0,43,42],
[20,36,36,44,34,33,37,37,0,35],
[44,38,39,37,32,36,38,38,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,41,37,38,39,33,44,42,33],
[43,0,47,53,47,50,44,37,39,37],
[39,33,0,32,24,30,23,35,37,22],
[43,27,48,0,31,45,41,37,27,44],
[42,33,56,49,0,61,40,44,41,45],
[41,30,50,35,19,0,36,41,36,40],
[47,36,57,39,40,44,0,56,48,45],
[36,43,45,43,36,39,24,0,34,34],
[38,41,43,53,39,44,32,46,0,43],
[47,43,58,36,35,40,35,46,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,41,66,59,60,61,58,55,43],
[40,0,35,46,34,46,31,22,42,42],
[39,45,0,63,48,54,55,49,38,54],
[14,34,17,0,52,29,26,15,29,24],
[21,46,32,28,0,36,31,26,46,28],
[20,34,26,51,44,0,40,22,40,24],
[19,49,25,54,49,40,0,17,45,38],
[22,58,31,65,54,58,63,0,45,46],
[25,38,42,51,34,40,35,35,0,33],
[37,38,26,56,52,56,42,34,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,41,40,39,37,51,42,39,39],
[36,0,37,39,39,41,45,43,44,43],
[39,43,0,49,36,37,47,49,47,42],
[40,41,31,0,40,39,46,50,42,37],
[41,41,44,40,0,37,44,46,49,38],
[43,39,43,41,43,0,45,43,44,40],
[29,35,33,34,36,35,0,43,38,42],
[38,37,31,30,34,37,37,0,36,33],
[41,36,33,38,31,36,42,44,0,37],
[41,37,38,43,42,40,38,47,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,41,39,31,36,39,33,28,38],
[45,0,41,41,41,31,31,34,35,36],
[39,39,0,39,37,40,31,38,38,36],
[41,39,41,0,36,35,31,31,33,40],
[49,39,43,44,0,42,39,42,35,39],
[44,49,40,45,38,0,36,38,37,36],
[41,49,49,49,41,44,0,41,43,40],
[47,46,42,49,38,42,39,0,43,38],
[52,45,42,47,45,43,37,37,0,46],
[42,44,44,40,41,44,40,42,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,50,28,35,34,44,39,56,21],
[45,0,48,32,40,42,57,55,47,44],
[30,32,0,11,32,35,26,36,42,17],
[52,48,69,0,53,49,53,54,60,29],
[45,40,48,27,0,52,45,31,44,40],
[46,38,45,31,28,0,37,32,43,37],
[36,23,54,27,35,43,0,38,42,27],
[41,25,44,26,49,48,42,0,30,32],
[24,33,38,20,36,37,38,50,0,12],
[59,36,63,51,40,43,53,48,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,43,49,48,40,40,37,37,43],
[41,0,43,50,41,34,44,36,42,45],
[37,37,0,43,45,38,40,39,41,46],
[31,30,37,0,36,37,39,36,35,31],
[32,39,35,44,0,34,38,38,37,40],
[40,46,42,43,46,0,45,38,32,43],
[40,36,40,41,42,35,0,37,37,42],
[43,44,41,44,42,42,43,0,37,41],
[43,38,39,45,43,48,43,43,0,41],
[37,35,34,49,40,37,38,39,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,39,34,49,39,33,48,46,38],
[30,0,34,35,46,37,24,39,44,36],
[41,46,0,43,55,38,40,51,42,41],
[46,45,37,0,56,47,39,56,48,45],
[31,34,25,24,0,30,25,38,33,38],
[41,43,42,33,50,0,39,44,39,38],
[47,56,40,41,55,41,0,47,43,47],
[32,41,29,24,42,36,33,0,37,35],
[34,36,38,32,47,41,37,43,0,40],
[42,44,39,35,42,42,33,45,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,45,48,38,41,45,41,40,40],
[30,0,43,35,37,27,38,36,38,38],
[35,37,0,32,33,36,41,39,38,36],
[32,45,48,0,33,34,37,39,41,30],
[42,43,47,47,0,41,41,43,50,35],
[39,53,44,46,39,0,42,41,42,36],
[35,42,39,43,39,38,0,40,33,35],
[39,44,41,41,37,39,40,0,42,40],
[40,42,42,39,30,38,47,38,0,40],
[40,42,44,50,45,44,45,40,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,54,39,41,55,36,48,21,46],
[32,0,47,36,44,50,42,40,34,39],
[26,33,0,26,31,46,28,38,22,27],
[41,44,54,0,50,56,48,47,39,52],
[39,36,49,30,0,49,37,37,32,45],
[25,30,34,24,31,0,32,35,29,35],
[44,38,52,32,43,48,0,38,43,53],
[32,40,42,33,43,45,42,0,33,41],
[59,46,58,41,48,51,37,47,0,54],
[34,41,53,28,35,45,27,39,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,43,31,34,55,44,40,43,49],
[26,0,18,35,27,43,31,37,33,48],
[37,62,0,54,41,50,45,49,47,50],
[49,45,26,0,35,43,47,39,51,48],
[46,53,39,45,0,53,37,51,41,58],
[25,37,30,37,27,0,31,45,38,47],
[36,49,35,33,43,49,0,49,45,45],
[40,43,31,41,29,35,31,0,33,41],
[37,47,33,29,39,42,35,47,0,46],
[31,32,30,32,22,33,35,39,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,34,37,40,32,40,34,43,36],
[44,0,44,48,41,37,33,37,48,38],
[46,36,0,46,49,45,41,44,48,40],
[43,32,34,0,44,41,34,43,43,40],
[40,39,31,36,0,33,33,34,39,24],
[48,43,35,39,47,0,40,39,51,34],
[40,47,39,46,47,40,0,38,52,41],
[46,43,36,37,46,41,42,0,47,34],
[37,32,32,37,41,29,28,33,0,38],
[44,42,40,40,56,46,39,46,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,57,51,38,44,46,49,50,40],
[24,0,44,43,32,47,36,46,44,33],
[23,36,0,46,43,43,46,42,49,33],
[29,37,34,0,27,47,34,38,32,33],
[42,48,37,53,0,49,36,47,34,38],
[36,33,37,33,31,0,33,37,34,23],
[34,44,34,46,44,47,0,52,44,43],
[31,34,38,42,33,43,28,0,42,32],
[30,36,31,48,46,46,36,38,0,32],
[40,47,47,47,42,57,37,48,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,39,39,39,44,44,44,11,21],
[36,0,14,39,39,13,11,38,13,2],
[41,66,0,49,33,46,19,46,52,10],
[41,41,31,0,25,41,8,46,41,41],
[41,41,47,55,0,52,19,52,52,41],
[36,67,34,39,28,0,22,41,45,36],
[36,69,61,72,61,58,0,72,36,33],
[36,42,34,34,28,39,8,0,34,41],
[69,67,28,39,28,35,44,46,0,35],
[59,78,70,39,39,44,47,39,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,35,39,44,49,37,39,45,42],
[35,0,47,41,46,46,38,41,41,43],
[45,33,0,37,43,42,41,44,42,36],
[41,39,43,0,51,46,44,46,41,39],
[36,34,37,29,0,42,31,40,28,37],
[31,34,38,34,38,0,25,34,35,39],
[43,42,39,36,49,55,0,41,37,48],
[41,39,36,34,40,46,39,0,44,36],
[35,39,38,39,52,45,43,36,0,43],
[38,37,44,41,43,41,32,44,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,19,18,3,43,27,19,18,24],
[62,0,38,68,22,56,31,47,50,53],
[61,42,0,46,15,24,40,40,27,30],
[62,12,34,0,18,40,9,25,27,30],
[77,58,65,62,0,40,55,56,49,62],
[37,24,56,40,40,0,37,47,33,55],
[53,49,40,71,25,43,0,31,34,40],
[61,33,40,55,24,33,49,0,33,48],
[62,30,53,53,31,47,46,47,0,62],
[56,27,50,50,18,25,40,32,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,38,39,32,34,34,34,42,39],
[39,0,38,41,40,38,31,31,43,45],
[42,42,0,35,36,42,36,34,44,48],
[41,39,45,0,40,39,41,44,44,48],
[48,40,44,40,0,43,38,38,40,49],
[46,42,38,41,37,0,35,36,42,41],
[46,49,44,39,42,45,0,42,53,49],
[46,49,46,36,42,44,38,0,44,49],
[38,37,36,36,40,38,27,36,0,47],
[41,35,32,32,31,39,31,31,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,42,44,41,41,42,38,43,34],
[41,0,41,45,43,39,40,36,46,35],
[38,39,0,38,40,41,40,34,43,38],
[36,35,42,0,34,35,37,32,36,33],
[39,37,40,46,0,39,42,35,43,39],
[39,41,39,45,41,0,37,32,41,31],
[38,40,40,43,38,43,0,38,44,32],
[42,44,46,48,45,48,42,0,42,40],
[37,34,37,44,37,39,36,38,0,38],
[46,45,42,47,41,49,48,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,45,51,45,49,43,54,38,43],
[36,0,42,44,38,46,39,43,38,40],
[35,38,0,44,38,45,37,45,35,35],
[29,36,36,0,33,45,39,38,27,32],
[35,42,42,47,0,42,35,39,32,40],
[31,34,35,35,38,0,38,41,31,35],
[37,41,43,41,45,42,0,40,30,42],
[26,37,35,42,41,39,40,0,28,37],
[42,42,45,53,48,49,50,52,0,39],
[37,40,45,48,40,45,38,43,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,40,52,30,50,44,36,41,47],
[50,0,41,38,36,44,30,27,32,42],
[40,39,0,41,49,51,53,27,41,32],
[28,42,39,0,34,37,54,55,36,39],
[50,44,31,46,0,39,47,40,37,39],
[30,36,29,43,41,0,49,31,50,44],
[36,50,27,26,33,31,0,38,22,35],
[44,53,53,25,40,49,42,0,39,37],
[39,48,39,44,43,30,58,41,0,46],
[33,38,48,41,41,36,45,43,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,32,30,42,39,36,42,46,41],
[40,0,36,25,31,40,41,48,46,41],
[48,44,0,31,38,39,45,46,36,37],
[50,55,49,0,40,45,52,49,42,50],
[38,49,42,40,0,43,44,54,37,44],
[41,40,41,35,37,0,44,47,40,33],
[44,39,35,28,36,36,0,43,28,34],
[38,32,34,31,26,33,37,0,29,31],
[34,34,44,38,43,40,52,51,0,45],
[39,39,43,30,36,47,46,49,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,54,45,43,46,53,18,41,39],
[39,0,51,29,50,41,50,30,39,41],
[26,29,0,26,35,32,37,20,35,25],
[35,51,54,0,36,34,44,35,30,44],
[37,30,45,44,0,35,48,33,29,41],
[34,39,48,46,45,0,51,43,27,43],
[27,30,43,36,32,29,0,24,31,37],
[62,50,60,45,47,37,56,0,40,50],
[39,41,45,50,51,53,49,40,0,40],
[41,39,55,36,39,37,43,30,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,25,32,43,20,40,32,33,55],
[51,0,44,46,44,47,42,50,36,61],
[55,36,0,44,42,51,38,49,51,58],
[48,34,36,0,51,45,37,36,49,57],
[37,36,38,29,0,30,35,34,40,48],
[60,33,29,35,50,0,42,43,46,59],
[40,38,42,43,45,38,0,43,38,64],
[48,30,31,44,46,37,37,0,44,51],
[47,44,29,31,40,34,42,36,0,51],
[25,19,22,23,32,21,16,29,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,30,14,48,23,27,20,31,24],
[60,0,23,33,36,24,46,33,43,32],
[50,57,0,46,58,42,56,52,58,38],
[66,47,34,0,55,19,32,38,46,25],
[32,44,22,25,0,26,41,30,32,35],
[57,56,38,61,54,0,45,41,34,41],
[53,34,24,48,39,35,0,18,35,22],
[60,47,28,42,50,39,62,0,44,40],
[49,37,22,34,48,46,45,36,0,29],
[56,48,42,55,45,39,58,40,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,36,32,38,26,29,30,43,23],
[43,0,63,56,44,31,36,45,53,41],
[44,17,0,31,21,11,36,18,53,41],
[48,24,49,0,21,14,33,33,58,45],
[42,36,59,59,0,39,27,18,63,39],
[54,49,69,66,41,0,47,28,72,42],
[51,44,44,47,53,33,0,42,48,23],
[50,35,62,47,62,52,38,0,56,36],
[37,27,27,22,17,8,32,24,0,16],
[57,39,39,35,41,38,57,44,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,36,42,38,33,39,35,38,38],
[42,0,40,38,33,36,41,37,45,33],
[44,40,0,42,36,47,45,38,40,39],
[38,42,38,0,39,40,42,41,45,37],
[42,47,44,41,0,40,37,46,42,41],
[47,44,33,40,40,0,39,40,44,29],
[41,39,35,38,43,41,0,38,38,34],
[45,43,42,39,34,40,42,0,48,42],
[42,35,40,35,38,36,42,32,0,31],
[42,47,41,43,39,51,46,38,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,40,31,44,43,39,75,80,61],
[33,0,40,19,32,40,11,59,59,27],
[40,40,0,53,53,77,37,67,59,54],
[49,61,27,0,32,30,47,49,67,30],
[36,48,27,48,0,57,29,77,67,44],
[37,40,3,50,23,0,20,50,37,46],
[41,69,43,33,51,60,0,65,57,60],
[5,21,13,31,3,30,15,0,45,33],
[0,21,21,13,13,43,23,35,0,17],
[19,53,26,50,36,34,20,47,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,35,49,25,30,34,32,41,40],
[44,0,42,49,33,35,45,38,46,42],
[45,38,0,55,37,42,49,42,41,36],
[31,31,25,0,25,24,39,34,35,23],
[55,47,43,55,0,43,34,42,51,46],
[50,45,38,56,37,0,32,39,33,42],
[46,35,31,41,46,48,0,53,49,39],
[48,42,38,46,38,41,27,0,43,42],
[39,34,39,45,29,47,31,37,0,29],
[40,38,44,57,34,38,41,38,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,50,47,37,28,32,51,60,51],
[52,0,50,49,36,36,49,76,59,76],
[30,30,0,67,40,57,53,53,34,80],
[33,31,13,0,37,31,30,54,14,31],
[43,44,40,43,0,25,26,41,50,41],
[52,44,23,49,55,0,49,64,33,41],
[48,31,27,50,54,31,0,54,40,28],
[29,4,27,26,39,16,26,0,39,36],
[20,21,46,66,30,47,40,41,0,67],
[29,4,0,49,39,39,52,44,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,33,35,32,39,25,31,33,34],
[36,0,28,38,28,40,30,37,28,32],
[47,52,0,44,43,42,45,36,40,42],
[45,42,36,0,36,44,33,42,37,37],
[48,52,37,44,0,44,37,44,37,40],
[41,40,38,36,36,0,40,35,35,39],
[55,50,35,47,43,40,0,43,43,44],
[49,43,44,38,36,45,37,0,34,38],
[47,52,40,43,43,45,37,46,0,44],
[46,48,38,43,40,41,36,42,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,45,36,39,42,39,44,42,40],
[49,0,45,39,46,48,48,52,41,38],
[35,35,0,39,41,50,48,45,49,37],
[44,41,41,0,37,49,45,49,42,34],
[41,34,39,43,0,46,40,45,48,43],
[38,32,30,31,34,0,38,39,37,31],
[41,32,32,35,40,42,0,41,38,35],
[36,28,35,31,35,41,39,0,36,34],
[38,39,31,38,32,43,42,44,0,33],
[40,42,43,46,37,49,45,46,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,40,42,50,44,39,45,43,46],
[36,0,38,39,42,45,36,40,38,45],
[40,42,0,43,49,38,43,48,40,44],
[38,41,37,0,44,42,34,39,44,45],
[30,38,31,36,0,35,35,37,33,38],
[36,35,42,38,45,0,36,42,35,40],
[41,44,37,46,45,44,0,46,42,53],
[35,40,32,41,43,38,34,0,41,42],
[37,42,40,36,47,45,38,39,0,43],
[34,35,36,35,42,40,27,38,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,49,40,47,35,42,38,37,40],
[37,0,44,40,45,43,38,38,40,47],
[31,36,0,41,45,31,42,26,34,43],
[40,40,39,0,49,39,52,38,43,46],
[33,35,35,31,0,29,31,35,33,34],
[45,37,49,41,51,0,42,40,41,51],
[38,42,38,28,49,38,0,41,41,48],
[42,42,54,42,45,40,39,0,33,48],
[43,40,46,37,47,39,39,47,0,52],
[40,33,37,34,46,29,32,32,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,20,20,52,32,56,55,11,43],
[20,0,26,11,30,17,37,47,22,6],
[60,54,0,40,57,28,65,70,43,54],
[60,69,40,0,63,41,65,70,30,52],
[28,50,23,17,0,28,50,55,28,33],
[48,63,52,39,52,0,61,49,27,45],
[24,43,15,15,30,19,0,34,20,21],
[25,33,10,10,25,31,46,0,16,16],
[69,58,37,50,52,53,60,64,0,60],
[37,74,26,28,47,35,59,64,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,36,43,47,41,44,39,36,39],
[46,0,45,39,48,49,47,32,39,35],
[44,35,0,36,39,44,41,31,42,38],
[37,41,44,0,52,48,44,36,42,44],
[33,32,41,28,0,39,40,31,36,35],
[39,31,36,32,41,0,43,29,30,27],
[36,33,39,36,40,37,0,33,36,30],
[41,48,49,44,49,51,47,0,43,39],
[44,41,38,38,44,50,44,37,0,33],
[41,45,42,36,45,53,50,41,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,45,39,41,40,37,41,39,44],
[32,0,34,36,31,32,34,33,39,34],
[35,46,0,41,39,41,37,39,40,39],
[41,44,39,0,43,36,41,43,38,43],
[39,49,41,37,0,37,35,40,41,46],
[40,48,39,44,43,0,46,47,45,39],
[43,46,43,39,45,34,0,43,42,41],
[39,47,41,37,40,33,37,0,38,38],
[41,41,40,42,39,35,38,42,0,41],
[36,46,41,37,34,41,39,42,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,46,42,35,43,39,41,33,35],
[42,0,49,43,33,37,48,48,42,45],
[34,31,0,35,27,27,36,42,35,26],
[38,37,45,0,48,34,31,35,38,35],
[45,47,53,32,0,38,35,38,45,38],
[37,43,53,46,42,0,45,45,56,40],
[41,32,44,49,45,35,0,35,39,36],
[39,32,38,45,42,35,45,0,39,33],
[47,38,45,42,35,24,41,41,0,45],
[45,35,54,45,42,40,44,47,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,40,45,31,38,43,33,33,30],
[33,0,38,36,32,34,39,39,25,31],
[40,42,0,41,37,30,43,38,38,34],
[35,44,39,0,36,41,46,46,30,27],
[49,48,43,44,0,44,46,48,32,31],
[42,46,50,39,36,0,46,47,33,32],
[37,41,37,34,34,34,0,40,30,26],
[47,41,42,34,32,33,40,0,26,30],
[47,55,42,50,48,47,50,54,0,40],
[50,49,46,53,49,48,54,50,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,57,40,65,48,38,40,60,37],
[23,0,27,11,31,28,15,18,20,11],
[23,53,0,19,39,28,20,20,36,40],
[40,69,61,0,69,52,47,47,69,49],
[15,49,41,11,0,24,20,20,42,44],
[32,52,52,28,56,0,52,25,55,20],
[42,65,60,33,60,28,0,50,45,37],
[40,62,60,33,60,55,30,0,60,37],
[20,60,44,11,38,25,35,20,0,28],
[43,69,40,31,36,60,43,43,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,41,34,40,40,33,32,38,39],
[45,0,48,40,48,39,36,43,39,39],
[39,32,0,37,38,38,39,37,43,47],
[46,40,43,0,42,46,49,42,40,40],
[40,32,42,38,0,40,36,33,31,39],
[40,41,42,34,40,0,39,39,38,32],
[47,44,41,31,44,41,0,42,42,41],
[48,37,43,38,47,41,38,0,38,35],
[42,41,37,40,49,42,38,42,0,40],
[41,41,33,40,41,48,39,45,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,41,31,32,39,40,33,30,32],
[48,0,49,39,33,42,38,38,36,39],
[39,31,0,37,36,42,38,35,37,34],
[49,41,43,0,44,41,47,44,37,46],
[48,47,44,36,0,45,38,42,46,40],
[41,38,38,39,35,0,42,32,40,42],
[40,42,42,33,42,38,0,41,39,36],
[47,42,45,36,38,48,39,0,42,38],
[50,44,43,43,34,40,41,38,0,40],
[48,41,46,34,40,38,44,42,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,37,31,36,42,34,31,31,38],
[48,0,43,43,48,41,47,47,49,40],
[43,37,0,42,38,42,39,39,41,34],
[49,37,38,0,44,42,41,38,33,44],
[44,32,42,36,0,40,42,44,36,41],
[38,39,38,38,40,0,44,41,43,40],
[46,33,41,39,38,36,0,35,42,37],
[49,33,41,42,36,39,45,0,41,39],
[49,31,39,47,44,37,38,39,0,39],
[42,40,46,36,39,40,43,41,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,34,36,34,32,36,40,34,30],
[48,0,44,39,37,39,42,42,41,36],
[46,36,0,41,38,35,32,45,43,37],
[44,41,39,0,38,33,37,35,43,37],
[46,43,42,42,0,39,40,46,48,39],
[48,41,45,47,41,0,39,44,49,40],
[44,38,48,43,40,41,0,39,48,40],
[40,38,35,45,34,36,41,0,40,39],
[46,39,37,37,32,31,32,40,0,32],
[50,44,43,43,41,40,40,41,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,31,30,23,35,30,24,19,40],
[54,0,39,42,43,44,35,40,36,47],
[49,41,0,41,39,43,39,36,33,48],
[50,38,39,0,41,41,43,39,31,47],
[57,37,41,39,0,44,43,37,35,50],
[45,36,37,39,36,0,39,33,39,43],
[50,45,41,37,37,41,0,40,35,51],
[56,40,44,41,43,47,40,0,42,48],
[61,44,47,49,45,41,45,38,0,59],
[40,33,32,33,30,37,29,32,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,39,29,49,40,21,43,31,30],
[36,0,27,21,32,11,29,38,25,24],
[41,53,0,41,41,32,32,52,38,33],
[51,59,39,0,43,38,44,43,34,39],
[31,48,39,37,0,29,35,38,35,30],
[40,69,48,42,51,0,39,47,46,30],
[59,51,48,36,45,41,0,72,48,43],
[37,42,28,37,42,33,8,0,20,45],
[49,55,42,46,45,34,32,60,0,47],
[50,56,47,41,50,50,37,35,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,33,48,32,47,51,42,35,62],
[51,0,30,52,44,46,50,47,51,55],
[47,50,0,50,48,61,52,39,44,48],
[32,28,30,0,28,27,53,38,36,47],
[48,36,32,52,0,40,56,40,50,65],
[33,34,19,53,40,0,47,36,39,54],
[29,30,28,27,24,33,0,28,34,57],
[38,33,41,42,40,44,52,0,57,55],
[45,29,36,44,30,41,46,23,0,62],
[18,25,32,33,15,26,23,25,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,35,40,42,34,40,37,36,36],
[52,0,40,44,43,46,46,47,43,39],
[45,40,0,42,45,42,37,39,40,41],
[40,36,38,0,44,38,39,37,46,38],
[38,37,35,36,0,35,39,34,33,41],
[46,34,38,42,45,0,45,40,43,42],
[40,34,43,41,41,35,0,38,35,33],
[43,33,41,43,46,40,42,0,34,37],
[44,37,40,34,47,37,45,46,0,34],
[44,41,39,42,39,38,47,43,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,45,57,21,25,36,36,45,24],
[59,0,24,70,45,49,49,49,24,24],
[35,56,0,56,31,35,25,46,10,35],
[23,10,24,0,44,10,24,21,34,34],
[59,35,49,36,0,36,49,36,24,59],
[55,31,45,70,44,0,49,59,45,34],
[44,31,55,56,31,31,0,42,44,55],
[44,31,34,59,44,21,38,0,34,23],
[35,56,70,46,56,35,36,46,0,59],
[56,56,45,46,21,46,25,57,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,38,40,40,33,37,41,38,40],
[33,0,31,35,26,23,34,40,39,37],
[42,49,0,43,42,40,42,41,57,49],
[40,45,37,0,40,34,38,43,46,44],
[40,54,38,40,0,37,41,44,44,46],
[47,57,40,46,43,0,47,44,50,50],
[43,46,38,42,39,33,0,43,35,42],
[39,40,39,37,36,36,37,0,45,41],
[42,41,23,34,36,30,45,35,0,39],
[40,43,31,36,34,30,38,39,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,43,40,38,40,42,41,41,31],
[31,0,48,33,36,33,39,36,40,30],
[37,32,0,34,31,33,37,28,33,30],
[40,47,46,0,33,36,36,36,49,31],
[42,44,49,47,0,40,49,39,43,34],
[40,47,47,44,40,0,46,44,48,40],
[38,41,43,44,31,34,0,34,42,31],
[39,44,52,44,41,36,46,0,45,33],
[39,40,47,31,37,32,38,35,0,34],
[49,50,50,49,46,40,49,47,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,37,40,44,36,45,54,47,35],
[38,0,48,48,43,42,44,49,41,39],
[43,32,0,43,51,47,47,44,41,44],
[40,32,37,0,43,40,38,43,38,37],
[36,37,29,37,0,40,37,38,32,35],
[44,38,33,40,40,0,37,44,43,35],
[35,36,33,42,43,43,0,43,40,40],
[26,31,36,37,42,36,37,0,33,37],
[33,39,39,42,48,37,40,47,0,40],
[45,41,36,43,45,45,40,43,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,42,32,38,41,38,41,35,38],
[42,0,44,45,40,38,37,41,38,40],
[38,36,0,34,39,39,37,41,35,40],
[48,35,46,0,40,44,43,45,41,43],
[42,40,41,40,0,39,46,42,34,44],
[39,42,41,36,41,0,42,42,32,42],
[42,43,43,37,34,38,0,41,37,38],
[39,39,39,35,38,38,39,0,33,39],
[45,42,45,39,46,48,43,47,0,41],
[42,40,40,37,36,38,42,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,46,41,41,33,41,39,37,46],
[42,0,39,43,47,36,36,49,41,48],
[34,41,0,42,38,34,42,36,36,44],
[39,37,38,0,43,31,46,36,38,45],
[39,33,42,37,0,35,42,36,37,42],
[47,44,46,49,45,0,43,45,39,47],
[39,44,38,34,38,37,0,41,36,43],
[41,31,44,44,44,35,39,0,38,42],
[43,39,44,42,43,41,44,42,0,43],
[34,32,36,35,38,33,37,38,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,57,43,48,48,45,42,40,43],
[37,0,50,54,55,40,60,42,39,37],
[23,30,0,32,44,34,35,25,33,21],
[37,26,48,0,44,44,41,40,40,41],
[32,25,36,36,0,33,45,36,42,38],
[32,40,46,36,47,0,41,38,38,38],
[35,20,45,39,35,39,0,23,42,29],
[38,38,55,40,44,42,57,0,38,32],
[40,41,47,40,38,42,38,42,0,35],
[37,43,59,39,42,42,51,48,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,41,32,27,23,29,28,30,27],
[46,0,58,56,55,38,42,38,31,52],
[39,22,0,46,35,31,37,40,30,46],
[48,24,34,0,30,39,36,33,28,50],
[53,25,45,50,0,38,42,36,27,47],
[57,42,49,41,42,0,39,43,43,47],
[51,38,43,44,38,41,0,41,36,42],
[52,42,40,47,44,37,39,0,38,44],
[50,49,50,52,53,37,44,42,0,46],
[53,28,34,30,33,33,38,36,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,45,37,42,43,35,40,37,37],
[44,0,37,46,42,36,40,38,43,46],
[35,43,0,44,41,40,42,43,39,43],
[43,34,36,0,34,34,34,35,32,40],
[38,38,39,46,0,37,33,35,36,38],
[37,44,40,46,43,0,36,40,42,39],
[45,40,38,46,47,44,0,49,48,47],
[40,42,37,45,45,40,31,0,41,39],
[43,37,41,48,44,38,32,39,0,42],
[43,34,37,40,42,41,33,41,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,30,34,36,39,38,45,40,35],
[44,0,45,43,49,46,47,46,43,36],
[50,35,0,39,46,47,45,49,39,42],
[46,37,41,0,46,44,45,51,44,33],
[44,31,34,34,0,41,41,48,40,36],
[41,34,33,36,39,0,37,41,34,32],
[42,33,35,35,39,43,0,40,34,35],
[35,34,31,29,32,39,40,0,37,31],
[40,37,41,36,40,46,46,43,0,35],
[45,44,38,47,44,48,45,49,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,44,45,37,45,42,45,49,44],
[33,0,38,38,35,39,38,39,38,43],
[36,42,0,41,46,49,45,43,49,45],
[35,42,39,0,50,45,47,45,43,37],
[43,45,34,30,0,39,38,38,44,43],
[35,41,31,35,41,0,35,38,39,42],
[38,42,35,33,42,45,0,46,48,38],
[35,41,37,35,42,42,34,0,39,45],
[31,42,31,37,36,41,32,41,0,37],
[36,37,35,43,37,38,42,35,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,35,36,36,37,40,44,35,43],
[31,0,30,24,31,29,28,38,29,31],
[45,50,0,37,36,35,40,47,36,31],
[44,56,43,0,34,36,46,45,35,38],
[44,49,44,46,0,42,47,40,45,41],
[43,51,45,44,38,0,36,41,38,36],
[40,52,40,34,33,44,0,41,28,43],
[36,42,33,35,40,39,39,0,34,38],
[45,51,44,45,35,42,52,46,0,42],
[37,49,49,42,39,44,37,42,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,49,40,42,49,44,50,41,44],
[34,0,43,35,46,40,42,43,39,38],
[31,37,0,31,43,43,34,40,36,38],
[40,45,49,0,45,47,41,46,35,43],
[38,34,37,35,0,35,36,38,39,38],
[31,40,37,33,45,0,37,47,38,34],
[36,38,46,39,44,43,0,46,37,43],
[30,37,40,34,42,33,34,0,42,37],
[39,41,44,45,41,42,43,38,0,44],
[36,42,42,37,42,46,37,43,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,41,37,33,33,46,46,34,37],
[31,0,24,42,37,37,39,46,18,30],
[39,56,0,46,44,34,54,42,40,43],
[43,38,34,0,42,28,43,44,25,37],
[47,43,36,38,0,25,46,50,27,39],
[47,43,46,52,55,0,51,47,30,44],
[34,41,26,37,34,29,0,43,22,27],
[34,34,38,36,30,33,37,0,16,30],
[46,62,40,55,53,50,58,64,0,37],
[43,50,37,43,41,36,53,50,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,47,37,48,34,53,33,36,51],
[33,0,42,40,40,32,43,44,36,51],
[33,38,0,37,40,35,36,29,28,40],
[43,40,43,0,49,39,40,38,38,49],
[32,40,40,31,0,39,40,32,36,41],
[46,48,45,41,41,0,44,45,36,50],
[27,37,44,40,40,36,0,29,32,40],
[47,36,51,42,48,35,51,0,45,44],
[44,44,52,42,44,44,48,35,0,45],
[29,29,40,31,39,30,40,36,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,33,37,31,37,30,34,44,38],
[43,0,34,45,38,28,40,25,52,26],
[47,46,0,41,42,40,57,45,55,33],
[43,35,39,0,38,43,37,38,50,43],
[49,42,38,42,0,40,52,38,56,22],
[43,52,40,37,40,0,39,38,44,38],
[50,40,23,43,28,41,0,45,45,28],
[46,55,35,42,42,42,35,0,53,33],
[36,28,25,30,24,36,35,27,0,32],
[42,54,47,37,58,42,52,47,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,44,58,37,38,35,39,43,44],
[46,0,50,61,39,55,36,34,35,40],
[36,30,0,38,32,35,37,24,36,35],
[22,19,42,0,16,33,26,23,20,26],
[43,41,48,64,0,54,50,48,36,51],
[42,25,45,47,26,0,30,44,37,33],
[45,44,43,54,30,50,0,37,45,32],
[41,46,56,57,32,36,43,0,32,43],
[37,45,44,60,44,43,35,48,0,38],
[36,40,45,54,29,47,48,37,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,46,54,39,56,36,40,67,48],
[55,0,55,49,47,49,37,41,58,56],
[34,25,0,39,35,31,28,32,49,52],
[26,31,41,0,38,40,54,41,51,45],
[41,33,45,42,0,43,36,38,57,42],
[24,31,49,40,37,0,41,39,41,31],
[44,43,52,26,44,39,0,21,39,37],
[40,39,48,39,42,41,59,0,55,49],
[13,22,31,29,23,39,41,25,0,27],
[32,24,28,35,38,49,43,31,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,40,58,51,41,37,67,45,23],
[33,0,29,41,27,18,13,44,26,22],
[40,51,0,43,54,33,39,67,59,35],
[22,39,37,0,35,43,16,52,30,41],
[29,53,26,45,0,39,12,49,33,28],
[39,62,47,37,41,0,30,51,39,24],
[43,67,41,64,68,50,0,62,33,42],
[13,36,13,28,31,29,18,0,22,22],
[35,54,21,50,47,41,47,58,0,29],
[57,58,45,39,52,56,38,58,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,47,31,47,47,38,41,42],
[41,0,40,44,33,44,35,36,38,39],
[41,40,0,34,33,41,36,37,34,30],
[33,36,46,0,34,44,41,38,45,47],
[49,47,47,46,0,57,50,44,39,48],
[33,36,39,36,23,0,42,33,30,32],
[33,45,44,39,30,38,0,47,28,45],
[42,44,43,42,36,47,33,0,40,36],
[39,42,46,35,41,50,52,40,0,44],
[38,41,50,33,32,48,35,44,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,42,45,53,39,48,43,35,47],
[34,0,37,41,31,37,41,33,33,44],
[38,43,0,47,44,51,50,36,42,54],
[35,39,33,0,41,40,42,38,41,49],
[27,49,36,39,0,46,43,37,34,45],
[41,43,29,40,34,0,41,31,29,47],
[32,39,30,38,37,39,0,36,36,40],
[37,47,44,42,43,49,44,0,43,46],
[45,47,38,39,46,51,44,37,0,52],
[33,36,26,31,35,33,40,34,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,52,40,25,43,37,50,43,36],
[39,0,44,44,39,27,37,36,38,38],
[28,36,0,33,37,30,42,38,36,32],
[40,36,47,0,40,19,37,44,44,35],
[55,41,43,40,0,38,46,54,54,50],
[37,53,50,61,42,0,50,50,50,38],
[43,43,38,43,34,30,0,43,35,40],
[30,44,42,36,26,30,37,0,37,25],
[37,42,44,36,26,30,45,43,0,39],
[44,42,48,45,30,42,40,55,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,45,31,41,32,49,27,45,50],
[42,0,24,29,35,41,46,37,40,39],
[35,56,0,32,55,37,43,46,54,37],
[49,51,48,0,39,44,49,36,38,58],
[39,45,25,41,0,45,47,46,45,51],
[48,39,43,36,35,0,32,32,49,43],
[31,34,37,31,33,48,0,36,47,42],
[53,43,34,44,34,48,44,0,45,49],
[35,40,26,42,35,31,33,35,0,45],
[30,41,43,22,29,37,38,31,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,44,52,53,45,42,48,53],
[37,0,37,43,41,44,40,49,42,57],
[40,43,0,45,47,45,42,46,43,52],
[36,37,35,0,41,44,40,39,39,48],
[28,39,33,39,0,44,34,36,39,43],
[27,36,35,36,36,0,38,33,25,39],
[35,40,38,40,46,42,0,48,35,56],
[38,31,34,41,44,47,32,0,35,45],
[32,38,37,41,41,55,45,45,0,50],
[27,23,28,32,37,41,24,35,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,55,45,40,45,44,48,49,52],
[34,0,43,36,37,40,41,33,41,40],
[25,37,0,37,31,37,34,38,39,42],
[35,44,43,0,34,47,39,42,45,49],
[40,43,49,46,0,50,39,42,45,51],
[35,40,43,33,30,0,38,37,34,46],
[36,39,46,41,41,42,0,38,40,45],
[32,47,42,38,38,43,42,0,37,42],
[31,39,41,35,35,46,40,43,0,45],
[28,40,38,31,29,34,35,38,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,42,43,42,49,44,42,40,52],
[30,0,31,36,37,25,33,33,37,37],
[38,49,0,46,37,32,31,37,36,45],
[37,44,34,0,37,26,32,35,27,38],
[38,43,43,43,0,38,41,38,41,34],
[31,55,48,54,42,0,34,48,45,41],
[36,47,49,48,39,46,0,48,47,42],
[38,47,43,45,42,32,32,0,44,36],
[40,43,44,53,39,35,33,36,0,38],
[28,43,35,42,46,39,38,44,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,55,49,32,26,41,53,48,35],
[9,0,29,17,20,25,15,32,9,9],
[25,51,0,36,22,30,47,58,42,6],
[31,63,44,0,42,47,30,38,47,31],
[48,60,58,38,0,42,34,55,32,58],
[54,55,50,33,38,0,30,45,41,45],
[39,65,33,50,46,50,0,55,21,33],
[27,48,22,42,25,35,25,0,25,9],
[32,71,38,33,48,39,59,55,0,39],
[45,71,74,49,22,35,47,71,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,36,42,38,48,40,46,44,44],
[32,0,41,39,42,39,39,41,35,44],
[44,39,0,42,43,43,40,47,38,39],
[38,41,38,0,36,44,33,41,36,40],
[42,38,37,44,0,46,40,48,42,46],
[32,41,37,36,34,0,34,41,38,42],
[40,41,40,47,40,46,0,46,41,43],
[34,39,33,39,32,39,34,0,36,41],
[36,45,42,44,38,42,39,44,0,48],
[36,36,41,40,34,38,37,39,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,33,37,42,30,29,38,33,29],
[33,0,39,45,45,56,40,33,31,37],
[47,41,0,48,39,29,27,47,25,49],
[43,35,32,0,37,26,34,27,23,40],
[38,35,41,43,0,46,26,36,24,32],
[50,24,51,54,34,0,34,35,32,49],
[51,40,53,46,54,46,0,42,46,44],
[42,47,33,53,44,45,38,0,31,42],
[47,49,55,57,56,48,34,49,0,46],
[51,43,31,40,48,31,36,38,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,43,45,42,40,43,49,49,44],
[37,0,45,43,41,46,41,45,46,40],
[37,35,0,36,35,40,42,41,44,40],
[35,37,44,0,44,42,40,42,44,38],
[38,39,45,36,0,42,42,43,48,41],
[40,34,40,38,38,0,39,42,48,43],
[37,39,38,40,38,41,0,40,36,40],
[31,35,39,38,37,38,40,0,42,42],
[31,34,36,36,32,32,44,38,0,38],
[36,40,40,42,39,37,40,38,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,45,43,38,48,41,48,43,46],
[42,0,39,41,36,43,35,46,41,44],
[35,41,0,37,31,40,33,41,43,39],
[37,39,43,0,40,44,36,46,44,42],
[42,44,49,40,0,45,35,49,47,44],
[32,37,40,36,35,0,32,46,40,37],
[39,45,47,44,45,48,0,51,40,46],
[32,34,39,34,31,34,29,0,37,36],
[37,39,37,36,33,40,40,43,0,39],
[34,36,41,38,36,43,34,44,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,45,46,37,37,40,37,44,34],
[42,0,39,49,47,45,42,42,42,44],
[35,41,0,41,44,39,51,36,43,32],
[34,31,39,0,36,42,42,41,37,36],
[43,33,36,44,0,38,42,36,47,35],
[43,35,41,38,42,0,46,38,40,34],
[40,38,29,38,38,34,0,33,42,34],
[43,38,44,39,44,42,47,0,42,47],
[36,38,37,43,33,40,38,38,0,36],
[46,36,48,44,45,46,46,33,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,41,35,32,38,34,41,49,35],
[45,0,44,49,47,51,37,38,53,44],
[39,36,0,33,31,46,34,42,46,35],
[45,31,47,0,40,51,39,48,58,43],
[48,33,49,40,0,51,44,42,53,49],
[42,29,34,29,29,0,27,29,41,28],
[46,43,46,41,36,53,0,44,49,37],
[39,42,38,32,38,51,36,0,47,28],
[31,27,34,22,27,39,31,33,0,34],
[45,36,45,37,31,52,43,52,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,50,48,42,36,47,41,26,42],
[50,0,51,54,46,44,46,43,43,39],
[30,29,0,31,36,41,40,38,22,30],
[32,26,49,0,34,42,34,34,11,33],
[38,34,44,46,0,47,38,39,33,24],
[44,36,39,38,33,0,34,32,33,35],
[33,34,40,46,42,46,0,40,35,35],
[39,37,42,46,41,48,40,0,32,38],
[54,37,58,69,47,47,45,48,0,47],
[38,41,50,47,56,45,45,42,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,46,42,51,40,48,58,47,43],
[30,0,36,40,41,34,41,45,43,44],
[34,44,0,48,50,42,44,47,49,41],
[38,40,32,0,37,46,37,40,45,34],
[29,39,30,43,0,41,39,47,40,44],
[40,46,38,34,39,0,44,41,43,41],
[32,39,36,43,41,36,0,50,41,43],
[22,35,33,40,33,39,30,0,30,40],
[33,37,31,35,40,37,39,50,0,37],
[37,36,39,46,36,39,37,40,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,42,34,43,40,38,39,33,48],
[42,0,43,43,44,44,41,32,32,43],
[38,37,0,41,42,47,38,36,38,41],
[46,37,39,0,40,38,43,37,34,40],
[37,36,38,40,0,42,44,36,36,37],
[40,36,33,42,38,0,40,37,42,39],
[42,39,42,37,36,40,0,41,34,40],
[41,48,44,43,44,43,39,0,45,39],
[47,48,42,46,44,38,46,35,0,44],
[32,37,39,40,43,41,40,41,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,38,36,48,40,36,45,40,38],
[42,0,41,33,44,42,43,44,46,42],
[42,39,0,39,38,38,32,43,42,41],
[44,47,41,0,46,47,40,48,46,36],
[32,36,42,34,0,42,38,45,40,42],
[40,38,42,33,38,0,38,40,47,47],
[44,37,48,40,42,42,0,46,46,39],
[35,36,37,32,35,40,34,0,38,36],
[40,34,38,34,40,33,34,42,0,39],
[42,38,39,44,38,33,41,44,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,34,40,37,34,27,42,36,40],
[41,0,35,43,34,33,32,42,44,41],
[46,45,0,46,38,45,35,41,41,46],
[40,37,34,0,36,37,31,37,41,36],
[43,46,42,44,0,38,41,46,41,44],
[46,47,35,43,42,0,41,42,52,49],
[53,48,45,49,39,39,0,43,51,47],
[38,38,39,43,34,38,37,0,43,42],
[44,36,39,39,39,28,29,37,0,40],
[40,39,34,44,36,31,33,38,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,42,39,41,40,32,26,38,37],
[50,0,33,44,40,45,39,41,38,35],
[38,47,0,49,38,48,35,33,46,33],
[41,36,31,0,29,38,29,20,33,30],
[39,40,42,51,0,44,38,29,36,29],
[40,35,32,42,36,0,36,27,39,32],
[48,41,45,51,42,44,0,34,46,43],
[54,39,47,60,51,53,46,0,42,41],
[42,42,34,47,44,41,34,38,0,34],
[43,45,47,50,51,48,37,39,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,43,37,26,36,37,32,37,40],
[48,0,49,46,37,58,41,37,46,45],
[37,31,0,33,30,37,40,33,47,44],
[43,34,47,0,42,52,40,41,34,42],
[54,43,50,38,0,42,50,47,55,50],
[44,22,43,28,38,0,34,35,28,43],
[43,39,40,40,30,46,0,33,43,36],
[48,43,47,39,33,45,47,0,50,42],
[43,34,33,46,25,52,37,30,0,44],
[40,35,36,38,30,37,44,38,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,41,42,35,42,38,41,41,38],
[32,0,36,39,35,44,36,36,39,35],
[39,44,0,42,43,39,42,44,43,40],
[38,41,38,0,38,38,40,37,39,36],
[45,45,37,42,0,43,43,38,46,35],
[38,36,41,42,37,0,39,38,40,36],
[42,44,38,40,37,41,0,42,40,42],
[39,44,36,43,42,42,38,0,43,39],
[39,41,37,41,34,40,40,37,0,37],
[42,45,40,44,45,44,38,41,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,41,39,51,31,45,33,54,43],
[40,0,45,64,47,28,46,34,48,38],
[39,35,0,56,40,27,30,35,38,34],
[41,16,24,0,40,25,32,24,39,20],
[29,33,40,40,0,31,35,32,44,33],
[49,52,53,55,49,0,36,40,49,46],
[35,34,50,48,45,44,0,41,47,41],
[47,46,45,56,48,40,39,0,44,50],
[26,32,42,41,36,31,33,36,0,36],
[37,42,46,60,47,34,39,30,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,31,39,38,43,55,38,37,39],
[35,0,34,41,37,38,38,47,36,34],
[49,46,0,27,52,39,47,38,36,42],
[41,39,53,0,46,34,58,53,37,51],
[42,43,28,34,0,35,43,39,37,40],
[37,42,41,46,45,0,45,42,40,42],
[25,42,33,22,37,35,0,32,37,44],
[42,33,42,27,41,38,48,0,32,45],
[43,44,44,43,43,40,43,48,0,47],
[41,46,38,29,40,38,36,35,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,25,43,25,54,35,37,37,41],
[41,0,29,41,29,29,29,41,41,37],
[55,51,0,47,51,56,47,26,45,53],
[37,39,33,0,33,54,37,26,8,35],
[55,51,29,47,0,37,47,47,45,53],
[26,51,24,26,43,0,20,24,18,26],
[45,51,33,43,33,60,0,45,39,45],
[43,39,54,54,33,56,35,0,54,43],
[43,39,35,72,35,62,41,26,0,49],
[39,43,27,45,27,54,35,37,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,36,42,41,36,34,38,40,38],
[43,0,43,43,49,42,33,37,35,41],
[44,37,0,41,50,40,37,34,34,35],
[38,37,39,0,47,36,32,42,36,34],
[39,31,30,33,0,25,34,34,34,34],
[44,38,40,44,55,0,44,44,47,45],
[46,47,43,48,46,36,0,47,50,46],
[42,43,46,38,46,36,33,0,39,39],
[40,45,46,44,46,33,30,41,0,34],
[42,39,45,46,46,35,34,41,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,41,38,38,47,43,45,44,49],
[35,0,39,45,45,41,40,51,49,43],
[39,41,0,43,43,45,41,46,43,37],
[42,35,37,0,40,44,38,49,49,46],
[42,35,37,40,0,37,34,46,45,41],
[33,39,35,36,43,0,41,46,49,48],
[37,40,39,42,46,39,0,48,43,42],
[35,29,34,31,34,34,32,0,42,34],
[36,31,37,31,35,31,37,38,0,38],
[31,37,43,34,39,32,38,46,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,37,40,43,44,43,40,31,39],
[38,0,37,44,44,45,41,40,42,36],
[43,43,0,40,62,41,40,27,33,36],
[40,36,40,0,42,41,44,29,43,35],
[37,36,18,38,0,41,37,33,32,31],
[36,35,39,39,39,0,37,33,41,32],
[37,39,40,36,43,43,0,35,39,40],
[40,40,53,51,47,47,45,0,39,40],
[49,38,47,37,48,39,41,41,0,42],
[41,44,44,45,49,48,40,40,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,11,11,30,30,11,35,41,52],
[50,0,45,45,59,48,29,34,34,53],
[69,35,0,52,30,36,36,41,41,41],
[69,35,28,0,47,64,45,41,57,53],
[50,21,50,33,0,33,33,22,22,22],
[50,32,44,16,47,0,12,22,22,34],
[69,51,44,35,47,68,0,52,41,52],
[45,46,39,39,58,58,28,0,50,80],
[39,46,39,23,58,58,39,30,0,47],
[28,27,39,27,58,46,28,0,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,43,42,36,43,42,47,39,37],
[39,0,41,39,39,43,40,46,44,45],
[37,39,0,42,38,40,36,45,43,37],
[38,41,38,0,41,45,40,52,43,39],
[44,41,42,39,0,40,42,47,47,41],
[37,37,40,35,40,0,40,49,39,38],
[38,40,44,40,38,40,0,53,43,41],
[33,34,35,28,33,31,27,0,37,31],
[41,36,37,37,33,41,37,43,0,32],
[43,35,43,41,39,42,39,49,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,28,33,31,34,40,37,46,28],
[41,0,33,38,38,44,33,45,50,41],
[52,47,0,46,39,46,43,42,50,38],
[47,42,34,0,35,41,47,41,44,36],
[49,42,41,45,0,44,40,46,54,38],
[46,36,34,39,36,0,35,42,44,35],
[40,47,37,33,40,45,0,38,51,36],
[43,35,38,39,34,38,42,0,48,37],
[34,30,30,36,26,36,29,32,0,38],
[52,39,42,44,42,45,44,43,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,28,61,45,63,26,36,46,36],
[36,0,27,45,27,54,45,27,28,27],
[52,53,0,61,35,53,44,18,36,36],
[19,35,19,0,27,45,26,0,28,28],
[35,53,45,53,0,72,35,53,46,53],
[17,26,27,35,8,0,26,18,46,18],
[54,35,36,54,45,54,0,35,55,45],
[44,53,62,80,27,62,45,0,45,45],
[34,52,44,52,34,34,25,35,0,17],
[44,53,44,52,27,62,35,35,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,36,30,26,39,28,41,37,33],
[51,0,43,35,41,46,46,53,47,45],
[44,37,0,44,37,44,43,43,45,40],
[50,45,36,0,36,49,43,43,32,42],
[54,39,43,44,0,52,53,52,42,43],
[41,34,36,31,28,0,37,48,42,33],
[52,34,37,37,27,43,0,45,35,32],
[39,27,37,37,28,32,35,0,36,29],
[43,33,35,48,38,38,45,44,0,34],
[47,35,40,38,37,47,48,51,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,50,34,53,39,52,41,54,60],
[28,0,38,43,42,34,49,41,40,52],
[30,42,0,38,41,38,40,35,43,53],
[46,37,42,0,50,44,55,51,51,58],
[27,38,39,30,0,44,42,38,37,47],
[41,46,42,36,36,0,45,46,50,51],
[28,31,40,25,38,35,0,28,42,44],
[39,39,45,29,42,34,52,0,39,51],
[26,40,37,29,43,30,38,41,0,51],
[20,28,27,22,33,29,36,29,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,29,4,1,14,27,4,28],
[53,0,62,29,39,41,44,48,42,66],
[53,18,0,46,47,22,46,38,47,26],
[51,51,34,0,34,45,45,65,27,51],
[76,41,33,46,0,22,35,37,21,36],
[79,39,58,35,58,0,51,44,44,51],
[66,36,34,35,45,29,0,44,19,45],
[53,32,42,15,43,36,36,0,35,42],
[76,38,33,53,59,36,61,45,0,41],
[52,14,54,29,44,29,35,38,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,28,46,53,36,13,50,48,33],
[55,0,49,54,51,33,43,63,59,39],
[52,31,0,64,53,44,14,72,34,33],
[34,26,16,0,23,40,22,41,27,36],
[27,29,27,57,0,33,27,44,33,57],
[44,47,36,40,47,0,28,56,48,49],
[67,37,66,58,53,52,0,72,54,49],
[30,17,8,39,36,24,8,0,23,33],
[32,21,46,53,47,32,26,57,0,28],
[47,41,47,44,23,31,31,47,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,39,41,48,37,38,31,55,53],
[39,0,48,38,51,42,46,35,53,49],
[41,32,0,34,52,48,40,30,36,32],
[39,42,46,0,46,34,29,27,44,42],
[32,29,28,34,0,20,41,23,41,46],
[43,38,32,46,60,0,44,40,44,49],
[42,34,40,51,39,36,0,28,44,44],
[49,45,50,53,57,40,52,0,58,51],
[25,27,44,36,39,36,36,22,0,35],
[27,31,48,38,34,31,36,29,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,24,41,19,25,29,30,30,29],
[40,0,37,42,43,33,48,39,48,31],
[56,43,0,43,44,43,43,23,55,33],
[39,38,37,0,39,26,33,34,31,43],
[61,37,36,41,0,53,47,45,47,63],
[55,47,37,54,27,0,31,27,39,54],
[51,32,37,47,33,49,0,24,59,54],
[50,41,57,46,35,53,56,0,58,62],
[50,32,25,49,33,41,21,22,0,42],
[51,49,47,37,17,26,26,18,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,33,37,36,31,40,32,34,34],
[50,0,37,44,44,40,43,40,42,42],
[47,43,0,41,38,41,42,38,40,40],
[43,36,39,0,39,39,37,32,39,39],
[44,36,42,41,0,38,41,41,44,40],
[49,40,39,41,42,0,41,44,39,44],
[40,37,38,43,39,39,0,41,39,43],
[48,40,42,48,39,36,39,0,44,46],
[46,38,40,41,36,41,41,36,0,36],
[46,38,40,41,40,36,37,34,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,51,41,44,44,38,46,48,50],
[42,0,40,33,37,38,32,44,38,41],
[29,40,0,34,36,34,32,38,42,44],
[39,47,46,0,40,38,43,44,48,50],
[36,43,44,40,0,37,40,47,43,43],
[36,42,46,42,43,0,36,45,49,45],
[42,48,48,37,40,44,0,45,52,53],
[34,36,42,36,33,35,35,0,47,40],
[32,42,38,32,37,31,28,33,0,34],
[30,39,36,30,37,35,27,40,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,44,42,43,39,40,44,48,39],
[44,0,50,33,35,34,27,33,46,33],
[36,30,0,30,27,27,29,25,37,29],
[38,47,50,0,40,51,49,48,60,38],
[37,45,53,40,0,37,37,53,51,42],
[41,46,53,29,43,0,39,44,49,41],
[40,53,51,31,43,41,0,40,46,44],
[36,47,55,32,27,36,40,0,56,36],
[32,34,43,20,29,31,34,24,0,32],
[41,47,51,42,38,39,36,44,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,55,40,51,54,41,48,47,43],
[26,0,48,25,30,45,22,33,32,35],
[25,32,0,32,26,26,21,32,32,33],
[40,55,48,0,45,48,40,42,44,40],
[29,50,54,35,0,49,35,47,42,42],
[26,35,54,32,31,0,30,36,26,40],
[39,58,59,40,45,50,0,45,50,47],
[32,47,48,38,33,44,35,0,31,35],
[33,48,48,36,38,54,30,49,0,38],
[37,45,47,40,38,40,33,45,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,31,43,31,38,39,35,25,38],
[46,0,35,36,33,38,38,33,28,27],
[49,45,0,49,35,45,35,37,27,32],
[37,44,31,0,30,37,40,35,31,35],
[49,47,45,50,0,44,48,40,36,41],
[42,42,35,43,36,0,43,30,38,31],
[41,42,45,40,32,37,0,35,35,36],
[45,47,43,45,40,50,45,0,39,41],
[55,52,53,49,44,42,45,41,0,38],
[42,53,48,45,39,49,44,39,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,44,38,44,59,53,37,57,56],
[39,0,56,47,51,63,45,48,52,56],
[36,24,0,39,45,60,49,35,46,48],
[42,33,41,0,42,48,38,32,51,50],
[36,29,35,38,0,48,43,27,43,49],
[21,17,20,32,32,0,33,31,43,32],
[27,35,31,42,37,47,0,33,48,48],
[43,32,45,48,53,49,47,0,51,46],
[23,28,34,29,37,37,32,29,0,39],
[24,24,32,30,31,48,32,34,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,65,43,40,47,69,67,39,46],
[59,0,60,35,38,53,68,59,40,39],
[15,20,0,16,30,54,50,58,22,40],
[37,45,64,0,51,51,67,66,35,46],
[40,42,50,29,0,49,58,51,34,51],
[33,27,26,29,31,0,33,34,26,36],
[11,12,30,13,22,47,0,37,15,27],
[13,21,22,14,29,46,43,0,20,35],
[41,40,58,45,46,54,65,60,0,53],
[34,41,40,34,29,44,53,45,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,45,43,43,38,37,30,35,49],
[38,0,43,43,42,30,36,38,26,48],
[35,37,0,44,42,31,33,30,35,32],
[37,37,36,0,44,37,38,37,28,43],
[37,38,38,36,0,33,31,35,26,45],
[42,50,49,43,47,0,44,40,39,53],
[43,44,47,42,49,36,0,34,30,52],
[50,42,50,43,45,40,46,0,40,47],
[45,54,45,52,54,41,50,40,0,53],
[31,32,48,37,35,27,28,33,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,39,38,45,35,46,36,38,42],
[45,0,38,34,46,38,45,44,40,44],
[41,42,0,34,49,36,44,37,39,49],
[42,46,46,0,44,40,51,45,36,52],
[35,34,31,36,0,27,37,33,39,37],
[45,42,44,40,53,0,45,41,44,50],
[34,35,36,29,43,35,0,35,35,38],
[44,36,43,35,47,39,45,0,43,43],
[42,40,41,44,41,36,45,37,0,47],
[38,36,31,28,43,30,42,37,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,37,42,37,31,34,33,36,35],
[43,0,35,45,37,36,32,37,31,33],
[43,45,0,44,38,41,35,42,32,39],
[38,35,36,0,40,35,34,39,32,33],
[43,43,42,40,0,40,36,43,38,37],
[49,44,39,45,40,0,40,47,37,41],
[46,48,45,46,44,40,0,41,49,42],
[47,43,38,41,37,33,39,0,38,38],
[44,49,48,48,42,43,31,42,0,40],
[45,47,41,47,43,39,38,42,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,37,41,42,45,39,43,43,47],
[39,0,40,47,42,42,41,47,46,43],
[43,40,0,47,46,45,39,43,42,48],
[39,33,33,0,34,39,40,42,37,40],
[38,38,34,46,0,45,36,38,38,40],
[35,38,35,41,35,0,34,40,38,37],
[41,39,41,40,44,46,0,45,43,42],
[37,33,37,38,42,40,35,0,39,37],
[37,34,38,43,42,42,37,41,0,38],
[33,37,32,40,40,43,38,43,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,51,39,34,40,30,37,35],
[37,0,39,39,34,34,43,26,27,32],
[40,41,0,33,39,34,33,32,33,36],
[29,41,47,0,43,43,43,32,29,31],
[41,46,41,37,0,41,40,43,38,39],
[46,46,46,37,39,0,47,34,35,38],
[40,37,47,37,40,33,0,35,33,31],
[50,54,48,48,37,46,45,0,41,50],
[43,53,47,51,42,45,47,39,0,44],
[45,48,44,49,41,42,49,30,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,40,40,38,43,46,45,34,37],
[41,0,41,29,42,40,40,46,39,31],
[40,39,0,37,44,47,44,52,44,35],
[40,51,43,0,42,44,37,51,45,40],
[42,38,36,38,0,40,38,48,34,36],
[37,40,33,36,40,0,40,41,32,34],
[34,40,36,43,42,40,0,47,33,33],
[35,34,28,29,32,39,33,0,31,31],
[46,41,36,35,46,48,47,49,0,36],
[43,49,45,40,44,46,47,49,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,38,41,25,25,37,34,43,32],
[39,0,11,24,34,38,48,34,61,33],
[42,69,0,56,44,38,57,70,58,41],
[39,56,24,0,39,22,44,57,50,34],
[55,46,36,41,0,63,72,51,59,46],
[55,42,42,58,17,0,54,45,65,37],
[43,32,23,36,8,26,0,40,41,28],
[46,46,10,23,29,35,40,0,42,33],
[37,19,22,30,21,15,39,38,0,32],
[48,47,39,46,34,43,52,47,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,38,43,36,45,38,36,39,38],
[36,0,40,30,37,39,39,35,30,36],
[42,40,0,38,40,39,39,32,37,41],
[37,50,42,0,41,50,47,38,36,38],
[44,43,40,39,0,42,39,41,39,42],
[35,41,41,30,38,0,35,28,41,31],
[42,41,41,33,41,45,0,37,40,37],
[44,45,48,42,39,52,43,0,45,43],
[41,50,43,44,41,39,40,35,0,39],
[42,44,39,42,38,49,43,37,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,33,37,29,27,31,53,35,19],
[33,0,25,22,36,29,35,49,30,25],
[47,55,0,42,22,36,41,51,47,36],
[43,58,38,0,37,41,45,47,35,36],
[51,44,58,43,0,40,45,40,36,45],
[53,51,44,39,40,0,35,40,31,40],
[49,45,39,35,35,45,0,46,32,52],
[27,31,29,33,40,40,34,0,22,40],
[45,50,33,45,44,49,48,58,0,37],
[61,55,44,44,35,40,28,40,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,35,43,25,39,43,44,38,32],
[32,0,29,33,25,41,29,41,33,35],
[45,51,0,38,41,46,43,47,39,42],
[37,47,42,0,28,35,38,45,40,34],
[55,55,39,52,0,49,52,42,49,49],
[41,39,34,45,31,0,37,44,43,42],
[37,51,37,42,28,43,0,45,54,41],
[36,39,33,35,38,36,35,0,42,39],
[42,47,41,40,31,37,26,38,0,28],
[48,45,38,46,31,38,39,41,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,47,49,43,34,44,54,40,51],
[27,0,37,42,35,36,33,57,30,25],
[33,43,0,32,23,23,26,40,22,28],
[31,38,48,0,32,34,35,54,38,38],
[37,45,57,48,0,34,40,50,38,43],
[46,44,57,46,46,0,37,51,47,34],
[36,47,54,45,40,43,0,49,29,40],
[26,23,40,26,30,29,31,0,35,34],
[40,50,58,42,42,33,51,45,0,35],
[29,55,52,42,37,46,40,46,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,34,42,42,40,38,46,42,44],
[37,0,37,38,32,39,33,30,38,40],
[46,43,0,48,40,42,39,43,43,41],
[38,42,32,0,41,36,31,38,43,46],
[38,48,40,39,0,32,33,39,43,50],
[40,41,38,44,48,0,27,39,45,42],
[42,47,41,49,47,53,0,40,47,56],
[34,50,37,42,41,41,40,0,46,46],
[38,42,37,37,37,35,33,34,0,34],
[36,40,39,34,30,38,24,34,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,39,48,35,43,34,45,39,49],
[38,0,36,40,36,38,37,40,44,40],
[41,44,0,46,41,44,38,40,40,48],
[32,40,34,0,41,42,39,38,46,43],
[45,44,39,39,0,40,41,44,48,45],
[37,42,36,38,40,0,32,41,39,40],
[46,43,42,41,39,48,0,43,42,47],
[35,40,40,42,36,39,37,0,44,42],
[41,36,40,34,32,41,38,36,0,45],
[31,40,32,37,35,40,33,38,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,38,36,36,41,41,38,47,49],
[25,0,32,38,38,34,35,29,37,41],
[42,48,0,41,38,33,51,39,37,56],
[44,42,39,0,38,40,50,33,42,53],
[44,42,42,42,0,39,40,40,36,43],
[39,46,47,40,41,0,33,25,38,44],
[39,45,29,30,40,47,0,35,37,41],
[42,51,41,47,40,55,45,0,50,50],
[33,43,43,38,44,42,43,30,0,45],
[31,39,24,27,37,36,39,30,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,46,50,46,41,35,38,37,46],
[28,0,26,37,34,34,28,26,30,23],
[34,54,0,36,41,35,41,31,31,33],
[30,43,44,0,40,45,40,33,25,29],
[34,46,39,40,0,38,27,34,29,28],
[39,46,45,35,42,0,30,39,41,39],
[45,52,39,40,53,50,0,42,47,41],
[42,54,49,47,46,41,38,0,42,46],
[43,50,49,55,51,39,33,38,0,40],
[34,57,47,51,52,41,39,34,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,45,41,43,43,35,34,38,43],
[31,0,40,36,39,46,34,38,33,50],
[35,40,0,39,43,36,37,35,40,42],
[39,44,41,0,40,46,32,40,41,44],
[37,41,37,40,0,35,30,38,32,37],
[37,34,44,34,45,0,28,37,35,50],
[45,46,43,48,50,52,0,38,52,51],
[46,42,45,40,42,43,42,0,43,48],
[42,47,40,39,48,45,28,37,0,45],
[37,30,38,36,43,30,29,32,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,37,44,42,42,40,42,46,45],
[40,0,39,46,38,38,37,44,39,44],
[43,41,0,44,44,37,43,44,39,43],
[36,34,36,0,39,36,38,43,41,39],
[38,42,36,41,0,37,35,47,45,45],
[38,42,43,44,43,0,43,45,42,40],
[40,43,37,42,45,37,0,44,44,44],
[38,36,36,37,33,35,36,0,36,34],
[34,41,41,39,35,38,36,44,0,44],
[35,36,37,41,35,40,36,46,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,44,42,45,49,40,40,56,50],
[29,0,43,30,32,42,28,35,49,40],
[36,37,0,28,38,35,40,37,40,46],
[38,50,52,0,43,50,38,51,50,44],
[35,48,42,37,0,46,28,33,45,41],
[31,38,45,30,34,0,31,34,47,38],
[40,52,40,42,52,49,0,43,51,49],
[40,45,43,29,47,46,37,0,47,39],
[24,31,40,30,35,33,29,33,0,34],
[30,40,34,36,39,42,31,41,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,28,36,36,40,32,28,34,39],
[56,0,43,54,58,58,48,40,53,53],
[52,37,0,47,52,44,32,50,42,41],
[44,26,33,0,38,45,47,30,31,44],
[44,22,28,42,0,37,34,34,33,44],
[40,22,36,35,43,0,30,34,32,33],
[48,32,48,33,46,50,0,40,44,42],
[52,40,30,50,46,46,40,0,44,49],
[46,27,38,49,47,48,36,36,0,49],
[41,27,39,36,36,47,38,31,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,33,37,45,37,40,41,37],
[36,0,40,37,40,47,41,39,44,44],
[38,40,0,40,39,42,43,39,42,38],
[47,43,40,0,40,50,45,41,45,41],
[43,40,41,40,0,50,45,42,39,43],
[35,33,38,30,30,0,37,30,33,35],
[43,39,37,35,35,43,0,40,39,41],
[40,41,41,39,38,50,40,0,41,35],
[39,36,38,35,41,47,41,39,0,40],
[43,36,42,39,37,45,39,45,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,31,41,37,32,29,34,28,29],
[49,0,32,43,36,38,33,43,35,42],
[49,48,0,39,39,37,33,42,30,33],
[39,37,41,0,37,38,36,28,34,29],
[43,44,41,43,0,34,31,34,40,35],
[48,42,43,42,46,0,41,53,44,39],
[51,47,47,44,49,39,0,40,44,43],
[46,37,38,52,46,27,40,0,39,35],
[52,45,50,46,40,36,36,41,0,34],
[51,38,47,51,45,41,37,45,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,35,39,49,52,20,65,59,47],
[30,0,28,45,56,41,7,28,52,21],
[45,52,0,68,49,34,43,47,54,38],
[41,35,12,0,49,17,7,30,31,36],
[31,24,31,31,0,41,10,24,55,35],
[28,39,46,63,39,0,31,31,25,39],
[60,73,37,73,70,49,0,62,58,60],
[15,52,33,50,56,49,18,0,59,47],
[21,28,26,49,25,55,22,21,0,18],
[33,59,42,44,45,41,20,33,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,49,49,44,41,44,38,48,45],
[34,0,39,39,41,46,44,37,46,39],
[31,41,0,38,39,40,35,37,51,39],
[31,41,42,0,40,39,39,33,40,33],
[36,39,41,40,0,41,36,40,37,40],
[39,34,40,41,39,0,37,31,43,37],
[36,36,45,41,44,43,0,38,49,35],
[42,43,43,47,40,49,42,0,44,42],
[32,34,29,40,43,37,31,36,0,37],
[35,41,41,47,40,43,45,38,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,46,35,51,30,48,41,34],
[36,0,41,38,44,39,29,41,34,21],
[38,39,0,44,37,44,26,42,44,40],
[34,42,36,0,42,51,28,37,39,41],
[45,36,43,38,0,52,36,51,48,34],
[29,41,36,29,28,0,27,32,51,42],
[50,51,54,52,44,53,0,57,48,29],
[32,39,38,43,29,48,23,0,47,37],
[39,46,36,41,32,29,32,33,0,37],
[46,59,40,39,46,38,51,43,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,52,46,40,45,58,48,53,45],
[28,0,44,21,36,21,46,33,39,29],
[28,36,0,41,45,40,54,37,48,28],
[34,59,39,0,47,34,67,38,64,41],
[40,44,35,33,0,29,61,28,40,31],
[35,59,40,46,51,0,63,38,45,42],
[22,34,26,13,19,17,0,28,31,23],
[32,47,43,42,52,42,52,0,38,46],
[27,41,32,16,40,35,49,42,0,23],
[35,51,52,39,49,38,57,34,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,41,52,39,36,48,34,35,38],
[51,0,44,55,40,49,48,41,43,46],
[39,36,0,45,36,45,42,33,37,45],
[28,25,35,0,39,36,33,34,32,39],
[41,40,44,41,0,42,42,35,43,45],
[44,31,35,44,38,0,44,32,33,47],
[32,32,38,47,38,36,0,35,37,38],
[46,39,47,46,45,48,45,0,40,53],
[45,37,43,48,37,47,43,40,0,51],
[42,34,35,41,35,33,42,27,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,39,43,36,37,40,31,48,47],
[29,0,42,32,39,33,35,38,40,31],
[41,38,0,35,45,39,42,33,52,42],
[37,48,45,0,46,48,38,35,50,37],
[44,41,35,34,0,34,38,27,35,33],
[43,47,41,32,46,0,34,29,44,40],
[40,45,38,42,42,46,0,43,49,46],
[49,42,47,45,53,51,37,0,50,48],
[32,40,28,30,45,36,31,30,0,42],
[33,49,38,43,47,40,34,32,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,30,45,35,35,27,35,33,33],
[40,0,41,33,35,41,29,31,31,35],
[50,39,0,37,43,48,32,46,48,41],
[35,47,43,0,38,39,28,42,36,37],
[45,45,37,42,0,48,40,44,40,43],
[45,39,32,41,32,0,28,32,29,45],
[53,51,48,52,40,52,0,48,50,50],
[45,49,34,38,36,48,32,0,34,49],
[47,49,32,44,40,51,30,46,0,45],
[47,45,39,43,37,35,30,31,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,47,45,43,42,40,46,42,44],
[37,0,47,42,38,50,39,34,38,42],
[33,33,0,44,45,46,38,33,41,41],
[35,38,36,0,41,49,37,33,48,38],
[37,42,35,39,0,49,39,34,45,36],
[38,30,34,31,31,0,29,29,35,34],
[40,41,42,43,41,51,0,37,44,39],
[34,46,47,47,46,51,43,0,48,50],
[38,42,39,32,35,45,36,32,0,42],
[36,38,39,42,44,46,41,30,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,43,38,43,31,41,36,54,45],
[40,0,41,40,33,35,33,37,39,45],
[37,39,0,43,38,34,41,33,44,47],
[42,40,37,0,39,35,45,43,49,41],
[37,47,42,41,0,41,40,34,40,49],
[49,45,46,45,39,0,46,39,51,54],
[39,47,39,35,40,34,0,36,50,48],
[44,43,47,37,46,41,44,0,50,43],
[26,41,36,31,40,29,30,30,0,45],
[35,35,33,39,31,26,32,37,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,31,39,44,40,31,45,41,30],
[41,0,40,43,37,33,28,45,37,33],
[49,40,0,54,45,39,49,38,45,46],
[41,37,26,0,40,41,32,48,43,37],
[36,43,35,40,0,37,31,48,50,34],
[40,47,41,39,43,0,32,36,47,35],
[49,52,31,48,49,48,0,50,47,45],
[35,35,42,32,32,44,30,0,35,30],
[39,43,35,37,30,33,33,45,0,28],
[50,47,34,43,46,45,35,50,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,34,44,38,39,46,41,32,37],
[45,0,40,41,38,38,46,45,33,39],
[46,40,0,43,45,32,50,40,37,40],
[36,39,37,0,43,33,40,34,31,33],
[42,42,35,37,0,33,43,40,34,34],
[41,42,48,47,47,0,49,44,40,51],
[34,34,30,40,37,31,0,32,26,29],
[39,35,40,46,40,36,48,0,36,40],
[48,47,43,49,46,40,54,44,0,41],
[43,41,40,47,46,29,51,40,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,46,34,50,36,44,53,36,36],
[47,0,53,41,46,40,45,58,42,37],
[34,27,0,30,34,39,34,44,26,31],
[46,39,50,0,41,41,41,51,41,41],
[30,34,46,39,0,34,36,43,43,40],
[44,40,41,39,46,0,34,48,33,35],
[36,35,46,39,44,46,0,51,42,49],
[27,22,36,29,37,32,29,0,30,27],
[44,38,54,39,37,47,38,50,0,50],
[44,43,49,39,40,45,31,53,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,31,38,50,31,46,33,37,44],
[42,0,35,48,44,46,45,37,39,46],
[49,45,0,46,50,42,48,39,44,50],
[42,32,34,0,43,40,39,39,38,43],
[30,36,30,37,0,32,41,32,36,46],
[49,34,38,40,48,0,51,42,35,43],
[34,35,32,41,39,29,0,29,39,45],
[47,43,41,41,48,38,51,0,40,45],
[43,41,36,42,44,45,41,40,0,40],
[36,34,30,37,34,37,35,35,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,39,45,43,37,28,37,38,26],
[43,0,36,41,45,40,34,38,46,36],
[41,44,0,50,50,44,44,38,46,40],
[35,39,30,0,42,37,32,38,40,39],
[37,35,30,38,0,32,27,32,34,31],
[43,40,36,43,48,0,38,36,45,37],
[52,46,36,48,53,42,0,45,45,39],
[43,42,42,42,48,44,35,0,39,36],
[42,34,34,40,46,35,35,41,0,35],
[54,44,40,41,49,43,41,44,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,50,39,48,46,52,50,48,39],
[45,0,37,58,47,49,49,54,62,48],
[30,43,0,46,35,35,41,43,42,39],
[41,22,34,0,34,35,43,42,43,42],
[32,33,45,46,0,47,37,41,44,45],
[34,31,45,45,33,0,37,39,41,37],
[28,31,39,37,43,43,0,51,42,35],
[30,26,37,38,39,41,29,0,36,36],
[32,18,38,37,36,39,38,44,0,34],
[41,32,41,38,35,43,45,44,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,80,80,63,74,39,71,58,56],
[13,0,37,28,42,26,46,41,31,59],
[0,43,0,43,29,28,35,58,26,50],
[0,52,37,0,42,28,37,46,33,50],
[17,38,51,38,0,32,23,42,42,27],
[6,54,52,52,48,0,39,67,43,52],
[41,34,45,43,57,41,0,32,32,45],
[9,39,22,34,38,13,48,0,31,63],
[22,49,54,47,38,37,48,49,0,45],
[24,21,30,30,53,28,35,17,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,46,44,53,42,56,58,54,46],
[47,0,33,43,56,38,57,62,61,54],
[34,47,0,47,48,37,47,59,55,51],
[36,37,33,0,34,32,40,51,45,35],
[27,24,32,46,0,21,31,48,50,37],
[38,42,43,48,59,0,55,55,52,54],
[24,23,33,40,49,25,0,40,50,47],
[22,18,21,29,32,25,40,0,33,41],
[26,19,25,35,30,28,30,47,0,45],
[34,26,29,45,43,26,33,39,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,35,43,44,31,51,40,33,29],
[38,0,35,36,43,34,38,41,28,22],
[45,45,0,36,46,43,52,37,41,35],
[37,44,44,0,31,40,36,46,38,40],
[36,37,34,49,0,44,46,38,31,25],
[49,46,37,40,36,0,43,51,34,46],
[29,42,28,44,34,37,0,41,31,25],
[40,39,43,34,42,29,39,0,34,24],
[47,52,39,42,49,46,49,46,0,34],
[51,58,45,40,55,34,55,56,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,45,43,45,35,41,42,42,43],
[43,0,46,36,39,42,41,40,42,50],
[35,34,0,33,34,36,35,47,42,42],
[37,44,47,0,45,48,42,43,42,46],
[35,41,46,35,0,35,42,45,43,41],
[45,38,44,32,45,0,39,39,41,38],
[39,39,45,38,38,41,0,46,40,45],
[38,40,33,37,35,41,34,0,38,42],
[38,38,38,38,37,39,40,42,0,44],
[37,30,38,34,39,42,35,38,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,36,39,45,36,44,40,46,38],
[41,0,41,41,37,35,39,35,41,39],
[44,39,0,39,39,38,44,39,37,38],
[41,39,41,0,35,37,41,42,41,34],
[35,43,41,45,0,40,38,35,47,38],
[44,45,42,43,40,0,43,45,44,34],
[36,41,36,39,42,37,0,45,42,44],
[40,45,41,38,45,35,35,0,45,40],
[34,39,43,39,33,36,38,35,0,41],
[42,41,42,46,42,46,36,40,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,28,23,42,27,52,33,38,45],
[51,0,42,37,51,31,54,34,39,40],
[52,38,0,41,59,48,59,48,40,40],
[57,43,39,0,66,44,56,41,41,47],
[38,29,21,14,0,26,32,26,34,31],
[53,49,32,36,54,0,49,41,27,42],
[28,26,21,24,48,31,0,28,27,40],
[47,46,32,39,54,39,52,0,42,46],
[42,41,40,39,46,53,53,38,0,38],
[35,40,40,33,49,38,40,34,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,35,27,36,36,32,36,32,38],
[47,0,39,38,41,47,37,44,39,48],
[45,41,0,38,39,42,33,37,32,42],
[53,42,42,0,37,46,41,52,46,45],
[44,39,41,43,0,41,33,41,34,46],
[44,33,38,34,39,0,44,44,31,37],
[48,43,47,39,47,36,0,42,37,46],
[44,36,43,28,39,36,38,0,33,48],
[48,41,48,34,46,49,43,47,0,51],
[42,32,38,35,34,43,34,32,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,38,38,36,39,44,37,36,43],
[41,0,34,36,34,37,36,36,38,39],
[42,46,0,44,37,37,43,39,38,40],
[42,44,36,0,38,38,45,41,44,41],
[44,46,43,42,0,41,45,40,40,47],
[41,43,43,42,39,0,44,37,42,43],
[36,44,37,35,35,36,0,35,40,38],
[43,44,41,39,40,43,45,0,40,42],
[44,42,42,36,40,38,40,40,0,38],
[37,41,40,39,33,37,42,38,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,36,50,36,36,40,45,36,22],
[30,0,40,23,26,30,21,30,30,26],
[44,40,0,27,18,57,35,44,35,62],
[30,57,53,0,53,57,57,35,57,48],
[44,54,62,27,0,52,21,58,43,48],
[44,50,23,23,28,0,49,58,49,26],
[40,59,45,23,59,31,0,54,45,48],
[35,50,36,45,22,22,26,0,26,31],
[44,50,45,23,37,31,35,54,0,48],
[58,54,18,32,32,54,32,49,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,44,46,45,45,42,47,46,50],
[40,0,41,39,42,40,45,49,44,46],
[36,39,0,44,45,38,33,47,42,43],
[34,41,36,0,39,44,45,42,42,41],
[35,38,35,41,0,39,38,41,44,41],
[35,40,42,36,41,0,41,39,45,41],
[38,35,47,35,42,39,0,37,38,37],
[33,31,33,38,39,41,43,0,41,41],
[34,36,38,38,36,35,42,39,0,43],
[30,34,37,39,39,39,43,39,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,36,37,41,48,49,39,42,37],
[41,0,35,38,37,40,48,43,47,45],
[44,45,0,37,40,44,42,39,45,41],
[43,42,43,0,37,48,49,40,44,41],
[39,43,40,43,0,44,48,43,46,40],
[32,40,36,32,36,0,44,34,36,37],
[31,32,38,31,32,36,0,35,34,36],
[41,37,41,40,37,46,45,0,40,45],
[38,33,35,36,34,44,46,40,0,34],
[43,35,39,39,40,43,44,35,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,38,45,39,45,47,46,36,45],
[35,0,29,37,39,41,32,38,30,34],
[42,51,0,48,48,44,45,40,40,45],
[35,43,32,0,38,46,35,32,30,39],
[41,41,32,42,0,39,39,35,32,44],
[35,39,36,34,41,0,38,34,38,37],
[33,48,35,45,41,42,0,37,26,34],
[34,42,40,48,45,46,43,0,40,40],
[44,50,40,50,48,42,54,40,0,46],
[35,46,35,41,36,43,46,40,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,42,49,29,43,40,45,34,35],
[41,0,46,39,37,48,41,49,43,32],
[38,34,0,37,43,38,42,47,44,38],
[31,41,43,0,34,41,35,42,35,26],
[51,43,37,46,0,46,32,49,41,32],
[37,32,42,39,34,0,28,47,26,33],
[40,39,38,45,48,52,0,49,43,37],
[35,31,33,38,31,33,31,0,24,31],
[46,37,36,45,39,54,37,56,0,46],
[45,48,42,54,48,47,43,49,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,52,39,26,47,45,58,35,52],
[58,0,64,46,65,43,57,71,40,54],
[28,16,0,24,25,35,32,41,40,38],
[41,34,56,0,46,42,41,49,30,57],
[54,15,55,34,0,43,42,58,37,41],
[33,37,45,38,37,0,36,53,50,41],
[35,23,48,39,38,44,0,58,45,41],
[22,9,39,31,22,27,22,0,13,39],
[45,40,40,50,43,30,35,67,0,41],
[28,26,42,23,39,39,39,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,38,42,40,45,51,38,40,45],
[39,0,36,41,45,36,40,35,37,31],
[42,44,0,40,43,51,49,38,34,42],
[38,39,40,0,48,43,49,41,39,39],
[40,35,37,32,0,41,48,39,34,39],
[35,44,29,37,39,0,44,36,37,43],
[29,40,31,31,32,36,0,36,31,34],
[42,45,42,39,41,44,44,0,40,44],
[40,43,46,41,46,43,49,40,0,41],
[35,49,38,41,41,37,46,36,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,47,48,29,44,40,43,44],
[41,0,52,40,46,33,36,35,38,39],
[41,28,0,36,39,34,31,38,28,36],
[33,40,44,0,44,33,37,49,35,44],
[32,34,41,36,0,26,35,34,27,38],
[51,47,46,47,54,0,44,39,47,47],
[36,44,49,43,45,36,0,41,37,45],
[40,45,42,31,46,41,39,0,43,44],
[37,42,52,45,53,33,43,37,0,47],
[36,41,44,36,42,33,35,36,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,38,54,64,38,59,41,59,62],
[22,0,17,30,56,31,71,38,55,71],
[42,63,0,76,64,35,67,62,52,78],
[26,50,4,0,55,29,70,45,52,67],
[16,24,16,25,0,41,27,29,31,28],
[42,49,45,51,39,0,50,53,51,53],
[21,9,13,10,53,30,0,34,35,28],
[39,42,18,35,51,27,46,0,23,38],
[21,25,28,28,49,29,45,57,0,48],
[18,9,2,13,52,27,52,42,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,33,41,36,38,38,31,31,39],
[42,0,35,40,35,35,32,34,36,40],
[47,45,0,52,42,44,39,34,43,48],
[39,40,28,0,33,32,37,28,36,46],
[44,45,38,47,0,40,40,32,42,46],
[42,45,36,48,40,0,39,40,39,44],
[42,48,41,43,40,41,0,40,43,50],
[49,46,46,52,48,40,40,0,43,51],
[49,44,37,44,38,41,37,37,0,49],
[41,40,32,34,34,36,30,29,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,34,38,41,44,39,33,45,38],
[44,0,42,39,42,42,42,37,52,41],
[46,38,0,39,45,44,40,39,46,38],
[42,41,41,0,45,42,43,37,44,38],
[39,38,35,35,0,38,41,36,49,37],
[36,38,36,38,42,0,47,33,40,37],
[41,38,40,37,39,33,0,33,42,38],
[47,43,41,43,44,47,47,0,51,38],
[35,28,34,36,31,40,38,29,0,33],
[42,39,42,42,43,43,42,42,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,23,23,38,15,28,23,37,52],
[43,0,36,28,30,15,28,28,37,23],
[57,44,0,59,59,59,13,30,37,59],
[57,52,21,0,38,59,13,30,37,52],
[42,50,21,42,0,29,13,13,50,37],
[65,65,21,21,51,0,13,36,50,37],
[52,52,67,67,67,67,0,38,52,67],
[57,52,50,50,67,44,42,0,37,37],
[43,43,43,43,30,30,28,43,0,30],
[28,57,21,28,43,43,13,43,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,42,50,44,46,42,37,44,44],
[41,0,36,46,44,45,38,38,36,39],
[38,44,0,46,50,45,45,39,38,45],
[30,34,34,0,33,40,35,34,37,43],
[36,36,30,47,0,43,39,38,39,41],
[34,35,35,40,37,0,33,35,35,39],
[38,42,35,45,41,47,0,43,39,43],
[43,42,41,46,42,45,37,0,40,42],
[36,44,42,43,41,45,41,40,0,42],
[36,41,35,37,39,41,37,38,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,33,31,23,17,29,29,42,24],
[41,0,44,45,29,34,44,49,44,41],
[47,36,0,47,37,33,49,43,38,47],
[49,35,33,0,45,31,44,48,57,52],
[57,51,43,35,0,49,43,56,51,54],
[63,46,47,49,31,0,44,42,58,57],
[51,36,31,36,37,36,0,42,53,39],
[51,31,37,32,24,38,38,0,43,41],
[38,36,42,23,29,22,27,37,0,25],
[56,39,33,28,26,23,41,39,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,44,38,37,27,32,35,36,37],
[42,0,51,36,33,36,47,33,21,34],
[36,29,0,33,35,32,35,21,31,44],
[42,44,47,0,43,36,43,32,34,37],
[43,47,45,37,0,44,42,32,33,51],
[53,44,48,44,36,0,43,33,39,36],
[48,33,45,37,38,37,0,31,31,36],
[45,47,59,48,48,47,49,0,38,40],
[44,59,49,46,47,41,49,42,0,40],
[43,46,36,43,29,44,44,40,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,36,63,48,48,66,29,32,44],
[38,0,33,52,43,37,60,37,41,33],
[44,47,0,38,43,42,44,42,40,47],
[17,28,42,0,27,26,52,21,35,35],
[32,37,37,53,0,33,57,28,38,37],
[32,43,38,54,47,0,58,29,20,45],
[14,20,36,28,23,22,0,8,22,20],
[51,43,38,59,52,51,72,0,42,48],
[48,39,40,45,42,60,58,38,0,35],
[36,47,33,45,43,35,60,32,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,43,24,29,24,47,47,25,41],
[57,0,43,24,47,38,66,47,57,66],
[37,37,0,29,29,43,29,23,14,23],
[56,56,51,0,23,32,80,60,33,74],
[51,33,51,57,0,57,57,51,51,51],
[56,42,37,48,23,0,66,60,33,60],
[33,14,51,0,23,14,0,23,33,55],
[33,33,57,20,29,20,57,0,33,74],
[55,23,66,47,29,47,47,47,0,41],
[39,14,57,6,29,20,25,6,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,36,38,27,32,35,35,29,34],
[44,0,51,46,26,40,45,36,40,30],
[44,29,0,35,26,38,34,37,32,44],
[42,34,45,0,39,34,39,40,38,33],
[53,54,54,41,0,36,42,45,42,32],
[48,40,42,46,44,0,40,47,44,41],
[45,35,46,41,38,40,0,41,43,40],
[45,44,43,40,35,33,39,0,34,37],
[51,40,48,42,38,36,37,46,0,39],
[46,50,36,47,48,39,40,43,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,54,54,24,45,39,54,39,54],
[50,0,54,50,24,24,54,54,9,24],
[26,26,0,41,15,15,0,15,26,15],
[26,30,39,0,0,15,39,39,9,15],
[56,56,65,80,0,45,65,39,65,54],
[35,56,65,65,35,0,65,65,35,50],
[41,26,80,41,15,15,0,15,26,15],
[26,26,65,41,41,15,65,0,35,41],
[41,71,54,71,15,45,54,45,0,45],
[26,56,65,65,26,30,65,39,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,60,34,30,54,41,41,54,44],
[49,0,53,37,54,48,40,43,35,40],
[20,27,0,33,28,28,46,46,35,22],
[46,43,47,0,37,56,37,52,44,49],
[50,26,52,43,0,35,36,55,41,49],
[26,32,52,24,45,0,40,42,38,43],
[39,40,34,43,44,40,0,48,46,43],
[39,37,34,28,25,38,32,0,34,17],
[26,45,45,36,39,42,34,46,0,32],
[36,40,58,31,31,37,37,63,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,43,41,36,38,44,42,36,39],
[35,0,40,48,45,46,49,44,42,42],
[37,40,0,44,40,45,36,37,35,31],
[39,32,36,0,34,40,33,43,41,32],
[44,35,40,46,0,41,47,38,44,35],
[42,34,35,40,39,0,43,38,39,32],
[36,31,44,47,33,37,0,35,39,28],
[38,36,43,37,42,42,45,0,44,38],
[44,38,45,39,36,41,41,36,0,33],
[41,38,49,48,45,48,52,42,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,47,31,51,47,46,51,42,48],
[41,0,50,42,53,42,51,39,60,53],
[33,30,0,23,44,41,24,37,27,39],
[49,38,57,0,46,60,49,53,48,43],
[29,27,36,34,0,58,24,46,52,29],
[33,38,39,20,22,0,34,35,41,39],
[34,29,56,31,56,46,0,37,32,35],
[29,41,43,27,34,45,43,0,40,43],
[38,20,53,32,28,39,48,40,0,29],
[32,27,41,37,51,41,45,37,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,36,40,41,38,37,35,22,41],
[45,0,34,34,39,43,41,42,32,46],
[44,46,0,44,44,53,37,39,41,56],
[40,46,36,0,36,53,49,43,35,52],
[39,41,36,44,0,45,42,32,30,52],
[42,37,27,27,35,0,35,30,33,48],
[43,39,43,31,38,45,0,30,39,52],
[45,38,41,37,48,50,50,0,37,52],
[58,48,39,45,50,47,41,43,0,59],
[39,34,24,28,28,32,28,28,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,34,49,35,37,44,49,35,41],
[34,0,28,41,38,32,32,46,29,41],
[46,52,0,54,44,44,49,47,40,52],
[31,39,26,0,24,30,48,51,17,44],
[45,42,36,56,0,45,51,49,39,50],
[43,48,36,50,35,0,47,44,34,46],
[36,48,31,32,29,33,0,41,21,41],
[31,34,33,29,31,36,39,0,25,39],
[45,51,40,63,41,46,59,55,0,56],
[39,39,28,36,30,34,39,41,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,26,39,40,39,35,41,35,33],
[51,0,43,35,38,42,44,41,40,50],
[54,37,0,47,47,53,45,42,43,43],
[41,45,33,0,39,38,40,45,37,51],
[40,42,33,41,0,41,35,49,36,37],
[41,38,27,42,39,0,34,36,44,40],
[45,36,35,40,45,46,0,44,41,39],
[39,39,38,35,31,44,36,0,40,45],
[45,40,37,43,44,36,39,40,0,46],
[47,30,37,29,43,40,41,35,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,51,47,54,46,39,52,51,38],
[28,0,39,28,40,44,26,46,26,26],
[29,41,0,36,35,38,31,45,30,33],
[33,52,44,0,46,50,42,34,34,46],
[26,40,45,34,0,35,30,54,22,34],
[34,36,42,30,45,0,51,51,38,39],
[41,54,49,38,50,29,0,55,41,53],
[28,34,35,46,26,29,25,0,23,46],
[29,54,50,46,58,42,39,57,0,38],
[42,54,47,34,46,41,27,34,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,32,35,34,38,37,37,34,32],
[39,0,27,35,41,34,35,30,37,37],
[48,53,0,40,43,47,46,47,40,46],
[45,45,40,0,44,41,44,47,44,38],
[46,39,37,36,0,37,39,33,41,27],
[42,46,33,39,43,0,38,45,34,37],
[43,45,34,36,41,42,0,37,37,37],
[43,50,33,33,47,35,43,0,43,34],
[46,43,40,36,39,46,43,37,0,41],
[48,43,34,42,53,43,43,46,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,36,38,35,40,35,43,32,34],
[47,0,48,45,43,49,43,43,36,48],
[44,32,0,42,40,38,43,40,30,40],
[42,35,38,0,44,44,39,36,39,42],
[45,37,40,36,0,47,43,43,36,39],
[40,31,42,36,33,0,38,36,32,38],
[45,37,37,41,37,42,0,38,32,43],
[37,37,40,44,37,44,42,0,42,42],
[48,44,50,41,44,48,48,38,0,51],
[46,32,40,38,41,42,37,38,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,41,51,29,38,40,38,35,38],
[44,0,52,49,39,38,40,41,38,48],
[39,28,0,39,32,30,35,35,28,34],
[29,31,41,0,28,31,34,32,26,34],
[51,41,48,52,0,43,45,50,42,39],
[42,42,50,49,37,0,43,46,46,43],
[40,40,45,46,35,37,0,41,35,39],
[42,39,45,48,30,34,39,0,39,38],
[45,42,52,54,38,34,45,41,0,37],
[42,32,46,46,41,37,41,42,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,58,33,53,56,54,44,48,48],
[35,0,58,59,42,53,69,63,46,36],
[22,22,0,16,52,50,45,55,28,37],
[47,21,64,0,41,53,56,51,43,31],
[27,38,28,39,0,47,48,52,28,18],
[24,27,30,27,33,0,26,53,11,26],
[26,11,35,24,32,54,0,42,36,11],
[36,17,25,29,28,27,38,0,26,21],
[32,34,52,37,52,69,44,54,0,39],
[32,44,43,49,62,54,69,59,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,42,43,43,34,37,32,43,44],
[41,0,43,40,44,44,41,38,50,45],
[38,37,0,51,43,41,43,43,48,44],
[37,40,29,0,41,38,39,41,43,41],
[37,36,37,39,0,36,41,32,40,36],
[46,36,39,42,44,0,38,39,49,43],
[43,39,37,41,39,42,0,37,47,41],
[48,42,37,39,48,41,43,0,50,46],
[37,30,32,37,40,31,33,30,0,35],
[36,35,36,39,44,37,39,34,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,39,47,38,45,37,32,46,39],
[40,0,42,47,38,40,32,33,50,37],
[41,38,0,43,42,41,35,35,56,43],
[33,33,37,0,35,38,33,28,44,34],
[42,42,38,45,0,42,42,38,51,40],
[35,40,39,42,38,0,26,36,50,42],
[43,48,45,47,38,54,0,40,56,42],
[48,47,45,52,42,44,40,0,52,43],
[34,30,24,36,29,30,24,28,0,32],
[41,43,37,46,40,38,38,37,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,38,40,37,35,40,33,29,44],
[41,0,46,45,44,46,35,42,35,47],
[42,34,0,43,46,39,47,46,40,49],
[40,35,37,0,40,43,38,47,43,42],
[43,36,34,40,0,44,27,50,30,39],
[45,34,41,37,36,0,28,45,34,44],
[40,45,33,42,53,52,0,47,38,47],
[47,38,34,33,30,35,33,0,27,38],
[51,45,40,37,50,46,42,53,0,45],
[36,33,31,38,41,36,33,42,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,33,33,33,37,37,39,32,39],
[41,0,43,34,43,41,50,48,45,44],
[47,37,0,38,46,45,47,40,42,46],
[47,46,42,0,32,44,46,33,41,45],
[47,37,34,48,0,41,50,42,45,42],
[43,39,35,36,39,0,46,36,40,40],
[43,30,33,34,30,34,0,29,31,39],
[41,32,40,47,38,44,51,0,48,45],
[48,35,38,39,35,40,49,32,0,40],
[41,36,34,35,38,40,41,35,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,33,50,43,17,42,36,44,29],
[60,0,31,48,27,46,56,43,57,31],
[47,49,0,49,31,29,43,31,61,45],
[30,32,31,0,28,32,30,32,44,45],
[37,53,49,52,0,53,62,35,53,63],
[63,34,51,48,27,0,41,36,50,33],
[38,24,37,50,18,39,0,24,46,31],
[44,37,49,48,45,44,56,0,61,45],
[36,23,19,36,27,30,34,19,0,13],
[51,49,35,35,17,47,49,35,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,41,36,44,36,37,44,43,44],
[42,0,49,37,46,38,41,45,45,45],
[39,31,0,36,42,38,36,42,42,40],
[44,43,44,0,42,40,44,45,50,43],
[36,34,38,38,0,42,42,40,44,35],
[44,42,42,40,38,0,46,45,47,45],
[43,39,44,36,38,34,0,41,48,39],
[36,35,38,35,40,35,39,0,40,46],
[37,35,38,30,36,33,32,40,0,34],
[36,35,40,37,45,35,41,34,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,36,38,48,36,44,48,42,40],
[29,0,39,38,43,28,42,48,38,43],
[44,41,0,43,43,40,45,53,37,45],
[42,42,37,0,44,39,42,50,40,39],
[32,37,37,36,0,29,38,43,42,38],
[44,52,40,41,51,0,54,60,45,48],
[36,38,35,38,42,26,0,45,31,39],
[32,32,27,30,37,20,35,0,32,35],
[38,42,43,40,38,35,49,48,0,44],
[40,37,35,41,42,32,41,45,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,33,38,32,38,34,42,33,38],
[35,0,37,38,37,43,39,36,31,36],
[47,43,0,40,40,48,47,45,39,46],
[42,42,40,0,40,43,45,40,39,40],
[48,43,40,40,0,44,40,44,43,43],
[42,37,32,37,36,0,44,44,34,35],
[46,41,33,35,40,36,0,42,39,43],
[38,44,35,40,36,36,38,0,35,35],
[47,49,41,41,37,46,41,45,0,35],
[42,44,34,40,37,45,37,45,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,43,38,42,40,42,36,42,38],
[38,0,40,35,29,39,36,35,43,31],
[37,40,0,36,41,37,41,34,42,35],
[42,45,44,0,37,38,42,44,41,44],
[38,51,39,43,0,38,40,40,39,39],
[40,41,43,42,42,0,47,37,37,41],
[38,44,39,38,40,33,0,39,39,38],
[44,45,46,36,40,43,41,0,40,34],
[38,37,38,39,41,43,41,40,0,37],
[42,49,45,36,41,39,42,46,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,37,39,33,35,26,36,37,34],
[52,0,51,32,41,49,36,36,46,37],
[43,29,0,37,37,44,36,37,38,29],
[41,48,43,0,37,47,37,39,40,38],
[47,39,43,43,0,39,44,31,48,29],
[45,31,36,33,41,0,33,24,40,24],
[54,44,44,43,36,47,0,40,49,41],
[44,44,43,41,49,56,40,0,49,37],
[43,34,42,40,32,40,31,31,0,27],
[46,43,51,42,51,56,39,43,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,44,51,56,46,40,36,51,45],
[23,0,41,40,39,51,48,22,51,41],
[36,39,0,35,44,41,35,27,53,52],
[29,40,45,0,40,41,40,29,47,55],
[24,41,36,40,0,43,36,25,45,43],
[34,29,39,39,37,0,52,40,56,52],
[40,32,45,40,44,28,0,39,35,56],
[44,58,53,51,55,40,41,0,48,44],
[29,29,27,33,35,24,45,32,0,34],
[35,39,28,25,37,28,24,36,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,38,41,47,45,49,43,54,41],
[44,0,45,51,45,44,51,52,48,40],
[42,35,0,38,44,43,43,34,40,40],
[39,29,42,0,49,45,49,44,50,40],
[33,35,36,31,0,36,40,41,44,39],
[35,36,37,35,44,0,56,48,49,29],
[31,29,37,31,40,24,0,33,41,32],
[37,28,46,36,39,32,47,0,48,34],
[26,32,40,30,36,31,39,32,0,28],
[39,40,40,40,41,51,48,46,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,33,40,45,48,40,46,41,43],
[36,0,37,38,43,48,43,49,40,38],
[47,43,0,35,39,53,38,42,45,43],
[40,42,45,0,48,47,40,50,41,42],
[35,37,41,32,0,43,43,40,34,42],
[32,32,27,33,37,0,34,39,37,35],
[40,37,42,40,37,46,0,40,43,47],
[34,31,38,30,40,41,40,0,43,37],
[39,40,35,39,46,43,37,37,0,45],
[37,42,37,38,38,45,33,43,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,33,38,36,38,43,30,34,41],
[36,0,37,39,39,35,40,34,28,32],
[47,43,0,39,40,37,42,44,42,33],
[42,41,41,0,40,41,40,35,46,28],
[44,41,40,40,0,33,46,40,44,42],
[42,45,43,39,47,0,47,41,40,37],
[37,40,38,40,34,33,0,37,35,37],
[50,46,36,45,40,39,43,0,43,35],
[46,52,38,34,36,40,45,37,0,33],
[39,48,47,52,38,43,43,45,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,38,34,36,35,37,36,32,35],
[43,0,45,41,42,36,44,41,40,42],
[42,35,0,39,41,42,45,45,41,45],
[46,39,41,0,38,38,47,40,36,39],
[44,38,39,42,0,39,42,36,45,42],
[45,44,38,42,41,0,41,41,40,44],
[43,36,35,33,38,39,0,40,34,42],
[44,39,35,40,44,39,40,0,41,38],
[48,40,39,44,35,40,46,39,0,41],
[45,38,35,41,38,36,38,42,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,33,35,35,18,44,25,37,41],
[51,0,48,46,42,50,58,46,45,32],
[47,32,0,44,43,35,53,35,43,44],
[45,34,36,0,39,36,41,36,44,41],
[45,38,37,41,0,34,41,39,41,37],
[62,30,45,44,46,0,41,34,58,52],
[36,22,27,39,39,39,0,43,39,29],
[55,34,45,44,41,46,37,0,41,45],
[43,35,37,36,39,22,41,39,0,43],
[39,48,36,39,43,28,51,35,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,47,53,51,53,50,44,43,45],
[43,0,46,46,49,53,50,51,41,39],
[33,34,0,47,47,46,33,28,35,28],
[27,34,33,0,40,40,26,25,29,30],
[29,31,33,40,0,43,34,31,27,22],
[27,27,34,40,37,0,36,39,35,27],
[30,30,47,54,46,44,0,30,31,37],
[36,29,52,55,49,41,50,0,36,36],
[37,39,45,51,53,45,49,44,0,33],
[35,41,52,50,58,53,43,44,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,41,43,41,40,35,37,36,43],
[35,0,39,34,42,39,33,36,38,33],
[39,41,0,40,49,39,34,43,40,36],
[37,46,40,0,46,36,37,31,35,38],
[39,38,31,34,0,31,36,40,31,32],
[40,41,41,44,49,0,39,34,38,38],
[45,47,46,43,44,41,0,45,42,38],
[43,44,37,49,40,46,35,0,33,40],
[44,42,40,45,49,42,38,47,0,35],
[37,47,44,42,48,42,42,40,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,45,40,41,44,43,38,41,46],
[39,0,47,39,46,45,41,40,34,51],
[35,33,0,37,37,34,39,31,36,29],
[40,41,43,0,44,43,40,48,40,40],
[39,34,43,36,0,38,43,41,25,36],
[36,35,46,37,42,0,47,40,37,33],
[37,39,41,40,37,33,0,38,27,32],
[42,40,49,32,39,40,42,0,41,31],
[39,46,44,40,55,43,53,39,0,49],
[34,29,51,40,44,47,48,49,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,51,46,53,44,37,45,46,40],
[28,0,40,39,37,38,46,36,38,36],
[29,40,0,42,47,40,37,41,47,35],
[34,41,38,0,31,33,45,25,43,30],
[27,43,33,49,0,38,36,39,40,40],
[36,42,40,47,42,0,38,38,48,34],
[43,34,43,35,44,42,0,42,41,38],
[35,44,39,55,41,42,38,0,43,42],
[34,42,33,37,40,32,39,37,0,22],
[40,44,45,50,40,46,42,38,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,47,50,41,45,46,44,43,43],
[40,0,41,39,33,34,42,35,38,46],
[33,39,0,37,36,36,44,31,39,40],
[30,41,43,0,37,39,37,39,35,41],
[39,47,44,43,0,35,42,44,43,39],
[35,46,44,41,45,0,44,41,40,46],
[34,38,36,43,38,36,0,37,36,43],
[36,45,49,41,36,39,43,0,44,48],
[37,42,41,45,37,40,44,36,0,44],
[37,34,40,39,41,34,37,32,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,41,43,31,51,31,37,40,38],
[38,0,35,36,28,44,34,33,35,32],
[39,45,0,36,38,41,35,40,39,39],
[37,44,44,0,47,46,35,38,39,44],
[49,52,42,33,0,46,41,44,49,41],
[29,36,39,34,34,0,35,46,29,37],
[49,46,45,45,39,45,0,43,44,43],
[43,47,40,42,36,34,37,0,37,35],
[40,45,41,41,31,51,36,43,0,37],
[42,48,41,36,39,43,37,45,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,39,42,36,45,45,42,39],
[38,0,33,34,44,33,43,46,44,41],
[38,47,0,38,29,32,43,31,32,35],
[41,46,42,0,35,36,41,41,41,42],
[38,36,51,45,0,29,45,39,34,37],
[44,47,48,44,51,0,49,45,35,42],
[35,37,37,39,35,31,0,42,29,31],
[35,34,49,39,41,35,38,0,39,42],
[38,36,48,39,46,45,51,41,0,41],
[41,39,45,38,43,38,49,38,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,37,42,38,43,43,41,41,47],
[38,0,36,41,38,36,40,42,34,44],
[43,44,0,44,39,43,47,46,42,44],
[38,39,36,0,36,37,42,36,38,36],
[42,42,41,44,0,39,53,49,44,49],
[37,44,37,43,41,0,46,44,42,36],
[37,40,33,38,27,34,0,42,38,40],
[39,38,34,44,31,36,38,0,37,37],
[39,46,38,42,36,38,42,43,0,42],
[33,36,36,44,31,44,40,43,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,49,31,48,29,25,32,34,31],
[39,0,49,25,52,33,33,38,32,27],
[31,31,0,27,37,24,30,33,23,33],
[49,55,53,0,64,41,39,46,46,30],
[32,28,43,16,0,28,18,27,20,20],
[51,47,56,39,52,0,33,45,42,35],
[55,47,50,41,62,47,0,54,40,44],
[48,42,47,34,53,35,26,0,33,32],
[46,48,57,34,60,38,40,47,0,34],
[49,53,47,50,60,45,36,48,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,58,43,40,39,52,47,39,44],
[31,0,46,26,32,36,41,47,40,38],
[22,34,0,21,28,30,40,34,28,26],
[37,54,59,0,39,45,49,50,36,47],
[40,48,52,41,0,41,51,49,42,43],
[41,44,50,35,39,0,44,43,42,42],
[28,39,40,31,29,36,0,41,35,40],
[33,33,46,30,31,37,39,0,36,41],
[41,40,52,44,38,38,45,44,0,43],
[36,42,54,33,37,38,40,39,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,44,47,46,44,45,38,43,40],
[39,0,43,43,43,44,46,41,42,36],
[36,37,0,43,39,39,44,44,43,36],
[33,37,37,0,36,36,33,41,29,30],
[34,37,41,44,0,38,46,37,50,35],
[36,36,41,44,42,0,45,33,35,41],
[35,34,36,47,34,35,0,40,34,35],
[42,39,36,39,43,47,40,0,42,37],
[37,38,37,51,30,45,46,38,0,41],
[40,44,44,50,45,39,45,43,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,36,43,46,36,44,44,41,42],
[37,0,33,34,40,33,45,44,36,42],
[44,47,0,40,45,41,43,49,41,40],
[37,46,40,0,43,46,44,48,39,47],
[34,40,35,37,0,40,39,37,38,41],
[44,47,39,34,40,0,45,42,39,45],
[36,35,37,36,41,35,0,34,36,34],
[36,36,31,32,43,38,46,0,37,35],
[39,44,39,41,42,41,44,43,0,43],
[38,38,40,33,39,35,46,45,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,48,38,37,38,47,35,37,40],
[41,0,46,39,41,35,49,35,37,37],
[32,34,0,40,38,33,41,35,34,38],
[42,41,40,0,35,41,45,40,36,32],
[43,39,42,45,0,36,43,36,39,45],
[42,45,47,39,44,0,54,42,42,46],
[33,31,39,35,37,26,0,27,22,34],
[45,45,45,40,44,38,53,0,40,46],
[43,43,46,44,41,38,58,40,0,45],
[40,43,42,48,35,34,46,34,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,54,47,49,57,41,50,38,39],
[27,0,47,32,45,37,33,50,27,35],
[26,33,0,37,43,29,34,40,27,34],
[33,48,43,0,49,47,44,51,46,40],
[31,35,37,31,0,39,41,46,32,30],
[23,43,51,33,41,0,31,56,35,36],
[39,47,46,36,39,49,0,51,34,38],
[30,30,40,29,34,24,29,0,26,26],
[42,53,53,34,48,45,46,54,0,41],
[41,45,46,40,50,44,42,54,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,40,20,38,36,40,36,35],
[37,0,39,41,22,38,34,35,43,31],
[40,41,0,36,29,37,30,24,46,39],
[40,39,44,0,28,41,33,29,24,25],
[60,58,51,52,0,52,52,45,50,38],
[42,42,43,39,28,0,42,38,40,37],
[44,46,50,47,28,38,0,30,41,38],
[40,45,56,51,35,42,50,0,47,42],
[44,37,34,56,30,40,39,33,0,37],
[45,49,41,55,42,43,42,38,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,39,36,36,32,37,42,32,37],
[43,0,41,41,36,35,42,42,38,39],
[41,39,0,30,34,40,34,41,32,37],
[44,39,50,0,42,41,45,47,41,43],
[44,44,46,38,0,40,43,47,37,47],
[48,45,40,39,40,0,47,48,40,43],
[43,38,46,35,37,33,0,40,37,43],
[38,38,39,33,33,32,40,0,34,43],
[48,42,48,39,43,40,43,46,0,48],
[43,41,43,37,33,37,37,37,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,31,44,40,41,37,38,34,38],
[43,0,41,41,43,43,35,53,41,42],
[49,39,0,47,39,48,33,46,41,52],
[36,39,33,0,34,36,34,30,32,49],
[40,37,41,46,0,41,30,45,38,35],
[39,37,32,44,39,0,28,36,31,31],
[43,45,47,46,50,52,0,43,39,43],
[42,27,34,50,35,44,37,0,44,45],
[46,39,39,48,42,49,41,36,0,32],
[42,38,28,31,45,49,37,35,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,41,35,29,39,42,31,43,25],
[45,0,51,40,44,60,58,54,49,42],
[39,29,0,29,32,40,36,23,48,25],
[45,40,51,0,36,45,47,42,49,33],
[51,36,48,44,0,39,42,36,50,30],
[41,20,40,35,41,0,30,30,43,24],
[38,22,44,33,38,50,0,37,45,29],
[49,26,57,38,44,50,43,0,53,29],
[37,31,32,31,30,37,35,27,0,17],
[55,38,55,47,50,56,51,51,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,44,41,49,49,44,44,34,51],
[43,0,36,34,54,40,35,46,38,45],
[36,44,0,51,57,47,39,52,41,44],
[39,46,29,0,58,41,50,48,47,40],
[31,26,23,22,0,39,28,50,32,50],
[31,40,33,39,41,0,34,48,33,50],
[36,45,41,30,52,46,0,45,35,49],
[36,34,28,32,30,32,35,0,28,40],
[46,42,39,33,48,47,45,52,0,51],
[29,35,36,40,30,30,31,40,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,40,42,44,36,36,39,36,36],
[45,0,39,39,50,39,34,40,45,42],
[40,41,0,34,46,37,30,43,32,32],
[38,41,46,0,44,37,29,43,33,36],
[36,30,34,36,0,40,32,36,34,37],
[44,41,43,43,40,0,39,44,38,36],
[44,46,50,51,48,41,0,39,37,40],
[41,40,37,37,44,36,41,0,41,38],
[44,35,48,47,46,42,43,39,0,40],
[44,38,48,44,43,44,40,42,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,39,36,47,44,28,47,39,32],
[42,0,45,47,56,31,30,52,42,41],
[41,35,0,38,54,40,40,49,37,43],
[44,33,42,0,41,41,36,55,42,40],
[33,24,26,39,0,27,22,37,33,27],
[36,49,40,39,53,0,36,56,44,49],
[52,50,40,44,58,44,0,57,46,43],
[33,28,31,25,43,24,23,0,36,32],
[41,38,43,38,47,36,34,44,0,40],
[48,39,37,40,53,31,37,48,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,47,47,38,24,13,57,66,34],
[59,0,66,75,51,52,40,59,64,57],
[33,14,0,33,37,26,26,59,52,32],
[33,5,47,0,13,25,13,59,68,26],
[42,29,43,67,0,37,13,56,64,29],
[56,28,54,55,43,0,27,56,75,40],
[67,40,54,67,67,53,0,76,75,49],
[23,21,21,21,24,24,4,0,63,21],
[14,16,28,12,16,5,5,17,0,1],
[46,23,48,54,51,40,31,59,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,17,27,24,26,32,41,34,31],
[52,0,27,53,16,13,46,51,31,11],
[63,53,0,36,46,47,47,65,46,49],
[53,27,44,0,27,14,34,74,51,24],
[56,64,34,53,0,30,50,62,38,25],
[54,67,33,66,50,0,67,75,54,20],
[48,34,33,46,30,13,0,51,41,20],
[39,29,15,6,18,5,29,0,16,10],
[46,49,34,29,42,26,39,64,0,41],
[49,69,31,56,55,60,60,70,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,20,57,20,20,35,65,20,57],
[52,0,52,37,52,35,52,45,72,37],
[60,28,0,65,45,43,43,65,35,45],
[23,43,15,0,23,35,23,80,35,52],
[60,28,35,57,0,35,35,65,35,57],
[60,45,37,45,45,0,60,45,52,37],
[45,28,37,57,45,20,0,65,57,37],
[15,35,15,0,15,35,15,0,35,52],
[60,8,45,45,45,28,23,45,0,45],
[23,43,35,28,23,43,43,28,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,38,31,40,38,37,36,42,37],
[47,0,40,35,40,41,40,37,46,39],
[42,40,0,41,42,33,37,38,41,41],
[49,45,39,0,42,43,47,42,47,44],
[40,40,38,38,0,35,43,40,42,42],
[42,39,47,37,45,0,46,37,45,35],
[43,40,43,33,37,34,0,36,42,39],
[44,43,42,38,40,43,44,0,46,44],
[38,34,39,33,38,35,38,34,0,38],
[43,41,39,36,38,45,41,36,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,30,37,31,32,43,46,41,39],
[46,0,33,43,38,37,34,41,33,30],
[50,47,0,49,28,35,43,57,51,44],
[43,37,31,0,35,24,42,45,34,36],
[49,42,52,45,0,40,49,47,43,44],
[48,43,45,56,40,0,50,59,57,43],
[37,46,37,38,31,30,0,43,41,32],
[34,39,23,35,33,21,37,0,40,37],
[39,47,29,46,37,23,39,40,0,35],
[41,50,36,44,36,37,48,43,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,43,33,33,15,30,33,62,11],
[29,0,44,47,47,29,30,25,52,11],
[37,36,0,62,59,29,48,48,70,29],
[47,33,18,0,29,44,18,18,62,29],
[47,33,21,51,0,36,33,40,51,10],
[65,51,51,36,44,0,51,44,62,51],
[50,50,32,62,47,29,0,47,57,35],
[47,55,32,62,40,36,33,0,77,21],
[18,28,10,18,29,18,23,3,0,0],
[69,69,51,51,70,29,45,59,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,55,44,45,40,52,53,54,48],
[36,0,51,45,31,31,42,27,41,37],
[25,29,0,42,43,32,33,43,43,35],
[36,35,38,0,36,21,26,36,39,35],
[35,49,37,44,0,36,39,41,37,34],
[40,49,48,59,44,0,40,46,43,42],
[28,38,47,54,41,40,0,48,36,37],
[27,53,37,44,39,34,32,0,39,37],
[26,39,37,41,43,37,44,41,0,45],
[32,43,45,45,46,38,43,43,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,36,34,48,33,36,37,50,32],
[36,0,40,28,29,33,34,33,46,26],
[44,40,0,36,38,37,40,35,41,38],
[46,52,44,0,51,35,43,37,48,38],
[32,51,42,29,0,35,40,32,44,38],
[47,47,43,45,45,0,45,43,48,33],
[44,46,40,37,40,35,0,40,55,31],
[43,47,45,43,48,37,40,0,50,44],
[30,34,39,32,36,32,25,30,0,31],
[48,54,42,42,42,47,49,36,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,38,34,72,0,0,38,38,72],
[8,0,0,34,38,0,0,38,38,0],
[42,80,0,42,80,34,42,38,72,34],
[46,46,38,0,38,38,38,38,38,38],
[8,42,0,42,0,0,8,0,38,0],
[80,80,46,42,80,0,8,46,72,72],
[80,80,38,42,72,72,0,38,72,72],
[42,42,42,42,80,34,42,0,72,34],
[42,42,8,42,42,8,8,8,0,34],
[8,80,46,42,80,8,8,46,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,49,54,40,36,58,39,40,49],
[38,0,32,32,29,34,44,33,42,37],
[31,48,0,40,34,42,47,37,37,35],
[26,48,40,0,34,39,48,42,32,47],
[40,51,46,46,0,43,57,37,45,48],
[44,46,38,41,37,0,57,33,38,55],
[22,36,33,32,23,23,0,23,22,30],
[41,47,43,38,43,47,57,0,47,53],
[40,38,43,48,35,42,58,33,0,54],
[31,43,45,33,32,25,50,27,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,44,44,38,35,34,42,49,44],
[26,0,39,42,39,37,33,37,38,32],
[36,41,0,43,37,36,35,42,46,35],
[36,38,37,0,35,32,32,36,36,35],
[42,41,43,45,0,32,40,36,48,39],
[45,43,44,48,48,0,38,40,41,42],
[46,47,45,48,40,42,0,44,44,48],
[38,43,38,44,44,40,36,0,44,36],
[31,42,34,44,32,39,36,36,0,32],
[36,48,45,45,41,38,32,44,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,41,47,43,37,37,41,38,48],
[41,0,33,46,34,37,27,29,37,38],
[39,47,0,46,42,34,36,37,39,37],
[33,34,34,0,40,36,37,29,36,36],
[37,46,38,40,0,34,36,34,45,35],
[43,43,46,44,46,0,35,43,42,43],
[43,53,44,43,44,45,0,39,48,40],
[39,51,43,51,46,37,41,0,51,45],
[42,43,41,44,35,38,32,29,0,39],
[32,42,43,44,45,37,40,35,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,40,39,45,47,36,45,27,45],
[47,0,37,37,40,43,33,43,32,46],
[40,43,0,46,49,42,49,57,44,53],
[41,43,34,0,35,48,38,43,34,38],
[35,40,31,45,0,43,37,57,33,47],
[33,37,38,32,37,0,45,44,16,35],
[44,47,31,42,43,35,0,45,34,41],
[35,37,23,37,23,36,35,0,25,33],
[53,48,36,46,47,64,46,55,0,52],
[35,34,27,42,33,45,39,47,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,35,48,47,41,40,47,39,31],
[41,0,34,37,40,38,42,47,45,39],
[45,46,0,48,42,37,41,42,38,43],
[32,43,32,0,42,37,33,43,40,33],
[33,40,38,38,0,39,38,40,43,37],
[39,42,43,43,41,0,41,46,37,37],
[40,38,39,47,42,39,0,40,49,40],
[33,33,38,37,40,34,40,0,36,35],
[41,35,42,40,37,43,31,44,0,39],
[49,41,37,47,43,43,40,45,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,35,36,38,41,44,40,34,45],
[35,0,32,34,33,46,37,40,41,31],
[45,48,0,40,48,51,45,43,38,46],
[44,46,40,0,42,48,46,38,42,38],
[42,47,32,38,0,47,39,39,38,42],
[39,34,29,32,33,0,37,33,30,30],
[36,43,35,34,41,43,0,43,36,36],
[40,40,37,42,41,47,37,0,39,43],
[46,39,42,38,42,50,44,41,0,43],
[35,49,34,42,38,50,44,37,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,24,28,36,41,31,37,34,32],
[42,0,33,29,41,36,32,41,36,33],
[56,47,0,38,45,45,40,37,43,45],
[52,51,42,0,39,47,39,41,41,44],
[44,39,35,41,0,37,39,40,45,33],
[39,44,35,33,43,0,41,39,39,37],
[49,48,40,41,41,39,0,38,46,40],
[43,39,43,39,40,41,42,0,47,36],
[46,44,37,39,35,41,34,33,0,38],
[48,47,35,36,47,43,40,44,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,46,50,44,30,34,38,43,37],
[44,0,61,54,48,39,49,47,51,41],
[34,19,0,33,33,27,33,32,29,31],
[30,26,47,0,42,33,28,32,34,30],
[36,32,47,38,0,34,34,37,43,40],
[50,41,53,47,46,0,42,37,44,40],
[46,31,47,52,46,38,0,48,42,34],
[42,33,48,48,43,43,32,0,42,36],
[37,29,51,46,37,36,38,38,0,37],
[43,39,49,50,40,40,46,44,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,27,45,24,32,18,17,27,33],
[56,0,37,45,68,65,44,46,60,50],
[53,43,0,51,41,64,40,25,46,41],
[35,35,29,0,40,47,33,33,42,26],
[56,12,39,40,0,46,47,54,71,21],
[48,15,16,33,34,0,39,30,47,7],
[62,36,40,47,33,41,0,44,40,38],
[63,34,55,47,26,50,36,0,47,26],
[53,20,34,38,9,33,40,33,0,9],
[47,30,39,54,59,73,42,54,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,34,33,30,34,40,25,27,31],
[55,0,47,41,38,40,49,35,41,42],
[46,33,0,39,38,31,42,35,35,39],
[47,39,41,0,37,30,38,29,35,40],
[50,42,42,43,0,35,48,42,34,40],
[46,40,49,50,45,0,51,32,51,41],
[40,31,38,42,32,29,0,29,29,37],
[55,45,45,51,38,48,51,0,46,41],
[53,39,45,45,46,29,51,34,0,42],
[49,38,41,40,40,39,43,39,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,37,41,47,45,46,41,41,42],
[46,0,41,40,59,59,50,54,55,51],
[43,39,0,47,53,57,36,48,47,45],
[39,40,33,0,42,50,47,51,42,45],
[33,21,27,38,0,46,46,43,21,28],
[35,21,23,30,34,0,30,40,31,26],
[34,30,44,33,34,50,0,49,34,39],
[39,26,32,29,37,40,31,0,42,32],
[39,25,33,38,59,49,46,38,0,42],
[38,29,35,35,52,54,41,48,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,38,30,43,40,46,39,52,41],
[45,0,47,42,39,44,42,48,45,47],
[42,33,0,32,43,34,44,37,37,44],
[50,38,48,0,41,43,40,46,51,41],
[37,41,37,39,0,35,41,40,41,38],
[40,36,46,37,45,0,49,47,49,45],
[34,38,36,40,39,31,0,41,37,49],
[41,32,43,34,40,33,39,0,45,43],
[28,35,43,29,39,31,43,35,0,44],
[39,33,36,39,42,35,31,37,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,41,40,40,43,44,39,39,44],
[34,0,47,30,31,41,37,39,36,34],
[39,33,0,38,39,34,41,36,35,32],
[40,50,42,0,38,34,40,40,37,37],
[40,49,41,42,0,36,41,45,41,42],
[37,39,46,46,44,0,45,42,39,43],
[36,43,39,40,39,35,0,41,34,40],
[41,41,44,40,35,38,39,0,42,37],
[41,44,45,43,39,41,46,38,0,43],
[36,46,48,43,38,37,40,43,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,40,52,45,51,49,35,38,50],
[42,0,32,37,40,38,35,32,31,38],
[40,48,0,47,47,48,55,45,40,47],
[28,43,33,0,42,31,36,34,37,48],
[35,40,33,38,0,37,41,40,36,51],
[29,42,32,49,43,0,45,41,45,54],
[31,45,25,44,39,35,0,23,33,39],
[45,48,35,46,40,39,57,0,38,44],
[42,49,40,43,44,35,47,42,0,47],
[30,42,33,32,29,26,41,36,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,29,16,38,29,47,38,42,48],
[29,0,34,35,22,34,27,29,25,48],
[51,46,0,46,32,62,41,32,32,28],
[64,45,34,0,32,53,41,38,61,41],
[42,58,48,48,0,71,57,42,48,35],
[51,46,18,27,9,0,45,26,23,19],
[33,53,39,39,23,35,0,16,39,35],
[42,51,48,42,38,54,64,0,62,28],
[38,55,48,19,32,57,41,18,0,28],
[32,32,52,39,45,61,45,52,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,30,31,36,50,33,39,44,34],
[45,0,30,43,34,53,32,43,41,44],
[50,50,0,52,41,52,38,46,44,45],
[49,37,28,0,33,43,33,37,39,47],
[44,46,39,47,0,47,41,39,36,44],
[30,27,28,37,33,0,28,30,26,33],
[47,48,42,47,39,52,0,41,46,47],
[41,37,34,43,41,50,39,0,36,42],
[36,39,36,41,44,54,34,44,0,48],
[46,36,35,33,36,47,33,38,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,41,42,43,42,40,39,44],
[39,0,46,44,42,41,35,45,39,44],
[39,34,0,46,39,41,38,38,39,43],
[39,36,34,0,36,40,39,39,38,42],
[38,38,41,44,0,37,35,38,37,40],
[37,39,39,40,43,0,34,38,39,39],
[38,45,42,41,45,46,0,41,44,48],
[40,35,42,41,42,42,39,0,39,42],
[41,41,41,42,43,41,36,41,0,42],
[36,36,37,38,40,41,32,38,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,45,44,33,38,30,40,36,34],
[35,0,42,32,41,42,35,33,29,40],
[35,38,0,53,47,31,36,46,29,36],
[36,48,27,0,30,29,21,46,41,19],
[47,39,33,50,0,27,28,50,48,31],
[42,38,49,51,53,0,32,57,37,49],
[50,45,44,59,52,48,0,62,36,47],
[40,47,34,34,30,23,18,0,37,39],
[44,51,51,39,32,43,44,43,0,43],
[46,40,44,61,49,31,33,41,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,46,47,46,45,38,38,36,45],
[31,0,45,38,41,44,29,37,42,39],
[34,35,0,39,40,36,32,29,18,34],
[33,42,41,0,46,45,35,42,43,42],
[34,39,40,34,0,37,35,34,36,34],
[35,36,44,35,43,0,40,32,36,38],
[42,51,48,45,45,40,0,40,41,43],
[42,43,51,38,46,48,40,0,39,43],
[44,38,62,37,44,44,39,41,0,41],
[35,41,46,38,46,42,37,37,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,28,36,25,48,24,39,42,59],
[47,0,23,19,24,44,18,23,36,65],
[52,57,0,14,31,33,12,23,22,53],
[44,61,66,0,57,45,30,37,43,67],
[55,56,49,23,0,57,40,57,31,57],
[32,36,47,35,23,0,18,25,21,32],
[56,62,68,50,40,62,0,56,46,70],
[41,57,57,43,23,55,24,0,51,63],
[38,44,58,37,49,59,34,29,0,73],
[21,15,27,13,23,48,10,17,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,38,43,34,46,41,41,42,43],
[40,0,41,37,34,37,41,30,34,37],
[42,39,0,47,39,36,45,47,43,43],
[37,43,33,0,33,38,41,37,40,37],
[46,46,41,47,0,46,49,45,42,35],
[34,43,44,42,34,0,46,37,42,39],
[39,39,35,39,31,34,0,39,34,34],
[39,50,33,43,35,43,41,0,39,41],
[38,46,37,40,38,38,46,41,0,42],
[37,43,37,43,45,41,46,39,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,24,0,24,20,0,44,0],
[56,0,36,20,36,36,56,0,56,20],
[56,44,0,20,56,36,56,20,80,20],
[56,60,60,0,36,36,56,0,80,0],
[80,44,24,44,0,60,80,24,80,44],
[56,44,44,44,20,0,20,20,44,20],
[60,24,24,24,0,60,0,24,80,24],
[80,80,60,80,56,60,56,0,80,20],
[36,24,0,0,0,36,0,0,0,0],
[80,60,60,80,36,60,56,60,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,29,54,34,53,44,36,33,26],
[40,0,41,34,51,52,37,38,31,37],
[51,39,0,58,26,47,38,44,33,42],
[26,46,22,0,34,37,30,29,26,29],
[46,29,54,46,0,45,40,50,31,42],
[27,28,33,43,35,0,27,30,21,35],
[36,43,42,50,40,53,0,35,31,38],
[44,42,36,51,30,50,45,0,36,33],
[47,49,47,54,49,59,49,44,0,40],
[54,43,38,51,38,45,42,47,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,46,37,47,45,40,39,40,39],
[44,0,42,41,39,46,39,43,36,39],
[34,38,0,40,49,47,38,32,42,41],
[43,39,40,0,40,45,34,37,43,41],
[33,41,31,40,0,39,34,37,41,35],
[35,34,33,35,41,0,34,30,36,32],
[40,41,42,46,46,46,0,41,48,40],
[41,37,48,43,43,50,39,0,42,41],
[40,44,38,37,39,44,32,38,0,40],
[41,41,39,39,45,48,40,39,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,28,27,36,45,45,41,36,48],
[33,0,46,33,32,54,59,51,33,36],
[52,34,0,33,36,43,39,49,44,38],
[53,47,47,0,40,45,49,55,53,45],
[44,48,44,40,0,56,46,49,51,42],
[35,26,37,35,24,0,33,41,39,33],
[35,21,41,31,34,47,0,44,40,48],
[39,29,31,25,31,39,36,0,40,38],
[44,47,36,27,29,41,40,40,0,42],
[32,44,42,35,38,47,32,42,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,26,56,43,40,28,31,42,38],
[56,0,36,49,44,47,35,35,40,41],
[54,44,0,57,43,45,46,41,42,35],
[24,31,23,0,44,38,23,36,40,25],
[37,36,37,36,0,42,34,25,39,19],
[40,33,35,42,38,0,27,20,46,23],
[52,45,34,57,46,53,0,43,47,38],
[49,45,39,44,55,60,37,0,49,39],
[38,40,38,40,41,34,33,31,0,29],
[42,39,45,55,61,57,42,41,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,45,34,31,31,28,34,38,30],
[46,0,38,41,43,41,34,41,49,38],
[35,42,0,36,32,33,23,44,29,23],
[46,39,44,0,41,29,23,40,51,38],
[49,37,48,39,0,38,41,44,47,42],
[49,39,47,51,42,0,34,52,44,32],
[52,46,57,57,39,46,0,49,48,49],
[46,39,36,40,36,28,31,0,42,36],
[42,31,51,29,33,36,32,38,0,37],
[50,42,57,42,38,48,31,44,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,33,43,34,30,41,40,47,40],
[41,0,44,38,43,43,50,40,51,42],
[47,36,0,44,40,41,49,44,49,48],
[37,42,36,0,42,33,37,43,46,49],
[46,37,40,38,0,36,41,41,41,53],
[50,37,39,47,44,0,41,39,48,46],
[39,30,31,43,39,39,0,47,40,37],
[40,40,36,37,39,41,33,0,52,49],
[33,29,31,34,39,32,40,28,0,46],
[40,38,32,31,27,34,43,31,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,52,41,38,57,48,51,45,51],
[22,0,39,30,29,33,33,28,25,40],
[28,41,0,28,35,43,37,48,31,38],
[39,50,52,0,45,51,51,39,52,45],
[42,51,45,35,0,47,43,36,38,43],
[23,47,37,29,33,0,38,46,28,35],
[32,47,43,29,37,42,0,40,39,41],
[29,52,32,41,44,34,40,0,34,40],
[35,55,49,28,42,52,41,46,0,41],
[29,40,42,35,37,45,39,40,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,41,41,34,48,46,39,33,39],
[44,0,37,46,39,47,40,44,44,48],
[39,43,0,44,41,47,50,38,38,39],
[39,34,36,0,39,39,32,31,38,40],
[46,41,39,41,0,45,40,37,41,40],
[32,33,33,41,35,0,34,34,34,35],
[34,40,30,48,40,46,0,34,31,39],
[41,36,42,49,43,46,46,0,47,42],
[47,36,42,42,39,46,49,33,0,40],
[41,32,41,40,40,45,41,38,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,36,31,61,56,80,61,55,31],
[0,0,36,12,61,31,36,36,36,12],
[44,44,0,44,25,56,44,37,19,31],
[49,68,36,0,49,80,68,61,43,55],
[19,19,55,31,0,31,19,55,19,31],
[24,49,24,0,49,0,49,61,24,12],
[0,44,36,12,61,31,0,61,0,12],
[19,44,43,19,25,19,19,0,19,31],
[25,44,61,37,61,56,80,61,0,56],
[49,68,49,25,49,68,68,49,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,51,45,46,36,55,48,45,55],
[19,0,35,16,25,28,27,30,14,29],
[29,45,0,10,35,25,37,29,25,35],
[35,64,70,0,57,60,64,47,46,63],
[34,55,45,23,0,48,55,46,59,38],
[44,52,55,20,32,0,52,53,36,42],
[25,53,43,16,25,28,0,41,35,40],
[32,50,51,33,34,27,39,0,27,58],
[35,66,55,34,21,44,45,53,0,45],
[25,51,45,17,42,38,40,22,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,54,52,40,31,27,44,44,47],
[28,0,43,41,33,28,20,42,43,48],
[26,37,0,50,40,21,21,38,32,41],
[28,39,30,0,35,24,26,30,30,40],
[40,47,40,45,0,41,40,43,41,56],
[49,52,59,56,39,0,32,46,45,50],
[53,60,59,54,40,48,0,54,49,53],
[36,38,42,50,37,34,26,0,47,54],
[36,37,48,50,39,35,31,33,0,37],
[33,32,39,40,24,30,27,26,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,44,39,47,39,36,45,46,41],
[35,0,41,35,41,37,40,39,37,37],
[36,39,0,37,43,39,38,43,41,37],
[41,45,43,0,44,39,43,43,42,41],
[33,39,37,36,0,39,39,43,39,41],
[41,43,41,41,41,0,43,46,38,38],
[44,40,42,37,41,37,0,42,41,32],
[35,41,37,37,37,34,38,0,37,34],
[34,43,39,38,41,42,39,43,0,38],
[39,43,43,39,39,42,48,46,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,39,46,43,49,41,43,49,48],
[26,0,30,30,36,33,26,33,26,26],
[41,50,0,39,46,40,37,46,48,38],
[34,50,41,0,42,35,37,36,40,36],
[37,44,34,38,0,37,40,39,45,40],
[31,47,40,45,43,0,37,38,39,40],
[39,54,43,43,40,43,0,45,35,35],
[37,47,34,44,41,42,35,0,42,41],
[31,54,32,40,35,41,45,38,0,39],
[32,54,42,44,40,40,45,39,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,11,38,32,40,38,40,47,31],
[31,0,27,32,37,33,31,26,29,34],
[69,53,0,48,46,40,53,46,56,49],
[42,48,32,0,29,46,46,38,59,34],
[48,43,34,51,0,57,48,30,54,40],
[40,47,40,34,23,0,43,39,57,35],
[42,49,27,34,32,37,0,22,36,32],
[40,54,34,42,50,41,58,0,51,34],
[33,51,24,21,26,23,44,29,0,34],
[49,46,31,46,40,45,48,46,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,41,36,35,34,38,35,42,38],
[36,0,33,34,34,37,34,33,30,35],
[39,47,0,37,38,40,42,38,46,43],
[44,46,43,0,46,44,49,46,43,40],
[45,46,42,34,0,44,38,33,33,36],
[46,43,40,36,36,0,28,41,36,38],
[42,46,38,31,42,52,0,41,33,39],
[45,47,42,34,47,39,39,0,39,45],
[38,50,34,37,47,44,47,41,0,38],
[42,45,37,40,44,42,41,35,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,32,35,39,41,38,50,33,44],
[37,0,29,36,32,36,40,47,33,34],
[48,51,0,45,40,50,47,51,29,50],
[45,44,35,0,36,36,41,46,24,48],
[41,48,40,44,0,35,51,50,41,47],
[39,44,30,44,45,0,40,53,26,40],
[42,40,33,39,29,40,0,39,36,34],
[30,33,29,34,30,27,41,0,32,31],
[47,47,51,56,39,54,44,48,0,48],
[36,46,30,32,33,40,46,49,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,38,40,49,53,41,38,45,52],
[32,0,46,36,41,46,36,38,38,33],
[42,34,0,37,41,48,42,49,36,33],
[40,44,43,0,44,45,41,51,43,42],
[31,39,39,36,0,47,39,37,42,42],
[27,34,32,35,33,0,29,33,26,28],
[39,44,38,39,41,51,0,40,42,39],
[42,42,31,29,43,47,40,0,45,38],
[35,42,44,37,38,54,38,35,0,46],
[28,47,47,38,38,52,41,42,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,48,35,43,46,34,46,36,38],
[41,0,41,40,53,42,35,41,38,32],
[32,39,0,41,45,42,31,42,36,42],
[45,40,39,0,51,50,33,37,50,44],
[37,27,35,29,0,44,28,33,37,35],
[34,38,38,30,36,0,34,43,38,30],
[46,45,49,47,52,46,0,51,54,38],
[34,39,38,43,47,37,29,0,37,35],
[44,42,44,30,43,42,26,43,0,41],
[42,48,38,36,45,50,42,45,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,40,46,34,43,47,37,36,45],
[43,0,43,36,42,42,44,36,44,44],
[40,37,0,34,34,38,44,39,37,42],
[34,44,46,0,36,43,43,36,41,41],
[46,38,46,44,0,44,47,39,36,45],
[37,38,42,37,36,0,40,37,38,45],
[33,36,36,37,33,40,0,32,36,37],
[43,44,41,44,41,43,48,0,40,40],
[44,36,43,39,44,42,44,40,0,48],
[35,36,38,39,35,35,43,40,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,35,42,30,40,41,34,44,45],
[40,0,39,36,39,41,38,32,41,30],
[45,41,0,36,35,39,41,39,35,40],
[38,44,44,0,38,43,40,39,41,37],
[50,41,45,42,0,40,50,44,52,42],
[40,39,41,37,40,0,42,29,36,30],
[39,42,39,40,30,38,0,36,40,26],
[46,48,41,41,36,51,44,0,43,44],
[36,39,45,39,28,44,40,37,0,38],
[35,50,40,43,38,50,54,36,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,37,42,33,35,38,38,42],
[41,0,41,33,46,33,38,40,38,44],
[41,39,0,41,42,39,43,40,42,45],
[43,47,39,0,43,33,45,37,43,41],
[38,34,38,37,0,33,37,41,32,39],
[47,47,41,47,47,0,44,37,40,42],
[45,42,37,35,43,36,0,40,43,44],
[42,40,40,43,39,43,40,0,36,43],
[42,42,38,37,48,40,37,44,0,48],
[38,36,35,39,41,38,36,37,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,34,38,35,37,39,43,41,42],
[37,0,32,35,36,28,30,35,36,40],
[46,48,0,41,40,45,38,47,42,38],
[42,45,39,0,37,38,42,46,41,39],
[45,44,40,43,0,38,39,43,41,37],
[43,52,35,42,42,0,37,38,43,42],
[41,50,42,38,41,43,0,47,41,38],
[37,45,33,34,37,42,33,0,38,41],
[39,44,38,39,39,37,39,42,0,37],
[38,40,42,41,43,38,42,39,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,35,33,38,37,31,36,31,34],
[43,0,39,38,41,36,34,39,31,35],
[45,41,0,44,49,45,42,40,41,51],
[47,42,36,0,44,39,36,38,33,33],
[42,39,31,36,0,41,30,34,29,36],
[43,44,35,41,39,0,36,35,35,30],
[49,46,38,44,50,44,0,43,34,40],
[44,41,40,42,46,45,37,0,34,34],
[49,49,39,47,51,45,46,46,0,40],
[46,45,29,47,44,50,40,46,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,23,22,11,26,19,27,28,50],
[59,0,28,28,47,49,20,41,26,45],
[57,52,0,48,33,48,29,48,28,53],
[58,52,32,0,42,56,46,43,41,44],
[69,33,47,38,0,62,32,33,34,47],
[54,31,32,24,18,0,28,15,36,46],
[61,60,51,34,48,52,0,43,44,49],
[53,39,32,37,47,65,37,0,45,53],
[52,54,52,39,46,44,36,35,0,32],
[30,35,27,36,33,34,31,27,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,40,37,46,44,45,40,48,42],
[43,0,40,39,49,38,39,28,49,35],
[40,40,0,42,43,42,46,34,50,40],
[43,41,38,0,53,43,48,40,56,46],
[34,31,37,27,0,31,35,22,44,36],
[36,42,38,37,49,0,46,35,46,50],
[35,41,34,32,45,34,0,28,41,36],
[40,52,46,40,58,45,52,0,51,40],
[32,31,30,24,36,34,39,29,0,27],
[38,45,40,34,44,30,44,40,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,25,32,31,22,27,16,43,28],
[48,0,54,52,48,42,33,33,60,38],
[55,26,0,46,27,41,32,20,57,28],
[48,28,34,0,39,43,36,29,43,28],
[49,32,53,41,0,37,33,31,55,23],
[58,38,39,37,43,0,43,27,64,29],
[53,47,48,44,47,37,0,49,49,45],
[64,47,60,51,49,53,31,0,59,48],
[37,20,23,37,25,16,31,21,0,37],
[52,42,52,52,57,51,35,32,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,37,36,32,34,48,40,36,41],
[39,0,39,35,35,37,46,43,38,40],
[43,41,0,33,38,34,41,39,36,35],
[44,45,47,0,47,43,47,46,48,39],
[48,45,42,33,0,34,43,44,42,42],
[46,43,46,37,46,0,46,47,40,47],
[32,34,39,33,37,34,0,46,35,37],
[40,37,41,34,36,33,34,0,40,33],
[44,42,44,32,38,40,45,40,0,34],
[39,40,45,41,38,33,43,47,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,41,47,48,44,48,38,42,46],
[43,0,43,42,42,42,42,44,37,40],
[39,37,0,44,42,42,38,37,36,40],
[33,38,36,0,36,45,35,36,31,35],
[32,38,38,44,0,36,43,35,42,37],
[36,38,38,35,44,0,41,35,33,41],
[32,38,42,45,37,39,0,31,34,41],
[42,36,43,44,45,45,49,0,36,39],
[38,43,44,49,38,47,46,44,0,41],
[34,40,40,45,43,39,39,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,23,36,37,25,36,43,42,37],
[39,0,34,36,35,27,32,52,50,41],
[57,46,0,46,51,39,42,58,47,46],
[44,44,34,0,47,36,38,52,43,40],
[43,45,29,33,0,34,35,50,38,45],
[55,53,41,44,46,0,38,49,44,41],
[44,48,38,42,45,42,0,56,50,51],
[37,28,22,28,30,31,24,0,36,34],
[38,30,33,37,42,36,30,44,0,41],
[43,39,34,40,35,39,29,46,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,25,22,22,22,33,25,22,47],
[0,0,0,22,22,22,0,25,22,47],
[55,80,0,22,22,22,55,47,22,47],
[58,58,58,0,55,80,33,25,55,80],
[58,58,58,25,0,47,33,25,22,47],
[58,58,58,0,33,0,33,25,55,80],
[47,80,25,47,47,47,0,25,22,47],
[55,55,33,55,55,55,55,0,55,80],
[58,58,58,25,58,25,58,25,0,80],
[33,33,33,0,33,0,33,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,48,43,35,46,51,45,41,51],
[41,0,39,40,34,39,41,41,35,45],
[32,41,0,39,31,40,42,41,42,44],
[37,40,41,0,33,38,50,39,35,50],
[45,46,49,47,0,47,48,43,39,55],
[34,41,40,42,33,0,42,36,42,45],
[29,39,38,30,32,38,0,37,31,44],
[35,39,39,41,37,44,43,0,40,46],
[39,45,38,45,41,38,49,40,0,52],
[29,35,36,30,25,35,36,34,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,34,39,31,32,34,38,39,37],
[43,0,32,40,28,34,33,30,37,35],
[46,48,0,47,34,40,43,40,41,39],
[41,40,33,0,34,40,37,35,37,39],
[49,52,46,46,0,43,42,41,41,37],
[48,46,40,40,37,0,37,43,39,44],
[46,47,37,43,38,43,0,35,41,36],
[42,50,40,45,39,37,45,0,46,39],
[41,43,39,43,39,41,39,34,0,41],
[43,45,41,41,43,36,44,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,46,41,47,48,38,47,53,48],
[34,0,44,39,40,43,36,44,40,41],
[34,36,0,38,33,38,31,41,33,38],
[39,41,42,0,44,40,42,46,44,41],
[33,40,47,36,0,39,37,43,39,38],
[32,37,42,40,41,0,37,46,39,35],
[42,44,49,38,43,43,0,46,47,41],
[33,36,39,34,37,34,34,0,40,39],
[27,40,47,36,41,41,33,40,0,41],
[32,39,42,39,42,45,39,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,41,35,35,36,54,33,32,40],
[35,0,39,34,46,50,48,45,49,40],
[39,41,0,42,42,45,50,40,43,44],
[45,46,38,0,41,47,41,45,49,49],
[45,34,38,39,0,54,48,41,47,37],
[44,30,35,33,26,0,44,46,43,42],
[26,32,30,39,32,36,0,38,38,31],
[47,35,40,35,39,34,42,0,53,42],
[48,31,37,31,33,37,42,27,0,31],
[40,40,36,31,43,38,49,38,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,40,34,39,36,39,37,43,30],
[34,0,40,36,38,39,37,41,38,26],
[40,40,0,36,35,41,34,40,41,38],
[46,44,44,0,35,45,40,39,41,26],
[41,42,45,45,0,43,37,39,44,35],
[44,41,39,35,37,0,34,35,35,31],
[41,43,46,40,43,46,0,48,42,41],
[43,39,40,41,41,45,32,0,44,34],
[37,42,39,39,36,45,38,36,0,34],
[50,54,42,54,45,49,39,46,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,38,44,39,43,38,42,42,38],
[41,0,40,48,45,45,39,40,42,47],
[42,40,0,49,42,38,40,39,44,44],
[36,32,31,0,35,39,39,38,37,39],
[41,35,38,45,0,39,41,38,37,45],
[37,35,42,41,41,0,42,42,41,44],
[42,41,40,41,39,38,0,40,36,41],
[38,40,41,42,42,38,40,0,43,45],
[38,38,36,43,43,39,44,37,0,42],
[42,33,36,41,35,36,39,35,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,46,58,47,46,58,50,26,51],
[41,0,39,39,47,30,36,40,45,51],
[34,41,0,38,50,23,25,31,37,18],
[22,41,42,0,53,23,41,33,34,16],
[33,33,30,27,0,31,29,30,21,26],
[34,50,57,57,49,0,38,35,34,24],
[22,44,55,39,51,42,0,26,31,31],
[30,40,49,47,50,45,54,0,31,28],
[54,35,43,46,59,46,49,49,0,39],
[29,29,62,64,54,56,49,52,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,44,60,17,27,8,19,16,41],
[44,0,63,44,28,63,44,44,44,24],
[36,17,0,36,37,0,20,20,36,33],
[20,36,44,0,37,19,0,0,16,17],
[63,52,43,43,0,43,24,35,16,24],
[53,17,80,61,37,0,44,20,36,41],
[72,36,60,80,56,36,0,36,33,33],
[61,36,60,80,45,60,44,0,33,41],
[64,36,44,64,64,44,47,47,0,44],
[39,56,47,63,56,39,47,39,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,41,45,39,39,35,36,41,43],
[36,0,32,37,31,33,32,38,37,36],
[39,48,0,40,39,41,32,33,46,39],
[35,43,40,0,40,43,42,46,45,46],
[41,49,41,40,0,46,38,42,48,41],
[41,47,39,37,34,0,34,36,39,39],
[45,48,48,38,42,46,0,46,44,44],
[44,42,47,34,38,44,34,0,44,39],
[39,43,34,35,32,41,36,36,0,39],
[37,44,41,34,39,41,36,41,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,42,39,33,45,42,43,44,40],
[41,0,35,41,38,34,41,32,44,43],
[38,45,0,49,40,43,43,43,42,43],
[41,39,31,0,35,41,34,25,41,37],
[47,42,40,45,0,44,46,41,50,41],
[35,46,37,39,36,0,34,31,47,33],
[38,39,37,46,34,46,0,33,43,35],
[37,48,37,55,39,49,47,0,46,42],
[36,36,38,39,30,33,37,34,0,32],
[40,37,37,43,39,47,45,38,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,51,37,46,49,49,49,51,50],
[28,0,44,30,39,34,38,37,39,37],
[29,36,0,33,30,32,39,36,41,37],
[43,50,47,0,39,48,46,41,50,47],
[34,41,50,41,0,48,43,37,43,47],
[31,46,48,32,32,0,42,40,46,38],
[31,42,41,34,37,38,0,34,47,40],
[31,43,44,39,43,40,46,0,44,41],
[29,41,39,30,37,34,33,36,0,36],
[30,43,43,33,33,42,40,39,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,37,59,28,61,39,41,42,49],
[39,0,54,58,38,54,47,33,44,55],
[43,26,0,42,46,47,37,34,46,53],
[21,22,38,0,25,27,31,22,23,25],
[52,42,34,55,0,55,47,27,37,42],
[19,26,33,53,25,0,35,21,22,29],
[41,33,43,49,33,45,0,27,34,44],
[39,47,46,58,53,59,53,0,50,48],
[38,36,34,57,43,58,46,30,0,46],
[31,25,27,55,38,51,36,32,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,36,67,46,43,54,40,50,61],
[27,0,25,56,41,22,58,14,39,32],
[44,55,0,54,27,32,47,55,46,41],
[13,24,26,0,51,22,55,21,29,26],
[34,39,53,29,0,28,33,33,37,35],
[37,58,48,58,52,0,60,52,41,53],
[26,22,33,25,47,20,0,25,30,29],
[40,66,25,59,47,28,55,0,47,38],
[30,41,34,51,43,39,50,33,0,24],
[19,48,39,54,45,27,51,42,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,62,54,58,46,55,51,46,45],
[47,0,67,64,38,54,56,47,38,39],
[18,13,0,42,8,14,27,21,19,22],
[26,16,38,0,25,25,19,38,37,24],
[22,42,72,55,0,50,53,68,51,42],
[34,26,66,55,30,0,48,39,36,39],
[25,24,53,61,27,32,0,45,48,42],
[29,33,59,42,12,41,35,0,39,39],
[34,42,61,43,29,44,32,41,0,35],
[35,41,58,56,38,41,38,41,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,45,33,40,36,35,39,36,26],
[44,0,49,39,42,45,50,44,42,37],
[35,31,0,27,34,35,35,37,26,32],
[47,41,53,0,48,36,38,42,44,41],
[40,38,46,32,0,43,43,39,35,32],
[44,35,45,44,37,0,49,43,44,33],
[45,30,45,42,37,31,0,45,41,37],
[41,36,43,38,41,37,35,0,38,35],
[44,38,54,36,45,36,39,42,0,36],
[54,43,48,39,48,47,43,45,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,55,57,63,53,60,40,48,68],
[31,0,40,32,57,46,55,41,44,25],
[25,40,0,53,44,39,61,36,27,31],
[23,48,27,0,38,39,47,43,25,45],
[17,23,36,42,0,47,52,31,15,24],
[27,34,41,41,33,0,59,39,22,20],
[20,25,19,33,28,21,0,25,25,15],
[40,39,44,37,49,41,55,0,57,47],
[32,36,53,55,65,58,55,23,0,35],
[12,55,49,35,56,60,65,33,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,41,27,35,38,30,32,32,33],
[47,0,45,27,39,37,33,38,32,36],
[39,35,0,29,34,34,26,31,27,26],
[53,53,51,0,49,48,39,45,42,44],
[45,41,46,31,0,43,31,29,38,37],
[42,43,46,32,37,0,33,28,36,33],
[50,47,54,41,49,47,0,45,40,44],
[48,42,49,35,51,52,35,0,38,46],
[48,48,53,38,42,44,40,42,0,38],
[47,44,54,36,43,47,36,34,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,51,42,48,44,38,46,38,37],
[40,0,45,40,45,40,40,36,33,36],
[29,35,0,35,40,35,36,39,35,36],
[38,40,45,0,43,39,37,39,35,35],
[32,35,40,37,0,44,38,33,34,36],
[36,40,45,41,36,0,37,37,33,40],
[42,40,44,43,42,43,0,40,37,33],
[34,44,41,41,47,43,40,0,35,39],
[42,47,45,45,46,47,43,45,0,33],
[43,44,44,45,44,40,47,41,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,32,44,41,39,41,48,55,42],
[43,0,39,46,39,37,47,44,54,45],
[48,41,0,42,43,42,41,45,48,36],
[36,34,38,0,39,34,42,44,46,40],
[39,41,37,41,0,44,42,50,49,41],
[41,43,38,46,36,0,41,41,40,45],
[39,33,39,38,38,39,0,37,44,42],
[32,36,35,36,30,39,43,0,48,41],
[25,26,32,34,31,40,36,32,0,34],
[38,35,44,40,39,35,38,39,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,38,47,35,46,42,48,38,45],
[42,0,32,43,40,49,38,59,51,49],
[42,48,0,42,40,40,50,54,54,37],
[33,37,38,0,41,48,45,48,43,39],
[45,40,40,39,0,45,42,50,49,45],
[34,31,40,32,35,0,41,42,51,32],
[38,42,30,35,38,39,0,38,42,37],
[32,21,26,32,30,38,42,0,41,24],
[42,29,26,37,31,29,38,39,0,36],
[35,31,43,41,35,48,43,56,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,36,42,41,37,34,39,37,31],
[42,0,39,36,37,44,34,43,39,37],
[44,41,0,39,42,41,33,46,36,39],
[38,44,41,0,36,37,42,39,33,35],
[39,43,38,44,0,38,41,44,37,37],
[43,36,39,43,42,0,37,44,42,41],
[46,46,47,38,39,43,0,55,46,51],
[41,37,34,41,36,36,25,0,35,33],
[43,41,44,47,43,38,34,45,0,32],
[49,43,41,45,43,39,29,47,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,55,38,49,51,46,56,45,38],
[33,0,41,41,42,39,53,35,45,42],
[25,39,0,36,29,43,42,42,34,36],
[42,39,44,0,38,44,51,47,40,48],
[31,38,51,42,0,48,59,53,44,39],
[29,41,37,36,32,0,42,46,42,38],
[34,27,38,29,21,38,0,36,32,42],
[24,45,38,33,27,34,44,0,31,43],
[35,35,46,40,36,38,48,49,0,43],
[42,38,44,32,41,42,38,37,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,40,35,35,37,33,38,39,39],
[42,0,44,48,41,37,37,38,38,39],
[40,36,0,39,36,37,38,38,35,37],
[45,32,41,0,34,39,42,40,33,35],
[45,39,44,46,0,50,45,46,42,37],
[43,43,43,41,30,0,34,36,38,35],
[47,43,42,38,35,46,0,38,44,42],
[42,42,42,40,34,44,42,0,42,40],
[41,42,45,47,38,42,36,38,0,37],
[41,41,43,45,43,45,38,40,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,42,41,41,39,41,48,42,37],
[35,0,34,37,37,32,33,41,42,33],
[38,46,0,41,44,41,37,40,43,36],
[39,43,39,0,42,38,43,40,41,40],
[39,43,36,38,0,35,41,39,44,32],
[41,48,39,42,45,0,46,43,49,42],
[39,47,43,37,39,34,0,46,48,39],
[32,39,40,40,41,37,34,0,37,31],
[38,38,37,39,36,31,32,43,0,34],
[43,47,44,40,48,38,41,49,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,50,60,29,39,32,40,53,41],
[42,0,48,53,37,46,39,35,65,47],
[30,32,0,39,38,18,33,15,27,39],
[20,27,41,0,30,10,35,25,38,41],
[51,43,42,50,0,22,33,33,38,37],
[41,34,62,70,58,0,52,56,49,57],
[48,41,47,45,47,28,0,26,48,51],
[40,45,65,55,47,24,54,0,49,61],
[27,15,53,42,42,31,32,31,0,41],
[39,33,41,39,43,23,29,19,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,47,41,46,50,44,38,45],
[38,0,43,51,42,51,45,49,43,50],
[38,37,0,54,36,42,45,42,49,42],
[33,29,26,0,32,32,37,40,30,35],
[39,38,44,48,0,45,42,40,45,44],
[34,29,38,48,35,0,48,36,35,31],
[30,35,35,43,38,32,0,39,35,42],
[36,31,38,40,40,44,41,0,33,44],
[42,37,31,50,35,45,45,47,0,45],
[35,30,38,45,36,49,38,36,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,33,58,40,59,52,39,47,48],
[35,0,32,42,24,46,34,39,46,47],
[47,48,0,55,36,52,50,39,52,48],
[22,38,25,0,28,41,33,31,42,27],
[40,56,44,52,0,53,55,40,63,51],
[21,34,28,39,27,0,31,28,37,36],
[28,46,30,47,25,49,0,38,40,36],
[41,41,41,49,40,52,42,0,45,44],
[33,34,28,38,17,43,40,35,0,32],
[32,33,32,53,29,44,44,36,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,37,28,33,25,27,27,31,30],
[52,0,49,45,47,40,50,48,58,48],
[43,31,0,39,36,33,30,28,41,31],
[52,35,41,0,39,48,38,43,35,42],
[47,33,44,41,0,34,39,37,52,41],
[55,40,47,32,46,0,43,32,41,34],
[53,30,50,42,41,37,0,42,37,41],
[53,32,52,37,43,48,38,0,52,48],
[49,22,39,45,28,39,43,28,0,42],
[50,32,49,38,39,46,39,32,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,34,38,39,43,43,41,40,42],
[33,0,39,46,46,42,44,37,42,51],
[46,41,0,42,43,44,47,42,36,41],
[42,34,38,0,50,43,42,42,37,45],
[41,34,37,30,0,40,40,42,33,44],
[37,38,36,37,40,0,42,39,32,38],
[37,36,33,38,40,38,0,39,30,42],
[39,43,38,38,38,41,41,0,38,45],
[40,38,44,43,47,48,50,42,0,51],
[38,29,39,35,36,42,38,35,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,68,62,68,50,45,64,54,41],
[44,0,43,51,44,33,44,35,24,29],
[12,37,0,36,33,24,37,41,15,34],
[18,29,44,0,49,24,33,41,31,34],
[12,36,47,31,0,27,25,51,38,29],
[30,47,56,56,53,0,42,40,50,44],
[35,36,43,47,55,38,0,39,35,38],
[16,45,39,39,29,40,41,0,38,29],
[26,56,65,49,42,30,45,42,0,49],
[39,51,46,46,51,36,42,51,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,40,37,38,41,42,46,36],
[41,0,28,39,37,40,42,37,34,33],
[41,52,0,42,38,38,42,43,43,46],
[40,41,38,0,37,40,42,52,35,33],
[43,43,42,43,0,40,47,43,45,36],
[42,40,42,40,40,0,43,38,37,43],
[39,38,38,38,33,37,0,43,39,32],
[38,43,37,28,37,42,37,0,40,39],
[34,46,37,45,35,43,41,40,0,37],
[44,47,34,47,44,37,48,41,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,38,45,40,45,38,41,45,48],
[32,0,39,37,37,44,42,41,39,47],
[42,41,0,36,42,44,45,44,48,43],
[35,43,44,0,39,42,44,43,48,40],
[40,43,38,41,0,46,41,42,48,38],
[35,36,36,38,34,0,36,29,42,40],
[42,38,35,36,39,44,0,40,42,43],
[39,39,36,37,38,51,40,0,45,48],
[35,41,32,32,32,38,38,35,0,36],
[32,33,37,40,42,40,37,32,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,35,40,35,41,33,36,34,39],
[45,0,37,48,38,47,45,44,34,34],
[45,43,0,48,46,48,46,48,37,42],
[40,32,32,0,39,33,38,45,37,30],
[45,42,34,41,0,45,35,37,29,37],
[39,33,32,47,35,0,33,39,29,32],
[47,35,34,42,45,47,0,47,40,37],
[44,36,32,35,43,41,33,0,34,31],
[46,46,43,43,51,51,40,46,0,46],
[41,46,38,50,43,48,43,49,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,33,42,44,37,40,41,36,42],
[42,0,45,46,41,46,47,47,48,38],
[47,35,0,41,37,39,40,43,42,36],
[38,34,39,0,28,34,41,46,37,33],
[36,39,43,52,0,39,46,54,48,41],
[43,34,41,46,41,0,48,43,45,38],
[40,33,40,39,34,32,0,40,36,30],
[39,33,37,34,26,37,40,0,39,38],
[44,32,38,43,32,35,44,41,0,30],
[38,42,44,47,39,42,50,42,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,45,49,48,46,46,40,51,41],
[41,0,43,44,48,49,47,43,52,40],
[35,37,0,40,41,41,38,36,43,35],
[31,36,40,0,43,38,32,35,43,35],
[32,32,39,37,0,40,35,37,47,35],
[34,31,39,42,40,0,40,39,38,35],
[34,33,42,48,45,40,0,35,43,39],
[40,37,44,45,43,41,45,0,42,40],
[29,28,37,37,33,42,37,38,0,35],
[39,40,45,45,45,45,41,40,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,36,43,43,45,42,34,40,40],
[38,0,42,39,40,49,36,39,31,46],
[44,38,0,38,44,47,40,32,34,36],
[37,41,42,0,34,37,37,38,38,40],
[37,40,36,46,0,41,37,37,37,38],
[35,31,33,43,39,0,38,30,41,35],
[38,44,40,43,43,42,0,37,34,41],
[46,41,48,42,43,50,43,0,43,40],
[40,49,46,42,43,39,46,37,0,44],
[40,34,44,40,42,45,39,40,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,47,35,33,32,32,34,31,34],
[45,0,46,38,45,40,44,37,41,42],
[33,34,0,42,35,36,38,30,37,33],
[45,42,38,0,46,41,51,44,39,38],
[47,35,45,34,0,34,46,39,39,41],
[48,40,44,39,46,0,41,31,39,42],
[48,36,42,29,34,39,0,34,40,40],
[46,43,50,36,41,49,46,0,45,47],
[49,39,43,41,41,41,40,35,0,39],
[46,38,47,42,39,38,40,33,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,36,36,41,50,41,38,32],
[39,0,44,43,45,43,49,37,38,38],
[39,36,0,36,40,38,45,34,31,32],
[44,37,44,0,42,35,51,40,40,41],
[44,35,40,38,0,32,48,38,35,41],
[39,37,42,45,48,0,47,41,37,34],
[30,31,35,29,32,33,0,30,32,33],
[39,43,46,40,42,39,50,0,39,33],
[42,42,49,40,45,43,48,41,0,38],
[48,42,48,39,39,46,47,47,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,37,34,41,45,36,39,34,41],
[44,0,33,40,41,34,34,45,46,46],
[43,47,0,36,48,47,41,46,39,48],
[46,40,44,0,45,50,53,49,45,42],
[39,39,32,35,0,44,41,35,32,45],
[35,46,33,30,36,0,33,35,31,41],
[44,46,39,27,39,47,0,42,40,49],
[41,35,34,31,45,45,38,0,38,52],
[46,34,41,35,48,49,40,42,0,43],
[39,34,32,38,35,39,31,28,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,25,28,27,33,39,54,21,35],
[48,0,43,40,40,54,50,51,37,52],
[55,37,0,43,50,50,46,58,42,45],
[52,40,37,0,58,49,43,59,48,55],
[53,40,30,22,0,39,31,59,30,43],
[47,26,30,31,41,0,27,42,36,33],
[41,30,34,37,49,53,0,60,38,48],
[26,29,22,21,21,38,20,0,20,29],
[59,43,38,32,50,44,42,60,0,51],
[45,28,35,25,37,47,32,51,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,58,51,32,46,60,45,56,56],
[13,0,34,42,26,31,50,16,26,43],
[22,46,0,38,37,37,48,21,38,43],
[29,38,42,0,30,37,51,22,38,36],
[48,54,43,50,0,41,64,36,47,47],
[34,49,43,43,39,0,55,37,46,48],
[20,30,32,29,16,25,0,16,34,28],
[35,64,59,58,44,43,64,0,48,54],
[24,54,42,42,33,34,46,32,0,39],
[24,37,37,44,33,32,52,26,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,34,36,48,34,43,41,49,42],
[41,0,36,36,52,33,41,39,44,32],
[46,44,0,44,47,40,45,43,47,40],
[44,44,36,0,51,38,39,42,48,47],
[32,28,33,29,0,34,35,32,37,33],
[46,47,40,42,46,0,46,40,47,43],
[37,39,35,41,45,34,0,31,43,35],
[39,41,37,38,48,40,49,0,48,46],
[31,36,33,32,43,33,37,32,0,29],
[38,48,40,33,47,37,45,34,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,37,43,48,34,42,40,53,38],
[43,0,42,48,45,35,47,42,42,46],
[43,38,0,45,45,42,38,46,50,42],
[37,32,35,0,47,35,39,39,45,39],
[32,35,35,33,0,40,41,42,35,40],
[46,45,38,45,40,0,39,50,54,42],
[38,33,42,41,39,41,0,39,40,41],
[40,38,34,41,38,30,41,0,45,31],
[27,38,30,35,45,26,40,35,0,37],
[42,34,38,41,40,38,39,49,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,44,36,39,45,38,35,39,36],
[44,0,48,43,45,47,41,44,43,40],
[36,32,0,31,38,46,37,36,36,37],
[44,37,49,0,48,48,38,48,45,48],
[41,35,42,32,0,45,36,38,42,37],
[35,33,34,32,35,0,28,30,36,35],
[42,39,43,42,44,52,0,43,42,47],
[45,36,44,32,42,50,37,0,45,47],
[41,37,44,35,38,44,38,35,0,40],
[44,40,43,32,43,45,33,33,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,47,42,41,47,45,37,41,41],
[43,0,46,43,40,47,39,37,27,41],
[33,34,0,39,39,39,40,36,29,37],
[38,37,41,0,41,47,49,41,36,42],
[39,40,41,39,0,47,44,40,36,37],
[33,33,41,33,33,0,37,36,30,37],
[35,41,40,31,36,43,0,33,35,37],
[43,43,44,39,40,44,47,0,37,51],
[39,53,51,44,44,50,45,43,0,46],
[39,39,43,38,43,43,43,29,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,44,37,42,41,36,45,38,44],
[45,0,42,40,43,39,40,49,41,38],
[36,38,0,34,39,37,37,44,37,39],
[43,40,46,0,46,36,41,45,40,42],
[38,37,41,34,0,39,39,46,43,39],
[39,41,43,44,41,0,36,49,36,46],
[44,40,43,39,41,44,0,49,40,42],
[35,31,36,35,34,31,31,0,35,43],
[42,39,43,40,37,44,40,45,0,41],
[36,42,41,38,41,34,38,37,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,43,39,44,33,41,36,41,49],
[34,0,36,32,41,38,40,41,42,33],
[37,44,0,46,50,36,36,44,40,49],
[41,48,34,0,44,28,40,29,47,35],
[36,39,30,36,0,34,37,41,34,43],
[47,42,44,52,46,0,35,41,41,36],
[39,40,44,40,43,45,0,50,37,33],
[44,39,36,51,39,39,30,0,42,40],
[39,38,40,33,46,39,43,38,0,35],
[31,47,31,45,37,44,47,40,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,41,42,35,41,41,35,43,44],
[42,0,43,44,40,40,40,40,40,41],
[39,37,0,44,46,41,47,30,38,41],
[38,36,36,0,36,43,38,26,36,39],
[45,40,34,44,0,39,38,36,39,39],
[39,40,39,37,41,0,43,38,39,38],
[39,40,33,42,42,37,0,37,37,43],
[45,40,50,54,44,42,43,0,48,46],
[37,40,42,44,41,41,43,32,0,40],
[36,39,39,41,41,42,37,34,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,44,43,43,35,44,43,30,44],
[36,0,48,31,30,41,30,42,31,33],
[36,32,0,38,41,39,37,30,30,38],
[37,49,42,0,48,35,44,51,35,42],
[37,50,39,32,0,45,40,42,24,39],
[45,39,41,45,35,0,38,45,43,41],
[36,50,43,36,40,42,0,50,29,37],
[37,38,50,29,38,35,30,0,28,43],
[50,49,50,45,56,37,51,52,0,59],
[36,47,42,38,41,39,43,37,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,42,44,37,50,49,42,43,32],
[45,0,47,42,41,49,52,45,39,37],
[38,33,0,36,36,38,47,42,34,35],
[36,38,44,0,28,41,46,43,34,38],
[43,39,44,52,0,45,57,54,40,46],
[30,31,42,39,35,0,36,29,31,33],
[31,28,33,34,23,44,0,40,33,35],
[38,35,38,37,26,51,40,0,38,32],
[37,41,46,46,40,49,47,42,0,41],
[48,43,45,42,34,47,45,48,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,54,48,54,47,47,52,48,40],
[33,0,33,35,38,38,33,34,33,30],
[26,47,0,39,44,38,41,45,32,35],
[32,45,41,0,47,44,38,44,33,31],
[26,42,36,33,0,38,37,46,35,32],
[33,42,42,36,42,0,39,40,36,33],
[33,47,39,42,43,41,0,41,35,33],
[28,46,35,36,34,40,39,0,37,36],
[32,47,48,47,45,44,45,43,0,36],
[40,50,45,49,48,47,47,44,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,44,42,32,43,44,35,41,38],
[23,0,41,35,38,37,32,38,43,33],
[36,39,0,42,38,41,40,48,42,44],
[38,45,38,0,43,47,53,40,46,33],
[48,42,42,37,0,45,46,36,42,28],
[37,43,39,33,35,0,40,47,40,43],
[36,48,40,27,34,40,0,37,40,36],
[45,42,32,40,44,33,43,0,42,39],
[39,37,38,34,38,40,40,38,0,31],
[42,47,36,47,52,37,44,41,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,40,37,44,44,39,43,42,41],
[40,0,35,35,40,46,45,40,44,40],
[40,45,0,43,48,47,39,45,50,47],
[43,45,37,0,45,50,43,35,45,39],
[36,40,32,35,0,44,39,39,42,39],
[36,34,33,30,36,0,35,40,46,36],
[41,35,41,37,41,45,0,46,45,36],
[37,40,35,45,41,40,34,0,46,38],
[38,36,30,35,38,34,35,34,0,38],
[39,40,33,41,41,44,44,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,25,43,36,52,30,43,31,46],
[42,0,42,42,46,45,37,53,43,39],
[55,38,0,58,43,52,48,47,39,54],
[37,38,22,0,36,54,33,34,39,47],
[44,34,37,44,0,52,41,33,44,50],
[28,35,28,26,28,0,27,32,32,37],
[50,43,32,47,39,53,0,40,44,63],
[37,27,33,46,47,48,40,0,32,50],
[49,37,41,41,36,48,36,48,0,52],
[34,41,26,33,30,43,17,30,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,16,0,47,16,16,0,16,16],
[80,0,16,49,47,16,49,47,49,16],
[64,64,0,33,80,33,80,31,49,49],
[80,31,47,0,47,47,47,47,80,47],
[33,33,0,33,0,33,33,0,33,33],
[64,64,47,33,47,0,80,31,80,49],
[64,31,0,33,47,0,0,31,49,16],
[80,33,49,33,80,49,49,0,49,49],
[64,31,31,0,47,0,31,31,0,0],
[64,64,31,33,47,31,64,31,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,34,28,27,30,40,40,39,34],
[39,0,36,44,37,32,42,37,35,35],
[46,44,0,46,45,44,45,42,37,43],
[52,36,34,0,42,35,50,41,49,42],
[53,43,35,38,0,31,52,42,48,44],
[50,48,36,45,49,0,46,43,44,41],
[40,38,35,30,28,34,0,40,39,37],
[40,43,38,39,38,37,40,0,44,43],
[41,45,43,31,32,36,41,36,0,30],
[46,45,37,38,36,39,43,37,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,36,24,39,53,33,15,24,43],
[56,0,47,54,70,55,47,47,30,67],
[44,33,0,41,49,42,32,27,27,47],
[56,26,39,0,63,58,38,32,39,53],
[41,10,31,17,0,43,20,13,20,58],
[27,25,38,22,37,0,21,27,10,57],
[47,33,48,42,60,59,0,32,36,56],
[65,33,53,48,67,53,48,0,41,55],
[56,50,53,41,60,70,44,39,0,58],
[37,13,33,27,22,23,24,25,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,32,42,34,32,34,36,38,35],
[45,0,38,35,30,42,47,44,41,41],
[48,42,0,49,25,36,46,39,34,49],
[38,45,31,0,30,34,39,42,30,37],
[46,50,55,50,0,40,44,41,39,54],
[48,38,44,46,40,0,46,32,37,47],
[46,33,34,41,36,34,0,36,39,41],
[44,36,41,38,39,48,44,0,36,47],
[42,39,46,50,41,43,41,44,0,44],
[45,39,31,43,26,33,39,33,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,43,41,42,44,40,45,48,36],
[43,0,47,38,47,42,46,54,49,46],
[37,33,0,35,45,40,46,39,39,36],
[39,42,45,0,41,40,49,49,48,38],
[38,33,35,39,0,40,38,47,40,38],
[36,38,40,40,40,0,42,41,47,40],
[40,34,34,31,42,38,0,37,43,38],
[35,26,41,31,33,39,43,0,39,37],
[32,31,41,32,40,33,37,41,0,37],
[44,34,44,42,42,40,42,43,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,36,42,51,43,36,33,44,36],
[42,0,38,44,49,33,38,42,43,40],
[44,42,0,41,52,43,41,41,44,40],
[38,36,39,0,44,40,34,41,42,43],
[29,31,28,36,0,38,29,27,32,33],
[37,47,37,40,42,0,42,42,47,39],
[44,42,39,46,51,38,0,41,48,46],
[47,38,39,39,53,38,39,0,38,39],
[36,37,36,38,48,33,32,42,0,39],
[44,40,40,37,47,41,34,41,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,28,42,33,26,54,36,37,45],
[33,0,30,31,25,31,32,25,30,38],
[52,50,0,40,45,42,51,49,43,48],
[38,49,40,0,31,32,43,32,41,44],
[47,55,35,49,0,32,52,37,31,48],
[54,49,38,48,48,0,57,47,38,46],
[26,48,29,37,28,23,0,34,31,48],
[44,55,31,48,43,33,46,0,44,53],
[43,50,37,39,49,42,49,36,0,39],
[35,42,32,36,32,34,32,27,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,45,38,37,42,34,39,39,33],
[41,0,35,34,37,35,34,38,38,28],
[35,45,0,36,42,42,42,39,39,35],
[42,46,44,0,39,43,47,44,39,36],
[43,43,38,41,0,44,44,42,38,40],
[38,45,38,37,36,0,46,42,39,42],
[46,46,38,33,36,34,0,39,42,40],
[41,42,41,36,38,38,41,0,36,34],
[41,42,41,41,42,41,38,44,0,37],
[47,52,45,44,40,38,40,46,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,34,34,34,35,42,43,40,32],
[43,0,44,42,38,37,37,48,42,34],
[46,36,0,31,35,31,40,39,36,33],
[46,38,49,0,38,42,45,53,40,33],
[46,42,45,42,0,42,46,47,34,35],
[45,43,49,38,38,0,52,53,40,43],
[38,43,40,35,34,28,0,42,36,36],
[37,32,41,27,33,27,38,0,34,30],
[40,38,44,40,46,40,44,46,0,39],
[48,46,47,47,45,37,44,50,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,37,39,33,32,41,42,41,47],
[35,0,31,42,33,29,31,46,34,41],
[43,49,0,47,38,43,42,45,47,47],
[41,38,33,0,35,38,23,46,41,44],
[47,47,42,45,0,36,37,41,46,45],
[48,51,37,42,44,0,40,45,47,46],
[39,49,38,57,43,40,0,52,46,46],
[38,34,35,34,39,35,28,0,39,35],
[39,46,33,39,34,33,34,41,0,43],
[33,39,33,36,35,34,34,45,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,35,40,32,41,40,36,45,32],
[36,0,40,40,28,40,29,39,37,31],
[45,40,0,45,41,42,34,38,42,40],
[40,40,35,0,31,43,36,39,34,32],
[48,52,39,49,0,48,43,49,44,44],
[39,40,38,37,32,0,31,37,40,38],
[40,51,46,44,37,49,0,35,37,40],
[44,41,42,41,31,43,45,0,39,39],
[35,43,38,46,36,40,43,41,0,38],
[48,49,40,48,36,42,40,41,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,36,45,26,36,44,42,45,34],
[39,0,35,37,30,39,56,47,36,39],
[44,45,0,32,27,32,50,45,28,39],
[35,43,48,0,37,34,46,50,38,38],
[54,50,53,43,0,39,61,59,45,42],
[44,41,48,46,41,0,64,52,39,50],
[36,24,30,34,19,16,0,38,24,34],
[38,33,35,30,21,28,42,0,23,34],
[35,44,52,42,35,41,56,57,0,41],
[46,41,41,42,38,30,46,46,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,43,37,38,38,59,7,29,38],
[35,0,57,43,57,54,68,35,43,46],
[37,23,0,47,42,41,63,17,33,51],
[43,37,33,0,42,52,64,33,40,49],
[42,23,38,38,0,48,54,34,32,44],
[42,26,39,28,32,0,52,31,18,37],
[21,12,17,16,26,28,0,9,16,31],
[73,45,63,47,46,49,71,0,28,61],
[51,37,47,40,48,62,64,52,0,65],
[42,34,29,31,36,43,49,19,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,37,34,35,33,40,36,35,50],
[46,0,38,40,36,32,54,32,46,49],
[43,42,0,44,34,42,54,37,43,52],
[46,40,36,0,37,38,47,42,44,53],
[45,44,46,43,0,40,58,45,38,57],
[47,48,38,42,40,0,57,43,42,54],
[40,26,26,33,22,23,0,30,37,45],
[44,48,43,38,35,37,50,0,48,57],
[45,34,37,36,42,38,43,32,0,43],
[30,31,28,27,23,26,35,23,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,33,39,43,34,45,36,42,47],
[42,0,39,36,48,37,44,43,45,41],
[47,41,0,42,46,40,48,45,40,41],
[41,44,38,0,49,42,45,44,46,44],
[37,32,34,31,0,38,36,34,37,38],
[46,43,40,38,42,0,46,42,47,49],
[35,36,32,35,44,34,0,40,43,42],
[44,37,35,36,46,38,40,0,48,40],
[38,35,40,34,43,33,37,32,0,38],
[33,39,39,36,42,31,38,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,37,42,46,42,41,45,43,39],
[38,0,34,44,34,41,40,33,42,37],
[43,46,0,42,43,46,44,39,50,44],
[38,36,38,0,38,35,35,37,39,42],
[34,46,37,42,0,37,44,42,45,40],
[38,39,34,45,43,0,42,38,42,38],
[39,40,36,45,36,38,0,43,38,40],
[35,47,41,43,38,42,37,0,41,42],
[37,38,30,41,35,38,42,39,0,37],
[41,43,36,38,40,42,40,38,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,37,34,35,41,40,42,32,46],
[34,0,38,38,41,37,31,42,31,47],
[43,42,0,33,41,45,33,42,45,36],
[46,42,47,0,35,40,37,35,31,47],
[45,39,39,45,0,37,37,28,36,47],
[39,43,35,40,43,0,40,32,30,49],
[40,49,47,43,43,40,0,36,42,44],
[38,38,38,45,52,48,44,0,32,47],
[48,49,35,49,44,50,38,48,0,45],
[34,33,44,33,33,31,36,33,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,37,43,28,30,35,31,50,21],
[50,0,37,45,32,36,41,30,51,32],
[43,43,0,49,30,38,42,36,41,43],
[37,35,31,0,26,17,30,19,39,28],
[52,48,50,54,0,41,49,34,55,43],
[50,44,42,63,39,0,39,48,49,38],
[45,39,38,50,31,41,0,25,47,32],
[49,50,44,61,46,32,55,0,49,40],
[30,29,39,41,25,31,33,31,0,30],
[59,48,37,52,37,42,48,40,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,49,51,48,36,42,45,43,39],
[34,0,34,45,42,30,36,34,46,46],
[31,46,0,40,40,41,41,38,43,42],
[29,35,40,0,44,34,34,42,40,44],
[32,38,40,36,0,30,29,36,38,41],
[44,50,39,46,50,0,43,40,42,49],
[38,44,39,46,51,37,0,36,42,37],
[35,46,42,38,44,40,44,0,37,46],
[37,34,37,40,42,38,38,43,0,40],
[41,34,38,36,39,31,43,34,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,31,42,21,41,63,45,44,32],
[56,0,25,49,46,58,56,71,56,56],
[49,55,0,51,62,56,65,53,49,39],
[38,31,29,0,36,50,47,53,62,14],
[59,34,18,44,0,67,65,50,59,50],
[39,22,24,30,13,0,31,14,45,13],
[17,24,15,33,15,49,0,39,33,26],
[35,9,27,27,30,66,41,0,48,23],
[36,24,31,18,21,35,47,32,0,18],
[48,24,41,66,30,67,54,57,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,45,40,41,44,38,43,42,46],
[33,0,39,30,40,33,34,38,38,32],
[35,41,0,29,40,33,35,39,37,32],
[40,50,51,0,44,40,44,42,42,51],
[39,40,40,36,0,37,38,39,37,39],
[36,47,47,40,43,0,43,41,45,45],
[42,46,45,36,42,37,0,44,45,43],
[37,42,41,38,41,39,36,0,37,42],
[38,42,43,38,43,35,35,43,0,44],
[34,48,48,29,41,35,37,38,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,43,38,36,35,41,42,32,42],
[31,0,31,39,32,34,43,39,32,38],
[37,49,0,39,27,38,37,44,32,49],
[42,41,41,0,42,40,36,37,35,49],
[44,48,53,38,0,47,45,46,41,48],
[45,46,42,40,33,0,45,37,39,44],
[39,37,43,44,35,35,0,35,38,45],
[38,41,36,43,34,43,45,0,30,43],
[48,48,48,45,39,41,42,50,0,48],
[38,42,31,31,32,36,35,37,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,50,43,46,44,47,48,50,50],
[41,0,39,42,40,41,41,45,44,36],
[30,41,0,39,37,34,43,44,37,40],
[37,38,41,0,43,34,38,46,41,41],
[34,40,43,37,0,37,39,40,39,38],
[36,39,46,46,43,0,41,39,43,43],
[33,39,37,42,41,39,0,38,36,35],
[32,35,36,34,40,41,42,0,50,39],
[30,36,43,39,41,37,44,30,0,29],
[30,44,40,39,42,37,45,41,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,49,33,44,40,43,42,34,42],
[39,0,45,43,44,42,55,43,45,40],
[31,35,0,23,26,40,41,23,19,29],
[47,37,57,0,38,52,41,34,36,44],
[36,36,54,42,0,39,42,36,38,44],
[40,38,40,28,41,0,45,38,31,37],
[37,25,39,39,38,35,0,29,23,34],
[38,37,57,46,44,42,51,0,40,43],
[46,35,61,44,42,49,57,40,0,40],
[38,40,51,36,36,43,46,37,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,47,38,34,39,36,43,39,49],
[45,0,51,45,38,48,44,51,44,48],
[33,29,0,36,27,29,37,36,37,41],
[42,35,44,0,35,39,33,38,38,42],
[46,42,53,45,0,38,43,47,40,50],
[41,32,51,41,42,0,42,41,46,48],
[44,36,43,47,37,38,0,43,41,46],
[37,29,44,42,33,39,37,0,39,47],
[41,36,43,42,40,34,39,41,0,47],
[31,32,39,38,30,32,34,33,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,45,39,44,54,33,50,46,50],
[28,0,37,30,34,32,39,32,35,59],
[35,43,0,36,45,42,35,44,38,48],
[41,50,44,0,42,49,45,48,37,61],
[36,46,35,38,0,44,39,38,44,52],
[26,48,38,31,36,0,21,32,39,42],
[47,41,45,35,41,59,0,40,49,59],
[30,48,36,32,42,48,40,0,35,58],
[34,45,42,43,36,41,31,45,0,51],
[30,21,32,19,28,38,21,22,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,44,58,36,48,40,42,48,30],
[43,0,46,57,53,48,31,51,42,31],
[36,34,0,51,45,29,37,41,42,33],
[22,23,29,0,25,21,24,24,35,37],
[44,27,35,55,0,48,36,40,39,41],
[32,32,51,59,32,0,38,55,37,40],
[40,49,43,56,44,42,0,36,48,43],
[38,29,39,56,40,25,44,0,31,43],
[32,38,38,45,41,43,32,49,0,41],
[50,49,47,43,39,40,37,37,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,45,38,45,41,43,40,39,41],
[41,0,43,43,42,43,46,34,38,43],
[35,37,0,35,39,34,41,32,37,36],
[42,37,45,0,43,45,35,36,39,42],
[35,38,41,37,0,37,42,42,42,37],
[39,37,46,35,43,0,40,41,39,39],
[37,34,39,45,38,40,0,36,34,41],
[40,46,48,44,38,39,44,0,40,50],
[41,42,43,41,38,41,46,40,0,43],
[39,37,44,38,43,41,39,30,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,42,35,42,39,41,48,44,43],
[37,0,42,31,47,30,39,43,37,37],
[38,38,0,34,44,33,30,40,45,36],
[45,49,46,0,50,39,44,49,55,52],
[38,33,36,30,0,37,41,38,41,35],
[41,50,47,41,43,0,41,39,47,41],
[39,41,50,36,39,39,0,37,53,40],
[32,37,40,31,42,41,43,0,40,46],
[36,43,35,25,39,33,27,40,0,29],
[37,43,44,28,45,39,40,34,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,46,48,32,49,46,58,48,35],
[26,0,40,28,31,22,33,33,38,19],
[34,40,0,34,31,34,35,39,45,41],
[32,52,46,0,36,52,43,52,39,45],
[48,49,49,44,0,49,34,52,49,49],
[31,58,46,28,31,0,35,32,28,45],
[34,47,45,37,46,45,0,57,48,34],
[22,47,41,28,28,48,23,0,37,41],
[32,42,35,41,31,52,32,43,0,34],
[45,61,39,35,31,35,46,39,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,46,41,45,45,40,48,37,51],
[34,0,38,40,42,29,43,38,37,38],
[34,42,0,45,46,38,46,42,33,44],
[39,40,35,0,38,46,39,37,33,41],
[35,38,34,42,0,38,39,42,35,35],
[35,51,42,34,42,0,42,48,38,42],
[40,37,34,41,41,38,0,43,34,37],
[32,42,38,43,38,32,37,0,41,37],
[43,43,47,47,45,42,46,39,0,37],
[29,42,36,39,45,38,43,43,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,49,40,47,53,37,45,57,34],
[54,0,47,25,27,49,45,52,68,31],
[31,33,0,49,37,45,38,40,64,22],
[40,55,31,0,27,51,56,62,62,34],
[33,53,43,53,0,49,62,65,65,36],
[27,31,35,29,31,0,26,42,51,21],
[43,35,42,24,18,54,0,50,54,52],
[35,28,40,18,15,38,30,0,38,23],
[23,12,16,18,15,29,26,42,0,23],
[46,49,58,46,44,59,28,57,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,53,40,49,23,44,72,72,42],
[31,0,13,33,46,46,37,46,37,20],
[27,67,0,33,75,33,59,33,33,34],
[40,47,47,0,80,47,59,33,58,29],
[31,34,5,0,0,34,24,23,23,20],
[57,34,47,33,46,0,56,56,56,53],
[36,43,21,21,56,24,0,35,35,36],
[8,34,47,47,57,24,45,0,56,27],
[8,43,47,22,57,24,45,24,0,29],
[38,60,46,51,60,27,44,53,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,31,57,32,41,32,14,71,36],
[25,0,22,45,22,31,31,10,52,30],
[49,58,0,53,28,36,40,43,50,55],
[23,35,27,0,29,35,17,17,35,31],
[48,58,52,51,0,61,48,34,63,49],
[39,49,44,45,19,0,43,32,39,47],
[48,49,40,63,32,37,0,39,41,56],
[66,70,37,63,46,48,41,0,66,58],
[9,28,30,45,17,41,39,14,0,33],
[44,50,25,49,31,33,24,22,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,57,38,41,64,57,35,51,31],
[35,0,48,43,48,64,43,43,54,42],
[23,32,0,51,51,55,53,34,56,39],
[42,37,29,0,50,60,48,53,34,40],
[39,32,29,30,0,51,53,24,58,24],
[16,16,25,20,29,0,43,14,35,14],
[23,37,27,32,27,37,0,35,21,21],
[45,37,46,27,56,66,45,0,42,40],
[29,26,24,46,22,45,59,38,0,40],
[49,38,41,40,56,66,59,40,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,44,44,43,45,45,54,38,35],
[51,0,38,55,32,39,42,55,33,25],
[36,42,0,55,42,48,43,49,35,34],
[36,25,25,0,26,26,39,48,31,22],
[37,48,38,54,0,40,53,60,39,34],
[35,41,32,54,40,0,35,54,52,41],
[35,38,37,41,27,45,0,57,38,47],
[26,25,31,32,20,26,23,0,21,8],
[42,47,45,49,41,28,42,59,0,39],
[45,55,46,58,46,39,33,72,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,37,39,34,37,40,45,35,35],
[45,0,34,47,38,47,43,41,49,34],
[43,46,0,51,40,45,51,41,45,43],
[41,33,29,0,27,42,43,34,31,33],
[46,42,40,53,0,46,47,48,48,36],
[43,33,35,38,34,0,44,30,40,35],
[40,37,29,37,33,36,0,44,38,31],
[35,39,39,46,32,50,36,0,38,38],
[45,31,35,49,32,40,42,42,0,31],
[45,46,37,47,44,45,49,42,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,80,60,80,23,57,80,68,68],
[20,0,80,37,55,43,32,80,43,45],
[0,0,0,37,12,0,32,12,0,25],
[20,43,43,0,43,43,20,43,43,68],
[0,25,68,37,0,0,32,80,43,25],
[57,37,80,37,80,0,57,80,68,45],
[23,48,48,60,48,23,0,60,48,48],
[0,0,68,37,0,0,20,0,23,25],
[12,37,80,37,37,12,32,57,0,25],
[12,35,55,12,55,35,32,55,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,36,54,34,48,46,39,42,48],
[33,0,26,41,33,35,50,37,36,32],
[44,54,0,38,45,37,59,46,41,39],
[26,39,42,0,33,38,38,37,40,42],
[46,47,35,47,0,46,47,53,43,40],
[32,45,43,42,34,0,46,37,33,43],
[34,30,21,42,33,34,0,32,33,34],
[41,43,34,43,27,43,48,0,43,37],
[38,44,39,40,37,47,47,37,0,43],
[32,48,41,38,40,37,46,43,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,34,36,42,35,45,38,46,38],
[33,0,37,35,48,37,41,36,45,39],
[46,43,0,33,51,38,48,38,52,46],
[44,45,47,0,42,39,42,48,46,41],
[38,32,29,38,0,31,38,37,36,40],
[45,43,42,41,49,0,43,46,53,39],
[35,39,32,38,42,37,0,45,41,43],
[42,44,42,32,43,34,35,0,50,42],
[34,35,28,34,44,27,39,30,0,37],
[42,41,34,39,40,41,37,38,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,39,42,38,44,43,43,42,41],
[36,0,33,29,34,31,38,36,37,30],
[41,47,0,37,37,39,50,44,44,38],
[38,51,43,0,42,44,44,42,42,39],
[42,46,43,38,0,35,46,42,38,35],
[36,49,41,36,45,0,42,45,43,40],
[37,42,30,36,34,38,0,32,39,31],
[37,44,36,38,38,35,48,0,40,35],
[38,43,36,38,42,37,41,40,0,37],
[39,50,42,41,45,40,49,45,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,45,38,51,49,46,44,45,37],
[29,0,35,40,41,38,34,37,35,42],
[35,45,0,39,55,39,35,41,37,46],
[42,40,41,0,51,45,42,36,40,39],
[29,39,25,29,0,40,35,35,28,33],
[31,42,41,35,40,0,38,37,45,38],
[34,46,45,38,45,42,0,40,41,45],
[36,43,39,44,45,43,40,0,29,35],
[35,45,43,40,52,35,39,51,0,41],
[43,38,34,41,47,42,35,45,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,41,37,38,32,38,40,26,30],
[38,0,55,45,43,39,34,42,38,38],
[39,25,0,25,35,25,31,31,29,38],
[43,35,55,0,49,30,38,45,34,39],
[42,37,45,31,0,33,40,41,38,42],
[48,41,55,50,47,0,48,50,40,49],
[42,46,49,42,40,32,0,51,34,49],
[40,38,49,35,39,30,29,0,28,41],
[54,42,51,46,42,40,46,52,0,44],
[50,42,42,41,38,31,31,39,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,44,36,36,40,36,40,39,34],
[39,0,48,53,37,42,41,37,43,40],
[36,32,0,35,38,34,32,31,34,35],
[44,27,45,0,39,34,36,35,37,37],
[44,43,42,41,0,39,44,46,43,37],
[40,38,46,46,41,0,38,44,44,35],
[44,39,48,44,36,42,0,42,45,36],
[40,43,49,45,34,36,38,0,43,36],
[41,37,46,43,37,36,35,37,0,33],
[46,40,45,43,43,45,44,44,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,40,42,41,47,42,40,32,53],
[39,0,38,38,41,45,35,45,41,45],
[40,42,0,31,33,46,32,37,33,44],
[38,42,49,0,45,46,41,33,39,40],
[39,39,47,35,0,41,43,39,36,46],
[33,35,34,34,39,0,32,33,27,34],
[38,45,48,39,37,48,0,35,42,51],
[40,35,43,47,41,47,45,0,46,46],
[48,39,47,41,44,53,38,34,0,42],
[27,35,36,40,34,46,29,34,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,40,45,41,38,32,45,41,37],
[36,0,41,44,40,38,40,38,33,39],
[40,39,0,47,38,40,36,42,40,38],
[35,36,33,0,35,34,41,39,34,35],
[39,40,42,45,0,39,39,41,36,43],
[42,42,40,46,41,0,37,44,40,45],
[48,40,44,39,41,43,0,42,40,44],
[35,42,38,41,39,36,38,0,34,42],
[39,47,40,46,44,40,40,46,0,45],
[43,41,42,45,37,35,36,38,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,48,53,50,49,47,40,39,52],
[25,0,39,47,30,34,33,37,29,40],
[32,41,0,41,40,43,39,42,28,36],
[27,33,39,0,37,40,41,31,34,34],
[30,50,40,43,0,47,46,43,39,44],
[31,46,37,40,33,0,29,34,25,37],
[33,47,41,39,34,51,0,39,39,40],
[40,43,38,49,37,46,41,0,41,35],
[41,51,52,46,41,55,41,39,0,47],
[28,40,44,46,36,43,40,45,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,41,45,37,50,44,40,44,52],
[38,0,35,47,33,49,37,25,39,49],
[39,45,0,42,36,37,37,33,44,45],
[35,33,38,0,33,31,31,32,30,33],
[43,47,44,47,0,46,42,37,49,55],
[30,31,43,49,34,0,38,33,47,46],
[36,43,43,49,38,42,0,39,52,43],
[40,55,47,48,43,47,41,0,50,53],
[36,41,36,50,31,33,28,30,0,39],
[28,31,35,47,25,34,37,27,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,32,54,37,34,32,42,42,46],
[37,0,40,42,36,31,33,37,47,40],
[48,40,0,48,40,35,31,43,52,47],
[26,38,32,0,28,31,30,34,34,41],
[43,44,40,52,0,39,38,45,45,44],
[46,49,45,49,41,0,34,43,50,57],
[48,47,49,50,42,46,0,40,50,56],
[38,43,37,46,35,37,40,0,44,42],
[38,33,28,46,35,30,30,36,0,45],
[34,40,33,39,36,23,24,38,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,34,35,38,38,32,38,39,35],
[39,0,32,35,40,38,37,40,45,38],
[46,48,0,36,48,40,35,42,45,36],
[45,45,44,0,49,37,40,45,45,40],
[42,40,32,31,0,33,24,30,32,30],
[42,42,40,43,47,0,32,42,39,40],
[48,43,45,40,56,48,0,44,45,43],
[42,40,38,35,50,38,36,0,43,36],
[41,35,35,35,48,41,35,37,0,36],
[45,42,44,40,50,40,37,44,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,27,34,29,42,17,46,36,22],
[47,0,38,49,34,32,37,25,51,40],
[53,42,0,44,34,45,41,49,48,35],
[46,31,36,0,23,41,41,44,48,44],
[51,46,46,57,0,36,48,31,68,44],
[38,48,35,39,44,0,41,58,59,32],
[63,43,39,39,32,39,0,45,67,38],
[34,55,31,36,49,22,35,0,43,30],
[44,29,32,32,12,21,13,37,0,28],
[58,40,45,36,36,48,42,50,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,39,28,34,41,38,40,43,38],
[30,0,22,23,31,32,27,23,29,29],
[41,58,0,48,31,57,42,57,47,46],
[52,57,32,0,45,51,39,40,51,45],
[46,49,49,35,0,48,47,48,47,41],
[39,48,23,29,32,0,22,29,43,26],
[42,53,38,41,33,58,0,36,52,42],
[40,57,23,40,32,51,44,0,48,47],
[37,51,33,29,33,37,28,32,0,35],
[42,51,34,35,39,54,38,33,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,49,52,43,36,54,41,37,41],
[40,0,34,47,34,40,49,52,34,49],
[31,46,0,47,43,41,48,52,26,48],
[28,33,33,0,40,32,36,42,27,32],
[37,46,37,40,0,31,41,32,41,36],
[44,40,39,48,49,0,48,46,28,53],
[26,31,32,44,39,32,0,40,26,38],
[39,28,28,38,48,34,40,0,26,46],
[43,46,54,53,39,52,54,54,0,51],
[39,31,32,48,44,27,42,34,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,35,48,41,41,36,39,52,52],
[53,0,67,44,60,53,35,48,58,57],
[45,13,0,33,33,37,24,31,40,33],
[32,36,47,0,51,45,36,40,49,51],
[39,20,47,29,0,46,41,47,42,44],
[39,27,43,35,34,0,22,42,38,45],
[44,45,56,44,39,58,0,45,54,48],
[41,32,49,40,33,38,35,0,38,51],
[28,22,40,31,38,42,26,42,0,35],
[28,23,47,29,36,35,32,29,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,40,29,41,33,30,29,40,45],
[46,0,47,47,44,43,37,40,44,46],
[40,33,0,34,34,33,30,33,39,37],
[51,33,46,0,45,37,42,43,43,52],
[39,36,46,35,0,42,36,33,40,41],
[47,37,47,43,38,0,38,43,49,46],
[50,43,50,38,44,42,0,39,45,54],
[51,40,47,37,47,37,41,0,45,51],
[40,36,41,37,40,31,35,35,0,44],
[35,34,43,28,39,34,26,29,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,22,31,8,32,24,42,15,24],
[68,0,42,49,33,47,43,56,35,40],
[58,38,0,32,43,42,53,55,49,49],
[49,31,48,0,41,39,46,55,34,41],
[72,47,37,39,0,56,58,60,46,59],
[48,33,38,41,24,0,31,46,30,26],
[56,37,27,34,22,49,0,49,26,26],
[38,24,25,25,20,34,31,0,27,36],
[65,45,31,46,34,50,54,53,0,44],
[56,40,31,39,21,54,54,44,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,68,58,61,50,52,69,25,32],
[26,0,28,18,39,41,21,41,26,28],
[12,52,0,57,47,43,36,48,25,40],
[22,62,23,0,63,45,48,55,29,40],
[19,41,33,17,0,45,26,23,19,44],
[30,39,37,35,35,0,35,32,25,40],
[28,59,44,32,54,45,0,58,32,37],
[11,39,32,25,57,48,22,0,26,21],
[55,54,55,51,61,55,48,54,0,25],
[48,52,40,40,36,40,43,59,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,41,43,43,46,38,47,36,47],
[20,0,28,31,26,34,26,29,23,35],
[39,52,0,53,39,41,35,48,49,43],
[37,49,27,0,26,42,31,37,45,37],
[37,54,41,54,0,39,31,41,42,44],
[34,46,39,38,41,0,35,47,36,38],
[42,54,45,49,49,45,0,37,50,46],
[33,51,32,43,39,33,43,0,44,48],
[44,57,31,35,38,44,30,36,0,47],
[33,45,37,43,36,42,34,32,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,39,36,49,49,43,42,35,41],
[49,0,46,46,62,53,52,45,40,40],
[41,34,0,44,55,56,47,38,33,37],
[44,34,36,0,58,48,46,45,29,51],
[31,18,25,22,0,48,27,26,18,24],
[31,27,24,32,32,0,31,24,25,31],
[37,28,33,34,53,49,0,35,27,41],
[38,35,42,35,54,56,45,0,29,31],
[45,40,47,51,62,55,53,51,0,50],
[39,40,43,29,56,49,39,49,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,27,38,32,35,33,26,36,23],
[50,0,36,49,45,47,36,39,35,37],
[53,44,0,52,51,44,39,39,35,34],
[42,31,28,0,37,38,27,29,34,32],
[48,35,29,43,0,31,36,37,45,31],
[45,33,36,42,49,0,35,37,38,35],
[47,44,41,53,44,45,0,40,40,40],
[54,41,41,51,43,43,40,0,41,41],
[44,45,45,46,35,42,40,39,0,38],
[57,43,46,48,49,45,40,39,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,39,36,47,51,39,42,39,44],
[35,0,22,30,30,33,25,37,36,31],
[41,58,0,50,45,62,36,48,27,51],
[44,50,30,0,46,39,35,47,36,51],
[33,50,35,34,0,47,46,35,35,49],
[29,47,18,41,33,0,20,28,23,41],
[41,55,44,45,34,60,0,41,44,51],
[38,43,32,33,45,52,39,0,35,38],
[41,44,53,44,45,57,36,45,0,50],
[36,49,29,29,31,39,29,42,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,38,37,65,43,64,62,40,64],
[26,0,19,24,45,36,60,71,35,68],
[42,61,0,24,54,35,71,53,62,60],
[43,56,56,0,46,37,80,71,72,79],
[15,35,26,34,0,35,46,42,35,60],
[37,44,45,43,45,0,45,55,45,53],
[16,20,9,0,34,35,0,51,25,50],
[18,9,27,9,38,25,29,0,28,18],
[40,45,18,8,45,35,55,52,0,54],
[16,12,20,1,20,27,30,62,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,44,41,35,33,37,36,33,37],
[46,0,43,41,44,41,47,39,41,45],
[36,37,0,38,32,37,34,35,40,36],
[39,39,42,0,33,35,33,40,39,40],
[45,36,48,47,0,36,33,46,33,37],
[47,39,43,45,44,0,41,50,46,45],
[43,33,46,47,47,39,0,36,40,26],
[44,41,45,40,34,30,44,0,37,36],
[47,39,40,41,47,34,40,43,0,37],
[43,35,44,40,43,35,54,44,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,51,35,57,41,52,46,58,57],
[46,0,62,54,49,64,32,47,60,55],
[29,18,0,24,45,35,41,30,42,49],
[45,26,56,0,36,58,26,36,55,50],
[23,31,35,44,0,41,11,31,34,41],
[39,16,45,22,39,0,39,24,49,48],
[28,48,39,54,69,41,0,50,45,40],
[34,33,50,44,49,56,30,0,39,51],
[22,20,38,25,46,31,35,41,0,60],
[23,25,31,30,39,32,40,29,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,39,7,40,23,47,29,28,49],
[34,0,47,34,33,47,39,33,40,49],
[41,33,0,26,47,45,36,37,44,40],
[73,46,54,0,50,48,54,39,45,50],
[40,47,33,30,0,51,53,47,37,37],
[57,33,35,32,29,0,46,47,23,49],
[33,41,44,26,27,34,0,29,36,35],
[51,47,43,41,33,33,51,0,39,45],
[52,40,36,35,43,57,44,41,0,51],
[31,31,40,30,43,31,45,35,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,44,40,38,44,44,41,47,43],
[46,0,45,41,44,51,48,40,49,47],
[36,35,0,34,33,45,40,41,48,32],
[40,39,46,0,34,46,45,35,46,37],
[42,36,47,46,0,42,50,37,47,46],
[36,29,35,34,38,0,40,29,44,33],
[36,32,40,35,30,40,0,37,44,37],
[39,40,39,45,43,51,43,0,49,46],
[33,31,32,34,33,36,36,31,0,39],
[37,33,48,43,34,47,43,34,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,40,40,40,43,40,38,38,40],
[38,0,41,46,45,46,42,41,39,35],
[40,39,0,44,36,44,43,38,37,38],
[40,34,36,0,41,39,42,37,33,36],
[40,35,44,39,0,41,44,39,39,37],
[37,34,36,41,39,0,34,38,38,33],
[40,38,37,38,36,46,0,37,37,35],
[42,39,42,43,41,42,43,0,39,36],
[42,41,43,47,41,42,43,41,0,34],
[40,45,42,44,43,47,45,44,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,42,44,30,41,36,32,29,41],
[42,0,40,40,23,48,50,43,34,34],
[38,40,0,35,34,38,47,41,32,35],
[36,40,45,0,35,39,49,31,32,44],
[50,57,46,45,0,45,47,37,36,46],
[39,32,42,41,35,0,49,29,27,39],
[44,30,33,31,33,31,0,30,34,42],
[48,37,39,49,43,51,50,0,40,54],
[51,46,48,48,44,53,46,40,0,45],
[39,46,45,36,34,41,38,26,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,42,39,34,28,36,42,40,40],
[42,0,41,32,34,33,35,31,32,31],
[38,39,0,41,38,40,44,41,41,36],
[41,48,39,0,38,41,47,47,37,53],
[46,46,42,42,0,38,48,41,44,45],
[52,47,40,39,42,0,39,41,40,40],
[44,45,36,33,32,41,0,38,41,44],
[38,49,39,33,39,39,42,0,45,42],
[40,48,39,43,36,40,39,35,0,39],
[40,49,44,27,35,40,36,38,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,42,50,43,38,38,41,43,36],
[43,0,43,45,42,40,48,39,45,40],
[38,37,0,37,35,36,32,35,39,34],
[30,35,43,0,44,37,30,35,37,35],
[37,38,45,36,0,42,34,40,38,37],
[42,40,44,43,38,0,39,44,52,31],
[42,32,48,50,46,41,0,46,48,40],
[39,41,45,45,40,36,34,0,45,38],
[37,35,41,43,42,28,32,35,0,36],
[44,40,46,45,43,49,40,42,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,32,32,35,33,35,45,38,34],
[52,0,39,40,33,43,33,48,50,34],
[48,41,0,40,38,40,37,43,43,36],
[48,40,40,0,39,46,32,49,44,37],
[45,47,42,41,0,38,43,50,42,39],
[47,37,40,34,42,0,40,49,46,38],
[45,47,43,48,37,40,0,49,42,40],
[35,32,37,31,30,31,31,0,31,30],
[42,30,37,36,38,34,38,49,0,31],
[46,46,44,43,41,42,40,50,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,40,30,37,35,35,27,49,40],
[49,0,49,40,44,40,44,39,53,40],
[40,31,0,33,38,37,40,35,49,42],
[50,40,47,0,46,41,34,36,49,37],
[43,36,42,34,0,43,37,32,44,39],
[45,40,43,39,37,0,36,30,49,37],
[45,36,40,46,43,44,0,41,48,43],
[53,41,45,44,48,50,39,0,54,47],
[31,27,31,31,36,31,32,26,0,37],
[40,40,38,43,41,43,37,33,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,32,37,40,36,33,36,39,38],
[39,0,37,37,36,32,33,29,34,35],
[48,43,0,37,41,43,39,34,37,40],
[43,43,43,0,44,45,41,39,42,42],
[40,44,39,36,0,41,45,41,37,47],
[44,48,37,35,39,0,37,38,39,45],
[47,47,41,39,35,43,0,36,44,50],
[44,51,46,41,39,42,44,0,43,41],
[41,46,43,38,43,41,36,37,0,41],
[42,45,40,38,33,35,30,39,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,57,43,45,38,35,45,42,34],
[39,0,49,43,32,49,37,27,38,39],
[23,31,0,27,16,23,16,29,24,37],
[37,37,53,0,23,36,36,37,37,38],
[35,48,64,57,0,53,37,45,35,42],
[42,31,57,44,27,0,38,44,41,40],
[45,43,64,44,43,42,0,38,39,47],
[35,53,51,43,35,36,42,0,36,48],
[38,42,56,43,45,39,41,44,0,43],
[46,41,43,42,38,40,33,32,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,45,47,55,46,39,51,45,46],
[42,0,40,51,46,37,46,38,39,40],
[35,40,0,39,36,31,36,32,40,44],
[33,29,41,0,30,30,41,34,29,35],
[25,34,44,50,0,23,34,28,27,33],
[34,43,49,50,57,0,41,47,40,44],
[41,34,44,39,46,39,0,36,36,45],
[29,42,48,46,52,33,44,0,41,41],
[35,41,40,51,53,40,44,39,0,42],
[34,40,36,45,47,36,35,39,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,12,29,31,16,33,0,25,34],
[72,0,54,61,72,40,72,48,59,26],
[68,26,0,48,60,28,59,25,30,38],
[51,19,32,0,39,19,40,0,32,34],
[49,8,20,41,0,24,45,25,44,34],
[64,40,52,61,56,0,65,36,48,44],
[47,8,21,40,35,15,0,13,13,25],
[80,32,55,80,55,44,67,0,58,58],
[55,21,50,48,36,32,67,22,0,34],
[46,54,42,46,46,36,55,22,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,36,41,41,34,44,42,32,43],
[31,0,41,37,40,28,34,36,33,34],
[44,39,0,38,43,26,50,46,35,45],
[39,43,42,0,44,36,47,40,27,43],
[39,40,37,36,0,36,40,46,35,43],
[46,52,54,44,44,0,57,48,40,53],
[36,46,30,33,40,23,0,37,31,42],
[38,44,34,40,34,32,43,0,29,38],
[48,47,45,53,45,40,49,51,0,47],
[37,46,35,37,37,27,38,42,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,37,33,36,41,44,35,30,31],
[38,0,34,33,33,45,47,32,36,39],
[43,46,0,38,38,42,45,40,37,43],
[47,47,42,0,37,46,47,45,40,36],
[44,47,42,43,0,50,48,43,35,36],
[39,35,38,34,30,0,39,34,36,32],
[36,33,35,33,32,41,0,35,39,38],
[45,48,40,35,37,46,45,0,37,46],
[50,44,43,40,45,44,41,43,0,38],
[49,41,37,44,44,48,42,34,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,44,39,40,41,45,42,47,46],
[36,0,40,31,43,38,41,40,40,41],
[36,40,0,40,43,40,37,42,50,37],
[41,49,40,0,44,48,46,42,49,42],
[40,37,37,36,0,41,43,41,42,46],
[39,42,40,32,39,0,41,36,49,37],
[35,39,43,34,37,39,0,42,44,41],
[38,40,38,38,39,44,38,0,49,44],
[33,40,30,31,38,31,36,31,0,37],
[34,39,43,38,34,43,39,36,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,39,33,43,41,42,36,41,44],
[39,0,42,44,45,43,45,48,46,43],
[41,38,0,41,40,35,40,46,41,43],
[47,36,39,0,42,40,46,40,43,40],
[37,35,40,38,0,42,41,41,42,38],
[39,37,45,40,38,0,46,41,47,43],
[38,35,40,34,39,34,0,43,41,37],
[44,32,34,40,39,39,37,0,34,38],
[39,34,39,37,38,33,39,46,0,40],
[36,37,37,40,42,37,43,42,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,41,47,51,38,45,24,43,33],
[44,0,41,53,56,41,45,35,46,41],
[39,39,0,35,47,42,33,17,41,32],
[33,27,45,0,50,26,39,38,39,29],
[29,24,33,30,0,36,40,25,26,25],
[42,39,38,54,44,0,38,25,36,43],
[35,35,47,41,40,42,0,38,32,36],
[56,45,63,42,55,55,42,0,53,38],
[37,34,39,41,54,44,48,27,0,28],
[47,39,48,51,55,37,44,42,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,43,54,45,50,48,46,40,43],
[32,0,38,39,38,33,42,37,26,29],
[37,42,0,39,39,40,46,39,39,41],
[26,41,41,0,31,44,35,34,41,31],
[35,42,41,49,0,45,39,35,43,39],
[30,47,40,36,35,0,31,46,27,37],
[32,38,34,45,41,49,0,45,36,40],
[34,43,41,46,45,34,35,0,35,42],
[40,54,41,39,37,53,44,45,0,48],
[37,51,39,49,41,43,40,38,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,44,36,43,41,35,37,44,38],
[36,0,40,27,38,33,28,27,36,34],
[36,40,0,29,34,37,34,27,33,33],
[44,53,51,0,46,40,44,41,46,48],
[37,42,46,34,0,39,44,34,47,40],
[39,47,43,40,41,0,44,39,47,40],
[45,52,46,36,36,36,0,36,44,40],
[43,53,53,39,46,41,44,0,42,40],
[36,44,47,34,33,33,36,38,0,35],
[42,46,47,32,40,40,40,40,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,39,49,48,48,52,40,38,47],
[29,0,33,36,43,34,48,29,32,42],
[41,47,0,56,50,44,50,43,39,50],
[31,44,24,0,42,42,46,38,32,47],
[32,37,30,38,0,30,42,32,35,39],
[32,46,36,38,50,0,48,36,38,44],
[28,32,30,34,38,32,0,24,25,32],
[40,51,37,42,48,44,56,0,44,46],
[42,48,41,48,45,42,55,36,0,41],
[33,38,30,33,41,36,48,34,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,50,35,39,43,47,47,46,40],
[44,0,52,48,45,50,40,48,47,48],
[30,28,0,34,33,39,31,32,33,30],
[45,32,46,0,38,46,36,34,34,36],
[41,35,47,42,0,46,46,50,45,39],
[37,30,41,34,34,0,43,38,41,40],
[33,40,49,44,34,37,0,41,39,40],
[33,32,48,46,30,42,39,0,45,39],
[34,33,47,46,35,39,41,35,0,43],
[40,32,50,44,41,40,40,41,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,45,44,51,36,43,38,39,55],
[39,0,37,32,51,30,43,36,36,39],
[35,43,0,29,46,41,47,34,42,51],
[36,48,51,0,53,36,57,39,42,56],
[29,29,34,27,0,28,32,27,40,41],
[44,50,39,44,52,0,51,44,47,50],
[37,37,33,23,48,29,0,33,34,39],
[42,44,46,41,53,36,47,0,44,50],
[41,44,38,38,40,33,46,36,0,43],
[25,41,29,24,39,30,41,30,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,32,46,32,40,44,34,38,35],
[43,0,34,42,35,35,47,32,35,35],
[48,46,0,43,37,48,50,34,43,45],
[34,38,37,0,37,38,44,35,35,39],
[48,45,43,43,0,45,47,37,44,46],
[40,45,32,42,35,0,41,36,36,38],
[36,33,30,36,33,39,0,32,32,34],
[46,48,46,45,43,44,48,0,38,44],
[42,45,37,45,36,44,48,42,0,40],
[45,45,35,41,34,42,46,36,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,42,45,44,30,41,38,37,41],
[33,0,34,51,38,29,44,33,32,37],
[38,46,0,47,38,30,50,38,48,42],
[35,29,33,0,34,21,42,31,36,37],
[36,42,42,46,0,41,47,34,29,45],
[50,51,50,59,39,0,59,40,39,59],
[39,36,30,38,33,21,0,43,34,41],
[42,47,42,49,46,40,37,0,35,37],
[43,48,32,44,51,41,46,45,0,53],
[39,43,38,43,35,21,39,43,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,40,44,34,39,30,34,48,44],
[41,0,34,47,31,39,38,38,41,41],
[40,46,0,51,45,50,36,47,36,39],
[36,33,29,0,29,25,19,27,30,23],
[46,49,35,51,0,46,43,43,39,35],
[41,41,30,55,34,0,33,25,37,31],
[50,42,44,61,37,47,0,43,44,44],
[46,42,33,53,37,55,37,0,46,39],
[32,39,44,50,41,43,36,34,0,43],
[36,39,41,57,45,49,36,41,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,35,38,38,35,37,36,30,41],
[35,0,32,28,35,47,32,43,38,33],
[45,48,0,34,42,47,40,45,35,43],
[42,52,46,0,50,49,46,42,39,45],
[42,45,38,30,0,35,29,42,32,37],
[45,33,33,31,45,0,29,36,32,33],
[43,48,40,34,51,51,0,36,38,46],
[44,37,35,38,38,44,44,0,35,40],
[50,42,45,41,48,48,42,45,0,38],
[39,47,37,35,43,47,34,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,35,32,38,39,42,34,40,40],
[42,0,32,40,40,39,38,40,39,36],
[45,48,0,39,40,46,44,39,43,39],
[48,40,41,0,45,44,46,40,41,41],
[42,40,40,35,0,37,46,32,44,40],
[41,41,34,36,43,0,38,31,38,37],
[38,42,36,34,34,42,0,34,30,40],
[46,40,41,40,48,49,46,0,47,46],
[40,41,37,39,36,42,50,33,0,41],
[40,44,41,39,40,43,40,34,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,58,53,42,42,35,47,49,44],
[35,0,56,47,46,38,45,38,26,51],
[22,24,0,47,28,24,22,41,21,44],
[27,33,33,0,21,41,33,37,12,38],
[38,34,52,59,0,49,41,32,26,45],
[38,42,56,39,31,0,34,24,21,55],
[45,35,58,47,39,46,0,42,30,47],
[33,42,39,43,48,56,38,0,26,51],
[31,54,59,68,54,59,50,54,0,54],
[36,29,36,42,35,25,33,29,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,22,35,44,27,31,34,22,27],
[48,0,37,30,50,39,39,39,35,27],
[58,43,0,39,59,37,46,49,39,44],
[45,50,41,0,50,46,39,38,34,47],
[36,30,21,30,0,33,35,43,31,32],
[53,41,43,34,47,0,30,44,33,37],
[49,41,34,41,45,50,0,50,40,51],
[46,41,31,42,37,36,30,0,17,35],
[58,45,41,46,49,47,40,63,0,54],
[53,53,36,33,48,43,29,45,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,42,41,32,39,40,38,35,38],
[42,0,54,60,45,46,41,34,32,42],
[38,26,0,46,28,22,30,24,31,24],
[39,20,34,0,31,37,36,37,43,27],
[48,35,52,49,0,53,49,48,48,39],
[41,34,58,43,27,0,40,39,36,32],
[40,39,50,44,31,40,0,30,35,33],
[42,46,56,43,32,41,50,0,37,36],
[45,48,49,37,32,44,45,43,0,40],
[42,38,56,53,41,48,47,44,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,36,59,37,60,59,35,48,35],
[21,0,12,24,37,25,24,24,36,33],
[44,68,0,71,49,48,48,23,48,56],
[21,56,9,0,46,45,32,21,33,21],
[43,43,31,34,0,23,43,43,44,32],
[20,55,32,35,57,0,44,44,45,44],
[21,56,32,48,37,36,0,24,36,56],
[45,56,57,59,37,36,56,0,36,69],
[32,44,32,47,36,35,44,44,0,45],
[45,47,24,59,48,36,24,11,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,48,40,31,37,38,40,54,41],
[41,0,49,29,33,34,32,34,47,40],
[32,31,0,31,33,34,29,27,31,37],
[40,51,49,0,46,39,35,39,48,51],
[49,47,47,34,0,43,37,43,45,42],
[43,46,46,41,37,0,57,41,48,47],
[42,48,51,45,43,23,0,41,49,41],
[40,46,53,41,37,39,39,0,38,38],
[26,33,49,32,35,32,31,42,0,38],
[39,40,43,29,38,33,39,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,33,36,46,45,23,30,44,27],
[44,0,50,41,51,42,29,45,47,39],
[47,30,0,29,36,39,23,38,33,32],
[44,39,51,0,46,42,25,46,52,50],
[34,29,44,34,0,33,20,37,42,35],
[35,38,41,38,47,0,44,40,36,38],
[57,51,57,55,60,36,0,50,59,55],
[50,35,42,34,43,40,30,0,47,46],
[36,33,47,28,38,44,21,33,0,35],
[53,41,48,30,45,42,25,34,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,57,44,43,43,59,44,33,50],
[33,0,49,42,34,38,40,39,43,46],
[23,31,0,36,24,40,33,34,26,32],
[36,38,44,0,31,44,41,31,42,42],
[37,46,56,49,0,42,46,39,38,47],
[37,42,40,36,38,0,47,41,34,41],
[21,40,47,39,34,33,0,36,33,44],
[36,41,46,49,41,39,44,0,38,39],
[47,37,54,38,42,46,47,42,0,38],
[30,34,48,38,33,39,36,41,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,45,42,43,30,39,39,34,41],
[41,0,42,38,41,32,41,40,36,46],
[35,38,0,31,39,37,35,33,33,41],
[38,42,49,0,48,42,32,35,38,41],
[37,39,41,32,0,34,39,39,42,44],
[50,48,43,38,46,0,43,38,44,50],
[41,39,45,48,41,37,0,34,34,48],
[41,40,47,45,41,42,46,0,36,46],
[46,44,47,42,38,36,46,44,0,39],
[39,34,39,39,36,30,32,34,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,41,35,37,35,53,41,38,36],
[36,0,39,39,24,24,43,29,33,34],
[39,41,0,34,29,37,40,31,42,43],
[45,41,46,0,29,44,44,46,39,47],
[43,56,51,51,0,47,46,50,50,40],
[45,56,43,36,33,0,47,46,37,38],
[27,37,40,36,34,33,0,37,32,34],
[39,51,49,34,30,34,43,0,45,39],
[42,47,38,41,30,43,48,35,0,36],
[44,46,37,33,40,42,46,41,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,37,40,39,37,42,44,40,37],
[40,0,37,35,34,31,38,36,38,37],
[43,43,0,38,34,33,46,44,37,37],
[40,45,42,0,40,41,40,43,40,40],
[41,46,46,40,0,36,42,44,37,39],
[43,49,47,39,44,0,41,47,37,44],
[38,42,34,40,38,39,0,39,35,45],
[36,44,36,37,36,33,41,0,35,42],
[40,42,43,40,43,43,45,45,0,41],
[43,43,43,40,41,36,35,38,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,30,41,39,33,38,41,40,31],
[47,0,48,46,48,34,42,52,38,45],
[50,32,0,39,43,38,32,41,37,32],
[39,34,41,0,37,38,32,32,32,40],
[41,32,37,43,0,34,32,42,40,40],
[47,46,42,42,46,0,31,45,39,40],
[42,38,48,48,48,49,0,50,46,44],
[39,28,39,48,38,35,30,0,41,33],
[40,42,43,48,40,41,34,39,0,35],
[49,35,48,40,40,40,36,47,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,60,80,60,60,40,80,80,40],
[40,0,40,60,60,40,40,40,60,40],
[20,40,0,60,60,40,40,40,60,20],
[0,20,20,0,40,40,20,40,40,40],
[20,20,20,40,0,20,0,20,40,40],
[20,40,40,40,60,0,20,60,40,40],
[40,40,40,60,80,60,0,60,60,40],
[0,40,40,40,60,20,20,0,60,20],
[0,20,20,40,40,40,20,20,0,20],
[40,40,60,40,40,40,40,60,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,47,42,40,46,44,42,45,42],
[36,0,46,40,43,36,34,36,38,40],
[33,34,0,34,35,31,34,39,36,34],
[38,40,46,0,42,35,43,41,47,39],
[40,37,45,38,0,39,40,41,44,40],
[34,44,49,45,41,0,43,41,44,41],
[36,46,46,37,40,37,0,40,46,42],
[38,44,41,39,39,39,40,0,38,38],
[35,42,44,33,36,36,34,42,0,42],
[38,40,46,41,40,39,38,42,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,24,29,34,25,30,22,25,28],
[63,0,37,43,42,36,36,41,39,42],
[56,43,0,39,49,41,51,48,52,52],
[51,37,41,0,40,42,58,36,39,46],
[46,38,31,40,0,30,50,36,29,32],
[55,44,39,38,50,0,52,45,40,32],
[50,44,29,22,30,28,0,45,24,45],
[58,39,32,44,44,35,35,0,49,46],
[55,41,28,41,51,40,56,31,0,52],
[52,38,28,34,48,48,35,34,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,28,35,43,37,24,45,35,47],
[46,0,36,51,40,54,43,47,38,45],
[52,44,0,43,37,51,37,43,37,47],
[45,29,37,0,41,42,40,35,36,43],
[37,40,43,39,0,41,43,43,46,45],
[43,26,29,38,39,0,36,36,35,49],
[56,37,43,40,37,44,0,46,39,48],
[35,33,37,45,37,44,34,0,43,50],
[45,42,43,44,34,45,41,37,0,43],
[33,35,33,37,35,31,32,30,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,20,20,40,59,41,41,20,20],
[41,0,0,21,40,60,21,41,21,0],
[60,80,0,40,59,60,60,41,60,39],
[60,59,40,0,59,59,61,41,39,40],
[40,40,21,21,0,60,21,21,21,21],
[21,20,20,21,20,0,41,41,21,20],
[39,59,20,19,59,39,0,20,19,20],
[39,39,39,39,59,39,60,0,39,39],
[60,59,20,41,59,59,61,41,0,20],
[60,80,41,40,59,60,60,41,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,39,42,48,41,42,44,39,41],
[44,0,44,35,47,43,44,38,47,44],
[41,36,0,37,46,42,46,40,48,45],
[38,45,43,0,47,43,45,45,44,46],
[32,33,34,33,0,37,33,35,35,33],
[39,37,38,37,43,0,45,39,36,40],
[38,36,34,35,47,35,0,45,42,43],
[36,42,40,35,45,41,35,0,36,39],
[41,33,32,36,45,44,38,44,0,42],
[39,36,35,34,47,40,37,41,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,42,38,43,42,42,42,40,40],
[44,0,42,41,41,39,46,43,38,39],
[38,38,0,43,40,41,40,44,41,40],
[42,39,37,0,46,37,47,41,43,41],
[37,39,40,34,0,41,40,43,35,38],
[38,41,39,43,39,0,41,37,38,41],
[38,34,40,33,40,39,0,40,37,38],
[38,37,36,39,37,43,40,0,38,39],
[40,42,39,37,45,42,43,42,0,34],
[40,41,40,39,42,39,42,41,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,39,31,32,45,34,35,41,45],
[36,0,29,16,23,34,22,37,33,39],
[41,51,0,37,40,50,41,46,41,50],
[49,64,43,0,34,41,45,42,50,52],
[48,57,40,46,0,46,43,49,51,41],
[35,46,30,39,34,0,28,33,39,34],
[46,58,39,35,37,52,0,53,51,45],
[45,43,34,38,31,47,27,0,38,47],
[39,47,39,30,29,41,29,42,0,34],
[35,41,30,28,39,46,35,33,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,63,71,71,35,52,44,34,45],
[44,0,36,63,44,36,52,45,44,45],
[17,44,0,36,61,52,43,43,26,45],
[9,17,44,0,61,35,52,35,43,45],
[9,36,19,19,0,27,26,9,9,37],
[45,44,28,45,53,0,53,53,45,45],
[28,28,37,28,54,27,0,27,28,37],
[36,35,37,45,71,27,53,0,45,45],
[46,36,54,37,71,35,52,35,0,45],
[35,35,35,35,43,35,43,35,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,28,39,50,43,22,30,39,40],
[64,0,49,65,40,56,56,46,65,52],
[52,31,0,59,52,62,54,53,59,53],
[41,15,21,0,37,36,29,22,48,43],
[30,40,28,43,0,42,35,29,45,45],
[37,24,18,44,38,0,19,18,50,38],
[58,24,26,51,45,61,0,32,44,45],
[50,34,27,58,51,62,48,0,52,58],
[41,15,21,32,35,30,36,28,0,30],
[40,28,27,37,35,42,35,22,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,42,36,36,34,36,43,44,31],
[45,0,34,39,30,44,32,38,33,39],
[38,46,0,41,47,44,38,41,45,34],
[44,41,39,0,36,36,40,42,39,40],
[44,50,33,44,0,40,34,41,30,37],
[46,36,36,44,40,0,35,39,36,33],
[44,48,42,40,46,45,0,37,42,36],
[37,42,39,38,39,41,43,0,33,35],
[36,47,35,41,50,44,38,47,0,34],
[49,41,46,40,43,47,44,45,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,42,35,37,43,40,40,36,37],
[41,0,41,36,39,41,35,36,39,37],
[38,39,0,38,39,40,39,39,39,37],
[45,44,42,0,39,40,41,43,38,42],
[43,41,41,41,0,40,43,43,43,43],
[37,39,40,40,40,0,43,40,40,39],
[40,45,41,39,37,37,0,42,37,43],
[40,44,41,37,37,40,38,0,38,36],
[44,41,41,42,37,40,43,42,0,37],
[43,43,43,38,37,41,37,44,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,19,31,25,29,46,32,64,22],
[63,0,37,38,33,51,63,50,64,41],
[61,43,0,50,42,50,56,33,63,42],
[49,42,30,0,35,42,53,39,66,47],
[55,47,38,45,0,43,51,39,57,41],
[51,29,30,38,37,0,49,38,57,33],
[34,17,24,27,29,31,0,41,49,27],
[48,30,47,41,41,42,39,0,66,38],
[16,16,17,14,23,23,31,14,0,21],
[58,39,38,33,39,47,53,42,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,41,34,31,42,22,23,33,38],
[46,0,47,42,43,49,30,38,36,38],
[39,33,0,30,39,37,26,27,40,51],
[46,38,50,0,46,41,33,19,43,46],
[49,37,41,34,0,42,41,40,48,54],
[38,31,43,39,38,0,26,27,37,37],
[58,50,54,47,39,54,0,39,45,51],
[57,42,53,61,40,53,41,0,46,46],
[47,44,40,37,32,43,35,34,0,49],
[42,42,29,34,26,43,29,34,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,41,35,45,41,47,48,45,36],
[34,0,37,33,39,39,37,43,38,43],
[39,43,0,34,45,32,38,45,47,43],
[45,47,46,0,39,33,50,46,41,46],
[35,41,35,41,0,34,42,46,41,33],
[39,41,48,47,46,0,48,47,41,38],
[33,43,42,30,38,32,0,43,38,39],
[32,37,35,34,34,33,37,0,29,31],
[35,42,33,39,39,39,42,51,0,35],
[44,37,37,34,47,42,41,49,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,36,43,43,46,43,43,44,36],
[40,0,31,35,47,30,34,38,37,33],
[44,49,0,46,50,41,50,45,48,37],
[37,45,34,0,41,38,40,35,41,37],
[37,33,30,39,0,33,33,32,38,28],
[34,50,39,42,47,0,42,34,43,43],
[37,46,30,40,47,38,0,40,40,36],
[37,42,35,45,48,46,40,0,47,41],
[36,43,32,39,42,37,40,33,0,33],
[44,47,43,43,52,37,44,39,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,41,37,44,38,47,48,40,52],
[41,0,40,43,49,40,53,43,40,50],
[39,40,0,34,42,38,45,39,42,47],
[43,37,46,0,34,35,54,39,39,42],
[36,31,38,46,0,30,54,36,39,37],
[42,40,42,45,50,0,54,41,44,38],
[33,27,35,26,26,26,0,39,42,33],
[32,37,41,41,44,39,41,0,52,38],
[40,40,38,41,41,36,38,28,0,44],
[28,30,33,38,43,42,47,42,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,40,35,36,41,31,37,35,34],
[44,0,43,39,35,43,36,44,39,41],
[40,37,0,36,31,36,37,30,35,35],
[45,41,44,0,36,44,33,31,37,39],
[44,45,49,44,0,47,41,42,44,39],
[39,37,44,36,33,0,31,34,37,38],
[49,44,43,47,39,49,0,39,38,42],
[43,36,50,49,38,46,41,0,39,42],
[45,41,45,43,36,43,42,41,0,41],
[46,39,45,41,41,42,38,38,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,40,40,38,38,26,26,36,43],
[41,0,28,35,44,47,37,38,44,38],
[40,52,0,39,43,44,32,36,37,41],
[40,45,41,0,44,48,39,34,46,34],
[42,36,37,36,0,37,34,39,42,37],
[42,33,36,32,43,0,28,31,26,36],
[54,43,48,41,46,52,0,40,37,38],
[54,42,44,46,41,49,40,0,36,37],
[44,36,43,34,38,54,43,44,0,42],
[37,42,39,46,43,44,42,43,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,40,40,40,40,40,40,80,40],
[0,0,0,0,40,40,0,0,40,0],
[40,80,0,40,40,80,40,80,80,40],
[40,80,40,0,40,40,40,80,80,40],
[40,40,40,40,0,80,40,40,40,40],
[40,40,0,40,0,0,40,40,40,40],
[40,80,40,40,40,40,0,40,80,40],
[40,80,0,0,40,40,40,0,80,0],
[0,40,0,0,40,40,0,0,0,0],
[40,80,40,40,40,40,40,80,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,44,44,42,43,50,50,51,39],
[31,0,32,42,36,44,36,44,48,40],
[36,48,0,40,46,42,57,50,50,41],
[36,38,40,0,40,48,51,46,52,38],
[38,44,34,40,0,46,40,40,46,33],
[37,36,38,32,34,0,40,41,43,33],
[30,44,23,29,40,40,0,43,41,32],
[30,36,30,34,40,39,37,0,46,31],
[29,32,30,28,34,37,39,34,0,29],
[41,40,39,42,47,47,48,49,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,46,45,66,45,59,51,53,43],
[53,0,38,30,52,43,58,45,46,45],
[34,42,0,53,50,42,41,41,50,42],
[35,50,27,0,49,50,49,41,52,50],
[14,28,30,31,0,22,43,22,16,36],
[35,37,38,30,58,0,50,21,31,43],
[21,22,39,31,37,30,0,22,22,35],
[29,35,39,39,58,59,58,0,54,50],
[27,34,30,28,64,49,58,26,0,42],
[37,35,38,30,44,37,45,30,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,37,38,41,35,47,46,40,40],
[38,0,41,38,41,35,40,37,46,40],
[43,39,0,34,35,32,45,43,44,44],
[42,42,46,0,42,34,50,44,40,40],
[39,39,45,38,0,34,46,34,42,43],
[45,45,48,46,46,0,50,39,43,40],
[33,40,35,30,34,30,0,36,39,33],
[34,43,37,36,46,41,44,0,39,41],
[40,34,36,40,38,37,41,41,0,47],
[40,40,36,40,37,40,47,39,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,36,37,43,40,42,40,44,43],
[34,0,30,31,34,32,33,25,42,48],
[44,50,0,36,40,44,44,36,51,45],
[43,49,44,0,42,40,42,42,52,48],
[37,46,40,38,0,36,39,42,50,44],
[40,48,36,40,44,0,34,32,50,44],
[38,47,36,38,41,46,0,35,51,42],
[40,55,44,38,38,48,45,0,60,52],
[36,38,29,28,30,30,29,20,0,44],
[37,32,35,32,36,36,38,28,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,34,42,45,49,44,43,41,42],
[37,0,43,32,48,38,36,40,40,39],
[46,37,0,37,45,47,38,41,48,42],
[38,48,43,0,47,50,43,42,36,34],
[35,32,35,33,0,39,41,29,37,38],
[31,42,33,30,41,0,33,40,36,41],
[36,44,42,37,39,47,0,35,35,36],
[37,40,39,38,51,40,45,0,44,33],
[39,40,32,44,43,44,45,36,0,38],
[38,41,38,46,42,39,44,47,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,47,37,46,34,39,44,39,45],
[38,0,46,46,43,38,43,43,40,43],
[33,34,0,32,37,26,41,36,36,40],
[43,34,48,0,40,41,45,44,38,37],
[34,37,43,40,0,28,40,35,37,41],
[46,42,54,39,52,0,49,49,49,47],
[41,37,39,35,40,31,0,36,42,42],
[36,37,44,36,45,31,44,0,41,45],
[41,40,44,42,43,31,38,39,0,40],
[35,37,40,43,39,33,38,35,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,37,39,36,32,41,42,37,27],
[44,0,44,43,35,33,45,45,38,30],
[43,36,0,51,56,48,44,51,51,43],
[41,37,29,0,48,43,39,46,49,37],
[44,45,24,32,0,42,42,41,42,26],
[48,47,32,37,38,0,47,43,48,40],
[39,35,36,41,38,33,0,45,38,33],
[38,35,29,34,39,37,35,0,36,33],
[43,42,29,31,38,32,42,44,0,29],
[53,50,37,43,54,40,47,47,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,39,47,48,43,50,39,50,46],
[35,0,34,34,36,33,43,35,38,40],
[41,46,0,40,41,40,47,38,42,42],
[33,46,40,0,43,36,45,45,44,47],
[32,44,39,37,0,34,51,37,44,44],
[37,47,40,44,46,0,48,40,48,52],
[30,37,33,35,29,32,0,35,32,37],
[41,45,42,35,43,40,45,0,39,38],
[30,42,38,36,36,32,48,41,0,37],
[34,40,38,33,36,28,43,42,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,42,40,37,33,31,34,39,37],
[45,0,51,45,42,38,46,40,41,46],
[38,29,0,37,36,31,36,39,38,36],
[40,35,43,0,34,38,33,42,39,39],
[43,38,44,46,0,43,43,43,47,37],
[47,42,49,42,37,0,43,39,43,44],
[49,34,44,47,37,37,0,43,44,45],
[46,40,41,38,37,41,37,0,38,44],
[41,39,42,41,33,37,36,42,0,39],
[43,34,44,41,43,36,35,36,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,37,42,49,46,37,34,48,35],
[46,0,48,52,54,50,44,39,55,41],
[43,32,0,48,43,36,38,45,50,37],
[38,28,32,0,39,37,32,29,42,31],
[31,26,37,41,0,41,34,36,43,39],
[34,30,44,43,39,0,39,42,43,34],
[43,36,42,48,46,41,0,42,48,38],
[46,41,35,51,44,38,38,0,47,41],
[32,25,30,38,37,37,32,33,0,35],
[45,39,43,49,41,46,42,39,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,52,54,27,48,40,36,49,43],
[37,0,46,39,31,52,38,52,37,17],
[28,34,0,23,39,53,34,53,40,23],
[26,41,57,0,30,47,34,47,38,28],
[53,49,41,50,0,53,46,53,35,42],
[32,28,27,33,27,0,33,41,37,25],
[40,42,46,46,34,47,0,47,57,32],
[44,28,27,33,27,39,33,0,44,35],
[31,43,40,42,45,43,23,36,0,37],
[37,63,57,52,38,55,48,45,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,33,33,41,36,43,36,32,38],
[35,0,34,31,37,37,39,31,40,38],
[47,46,0,39,37,44,44,43,37,36],
[47,49,41,0,39,42,44,46,42,42],
[39,43,43,41,0,36,44,44,40,39],
[44,43,36,38,44,0,43,35,38,40],
[37,41,36,36,36,37,0,31,29,41],
[44,49,37,34,36,45,49,0,36,39],
[48,40,43,38,40,42,51,44,0,45],
[42,42,44,38,41,40,39,41,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,36,44,39,38,38,40,42,44],
[32,0,27,24,31,28,42,35,30,36],
[44,53,0,43,44,48,51,45,42,40],
[36,56,37,0,37,35,46,48,42,36],
[41,49,36,43,0,32,45,49,42,40],
[42,52,32,45,48,0,61,51,43,36],
[42,38,29,34,35,19,0,44,26,30],
[40,45,35,32,31,29,36,0,32,46],
[38,50,38,38,38,37,54,48,0,43],
[36,44,40,44,40,44,50,34,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,36,47,36,44,45,47,52,34],
[49,0,54,44,50,52,46,51,42,40],
[44,26,0,49,42,38,47,43,48,41],
[33,36,31,0,36,43,40,50,32,32],
[44,30,38,44,0,40,41,44,38,35],
[36,28,42,37,40,0,36,41,32,36],
[35,34,33,40,39,44,0,30,41,31],
[33,29,37,30,36,39,50,0,35,39],
[28,38,32,48,42,48,39,45,0,37],
[46,40,39,48,45,44,49,41,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,35,40,39,47,46,39,37,38],
[44,0,45,44,44,40,49,45,42,43],
[45,35,0,42,38,44,43,38,35,38],
[40,36,38,0,39,44,49,46,47,45],
[41,36,42,41,0,40,48,43,42,38],
[33,40,36,36,40,0,42,37,39,35],
[34,31,37,31,32,38,0,34,32,33],
[41,35,42,34,37,43,46,0,41,42],
[43,38,45,33,38,41,48,39,0,39],
[42,37,42,35,42,45,47,38,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,40,40,36,43,51,47,45,49],
[33,0,33,25,31,31,40,30,33,42],
[40,47,0,41,46,44,50,40,47,45],
[40,55,39,0,43,40,46,39,45,48],
[44,49,34,37,0,40,51,39,42,41],
[37,49,36,40,40,0,50,37,43,47],
[29,40,30,34,29,30,0,29,35,34],
[33,50,40,41,41,43,51,0,40,51],
[35,47,33,35,38,37,45,40,0,51],
[31,38,35,32,39,33,46,29,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,36,37,38,45,42,40,42,45],
[43,0,42,33,42,39,41,35,44,45],
[44,38,0,35,43,38,42,37,42,45],
[43,47,45,0,49,44,48,40,48,49],
[42,38,37,31,0,42,40,34,39,32],
[35,41,42,36,38,0,44,35,39,41],
[38,39,38,32,40,36,0,34,40,36],
[40,45,43,40,46,45,46,0,47,40],
[38,36,38,32,41,41,40,33,0,39],
[35,35,35,31,48,39,44,40,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,31,43,28,43,44,37,34,39],
[49,0,35,43,32,45,41,32,34,30],
[49,45,0,46,31,32,42,42,35,44],
[37,37,34,0,39,28,33,37,29,35],
[52,48,49,41,0,43,38,43,41,43],
[37,35,48,52,37,0,40,39,45,35],
[36,39,38,47,42,40,0,39,30,35],
[43,48,38,43,37,41,41,0,40,47],
[46,46,45,51,39,35,50,40,0,36],
[41,50,36,45,37,45,45,33,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,32,41,40,42,37,37,38,38],
[49,0,38,51,50,49,47,43,50,46],
[48,42,0,54,46,47,43,36,53,43],
[39,29,26,0,39,38,41,31,35,31],
[40,30,34,41,0,44,43,36,48,40],
[38,31,33,42,36,0,34,39,42,41],
[43,33,37,39,37,46,0,36,40,44],
[43,37,44,49,44,41,44,0,47,50],
[42,30,27,45,32,38,40,33,0,32],
[42,34,37,49,40,39,36,30,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,44,39,45,40,47,35,49,37],
[32,0,38,29,36,39,43,38,41,37],
[36,42,0,40,43,40,44,40,49,36],
[41,51,40,0,37,45,50,48,53,42],
[35,44,37,43,0,44,38,37,49,43],
[40,41,40,35,36,0,36,44,48,38],
[33,37,36,30,42,44,0,38,44,37],
[45,42,40,32,43,36,42,0,43,40],
[31,39,31,27,31,32,36,37,0,33],
[43,43,44,38,37,42,43,40,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,41,41,41,41,21,41,41],
[39,0,60,20,21,40,40,21,39,40],
[39,20,0,20,21,0,40,0,20,60],
[39,60,60,0,21,60,60,40,39,40],
[39,59,59,59,0,59,59,39,59,59],
[39,40,80,20,21,0,60,41,39,60],
[39,40,40,20,21,20,0,20,20,39],
[59,59,80,40,41,39,60,0,59,80],
[39,41,60,41,21,41,60,21,0,40],
[39,40,20,40,21,20,41,0,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,40,42,42,40,30,50,52,30],
[48,0,49,49,38,40,29,49,49,29],
[40,31,0,31,31,10,20,20,32,19],
[38,31,49,0,30,40,20,39,42,19],
[38,42,49,50,0,40,30,49,50,39],
[40,40,70,40,40,0,29,39,41,41],
[50,51,60,60,50,51,0,60,70,40],
[30,31,60,41,31,41,20,0,51,41],
[28,31,48,38,30,39,10,29,0,9],
[50,51,61,61,41,39,40,39,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,45,34,45,55,48,42,47,38],
[33,0,39,33,33,47,41,40,42,38],
[35,41,0,34,45,49,41,40,40,42],
[46,47,46,0,45,56,44,42,47,38],
[35,47,35,35,0,55,39,39,45,39],
[25,33,31,24,25,0,25,28,36,28],
[32,39,39,36,41,55,0,40,49,40],
[38,40,40,38,41,52,40,0,47,37],
[33,38,40,33,35,44,31,33,0,27],
[42,42,38,42,41,52,40,43,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,44,36,38,41,28,38,27,41],
[35,0,43,41,38,32,21,35,30,39],
[36,37,0,31,27,36,25,25,25,35],
[44,39,49,0,42,40,32,39,42,56],
[42,42,53,38,0,31,41,48,28,41],
[39,48,44,40,49,0,34,38,38,51],
[52,59,55,48,39,46,0,55,41,47],
[42,45,55,41,32,42,25,0,35,44],
[53,50,55,38,52,42,39,45,0,47],
[39,41,45,24,39,29,33,36,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,37,43,41,40,31,47,40],
[39,0,42,28,32,40,50,27,44,43],
[39,38,0,41,37,44,33,29,49,38],
[43,52,39,0,38,48,51,43,44,50],
[37,48,43,42,0,49,49,36,50,37],
[39,40,36,32,31,0,42,32,32,31],
[40,30,47,29,31,38,0,29,35,38],
[49,53,51,37,44,48,51,0,50,49],
[33,36,31,36,30,48,45,30,0,35],
[40,37,42,30,43,49,42,31,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,35,49,44,53,55,43,42,35],
[36,0,29,30,35,41,54,48,33,39],
[45,51,0,37,53,50,54,56,42,34],
[31,50,43,0,45,40,49,45,34,40],
[36,45,27,35,0,41,52,44,30,25],
[27,39,30,40,39,0,52,51,40,33],
[25,26,26,31,28,28,0,21,23,16],
[37,32,24,35,36,29,59,0,33,25],
[38,47,38,46,50,40,57,47,0,52],
[45,41,46,40,55,47,64,55,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,31,33,36,40,38,40,33,26],
[49,0,34,40,50,43,40,47,44,40],
[49,46,0,42,50,46,41,44,45,38],
[47,40,38,0,46,41,47,45,38,38],
[44,30,30,34,0,38,35,37,31,28],
[40,37,34,39,42,0,41,39,39,37],
[42,40,39,33,45,39,0,41,36,37],
[40,33,36,35,43,41,39,0,36,32],
[47,36,35,42,49,41,44,44,0,42],
[54,40,42,42,52,43,43,48,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,43,67,67,35,58,67,57,46],
[0,0,31,20,45,35,46,33,23,23],
[37,49,0,57,59,59,57,57,37,47],
[13,60,23,0,57,35,36,34,24,24],
[13,35,21,23,0,26,23,34,37,34],
[45,45,21,45,54,0,44,45,58,32],
[22,34,23,44,57,36,0,57,47,47],
[13,47,23,46,46,35,23,0,24,11],
[23,57,43,56,43,22,33,56,0,33],
[34,57,33,56,46,48,33,69,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,31,46,43,36,44,43,44,51],
[26,0,23,34,32,30,36,30,27,36],
[49,57,0,47,40,43,45,52,45,51],
[34,46,33,0,31,34,28,29,37,39],
[37,48,40,49,0,48,43,50,44,54],
[44,50,37,46,32,0,47,44,41,55],
[36,44,35,52,37,33,0,39,41,39],
[37,50,28,51,30,36,41,0,41,51],
[36,53,35,43,36,39,39,39,0,46],
[29,44,29,41,26,25,41,29,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,47,32,39,51,41,32,50,39],
[42,0,44,42,40,44,54,38,43,33],
[33,36,0,27,33,36,36,31,41,38],
[48,38,53,0,37,43,30,47,46,44],
[41,40,47,43,0,52,34,33,35,44],
[29,36,44,37,28,0,27,29,42,35],
[39,26,44,50,46,53,0,38,54,50],
[48,42,49,33,47,51,42,0,49,53],
[30,37,39,34,45,38,26,31,0,43],
[41,47,42,36,36,45,30,27,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,47,40,34,34,35,26,34,18],
[53,0,34,34,34,31,38,27,27,31],
[33,46,0,32,34,32,32,25,32,32],
[40,46,48,0,28,60,53,28,42,25],
[46,46,46,52,0,38,45,34,33,39],
[46,49,48,20,42,0,34,27,40,24],
[45,42,48,27,35,46,0,41,41,32],
[54,53,55,52,46,53,39,0,59,46],
[46,53,48,38,47,40,39,21,0,32],
[62,49,48,55,41,56,48,34,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,37,42,24,21,45,41,41,28],
[40,0,44,40,37,35,49,34,38,40],
[43,36,0,46,47,40,56,44,51,42],
[38,40,34,0,32,23,47,42,37,30],
[56,43,33,48,0,30,44,40,39,43],
[59,45,40,57,50,0,59,49,54,46],
[35,31,24,33,36,21,0,29,32,30],
[39,46,36,38,40,31,51,0,37,41],
[39,42,29,43,41,26,48,43,0,42],
[52,40,38,50,37,34,50,39,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,52,49,61,56,37,44,39,53],
[32,0,53,51,55,51,46,48,49,49],
[28,27,0,38,29,36,31,34,31,41],
[31,29,42,0,25,30,45,25,30,44],
[19,25,51,55,0,32,35,39,32,53],
[24,29,44,50,48,0,44,45,40,59],
[43,34,49,35,45,36,0,35,33,43],
[36,32,46,55,41,35,45,0,37,58],
[41,31,49,50,48,40,47,43,0,46],
[27,31,39,36,27,21,37,22,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,38,39,43,41,37,41,39],
[38,0,46,47,39,43,47,41,46,39],
[38,34,0,38,37,40,39,34,37,31],
[42,33,42,0,38,46,42,37,45,42],
[41,41,43,42,0,43,45,34,40,36],
[37,37,40,34,37,0,35,32,39,41],
[39,33,41,38,35,45,0,36,38,34],
[43,39,46,43,46,48,44,0,42,39],
[39,34,43,35,40,41,42,38,0,36],
[41,41,49,38,44,39,46,41,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,42,43,54,36,40,30,31,34],
[39,0,33,52,49,39,45,36,45,49],
[38,47,0,47,51,47,49,45,44,48],
[37,28,33,0,45,31,40,30,40,36],
[26,31,29,35,0,30,31,23,24,33],
[44,41,33,49,50,0,44,36,51,39],
[40,35,31,40,49,36,0,34,39,46],
[50,44,35,50,57,44,46,0,41,48],
[49,35,36,40,56,29,41,39,0,47],
[46,31,32,44,47,41,34,32,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,31,32,30,40,45,37,42,30],
[38,0,36,26,35,44,36,44,39,24],
[49,44,0,39,35,52,47,52,48,32],
[48,54,41,0,41,47,54,49,58,37],
[50,45,45,39,0,43,49,42,51,42],
[40,36,28,33,37,0,39,36,44,34],
[35,44,33,26,31,41,0,42,35,21],
[43,36,28,31,38,44,38,0,35,30],
[38,41,32,22,29,36,45,45,0,24],
[50,56,48,43,38,46,59,50,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,41,37,46,40,35,47,48,40],
[42,0,32,30,38,33,35,42,35,33],
[39,48,0,33,41,38,32,41,45,38],
[43,50,47,0,50,49,45,50,39,41],
[34,42,39,30,0,32,36,35,34,32],
[40,47,42,31,48,0,34,53,35,43],
[45,45,48,35,44,46,0,50,37,43],
[33,38,39,30,45,27,30,0,30,40],
[32,45,35,41,46,45,43,50,0,47],
[40,47,42,39,48,37,37,40,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,49,49,47,49,32,32,49,34],
[31,0,63,31,48,65,31,31,33,33],
[31,17,0,31,48,65,15,16,33,50],
[31,49,49,0,63,65,47,31,48,50],
[33,32,32,17,0,49,32,0,17,34],
[31,15,15,15,31,0,15,15,0,31],
[48,49,65,33,48,65,0,33,50,50],
[48,49,64,49,80,65,47,0,33,50],
[31,47,47,32,63,80,30,47,0,48],
[46,47,30,30,46,49,30,30,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,41,40,40,45,43,40,42,39],
[44,0,43,47,39,40,44,47,37,43],
[39,37,0,30,31,34,39,37,39,32],
[40,33,50,0,35,40,48,46,41,40],
[40,41,49,45,0,40,43,45,36,48],
[35,40,46,40,40,0,39,40,38,36],
[37,36,41,32,37,41,0,42,34,36],
[40,33,43,34,35,40,38,0,43,42],
[38,43,41,39,44,42,46,37,0,38],
[41,37,48,40,32,44,44,38,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,27,39,35,41,45,21,33,33],
[43,0,46,41,37,37,51,29,38,44],
[53,34,0,39,39,39,53,41,45,49],
[41,39,41,0,40,38,48,33,42,40],
[45,43,41,40,0,48,51,36,49,44],
[39,43,41,42,32,0,45,24,44,44],
[35,29,27,32,29,35,0,37,32,45],
[59,51,39,47,44,56,43,0,42,55],
[47,42,35,38,31,36,48,38,0,36],
[47,36,31,40,36,36,35,25,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,33,41,42,43,40,39,41,37],
[42,0,37,44,42,47,47,42,41,45],
[47,43,0,44,42,49,46,39,44,45],
[39,36,36,0,37,47,39,38,38,43],
[38,38,38,43,0,43,43,42,43,46],
[37,33,31,33,37,0,43,41,35,40],
[40,33,34,41,37,37,0,38,40,37],
[41,38,41,42,38,39,42,0,40,40],
[39,39,36,42,37,45,40,40,0,41],
[43,35,35,37,34,40,43,40,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,49,40,42,51,46,47,41,50],
[29,0,41,37,39,44,46,34,44,42],
[31,39,0,36,36,52,43,40,43,44],
[40,43,44,0,43,55,41,44,49,47],
[38,41,44,37,0,45,50,37,47,54],
[29,36,28,25,35,0,37,27,39,45],
[34,34,37,39,30,43,0,28,42,38],
[33,46,40,36,43,53,52,0,46,51],
[39,36,37,31,33,41,38,34,0,39],
[30,38,36,33,26,35,42,29,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,42,47,40,40,39,43,49,41],
[43,0,42,45,44,47,42,45,51,35],
[38,38,0,47,38,41,44,41,48,40],
[33,35,33,0,35,37,34,40,48,43],
[40,36,42,45,0,40,41,31,49,37],
[40,33,39,43,40,0,29,37,43,36],
[41,38,36,46,39,51,0,46,48,41],
[37,35,39,40,49,43,34,0,45,39],
[31,29,32,32,31,37,32,35,0,34],
[39,45,40,37,43,44,39,41,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,40,38,31,45,44,43,33,36],
[43,0,42,32,38,35,39,48,41,41],
[40,38,0,37,37,42,45,43,35,31],
[42,48,43,0,37,41,46,47,45,46],
[49,42,43,43,0,52,44,51,37,41],
[35,45,38,39,28,0,37,42,33,35],
[36,41,35,34,36,43,0,42,34,34],
[37,32,37,33,29,38,38,0,32,31],
[47,39,45,35,43,47,46,48,0,41],
[44,39,49,34,39,45,46,49,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,44,57,41,57,47,40,41,58],
[11,0,15,17,17,39,11,10,12,10],
[36,65,0,41,37,53,41,25,36,48],
[23,63,39,0,19,52,30,47,36,45],
[39,63,43,61,0,74,50,33,34,45],
[23,41,27,28,6,0,11,24,23,28],
[33,69,39,50,30,69,0,47,22,47],
[40,70,55,33,47,56,33,0,28,32],
[39,68,44,44,46,57,58,52,0,53],
[22,70,32,35,35,52,33,48,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,37,37,38,40,42,39,39,33],
[36,0,34,38,37,35,39,37,34,34],
[43,46,0,39,41,48,43,42,54,42],
[43,42,41,0,38,42,40,45,44,43],
[42,43,39,42,0,41,40,37,45,37],
[40,45,32,38,39,0,43,37,44,37],
[38,41,37,40,40,37,0,39,45,43],
[41,43,38,35,43,43,41,0,44,42],
[41,46,26,36,35,36,35,36,0,38],
[47,46,38,37,43,43,37,38,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,45,39,33,39,40,42,37,50],
[45,0,50,46,35,55,44,34,47,49],
[35,30,0,34,31,35,29,23,24,24],
[41,34,46,0,44,46,37,35,32,46],
[47,45,49,36,0,49,44,44,46,39],
[41,25,45,34,31,0,36,27,32,45],
[40,36,51,43,36,44,0,38,31,49],
[38,46,57,45,36,53,42,0,42,47],
[43,33,56,48,34,48,49,38,0,44],
[30,31,56,34,41,35,31,33,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,44,44,46,46,46,41,43,38],
[40,0,45,47,44,45,47,41,38,35],
[36,35,0,45,41,39,41,31,38,32],
[36,33,35,0,37,45,50,34,36,32],
[34,36,39,43,0,45,43,39,38,39],
[34,35,41,35,35,0,43,38,33,30],
[34,33,39,30,37,37,0,31,30,31],
[39,39,49,46,41,42,49,0,38,44],
[37,42,42,44,42,47,50,42,0,38],
[42,45,48,48,41,50,49,36,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,43,39,40,42,48,43,47],
[38,0,47,42,47,37,39,41,46,43],
[38,33,0,41,37,38,37,40,40,38],
[37,38,39,0,34,30,34,40,38,37],
[41,33,43,46,0,40,35,44,43,46],
[40,43,42,50,40,0,40,46,45,45],
[38,41,43,46,45,40,0,43,41,39],
[32,39,40,40,36,34,37,0,38,38],
[37,34,40,42,37,35,39,42,0,37],
[33,37,42,43,34,35,41,42,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,49,44,47,47,46,42,50,44],
[45,0,44,41,51,48,49,48,38,45],
[31,36,0,38,37,37,46,38,36,46],
[36,39,42,0,46,46,43,43,44,41],
[33,29,43,34,0,41,42,51,36,41],
[33,32,43,34,39,0,38,46,35,43],
[34,31,34,37,38,42,0,43,39,40],
[38,32,42,37,29,34,37,0,37,30],
[30,42,44,36,44,45,41,43,0,47],
[36,35,34,39,39,37,40,50,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,33,42,42,47,33,33,46,37],
[46,0,38,45,48,42,43,31,44,40],
[47,42,0,55,48,49,37,46,50,39],
[38,35,25,0,43,38,38,36,42,34],
[38,32,32,37,0,39,36,29,41,37],
[33,38,31,42,41,0,34,25,36,36],
[47,37,43,42,44,46,0,41,46,35],
[47,49,34,44,51,55,39,0,47,42],
[34,36,30,38,39,44,34,33,0,39],
[43,40,41,46,43,44,45,38,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,35,38,23,37,18,31,28,33],
[44,0,26,26,19,34,23,39,21,38],
[45,54,0,48,44,43,24,43,33,48],
[42,54,32,0,21,45,16,40,24,40],
[57,61,36,59,0,56,38,46,26,58],
[43,46,37,35,24,0,27,35,27,48],
[62,57,56,64,42,53,0,40,50,57],
[49,41,37,40,34,45,40,0,25,47],
[52,59,47,56,54,53,30,55,0,57],
[47,42,32,40,22,32,23,33,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,37,36,47,36,42,36,49,34],
[40,0,42,37,40,31,38,33,36,32],
[43,38,0,37,49,30,47,40,40,40],
[44,43,43,0,44,40,48,38,39,39],
[33,40,31,36,0,27,46,33,39,37],
[44,49,50,40,53,0,49,43,48,35],
[38,42,33,32,34,31,0,38,41,31],
[44,47,40,42,47,37,42,0,42,38],
[31,44,40,41,41,32,39,38,0,36],
[46,48,40,41,43,45,49,42,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,44,36,40,34,39,44,33,40],
[39,0,44,38,36,36,35,41,33,41],
[36,36,0,35,35,32,34,38,30,39],
[44,42,45,0,33,31,31,43,40,39],
[40,44,45,47,0,43,38,45,39,43],
[46,44,48,49,37,0,42,43,40,48],
[41,45,46,49,42,38,0,45,38,48],
[36,39,42,37,35,37,35,0,34,33],
[47,47,50,40,41,40,42,46,0,45],
[40,39,41,41,37,32,32,47,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,33,34,40,36,38,42,42,34],
[29,0,23,24,35,27,32,41,31,20],
[47,57,0,38,58,33,41,41,45,48],
[46,56,42,0,38,32,25,46,51,51],
[40,45,22,42,0,22,30,34,41,40],
[44,53,47,48,58,0,33,42,45,53],
[42,48,39,55,50,47,0,42,50,40],
[38,39,39,34,46,38,38,0,37,24],
[38,49,35,29,39,35,30,43,0,48],
[46,60,32,29,40,27,40,56,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,41,49,33,45,37,42,51,37],
[34,0,29,38,27,32,39,26,39,39],
[39,51,0,41,36,39,39,46,46,44],
[31,42,39,0,30,35,34,33,45,36],
[47,53,44,50,0,43,37,35,38,36],
[35,48,41,45,37,0,38,38,43,34],
[43,41,41,46,43,42,0,38,47,38],
[38,54,34,47,45,42,42,0,43,37],
[29,41,34,35,42,37,33,37,0,35],
[43,41,36,44,44,46,42,43,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,47,34,36,39,41,32,39,37],
[42,0,42,37,41,37,47,31,38,36],
[33,38,0,35,36,38,42,34,44,37],
[46,43,45,0,43,39,42,39,45,41],
[44,39,44,37,0,36,45,35,42,37],
[41,43,42,41,44,0,40,45,38,39],
[39,33,38,38,35,40,0,35,34,34],
[48,49,46,41,45,35,45,0,46,42],
[41,42,36,35,38,42,46,34,0,37],
[43,44,43,39,43,41,46,38,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,37,32,41,38,43,35,34,36],
[35,0,40,38,47,42,50,45,41,41],
[43,40,0,32,42,46,48,44,50,30],
[48,42,48,0,58,40,55,40,42,38],
[39,33,38,22,0,31,47,31,33,37],
[42,38,34,40,49,0,56,43,44,44],
[37,30,32,25,33,24,0,37,35,33],
[45,35,36,40,49,37,43,0,42,34],
[46,39,30,38,47,36,45,38,0,33],
[44,39,50,42,43,36,47,46,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,38,18,36,64,36,19,61,54],
[42,0,36,26,17,43,36,17,42,35],
[42,44,0,44,36,52,54,23,51,34],
[62,54,36,0,45,62,45,33,62,45],
[44,63,44,35,0,61,35,44,61,37],
[16,37,28,18,19,0,28,25,16,28],
[44,44,26,35,45,52,0,16,44,35],
[61,63,57,47,36,55,64,0,61,54],
[19,38,29,18,19,64,36,19,0,38],
[26,45,46,35,43,52,45,26,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,48,42,41,47,48,45,45,47],
[41,0,51,45,36,46,45,39,43,42],
[32,29,0,36,29,32,39,32,35,34],
[38,35,44,0,30,38,41,38,32,42],
[39,44,51,50,0,48,38,42,46,44],
[33,34,48,42,32,0,46,45,46,46],
[32,35,41,39,42,34,0,39,38,41],
[35,41,48,42,38,35,41,0,40,41],
[35,37,45,48,34,34,42,40,0,39],
[33,38,46,38,36,34,39,39,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,38,41,34,45,44,39,39,39],
[42,0,43,41,46,42,47,41,36,39],
[42,37,0,43,39,45,48,37,41,34],
[39,39,37,0,37,41,40,37,38,29],
[46,34,41,43,0,46,45,39,42,42],
[35,38,35,39,34,0,42,36,42,37],
[36,33,32,40,35,38,0,31,35,34],
[41,39,43,43,41,44,49,0,39,36],
[41,44,39,42,38,38,45,41,0,40],
[41,41,46,51,38,43,46,44,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,43,41,51,48,40,42,50,45],
[29,0,32,36,35,29,38,37,32,38],
[37,48,0,46,43,40,45,44,44,55],
[39,44,34,0,48,39,38,37,41,41],
[29,45,37,32,0,33,45,37,47,37],
[32,51,40,41,47,0,50,43,38,47],
[40,42,35,42,35,30,0,43,37,43],
[38,43,36,43,43,37,37,0,32,44],
[30,48,36,39,33,42,43,48,0,44],
[35,42,25,39,43,33,37,36,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,39,43,41,41,38,37,44,42],
[38,0,37,38,38,42,42,36,38,44],
[41,43,0,36,34,43,41,37,40,39],
[37,42,44,0,45,43,39,36,41,42],
[39,42,46,35,0,44,41,45,38,44],
[39,38,37,37,36,0,33,41,42,42],
[42,38,39,41,39,47,0,38,48,36],
[43,44,43,44,35,39,42,0,41,39],
[36,42,40,39,42,38,32,39,0,41],
[38,36,41,38,36,38,44,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,42,40,38,44,27,29,35,40],
[41,0,37,31,34,43,28,32,33,31],
[38,43,0,44,47,37,39,41,40,49],
[40,49,36,0,33,37,32,36,36,35],
[42,46,33,47,0,42,37,43,39,38],
[36,37,43,43,38,0,32,36,35,36],
[53,52,41,48,43,48,0,45,40,43],
[51,48,39,44,37,44,35,0,38,43],
[45,47,40,44,41,45,40,42,0,40],
[40,49,31,45,42,44,37,37,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,36,38,52,42,52,54,47,31],
[34,0,46,30,39,27,56,67,53,35],
[44,34,0,44,44,33,66,56,55,43],
[42,50,36,0,55,44,57,57,57,35],
[28,41,36,25,0,36,37,42,47,35],
[38,53,47,36,44,0,51,67,57,44],
[28,24,14,23,43,29,0,35,36,17],
[26,13,24,23,38,13,45,0,41,30],
[33,27,25,23,33,23,44,39,0,23],
[49,45,37,45,45,36,63,50,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,35,38,45,44,33,36,31,37],
[34,0,38,38,36,38,32,39,31,36],
[45,42,0,40,45,40,38,36,40,40],
[42,42,40,0,38,42,36,39,44,41],
[35,44,35,42,0,38,41,33,39,35],
[36,42,40,38,42,0,31,33,37,32],
[47,48,42,44,39,49,0,39,39,35],
[44,41,44,41,47,47,41,0,39,42],
[49,49,40,36,41,43,41,41,0,40],
[43,44,40,39,45,48,45,38,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,37,46,54,36,37,46,46,35],
[44,0,18,54,44,51,21,45,52,25],
[43,62,0,72,70,70,28,52,60,25],
[34,26,8,0,50,43,18,37,60,25],
[26,36,10,30,0,28,21,30,37,25],
[44,29,10,37,52,0,21,37,60,35],
[43,59,52,62,59,59,0,34,59,42],
[34,35,28,43,50,43,46,0,59,43],
[34,28,20,20,43,20,21,21,0,35],
[45,55,55,55,55,45,38,37,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,26,53,0,54,54,53,53,80],
[0,0,0,27,0,27,27,0,0,26],
[54,80,0,54,54,54,54,54,27,80],
[27,53,26,0,0,27,27,26,26,53],
[80,80,26,80,0,80,54,53,53,80],
[26,53,26,53,0,0,27,53,53,53],
[26,53,26,53,26,53,0,53,53,53],
[27,80,26,54,27,27,27,0,26,80],
[27,80,53,54,27,27,27,54,0,80],
[0,54,0,27,0,27,27,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,47,52,34,53,47,39,37,42],
[33,0,18,44,32,40,30,32,33,32],
[33,62,0,38,33,34,39,20,40,39],
[28,36,42,0,42,41,13,27,20,28],
[46,48,47,38,0,40,33,41,39,33],
[27,40,46,39,40,0,38,47,32,33],
[33,50,41,67,47,42,0,35,40,35],
[41,48,60,53,39,33,45,0,33,53],
[43,47,40,60,41,48,40,47,0,55],
[38,48,41,52,47,47,45,27,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,38,39,38,43,40,43,37,40],
[36,0,37,39,35,36,35,38,36,36],
[42,43,0,41,41,36,37,45,42,40],
[41,41,39,0,44,38,42,39,34,41],
[42,45,39,36,0,38,33,42,45,39],
[37,44,44,42,42,0,41,45,40,42],
[40,45,43,38,47,39,0,44,44,48],
[37,42,35,41,38,35,36,0,38,44],
[43,44,38,46,35,40,36,42,0,46],
[40,44,40,39,41,38,32,36,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,30,28,31,33,31,33,40,42],
[40,0,32,36,35,34,38,33,43,33],
[50,48,0,46,40,45,47,43,40,48],
[52,44,34,0,40,47,39,33,42,40],
[49,45,40,40,0,48,52,43,43,32],
[47,46,35,33,32,0,36,33,41,31],
[49,42,33,41,28,44,0,41,41,36],
[47,47,37,47,37,47,39,0,36,44],
[40,37,40,38,37,39,39,44,0,34],
[38,47,32,40,48,49,44,36,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,32,45,41,36,36,43,46,43],
[37,0,38,35,37,33,32,39,43,41],
[48,42,0,43,44,39,38,42,41,45],
[35,45,37,0,41,31,34,37,37,39],
[39,43,36,39,0,40,30,39,39,38],
[44,47,41,49,40,0,39,43,43,46],
[44,48,42,46,50,41,0,37,43,43],
[37,41,38,43,41,37,43,0,34,45],
[34,37,39,43,41,37,37,46,0,44],
[37,39,35,41,42,34,37,35,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,41,28,43,37,33,32,40,33],
[52,0,45,34,45,42,32,45,42,33],
[39,35,0,36,43,45,34,33,32,38],
[52,46,44,0,51,42,41,38,47,46],
[37,35,37,29,0,36,30,38,38,27],
[43,38,35,38,44,0,42,35,38,34],
[47,48,46,39,50,38,0,43,44,38],
[48,35,47,42,42,45,37,0,38,34],
[40,38,48,33,42,42,36,42,0,34],
[47,47,42,34,53,46,42,46,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,54,43,39,35,42,44,40,46],
[37,0,46,37,37,38,41,43,43,42],
[26,34,0,31,34,30,28,33,31,19],
[37,43,49,0,40,42,41,50,42,38],
[41,43,46,40,0,44,52,51,41,44],
[45,42,50,38,36,0,43,45,40,40],
[38,39,52,39,28,37,0,39,40,44],
[36,37,47,30,29,35,41,0,34,40],
[40,37,49,38,39,40,40,46,0,36],
[34,38,61,42,36,40,36,40,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,46,41,43,39,45,41,40,42],
[43,0,39,35,39,43,39,39,43,41],
[34,41,0,37,38,45,43,35,41,44],
[39,45,43,0,41,40,49,38,37,49],
[37,41,42,39,0,41,39,31,38,45],
[41,37,35,40,39,0,35,30,34,40],
[35,41,37,31,41,45,0,36,34,43],
[39,41,45,42,49,50,44,0,41,47],
[40,37,39,43,42,46,46,39,0,42],
[38,39,36,31,35,40,37,33,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,40,51,38,40,48,33,41,33],
[38,0,32,45,36,26,29,38,34,34],
[40,48,0,46,42,39,45,41,38,39],
[29,35,34,0,34,29,38,39,31,26],
[42,44,38,46,0,44,45,37,39,40],
[40,54,41,51,36,0,46,47,46,35],
[32,51,35,42,35,34,0,37,38,40],
[47,42,39,41,43,33,43,0,37,36],
[39,46,42,49,41,34,42,43,0,41],
[47,46,41,54,40,45,40,44,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,20,10,30,30,30,29,30,30],
[69,0,39,48,50,49,39,49,39,60],
[60,41,0,40,60,50,49,70,60,61],
[70,32,40,0,51,51,40,60,51,41],
[50,30,20,29,0,40,29,48,21,42],
[50,31,30,29,40,0,39,49,31,52],
[50,41,31,40,51,41,0,69,42,42],
[51,31,10,20,32,31,11,0,32,22],
[50,41,20,29,59,49,38,48,0,40],
[50,20,19,39,38,28,38,58,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,47,43,38,37,38,39,30,36],
[39,0,40,36,40,33,46,39,39,32],
[33,40,0,45,38,37,36,37,34,40],
[37,44,35,0,32,32,40,38,37,36],
[42,40,42,48,0,39,43,38,38,33],
[43,47,43,48,41,0,43,43,36,41],
[42,34,44,40,37,37,0,37,37,37],
[41,41,43,42,42,37,43,0,44,40],
[50,41,46,43,42,44,43,36,0,41],
[44,48,40,44,47,39,43,40,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,42,44,35,32,36,35,35,31],
[33,0,40,40,34,32,31,34,38,34],
[38,40,0,41,35,35,39,41,41,31],
[36,40,39,0,37,30,34,33,39,31],
[45,46,45,43,0,38,47,43,47,42],
[48,48,45,50,42,0,43,43,52,38],
[44,49,41,46,33,37,0,42,39,40],
[45,46,39,47,37,37,38,0,45,37],
[45,42,39,41,33,28,41,35,0,36],
[49,46,49,49,38,42,40,43,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,47,44,40,44,38,48,39,47],
[39,0,46,42,33,39,39,41,39,50],
[33,34,0,47,35,38,34,45,40,40],
[36,38,33,0,39,37,34,39,32,36],
[40,47,45,41,0,46,41,44,41,51],
[36,41,42,43,34,0,43,41,39,43],
[42,41,46,46,39,37,0,54,45,53],
[32,39,35,41,36,39,26,0,33,41],
[41,41,40,48,39,41,35,47,0,51],
[33,30,40,44,29,37,27,39,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,20,38,35,39,42,45,34,38],
[38,0,36,37,31,39,44,40,28,36],
[60,44,0,41,49,51,51,47,38,43],
[42,43,39,0,47,42,57,50,39,43],
[45,49,31,33,0,46,44,48,30,40],
[41,41,29,38,34,0,46,43,30,30],
[38,36,29,23,36,34,0,55,28,30],
[35,40,33,30,32,37,25,0,26,26],
[46,52,42,41,50,50,52,54,0,26],
[42,44,37,37,40,50,50,54,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,43,48,47,46,38,47,47,42],
[34,0,39,36,39,45,33,38,39,38],
[37,41,0,40,48,45,41,45,46,43],
[32,44,40,0,37,33,35,32,38,42],
[33,41,32,43,0,41,36,42,42,37],
[34,35,35,47,39,0,33,38,42,33],
[42,47,39,45,44,47,0,48,40,40],
[33,42,35,48,38,42,32,0,42,37],
[33,41,34,42,38,38,40,38,0,28],
[38,42,37,38,43,47,40,43,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,41,29,40,44,38,46,38,39],
[31,0,33,24,37,24,41,37,36,46],
[39,47,0,37,35,33,44,41,34,39],
[51,56,43,0,43,41,43,50,37,48],
[40,43,45,37,0,39,39,44,32,41],
[36,56,47,39,41,0,42,44,41,40],
[42,39,36,37,41,38,0,36,38,46],
[34,43,39,30,36,36,44,0,34,48],
[42,44,46,43,48,39,42,46,0,44],
[41,34,41,32,39,40,34,32,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,49,47,55,37,44,43,40,51],
[28,0,37,36,50,35,38,34,37,40],
[31,43,0,41,51,36,38,34,39,41],
[33,44,39,0,49,34,41,37,34,44],
[25,30,29,31,0,22,31,22,29,31],
[43,45,44,46,58,0,41,40,43,50],
[36,42,42,39,49,39,0,36,36,51],
[37,46,46,43,58,40,44,0,44,49],
[40,43,41,46,51,37,44,36,0,42],
[29,40,39,36,49,30,29,31,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,39,40,40,51,36,52,45,38],
[38,0,31,55,42,39,38,43,40,42],
[41,49,0,40,42,37,38,38,33,36],
[40,25,40,0,27,35,28,46,31,30],
[40,38,38,53,0,44,45,48,45,41],
[29,41,43,45,36,0,36,38,34,43],
[44,42,42,52,35,44,0,44,42,43],
[28,37,42,34,32,42,36,0,34,39],
[35,40,47,49,35,46,38,46,0,35],
[42,38,44,50,39,37,37,41,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,44,51,59,40,48,65,41,33],
[32,0,37,48,50,42,47,49,46,36],
[36,43,0,57,61,35,50,57,43,38],
[29,32,23,0,42,37,47,47,34,28],
[21,30,19,38,0,27,43,36,33,31],
[40,38,45,43,53,0,50,51,40,45],
[32,33,30,33,37,30,0,42,35,30],
[15,31,23,33,44,29,38,0,24,19],
[39,34,37,46,47,40,45,56,0,33],
[47,44,42,52,49,35,50,61,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,60,40,39,19,39,41,39],
[41,0,41,21,21,61,40,20,41,60],
[41,39,0,40,40,20,40,20,21,19],
[20,59,40,0,19,40,19,40,41,39],
[40,59,40,61,0,40,39,40,61,59],
[41,19,60,40,40,0,40,20,21,19],
[61,40,40,61,41,40,0,40,61,59],
[41,60,60,40,40,60,40,0,41,60],
[39,39,59,39,19,59,19,39,0,59],
[41,20,61,41,21,61,21,20,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,44,35,34,34,37,36,37],
[37,0,38,36,38,35,35,34,35,35],
[40,42,0,38,37,38,33,39,37,42],
[36,44,42,0,36,36,32,35,35,30],
[45,42,43,44,0,45,34,41,42,45],
[46,45,42,44,35,0,36,38,32,39],
[46,45,47,48,46,44,0,40,43,47],
[43,46,41,45,39,42,40,0,37,44],
[44,45,43,45,38,48,37,43,0,47],
[43,45,38,50,35,41,33,36,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,50,41,51,40,39,46,40,44],
[38,0,40,44,49,42,39,39,34,37],
[30,40,0,37,43,29,36,41,41,36],
[39,36,43,0,44,37,39,40,35,28],
[29,31,37,36,0,24,25,31,28,25],
[40,38,51,43,56,0,40,41,39,42],
[41,41,44,41,55,40,0,46,40,38],
[34,41,39,40,49,39,34,0,34,34],
[40,46,39,45,52,41,40,46,0,38],
[36,43,44,52,55,38,42,46,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,54,52,52,36,44,44,44,60],
[38,0,47,44,26,37,54,54,45,36],
[26,33,0,52,33,25,43,43,33,32],
[28,36,28,0,26,18,35,55,27,26],
[28,54,47,54,0,47,54,72,38,44],
[44,43,55,62,33,0,44,64,44,42],
[36,26,37,45,26,36,0,54,27,34],
[36,26,37,25,8,16,26,0,18,34],
[36,35,47,53,42,36,53,62,0,44],
[20,44,48,54,36,38,46,46,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,47,44,41,33,35,43,34],
[37,0,41,45,49,37,39,41,35,28],
[40,39,0,48,50,44,37,41,39,36],
[33,35,32,0,41,40,34,27,38,34],
[36,31,30,39,0,32,24,30,33,31],
[39,43,36,40,48,0,42,38,40,38],
[47,41,43,46,56,38,0,38,42,39],
[45,39,39,53,50,42,42,0,42,45],
[37,45,41,42,47,40,38,38,0,34],
[46,52,44,46,49,42,41,35,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,33,24,57,57,26,46,37,18],
[58,0,39,51,46,58,45,45,33,56],
[47,41,0,61,60,56,37,59,47,35],
[56,29,19,0,56,56,19,38,35,36],
[23,34,20,24,0,57,31,37,31,35],
[23,22,24,24,23,0,24,30,30,23],
[54,35,43,61,49,56,0,60,43,54],
[34,35,21,42,43,50,20,0,37,24],
[43,47,33,45,49,50,37,43,0,34],
[62,24,45,44,45,57,26,56,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,34,35,48,46,44,41,39,44],
[35,0,38,30,34,44,48,43,35,47],
[46,42,0,40,42,47,46,39,26,40],
[45,50,40,0,45,47,42,40,41,42],
[32,46,38,35,0,41,40,49,35,40],
[34,36,33,33,39,0,39,35,32,25],
[36,32,34,38,40,41,0,41,35,38],
[39,37,41,40,31,45,39,0,41,26],
[41,45,54,39,45,48,45,39,0,41],
[36,33,40,38,40,55,42,54,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,39,40,34,38,45,51,37,40],
[49,0,46,47,35,42,45,45,41,45],
[41,34,0,46,42,36,46,41,36,42],
[40,33,34,0,39,28,37,39,35,38],
[46,45,38,41,0,35,40,47,40,41],
[42,38,44,52,45,0,45,48,46,54],
[35,35,34,43,40,35,0,45,40,46],
[29,35,39,41,33,32,35,0,36,35],
[43,39,44,45,40,34,40,44,0,38],
[40,35,38,42,39,26,34,45,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,42,37,34,27,24,29,34,40],
[51,0,49,37,44,39,33,32,31,42],
[38,31,0,36,37,28,30,36,32,36],
[43,43,44,0,41,34,27,40,34,46],
[46,36,43,39,0,44,28,44,44,52],
[53,41,52,46,36,0,44,33,32,46],
[56,47,50,53,52,36,0,37,41,53],
[51,48,44,40,36,47,43,0,49,49],
[46,49,48,46,36,48,39,31,0,43],
[40,38,44,34,28,34,27,31,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,37,35,28,35,40,28,42,32],
[41,0,32,35,34,32,37,29,37,31],
[43,48,0,36,37,40,40,31,44,40],
[45,45,44,0,40,44,49,41,49,37],
[52,46,43,40,0,40,48,43,38,37],
[45,48,40,36,40,0,41,36,45,39],
[40,43,40,31,32,39,0,30,43,41],
[52,51,49,39,37,44,50,0,48,38],
[38,43,36,31,42,35,37,32,0,33],
[48,49,40,43,43,41,39,42,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,46,38,38,39,34,39,37,34],
[46,0,51,42,56,46,48,48,39,38],
[34,29,0,34,41,41,46,41,31,41],
[42,38,46,0,44,55,54,46,45,41],
[42,24,39,36,0,43,38,36,39,37],
[41,34,39,25,37,0,39,38,39,30],
[46,32,34,26,42,41,0,40,39,40],
[41,32,39,34,44,42,40,0,30,33],
[43,41,49,35,41,41,41,50,0,36],
[46,42,39,39,43,50,40,47,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,40,40,64,50,64,63,56,56],
[41,0,33,25,55,25,33,40,32,31],
[40,47,0,32,54,40,32,38,48,38],
[40,55,48,0,71,48,47,62,47,46],
[16,25,26,9,0,17,17,31,16,14],
[30,55,40,32,63,0,40,45,39,30],
[16,47,48,33,63,40,0,38,39,29],
[17,40,42,18,49,35,42,0,33,32],
[24,48,32,33,64,41,41,47,0,31],
[24,49,42,34,66,50,51,48,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,38,48,46,49,45,41,37,40],
[41,0,39,45,40,51,41,38,38,41],
[42,41,0,42,48,50,46,40,42,47],
[32,35,38,0,43,39,42,37,37,39],
[34,40,32,37,0,43,44,32,37,37],
[31,29,30,41,37,0,37,33,33,29],
[35,39,34,38,36,43,0,37,31,38],
[39,42,40,43,48,47,43,0,38,44],
[43,42,38,43,43,47,49,42,0,45],
[40,39,33,41,43,51,42,36,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,36,37,30,43,42,41,27],
[39,0,43,38,40,40,34,40,42,32],
[39,37,0,44,36,36,40,46,47,33],
[44,42,36,0,39,33,39,38,42,28],
[43,40,44,41,0,42,45,37,37,40],
[50,40,44,47,38,0,39,45,44,39],
[37,46,40,41,35,41,0,36,41,37],
[38,40,34,42,43,35,44,0,43,28],
[39,38,33,38,43,36,39,37,0,27],
[53,48,47,52,40,41,43,52,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,40,29,38,30,38,37,33,37],
[39,0,42,45,42,39,29,40,38,41],
[40,38,0,41,35,39,31,46,37,42],
[51,35,39,0,44,46,38,42,39,40],
[42,38,45,36,0,34,31,32,37,37],
[50,41,41,34,46,0,35,39,39,50],
[42,51,49,42,49,45,0,41,47,37],
[43,40,34,38,48,41,39,0,34,52],
[47,42,43,41,43,41,33,46,0,47],
[43,39,38,40,43,30,43,28,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,43,41,34,46,38,50,38,43],
[48,0,44,43,32,44,53,46,52,39],
[37,36,0,52,31,53,39,48,35,35],
[39,37,28,0,37,45,32,51,26,36],
[46,48,49,43,0,48,45,65,48,37],
[34,36,27,35,32,0,38,43,29,35],
[42,27,41,48,35,42,0,45,30,40],
[30,34,32,29,15,37,35,0,35,30],
[42,28,45,54,32,51,50,45,0,46],
[37,41,45,44,43,45,40,50,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,36,34,31,40,35,37,48,41],
[42,0,37,26,34,36,49,38,54,37],
[44,43,0,44,38,44,46,43,54,46],
[46,54,36,0,44,32,48,38,60,41],
[49,46,42,36,0,34,43,55,53,45],
[40,44,36,48,46,0,56,54,56,44],
[45,31,34,32,37,24,0,44,52,41],
[43,42,37,42,25,26,36,0,40,39],
[32,26,26,20,27,24,28,40,0,38],
[39,43,34,39,35,36,39,41,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,58,45,37,55,47,49,36,48],
[34,0,54,46,38,47,43,44,40,41],
[22,26,0,25,23,39,30,30,30,26],
[35,34,55,0,39,41,39,42,37,39],
[43,42,57,41,0,49,41,42,40,37],
[25,33,41,39,31,0,33,35,29,35],
[33,37,50,41,39,47,0,45,35,36],
[31,36,50,38,38,45,35,0,33,31],
[44,40,50,43,40,51,45,47,0,39],
[32,39,54,41,43,45,44,49,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,54,43,36,35,50,62,53,52],
[26,0,55,43,54,35,24,71,44,41],
[26,25,0,17,44,45,34,62,35,34],
[37,37,63,0,62,36,45,54,44,54],
[44,26,36,18,0,36,25,63,36,25],
[45,45,35,44,44,0,60,64,52,45],
[30,56,46,35,55,20,0,55,36,37],
[18,9,18,26,17,16,25,0,27,26],
[27,36,45,36,44,28,44,53,0,45],
[28,39,46,26,55,35,43,54,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,44,42,48,58,61,51,47,39],
[31,0,23,38,47,47,43,29,46,23],
[36,57,0,49,51,54,59,49,42,41],
[38,42,31,0,41,43,52,44,32,31],
[32,33,29,39,0,46,49,39,46,34],
[22,33,26,37,34,0,43,30,17,15],
[19,37,21,28,31,37,0,14,23,22],
[29,51,31,36,41,50,66,0,43,37],
[33,34,38,48,34,63,57,37,0,27],
[41,57,39,49,46,65,58,43,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,38,38,33,32,48,32,39,47],
[40,0,46,37,40,36,49,41,44,41],
[42,34,0,28,36,35,49,30,41,42],
[42,43,52,0,44,38,55,37,45,47],
[47,40,44,36,0,30,45,32,49,42],
[48,44,45,42,50,0,49,30,54,47],
[32,31,31,25,35,31,0,24,38,35],
[48,39,50,43,48,50,56,0,47,45],
[41,36,39,35,31,26,42,33,0,41],
[33,39,38,33,38,33,45,35,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,36,39,37,45,45,36,32,33],
[43,0,40,44,33,52,40,45,39,36],
[44,40,0,42,38,41,36,40,40,36],
[41,36,38,0,34,43,40,35,38,37],
[43,47,42,46,0,44,41,42,41,35],
[35,28,39,37,36,0,36,31,35,31],
[35,40,44,40,39,44,0,45,39,34],
[44,35,40,45,38,49,35,0,41,36],
[48,41,40,42,39,45,41,39,0,41],
[47,44,44,43,45,49,46,44,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,40,25,53,37,30,30,47,27],
[55,0,59,45,54,49,53,58,50,39],
[40,21,0,28,39,37,38,21,33,23],
[55,35,52,0,52,58,52,51,47,33],
[27,26,41,28,0,44,31,41,33,23],
[43,31,43,22,36,0,30,32,42,29],
[50,27,42,28,49,50,0,43,49,34],
[50,22,59,29,39,48,37,0,44,46],
[33,30,47,33,47,38,31,36,0,23],
[53,41,57,47,57,51,46,34,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,29,28,36,36,34,36,32,35],
[46,0,31,31,39,50,47,34,33,31],
[51,49,0,45,43,49,48,40,43,45],
[52,49,35,0,39,51,57,47,53,45],
[44,41,37,41,0,52,47,39,40,38],
[44,30,31,29,28,0,30,31,32,30],
[46,33,32,23,33,50,0,31,29,35],
[44,46,40,33,41,49,49,0,42,40],
[48,47,37,27,40,48,51,38,0,32],
[45,49,35,35,42,50,45,40,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,27,35,44,35,50,39,46,50],
[43,0,37,33,49,29,33,16,31,46],
[53,43,0,52,30,48,40,43,34,49],
[45,47,28,0,30,39,38,42,41,32],
[36,31,50,50,0,30,52,40,40,38],
[45,51,32,41,50,0,41,41,54,52],
[30,47,40,42,28,39,0,42,44,39],
[41,64,37,38,40,39,38,0,36,49],
[34,49,46,39,40,26,36,44,0,34],
[30,34,31,48,42,28,41,31,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,37,40,42,34,36,37,36,36],
[46,0,35,47,48,41,39,47,35,39],
[43,45,0,48,45,38,34,42,42,35],
[40,33,32,0,45,41,37,36,37,40],
[38,32,35,35,0,41,36,40,34,34],
[46,39,42,39,39,0,41,36,38,41],
[44,41,46,43,44,39,0,40,41,42],
[43,33,38,44,40,44,40,0,41,43],
[44,45,38,43,46,42,39,39,0,41],
[44,41,45,40,46,39,38,37,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,42,37,40,42,39,40,34,40],
[48,0,52,38,46,46,44,51,29,31],
[38,28,0,26,30,42,31,37,36,32],
[43,42,54,0,43,51,43,49,49,39],
[40,34,50,37,0,46,37,49,45,36],
[38,34,38,29,34,0,41,32,30,26],
[41,36,49,37,43,39,0,41,41,38],
[40,29,43,31,31,48,39,0,36,29],
[46,51,44,31,35,50,39,44,0,44],
[40,49,48,41,44,54,42,51,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,41,40,38,42,35,35,33,40],
[37,0,43,42,30,40,39,35,43,42],
[39,37,0,42,33,41,36,37,40,41],
[40,38,38,0,30,36,33,33,36,35],
[42,50,47,50,0,50,40,36,41,44],
[38,40,39,44,30,0,37,37,33,37],
[45,41,44,47,40,43,0,43,45,41],
[45,45,43,47,44,43,37,0,43,42],
[47,37,40,44,39,47,35,37,0,43],
[40,38,39,45,36,43,39,38,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,45,48,33,51,42,44,28,38],
[50,0,49,50,57,49,57,44,42,32],
[35,31,0,46,30,46,48,36,34,38],
[32,30,34,0,40,40,48,45,24,45],
[47,23,50,40,0,60,43,38,34,44],
[29,31,34,40,20,0,36,26,22,39],
[38,23,32,32,37,44,0,25,18,27],
[36,36,44,35,42,54,55,0,41,52],
[52,38,46,56,46,58,62,39,0,41],
[42,48,42,35,36,41,53,28,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,40,54,54,54,41,27,54,41],
[40,0,66,55,68,43,29,41,43,67],
[40,14,0,55,41,29,29,15,29,53],
[26,25,25,0,13,27,0,0,13,12],
[26,12,39,67,0,40,14,0,26,26],
[26,37,51,53,40,0,15,12,12,24],
[39,51,51,80,66,65,0,51,51,52],
[53,39,65,80,80,68,29,0,54,53],
[26,37,51,67,54,68,29,26,0,53],
[39,13,27,68,54,56,28,27,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,43,37,58,37,45,43,45,51],
[41,0,31,13,39,20,34,32,26,42],
[37,49,0,32,53,40,40,41,33,54],
[43,67,48,0,74,58,59,52,36,72],
[22,41,27,6,0,13,24,36,30,35],
[43,60,40,22,67,0,58,49,50,51],
[35,46,40,21,56,22,0,32,36,35],
[37,48,39,28,44,31,48,0,30,42],
[35,54,47,44,50,30,44,50,0,44],
[29,38,26,8,45,29,45,38,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,44,37,37,34,47,33,37,34],
[36,0,39,38,39,37,44,37,38,37],
[36,41,0,29,32,19,38,23,30,33],
[43,42,51,0,43,37,50,34,34,40],
[43,41,48,37,0,36,39,43,38,36],
[46,43,61,43,44,0,50,46,39,38],
[33,36,42,30,41,30,0,25,28,30],
[47,43,57,46,37,34,55,0,41,39],
[43,42,50,46,42,41,52,39,0,41],
[46,43,47,40,44,42,50,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,38,34,45,44,44,42,44,44],
[34,0,41,39,42,40,50,38,45,43],
[42,39,0,40,39,38,45,39,40,43],
[46,41,40,0,39,40,50,51,50,49],
[35,38,41,41,0,41,42,37,48,37],
[36,40,42,40,39,0,48,45,44,40],
[36,30,35,30,38,32,0,36,41,37],
[38,42,41,29,43,35,44,0,42,44],
[36,35,40,30,32,36,39,38,0,32],
[36,37,37,31,43,40,43,36,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,44,41,46,45,44,49,44],
[37,0,34,43,43,39,41,40,50,42],
[40,46,0,42,43,46,49,48,47,47],
[36,37,38,0,42,36,40,37,44,34],
[39,37,37,38,0,37,41,39,53,45],
[34,41,34,44,43,0,41,39,42,36],
[35,39,31,40,39,39,0,36,42,38],
[36,40,32,43,41,41,44,0,49,41],
[31,30,33,36,27,38,38,31,0,37],
[36,38,33,46,35,44,42,39,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,46,45,40,43,42,34,47,44],
[45,0,52,45,35,44,45,40,54,54],
[34,28,0,29,34,36,38,22,34,39],
[35,35,51,0,42,36,34,28,40,31],
[40,45,46,38,0,37,38,39,44,41],
[37,36,44,44,43,0,38,34,47,42],
[38,35,42,46,42,42,0,33,47,51],
[46,40,58,52,41,46,47,0,52,46],
[33,26,46,40,36,33,33,28,0,36],
[36,26,41,49,39,38,29,34,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,43,36,38,35,42,47,34],
[41,0,41,48,46,44,52,39,43,48],
[41,39,0,52,39,45,42,40,44,43],
[37,32,28,0,39,37,34,24,34,37],
[44,34,41,41,0,41,42,36,37,41],
[42,36,35,43,39,0,32,36,37,36],
[45,28,38,46,38,48,0,37,39,33],
[38,41,40,56,44,44,43,0,40,41],
[33,37,36,46,43,43,41,40,0,39],
[46,32,37,43,39,44,47,39,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,38,40,37,35,41,36,42,42],
[42,0,35,36,45,39,46,37,42,43],
[42,45,0,41,43,37,43,44,45,50],
[40,44,39,0,41,30,40,35,43,44],
[43,35,37,39,0,29,40,35,41,45],
[45,41,43,50,51,0,48,40,46,47],
[39,34,37,40,40,32,0,29,35,41],
[44,43,36,45,45,40,51,0,52,49],
[38,38,35,37,39,34,45,28,0,42],
[38,37,30,36,35,33,39,31,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,40,80,40,40,80,80,80,80],
[0,0,40,40,0,0,0,40,0,40],
[40,40,0,40,40,0,40,40,40,80],
[0,40,40,0,40,40,40,0,40,40],
[40,80,40,40,0,0,40,40,80,80],
[40,80,80,40,80,0,80,40,80,80],
[0,80,40,40,40,0,0,40,80,40],
[0,40,40,80,40,40,40,0,40,40],
[0,80,40,40,0,0,0,40,0,40],
[0,40,0,40,0,0,40,40,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,40,53,36,40,43,38,41,38],
[43,0,44,44,37,36,37,37,41,37],
[40,36,0,47,35,45,43,42,46,38],
[27,36,33,0,29,33,35,29,39,23],
[44,43,45,51,0,33,50,50,49,41],
[40,44,35,47,47,0,44,42,52,33],
[37,43,37,45,30,36,0,32,45,31],
[42,43,38,51,30,38,48,0,48,40],
[39,39,34,41,31,28,35,32,0,30],
[42,43,42,57,39,47,49,40,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,45,47,37,50,38,46,45,37],
[37,0,46,44,44,43,41,53,49,38],
[35,34,0,35,40,36,39,33,48,37],
[33,36,45,0,36,43,34,37,48,34],
[43,36,40,44,0,43,41,44,43,42],
[30,37,44,37,37,0,34,45,45,33],
[42,39,41,46,39,46,0,45,50,39],
[34,27,47,43,36,35,35,0,42,34],
[35,31,32,32,37,35,30,38,0,32],
[43,42,43,46,38,47,41,46,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,40,40,80,80,40,80,80,80],
[0,0,40,40,40,40,40,40,80,40],
[40,40,0,40,80,40,40,40,40,40],
[40,40,40,0,80,40,40,40,40,40],
[0,40,0,0,0,0,0,0,40,0],
[0,40,40,40,80,0,40,80,80,40],
[40,40,40,40,80,40,0,80,40,40],
[0,40,40,40,80,0,0,0,40,40],
[0,0,40,40,40,0,40,40,0,0],
[0,40,40,40,80,40,40,40,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,52,26,42,32,45,38,55,32],
[39,0,46,39,44,41,45,43,55,40],
[28,34,0,35,45,42,35,38,43,36],
[54,41,45,0,45,31,37,44,54,51],
[38,36,35,35,0,37,37,40,47,35],
[48,39,38,49,43,0,43,49,50,41],
[35,35,45,43,43,37,0,46,49,35],
[42,37,42,36,40,31,34,0,44,40],
[25,25,37,26,33,30,31,36,0,25],
[48,40,44,29,45,39,45,40,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,39,51,43,31,54,42,48,47],
[43,0,39,37,34,36,37,42,32,41],
[41,41,0,51,42,35,51,45,45,56],
[29,43,29,0,37,36,57,42,36,27],
[37,46,38,43,0,36,49,48,41,42],
[49,44,45,44,44,0,46,53,44,39],
[26,43,29,23,31,34,0,30,25,37],
[38,38,35,38,32,27,50,0,41,39],
[32,48,35,44,39,36,55,39,0,39],
[33,39,24,53,38,41,43,41,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,31,46,30,43,39,37,38,49],
[41,0,47,54,37,39,45,42,49,43],
[49,33,0,56,43,40,38,36,54,52],
[34,26,24,0,33,34,30,32,30,33],
[50,43,37,47,0,47,49,39,51,48],
[37,41,40,46,33,0,47,38,44,47],
[41,35,42,50,31,33,0,39,51,44],
[43,38,44,48,41,42,41,0,50,49],
[42,31,26,50,29,36,29,30,0,41],
[31,37,28,47,32,33,36,31,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,39,44,32,43,33,46,40,33],
[36,0,32,49,39,38,40,35,35,37],
[41,48,0,46,33,42,39,34,44,40],
[36,31,34,0,34,44,33,31,41,20],
[48,41,47,46,0,49,43,38,39,38],
[37,42,38,36,31,0,43,34,37,35],
[47,40,41,47,37,37,0,40,37,35],
[34,45,46,49,42,46,40,0,49,40],
[40,45,36,39,41,43,43,31,0,32],
[47,43,40,60,42,45,45,40,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,43,42,46,28,35,36,17,30],
[58,0,49,35,44,35,44,33,50,31],
[37,31,0,41,43,30,29,32,24,35],
[38,45,39,0,21,23,26,25,25,32],
[34,36,37,59,0,36,28,37,28,33],
[52,45,50,57,44,0,51,40,37,31],
[45,36,51,54,52,29,0,52,36,45],
[44,47,48,55,43,40,28,0,42,36],
[63,30,56,55,52,43,44,38,0,37],
[50,49,45,48,47,49,35,44,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,49,47,47,49,42,44,49,29],
[26,0,36,28,38,37,33,27,33,39],
[31,44,0,35,49,49,42,32,46,48],
[33,52,45,0,37,48,39,30,44,34],
[33,42,31,43,0,52,46,29,31,29],
[31,43,31,32,28,0,33,25,37,30],
[38,47,38,41,34,47,0,35,37,43],
[36,53,48,50,51,55,45,0,43,48],
[31,47,34,36,49,43,43,37,0,27],
[51,41,32,46,51,50,37,32,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,41,42,46,43,49,46,45,45],
[41,0,41,42,41,41,37,46,50,40],
[39,39,0,42,40,39,37,40,49,34],
[38,38,38,0,37,42,40,40,49,39],
[34,39,40,43,0,46,40,36,42,40],
[37,39,41,38,34,0,42,41,43,40],
[31,43,43,40,40,38,0,43,43,43],
[34,34,40,40,44,39,37,0,46,34],
[35,30,31,31,38,37,37,34,0,33],
[35,40,46,41,40,40,37,46,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,23,28,31,35,21,36,31,33],
[59,0,40,44,44,50,47,58,59,51],
[57,40,0,42,42,48,38,49,37,48],
[52,36,38,0,46,52,41,47,45,53],
[49,36,38,34,0,51,35,48,43,45],
[45,30,32,28,29,0,44,50,40,40],
[59,33,42,39,45,36,0,55,56,51],
[44,22,31,33,32,30,25,0,34,36],
[49,21,43,35,37,40,24,46,0,33],
[47,29,32,27,35,40,29,44,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,38,35,37,42,44,34,38,42],
[35,0,42,36,43,45,51,41,45,35],
[42,38,0,38,39,38,43,29,41,44],
[45,44,42,0,34,33,47,33,27,42],
[43,37,41,46,0,41,50,35,33,45],
[38,35,42,47,39,0,48,40,42,44],
[36,29,37,33,30,32,0,30,28,34],
[46,39,51,47,45,40,50,0,36,47],
[42,35,39,53,47,38,52,44,0,45],
[38,45,36,38,35,36,46,33,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,37,36,43,51,45,41,36,41],
[37,0,37,41,49,54,39,41,37,42],
[43,43,0,46,51,55,40,46,50,43],
[44,39,34,0,50,58,43,36,37,52],
[37,31,29,30,0,45,37,36,37,38],
[29,26,25,22,35,0,36,33,29,30],
[35,41,40,37,43,44,0,43,41,46],
[39,39,34,44,44,47,37,0,44,38],
[44,43,30,43,43,51,39,36,0,40],
[39,38,37,28,42,50,34,42,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,32,37,46,42,46,24,29,43],
[34,0,35,44,41,38,57,29,37,47],
[48,45,0,42,48,43,51,34,39,45],
[43,36,38,0,35,44,53,36,40,36],
[34,39,32,45,0,46,39,39,36,34],
[38,42,37,36,34,0,50,33,34,43],
[34,23,29,27,41,30,0,25,31,41],
[56,51,46,44,41,47,55,0,40,53],
[51,43,41,40,44,46,49,40,0,44],
[37,33,35,44,46,37,39,27,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,51,40,47,41,38,53,44,41],
[42,0,42,42,43,45,39,50,42,43],
[29,38,0,34,37,32,31,42,35,31],
[40,38,46,0,45,38,39,43,41,41],
[33,37,43,35,0,38,33,40,39,40],
[39,35,48,42,42,0,40,49,41,43],
[42,41,49,41,47,40,0,52,49,41],
[27,30,38,37,40,31,28,0,41,34],
[36,38,45,39,41,39,31,39,0,40],
[39,37,49,39,40,37,39,46,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,32,36,42,33,28,38,32,37],
[35,0,36,36,34,37,33,36,36,43],
[48,44,0,44,44,45,44,53,43,39],
[44,44,36,0,36,45,48,48,37,39],
[38,46,36,44,0,47,34,53,38,42],
[47,43,35,35,33,0,34,38,32,37],
[52,47,36,32,46,46,0,42,40,41],
[42,44,27,32,27,42,38,0,35,36],
[48,44,37,43,42,48,40,45,0,44],
[43,37,41,41,38,43,39,44,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,43,48,40,35,45,43,45,44],
[34,0,38,44,45,44,42,34,41,39],
[37,42,0,44,49,41,52,36,46,32],
[32,36,36,0,42,37,37,35,34,32],
[40,35,31,38,0,34,36,28,34,29],
[45,36,39,43,46,0,49,40,39,42],
[35,38,28,43,44,31,0,30,25,38],
[37,46,44,45,52,40,50,0,44,35],
[35,39,34,46,46,41,55,36,0,41],
[36,41,48,48,51,38,42,45,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,32,37,39,41,33,49,37,46],
[28,0,35,23,39,28,31,33,28,31],
[48,45,0,47,38,40,45,45,32,36],
[43,57,33,0,37,49,42,40,24,46],
[41,41,42,43,0,30,49,51,44,39],
[39,52,40,31,50,0,29,51,38,38],
[47,49,35,38,31,51,0,49,34,51],
[31,47,35,40,29,29,31,0,37,43],
[43,52,48,56,36,42,46,43,0,52],
[34,49,44,34,41,42,29,37,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,43,40,49,41,39,47,54,44],
[48,0,47,46,42,44,37,45,56,47],
[37,33,0,37,44,42,36,41,45,37],
[40,34,43,0,40,37,34,46,49,36],
[31,38,36,40,0,38,40,45,52,40],
[39,36,38,43,42,0,41,43,45,44],
[41,43,44,46,40,39,0,50,42,39],
[33,35,39,34,35,37,30,0,39,30],
[26,24,35,31,28,35,38,41,0,27],
[36,33,43,44,40,36,41,50,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,46,33,43,39,47,35,53,49],
[38,0,47,33,47,39,49,35,53,48],
[34,33,0,33,41,39,52,32,43,44],
[47,47,47,0,45,46,49,36,47,49],
[37,33,39,35,0,35,40,23,48,36],
[41,41,41,34,45,0,44,41,50,47],
[33,31,28,31,40,36,0,29,44,41],
[45,45,48,44,57,39,51,0,56,48],
[27,27,37,33,32,30,36,24,0,35],
[31,32,36,31,44,33,39,32,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,23,37,47,39,43,39,24,37],
[42,0,34,47,56,35,36,65,25,40],
[57,46,0,46,55,42,58,63,43,29],
[43,33,34,0,49,25,42,58,33,25],
[33,24,25,31,0,26,42,56,16,24],
[41,45,38,55,54,0,41,65,48,21],
[37,44,22,38,38,39,0,63,24,36],
[41,15,17,22,24,15,17,0,16,14],
[56,55,37,47,64,32,56,64,0,38],
[43,40,51,55,56,59,44,66,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,34,31,46,39,27,39,25,28],
[29,0,29,42,37,33,29,32,26,29],
[46,51,0,45,45,48,39,36,46,39],
[49,38,35,0,39,58,26,38,33,39],
[34,43,35,41,0,48,29,40,28,28],
[41,47,32,22,32,0,26,35,21,34],
[53,51,41,54,51,54,0,52,33,54],
[41,48,44,42,40,45,28,0,41,46],
[55,54,34,47,52,59,47,39,0,46],
[52,51,41,41,52,46,26,34,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,38,40,47,37,42,43,36,40],
[47,0,52,38,48,44,40,43,43,45],
[42,28,0,32,46,39,30,35,36,38],
[40,42,48,0,51,43,41,42,44,42],
[33,32,34,29,0,28,32,28,38,41],
[43,36,41,37,52,0,33,37,41,42],
[38,40,50,39,48,47,0,42,44,44],
[37,37,45,38,52,43,38,0,41,43],
[44,37,44,36,42,39,36,39,0,38],
[40,35,42,38,39,38,36,37,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,40,32,42,42,40,38,40,40],
[39,0,40,40,39,45,41,39,41,43],
[40,40,0,39,47,51,51,50,48,42],
[48,40,41,0,42,44,44,40,46,42],
[38,41,33,38,0,44,45,42,44,42],
[38,35,29,36,36,0,35,39,38,39],
[40,39,29,36,35,45,0,38,40,41],
[42,41,30,40,38,41,42,0,43,38],
[40,39,32,34,36,42,40,37,0,37],
[40,37,38,38,38,41,39,42,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,40,40,25,40,42,39,42,36],
[34,0,37,38,28,48,46,35,44,36],
[40,43,0,43,37,48,44,44,47,33],
[40,42,37,0,30,40,52,39,34,33],
[55,52,43,50,0,52,53,43,46,40],
[40,32,32,40,28,0,35,28,33,33],
[38,34,36,28,27,45,0,37,26,34],
[41,45,36,41,37,52,43,0,37,43],
[38,36,33,46,34,47,54,43,0,37],
[44,44,47,47,40,47,46,37,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,40,39,36,40,40,39,35,40],
[42,0,43,39,34,45,39,40,31,45],
[40,37,0,39,43,39,38,37,34,46],
[41,41,41,0,36,42,43,47,40,46],
[44,46,37,44,0,43,45,44,36,49],
[40,35,41,38,37,0,40,43,33,43],
[40,41,42,37,35,40,0,38,37,40],
[41,40,43,33,36,37,42,0,37,40],
[45,49,46,40,44,47,43,43,0,45],
[40,35,34,34,31,37,40,40,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,52,46,37,43,42,47,42,39],
[47,0,47,50,40,51,39,48,50,43],
[28,33,0,43,34,36,41,41,38,36],
[34,30,37,0,35,39,40,34,41,36],
[43,40,46,45,0,46,43,48,46,37],
[37,29,44,41,34,0,32,39,40,41],
[38,41,39,40,37,48,0,47,36,36],
[33,32,39,46,32,41,33,0,37,33],
[38,30,42,39,34,40,44,43,0,34],
[41,37,44,44,43,39,44,47,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,33,35,35,49,34,39,31,40],
[43,0,34,33,46,47,33,33,26,32],
[47,46,0,42,43,49,39,40,40,52],
[45,47,38,0,45,49,40,41,36,43],
[45,34,37,35,0,43,29,42,36,35],
[31,33,31,31,37,0,27,42,26,29],
[46,47,41,40,51,53,0,48,37,47],
[41,47,40,39,38,38,32,0,30,35],
[49,54,40,44,44,54,43,50,0,41],
[40,48,28,37,45,51,33,45,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,37,40,45,43,41,48,53,50],
[36,0,39,35,47,49,47,50,56,45],
[43,41,0,35,42,48,43,43,51,42],
[40,45,45,0,48,54,41,43,59,37],
[35,33,38,32,0,49,32,34,45,44],
[37,31,32,26,31,0,33,37,46,29],
[39,33,37,39,48,47,0,37,50,53],
[32,30,37,37,46,43,43,0,53,44],
[27,24,29,21,35,34,30,27,0,29],
[30,35,38,43,36,51,27,36,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,40,44,44,40,42,37,39,45],
[36,0,35,41,42,38,39,40,45,47],
[40,45,0,45,45,44,42,39,43,46],
[36,39,35,0,36,39,36,35,32,46],
[36,38,35,44,0,40,37,37,38,43],
[40,42,36,41,40,0,42,38,37,46],
[38,41,38,44,43,38,0,38,44,47],
[43,40,41,45,43,42,42,0,41,48],
[41,35,37,48,42,43,36,39,0,43],
[35,33,34,34,37,34,33,32,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,41,40,26,45,35,32,41,40],
[34,0,31,36,29,35,34,31,33,38],
[39,49,0,39,34,43,34,38,44,35],
[40,44,41,0,29,44,37,35,37,34],
[54,51,46,51,0,50,42,33,44,38],
[35,45,37,36,30,0,37,31,33,36],
[45,46,46,43,38,43,0,40,46,47],
[48,49,42,45,47,49,40,0,47,48],
[39,47,36,43,36,47,34,33,0,37],
[40,42,45,46,42,44,33,32,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,45,62,52,45,63,59,44,63],
[42,0,43,42,64,42,52,50,32,50],
[35,37,0,51,48,41,58,47,23,54],
[18,38,29,0,31,29,42,34,29,35],
[28,16,32,49,0,30,41,28,21,39],
[35,38,39,51,50,0,42,52,41,40],
[17,28,22,38,39,38,0,43,31,53],
[21,30,33,46,52,28,37,0,23,40],
[36,48,57,51,59,39,49,57,0,52],
[17,30,26,45,41,40,27,40,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,28,0,0,25,25,0,0],
[80,0,28,28,0,0,53,53,0,28],
[80,52,0,53,25,25,53,53,25,53],
[52,52,27,0,0,0,25,52,0,0],
[80,80,55,80,0,0,53,80,55,28],
[80,80,55,80,80,0,53,80,55,28],
[55,27,27,55,27,27,0,27,27,28],
[55,27,27,28,0,0,53,0,0,28],
[80,80,55,80,25,25,53,80,0,28],
[80,52,27,80,52,52,52,52,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,41,34,40,60,46,40,47,35],
[23,0,41,37,26,57,44,34,39,38],
[39,39,0,30,36,43,37,13,32,23],
[46,43,50,0,39,50,41,38,56,37],
[40,54,44,41,0,43,54,37,42,44],
[20,23,37,30,37,0,36,30,42,24],
[34,36,43,39,26,44,0,37,37,38],
[40,46,67,42,43,50,43,0,49,37],
[33,41,48,24,38,38,43,31,0,38],
[45,42,57,43,36,56,42,43,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,34,29,32,30,37,32,38,43],
[25,0,23,23,28,21,36,38,29,34],
[46,57,0,30,42,43,51,33,45,50],
[51,57,50,0,47,40,51,37,45,48],
[48,52,38,33,0,24,38,47,40,45],
[50,59,37,40,56,0,53,46,53,60],
[43,44,29,29,42,27,0,46,39,36],
[48,42,47,43,33,34,34,0,52,52],
[42,51,35,35,40,27,41,28,0,56],
[37,46,30,32,35,20,44,28,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,34,40,42,36,43,38,34,36],
[46,0,46,46,42,40,44,37,47,51],
[46,34,0,47,39,41,42,37,40,41],
[40,34,33,0,41,39,43,37,40,37],
[38,38,41,39,0,36,40,39,36,42],
[44,40,39,41,44,0,42,38,40,47],
[37,36,38,37,40,38,0,39,40,39],
[42,43,43,43,41,42,41,0,36,38],
[46,33,40,40,44,40,40,44,0,43],
[44,29,39,43,38,33,41,42,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,41,37,44,52,42,37,31,35],
[31,0,29,29,38,36,28,32,27,23],
[39,51,0,33,41,43,44,33,32,32],
[43,51,47,0,46,34,44,37,45,41],
[36,42,39,34,0,38,39,26,35,29],
[28,44,37,46,42,0,50,35,37,38],
[38,52,36,36,41,30,0,39,36,39],
[43,48,47,43,54,45,41,0,36,45],
[49,53,48,35,45,43,44,44,0,43],
[45,57,48,39,51,42,41,35,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,46,37,38,38,30,45,42,32],
[42,0,38,35,37,48,38,42,44,34],
[34,42,0,32,33,40,40,40,39,34],
[43,45,48,0,38,46,41,38,43,31],
[42,43,47,42,0,45,39,42,42,42],
[42,32,40,34,35,0,32,38,35,32],
[50,42,40,39,41,48,0,44,42,45],
[35,38,40,42,38,42,36,0,41,29],
[38,36,41,37,38,45,38,39,0,38],
[48,46,46,49,38,48,35,51,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,41,42,40,39,38,46,42,41],
[40,0,37,38,47,40,35,42,41,41],
[39,43,0,40,39,41,39,44,41,40],
[38,42,40,0,40,39,40,44,42,40],
[40,33,41,40,0,33,40,42,45,38],
[41,40,39,41,47,0,47,48,45,51],
[42,45,41,40,40,33,0,45,44,43],
[34,38,36,36,38,32,35,0,42,43],
[38,39,39,38,35,35,36,38,0,42],
[39,39,40,40,42,29,37,37,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,35,41,42,41,37,30,37,35],
[42,0,42,42,46,43,39,39,40,40],
[45,38,0,39,47,47,44,46,46,50],
[39,38,41,0,41,43,37,41,42,35],
[38,34,33,39,0,47,36,39,41,42],
[39,37,33,37,33,0,39,42,33,41],
[43,41,36,43,44,41,0,36,43,38],
[50,41,34,39,41,38,44,0,40,38],
[43,40,34,38,39,47,37,40,0,39],
[45,40,30,45,38,39,42,42,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,22,30,30,52,46,49,20,21],
[35,0,36,34,34,59,46,56,27,29],
[58,44,0,65,50,65,46,66,51,38],
[50,46,15,0,45,59,39,56,34,21],
[50,46,30,35,0,67,32,56,41,22],
[28,21,15,21,13,0,25,41,13,14],
[34,34,34,41,48,55,0,48,27,27],
[31,24,14,24,24,39,32,0,14,31],
[60,53,29,46,39,67,53,66,0,53],
[59,51,42,59,58,66,53,49,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,50,49,45,47,40,46,41,39],
[42,0,41,43,33,46,37,49,33,36],
[30,39,0,46,40,47,34,41,35,37],
[31,37,34,0,35,38,25,38,25,36],
[35,47,40,45,0,44,41,44,41,44],
[33,34,33,42,36,0,34,38,36,34],
[40,43,46,55,39,46,0,40,46,46],
[34,31,39,42,36,42,40,0,32,36],
[39,47,45,55,39,44,34,48,0,49],
[41,44,43,44,36,46,34,44,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,36,49,37,45,41,46,44,52],
[36,0,39,36,34,36,33,46,30,42],
[44,41,0,42,37,40,38,41,34,45],
[31,44,38,0,33,37,35,43,32,46],
[43,46,43,47,0,44,39,45,35,46],
[35,44,40,43,36,0,39,42,40,46],
[39,47,42,45,41,41,0,45,39,53],
[34,34,39,37,35,38,35,0,28,46],
[36,50,46,48,45,40,41,52,0,52],
[28,38,35,34,34,34,27,34,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,32,34,42,34,33,35,41,41],
[45,0,39,38,43,34,40,39,32,43],
[48,41,0,41,43,44,43,38,35,47],
[46,42,39,0,34,39,35,44,29,37],
[38,37,37,46,0,42,34,39,34,42],
[46,46,36,41,38,0,49,39,34,45],
[47,40,37,45,46,31,0,36,31,46],
[45,41,42,36,41,41,44,0,38,38],
[39,48,45,51,46,46,49,42,0,48],
[39,37,33,43,38,35,34,42,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,33,22,38,32,37,41,32,35],
[49,0,49,48,51,38,48,51,45,44],
[47,31,0,34,43,44,39,38,30,35],
[58,32,46,0,49,39,40,51,44,42],
[42,29,37,31,0,35,33,40,38,42],
[48,42,36,41,45,0,38,46,44,42],
[43,32,41,40,47,42,0,49,44,30],
[39,29,42,29,40,34,31,0,40,26],
[48,35,50,36,42,36,36,40,0,34],
[45,36,45,38,38,38,50,54,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,49,58,35,31,43,44,34,36],
[43,0,45,46,40,32,36,36,44,38],
[31,35,0,39,40,33,37,41,36,41],
[22,34,41,0,31,16,28,33,23,25],
[45,40,40,49,0,32,42,38,30,35],
[49,48,47,64,48,0,49,39,32,35],
[37,44,43,52,38,31,0,27,38,25],
[36,44,39,47,42,41,53,0,36,32],
[46,36,44,57,50,48,42,44,0,45],
[44,42,39,55,45,45,55,48,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,35,31,38,38,32,32,38,32],
[50,0,45,32,49,35,37,41,38,44],
[45,35,0,40,42,35,39,35,32,43],
[49,48,40,0,47,45,38,36,45,47],
[42,31,38,33,0,35,43,40,33,40],
[42,45,45,35,45,0,45,36,41,41],
[48,43,41,42,37,35,0,35,35,40],
[48,39,45,44,40,44,45,0,41,48],
[42,42,48,35,47,39,45,39,0,39],
[48,36,37,33,40,39,40,32,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,32,40,37,30,35,36,31,32],
[51,0,37,47,41,43,39,42,42,37],
[48,43,0,40,37,38,41,45,40,42],
[40,33,40,0,40,40,39,38,36,36],
[43,39,43,40,0,41,37,43,37,37],
[50,37,42,40,39,0,42,42,35,38],
[45,41,39,41,43,38,0,47,42,46],
[44,38,35,42,37,38,33,0,40,37],
[49,38,40,44,43,45,38,40,0,44],
[48,43,38,44,43,42,34,43,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,32,32,39,39,33,35,39,43],
[32,0,30,26,27,28,20,30,31,36],
[48,50,0,36,33,36,40,35,44,41],
[48,54,44,0,43,40,37,33,31,45],
[41,53,47,37,0,41,43,36,39,46],
[41,52,44,40,39,0,34,41,38,40],
[47,60,40,43,37,46,0,39,41,40],
[45,50,45,47,44,39,41,0,31,42],
[41,49,36,49,41,42,39,49,0,41],
[37,44,39,35,34,40,40,38,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,41,48,32,37,35,43,35,37],
[40,0,39,50,37,41,36,44,34,41],
[39,41,0,48,39,35,34,41,46,42],
[32,30,32,0,32,33,29,33,36,34],
[48,43,41,48,0,40,42,46,40,43],
[43,39,45,47,40,0,39,41,45,44],
[45,44,46,51,38,41,0,40,46,40],
[37,36,39,47,34,39,40,0,36,38],
[45,46,34,44,40,35,34,44,0,37],
[43,39,38,46,37,36,40,42,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,44,40,36,44,38,35,39,43],
[34,0,41,36,36,46,34,39,44,39],
[36,39,0,38,31,37,31,30,41,32],
[40,44,42,0,36,40,38,34,41,41],
[44,44,49,44,0,41,37,38,44,47],
[36,34,43,40,39,0,31,40,42,39],
[42,46,49,42,43,49,0,37,43,42],
[45,41,50,46,42,40,43,0,45,43],
[41,36,39,39,36,38,37,35,0,39],
[37,41,48,39,33,41,38,37,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,36,30,34,34,40,41,40],
[37,0,28,42,41,37,34,37,36,43],
[40,52,0,44,29,45,39,36,38,30],
[44,38,36,0,35,41,38,40,47,44],
[50,39,51,45,0,43,47,43,48,46],
[46,43,35,39,37,0,39,41,45,37],
[46,46,41,42,33,41,0,41,54,41],
[40,43,44,40,37,39,39,0,39,32],
[39,44,42,33,32,35,26,41,0,34],
[40,37,50,36,34,43,39,48,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,44,38,22,38,42,34,33,39],
[40,0,44,38,31,43,47,35,37,40],
[36,36,0,37,32,35,41,32,35,41],
[42,42,43,0,33,39,46,38,42,34],
[58,49,48,47,0,37,50,47,52,52],
[42,37,45,41,43,0,48,45,42,41],
[38,33,39,34,30,32,0,29,29,39],
[46,45,48,42,33,35,51,0,49,46],
[47,43,45,38,28,38,51,31,0,37],
[41,40,39,46,28,39,41,34,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,34,40,39,41,44,33,45,40],
[38,0,38,37,33,43,32,37,53,33],
[46,42,0,44,34,35,39,44,50,39],
[40,43,36,0,40,45,29,35,40,34],
[41,47,46,40,0,36,29,18,41,29],
[39,37,45,35,44,0,23,37,39,35],
[36,48,41,51,51,57,0,36,50,46],
[47,43,36,45,62,43,44,0,40,36],
[35,27,30,40,39,41,30,40,0,40],
[40,47,41,46,51,45,34,44,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,38,59,38,44,44,44,44,45],
[40,0,32,43,44,40,35,39,40,39],
[42,48,0,47,35,49,37,48,40,28],
[21,37,33,0,22,25,28,30,34,30],
[42,36,45,58,0,51,46,49,38,33],
[36,40,31,55,29,0,44,37,43,37],
[36,45,43,52,34,36,0,44,39,43],
[36,41,32,50,31,43,36,0,40,26],
[36,40,40,46,42,37,41,40,0,40],
[35,41,52,50,47,43,37,54,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,37,38,51,42,43,33,43,46],
[42,0,36,48,46,41,46,39,48,48],
[43,44,0,38,50,43,38,38,51,49],
[42,32,42,0,49,48,43,36,46,44],
[29,34,30,31,0,38,42,23,46,46],
[38,39,37,32,42,0,43,36,49,39],
[37,34,42,37,38,37,0,40,44,40],
[47,41,42,44,57,44,40,0,55,48],
[37,32,29,34,34,31,36,25,0,40],
[34,32,31,36,34,41,40,32,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,38,40,42,46,35,43,34,36],
[39,0,41,39,37,35,38,36,26,40],
[42,39,0,40,39,43,36,42,37,42],
[40,41,40,0,44,39,40,39,38,35],
[38,43,41,36,0,41,41,36,33,30],
[34,45,37,41,39,0,33,42,41,39],
[45,42,44,40,39,47,0,47,42,38],
[37,44,38,41,44,38,33,0,37,35],
[46,54,43,42,47,39,38,43,0,45],
[44,40,38,45,50,41,42,45,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,39,43,63,36,28,42,44,40],
[46,0,47,40,41,51,42,27,34,41],
[41,33,0,55,48,34,39,33,46,38],
[37,40,25,0,43,40,32,26,43,33],
[17,39,32,37,0,47,33,39,42,38],
[44,29,46,40,33,0,32,14,40,16],
[52,38,41,48,47,48,0,18,41,37],
[38,53,47,54,41,66,62,0,40,48],
[36,46,34,37,38,40,39,40,0,44],
[40,39,42,47,42,64,43,32,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,43,45,40,36,43,42,31,41],
[38,0,38,36,38,33,45,34,25,45],
[37,42,0,45,46,42,47,45,24,40],
[35,44,35,0,38,39,41,36,36,34],
[40,42,34,42,0,40,47,38,34,41],
[44,47,38,41,40,0,50,37,36,39],
[37,35,33,39,33,30,0,34,30,41],
[38,46,35,44,42,43,46,0,43,42],
[49,55,56,44,46,44,50,37,0,45],
[39,35,40,46,39,41,39,38,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,29,28,38,33,25,24,31,37],
[40,0,44,41,41,44,33,39,38,38],
[51,36,0,38,44,43,40,40,37,32],
[52,39,42,0,46,45,40,33,40,41],
[42,39,36,34,0,35,34,36,31,37],
[47,36,37,35,45,0,26,34,36,42],
[55,47,40,40,46,54,0,37,43,46],
[56,41,40,47,44,46,43,0,36,36],
[49,42,43,40,49,44,37,44,0,41],
[43,42,48,39,43,38,34,44,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,32,49,30,48,36,39,47,67],
[45,0,29,42,32,50,48,53,39,49],
[48,51,0,47,32,40,42,46,42,58],
[31,38,33,0,45,42,41,46,46,54],
[50,48,48,35,0,48,48,55,55,52],
[32,30,40,38,32,0,32,34,32,45],
[44,32,38,39,32,48,0,48,39,51],
[41,27,34,34,25,46,32,0,43,51],
[33,41,38,34,25,48,41,37,0,37],
[13,31,22,26,28,35,29,29,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,52,39,47,51,54,54,49,49],
[30,0,43,38,37,43,41,46,42,34],
[28,37,0,33,37,43,40,39,41,37],
[41,42,47,0,41,48,45,46,39,35],
[33,43,43,39,0,46,44,46,45,41],
[29,37,37,32,34,0,40,35,38,37],
[26,39,40,35,36,40,0,40,35,35],
[26,34,41,34,34,45,40,0,37,32],
[31,38,39,41,35,42,45,43,0,38],
[31,46,43,45,39,43,45,48,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,29,27,40,41,70,41,31,57],
[31,0,29,27,42,50,60,50,31,49],
[51,51,0,48,50,33,70,61,42,40],
[53,53,32,0,62,33,70,51,52,52],
[40,38,30,18,0,30,41,41,31,28],
[39,30,47,47,50,0,60,70,51,47],
[10,20,10,10,39,20,0,22,41,30],
[39,30,19,29,39,10,58,0,29,49],
[49,49,38,28,49,29,39,51,0,48],
[23,31,40,28,52,33,50,31,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,34,36,38,39,31,51,33,44],
[46,0,43,44,37,44,40,56,42,38],
[46,37,0,38,38,44,34,40,40,35],
[44,36,42,0,42,45,43,55,34,44],
[42,43,42,38,0,47,44,57,35,47],
[41,36,36,35,33,0,36,44,38,42],
[49,40,46,37,36,44,0,57,45,48],
[29,24,40,25,23,36,23,0,31,39],
[47,38,40,46,45,42,35,49,0,45],
[36,42,45,36,33,38,32,41,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,41,36,37,36,42,38,36,38],
[49,0,41,46,41,41,45,40,45,39],
[39,39,0,41,39,33,43,34,38,36],
[44,34,39,0,42,40,42,37,37,41],
[43,39,41,38,0,42,39,33,35,38],
[44,39,47,40,38,0,44,44,39,34],
[38,35,37,38,41,36,0,33,37,33],
[42,40,46,43,47,36,47,0,48,40],
[44,35,42,43,45,41,43,32,0,38],
[42,41,44,39,42,46,47,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,44,42,36,44,30,23,44,38],
[43,0,36,36,35,36,37,37,43,44],
[36,44,0,36,36,43,37,36,30,51],
[38,44,44,0,51,51,38,38,38,45],
[44,45,44,29,0,45,52,44,53,51],
[36,44,37,29,35,0,22,29,36,37],
[50,43,43,42,28,58,0,37,58,52],
[57,43,44,42,36,51,43,0,51,52],
[36,37,50,42,27,44,22,29,0,43],
[42,36,29,35,29,43,28,28,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,38,42,46,41,37,38,45,41],
[33,0,41,40,36,40,37,29,37,43],
[42,39,0,42,30,34,22,26,39,33],
[38,40,38,0,42,42,34,31,45,43],
[34,44,50,38,0,36,26,32,32,41],
[39,40,46,38,44,0,40,37,49,45],
[43,43,58,46,54,40,0,42,42,52],
[42,51,54,49,48,43,38,0,48,43],
[35,43,41,35,48,31,38,32,0,41],
[39,37,47,37,39,35,28,37,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,42,42,32,35,40,36,40,36],
[42,0,43,47,30,31,38,38,44,32],
[38,37,0,40,28,40,39,34,40,37],
[38,33,40,0,27,35,33,32,41,33],
[48,50,52,53,0,41,48,45,47,40],
[45,49,40,45,39,0,43,42,44,41],
[40,42,41,47,32,37,0,43,47,33],
[44,42,46,48,35,38,37,0,41,28],
[40,36,40,39,33,36,33,39,0,33],
[44,48,43,47,40,39,47,52,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,38,42,49,36,49,41,41,43],
[44,0,47,43,49,37,46,51,33,51],
[42,33,0,48,34,41,43,52,30,43],
[38,37,32,0,45,40,37,37,34,37],
[31,31,46,35,0,31,46,42,26,24],
[44,43,39,40,49,0,46,46,28,33],
[31,34,37,43,34,34,0,41,25,34],
[39,29,28,43,38,34,39,0,22,35],
[39,47,50,46,54,52,55,58,0,50],
[37,29,37,43,56,47,46,45,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,47,38,36,41,29,40,47,51],
[43,0,41,44,38,46,44,47,42,37],
[33,39,0,39,44,43,42,46,46,35],
[42,36,41,0,40,34,37,40,34,39],
[44,42,36,40,0,39,36,37,33,31],
[39,34,37,46,41,0,33,45,39,36],
[51,36,38,43,44,47,0,38,45,39],
[40,33,34,40,43,35,42,0,42,39],
[33,38,34,46,47,41,35,38,0,33],
[29,43,45,41,49,44,41,41,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,46,36,43,34,44,44,32,46],
[44,0,43,30,36,37,42,39,46,32],
[34,37,0,33,32,36,34,41,35,41],
[44,50,47,0,40,41,43,53,41,41],
[37,44,48,40,0,39,34,46,35,40],
[46,43,44,39,41,0,42,41,41,39],
[36,38,46,37,46,38,0,39,38,33],
[36,41,39,27,34,39,41,0,42,43],
[48,34,45,39,45,39,42,38,0,40],
[34,48,39,39,40,41,47,37,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,41,44,32,52,52,46,36,53],
[42,0,35,48,45,50,49,45,40,46],
[39,45,0,42,40,46,42,42,44,40],
[36,32,38,0,32,47,39,37,33,42],
[48,35,40,48,0,54,45,45,45,49],
[28,30,34,33,26,0,31,30,37,39],
[28,31,38,41,35,49,0,37,39,40],
[34,35,38,43,35,50,43,0,35,42],
[44,40,36,47,35,43,41,45,0,44],
[27,34,40,38,31,41,40,38,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,36,33,39,32,40,32,42,44],
[43,0,32,43,44,37,36,42,48,38],
[44,48,0,46,53,47,43,49,46,39],
[47,37,34,0,41,49,45,36,39,43],
[41,36,27,39,0,34,40,34,35,34],
[48,43,33,31,46,0,43,42,40,33],
[40,44,37,35,40,37,0,46,46,35],
[48,38,31,44,46,38,34,0,45,36],
[38,32,34,41,45,40,34,35,0,42],
[36,42,41,37,46,47,45,44,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,48,39,47,44,47,40,43,38],
[41,0,46,49,44,47,50,44,39,49],
[32,34,0,39,46,40,36,43,36,37],
[41,31,41,0,41,40,42,44,33,39],
[33,36,34,39,0,38,41,41,36,41],
[36,33,40,40,42,0,39,41,40,35],
[33,30,44,38,39,41,0,37,33,37],
[40,36,37,36,39,39,43,0,36,35],
[37,41,44,47,44,40,47,44,0,44],
[42,31,43,41,39,45,43,45,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,33,38,44,35,51,49,49,41],
[25,0,27,36,46,25,45,45,29,34],
[47,53,0,49,49,44,53,60,40,48],
[42,44,31,0,39,36,56,42,44,41],
[36,34,31,41,0,38,41,44,29,36],
[45,55,36,44,42,0,55,52,54,44],
[29,35,27,24,39,25,0,47,32,42],
[31,35,20,38,36,28,33,0,27,44],
[31,51,40,36,51,26,48,53,0,36],
[39,46,32,39,44,36,38,36,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,37,44,42,41,35,36,37,42],
[41,0,39,39,47,45,40,36,43,50],
[43,41,0,43,48,46,43,42,38,46],
[36,41,37,0,38,37,34,38,37,45],
[38,33,32,42,0,39,28,31,32,40],
[39,35,34,43,41,0,38,40,38,39],
[45,40,37,46,52,42,0,47,40,47],
[44,44,38,42,49,40,33,0,36,42],
[43,37,42,43,48,42,40,44,0,39],
[38,30,34,35,40,41,33,38,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,44,42,36,37,40,31,44,40],
[45,0,48,42,40,44,43,45,43,44],
[36,32,0,37,35,36,38,39,38,38],
[38,38,43,0,43,34,37,36,42,38],
[44,40,45,37,0,41,36,40,46,40],
[43,36,44,46,39,0,43,43,45,43],
[40,37,42,43,44,37,0,42,45,40],
[49,35,41,44,40,37,38,0,41,45],
[36,37,42,38,34,35,35,39,0,42],
[40,36,42,42,40,37,40,35,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,54,21,37,35,31,41,31,34],
[46,0,44,41,38,40,33,42,30,36],
[26,36,0,26,32,39,33,37,20,30],
[59,39,54,0,43,45,48,41,35,40],
[43,42,48,37,0,44,45,50,43,29],
[45,40,41,35,36,0,47,35,29,49],
[49,47,47,32,35,33,0,49,43,33],
[39,38,43,39,30,45,31,0,32,29],
[49,50,60,45,37,51,37,48,0,46],
[46,44,50,40,51,31,47,51,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,52,40,42,47,58,42,37,43],
[35,0,47,41,45,45,43,42,37,43],
[28,33,0,29,34,28,40,47,31,39],
[40,39,51,0,43,43,53,46,44,46],
[38,35,46,37,0,36,55,54,22,37],
[33,35,52,37,44,0,50,43,34,40],
[22,37,40,27,25,30,0,39,26,39],
[38,38,33,34,26,37,41,0,31,40],
[43,43,49,36,58,46,54,49,0,47],
[37,37,41,34,43,40,41,40,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,52,25,25,0,52,0,25,25],
[28,0,28,28,0,28,28,28,28,28],
[28,52,0,25,0,0,27,0,25,25],
[55,52,55,0,0,0,55,27,28,28],
[55,80,80,80,0,28,55,55,53,53],
[80,52,80,80,52,0,80,27,80,80],
[28,52,53,25,25,0,0,0,25,25],
[80,52,80,53,25,53,80,0,53,53],
[55,52,55,52,27,0,55,27,0,27],
[55,52,55,52,27,0,55,27,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,43,48,50,53,47,46,39,44],
[43,0,40,56,60,46,53,50,52,52],
[37,40,0,58,62,55,60,47,54,62],
[32,24,22,0,43,29,41,35,30,40],
[30,20,18,37,0,37,39,35,34,39],
[27,34,25,51,43,0,56,32,34,42],
[33,27,20,39,41,24,0,32,41,41],
[34,30,33,45,45,48,48,0,40,46],
[41,28,26,50,46,46,39,40,0,57],
[36,28,18,40,41,38,39,34,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,44,39,39,40,40,37,51,41],
[37,0,48,40,41,43,47,35,49,38],
[36,32,0,34,29,35,38,32,42,38],
[41,40,46,0,42,40,45,36,49,34],
[41,39,51,38,0,39,48,39,49,38],
[40,37,45,40,41,0,43,40,51,38],
[40,33,42,35,32,37,0,32,49,27],
[43,45,48,44,41,40,48,0,53,35],
[29,31,38,31,31,29,31,27,0,23],
[39,42,42,46,42,42,53,45,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,46,47,57,43,38,49,52,43],
[33,0,36,34,43,28,31,45,35,41],
[34,44,0,39,59,39,43,47,38,46],
[33,46,41,0,50,49,39,56,40,45],
[23,37,21,30,0,39,29,35,42,31],
[37,52,41,31,41,0,40,48,43,40],
[42,49,37,41,51,40,0,46,47,47],
[31,35,33,24,45,32,34,0,34,45],
[28,45,42,40,38,37,33,46,0,41],
[37,39,34,35,49,40,33,35,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,35,33,33,37,36,29,33,31],
[40,0,26,36,30,29,28,27,38,25],
[45,54,0,43,43,41,44,43,37,30],
[47,44,37,0,38,37,45,38,36,28],
[47,50,37,42,0,33,45,36,42,21],
[43,51,39,43,47,0,35,41,46,38],
[44,52,36,35,35,45,0,38,34,26],
[51,53,37,42,44,39,42,0,36,32],
[47,42,43,44,38,34,46,44,0,40],
[49,55,50,52,59,42,54,48,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,33,28,37,26,33,31,31,32],
[52,0,41,40,43,39,47,44,40,48],
[47,39,0,34,37,36,45,44,41,43],
[52,40,46,0,44,43,43,42,48,49],
[43,37,43,36,0,31,34,41,33,41],
[54,41,44,37,49,0,46,41,46,43],
[47,33,35,37,46,34,0,41,38,46],
[49,36,36,38,39,39,39,0,35,42],
[49,40,39,32,47,34,42,45,0,41],
[48,32,37,31,39,37,34,38,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,35,38,37,40,44,44,40,45],
[39,0,42,47,49,40,52,45,49,44],
[45,38,0,44,44,43,52,41,43,41],
[42,33,36,0,42,35,42,37,45,39],
[43,31,36,38,0,35,44,35,43,42],
[40,40,37,45,45,0,49,45,42,48],
[36,28,28,38,36,31,0,29,35,39],
[36,35,39,43,45,35,51,0,43,40],
[40,31,37,35,37,38,45,37,0,44],
[35,36,39,41,38,32,41,40,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,38,37,45,40,45,52,43,47],
[35,0,31,38,35,27,42,50,34,38],
[42,49,0,33,44,35,53,58,44,45],
[43,42,47,0,47,31,46,52,39,47],
[35,45,36,33,0,33,51,53,44,47],
[40,53,45,49,47,0,56,52,48,48],
[35,38,27,34,29,24,0,38,37,30],
[28,30,22,28,27,28,42,0,36,31],
[37,46,36,41,36,32,43,44,0,35],
[33,42,35,33,33,32,50,49,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,47,39,43,44,41,41,48,47],
[42,0,50,37,39,44,35,49,30,51],
[33,30,0,43,42,40,41,36,37,55],
[41,43,37,0,43,52,47,42,41,39],
[37,41,38,37,0,51,38,35,44,47],
[36,36,40,28,29,0,36,32,23,37],
[39,45,39,33,42,44,0,45,45,46],
[39,31,44,38,45,48,35,0,35,47],
[32,50,43,39,36,57,35,45,0,54],
[33,29,25,41,33,43,34,33,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,21,36,27,48,47,47,28,31],
[32,0,8,27,40,49,48,33,27,46],
[59,72,0,60,38,68,54,53,47,59],
[44,53,20,0,25,54,48,47,19,39],
[53,40,42,55,0,47,48,40,27,53],
[32,31,12,26,33,0,40,33,6,45],
[33,32,26,32,32,40,0,27,32,46],
[33,47,27,33,40,47,53,0,32,32],
[52,53,33,61,53,74,48,48,0,60],
[49,34,21,41,27,35,34,48,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,33,39,42,42,45,46,34,38],
[42,0,36,37,40,43,33,44,39,37],
[47,44,0,36,46,38,44,41,40,39],
[41,43,44,0,45,47,42,42,40,41],
[38,40,34,35,0,44,35,37,40,39],
[38,37,42,33,36,0,38,38,37,34],
[35,47,36,38,45,42,0,40,36,38],
[34,36,39,38,43,42,40,0,39,42],
[46,41,40,40,40,43,44,41,0,39],
[42,43,41,39,41,46,42,38,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,35,37,36,40,38,33,43,44],
[43,0,36,39,32,41,37,41,45,50],
[45,44,0,33,37,40,36,36,47,49],
[43,41,47,0,38,41,35,32,47,46],
[44,48,43,42,0,44,34,36,42,47],
[40,39,40,39,36,0,33,30,43,49],
[42,43,44,45,46,47,0,37,52,48],
[47,39,44,48,44,50,43,0,46,53],
[37,35,33,33,38,37,28,34,0,36],
[36,30,31,34,33,31,32,27,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,46,48,37,45,42,43,42,40],
[33,0,29,45,31,44,37,38,38,37],
[34,51,0,49,41,49,35,41,39,44],
[32,35,31,0,28,38,33,40,39,36],
[43,49,39,52,0,49,48,45,51,47],
[35,36,31,42,31,0,40,36,37,37],
[38,43,45,47,32,40,0,38,37,38],
[37,42,39,40,35,44,42,0,43,35],
[38,42,41,41,29,43,43,37,0,46],
[40,43,36,44,33,43,42,45,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,35,27,43,49,45,36,37,39],
[22,0,18,28,33,26,31,22,33,23],
[45,62,0,49,52,42,45,45,49,40],
[53,52,31,0,54,44,37,37,52,37],
[37,47,28,26,0,34,41,34,37,29],
[31,54,38,36,46,0,44,39,42,29],
[35,49,35,43,39,36,0,38,39,38],
[44,58,35,43,46,41,42,0,50,34],
[43,47,31,28,43,38,41,30,0,34],
[41,57,40,43,51,51,42,46,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,38,45,41,39,34,42,39,35],
[56,0,49,45,47,41,37,52,45,42],
[42,31,0,46,44,47,39,43,44,45],
[35,35,34,0,32,32,32,39,35,36],
[39,33,36,48,0,34,31,46,40,35],
[41,39,33,48,46,0,36,50,47,42],
[46,43,41,48,49,44,0,48,48,39],
[38,28,37,41,34,30,32,0,29,37],
[41,35,36,45,40,33,32,51,0,34],
[45,38,35,44,45,38,41,43,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,27,34,31,38,28,38,45,40],
[41,0,35,37,37,33,31,39,45,44],
[53,45,0,45,39,48,40,46,46,46],
[46,43,35,0,46,44,39,42,43,51],
[49,43,41,34,0,46,40,44,41,40],
[42,47,32,36,34,0,32,46,43,40],
[52,49,40,41,40,48,0,46,55,53],
[42,41,34,38,36,34,34,0,38,51],
[35,35,34,37,39,37,25,42,0,45],
[40,36,34,29,40,40,27,29,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,26,35,24,28,28,34,35,33],
[44,0,30,42,33,40,33,34,20,40],
[54,50,0,50,46,50,39,44,52,50],
[45,38,30,0,31,41,28,41,37,35],
[56,47,34,49,0,50,44,52,39,45],
[52,40,30,39,30,0,43,41,41,43],
[52,47,41,52,36,37,0,63,48,46],
[46,46,36,39,28,39,17,0,38,38],
[45,60,28,43,41,39,32,42,0,39],
[47,40,30,45,35,37,34,42,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,51,27,29,41,42,41,47,31],
[43,0,51,20,36,34,42,34,47,31],
[29,29,0,15,29,27,35,28,26,0],
[53,60,65,0,42,37,36,35,47,30],
[51,44,51,38,0,28,37,28,40,37],
[39,46,53,43,52,0,37,28,48,46],
[38,38,45,44,43,43,0,37,63,38],
[39,46,52,45,52,52,43,0,65,32],
[33,33,54,33,40,32,17,15,0,33],
[49,49,80,50,43,34,42,48,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,20,19,0,60,19,19,40,21],
[59,0,59,19,20,60,39,39,40,40],
[60,21,0,40,0,60,19,40,40,21],
[61,61,40,0,20,41,40,80,41,61],
[80,60,80,60,0,60,39,60,40,60],
[20,20,20,39,20,0,39,39,20,20],
[61,41,61,40,41,41,0,60,21,21],
[61,41,40,0,20,41,20,0,21,21],
[40,40,40,39,40,60,59,59,0,40],
[59,40,59,19,20,60,59,59,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,43,31,35,29,27,38,35,41],
[41,0,50,48,51,43,49,53,40,47],
[37,30,0,39,47,40,37,44,35,33],
[49,32,41,0,46,32,44,44,46,46],
[45,29,33,34,0,41,38,38,29,42],
[51,37,40,48,39,0,46,40,43,52],
[53,31,43,36,42,34,0,45,48,48],
[42,27,36,36,42,40,35,0,38,39],
[45,40,45,34,51,37,32,42,0,46],
[39,33,47,34,38,28,32,41,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,31,31,41,28,38,37,42,29],
[40,0,37,35,37,27,52,44,42,35],
[49,43,0,35,44,40,50,44,52,40],
[49,45,45,0,43,39,54,46,50,41],
[39,43,36,37,0,36,55,41,52,39],
[52,53,40,41,44,0,54,52,56,34],
[42,28,30,26,25,26,0,39,38,27],
[43,36,36,34,39,28,41,0,38,35],
[38,38,28,30,28,24,42,42,0,24],
[51,45,40,39,41,46,53,45,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,35,38,36,43,44,40,35],
[36,0,37,34,29,34,41,39,38,32],
[38,43,0,34,38,35,41,38,35,37],
[45,46,46,0,34,38,50,40,40,30],
[42,51,42,46,0,36,45,49,36,40],
[44,46,45,42,44,0,41,55,38,33],
[37,39,39,30,35,39,0,44,36,35],
[36,41,42,40,31,25,36,0,40,40],
[40,42,45,40,44,42,44,40,0,43],
[45,48,43,50,40,47,45,40,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,39,40,43,38,35,40,33],
[36,0,26,35,36,32,38,36,25,35],
[38,54,0,39,41,32,43,39,36,26],
[41,45,41,0,45,38,38,37,35,30],
[40,44,39,35,0,41,37,39,31,33],
[37,48,48,42,39,0,37,43,30,39],
[42,42,37,42,43,43,0,37,34,43],
[45,44,41,43,41,37,43,0,41,40],
[40,55,44,45,49,50,46,39,0,37],
[47,45,54,50,47,41,37,40,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,41,50,39,44,43,43,40,35],
[36,0,36,37,35,33,36,36,38,35],
[39,44,0,50,47,39,42,40,42,37],
[30,43,30,0,31,35,33,33,42,36],
[41,45,33,49,0,42,42,39,44,37],
[36,47,41,45,38,0,37,38,37,38],
[37,44,38,47,38,43,0,41,39,40],
[37,44,40,47,41,42,39,0,45,40],
[40,42,38,38,36,43,41,35,0,38],
[45,45,43,44,43,42,40,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,51,43,37,48,37,38,36,40],
[42,0,53,48,39,45,49,43,45,41],
[29,27,0,33,29,34,37,35,31,25],
[37,32,47,0,37,44,41,38,36,36],
[43,41,51,43,0,49,45,45,44,36],
[32,35,46,36,31,0,39,42,35,35],
[43,31,43,39,35,41,0,39,32,37],
[42,37,45,42,35,38,41,0,35,35],
[44,35,49,44,36,45,48,45,0,37],
[40,39,55,44,44,45,43,45,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,33,40,36,35,35,36,27,37],
[52,0,49,44,53,40,46,42,45,49],
[47,31,0,44,39,50,40,43,44,42],
[40,36,36,0,39,37,42,35,39,41],
[44,27,41,41,0,35,39,42,42,38],
[45,40,30,43,45,0,32,38,41,47],
[45,34,40,38,41,48,0,40,39,40],
[44,38,37,45,38,42,40,0,39,40],
[53,35,36,41,38,39,41,41,0,45],
[43,31,38,39,42,33,40,40,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,42,37,47,39,47,43,36,41],
[50,0,52,46,50,47,49,46,40,46],
[38,28,0,29,31,31,30,35,26,37],
[43,34,51,0,47,38,45,44,43,58],
[33,30,49,33,0,30,41,44,29,52],
[41,33,49,42,50,0,38,45,40,55],
[33,31,50,35,39,42,0,49,38,39],
[37,34,45,36,36,35,31,0,31,39],
[44,40,54,37,51,40,42,49,0,43],
[39,34,43,22,28,25,41,41,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,46,41,46,44,37,47,35,45],
[35,0,48,32,24,44,35,40,26,36],
[34,32,0,31,29,34,35,33,26,33],
[39,48,49,0,33,42,40,39,34,41],
[34,56,51,47,0,41,42,49,43,45],
[36,36,46,38,39,0,40,40,27,39],
[43,45,45,40,38,40,0,36,26,40],
[33,40,47,41,31,40,44,0,36,32],
[45,54,54,46,37,53,54,44,0,48],
[35,44,47,39,35,41,40,48,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,32,34,30,28,37,33,31,35],
[48,0,37,36,32,33,44,33,34,38],
[48,43,0,39,42,40,47,37,35,39],
[46,44,41,0,36,41,48,40,35,39],
[50,48,38,44,0,47,50,47,44,41],
[52,47,40,39,33,0,42,44,36,39],
[43,36,33,32,30,38,0,41,33,35],
[47,47,43,40,33,36,39,0,37,41],
[49,46,45,45,36,44,47,43,0,40],
[45,42,41,41,39,41,45,39,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,38,49,38,36,36,52,36,42],
[39,0,34,52,38,45,36,38,41,35],
[42,46,0,54,44,54,33,38,41,39],
[31,28,26,0,33,45,27,41,34,27],
[42,42,36,47,0,50,45,52,45,38],
[44,35,26,35,30,0,31,42,46,30],
[44,44,47,53,35,49,0,54,37,44],
[28,42,42,39,28,38,26,0,41,33],
[44,39,39,46,35,34,43,39,0,38],
[38,45,41,53,42,50,36,47,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,35,51,49,47,48,36,37,44],
[39,0,36,47,45,37,34,36,36,45],
[45,44,0,46,50,55,50,42,40,56],
[29,33,34,0,32,40,39,34,31,33],
[31,35,30,48,0,37,31,21,33,29],
[33,43,25,40,43,0,36,28,42,48],
[32,46,30,41,49,44,0,28,36,51],
[44,44,38,46,59,52,52,0,41,53],
[43,44,40,49,47,38,44,39,0,39],
[36,35,24,47,51,32,29,27,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,13,0,13,26,0,0,39,26],
[54,0,26,28,41,54,39,39,39,39],
[67,54,0,15,41,41,39,39,39,39],
[80,52,65,0,39,52,52,52,52,52],
[67,39,39,41,0,67,52,52,52,52],
[54,26,39,28,13,0,26,26,26,26],
[80,41,41,28,28,54,0,54,67,54],
[80,41,41,28,28,54,26,0,67,67],
[41,41,41,28,28,54,13,13,0,41],
[54,41,41,28,28,54,26,13,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,40,25,43,25,35,37,31,33],
[51,0,40,46,48,34,37,41,37,40],
[40,40,0,38,46,35,46,44,24,38],
[55,34,42,0,46,44,50,42,44,38],
[37,32,34,34,0,19,47,48,35,40],
[55,46,45,36,61,0,44,48,45,39],
[45,43,34,30,33,36,0,45,29,34],
[43,39,36,38,32,32,35,0,34,35],
[49,43,56,36,45,35,51,46,0,46],
[47,40,42,42,40,41,46,45,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,45,41,40,40,37,49,38,44],
[46,0,47,39,47,38,45,50,44,47],
[35,33,0,39,36,28,38,39,34,39],
[39,41,41,0,48,34,34,43,43,41],
[40,33,44,32,0,31,40,44,40,41],
[40,42,52,46,49,0,39,52,44,44],
[43,35,42,46,40,41,0,53,47,49],
[31,30,41,37,36,28,27,0,36,41],
[42,36,46,37,40,36,33,44,0,42],
[36,33,41,39,39,36,31,39,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,32,24,44,27,52,35,44,36],
[39,0,27,35,27,27,47,27,27,36],
[48,53,0,28,39,20,47,38,20,39],
[56,45,52,0,52,35,64,43,28,44],
[36,53,41,28,0,17,45,54,37,18],
[53,53,60,45,63,0,55,54,37,36],
[28,33,33,16,35,25,0,44,36,16],
[45,53,42,37,26,26,36,0,37,17],
[36,53,60,52,43,43,44,43,0,35],
[44,44,41,36,62,44,64,63,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,38,47,36,42,43,37,34,42],
[39,0,32,38,36,37,32,35,37,39],
[42,48,0,42,41,47,46,43,33,47],
[33,42,38,0,36,41,39,40,34,42],
[44,44,39,44,0,41,43,42,40,50],
[38,43,33,39,39,0,40,36,30,39],
[37,48,34,41,37,40,0,31,30,46],
[43,45,37,40,38,44,49,0,33,43],
[46,43,47,46,40,50,50,47,0,46],
[38,41,33,38,30,41,34,37,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,31,48,46,35,40,30,59,40],
[35,0,40,47,38,44,43,33,30,51],
[49,40,0,37,55,36,34,16,37,47],
[32,33,43,0,27,50,46,26,32,54],
[34,42,25,53,0,42,42,20,35,37],
[45,36,44,30,38,0,41,43,41,33],
[40,37,46,34,38,39,0,36,40,52],
[50,47,64,54,60,37,44,0,49,59],
[21,50,43,48,45,39,40,31,0,42],
[40,29,33,26,43,47,28,21,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,34,32,30,31,27,41,31,31],
[48,0,46,35,37,34,39,48,38,41],
[46,34,0,39,36,27,35,46,38,38],
[48,45,41,0,36,35,38,44,30,44],
[50,43,44,44,0,40,37,49,42,34],
[49,46,53,45,40,0,40,47,50,45],
[53,41,45,42,43,40,0,55,41,36],
[39,32,34,36,31,33,25,0,35,36],
[49,42,42,50,38,30,39,45,0,39],
[49,39,42,36,46,35,44,44,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,39,48,38,35,52,45,42,42],
[38,0,47,44,48,33,46,47,43,42],
[41,33,0,44,43,38,45,44,35,40],
[32,36,36,0,35,33,34,32,34,27],
[42,32,37,45,0,39,43,41,40,37],
[45,47,42,47,41,0,44,38,51,42],
[28,34,35,46,37,36,0,36,42,38],
[35,33,36,48,39,42,44,0,47,41],
[38,37,45,46,40,29,38,33,0,34],
[38,38,40,53,43,38,42,39,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,35,41,38,46,49,44,37,41],
[41,0,30,40,38,39,39,45,36,38],
[45,50,0,39,36,45,36,44,48,35],
[39,40,41,0,42,43,42,50,39,38],
[42,42,44,38,0,44,44,49,38,35],
[34,41,35,37,36,0,40,37,37,35],
[31,41,44,38,36,40,0,46,34,37],
[36,35,36,30,31,43,34,0,38,29],
[43,44,32,41,42,43,46,42,0,35],
[39,42,45,42,45,45,43,51,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,28,36,32,38,40,47,33,28],
[46,0,28,39,33,39,35,47,30,34],
[52,52,0,51,35,45,38,42,44,34],
[44,41,29,0,31,43,33,42,35,34],
[48,47,45,49,0,48,42,49,55,37],
[42,41,35,37,32,0,25,35,36,23],
[40,45,42,47,38,55,0,42,41,40],
[33,33,38,38,31,45,38,0,28,41],
[47,50,36,45,25,44,39,52,0,33],
[52,46,46,46,43,57,40,39,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,26,46,38,37,34,26,36,38],
[43,0,49,49,58,46,55,44,45,39],
[54,31,0,49,60,40,44,43,45,43],
[34,31,31,0,33,46,38,45,40,41],
[42,22,20,47,0,40,44,29,38,39],
[43,34,40,34,40,0,41,44,44,42],
[46,25,36,42,36,39,0,40,57,38],
[54,36,37,35,51,36,40,0,51,51],
[44,35,35,40,42,36,23,29,0,35],
[42,41,37,39,41,38,42,29,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,35,43,41,40,42,42,38,38],
[39,0,31,40,34,37,46,41,41,40],
[45,49,0,45,36,49,45,50,48,46],
[37,40,35,0,32,39,36,40,38,39],
[39,46,44,48,0,49,41,44,46,39],
[40,43,31,41,31,0,38,40,42,38],
[38,34,35,44,39,42,0,42,39,37],
[38,39,30,40,36,40,38,0,36,40],
[42,39,32,42,34,38,41,44,0,38],
[42,40,34,41,41,42,43,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,41,39,42,41,43,41,51,39],
[50,0,53,42,37,53,42,51,44,37],
[39,27,0,34,34,37,38,43,38,30],
[41,38,46,0,37,40,46,50,47,48],
[38,43,46,43,0,50,43,45,51,45],
[39,27,43,40,30,0,36,38,37,37],
[37,38,42,34,37,44,0,34,47,38],
[39,29,37,30,35,42,46,0,45,33],
[29,36,42,33,29,43,33,35,0,36],
[41,43,50,32,35,43,42,47,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,33,40,36,35,23,36,36,44],
[44,0,40,40,40,35,29,38,54,43],
[47,40,0,38,41,45,27,42,44,48],
[40,40,42,0,42,37,32,39,43,43],
[44,40,39,38,0,28,37,41,49,43],
[45,45,35,43,52,0,40,40,50,43],
[57,51,53,48,43,40,0,51,62,50],
[44,42,38,41,39,40,29,0,44,37],
[44,26,36,37,31,30,18,36,0,48],
[36,37,32,37,37,37,30,43,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,39,46,39,29,32,50,39,40],
[48,0,52,50,40,40,35,55,42,47],
[41,28,0,40,30,21,18,41,26,29],
[34,30,40,0,37,25,19,36,37,40],
[41,40,50,43,0,34,38,46,44,43],
[51,40,59,55,46,0,42,58,41,51],
[48,45,62,61,42,38,0,60,41,47],
[30,25,39,44,34,22,20,0,36,40],
[41,38,54,43,36,39,39,44,0,38],
[40,33,51,40,37,29,33,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,37,37,17,37,36,36,34,28],
[46,0,46,55,35,46,36,54,43,46],
[43,34,0,28,35,45,36,36,43,19],
[43,25,52,0,35,45,53,43,51,37],
[63,45,45,45,0,37,53,54,53,45],
[43,34,35,35,43,0,43,52,52,26],
[44,44,44,27,27,37,0,34,35,18],
[44,26,44,37,26,28,46,0,44,37],
[46,37,37,29,27,28,45,36,0,20],
[52,34,61,43,35,54,62,43,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,29,25,46,34,37,38,39,34],
[50,0,38,36,52,41,47,39,42,44],
[51,42,0,36,44,46,46,37,35,38],
[55,44,44,0,53,38,40,55,42,45],
[34,28,36,27,0,41,43,40,35,34],
[46,39,34,42,39,0,40,43,41,34],
[43,33,34,40,37,40,0,46,36,42],
[42,41,43,25,40,37,34,0,42,38],
[41,38,45,38,45,39,44,38,0,46],
[46,36,42,35,46,46,38,42,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,47,49,50,65,58,57,57,32],
[31,0,51,29,51,36,36,42,36,36],
[33,29,0,47,62,53,40,44,23,15],
[31,51,33,0,37,31,40,37,29,14],
[30,29,18,43,0,35,37,31,12,13],
[15,44,27,49,45,0,26,38,28,13],
[22,44,40,40,43,54,0,43,29,20],
[23,38,36,43,49,42,37,0,14,13],
[23,44,57,51,68,52,51,66,0,43],
[48,44,65,66,67,67,60,67,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,34,42,42,48,43,36,44,37],
[44,0,44,40,42,49,43,46,44,37],
[46,36,0,44,43,44,40,44,48,44],
[38,40,36,0,48,43,44,42,54,43],
[38,38,37,32,0,36,42,42,44,36],
[32,31,36,37,44,0,42,34,41,39],
[37,37,40,36,38,38,0,41,51,38],
[44,34,36,38,38,46,39,0,48,38],
[36,36,32,26,36,39,29,32,0,35],
[43,43,36,37,44,41,42,42,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,35,33,32,34,42,42,32,47],
[48,0,35,41,42,47,47,47,43,34],
[45,45,0,40,33,48,45,51,31,43],
[47,39,40,0,38,45,42,49,36,48],
[48,38,47,42,0,46,47,45,42,44],
[46,33,32,35,34,0,44,43,33,34],
[38,33,35,38,33,36,0,48,30,36],
[38,33,29,31,35,37,32,0,28,35],
[48,37,49,44,38,47,50,52,0,43],
[33,46,37,32,36,46,44,45,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,39,32,35,29,31,44,33,45],
[45,0,46,37,32,31,34,42,32,51],
[41,34,0,27,34,33,42,35,34,39],
[48,43,53,0,42,47,38,47,39,44],
[45,48,46,38,0,36,46,48,44,50],
[51,49,47,33,44,0,47,44,41,52],
[49,46,38,42,34,33,0,42,44,41],
[36,38,45,33,32,36,38,0,37,42],
[47,48,46,41,36,39,36,43,0,50],
[35,29,41,36,30,28,39,38,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,40,45,53,35,54,44,38,53],
[29,0,35,43,51,46,50,52,34,44],
[40,45,0,46,44,41,50,50,32,33],
[35,37,34,0,45,46,48,49,33,37],
[27,29,36,35,0,34,47,29,24,38],
[45,34,39,34,46,0,52,42,32,36],
[26,30,30,32,33,28,0,34,22,38],
[36,28,30,31,51,38,46,0,30,37],
[42,46,48,47,56,48,58,50,0,39],
[27,36,47,43,42,44,42,43,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,47,46,45,40,48,45,50,48],
[39,0,41,41,34,37,41,39,44,45],
[33,39,0,39,39,44,43,42,46,40],
[34,39,41,0,42,36,37,36,43,33],
[35,46,41,38,0,38,43,38,40,42],
[40,43,36,44,42,0,44,46,47,48],
[32,39,37,43,37,36,0,37,42,42],
[35,41,38,44,42,34,43,0,42,43],
[30,36,34,37,40,33,38,38,0,38],
[32,35,40,47,38,32,38,37,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,45,49,37,33,38,56,40,35],
[35,0,44,43,37,25,28,45,45,35],
[35,36,0,42,44,29,37,44,38,33],
[31,37,38,0,44,31,28,46,33,42],
[43,43,36,36,0,29,28,48,43,25],
[47,55,51,49,51,0,38,58,59,49],
[42,52,43,52,52,42,0,44,42,38],
[24,35,36,34,32,22,36,0,29,29],
[40,35,42,47,37,21,38,51,0,30],
[45,45,47,38,55,31,42,51,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,41,35,46,37,41,27,45,44],
[36,0,38,30,37,44,35,38,27,51],
[39,42,0,27,36,49,26,32,40,36],
[45,50,53,0,50,41,30,43,47,33],
[34,43,44,30,0,42,53,40,31,38],
[43,36,31,39,38,0,27,40,44,26],
[39,45,54,50,27,53,0,41,36,42],
[53,42,48,37,40,40,39,0,49,41],
[35,53,40,33,49,36,44,31,0,47],
[36,29,44,47,42,54,38,39,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,43,40,46,40,40,41,40,47],
[36,0,37,40,50,40,45,39,42,46],
[37,43,0,44,52,44,50,44,45,49],
[40,40,36,0,42,34,50,36,39,45],
[34,30,28,38,0,34,41,32,40,43],
[40,40,36,46,46,0,48,41,46,45],
[40,35,30,30,39,32,0,27,36,37],
[39,41,36,44,48,39,53,0,42,50],
[40,38,35,41,40,34,44,38,0,47],
[33,34,31,35,37,35,43,30,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,38,34,35,32,31,40,35,42],
[53,0,39,40,37,41,40,52,37,42],
[42,41,0,44,45,30,41,46,26,30],
[46,40,36,0,35,27,38,29,40,30],
[45,43,35,45,0,33,42,40,21,33],
[48,39,50,53,47,0,43,36,47,47],
[49,40,39,42,38,37,0,43,33,39],
[40,28,34,51,40,44,37,0,32,31],
[45,43,54,40,59,33,47,48,0,43],
[38,38,50,50,47,33,41,49,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,42,42,43,37,48,41,41,55],
[41,0,43,45,41,36,46,38,39,51],
[38,37,0,40,41,36,52,33,41,49],
[38,35,40,0,42,42,49,42,42,52],
[37,39,39,38,0,41,47,40,35,47],
[43,44,44,38,39,0,50,41,38,49],
[32,34,28,31,33,30,0,27,33,39],
[39,42,47,38,40,39,53,0,44,46],
[39,41,39,38,45,42,47,36,0,50],
[25,29,31,28,33,31,41,34,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,38,48,42,54,46,40,40,39],
[32,0,40,47,36,47,48,39,36,42],
[42,40,0,38,49,45,47,40,38,36],
[32,33,42,0,38,36,38,35,31,40],
[38,44,31,42,0,50,43,44,37,35],
[26,33,35,44,30,0,38,40,36,33],
[34,32,33,42,37,42,0,35,35,33],
[40,41,40,45,36,40,45,0,37,45],
[40,44,42,49,43,44,45,43,0,49],
[41,38,44,40,45,47,47,35,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,40,50,35,36,42,46,44,47],
[44,0,33,48,41,43,47,39,47,42],
[40,47,0,54,43,40,48,46,49,54],
[30,32,26,0,30,21,27,33,27,37],
[45,39,37,50,0,37,44,39,37,45],
[44,37,40,59,43,0,51,52,53,46],
[38,33,32,53,36,29,0,42,41,43],
[34,41,34,47,41,28,38,0,28,46],
[36,33,31,53,43,27,39,52,0,50],
[33,38,26,43,35,34,37,34,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,41,42,38,48,40,39,41,34],
[36,0,42,33,41,40,44,43,27,30],
[39,38,0,49,40,44,40,37,35,41],
[38,47,31,0,36,48,37,41,35,41],
[42,39,40,44,0,55,50,43,41,41],
[32,40,36,32,25,0,32,38,28,28],
[40,36,40,43,30,48,0,40,36,35],
[41,37,43,39,37,42,40,0,32,36],
[39,53,45,45,39,52,44,48,0,40],
[46,50,39,39,39,52,45,44,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,63,58,64,48,50,55,44,44],
[42,0,47,47,42,56,48,42,41,35],
[17,33,0,36,45,48,28,29,29,32],
[22,33,44,0,55,44,46,25,40,32],
[16,38,35,25,0,44,17,19,23,24],
[32,24,32,36,36,0,30,26,28,32],
[30,32,52,34,63,50,0,29,35,43],
[25,38,51,55,61,54,51,0,49,38],
[36,39,51,40,57,52,45,31,0,45],
[36,45,48,48,56,48,37,42,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,34,31,42,25,44,34,35,40],
[43,0,35,39,38,43,46,32,43,42],
[46,45,0,43,43,39,55,42,42,46],
[49,41,37,0,46,35,49,33,41,47],
[38,42,37,34,0,30,47,38,36,37],
[55,37,41,45,50,0,58,39,41,44],
[36,34,25,31,33,22,0,25,36,39],
[46,48,38,47,42,41,55,0,33,43],
[45,37,38,39,44,39,44,47,0,44],
[40,38,34,33,43,36,41,37,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,50,46,53,41,48,43,39,51],
[22,0,40,27,54,41,35,28,36,42],
[30,40,0,29,48,36,38,37,38,39],
[34,53,51,0,57,33,39,23,27,47],
[27,26,32,23,0,31,26,34,27,27],
[39,39,44,47,49,0,43,34,26,41],
[32,45,42,41,54,37,0,39,41,43],
[37,52,43,57,46,46,41,0,45,54],
[41,44,42,53,53,54,39,35,0,42],
[29,38,41,33,53,39,37,26,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,46,44,49,45,47,39,39,43],
[39,0,34,41,46,41,45,39,42,40],
[34,46,0,38,37,42,43,37,37,47],
[36,39,42,0,42,46,52,40,36,44],
[31,34,43,38,0,35,42,36,36,40],
[35,39,38,34,45,0,47,39,39,42],
[33,35,37,28,38,33,0,36,31,37],
[41,41,43,40,44,41,44,0,41,40],
[41,38,43,44,44,41,49,39,0,40],
[37,40,33,36,40,38,43,40,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,31,46,42,43,33,29,29,45],
[38,0,39,45,39,44,29,40,28,48],
[49,41,0,40,31,32,37,48,37,43],
[34,35,40,0,36,30,22,38,28,40],
[38,41,49,44,0,56,42,46,29,40],
[37,36,48,50,24,0,30,37,27,47],
[47,51,43,58,38,50,0,47,34,43],
[51,40,32,42,34,43,33,0,27,36],
[51,52,43,52,51,53,46,53,0,40],
[35,32,37,40,40,33,37,44,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,41,36,43,42,37,31,31,26],
[43,0,43,36,37,46,38,22,36,31],
[39,37,0,39,43,46,48,32,38,36],
[44,44,41,0,43,52,37,41,31,42],
[37,43,37,37,0,40,33,36,34,33],
[38,34,34,28,40,0,39,30,28,32],
[43,42,32,43,47,41,0,38,23,35],
[49,58,48,39,44,50,42,0,42,42],
[49,44,42,49,46,52,57,38,0,36],
[54,49,44,38,47,48,45,38,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,39,45,46,46,37,48,44,38],
[32,0,34,43,40,33,37,40,37,35],
[41,46,0,46,44,37,38,49,52,40],
[35,37,34,0,37,33,35,39,44,33],
[34,40,36,43,0,38,34,39,45,39],
[34,47,43,47,42,0,41,43,45,38],
[43,43,42,45,46,39,0,48,51,41],
[32,40,31,41,41,37,32,0,45,34],
[36,43,28,36,35,35,29,35,0,34],
[42,45,40,47,41,42,39,46,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,28,37,30,28,37,33,38,38],
[46,0,35,39,29,20,40,45,37,40],
[52,45,0,40,38,45,42,48,45,48],
[43,41,40,0,29,31,40,47,39,39],
[50,51,42,51,0,39,48,52,55,48],
[52,60,35,49,41,0,44,44,46,46],
[43,40,38,40,32,36,0,40,46,44],
[47,35,32,33,28,36,40,0,32,32],
[42,43,35,41,25,34,34,48,0,42],
[42,40,32,41,32,34,36,48,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,46,41,31,38,50,45,47,52],
[44,0,42,43,36,46,44,40,53,49],
[34,38,0,40,38,34,43,43,42,45],
[39,37,40,0,37,35,34,34,43,43],
[49,44,42,43,0,34,52,48,49,52],
[42,34,46,45,46,0,51,48,46,52],
[30,36,37,46,28,29,0,35,42,34],
[35,40,37,46,32,32,45,0,47,52],
[33,27,38,37,31,34,38,33,0,37],
[28,31,35,37,28,28,46,28,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,38,52,27,34,36,41,34,36],
[50,0,40,47,29,28,27,42,25,27],
[42,40,0,50,29,50,47,25,35,36],
[28,33,30,0,30,27,25,32,11,35],
[53,51,51,50,0,39,39,47,41,29],
[46,52,30,53,41,0,30,46,35,30],
[44,53,33,55,41,50,0,48,37,31],
[39,38,55,48,33,34,32,0,38,42],
[46,55,45,69,39,45,43,42,0,39],
[44,53,44,45,51,50,49,38,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,39,43,45,40,41,44,30,45],
[37,0,27,31,31,40,32,29,32,42],
[41,53,0,39,47,42,46,48,40,42],
[37,49,41,0,42,40,35,39,30,45],
[35,49,33,38,0,38,28,32,25,42],
[40,40,38,40,42,0,38,35,42,42],
[39,48,34,45,52,42,0,35,47,30],
[36,51,32,41,48,45,45,0,36,40],
[50,48,40,50,55,38,33,44,0,45],
[35,38,38,35,38,38,50,40,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,36,42,42,42,42,40,37,45],
[35,0,35,41,39,40,40,36,41,43],
[44,45,0,46,38,43,38,41,42,38],
[38,39,34,0,36,40,34,35,34,41],
[38,41,42,44,0,39,44,41,38,41],
[38,40,37,40,41,0,43,39,41,38],
[38,40,42,46,36,37,0,39,42,43],
[40,44,39,45,39,41,41,0,40,39],
[43,39,38,46,42,39,38,40,0,48],
[35,37,42,39,39,42,37,41,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,41,32,45,31,34,30,37,48],
[41,0,31,49,41,43,39,39,34,34],
[39,49,0,46,59,45,41,51,48,48],
[48,31,34,0,37,41,35,42,43,32],
[35,39,21,43,0,36,39,38,41,36],
[49,37,35,39,44,0,39,38,39,45],
[46,41,39,45,41,41,0,45,43,36],
[50,41,29,38,42,42,35,0,31,42],
[43,46,32,37,39,41,37,49,0,46],
[32,46,32,48,44,35,44,38,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,38,38,48,40,45,49,45,46],
[36,0,38,37,44,35,40,41,46,38],
[42,42,0,40,48,45,44,47,41,41],
[42,43,40,0,50,37,40,48,43,43],
[32,36,32,30,0,26,33,42,31,35],
[40,45,35,43,54,0,41,51,41,40],
[35,40,36,40,47,39,0,46,41,38],
[31,39,33,32,38,29,34,0,40,39],
[35,34,39,37,49,39,39,40,0,35],
[34,42,39,37,45,40,42,41,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,41,31,31,37,52,31,40,37],
[25,0,35,32,27,42,38,30,33,30],
[39,45,0,33,34,36,44,24,30,38],
[49,48,47,0,42,44,56,38,58,36],
[49,53,46,38,0,37,55,42,37,49],
[43,38,44,36,43,0,46,41,45,39],
[28,42,36,24,25,34,0,27,29,33],
[49,50,56,42,38,39,53,0,38,48],
[40,47,50,22,43,35,51,42,0,45],
[43,50,42,44,31,41,47,32,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,42,36,36,37,45,42,40,39],
[40,0,39,37,48,51,47,43,43,49],
[38,41,0,37,41,40,48,56,48,44],
[44,43,43,0,33,39,53,44,43,40],
[44,32,39,47,0,44,41,50,36,48],
[43,29,40,41,36,0,43,52,32,42],
[35,33,32,27,39,37,0,42,32,46],
[38,37,24,36,30,28,38,0,31,44],
[40,37,32,37,44,48,48,49,0,48],
[41,31,36,40,32,38,34,36,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,38,38,42,41,39,44,42,30],
[40,0,39,38,46,40,42,44,40,40],
[42,41,0,42,44,37,40,44,40,39],
[42,42,38,0,40,43,45,40,37,37],
[38,34,36,40,0,40,34,43,34,26],
[39,40,43,37,40,0,36,46,35,30],
[41,38,40,35,46,44,0,44,39,41],
[36,36,36,40,37,34,36,0,35,34],
[38,40,40,43,46,45,41,45,0,42],
[50,40,41,43,54,50,39,46,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,39,38,43,44,33,34,37,39],
[40,0,42,45,41,49,40,44,47,49],
[41,38,0,36,42,40,39,38,42,41],
[42,35,44,0,46,43,38,43,40,41],
[37,39,38,34,0,36,31,38,40,35],
[36,31,40,37,44,0,40,40,36,32],
[47,40,41,42,49,40,0,42,47,45],
[46,36,42,37,42,40,38,0,42,42],
[43,33,38,40,40,44,33,38,0,38],
[41,31,39,39,45,48,35,38,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,45,46,43,51,44,37,42,47],
[39,0,45,50,47,56,50,41,47,47],
[35,35,0,43,44,53,38,34,44,39],
[34,30,37,0,47,56,41,31,39,43],
[37,33,36,33,0,51,42,27,41,39],
[29,24,27,24,29,0,27,25,35,29],
[36,30,42,39,38,53,0,28,40,34],
[43,39,46,49,53,55,52,0,44,44],
[38,33,36,41,39,45,40,36,0,31],
[33,33,41,37,41,51,46,36,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,50,45,45,46,45,52,34,44],
[35,0,38,37,40,34,40,34,27,32],
[30,42,0,43,36,40,33,32,37,41],
[35,43,37,0,41,35,33,35,42,42],
[35,40,44,39,0,31,30,39,36,41],
[34,46,40,45,49,0,26,35,35,35],
[35,40,47,47,50,54,0,34,31,48],
[28,46,48,45,41,45,46,0,36,49],
[46,53,43,38,44,45,49,44,0,48],
[36,48,39,38,39,45,32,31,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,32,36,39,39,43,41,38,43],
[44,0,37,44,49,42,53,38,46,45],
[48,43,0,40,41,43,49,44,45,42],
[44,36,40,0,46,47,50,39,42,42],
[41,31,39,34,0,34,39,35,42,44],
[41,38,37,33,46,0,44,38,43,41],
[37,27,31,30,41,36,0,35,34,30],
[39,42,36,41,45,42,45,0,39,45],
[42,34,35,38,38,37,46,41,0,44],
[37,35,38,38,36,39,50,35,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,33,50,42,45,48,49,59,33],
[38,0,30,34,30,42,30,33,49,35],
[47,50,0,48,41,50,49,39,46,34],
[30,46,32,0,32,38,33,40,43,33],
[38,50,39,48,0,38,38,42,44,38],
[35,38,30,42,42,0,40,35,46,33],
[32,50,31,47,42,40,0,34,59,44],
[31,47,41,40,38,45,46,0,45,38],
[21,31,34,37,36,34,21,35,0,30],
[47,45,46,47,42,47,36,42,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,46,63,63,63,46,72,29,57],
[41,0,46,49,72,56,32,58,40,34],
[34,34,0,42,49,48,24,42,16,34],
[17,31,38,0,54,39,31,54,25,33],
[17,8,31,26,0,31,17,34,8,25],
[17,24,32,41,49,0,32,56,8,25],
[34,48,56,49,63,48,0,64,25,51],
[8,22,38,26,46,24,16,0,8,34],
[51,40,64,55,72,72,55,72,0,65],
[23,46,46,47,55,55,29,46,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,39,33,41,42,36,37,36,31],
[48,0,41,34,41,40,38,47,44,45],
[41,39,0,39,43,40,42,37,38,42],
[47,46,41,0,45,45,38,41,40,44],
[39,39,37,35,0,33,30,42,37,33],
[38,40,40,35,47,0,37,46,37,42],
[44,42,38,42,50,43,0,42,44,45],
[43,33,43,39,38,34,38,0,44,39],
[44,36,42,40,43,43,36,36,0,37],
[49,35,38,36,47,38,35,41,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,43,46,41,33,35,37,35,48],
[40,0,47,49,33,32,35,35,37,42],
[37,33,0,45,27,27,28,35,29,35],
[34,31,35,0,30,28,27,26,32,29],
[39,47,53,50,0,38,42,41,43,53],
[47,48,53,52,42,0,46,38,40,40],
[45,45,52,53,38,34,0,39,42,46],
[43,45,45,54,39,42,41,0,38,45],
[45,43,51,48,37,40,38,42,0,43],
[32,38,45,51,27,40,34,35,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,39,39,33,45,41,38,27,38],
[37,0,43,32,28,30,37,30,28,28],
[41,37,0,26,38,45,41,36,36,39],
[41,48,54,0,47,39,33,41,39,41],
[47,52,42,33,0,49,39,36,39,47],
[35,50,35,41,31,0,36,31,41,35],
[39,43,39,47,41,44,0,30,32,36],
[42,50,44,39,44,49,50,0,49,45],
[53,52,44,41,41,39,48,31,0,48],
[42,52,41,39,33,45,44,35,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,55,63,38,43,59,59,59,58],
[26,0,49,49,38,46,54,59,49,38],
[25,31,0,30,23,26,26,41,35,20],
[17,31,50,0,36,27,40,36,41,34],
[42,42,57,44,0,44,43,49,37,43],
[37,34,54,53,36,0,38,44,45,38],
[21,26,54,40,37,42,0,40,49,27],
[21,21,39,44,31,36,40,0,39,30],
[21,31,45,39,43,35,31,41,0,35],
[22,42,60,46,37,42,53,50,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,43,40,47,36,33,43,47,54],
[36,0,37,37,43,41,33,52,36,41],
[37,43,0,48,51,43,44,42,49,46],
[40,43,32,0,35,50,38,35,34,49],
[33,37,29,45,0,47,48,52,42,44],
[44,39,37,30,33,0,33,32,40,42],
[47,47,36,42,32,47,0,40,38,47],
[37,28,38,45,28,48,40,0,38,43],
[33,44,31,46,38,40,42,42,0,41],
[26,39,34,31,36,38,33,37,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,26,37,40,26,33,38,30,32],
[48,0,34,43,36,38,37,29,42,28],
[54,46,0,30,49,49,27,57,49,43],
[43,37,50,0,49,46,48,45,45,43],
[40,44,31,31,0,34,28,34,34,45],
[54,42,31,34,46,0,46,52,41,42],
[47,43,53,32,52,34,0,48,48,42],
[42,51,23,35,46,28,32,0,43,32],
[50,38,31,35,46,39,32,37,0,28],
[48,52,37,37,35,38,38,48,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,42,42,39,39,42,39,41,45],
[34,0,32,39,38,37,42,37,44,43],
[38,48,0,42,38,36,47,39,36,39],
[38,41,38,0,44,43,42,37,45,35],
[41,42,42,36,0,40,41,37,44,42],
[41,43,44,37,40,0,47,41,46,41],
[38,38,33,38,39,33,0,42,35,41],
[41,43,41,43,43,39,38,0,41,40],
[39,36,44,35,36,34,45,39,0,47],
[35,37,41,45,38,39,39,40,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,45,59,43,43,44,37,52,43],
[34,0,45,39,44,41,43,38,41,35],
[35,35,0,47,34,42,45,36,37,39],
[21,41,33,0,40,37,31,37,30,39],
[37,36,46,40,0,35,41,32,42,45],
[37,39,38,43,45,0,35,43,41,40],
[36,37,35,49,39,45,0,28,47,41],
[43,42,44,43,48,37,52,0,40,31],
[28,39,43,50,38,39,33,40,0,41],
[37,45,41,41,35,40,39,49,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,41,45,47,39,33,53,40,35],
[35,0,38,47,46,44,35,53,41,34],
[39,42,0,49,45,29,33,55,43,29],
[35,33,31,0,42,32,37,55,34,35],
[33,34,35,38,0,34,29,54,38,32],
[41,36,51,48,46,0,37,54,42,47],
[47,45,47,43,51,43,0,50,44,38],
[27,27,25,25,26,26,30,0,28,27],
[40,39,37,46,42,38,36,52,0,48],
[45,46,51,45,48,33,42,53,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,33,31,40,42,33,29,35,35],
[43,0,36,39,44,42,40,34,35,43],
[47,44,0,48,48,47,45,38,44,41],
[49,41,32,0,44,44,42,29,41,30],
[40,36,32,36,0,49,37,35,39,33],
[38,38,33,36,31,0,40,35,36,40],
[47,40,35,38,43,40,0,41,43,42],
[51,46,42,51,45,45,39,0,44,46],
[45,45,36,39,41,44,37,36,0,38],
[45,37,39,50,47,40,38,34,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,42,35,48,50,42,53,43,37],
[33,0,30,35,33,51,40,45,39,26],
[38,50,0,46,41,57,49,49,40,44],
[45,45,34,0,36,68,50,49,50,42],
[32,47,39,44,0,57,36,45,37,38],
[30,29,23,12,23,0,35,43,29,26],
[38,40,31,30,44,45,0,44,40,35],
[27,35,31,31,35,37,36,0,31,28],
[37,41,40,30,43,51,40,49,0,41],
[43,54,36,38,42,54,45,52,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,43,29,44,38,36,34,34,39],
[45,0,43,36,45,47,37,42,41,45],
[37,37,0,33,40,36,34,33,35,38],
[51,44,47,0,47,43,44,40,36,43],
[36,35,40,33,0,36,31,32,38,35],
[42,33,44,37,44,0,37,43,32,36],
[44,43,46,36,49,43,0,39,36,41],
[46,38,47,40,48,37,41,0,42,40],
[46,39,45,44,42,48,44,38,0,43],
[41,35,42,37,45,44,39,40,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,44,45,36,40,40,35,45,32],
[38,0,46,45,42,44,41,34,44,44],
[36,34,0,35,30,30,38,32,42,34],
[35,35,45,0,41,36,37,37,40,39],
[44,38,50,39,0,38,42,42,50,43],
[40,36,50,44,42,0,49,41,46,41],
[40,39,42,43,38,31,0,36,46,40],
[45,46,48,43,38,39,44,0,50,45],
[35,36,38,40,30,34,34,30,0,34],
[48,36,46,41,37,39,40,35,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,41,48,48,39,38,40,51,39],
[44,0,39,34,41,43,47,45,52,51],
[39,41,0,43,38,36,32,39,45,44],
[32,46,37,0,47,48,42,43,46,39],
[32,39,42,33,0,36,38,44,50,53],
[41,37,44,32,44,0,34,53,55,49],
[42,33,48,38,42,46,0,51,59,39],
[40,35,41,37,36,27,29,0,44,38],
[29,28,35,34,30,25,21,36,0,38],
[41,29,36,41,27,31,41,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,49,46,41,42,39,44,47,42],
[48,0,45,41,42,30,39,56,47,49],
[31,35,0,30,34,30,29,29,31,39],
[34,39,50,0,39,40,42,47,51,42],
[39,38,46,41,0,28,35,49,38,40],
[38,50,50,40,52,0,47,55,40,60],
[41,41,51,38,45,33,0,48,40,41],
[36,24,51,33,31,25,32,0,38,41],
[33,33,49,29,42,40,40,42,0,41],
[38,31,41,38,40,20,39,39,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,30,38,43,36,43,34,27,37],
[40,0,30,33,40,26,33,30,29,32],
[50,50,0,40,47,43,47,49,47,49],
[42,47,40,0,47,35,47,40,39,43],
[37,40,33,33,0,35,31,47,28,38],
[44,54,37,45,45,0,50,40,39,43],
[37,47,33,33,49,30,0,34,34,34],
[46,50,31,40,33,40,46,0,37,39],
[53,51,33,41,52,41,46,43,0,45],
[43,48,31,37,42,37,46,41,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,50,45,38,43,53,51,39,42],
[39,0,53,43,42,45,47,41,48,42],
[30,27,0,39,24,46,46,33,28,38],
[35,37,41,0,25,38,49,37,31,38],
[42,38,56,55,0,50,52,46,44,48],
[37,35,34,42,30,0,45,31,19,34],
[27,33,34,31,28,35,0,24,27,31],
[29,39,47,43,34,49,56,0,32,46],
[41,32,52,49,36,61,53,48,0,43],
[38,38,42,42,32,46,49,34,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,37,49,39,48,55,45,46,48],
[41,0,36,52,45,45,51,46,47,51],
[43,44,0,49,40,48,56,49,47,55],
[31,28,31,0,31,35,40,37,37,48],
[41,35,40,49,0,55,55,45,48,51],
[32,35,32,45,25,0,43,42,40,47],
[25,29,24,40,25,37,0,37,40,45],
[35,34,31,43,35,38,43,0,39,47],
[34,33,33,43,32,40,40,41,0,43],
[32,29,25,32,29,33,35,33,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,41,39,45,43,38,38,37,38],
[40,0,37,29,42,35,43,44,46,38],
[39,43,0,43,53,37,50,45,45,44],
[41,51,37,0,45,42,45,44,46,45],
[35,38,27,35,0,37,38,42,35,41],
[37,45,43,38,43,0,31,40,43,41],
[42,37,30,35,42,49,0,36,41,43],
[42,36,35,36,38,40,44,0,42,34],
[43,34,35,34,45,37,39,38,0,38],
[42,42,36,35,39,39,37,46,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,35,25,33,39,36,38,36,42],
[48,0,37,40,46,48,50,43,46,44],
[45,43,0,46,40,45,41,40,47,35],
[55,40,34,0,36,40,39,39,44,41],
[47,34,40,44,0,44,39,41,42,43],
[41,32,35,40,36,0,40,36,41,34],
[44,30,39,41,41,40,0,43,39,39],
[42,37,40,41,39,44,37,0,39,32],
[44,34,33,36,38,39,41,41,0,34],
[38,36,45,39,37,46,41,48,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,40,38,40,32,36,42,40,49],
[44,0,39,49,39,49,36,45,38,43],
[40,41,0,46,46,45,35,44,58,37],
[42,31,34,0,33,29,27,30,38,24],
[40,41,34,47,0,42,33,48,51,40],
[48,31,35,51,38,0,36,46,42,43],
[44,44,45,53,47,44,0,43,39,41],
[38,35,36,50,32,34,37,0,43,35],
[40,42,22,42,29,38,41,37,0,37],
[31,37,43,56,40,37,39,45,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,61,73,55,54,39,55,47,73],
[17,0,43,38,28,39,28,22,34,48],
[19,37,0,35,40,26,37,42,37,29],
[7,42,45,0,39,41,25,33,26,18],
[25,52,40,41,0,40,43,25,36,28],
[26,41,54,39,40,0,27,34,43,32],
[41,52,43,55,37,53,0,37,48,47],
[25,58,38,47,55,46,43,0,41,41],
[33,46,43,54,44,37,32,39,0,39],
[7,32,51,62,52,48,33,39,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,40,36,43,45,42,28,37,45],
[36,0,37,35,48,37,32,34,34,47],
[40,43,0,34,45,35,40,37,42,35],
[44,45,46,0,49,45,34,38,34,47],
[37,32,35,31,0,41,31,28,37,42],
[35,43,45,35,39,0,41,31,38,45],
[38,48,40,46,49,39,0,33,42,41],
[52,46,43,42,52,49,47,0,39,53],
[43,46,38,46,43,42,38,41,0,50],
[35,33,45,33,38,35,39,27,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,36,37,45,41,40,44,40,41],
[37,0,33,42,39,42,40,40,36,40],
[44,47,0,39,46,50,43,45,45,46],
[43,38,41,0,40,43,40,46,33,41],
[35,41,34,40,0,39,37,43,43,34],
[39,38,30,37,41,0,35,41,33,37],
[40,40,37,40,43,45,0,45,40,39],
[36,40,35,34,37,39,35,0,43,36],
[40,44,35,47,37,47,40,37,0,36],
[39,40,34,39,46,43,41,44,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,64,47,16,31,17,64,33,34],
[63,0,63,30,46,47,63,63,63,47],
[16,17,0,16,16,33,33,47,49,50],
[33,50,64,0,16,33,33,80,49,50],
[64,34,64,64,0,64,50,80,66,50],
[49,33,47,47,16,0,32,47,49,66],
[63,17,47,47,30,48,0,47,47,48],
[16,17,33,0,0,33,33,0,32,50],
[47,17,31,31,14,31,33,48,0,50],
[46,33,30,30,30,14,32,30,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,42,40,35,38,39,37,34,35],
[43,0,45,40,36,44,41,39,38,42],
[38,35,0,43,46,50,44,34,41,45],
[40,40,37,0,41,42,46,37,35,45],
[45,44,34,39,0,50,44,40,36,42],
[42,36,30,38,30,0,36,31,31,37],
[41,39,36,34,36,44,0,34,40,37],
[43,41,46,43,40,49,46,0,40,49],
[46,42,39,45,44,49,40,40,0,48],
[45,38,35,35,38,43,43,31,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,51,54,41,47,47,45,44,39],
[33,0,36,35,47,39,42,38,43,41],
[29,44,0,40,38,37,47,39,42,41],
[26,45,40,0,35,51,45,42,36,37],
[39,33,42,45,0,38,45,44,44,34],
[33,41,43,29,42,0,45,43,44,48],
[33,38,33,35,35,35,0,26,37,42],
[35,42,41,38,36,37,54,0,34,32],
[36,37,38,44,36,36,43,46,0,47],
[41,39,39,43,46,32,38,48,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,43,39,36,37,41,31,45,33],
[45,0,47,42,53,45,42,50,36,45],
[37,33,0,44,38,36,41,29,45,31],
[41,38,36,0,33,44,37,41,45,32],
[44,27,42,47,0,48,42,42,49,34],
[43,35,44,36,32,0,38,43,41,34],
[39,38,39,43,38,42,0,38,39,41],
[49,30,51,39,38,37,42,0,41,36],
[35,44,35,35,31,39,41,39,0,39],
[47,35,49,48,46,46,39,44,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,40,44,40,49,51,39,39,32],
[34,0,32,45,43,42,39,35,35,33],
[40,48,0,48,40,48,49,44,44,36],
[36,35,32,0,36,37,38,32,41,30],
[40,37,40,44,0,47,47,44,40,34],
[31,38,32,43,33,0,38,45,40,42],
[29,41,31,42,33,42,0,32,35,36],
[41,45,36,48,36,35,48,0,44,34],
[41,45,36,39,40,40,45,36,0,40],
[48,47,44,50,46,38,44,46,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,39,35,40,35,43,37,42,39],
[44,0,27,34,36,32,43,26,36,33],
[41,53,0,39,47,43,47,50,47,37],
[45,46,41,0,40,44,46,41,37,39],
[40,44,33,40,0,35,38,41,39,37],
[45,48,37,36,45,0,40,41,40,36],
[37,37,33,34,42,40,0,32,39,37],
[43,54,30,39,39,39,48,0,40,33],
[38,44,33,43,41,40,41,40,0,41],
[41,47,43,41,43,44,43,47,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,45,45,43,40,41,39,42,39],
[35,0,35,42,42,40,38,37,41,38],
[35,45,0,39,46,46,43,44,44,37],
[35,38,41,0,44,41,36,35,36,35],
[37,38,34,36,0,33,40,44,38,35],
[40,40,34,39,47,0,35,37,36,33],
[39,42,37,44,40,45,0,39,43,37],
[41,43,36,45,36,43,41,0,44,32],
[38,39,36,44,42,44,37,36,0,41],
[41,42,43,45,45,47,43,48,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,31,62,46,38,52,51,40,52],
[30,0,24,59,42,36,32,40,42,34],
[49,56,0,63,46,38,49,59,45,49],
[18,21,17,0,40,23,29,38,24,28],
[34,38,34,40,0,38,41,44,21,39],
[42,44,42,57,42,0,45,50,40,53],
[28,48,31,51,39,35,0,52,42,42],
[29,40,21,42,36,30,28,0,34,30],
[40,38,35,56,59,40,38,46,0,40],
[28,46,31,52,41,27,38,50,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,32,23,39,32,40,35,36,34],
[43,0,39,31,34,35,33,37,37,35],
[48,41,0,29,42,39,30,40,47,38],
[57,49,51,0,57,43,40,46,51,51],
[41,46,38,23,0,38,31,41,43,36],
[48,45,41,37,42,0,42,48,45,41],
[40,47,50,40,49,38,0,35,42,44],
[45,43,40,34,39,32,45,0,38,38],
[44,43,33,29,37,35,38,42,0,39],
[46,45,42,29,44,39,36,42,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,48,47,46,45,41,45,53,38],
[39,0,45,47,45,44,48,42,47,44],
[32,35,0,37,40,41,41,35,39,40],
[33,33,43,0,41,40,43,40,48,38],
[34,35,40,39,0,41,43,36,42,46],
[35,36,39,40,39,0,40,38,46,35],
[39,32,39,37,37,40,0,37,44,39],
[35,38,45,40,44,42,43,0,45,44],
[27,33,41,32,38,34,36,35,0,37],
[42,36,40,42,34,45,41,36,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,21,39,13,19,25,26,20,33],
[62,0,41,53,35,49,61,55,41,53],
[59,39,0,38,25,39,53,39,39,53],
[41,27,42,0,28,40,32,20,21,46],
[67,45,55,52,0,68,67,39,52,74],
[61,31,41,40,12,0,47,32,33,61],
[55,19,27,48,13,33,0,34,27,45],
[54,25,41,60,41,48,46,0,39,40],
[60,39,41,59,28,47,53,41,0,53],
[47,27,27,34,6,19,35,40,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,49,30,29,38,37,31,46,48],
[40,0,52,40,39,44,40,34,42,46],
[31,28,0,22,18,23,28,25,34,33],
[50,40,58,0,33,37,50,43,34,46],
[51,41,62,47,0,50,47,29,53,56],
[42,36,57,43,30,0,34,29,39,46],
[43,40,52,30,33,46,0,35,36,47],
[49,46,55,37,51,51,45,0,42,58],
[34,38,46,46,27,41,44,38,0,50],
[32,34,47,34,24,34,33,22,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,40,40,20,40,40,60,60,20],
[80,0,60,60,40,60,80,60,80,80],
[40,20,0,20,0,40,60,40,40,40],
[40,20,60,0,40,60,60,60,60,60],
[60,40,80,40,0,60,80,60,80,80],
[40,20,40,20,20,0,40,40,60,20],
[40,0,20,20,0,40,0,40,20,20],
[20,20,40,20,20,40,40,0,40,20],
[20,0,40,20,0,20,60,40,0,20],
[60,0,40,20,0,60,60,60,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,39,42,45,42,40,36,44,49],
[22,0,35,29,37,39,37,39,30,41],
[41,45,0,44,39,52,45,47,42,50],
[38,51,36,0,43,47,52,36,39,41],
[35,43,41,37,0,40,37,35,39,45],
[38,41,28,33,40,0,31,34,36,41],
[40,43,35,28,43,49,0,37,36,47],
[44,41,33,44,45,46,43,0,33,48],
[36,50,38,41,41,44,44,47,0,57],
[31,39,30,39,35,39,33,32,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,41,47,41,41,52,45,40,43],
[37,0,42,45,47,33,47,46,42,40],
[39,38,0,47,43,35,42,42,39,40],
[33,35,33,0,36,38,44,43,40,37],
[39,33,37,44,0,37,43,39,41,44],
[39,47,45,42,43,0,46,49,50,48],
[28,33,38,36,37,34,0,36,35,34],
[35,34,38,37,41,31,44,0,41,35],
[40,38,41,40,39,30,45,39,0,40],
[37,40,40,43,36,32,46,45,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,42,44,47,51,50,44,34,39],
[31,0,54,42,41,40,43,49,46,41],
[38,26,0,41,34,52,35,41,36,33],
[36,38,39,0,43,48,42,45,43,32],
[33,39,46,37,0,43,43,52,36,36],
[29,40,28,32,37,0,43,41,22,35],
[30,37,45,38,37,37,0,38,37,26],
[36,31,39,35,28,39,42,0,31,28],
[46,34,44,37,44,58,43,49,0,41],
[41,39,47,48,44,45,54,52,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,33,29,36,33,29,40,30,33],
[38,0,34,27,29,34,35,37,25,28],
[47,46,0,46,46,40,40,49,41,44],
[51,53,34,0,35,39,42,38,36,32],
[44,51,34,45,0,35,37,40,39,32],
[47,46,40,41,45,0,43,44,36,41],
[51,45,40,38,43,37,0,40,36,39],
[40,43,31,42,40,36,40,0,35,34],
[50,55,39,44,41,44,44,45,0,45],
[47,52,36,48,48,39,41,46,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,35,34,51,35,32,42,46,37],
[31,0,36,29,41,40,16,39,42,37],
[45,44,0,41,45,37,35,42,51,36],
[46,51,39,0,50,36,39,37,58,48],
[29,39,35,30,0,30,30,42,41,36],
[45,40,43,44,50,0,42,40,36,43],
[48,64,45,41,50,38,0,43,53,49],
[38,41,38,43,38,40,37,0,41,42],
[34,38,29,22,39,44,27,39,0,34],
[43,43,44,32,44,37,31,38,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,38,40,40,42,40,51,40,42],
[40,0,30,33,44,47,45,44,50,49],
[42,50,0,40,45,60,60,50,57,56],
[40,47,40,0,48,46,59,50,46,51],
[40,36,35,32,0,42,49,48,35,40],
[38,33,20,34,38,0,43,43,42,47],
[40,35,20,21,31,37,0,43,32,34],
[29,36,30,30,32,37,37,0,46,36],
[40,30,23,34,45,38,48,34,0,49],
[38,31,24,29,40,33,46,44,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,36,31,32,34,36,40,32,30],
[49,0,44,40,43,46,44,46,38,37],
[44,36,0,35,36,44,40,38,38,40],
[49,40,45,0,44,43,42,44,35,39],
[48,37,44,36,0,45,46,44,40,36],
[46,34,36,37,35,0,39,43,37,33],
[44,36,40,38,34,41,0,38,40,39],
[40,34,42,36,36,37,42,0,40,35],
[48,42,42,45,40,43,40,40,0,39],
[50,43,40,41,44,47,41,45,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,39,43,48,33,48,41,46,27],
[35,0,36,31,30,28,28,34,37,38],
[41,44,0,43,40,38,33,39,47,38],
[37,49,37,0,46,36,40,36,41,29],
[32,50,40,34,0,28,43,39,38,26],
[47,52,42,44,52,0,48,44,42,35],
[32,52,47,40,37,32,0,36,37,39],
[39,46,41,44,41,36,44,0,52,41],
[34,43,33,39,42,38,43,28,0,24],
[53,42,42,51,54,45,41,39,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,39,38,29,33,40,40,37,34],
[46,0,40,47,32,37,45,49,47,36],
[41,40,0,39,27,35,50,53,37,42],
[42,33,41,0,30,35,42,47,38,36],
[51,48,53,50,0,41,51,51,45,40],
[47,43,45,45,39,0,48,48,48,39],
[40,35,30,38,29,32,0,40,40,28],
[40,31,27,33,29,32,40,0,33,26],
[43,33,43,42,35,32,40,47,0,37],
[46,44,38,44,40,41,52,54,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,40,50,37,38,41,36,28,33],
[40,0,33,48,27,42,39,33,34,39],
[40,47,0,47,38,45,45,37,36,43],
[30,32,33,0,26,38,37,42,31,33],
[43,53,42,54,0,55,40,48,43,35],
[42,38,35,42,25,0,48,35,35,40],
[39,41,35,43,40,32,0,37,34,41],
[44,47,43,38,32,45,43,0,39,44],
[52,46,44,49,37,45,46,41,0,48],
[47,41,37,47,45,40,39,36,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,35,52,44,62,53,61,53,54],
[38,0,29,44,36,54,38,44,55,46],
[45,51,0,53,44,63,54,62,44,27],
[28,36,27,0,44,46,19,36,44,36],
[36,44,36,36,0,54,36,44,61,28],
[18,26,17,34,26,0,9,34,26,17],
[27,42,26,61,44,71,0,70,35,35],
[19,36,18,44,36,46,10,0,27,27],
[27,25,36,36,19,54,45,53,0,18],
[26,34,53,44,52,63,45,53,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,45,38,50,50,50,42,44,39],
[42,0,44,37,40,45,42,40,37,33],
[35,36,0,37,42,43,44,36,40,36],
[42,43,43,0,46,45,53,42,35,39],
[30,40,38,34,0,39,49,39,35,36],
[30,35,37,35,41,0,45,33,34,34],
[30,38,36,27,31,35,0,31,34,35],
[38,40,44,38,41,47,49,0,36,42],
[36,43,40,45,45,46,46,44,0,40],
[41,47,44,41,44,46,45,38,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,52,38,43,53,49,46,67,50],
[41,0,54,40,53,44,45,42,54,48],
[28,26,0,35,52,53,33,42,41,31],
[42,40,45,0,51,45,36,35,39,47],
[37,27,28,29,0,36,17,30,36,32],
[27,36,27,35,44,0,31,30,40,27],
[31,35,47,44,63,49,0,46,49,43],
[34,38,38,45,50,50,34,0,44,47],
[13,26,39,41,44,40,31,36,0,36],
[30,32,49,33,48,53,37,33,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,68,46,43,61,42,65,58,38],
[35,0,39,50,43,57,43,46,56,56],
[12,41,0,43,20,41,37,26,36,39],
[34,30,37,0,16,47,16,34,49,28],
[37,37,60,64,0,58,39,50,44,50],
[19,23,39,33,22,0,26,29,50,33],
[38,37,43,64,41,54,0,44,49,40],
[15,34,54,46,30,51,36,0,52,37],
[22,24,44,31,36,30,31,28,0,21],
[42,24,41,52,30,47,40,43,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,26,37,35,35,46,41,46,41],
[31,0,28,39,41,33,37,38,40,30],
[54,52,0,48,44,38,49,47,58,48],
[43,41,32,0,40,33,38,35,41,33],
[45,39,36,40,0,35,44,40,45,43],
[45,47,42,47,45,0,43,39,47,39],
[34,43,31,42,36,37,0,45,42,36],
[39,42,33,45,40,41,35,0,38,31],
[34,40,22,39,35,33,38,42,0,33],
[39,50,32,47,37,41,44,49,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,37,48,40,47,42,45,41,34],
[36,0,39,43,40,40,30,41,40,39],
[43,41,0,42,35,41,37,42,38,34],
[32,37,38,0,36,34,27,35,41,34],
[40,40,45,44,0,40,42,45,36,46],
[33,40,39,46,40,0,33,44,45,42],
[38,50,43,53,38,47,0,47,42,48],
[35,39,38,45,35,36,33,0,33,40],
[39,40,42,39,44,35,38,47,0,38],
[46,41,46,46,34,38,32,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,48,47,53,55,43,49,39,45],
[39,0,43,52,43,47,42,54,35,31],
[32,37,0,38,36,36,33,44,36,29],
[33,28,42,0,38,38,27,39,40,20],
[27,37,44,42,0,44,41,39,30,34],
[25,33,44,42,36,0,35,38,31,29],
[37,38,47,53,39,45,0,51,44,44],
[31,26,36,41,41,42,29,0,31,22],
[41,45,44,40,50,49,36,49,0,37],
[35,49,51,60,46,51,36,58,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,28,47,36,40,36,43,37,46],
[34,0,27,32,22,28,35,39,28,33],
[52,53,0,46,41,45,41,58,36,37],
[33,48,34,0,50,51,50,44,45,46],
[44,58,39,30,0,43,48,46,43,47],
[40,52,35,29,37,0,45,39,29,46],
[44,45,39,30,32,35,0,38,28,34],
[37,41,22,36,34,41,42,0,31,39],
[43,52,44,35,37,51,52,49,0,44],
[34,47,43,34,33,34,46,41,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,40,39,38,37,32,29,29,31],
[46,0,41,37,41,36,32,37,43,29],
[40,39,0,45,42,38,26,44,41,38],
[41,43,35,0,35,40,35,31,41,33],
[42,39,38,45,0,37,36,37,41,32],
[43,44,42,40,43,0,32,41,43,33],
[48,48,54,45,44,48,0,38,37,46],
[51,43,36,49,43,39,42,0,41,44],
[51,37,39,39,39,37,43,39,0,30],
[49,51,42,47,48,47,34,36,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,15,45,30,48,62,45,45,48],
[30,0,15,45,30,45,45,45,45,30],
[65,65,0,48,30,48,65,63,48,33],
[35,35,32,0,32,33,50,32,15,48],
[50,50,50,48,0,33,80,48,48,33],
[32,35,32,47,47,0,47,47,62,30],
[18,35,15,30,0,33,0,15,15,33],
[35,35,17,48,32,33,65,0,33,33],
[35,35,32,65,32,18,65,47,0,33],
[32,50,47,32,47,50,47,47,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,53,42,38,41,39,46,36,36],
[43,0,52,40,34,38,39,45,35,42],
[27,28,0,40,27,34,30,20,27,26],
[38,40,40,0,38,33,45,40,43,41],
[42,46,53,42,0,43,48,36,43,37],
[39,42,46,47,37,0,46,32,39,45],
[41,41,50,35,32,34,0,40,42,34],
[34,35,60,40,44,48,40,0,40,45],
[44,45,53,37,37,41,38,40,0,47],
[44,38,54,39,43,35,46,35,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,39,45,37,38,36,40,35,35],
[40,0,46,46,37,37,35,39,39,34],
[41,34,0,47,36,39,39,43,34,37],
[35,34,33,0,38,32,36,35,33,34],
[43,43,44,42,0,41,35,39,42,38],
[42,43,41,48,39,0,35,43,42,37],
[44,45,41,44,45,45,0,43,37,40],
[40,41,37,45,41,37,37,0,34,32],
[45,41,46,47,38,38,43,46,0,34],
[45,46,43,46,42,43,40,48,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,23,50,46,34,29,25,56,41],
[40,0,30,41,39,15,48,32,62,47],
[57,50,0,35,55,43,64,48,80,41],
[30,39,45,0,45,24,45,38,54,55],
[34,41,25,35,0,9,48,34,47,34],
[46,65,37,56,71,0,47,54,62,55],
[51,32,16,35,32,33,0,24,63,41],
[55,48,32,42,46,26,56,0,63,41],
[24,18,0,26,33,18,17,17,0,8],
[39,33,39,25,46,25,39,39,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,40,36,43,41,42,38,40,38],
[29,0,32,25,35,31,32,32,36,29],
[40,48,0,36,42,41,43,44,41,38],
[44,55,44,0,47,44,46,40,45,39],
[37,45,38,33,0,38,39,39,40,37],
[39,49,39,36,42,0,41,39,41,37],
[38,48,37,34,41,39,0,37,41,36],
[42,48,36,40,41,41,43,0,42,40],
[40,44,39,35,40,39,39,38,0,33],
[42,51,42,41,43,43,44,40,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,47,54,39,27,30,43,43,39],
[53,0,39,44,46,41,55,61,49,49],
[33,41,0,31,55,29,35,45,39,35],
[26,36,49,0,45,27,37,48,52,31],
[41,34,25,35,0,29,27,35,44,46],
[53,39,51,53,51,0,40,64,45,47],
[50,25,45,43,53,40,0,48,52,51],
[37,19,35,32,45,16,32,0,37,36],
[37,31,41,28,36,35,28,43,0,37],
[41,31,45,49,34,33,29,44,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,36,44,38,41,46,40,45,49],
[30,0,32,35,28,37,37,43,37,39],
[44,48,0,46,36,48,45,48,44,46],
[36,45,34,0,35,33,46,42,43,38],
[42,52,44,45,0,36,40,43,34,40],
[39,43,32,47,44,0,44,44,36,45],
[34,43,35,34,40,36,0,33,30,40],
[40,37,32,38,37,36,47,0,37,38],
[35,43,36,37,46,44,50,43,0,45],
[31,41,34,42,40,35,40,42,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,39,24,40,37,25,25,31,31],
[44,0,49,45,36,38,42,41,45,41],
[41,31,0,27,36,43,36,39,38,38],
[56,35,53,0,44,53,35,42,48,42],
[40,44,44,36,0,40,33,41,49,39],
[43,42,37,27,40,0,34,42,41,39],
[55,38,44,45,47,46,0,37,44,45],
[55,39,41,38,39,38,43,0,44,42],
[49,35,42,32,31,39,36,36,0,37],
[49,39,42,38,41,41,35,38,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,36,43,35,43,41,37,28,34],
[49,0,44,40,53,48,45,42,38,43],
[44,36,0,42,47,49,41,36,39,49],
[37,40,38,0,43,48,49,41,24,49],
[45,27,33,37,0,43,45,34,41,39],
[37,32,31,32,37,0,36,40,28,31],
[39,35,39,31,35,44,0,37,35,47],
[43,38,44,39,46,40,43,0,35,36],
[52,42,41,56,39,52,45,45,0,55],
[46,37,31,31,41,49,33,44,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,41,41,44,36,49,42,39,40],
[44,0,47,46,39,38,38,45,44,36],
[39,33,0,41,39,32,39,34,36,34],
[39,34,39,0,35,43,37,36,35,37],
[36,41,41,45,0,41,44,35,35,36],
[44,42,48,37,39,0,46,46,47,41],
[31,42,41,43,36,34,0,40,39,30],
[38,35,46,44,45,34,40,0,41,38],
[41,36,44,45,45,33,41,39,0,34],
[40,44,46,43,44,39,50,42,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,34,43,43,35,37,35,36,37],
[44,0,32,48,51,32,33,38,38,40],
[46,48,0,45,50,36,41,39,50,40],
[37,32,35,0,47,28,37,37,38,40],
[37,29,30,33,0,34,35,32,36,34],
[45,48,44,52,46,0,35,40,38,45],
[43,47,39,43,45,45,0,37,39,46],
[45,42,41,43,48,40,43,0,46,38],
[44,42,30,42,44,42,41,34,0,43],
[43,40,40,40,46,35,34,42,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,42,42,35,38,46,43,39,38],
[44,0,36,37,47,40,45,40,37,41],
[38,44,0,40,43,42,57,42,39,40],
[38,43,40,0,39,51,53,38,42,45],
[45,33,37,41,0,35,45,41,42,45],
[42,40,38,29,45,0,47,34,29,41],
[34,35,23,27,35,33,0,24,27,30],
[37,40,38,42,39,46,56,0,50,45],
[41,43,41,38,38,51,53,30,0,43],
[42,39,40,35,35,39,50,35,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,60,59,67,46,34,36,47,60],
[20,0,43,43,43,32,20,43,20,31],
[20,37,0,34,44,33,21,21,33,24],
[21,37,46,0,56,46,21,34,34,45],
[13,37,36,24,0,0,13,24,24,24],
[34,48,47,34,80,0,34,24,45,35],
[46,60,59,59,67,46,0,33,47,49],
[44,37,59,46,56,56,47,0,57,58],
[33,60,47,46,56,35,33,23,0,47],
[20,49,56,35,56,45,31,22,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,36,27,42,31,27,37,39,39],
[46,0,32,35,45,41,43,40,46,38],
[44,48,0,48,45,43,39,51,41,38],
[53,45,32,0,50,47,40,42,46,44],
[38,35,35,30,0,38,27,34,37,38],
[49,39,37,33,42,0,38,46,42,44],
[53,37,41,40,53,42,0,50,38,44],
[43,40,29,38,46,34,30,0,42,37],
[41,34,39,34,43,38,42,38,0,34],
[41,42,42,36,42,36,36,43,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,46,38,47,38,37,51,44,38],
[39,0,39,39,52,42,39,45,45,45],
[34,41,0,29,46,31,38,40,32,33],
[42,41,51,0,57,44,49,52,47,32],
[33,28,34,23,0,27,38,39,38,29],
[42,38,49,36,53,0,41,46,36,38],
[43,41,42,31,42,39,0,45,43,33],
[29,35,40,28,41,34,35,0,33,33],
[36,35,48,33,42,44,37,47,0,31],
[42,35,47,48,51,42,47,47,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,42,41,43,39,45,44,47,39],
[37,0,37,40,41,32,41,35,39,34],
[38,43,0,41,40,38,46,39,44,40],
[39,40,39,0,36,35,45,39,47,37],
[37,39,40,44,0,42,37,36,44,33],
[41,48,42,45,38,0,46,45,48,40],
[35,39,34,35,43,34,0,33,40,26],
[36,45,41,41,44,35,47,0,41,36],
[33,41,36,33,36,32,40,39,0,31],
[41,46,40,43,47,40,54,44,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,67,46,59,68,44,40,48,55],
[10,0,21,27,25,41,15,24,22,21],
[13,59,0,43,47,50,34,41,40,39],
[34,53,37,0,40,58,28,29,39,29],
[21,55,33,40,0,51,31,26,38,44],
[12,39,30,22,29,0,18,21,21,28],
[36,65,46,52,49,62,0,48,55,51],
[40,56,39,51,54,59,32,0,49,44],
[32,58,40,41,42,59,25,31,0,40],
[25,59,41,51,36,52,29,36,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,45,41,34,36,32,47,50,34],
[40,0,49,31,41,36,55,56,53,45],
[35,31,0,27,52,41,29,32,43,46],
[39,49,53,0,56,31,49,41,48,44],
[46,39,28,24,0,32,35,32,50,48],
[44,44,39,49,48,0,52,53,52,46],
[48,25,51,31,45,28,0,34,48,55],
[33,24,48,39,48,27,46,0,59,49],
[30,27,37,32,30,28,32,21,0,39],
[46,35,34,36,32,34,25,31,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,42,52,45,36,42,40,46,52],
[35,0,39,38,40,37,30,39,39,40],
[38,41,0,45,34,38,44,33,47,50],
[28,42,35,0,33,35,34,34,37,42],
[35,40,46,47,0,38,38,35,45,47],
[44,43,42,45,42,0,37,44,43,52],
[38,50,36,46,42,43,0,37,49,48],
[40,41,47,46,45,36,43,0,51,41],
[34,41,33,43,35,37,31,29,0,41],
[28,40,30,38,33,28,32,39,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,32,44,40,35,44,33,44,30],
[39,0,33,40,43,37,41,41,35,38],
[48,47,0,44,41,37,46,43,37,34],
[36,40,36,0,42,31,43,37,40,39],
[40,37,39,38,0,40,41,37,41,31],
[45,43,43,49,40,0,51,44,46,38],
[36,39,34,37,39,29,0,34,34,36],
[47,39,37,43,43,36,46,0,44,34],
[36,45,43,40,39,34,46,36,0,41],
[50,42,46,41,49,42,44,46,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,41,40,42,32,39,24,35,43],
[49,0,42,44,46,43,43,35,38,33],
[39,38,0,48,44,39,44,38,44,41],
[40,36,32,0,35,30,27,27,32,25],
[38,34,36,45,0,37,39,36,33,33],
[48,37,41,50,43,0,49,29,40,40],
[41,37,36,53,41,31,0,25,31,35],
[56,45,42,53,44,51,55,0,40,49],
[45,42,36,48,47,40,49,40,0,42],
[37,47,39,55,47,40,45,31,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,34,42,43,40,39,38,36,41],
[41,0,35,44,43,39,41,36,32,38],
[46,45,0,48,49,50,46,45,40,47],
[38,36,32,0,46,37,40,37,31,35],
[37,37,31,34,0,41,30,33,27,36],
[40,41,30,43,39,0,35,41,33,41],
[41,39,34,40,50,45,0,39,29,42],
[42,44,35,43,47,39,41,0,40,43],
[44,48,40,49,53,47,51,40,0,42],
[39,42,33,45,44,39,38,37,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,38,35,41,35,34,30,38,41],
[42,0,42,34,44,34,36,28,42,39],
[42,38,0,31,43,36,32,32,32,34],
[45,46,49,0,45,39,29,39,43,35],
[39,36,37,35,0,35,28,26,33,37],
[45,46,44,41,45,0,31,33,40,38],
[46,44,48,51,52,49,0,36,46,38],
[50,52,48,41,54,47,44,0,49,40],
[42,38,48,37,47,40,34,31,0,42],
[39,41,46,45,43,42,42,40,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,55,39,37,13,13,29,27,14],
[42,0,68,54,66,42,28,42,28,42],
[25,12,0,25,37,25,13,15,25,25],
[41,26,55,0,66,26,15,41,25,41],
[43,14,43,14,0,0,0,43,27,29],
[67,38,55,54,80,0,42,55,54,41],
[67,52,67,65,80,38,0,67,65,67],
[51,38,65,39,37,25,13,0,25,51],
[53,52,55,55,53,26,15,55,0,53],
[66,38,55,39,51,39,13,29,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,19,19,38,0,59,21,38,40],
[61,0,40,80,38,40,61,61,59,61],
[61,40,0,59,59,21,80,61,59,61],
[61,0,21,0,19,0,40,61,40,21],
[42,42,21,61,0,21,42,42,59,42],
[80,40,59,80,59,0,59,80,59,40],
[21,19,0,40,38,21,0,42,38,19],
[59,19,19,19,38,0,38,0,38,19],
[42,21,21,40,21,21,42,42,0,42],
[40,19,19,59,38,40,61,61,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,42,42,34,34,36,44,33,42],
[41,0,48,39,40,38,39,41,45,48],
[38,32,0,34,38,32,41,37,35,44],
[38,41,46,0,39,36,39,51,47,47],
[46,40,42,41,0,42,37,42,40,47],
[46,42,48,44,38,0,38,38,39,45],
[44,41,39,41,43,42,0,45,42,53],
[36,39,43,29,38,42,35,0,38,41],
[47,35,45,33,40,41,38,42,0,41],
[38,32,36,33,33,35,27,39,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,34,41,40,40,42,41,44,42],
[44,0,40,43,42,43,47,40,47,42],
[46,40,0,41,47,41,51,46,50,40],
[39,37,39,0,40,40,43,38,43,39],
[40,38,33,40,0,37,41,43,36,38],
[40,37,39,40,43,0,42,39,43,42],
[38,33,29,37,39,38,0,40,37,43],
[39,40,34,42,37,41,40,0,43,40],
[36,33,30,37,44,37,43,37,0,35],
[38,38,40,41,42,38,37,40,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,32,29,37,33,37,22,32,33],
[48,0,40,47,45,28,34,34,42,47],
[48,40,0,59,40,34,38,32,39,54],
[51,33,21,0,37,20,34,26,26,41],
[43,35,40,43,0,38,42,29,36,50],
[47,52,46,60,42,0,46,33,25,32],
[43,46,42,46,38,34,0,43,34,48],
[58,46,48,54,51,47,37,0,47,56],
[48,38,41,54,44,55,46,33,0,41],
[47,33,26,39,30,48,32,24,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,53,39,40,51,42,52,49,49],
[21,0,36,29,33,31,27,40,34,29],
[27,44,0,40,33,42,34,41,42,40],
[41,51,40,0,38,38,43,48,43,46],
[40,47,47,42,0,46,43,50,52,45],
[29,49,38,42,34,0,33,48,48,44],
[38,53,46,37,37,47,0,56,50,39],
[28,40,39,32,30,32,24,0,42,35],
[31,46,38,37,28,32,30,38,0,38],
[31,51,40,34,35,36,41,45,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,26,34,31,32,29,46,40,28],
[44,0,35,37,28,36,31,33,42,41],
[54,45,0,42,32,37,36,56,41,33],
[46,43,38,0,38,41,37,36,35,44],
[49,52,48,42,0,42,47,38,46,51],
[48,44,43,39,38,0,44,40,37,40],
[51,49,44,43,33,36,0,53,47,32],
[34,47,24,44,42,40,27,0,47,40],
[40,38,39,45,34,43,33,33,0,27],
[52,39,47,36,29,40,48,40,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,44,40,36,50,40,42,37,49],
[41,0,37,37,42,44,37,37,34,55],
[36,43,0,44,42,42,37,39,38,50],
[40,43,36,0,43,48,31,47,38,50],
[44,38,38,37,0,49,40,44,38,52],
[30,36,38,32,31,0,31,30,25,41],
[40,43,43,49,40,49,0,41,40,57],
[38,43,41,33,36,50,39,0,37,49],
[43,46,42,42,42,55,40,43,0,56],
[31,25,30,30,28,39,23,31,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,46,30,33,35,45,33,37,35],
[42,0,46,27,34,48,45,34,37,46],
[34,34,0,25,25,37,51,24,34,38],
[50,53,55,0,42,50,55,40,49,49],
[47,46,55,38,0,50,47,45,49,53],
[45,32,43,30,30,0,44,34,44,38],
[35,35,29,25,33,36,0,37,28,31],
[47,46,56,40,35,46,43,0,53,43],
[43,43,46,31,31,36,52,27,0,35],
[45,34,42,31,27,42,49,37,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,49,36,38,31,41,27,34,29],
[45,0,41,42,41,37,45,36,43,39],
[31,39,0,44,41,29,39,31,31,37],
[44,38,36,0,40,36,45,37,39,36],
[42,39,39,40,0,36,40,32,37,36],
[49,43,51,44,44,0,37,43,47,43],
[39,35,41,35,40,43,0,32,39,38],
[53,44,49,43,48,37,48,0,50,48],
[46,37,49,41,43,33,41,30,0,42],
[51,41,43,44,44,37,42,32,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,42,40,43,43,47,40,37,42],
[40,0,36,43,44,43,48,47,43,43],
[38,44,0,38,41,38,47,42,41,50],
[40,37,42,0,41,34,36,43,43,40],
[37,36,39,39,0,37,46,46,35,49],
[37,37,42,46,43,0,58,51,46,54],
[33,32,33,44,34,22,0,36,35,39],
[40,33,38,37,34,29,44,0,40,41],
[43,37,39,37,45,34,45,40,0,44],
[38,37,30,40,31,26,41,39,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,36,31,36,30,39,32,29,44],
[47,0,37,26,41,32,36,27,33,25],
[44,43,0,40,41,39,47,26,51,33],
[49,54,40,0,42,35,50,32,46,43],
[44,39,39,38,0,40,43,38,41,33],
[50,48,41,45,40,0,47,35,49,38],
[41,44,33,30,37,33,0,24,40,29],
[48,53,54,48,42,45,56,0,48,38],
[51,47,29,34,39,31,40,32,0,35],
[36,55,47,37,47,42,51,42,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,40,36,34,38,45,38,38,36],
[48,0,45,39,44,38,46,40,42,41],
[40,35,0,41,42,41,48,41,37,33],
[44,41,39,0,42,38,48,38,37,37],
[46,36,38,38,0,37,46,38,40,39],
[42,42,39,42,43,0,44,40,40,35],
[35,34,32,32,34,36,0,34,30,35],
[42,40,39,42,42,40,46,0,37,38],
[42,38,43,43,40,40,50,43,0,35],
[44,39,47,43,41,45,45,42,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,41,49,43,50,31,54,44,36],
[38,0,46,47,45,45,50,30,47,39],
[39,34,0,39,43,31,39,33,28,40],
[31,33,41,0,45,47,26,40,33,29],
[37,35,37,35,0,35,34,29,36,18],
[30,35,49,33,45,0,38,33,44,30],
[49,30,41,54,46,42,0,39,36,27],
[26,50,47,40,51,47,41,0,43,44],
[36,33,52,47,44,36,44,37,0,36],
[44,41,40,51,62,50,53,36,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,50,35,35,43,53,42,44,37],
[34,0,42,42,34,43,57,30,36,43],
[30,38,0,49,43,35,39,54,41,34],
[45,38,31,0,22,46,54,36,31,42],
[45,46,37,58,0,52,52,58,51,42],
[37,37,45,34,28,0,53,46,22,28],
[27,23,41,26,28,27,0,33,21,30],
[38,50,26,44,22,34,47,0,43,41],
[36,44,39,49,29,58,59,37,0,41],
[43,37,46,38,38,52,50,39,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,44,46,42,40,46,45,44,38],
[39,0,42,40,37,41,40,43,45,35],
[36,38,0,39,31,38,38,44,33,36],
[34,40,41,0,35,40,44,47,40,39],
[38,43,49,45,0,47,50,54,45,43],
[40,39,42,40,33,0,40,44,39,38],
[34,40,42,36,30,40,0,36,39,36],
[35,37,36,33,26,36,44,0,36,34],
[36,35,47,40,35,41,41,44,0,39],
[42,45,44,41,37,42,44,46,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,35,38,43,42,39,42,42,33],
[35,0,32,38,42,36,33,31,35,34],
[45,48,0,41,45,44,38,42,40,39],
[42,42,39,0,44,43,40,39,39,41],
[37,38,35,36,0,36,37,39,36,31],
[38,44,36,37,44,0,37,34,41,30],
[41,47,42,40,43,43,0,44,41,40],
[38,49,38,41,41,46,36,0,40,37],
[38,45,40,41,44,39,39,40,0,37],
[47,46,41,39,49,50,40,43,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,50,34,51,46,45,36,44,30],
[35,0,49,36,52,41,45,42,37,35],
[30,31,0,27,48,38,29,30,41,32],
[46,44,53,0,50,52,39,51,50,47],
[29,28,32,30,0,40,31,34,38,29],
[34,39,42,28,40,0,26,33,34,28],
[35,35,51,41,49,54,0,40,49,41],
[44,38,50,29,46,47,40,0,41,37],
[36,43,39,30,42,46,31,39,0,38],
[50,45,48,33,51,52,39,43,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,36,58,56,47,54,50,40,54],
[48,0,35,75,60,46,61,51,55,55],
[44,45,0,70,56,40,56,58,50,50],
[22,5,10,0,34,30,36,12,14,34],
[24,20,24,46,0,32,46,38,36,40],
[33,34,40,50,48,0,54,54,32,46],
[26,19,24,44,34,26,0,40,33,35],
[30,29,22,68,42,26,40,0,30,38],
[40,25,30,66,44,48,47,50,0,45],
[26,25,30,46,40,34,45,42,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,40,40,80,40,80,80,80,40],
[0,0,0,0,0,0,0,0,0,40],
[40,80,0,80,40,0,40,40,40,40],
[40,80,0,0,40,0,40,40,40,40],
[0,80,40,40,0,0,80,40,40,40],
[40,80,80,80,80,0,80,80,80,40],
[0,80,40,40,0,0,0,40,0,40],
[0,80,40,40,40,0,40,0,40,40],
[0,80,40,40,40,0,80,40,0,40],
[40,40,40,40,40,40,40,40,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,41,39,39,48,39,43,44],
[36,0,45,40,39,40,42,41,41,47],
[38,35,0,37,39,34,41,35,36,42],
[39,40,43,0,43,34,42,40,42,43],
[41,41,41,37,0,32,40,38,40,41],
[41,40,46,46,48,0,43,42,41,44],
[32,38,39,38,40,37,0,40,33,38],
[41,39,45,40,42,38,40,0,43,47],
[37,39,44,38,40,39,47,37,0,40],
[36,33,38,37,39,36,42,33,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,44,44,51,36,47,38,48,45],
[30,0,36,30,36,30,36,31,34,31],
[36,44,0,41,38,31,45,29,42,35],
[36,50,39,0,38,37,48,28,46,37],
[29,44,42,42,0,33,43,33,42,43],
[44,50,49,43,47,0,48,40,47,44],
[33,44,35,32,37,32,0,28,38,35],
[42,49,51,52,47,40,52,0,44,47],
[32,46,38,34,38,33,42,36,0,34],
[35,49,45,43,37,36,45,33,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,45,44,43,52,42,40,41,44],
[39,0,44,41,38,38,36,40,35,43],
[35,36,0,40,35,37,41,37,32,42],
[36,39,40,0,40,39,36,36,38,37],
[37,42,45,40,0,41,46,43,36,38],
[28,42,43,41,39,0,38,41,35,39],
[38,44,39,44,34,42,0,39,41,42],
[40,40,43,44,37,39,41,0,34,36],
[39,45,48,42,44,45,39,46,0,48],
[36,37,38,43,42,41,38,44,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,30,38,35,39,32,38,36,40],
[47,0,39,38,34,46,40,45,54,42],
[50,41,0,42,43,47,39,51,54,45],
[42,42,38,0,35,49,34,37,53,43],
[45,46,37,45,0,40,41,46,52,41],
[41,34,33,31,40,0,28,30,50,39],
[48,40,41,46,39,52,0,42,49,47],
[42,35,29,43,34,50,38,0,40,40],
[44,26,26,27,28,30,31,40,0,33],
[40,38,35,37,39,41,33,40,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,35,40,36,37,25,36,44,33],
[44,0,43,47,40,43,33,29,62,42],
[45,37,0,38,41,41,32,36,43,32],
[40,33,42,0,36,40,30,32,43,34],
[44,40,39,44,0,47,37,33,45,42],
[43,37,39,40,33,0,44,36,41,38],
[55,47,48,50,43,36,0,45,54,41],
[44,51,44,48,47,44,35,0,55,43],
[36,18,37,37,35,39,26,25,0,37],
[47,38,48,46,38,42,39,37,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,34,31,41,41,41,38,34,38],
[40,0,38,38,47,38,36,45,38,37],
[46,42,0,39,53,42,35,44,42,46],
[49,42,41,0,48,49,39,41,39,46],
[39,33,27,32,0,38,36,38,35,31],
[39,42,38,31,42,0,37,35,37,36],
[39,44,45,41,44,43,0,46,42,41],
[42,35,36,39,42,45,34,0,36,39],
[46,42,38,41,45,43,38,44,0,41],
[42,43,34,34,49,44,39,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,43,39,43,40,46,40,41,37],
[40,0,43,31,44,42,36,31,36,40],
[37,37,0,33,44,37,35,35,31,40],
[41,49,47,0,58,37,47,39,48,46],
[37,36,36,22,0,40,40,33,33,28],
[40,38,43,43,40,0,43,32,43,34],
[34,44,45,33,40,37,0,36,36,34],
[40,49,45,41,47,48,44,0,43,41],
[39,44,49,32,47,37,44,37,0,41],
[43,40,40,34,52,46,46,39,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,48,44,28,33,37,31,31],
[41,0,37,42,42,28,30,37,44,35],
[41,43,0,52,53,37,41,42,42,41],
[32,38,28,0,46,30,36,37,40,33],
[36,38,27,34,0,34,32,35,32,30],
[52,52,43,50,46,0,40,44,45,37],
[47,50,39,44,48,40,0,37,44,41],
[43,43,38,43,45,36,43,0,35,37],
[49,36,38,40,48,35,36,45,0,44],
[49,45,39,47,50,43,39,43,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,35,51,39,48,43,44,42,51],
[36,0,36,46,34,51,39,31,38,41],
[45,44,0,54,38,53,36,46,38,49],
[29,34,26,0,33,38,37,29,31,40],
[41,46,42,47,0,51,47,39,41,47],
[32,29,27,42,29,0,32,27,27,35],
[37,41,44,43,33,48,0,39,42,49],
[36,49,34,51,41,53,41,0,40,49],
[38,42,42,49,39,53,38,40,0,42],
[29,39,31,40,33,45,31,31,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,30,18,29,40,26,34,31,40],
[50,0,31,25,51,55,38,46,38,44],
[50,49,0,29,50,57,41,49,36,45],
[62,55,51,0,47,56,32,48,40,57],
[51,29,30,33,0,40,30,39,40,43],
[40,25,23,24,40,0,27,35,32,34],
[54,42,39,48,50,53,0,47,42,57],
[46,34,31,32,41,45,33,0,29,41],
[49,42,44,40,40,48,38,51,0,58],
[40,36,35,23,37,46,23,39,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,41,41,20,29,22,36,25,36],
[49,0,43,28,35,32,31,38,30,42],
[39,37,0,40,29,41,35,43,30,47],
[39,52,40,0,46,44,32,40,41,44],
[60,45,51,34,0,47,41,34,38,53],
[51,48,39,36,33,0,30,37,38,40],
[58,49,45,48,39,50,0,46,45,47],
[44,42,37,40,46,43,34,0,43,42],
[55,50,50,39,42,42,35,37,0,38],
[44,38,33,36,27,40,33,38,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,41,25,30,23,45,24,37,42],
[44,0,48,43,36,40,44,43,43,45],
[39,32,0,20,32,19,39,33,40,46],
[55,37,60,0,43,49,51,43,49,38],
[50,44,48,37,0,36,45,51,37,40],
[57,40,61,31,44,0,58,44,52,58],
[35,36,41,29,35,22,0,42,42,35],
[56,37,47,37,29,36,38,0,41,25],
[43,37,40,31,43,28,38,39,0,44],
[38,35,34,42,40,22,45,55,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,23,45,54,35,32,42,35,46],
[48,0,42,47,58,46,58,51,40,49],
[57,38,0,53,59,44,58,57,44,43],
[35,33,27,0,41,33,36,28,28,42],
[26,22,21,39,0,40,33,34,21,32],
[45,34,36,47,40,0,46,46,32,54],
[48,22,22,44,47,34,0,33,23,31],
[38,29,23,52,46,34,47,0,20,46],
[45,40,36,52,59,48,57,60,0,56],
[34,31,37,38,48,26,49,34,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,38,38,40,39,42,42,35,48],
[44,0,40,42,46,47,46,48,44,49],
[42,40,0,34,39,42,47,45,35,42],
[42,38,46,0,38,41,46,42,38,56],
[40,34,41,42,0,46,40,50,38,46],
[41,33,38,39,34,0,38,35,36,42],
[38,34,33,34,40,42,0,42,36,39],
[38,32,35,38,30,45,38,0,33,42],
[45,36,45,42,42,44,44,47,0,50],
[32,31,38,24,34,38,41,38,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,34,22,41,45,32,30,38,38],
[40,0,21,31,32,30,31,35,38,31],
[46,59,0,27,59,41,36,39,45,50],
[58,49,53,0,57,55,43,46,40,50],
[39,48,21,23,0,38,23,26,38,44],
[35,50,39,25,42,0,32,23,36,34],
[48,49,44,37,57,48,0,42,44,44],
[50,45,41,34,54,57,38,0,42,40],
[42,42,35,40,42,44,36,38,0,41],
[42,49,30,30,36,46,36,40,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,47,46,51,24,38,41,39,38],
[40,0,54,59,50,41,46,57,48,44],
[33,26,0,39,33,15,31,20,16,30],
[34,21,41,0,37,25,21,32,29,30],
[29,30,47,43,0,11,35,26,36,29],
[56,39,65,55,69,0,52,52,39,55],
[42,34,49,59,45,28,0,45,31,39],
[39,23,60,48,54,28,35,0,31,49],
[41,32,64,51,44,41,49,49,0,48],
[42,36,50,50,51,25,41,31,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,38,47,40,40,44,43,44,40],
[46,0,41,48,48,52,37,51,40,40],
[42,39,0,37,44,40,44,42,33,41],
[33,32,43,0,43,39,44,45,40,39],
[40,32,36,37,0,41,37,30,41,30],
[40,28,40,41,39,0,43,43,39,36],
[36,43,36,36,43,37,0,36,39,40],
[37,29,38,35,50,37,44,0,40,27],
[36,40,47,40,39,41,41,40,0,39],
[40,40,39,41,50,44,40,53,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,36,45,47,38,35,36,49,48],
[41,0,35,46,42,33,44,42,37,45],
[44,45,0,48,49,44,49,40,45,51],
[35,34,32,0,45,40,42,41,46,44],
[33,38,31,35,0,32,42,32,41,43],
[42,47,36,40,48,0,42,45,43,47],
[45,36,31,38,38,38,0,44,35,41],
[44,38,40,39,48,35,36,0,38,42],
[31,43,35,34,39,37,45,42,0,35],
[32,35,29,36,37,33,39,38,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,35,40,39,36,35,44,32,46],
[40,0,34,49,42,48,31,49,26,39],
[45,46,0,54,44,45,54,53,40,54],
[40,31,26,0,38,44,47,46,34,42],
[41,38,36,42,0,40,35,40,29,46],
[44,32,35,36,40,0,37,41,34,36],
[45,49,26,33,45,43,0,38,35,47],
[36,31,27,34,40,39,42,0,45,47],
[48,54,40,46,51,46,45,35,0,54],
[34,41,26,38,34,44,33,33,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,43,56,52,29,44,41,48,52],
[23,0,45,55,39,38,40,31,38,42],
[37,35,0,37,25,14,35,26,46,31],
[24,25,43,0,33,24,31,32,36,39],
[28,41,55,47,0,35,36,34,42,41],
[51,42,66,56,45,0,37,49,54,44],
[36,40,45,49,44,43,0,29,40,43],
[39,49,54,48,46,31,51,0,48,53],
[32,42,34,44,38,26,40,32,0,48],
[28,38,49,41,39,36,37,27,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,46,43,48,46,43,44,49,30],
[42,0,43,43,38,34,41,42,31,38],
[34,37,0,42,41,46,38,38,34,37],
[37,37,38,0,38,44,35,36,34,30],
[32,42,39,42,0,36,45,44,30,36],
[34,46,34,36,44,0,37,38,36,36],
[37,39,42,45,35,43,0,40,44,37],
[36,38,42,44,36,42,40,0,40,35],
[31,49,46,46,50,44,36,40,0,41],
[50,42,43,50,44,44,43,45,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,40,38,41,42,41,46,42,42],
[44,0,49,37,43,47,41,48,43,43],
[40,31,0,35,36,40,41,43,35,37],
[42,43,45,0,39,44,43,44,45,43],
[39,37,44,41,0,40,40,45,38,46],
[38,33,40,36,40,0,37,36,43,37],
[39,39,39,37,40,43,0,38,41,42],
[34,32,37,36,35,44,42,0,40,37],
[38,37,45,35,42,37,39,40,0,40],
[38,37,43,37,34,43,38,43,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,41,43,56,47,44,36,41,48],
[38,0,31,35,44,31,39,37,39,34],
[39,49,0,44,50,41,48,51,47,43],
[37,45,36,0,55,45,42,38,37,43],
[24,36,30,25,0,31,31,33,31,27],
[33,49,39,35,49,0,45,45,43,41],
[36,41,32,38,49,35,0,35,37,46],
[44,43,29,42,47,35,45,0,37,37],
[39,41,33,43,49,37,43,43,0,40],
[32,46,37,37,53,39,34,43,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,30,43,33,35,40,35,26,38],
[37,0,35,30,37,47,45,34,30,50],
[50,45,0,51,34,49,46,43,41,57],
[37,50,29,0,28,42,37,41,27,41],
[47,43,46,52,0,57,58,45,31,57],
[45,33,31,38,23,0,46,35,27,37],
[40,35,34,43,22,34,0,32,27,43],
[45,46,37,39,35,45,48,0,34,52],
[54,50,39,53,49,53,53,46,0,57],
[42,30,23,39,23,43,37,28,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,43,32,35,41,40,51,32,43],
[54,0,43,42,47,34,43,56,41,43],
[37,37,0,32,33,35,36,48,29,36],
[48,38,48,0,36,38,44,50,38,40],
[45,33,47,44,0,33,47,42,39,44],
[39,46,45,42,47,0,47,50,39,47],
[40,37,44,36,33,33,0,51,41,36],
[29,24,32,30,38,30,29,0,33,25],
[48,39,51,42,41,41,39,47,0,43],
[37,37,44,40,36,33,44,55,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,38,45,31,38,34,40,40,52],
[42,0,38,37,32,34,30,48,29,53],
[42,42,0,36,32,38,33,39,35,54],
[35,43,44,0,30,39,31,39,30,59],
[49,48,48,50,0,57,37,32,48,58],
[42,46,42,41,23,0,43,37,42,57],
[46,50,47,49,43,37,0,57,40,65],
[40,32,41,41,48,43,23,0,41,53],
[40,51,45,50,32,38,40,39,0,60],
[28,27,26,21,22,23,15,27,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,41,49,47,34,46,54,53,43],
[49,0,43,43,45,34,44,51,53,39],
[39,37,0,52,44,40,47,47,44,39],
[31,37,28,0,43,35,35,45,45,39],
[33,35,36,37,0,42,39,50,44,39],
[46,46,40,45,38,0,51,45,45,39],
[34,36,33,45,41,29,0,48,45,42],
[26,29,33,35,30,35,32,0,30,18],
[27,27,36,35,36,35,35,50,0,32],
[37,41,41,41,41,41,38,62,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,32,30,10,30,52,20,11,33],
[69,0,71,71,42,59,71,60,40,62],
[48,9,0,68,10,29,41,29,0,32],
[50,9,12,0,12,19,32,29,0,22],
[70,38,70,68,0,49,71,38,30,71],
[50,21,51,61,31,0,52,31,21,22],
[28,9,39,48,9,28,0,19,18,19],
[60,20,51,51,42,49,61,0,29,42],
[69,40,80,80,50,59,62,51,0,50],
[47,18,48,58,9,58,61,38,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,38,28,41,40,40,47,37,39],
[42,0,42,34,40,37,33,40,45,41],
[42,38,0,28,38,34,34,42,46,34],
[52,46,52,0,43,30,45,50,49,46],
[39,40,42,37,0,39,42,41,39,38],
[40,43,46,50,41,0,42,44,42,44],
[40,47,46,35,38,38,0,44,46,42],
[33,40,38,30,39,36,36,0,32,35],
[43,35,34,31,41,38,34,48,0,36],
[41,39,46,34,42,36,38,45,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,42,45,42,50,49,43,40,50],
[31,0,37,47,42,42,45,35,36,41],
[38,43,0,46,40,46,38,35,43,48],
[35,33,34,0,39,38,38,36,31,39],
[38,38,40,41,0,39,32,37,41,47],
[30,38,34,42,41,0,43,35,36,50],
[31,35,42,42,48,37,0,35,45,46],
[37,45,45,44,43,45,45,0,35,50],
[40,44,37,49,39,44,35,45,0,47],
[30,39,32,41,33,30,34,30,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,38,38,35,48,35,25,25,48],
[55,0,35,59,69,57,67,35,46,58],
[42,45,0,70,44,57,45,23,46,34],
[42,21,10,0,31,54,32,33,33,10],
[45,11,36,49,0,46,35,25,36,34],
[32,23,23,26,34,0,45,23,34,23],
[45,13,35,48,45,35,0,35,35,46],
[55,45,57,47,55,57,45,0,34,34],
[55,34,34,47,44,46,45,46,0,34],
[32,22,46,70,46,57,34,46,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,43,35,49,39,38,49,44,46],
[42,0,38,33,46,41,35,42,42,39],
[37,42,0,35,35,26,32,40,43,37],
[45,47,45,0,45,33,35,47,50,43],
[31,34,45,35,0,28,31,44,36,33],
[41,39,54,47,52,0,45,45,50,49],
[42,45,48,45,49,35,0,43,57,49],
[31,38,40,33,36,35,37,0,38,40],
[36,38,37,30,44,30,23,42,0,39],
[34,41,43,37,47,31,31,40,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,34,37,35,35,42,30,38,39],
[44,0,37,49,38,35,44,39,37,48],
[46,43,0,47,40,42,45,40,37,46],
[43,31,33,0,33,33,36,37,32,35],
[45,42,40,47,0,33,42,38,36,41],
[45,45,38,47,47,0,46,34,42,50],
[38,36,35,44,38,34,0,35,33,40],
[50,41,40,43,42,46,45,0,44,44],
[42,43,43,48,44,38,47,36,0,41],
[41,32,34,45,39,30,40,36,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,28,33,36,28,34,30,32,39],
[37,0,31,36,39,35,36,37,34,49],
[52,49,0,36,37,38,39,36,36,48],
[47,44,44,0,41,38,36,32,40,40],
[44,41,43,39,0,42,42,44,37,45],
[52,45,42,42,38,0,45,34,37,42],
[46,44,41,44,38,35,0,29,33,42],
[50,43,44,48,36,46,51,0,32,43],
[48,46,44,40,43,43,47,48,0,51],
[41,31,32,40,35,38,38,37,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,40,47,42,30,35,35,40,46],
[48,0,56,51,59,40,55,58,35,54],
[40,24,0,32,39,28,45,38,32,33],
[33,29,48,0,56,33,52,44,45,50],
[38,21,41,24,0,32,39,47,36,39],
[50,40,52,47,48,0,48,42,36,55],
[45,25,35,28,41,32,0,40,46,37],
[45,22,42,36,33,38,40,0,36,40],
[40,45,48,35,44,44,34,44,0,55],
[34,26,47,30,41,25,43,40,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,35,39,43,38,50,38,46,41],
[39,0,38,47,43,37,51,43,49,33],
[45,42,0,38,37,45,46,40,47,33],
[41,33,42,0,37,37,44,42,44,33],
[37,37,43,43,0,41,38,43,50,40],
[42,43,35,43,39,0,49,46,50,37],
[30,29,34,36,42,31,0,38,44,33],
[42,37,40,38,37,34,42,0,49,37],
[34,31,33,36,30,30,36,31,0,28],
[39,47,47,47,40,43,47,43,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,43,47,42,42,38,45,35,51],
[49,0,42,46,48,45,45,45,40,45],
[37,38,0,47,40,38,32,37,31,46],
[33,34,33,0,38,40,35,34,35,41],
[38,32,40,42,0,47,36,40,40,47],
[38,35,42,40,33,0,31,43,43,45],
[42,35,48,45,44,49,0,43,39,46],
[35,35,43,46,40,37,37,0,37,42],
[45,40,49,45,40,37,41,43,0,48],
[29,35,34,39,33,35,34,38,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,40,43,41,36,30,34,37,33],
[49,0,42,44,34,32,44,41,47,37],
[40,38,0,40,40,33,36,38,43,33],
[37,36,40,0,33,33,36,34,37,31],
[39,46,40,47,0,37,45,40,43,35],
[44,48,47,47,43,0,40,42,42,38],
[50,36,44,44,35,40,0,43,46,41],
[46,39,42,46,40,38,37,0,43,37],
[43,33,37,43,37,38,34,37,0,37],
[47,43,47,49,45,42,39,43,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,45,45,59,65,34,30,29,57],
[43,0,43,59,44,50,50,22,27,43],
[35,37,0,52,35,48,48,7,30,43],
[35,21,28,0,31,43,51,35,35,43],
[21,36,45,49,0,43,26,45,28,37],
[15,30,32,37,37,0,26,17,30,32],
[46,30,32,29,54,54,0,32,37,40],
[50,58,73,45,35,63,48,0,43,44],
[51,53,50,45,52,50,43,37,0,50],
[23,37,37,37,43,48,40,36,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,45,35,47,40,45,46,48,35],
[36,0,32,42,35,27,31,40,40,33],
[35,48,0,48,45,37,45,43,41,38],
[45,38,32,0,42,34,30,38,43,28],
[33,45,35,38,0,35,37,34,43,39],
[40,53,43,46,45,0,43,46,49,36],
[35,49,35,50,43,37,0,45,47,41],
[34,40,37,42,46,34,35,0,42,40],
[32,40,39,37,37,31,33,38,0,28],
[45,47,42,52,41,44,39,40,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,38,37,41,42,39,58,38,41],
[46,0,47,48,41,46,38,58,41,47],
[42,33,0,47,36,43,40,51,41,38],
[43,32,33,0,40,47,27,46,44,36],
[39,39,44,40,0,45,26,46,47,41],
[38,34,37,33,35,0,42,47,42,34],
[41,42,40,53,54,38,0,49,45,50],
[22,22,29,34,34,33,31,0,27,33],
[42,39,39,36,33,38,35,53,0,36],
[39,33,42,44,39,46,30,47,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,41,40,37,43,44,33,41,36],
[44,0,43,45,43,45,49,35,43,42],
[39,37,0,44,36,42,45,35,46,42],
[40,35,36,0,41,39,47,33,45,36],
[43,37,44,39,0,47,49,44,47,41],
[37,35,38,41,33,0,44,35,43,34],
[36,31,35,33,31,36,0,30,37,29],
[47,45,45,47,36,45,50,0,42,38],
[39,37,34,35,33,37,43,38,0,41],
[44,38,38,44,39,46,51,42,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,34,39,42,41,38,37,36,38],
[34,0,38,36,39,37,41,45,37,35],
[46,42,0,38,43,47,43,47,38,44],
[41,44,42,0,40,43,38,43,42,44],
[38,41,37,40,0,43,40,42,40,35],
[39,43,33,37,37,0,33,41,36,34],
[42,39,37,42,40,47,0,44,43,40],
[43,35,33,37,38,39,36,0,30,44],
[44,43,42,38,40,44,37,50,0,46],
[42,45,36,36,45,46,40,36,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,36,29,38,33,38,29,30,37],
[47,0,41,35,35,32,41,39,36,44],
[44,39,0,30,38,30,39,42,44,49],
[51,45,50,0,47,38,42,50,50,45],
[42,45,42,33,0,38,39,42,43,43],
[47,48,50,42,42,0,40,38,39,49],
[42,39,41,38,41,40,0,37,41,37],
[51,41,38,30,38,42,43,0,41,48],
[50,44,36,30,37,41,39,39,0,44],
[43,36,31,35,37,31,43,32,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,38,47,25,40,29,29,46,33],
[49,0,50,47,41,47,40,41,48,38],
[42,30,0,40,31,38,35,39,40,34],
[33,33,40,0,32,29,29,28,35,33],
[55,39,49,48,0,51,43,48,55,43],
[40,33,42,51,29,0,36,36,46,38],
[51,40,45,51,37,44,0,40,45,42],
[51,39,41,52,32,44,40,0,48,35],
[34,32,40,45,25,34,35,32,0,27],
[47,42,46,47,37,42,38,45,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,44,36,42,42,34,38,34,44],
[38,0,35,44,47,38,33,38,43,36],
[36,45,0,29,32,34,34,38,37,35],
[44,36,51,0,48,46,39,44,40,36],
[38,33,48,32,0,37,39,32,31,34],
[38,42,46,34,43,0,37,35,40,37],
[46,47,46,41,41,43,0,42,41,36],
[42,42,42,36,48,45,38,0,39,40],
[46,37,43,40,49,40,39,41,0,35],
[36,44,45,44,46,43,44,40,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,55,49,60,41,41,48,27,49],
[47,0,42,59,61,40,32,41,41,48],
[25,38,0,46,52,40,33,35,26,49],
[31,21,34,0,40,22,29,28,40,42],
[20,19,28,40,0,19,12,20,24,38],
[39,40,40,58,61,0,27,54,41,55],
[39,48,47,51,68,53,0,54,41,48],
[32,39,45,52,60,26,26,0,39,42],
[53,39,54,40,56,39,39,41,0,43],
[31,32,31,38,42,25,32,38,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,51,45,48,46,49,44,44,47],
[40,0,43,42,47,41,40,30,39,44],
[29,37,0,31,45,44,38,38,37,33],
[35,38,49,0,44,36,40,39,38,41],
[32,33,35,36,0,39,39,30,29,37],
[34,39,36,44,41,0,42,40,38,45],
[31,40,42,40,41,38,0,36,40,40],
[36,50,42,41,50,40,44,0,38,42],
[36,41,43,42,51,42,40,42,0,44],
[33,36,47,39,43,35,40,38,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,31,28,32,31,29,35,30,30],
[43,0,35,34,43,42,39,41,39,42],
[49,45,0,41,43,44,37,46,39,40],
[52,46,39,0,47,50,43,49,46,45],
[48,37,37,33,0,40,44,44,36,39],
[49,38,36,30,40,0,41,40,39,40],
[51,41,43,37,36,39,0,42,40,40],
[45,39,34,31,36,40,38,0,44,39],
[50,41,41,34,44,41,40,36,0,36],
[50,38,40,35,41,40,40,41,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,41,42,61,69,61,39,41,51],
[21,0,20,42,41,33,40,42,20,30],
[39,60,0,52,52,61,60,70,40,30],
[38,38,28,0,50,50,48,18,28,38],
[19,39,28,30,0,51,38,38,28,29],
[11,47,19,30,29,0,40,27,20,29],
[19,40,20,32,42,40,0,39,30,28],
[41,38,10,62,42,53,41,0,31,20],
[39,60,40,52,52,60,50,49,0,50],
[29,50,50,42,51,51,52,60,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,36,36,28,47,38,38,42,46],
[37,0,27,31,24,27,31,32,38,38],
[44,53,0,45,37,59,57,43,59,49],
[44,49,35,0,37,43,35,24,35,40],
[52,56,43,43,0,60,42,37,41,45],
[33,53,21,37,20,0,30,30,29,33],
[42,49,23,45,38,50,0,35,39,46],
[42,48,37,56,43,50,45,0,42,57],
[38,42,21,45,39,51,41,38,0,48],
[34,42,31,40,35,47,34,23,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,27,45,44,45,35,27,44,53],
[27,0,36,54,45,63,36,45,27,36],
[53,44,0,53,44,45,53,27,44,44],
[35,26,27,0,53,45,35,45,44,44],
[36,35,36,27,0,36,36,36,35,36],
[35,17,35,35,44,0,44,35,35,44],
[45,44,27,45,44,36,0,27,44,27],
[53,35,53,35,44,45,53,0,44,53],
[36,53,36,36,45,45,36,36,0,36],
[27,44,36,36,44,36,53,27,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,32,35,41,37,33,38,39,40],
[41,0,37,42,52,39,35,39,46,46],
[48,43,0,38,48,35,42,40,46,48],
[45,38,42,0,44,38,37,36,39,47],
[39,28,32,36,0,34,39,33,35,41],
[43,41,45,42,46,0,46,39,47,43],
[47,45,38,43,41,34,0,36,45,45],
[42,41,40,44,47,41,44,0,49,48],
[41,34,34,41,45,33,35,31,0,43],
[40,34,32,33,39,37,35,32,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,39,35,35,39,41,41,42,34],
[36,0,39,42,38,38,42,37,40,33],
[41,41,0,38,34,34,44,40,42,43],
[45,38,42,0,38,44,50,53,49,34],
[45,42,46,42,0,40,43,43,44,39],
[41,42,46,36,40,0,45,49,46,38],
[39,38,36,30,37,35,0,36,45,28],
[39,43,40,27,37,31,44,0,41,36],
[38,40,38,31,36,34,35,39,0,32],
[46,47,37,46,41,42,52,44,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,21,38,24,42,35,39,43,38],
[29,0,25,24,22,25,33,29,33,25],
[59,55,0,41,35,45,50,54,42,56],
[42,56,39,0,52,37,56,51,56,51],
[56,58,45,28,0,46,61,47,52,49],
[38,55,35,43,34,0,48,35,47,34],
[45,47,30,24,19,32,0,29,34,24],
[41,51,26,29,33,45,51,0,40,38],
[37,47,38,24,28,33,46,40,0,31],
[42,55,24,29,31,46,56,42,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,31,44,32,44,37,42,34,37],
[36,0,45,35,29,52,35,43,36,33],
[49,35,0,35,29,37,32,42,32,41],
[36,45,45,0,37,46,31,34,32,38],
[48,51,51,43,0,49,37,47,41,41],
[36,28,43,34,31,0,33,33,31,35],
[43,45,48,49,43,47,0,50,36,37],
[38,37,38,46,33,47,30,0,28,36],
[46,44,48,48,39,49,44,52,0,43],
[43,47,39,42,39,45,43,44,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,40,38,53,43,40,40,43,47],
[28,0,37,44,47,38,33,34,32,45],
[40,43,0,41,49,36,40,37,44,39],
[42,36,39,0,54,41,32,42,42,46],
[27,33,31,26,0,31,23,22,31,29],
[37,42,44,39,49,0,27,39,45,46],
[40,47,40,48,57,53,0,40,46,52],
[40,46,43,38,58,41,40,0,48,45],
[37,48,36,38,49,35,34,32,0,46],
[33,35,41,34,51,34,28,35,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,37,49,41,49,35,37,41,39],
[37,0,37,44,39,43,35,39,29,35],
[43,43,0,45,45,42,40,42,44,43],
[31,36,35,0,30,42,29,33,33,38],
[39,41,35,50,0,48,36,37,36,47],
[31,37,38,38,32,0,31,35,29,36],
[45,45,40,51,44,49,0,47,39,50],
[43,41,38,47,43,45,33,0,45,53],
[39,51,36,47,44,51,41,35,0,48],
[41,45,37,42,33,44,30,27,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,45,60,47,48,40,49,56,40],
[38,0,43,51,44,41,45,46,46,41],
[35,37,0,54,47,42,43,44,44,39],
[20,29,26,0,35,35,28,31,44,27],
[33,36,33,45,0,42,33,38,49,33],
[32,39,38,45,38,0,37,42,53,38],
[40,35,37,52,47,43,0,51,46,38],
[31,34,36,49,42,38,29,0,42,36],
[24,34,36,36,31,27,34,38,0,27],
[40,39,41,53,47,42,42,44,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,42,39,42,43,40,41,48,42],
[37,0,43,45,41,43,38,40,45,45],
[38,37,0,44,54,45,38,44,37,46],
[41,35,36,0,44,38,37,36,40,47],
[38,39,26,36,0,34,28,29,35,34],
[37,37,35,42,46,0,40,42,43,46],
[40,42,42,43,52,40,0,47,47,43],
[39,40,36,44,51,38,33,0,47,53],
[32,35,43,40,45,37,33,33,0,38],
[38,35,34,33,46,34,37,27,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,80,80,40,80,80,40,80,40],
[0,0,40,0,0,40,40,0,0,40],
[0,40,0,0,40,40,40,0,40,40],
[0,80,80,0,40,80,40,0,40,40],
[40,80,40,40,0,40,40,0,40,40],
[0,40,40,0,40,0,0,0,40,0],
[0,40,40,40,40,80,0,0,40,40],
[40,80,80,80,80,80,80,0,80,40],
[0,80,40,40,40,40,40,0,0,40],
[40,40,40,40,40,80,40,40,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,25,34,38,34,33,36,40,35],
[44,0,32,37,42,39,34,46,41,39],
[55,48,0,41,51,41,43,47,48,39],
[46,43,39,0,48,42,40,44,42,43],
[42,38,29,32,0,31,26,34,37,36],
[46,41,39,38,49,0,40,45,47,39],
[47,46,37,40,54,40,0,42,44,42],
[44,34,33,36,46,35,38,0,44,39],
[40,39,32,38,43,33,36,36,0,34],
[45,41,41,37,44,41,38,41,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,33,12,56,24,25,34,44,80],
[60,0,45,47,80,47,37,60,44,80],
[47,35,0,47,56,59,36,47,47,59],
[68,33,33,0,56,44,36,57,45,68],
[24,0,24,24,0,24,25,12,24,46],
[56,33,21,36,56,0,36,45,45,68],
[55,43,44,44,55,44,0,32,43,67],
[46,20,33,23,68,35,48,0,44,55],
[36,36,33,35,56,35,37,36,0,59],
[0,0,21,12,34,12,13,25,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,35,32,35,36,36,48,45,36],
[38,0,32,34,39,32,39,41,37,38],
[45,48,0,32,43,34,41,47,42,41],
[48,46,48,0,47,47,45,50,48,36],
[45,41,37,33,0,35,37,46,37,39],
[44,48,46,33,45,0,44,50,43,42],
[44,41,39,35,43,36,0,43,44,41],
[32,39,33,30,34,30,37,0,37,36],
[35,43,38,32,43,37,36,43,0,39],
[44,42,39,44,41,38,39,44,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,43,45,37,43,48,48,40,44],
[41,0,33,38,35,32,47,39,41,34],
[37,47,0,41,46,33,56,44,36,41],
[35,42,39,0,35,33,46,42,47,41],
[43,45,34,45,0,34,48,44,49,38],
[37,48,47,47,46,0,50,40,45,48],
[32,33,24,34,32,30,0,31,31,37],
[32,41,36,38,36,40,49,0,39,43],
[40,39,44,33,31,35,49,41,0,41],
[36,46,39,39,42,32,43,37,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,36,36,40,38,39,32,40,40],
[43,0,37,39,38,30,31,27,35,41],
[44,43,0,41,44,38,32,37,35,39],
[44,41,39,0,40,36,34,36,36,41],
[40,42,36,40,0,38,36,35,38,37],
[42,50,42,44,42,0,38,36,46,44],
[41,49,48,46,44,42,0,40,45,45],
[48,53,43,44,45,44,40,0,43,47],
[40,45,45,44,42,34,35,37,0,49],
[40,39,41,39,43,36,35,33,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,39,45,38,45,41,33,41,45],
[45,0,37,44,31,43,37,29,40,41],
[41,43,0,36,27,40,37,35,42,42],
[35,36,44,0,28,44,27,25,34,50],
[42,49,53,52,0,52,36,43,44,58],
[35,37,40,36,28,0,30,28,37,44],
[39,43,43,53,44,50,0,38,45,57],
[47,51,45,55,37,52,42,0,34,56],
[39,40,38,46,36,43,35,46,0,49],
[35,39,38,30,22,36,23,24,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,37,32,47,42,47,39,38,40],
[34,0,40,33,33,41,41,34,27,31],
[43,40,0,34,51,39,38,37,35,26],
[48,47,46,0,50,46,42,53,41,29],
[33,47,29,30,0,40,37,41,24,29],
[38,39,41,34,40,0,45,35,31,22],
[33,39,42,38,43,35,0,37,33,29],
[41,46,43,27,39,45,43,0,38,32],
[42,53,45,39,56,49,47,42,0,43],
[40,49,54,51,51,58,51,48,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,44,40,46,46,40,43,32,43],
[37,0,43,42,39,49,42,42,37,39],
[36,37,0,33,40,38,33,39,40,36],
[40,38,47,0,50,45,44,43,34,42],
[34,41,40,30,0,43,38,36,36,37],
[34,31,42,35,37,0,32,32,37,35],
[40,38,47,36,42,48,0,46,40,41],
[37,38,41,37,44,48,34,0,33,39],
[48,43,40,46,44,43,40,47,0,38],
[37,41,44,38,43,45,39,41,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,44,38,30,31,32,36,30,31],
[46,0,36,37,40,36,37,42,42,30],
[36,44,0,42,35,40,44,34,46,34],
[42,43,38,0,35,44,39,25,36,34],
[50,40,45,45,0,35,45,40,45,36],
[49,44,40,36,45,0,42,46,42,32],
[48,43,36,41,35,38,0,43,46,38],
[44,38,46,55,40,34,37,0,40,40],
[50,38,34,44,35,38,34,40,0,32],
[49,50,46,46,44,48,42,40,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,38,38,32,36,37,39,44,37],
[46,0,42,46,34,40,42,46,56,52],
[42,38,0,44,33,39,39,42,46,37],
[42,34,36,0,34,37,34,40,43,44],
[48,46,47,46,0,39,39,39,53,47],
[44,40,41,43,41,0,41,43,56,43],
[43,38,41,46,41,39,0,42,51,52],
[41,34,38,40,41,37,38,0,40,47],
[36,24,34,37,27,24,29,40,0,36],
[43,28,43,36,33,37,28,33,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,52,42,58,39,49,39,37,41],
[34,0,40,39,38,42,42,44,34,36],
[28,40,0,37,38,37,27,36,35,32],
[38,41,43,0,51,38,49,46,41,48],
[22,42,42,29,0,30,33,37,32,36],
[41,38,43,42,50,0,33,30,34,37],
[31,38,53,31,47,47,0,40,45,29],
[41,36,44,34,43,50,40,0,30,35],
[43,46,45,39,48,46,35,50,0,43],
[39,44,48,32,44,43,51,45,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,37,38,38,33,41,29,38,41],
[49,0,43,50,50,40,47,44,55,48],
[43,37,0,52,39,37,40,37,48,41],
[42,30,28,0,33,34,35,33,35,35],
[42,30,41,47,0,39,38,36,47,48],
[47,40,43,46,41,0,39,36,47,43],
[39,33,40,45,42,41,0,43,40,36],
[51,36,43,47,44,44,37,0,48,47],
[42,25,32,45,33,33,40,32,0,36],
[39,32,39,45,32,37,44,33,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,40,20,20,40,19,40,60,80],
[61,0,60,40,40,61,20,80,41,61],
[40,20,0,40,40,40,20,39,20,40],
[60,40,40,0,39,40,60,40,60,80],
[60,40,40,41,0,60,60,40,60,80],
[40,19,40,40,20,0,39,60,39,40],
[61,60,60,20,20,41,0,60,60,61],
[40,0,41,40,40,20,20,0,20,40],
[20,39,60,20,20,41,20,60,0,20],
[0,19,40,0,0,40,19,40,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,37,28,37,33,32,29,27,35],
[42,0,33,29,40,34,39,31,45,36],
[43,47,0,37,37,36,37,34,41,40],
[52,51,43,0,46,45,46,40,50,46],
[43,40,43,34,0,37,34,31,39,39],
[47,46,44,35,43,0,39,34,45,43],
[48,41,43,34,46,41,0,37,45,42],
[51,49,46,40,49,46,43,0,36,44],
[53,35,39,30,41,35,35,44,0,38],
[45,44,40,34,41,37,38,36,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,34,30,38,40,38,34,35,39],
[50,0,45,38,46,46,43,51,47,42],
[46,35,0,43,41,38,45,35,44,39],
[50,42,37,0,43,44,46,34,46,45],
[42,34,39,37,0,41,41,38,43,40],
[40,34,42,36,39,0,41,39,37,41],
[42,37,35,34,39,39,0,38,43,37],
[46,29,45,46,42,41,42,0,49,43],
[45,33,36,34,37,43,37,31,0,28],
[41,38,41,35,40,39,43,37,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,34,33,33,36,39,31,43,32],
[44,0,46,44,37,41,40,38,45,34],
[46,34,0,33,34,39,36,40,44,37],
[47,36,47,0,36,42,45,42,45,38],
[47,43,46,44,0,41,48,46,41,38],
[44,39,41,38,39,0,46,39,46,33],
[41,40,44,35,32,34,0,33,43,29],
[49,42,40,38,34,41,47,0,48,43],
[37,35,36,35,39,34,37,32,0,32],
[48,46,43,42,42,47,51,37,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,35,42,42,47,46,42,42,48],
[46,0,43,36,40,37,40,43,44,42],
[45,37,0,33,44,49,46,52,51,42],
[38,44,47,0,41,48,46,50,48,50],
[38,40,36,39,0,45,42,47,42,44],
[33,43,31,32,35,0,37,40,44,39],
[34,40,34,34,38,43,0,35,44,40],
[38,37,28,30,33,40,45,0,38,34],
[38,36,29,32,38,36,36,42,0,35],
[32,38,38,30,36,41,40,46,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,40,37,44,37,42,42,46,40],
[40,0,36,38,41,33,37,40,42,38],
[40,44,0,41,42,43,34,42,47,40],
[43,42,39,0,40,35,45,45,51,45],
[36,39,38,40,0,36,43,42,44,40],
[43,47,37,45,44,0,47,48,44,39],
[38,43,46,35,37,33,0,42,43,35],
[38,40,38,35,38,32,38,0,39,35],
[34,38,33,29,36,36,37,41,0,37],
[40,42,40,35,40,41,45,45,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,27,37,31,32,37,35,35,25],
[48,0,34,48,33,35,38,39,39,34],
[53,46,0,43,35,43,40,49,40,34],
[43,32,37,0,38,31,25,36,36,34],
[49,47,45,42,0,40,42,47,45,44],
[48,45,37,49,40,0,35,41,46,43],
[43,42,40,55,38,45,0,46,51,38],
[45,41,31,44,33,39,34,0,40,35],
[45,41,40,44,35,34,29,40,0,33],
[55,46,46,46,36,37,42,45,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,42,32,49,48,31,46,33],
[36,0,34,36,32,39,37,33,28,37],
[38,46,0,41,37,34,39,30,33,25],
[38,44,39,0,26,31,41,35,42,26],
[48,48,43,54,0,52,49,47,41,38],
[31,41,46,49,28,0,42,43,31,30],
[32,43,41,39,31,38,0,40,36,29],
[49,47,50,45,33,37,40,0,35,44],
[34,52,47,38,39,49,44,45,0,36],
[47,43,55,54,42,50,51,36,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,50,44,36,47,52,48,43,39],
[38,0,49,38,41,47,55,49,44,40],
[30,31,0,28,35,31,38,42,36,33],
[36,42,52,0,44,45,53,49,45,38],
[44,39,45,36,0,41,44,46,48,40],
[33,33,49,35,39,0,48,42,37,32],
[28,25,42,27,36,32,0,32,30,29],
[32,31,38,31,34,38,48,0,39,33],
[37,36,44,35,32,43,50,41,0,34],
[41,40,47,42,40,48,51,47,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,50,54,45,43,34,45,39,39],
[40,0,32,53,46,45,39,38,41,45],
[30,48,0,55,46,48,43,48,38,47],
[26,27,25,0,26,27,30,41,28,35],
[35,34,34,54,0,41,41,47,29,44],
[37,35,32,53,39,0,44,53,36,38],
[46,41,37,50,39,36,0,42,36,42],
[35,42,32,39,33,27,38,0,30,42],
[41,39,42,52,51,44,44,50,0,43],
[41,35,33,45,36,42,38,38,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,42,41,47,42,29,37,30,42],
[48,0,39,28,41,29,43,35,26,40],
[38,41,0,31,45,28,34,39,25,39],
[39,52,49,0,46,42,51,45,49,43],
[33,39,35,34,0,34,35,33,31,34],
[38,51,52,38,46,0,48,45,41,48],
[51,37,46,29,45,32,0,36,21,52],
[43,45,41,35,47,35,44,0,42,35],
[50,54,55,31,49,39,59,38,0,59],
[38,40,41,37,46,32,28,45,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,46,45,42,43,35,31,35,30],
[41,0,37,39,41,33,37,37,38,36],
[34,43,0,40,41,36,30,32,34,34],
[35,41,40,0,38,40,37,39,34,36],
[38,39,39,42,0,37,28,36,36,34],
[37,47,44,40,43,0,36,41,35,41],
[45,43,50,43,52,44,0,36,47,42],
[49,43,48,41,44,39,44,0,45,39],
[45,42,46,46,44,45,33,35,0,33],
[50,44,46,44,46,39,38,41,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,38,46,38,50,38,42,46,32],
[39,0,41,49,42,52,43,40,47,42],
[42,39,0,42,33,45,41,40,42,29],
[34,31,38,0,32,51,39,28,44,32],
[42,38,47,48,0,55,48,47,43,34],
[30,28,35,29,25,0,27,28,30,25],
[42,37,39,41,32,53,0,38,39,34],
[38,40,40,52,33,52,42,0,47,39],
[34,33,38,36,37,50,41,33,0,34],
[48,38,51,48,46,55,46,41,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,29,34,41,34,46,42,36,34],
[25,0,37,34,31,36,46,41,44,33],
[51,43,0,45,49,42,51,46,38,39],
[46,46,35,0,46,37,48,49,44,31],
[39,49,31,34,0,37,50,52,34,30],
[46,44,38,43,43,0,48,48,40,32],
[34,34,29,32,30,32,0,32,34,29],
[38,39,34,31,28,32,48,0,42,43],
[44,36,42,36,46,40,46,38,0,37],
[46,47,41,49,50,48,51,37,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,44,39,40,47,35,48,38,37],
[31,0,39,23,34,38,32,40,31,30],
[36,41,0,41,33,48,37,41,23,41],
[41,57,39,0,44,47,43,43,36,45],
[40,46,47,36,0,47,42,47,40,41],
[33,42,32,33,33,0,29,37,29,30],
[45,48,43,37,38,51,0,43,45,47],
[32,40,39,37,33,43,37,0,36,37],
[42,49,57,44,40,51,35,44,0,47],
[43,50,39,35,39,50,33,43,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,41,50,34,43,45,37,50,43],
[44,0,56,54,46,51,39,49,49,54],
[39,24,0,39,35,39,35,41,40,41],
[30,26,41,0,42,35,31,37,41,43],
[46,34,45,38,0,45,40,46,49,51],
[37,29,41,45,35,0,34,51,38,36],
[35,41,45,49,40,46,0,44,52,45],
[43,31,39,43,34,29,36,0,38,36],
[30,31,40,39,31,42,28,42,0,41],
[37,26,39,37,29,44,35,44,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,28,26,54,26,54,26,28],
[54,0,52,54,26,80,52,54,52,54],
[54,28,0,28,28,54,28,28,0,54],
[52,26,52,0,26,80,26,54,26,26],
[54,54,52,54,0,54,54,28,26,54],
[26,0,26,0,26,0,26,28,0,26],
[54,28,52,54,26,54,0,28,0,54],
[26,26,52,26,52,52,52,0,52,26],
[54,28,80,54,54,80,80,28,0,54],
[52,26,26,54,26,54,26,54,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,37,41,42,46,38,52,43,47],
[27,0,27,40,29,38,30,32,30,30],
[43,53,0,49,33,34,47,42,45,45],
[39,40,31,0,42,35,38,39,39,41],
[38,51,47,38,0,42,36,45,36,41],
[34,42,46,45,38,0,34,39,36,38],
[42,50,33,42,44,46,0,46,42,45],
[28,48,38,41,35,41,34,0,46,45],
[37,50,35,41,44,44,38,34,0,44],
[33,50,35,39,39,42,35,35,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,32,31,35,24,56,45,35,50],
[45,0,52,36,54,41,54,42,45,53],
[48,28,0,23,46,18,58,32,35,48],
[49,44,57,0,51,33,67,50,49,56],
[45,26,34,29,0,31,40,34,39,50],
[56,39,62,47,49,0,62,59,55,51],
[24,26,22,13,40,18,0,23,27,24],
[35,38,48,30,46,21,57,0,46,41],
[45,35,45,31,41,25,53,34,0,49],
[30,27,32,24,30,29,56,39,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,50,48,51,46,41,40,47,44],
[39,0,47,41,41,38,46,34,43,41],
[30,33,0,43,34,33,42,41,34,30],
[32,39,37,0,37,46,40,37,38,42],
[29,39,46,43,0,39,40,31,42,44],
[34,42,47,34,41,0,40,32,39,37],
[39,34,38,40,40,40,0,34,41,25],
[40,46,39,43,49,48,46,0,49,39],
[33,37,46,42,38,41,39,31,0,30],
[36,39,50,38,36,43,55,41,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,53,54,53,47,39,34,58,59],
[27,0,42,47,36,23,34,38,28,43],
[27,38,0,40,34,42,33,29,35,50],
[26,33,40,0,31,21,36,22,27,43],
[27,44,46,49,0,23,38,25,27,48],
[33,57,38,59,57,0,47,29,34,59],
[41,46,47,44,42,33,0,30,42,42],
[46,42,51,58,55,51,50,0,38,48],
[22,52,45,53,53,46,38,42,0,58],
[21,37,30,37,32,21,38,32,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,25,43,31,39,25,41,32,30],
[38,0,35,41,37,34,29,44,36,36],
[55,45,0,56,35,38,45,52,43,50],
[37,39,24,0,31,29,34,41,30,28],
[49,43,45,49,0,44,45,52,33,39],
[41,46,42,51,36,0,43,56,44,47],
[55,51,35,46,35,37,0,53,32,42],
[39,36,28,39,28,24,27,0,32,27],
[48,44,37,50,47,36,48,48,0,39],
[50,44,30,52,41,33,38,53,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,51,60,39,49,70,69,49,49],
[18,0,11,39,20,38,38,39,29,20],
[29,69,0,49,30,38,38,49,29,41],
[20,41,31,0,29,29,60,41,40,41],
[41,60,50,51,0,40,50,51,31,43],
[31,42,42,51,40,0,41,62,30,42],
[10,42,42,20,30,39,0,40,31,40],
[11,41,31,39,29,18,40,0,29,31],
[31,51,51,40,49,50,49,51,0,31],
[31,60,39,39,37,38,40,49,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,52,42,43,37,36,38,49,43],
[42,0,50,37,38,37,39,37,48,44],
[28,30,0,30,37,31,34,37,44,32],
[38,43,50,0,43,39,45,37,44,41],
[37,42,43,37,0,40,37,46,42,42],
[43,43,49,41,40,0,50,47,50,47],
[44,41,46,35,43,30,0,39,51,49],
[42,43,43,43,34,33,41,0,44,45],
[31,32,36,36,38,30,29,36,0,34],
[37,36,48,39,38,33,31,35,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,57,53,48,38,42,47,41,46],
[32,0,49,50,33,41,32,41,42,45],
[23,31,0,34,46,28,52,30,25,25],
[27,30,46,0,34,21,34,36,22,28],
[32,47,34,46,0,30,40,31,24,36],
[42,39,52,59,50,0,52,46,35,46],
[38,48,28,46,40,28,0,35,34,40],
[33,39,50,44,49,34,45,0,35,39],
[39,38,55,58,56,45,46,45,0,54],
[34,35,55,52,44,34,40,41,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,49,35,37,44,42,40,37,39],
[38,0,44,39,39,43,39,33,37,40],
[31,36,0,33,33,40,40,35,32,36],
[45,41,47,0,38,45,44,43,40,42],
[43,41,47,42,0,44,44,33,42,41],
[36,37,40,35,36,0,32,34,41,37],
[38,41,40,36,36,48,0,39,41,38],
[40,47,45,37,47,46,41,0,40,40],
[43,43,48,40,38,39,39,40,0,38],
[41,40,44,38,39,43,42,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,29,42,68,55,40,42,68,68],
[40,0,41,28,54,67,39,54,55,68],
[51,39,0,41,65,65,65,67,53,68],
[38,52,39,0,65,65,52,54,52,53],
[12,26,15,15,0,39,26,41,27,55],
[25,13,15,15,41,0,25,27,28,54],
[40,41,15,28,54,55,0,42,55,68],
[38,26,13,26,39,53,38,0,39,39],
[12,25,27,28,53,52,25,41,0,55],
[12,12,12,27,25,26,12,41,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,48,43,50,48,47,42,40,49],
[33,0,46,37,37,35,32,39,32,40],
[32,34,0,22,35,40,30,35,23,43],
[37,43,58,0,35,50,47,45,37,41],
[30,43,45,45,0,38,44,45,33,40],
[32,45,40,30,42,0,34,45,29,36],
[33,48,50,33,36,46,0,35,36,45],
[38,41,45,35,35,35,45,0,34,42],
[40,48,57,43,47,51,44,46,0,49],
[31,40,37,39,40,44,35,38,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,31,45,37,40,41,43,29,41],
[46,0,44,50,49,44,44,60,40,48],
[49,36,0,48,38,41,45,41,41,46],
[35,30,32,0,29,37,34,38,31,41],
[43,31,42,51,0,37,41,56,37,41],
[40,36,39,43,43,0,38,40,30,38],
[39,36,35,46,39,42,0,37,39,32],
[37,20,39,42,24,40,43,0,30,36],
[51,40,39,49,43,50,41,50,0,45],
[39,32,34,39,39,42,48,44,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,45,61,59,49,38,80,36,61],
[31,0,34,32,31,47,47,45,21,35],
[35,46,0,58,45,58,35,46,35,47],
[19,48,22,0,43,35,47,45,33,23],
[21,49,35,37,0,46,47,46,21,35],
[31,33,22,45,34,0,34,31,22,57],
[42,33,45,33,33,46,0,42,42,56],
[0,35,34,35,34,49,38,0,24,38],
[44,59,45,47,59,58,38,56,0,46],
[19,45,33,57,45,23,24,42,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,40,45,36,41,41,46,42,45],
[39,0,43,46,44,42,39,44,42,47],
[40,37,0,51,40,39,39,44,42,49],
[35,34,29,0,37,33,41,39,40,43],
[44,36,40,43,0,42,40,46,46,47],
[39,38,41,47,38,0,44,40,45,49],
[39,41,41,39,40,36,0,43,44,44],
[34,36,36,41,34,40,37,0,42,45],
[38,38,38,40,34,35,36,38,0,42],
[35,33,31,37,33,31,36,35,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,34,43,28,32,31,34,44,42],
[47,0,37,37,35,31,34,38,42,45],
[46,43,0,43,41,36,35,43,47,46],
[37,43,37,0,31,29,30,34,39,36],
[52,45,39,49,0,44,44,47,54,45],
[48,49,44,51,36,0,46,49,48,53],
[49,46,45,50,36,34,0,40,51,43],
[46,42,37,46,33,31,40,0,44,39],
[36,38,33,41,26,32,29,36,0,40],
[38,35,34,44,35,27,37,41,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,33,36,42,39,44,30,45,33],
[44,0,36,48,43,48,49,37,47,42],
[47,44,0,46,50,44,45,39,52,34],
[44,32,34,0,38,32,46,36,50,40],
[38,37,30,42,0,40,42,24,45,35],
[41,32,36,48,40,0,45,30,48,37],
[36,31,35,34,38,35,0,25,40,33],
[50,43,41,44,56,50,55,0,52,36],
[35,33,28,30,35,32,40,28,0,32],
[47,38,46,40,45,43,47,44,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,40,39,39,39,31,46,38,38],
[36,0,38,40,36,41,36,51,42,38],
[40,42,0,35,34,37,35,50,33,39],
[41,40,45,0,39,42,39,49,40,45],
[41,44,46,41,0,38,44,47,42,40],
[41,39,43,38,42,0,39,47,42,47],
[49,44,45,41,36,41,0,48,42,48],
[34,29,30,31,33,33,32,0,36,39],
[42,38,47,40,38,38,38,44,0,46],
[42,42,41,35,40,33,32,41,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,50,48,33,40,40,30,27,16],
[44,0,49,45,36,33,38,51,34,33],
[30,31,0,37,27,30,33,37,35,37],
[32,35,43,0,38,18,42,45,39,34],
[47,44,53,42,0,35,46,35,36,38],
[40,47,50,62,45,0,49,46,48,37],
[40,42,47,38,34,31,0,36,37,40],
[50,29,43,35,45,34,44,0,37,22],
[53,46,45,41,44,32,43,43,0,47],
[64,47,43,46,42,43,40,58,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,39,36,30,36,33,42,34,34],
[48,0,41,50,30,33,39,49,36,37],
[41,39,0,41,47,40,33,36,43,35],
[44,30,39,0,47,32,41,33,39,32],
[50,50,33,33,0,32,42,36,38,41],
[44,47,40,48,48,0,43,51,50,40],
[47,41,47,39,38,37,0,35,44,37],
[38,31,44,47,44,29,45,0,38,35],
[46,44,37,41,42,30,36,42,0,33],
[46,43,45,48,39,40,43,45,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,54,54,26,53,54,80,53],
[53,0,27,80,80,53,80,54,80,53],
[53,53,0,80,80,26,53,80,80,53],
[26,0,0,0,27,26,53,27,53,26],
[26,0,0,53,0,26,26,54,80,26],
[54,27,54,54,54,0,27,54,80,80],
[27,0,27,27,54,53,0,54,80,53],
[26,26,0,53,26,26,26,0,53,26],
[0,0,0,27,0,0,0,27,0,26],
[27,27,27,54,54,0,27,54,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,45,37,38,41,42,45,46,37],
[38,0,36,31,35,29,38,38,32,34],
[35,44,0,37,36,36,42,37,44,40],
[43,49,43,0,34,41,38,47,43,45],
[42,45,44,46,0,42,43,38,44,42],
[39,51,44,39,38,0,43,47,46,46],
[38,42,38,42,37,37,0,37,39,35],
[35,42,43,33,42,33,43,0,41,40],
[34,48,36,37,36,34,41,39,0,42],
[43,46,40,35,38,34,45,40,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,41,35,38,30,38,38,35,33],
[48,0,37,40,42,34,41,36,38,41],
[39,43,0,38,36,33,38,37,38,31],
[45,40,42,0,40,36,41,42,46,39],
[42,38,44,40,0,35,35,37,39,37],
[50,46,47,44,45,0,40,43,44,35],
[42,39,42,39,45,40,0,40,39,36],
[42,44,43,38,43,37,40,0,44,41],
[45,42,42,34,41,36,41,36,0,37],
[47,39,49,41,43,45,44,39,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,46,37,55,46,38,41,46,40],
[38,0,47,36,53,46,37,34,38,39],
[34,33,0,26,40,33,28,27,32,33],
[43,44,54,0,56,50,42,36,46,46],
[25,27,40,24,0,31,22,29,35,28],
[34,34,47,30,49,0,32,37,37,28],
[42,43,52,38,58,48,0,47,44,40],
[39,46,53,44,51,43,33,0,42,41],
[34,42,48,34,45,43,36,38,0,37],
[40,41,47,34,52,52,40,39,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,38,37,41,35,45,42,37,39],
[27,0,32,29,35,29,36,32,26,30],
[42,48,0,48,42,32,40,41,41,33],
[43,51,32,0,42,36,32,32,39,40],
[39,45,38,38,0,39,37,34,37,42],
[45,51,48,44,41,0,42,41,46,38],
[35,44,40,48,43,38,0,33,28,28],
[38,48,39,48,46,39,47,0,37,32],
[43,54,39,41,43,34,52,43,0,27],
[41,50,47,40,38,42,52,48,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,27,40,39,43,35,48,32,40],
[38,0,25,26,38,39,30,35,32,40],
[53,55,0,42,39,45,55,47,42,41],
[40,54,38,0,36,43,40,38,37,44],
[41,42,41,44,0,27,34,44,36,36],
[37,41,35,37,53,0,30,46,43,48],
[45,50,25,40,46,50,0,40,35,46],
[32,45,33,42,36,34,40,0,34,44],
[48,48,38,43,44,37,45,46,0,34],
[40,40,39,36,44,32,34,36,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,28,37,40,31,28,36,26,36],
[43,0,38,43,30,48,38,43,33,33],
[52,42,0,38,49,45,46,27,38,43],
[43,37,42,0,35,35,34,40,29,28],
[40,50,31,45,0,41,37,33,37,40],
[49,32,35,45,39,0,41,42,43,41],
[52,42,34,46,43,39,0,44,37,45],
[44,37,53,40,47,38,36,0,39,32],
[54,47,42,51,43,37,43,41,0,45],
[44,47,37,52,40,39,35,48,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,38,37,37,46,43,43,45],
[36,0,39,38,37,34,38,38,37,35],
[38,41,0,41,33,33,45,31,43,36],
[42,42,39,0,34,38,46,42,45,38],
[43,43,47,46,0,38,48,46,45,37],
[43,46,47,42,42,0,51,43,42,39],
[34,42,35,34,32,29,0,31,33,38],
[37,42,49,38,34,37,49,0,40,35],
[37,43,37,35,35,38,47,40,0,37],
[35,45,44,42,43,41,42,45,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,41,38,53,51,41,40,45],
[37,0,37,38,31,46,36,39,30,42],
[40,43,0,39,40,45,50,35,42,41],
[39,42,41,0,43,48,54,43,33,38],
[42,49,40,37,0,48,50,39,39,42],
[27,34,35,32,32,0,43,43,31,37],
[29,44,30,26,30,37,0,27,34,41],
[39,41,45,37,41,37,53,0,43,44],
[40,50,38,47,41,49,46,37,0,40],
[35,38,39,42,38,43,39,36,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,38,41,42,45,37,51,40,39],
[36,0,45,44,47,43,37,40,31,35],
[42,35,0,37,53,34,46,43,53,41],
[39,36,43,0,45,46,30,37,34,38],
[38,33,27,35,0,39,22,34,32,37],
[35,37,46,34,41,0,37,35,40,37],
[43,43,34,50,58,43,0,54,49,45],
[29,40,37,43,46,45,26,0,32,30],
[40,49,27,46,48,40,31,48,0,42],
[41,45,39,42,43,43,35,50,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,44,42,45,40,56,37,29,45],
[36,0,37,28,35,39,42,35,31,39],
[36,43,0,38,42,36,43,39,39,42],
[38,52,42,0,38,40,52,41,34,41],
[35,45,38,42,0,29,44,40,32,29],
[40,41,44,40,51,0,45,39,32,41],
[24,38,37,28,36,35,0,33,34,38],
[43,45,41,39,40,41,47,0,41,38],
[51,49,41,46,48,48,46,39,0,44],
[35,41,38,39,51,39,42,42,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,37,38,44,36,32,41,48,39],
[31,0,34,32,31,39,34,39,40,38],
[43,46,0,36,42,41,34,42,40,39],
[42,48,44,0,48,48,40,45,47,46],
[36,49,38,32,0,42,38,37,45,37],
[44,41,39,32,38,0,41,49,43,35],
[48,46,46,40,42,39,0,45,39,44],
[39,41,38,35,43,31,35,0,39,32],
[32,40,40,33,35,37,41,41,0,34],
[41,42,41,34,43,45,36,48,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,42,46,29,42,41,53,49,42],
[43,0,46,47,37,37,38,45,55,42],
[38,34,0,39,31,36,32,43,46,37],
[34,33,41,0,29,33,29,46,34,39],
[51,43,49,51,0,37,45,47,48,51],
[38,43,44,47,43,0,41,46,50,51],
[39,42,48,51,35,39,0,54,44,38],
[27,35,37,34,33,34,26,0,37,38],
[31,25,34,46,32,30,36,43,0,33],
[38,38,43,41,29,29,42,42,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,60,39,33,51,49,32,41,50],
[32,0,49,44,23,40,27,38,37,24],
[20,31,0,39,25,44,25,14,36,38],
[41,36,41,0,33,52,30,35,49,41],
[47,57,55,47,0,63,51,44,55,34],
[29,40,36,28,17,0,40,42,35,23],
[31,53,55,50,29,40,0,25,45,38],
[48,42,66,45,36,38,55,0,34,36],
[39,43,44,31,25,45,35,46,0,33],
[30,56,42,39,46,57,42,44,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,21,35,39,28,27,41,41,25],
[50,0,50,48,54,36,28,54,36,33],
[59,30,0,54,57,43,37,47,40,35],
[45,32,26,0,49,35,26,45,38,35],
[41,26,23,31,0,19,17,35,36,21],
[52,44,37,45,61,0,36,52,43,50],
[53,52,43,54,63,44,0,50,49,33],
[39,26,33,35,45,28,30,0,33,33],
[39,44,40,42,44,37,31,47,0,23],
[55,47,45,45,59,30,47,47,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,37,30,44,43,48,49,56,42],
[57,0,37,55,57,43,57,55,69,55],
[43,43,0,37,62,43,62,56,51,31],
[50,25,43,0,51,44,44,44,56,37],
[36,23,18,29,0,24,35,42,43,35],
[37,37,37,36,56,0,50,61,49,42],
[32,23,18,36,45,30,0,42,50,43],
[31,25,24,36,38,19,38,0,50,30],
[24,11,29,24,37,31,30,30,0,24],
[38,25,49,43,45,38,37,50,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,41,33,37,37,39,29,28,35],
[45,0,47,41,41,38,39,37,38,39],
[39,33,0,40,40,37,40,39,32,35],
[47,39,40,0,41,36,38,36,36,36],
[43,39,40,39,0,38,40,34,33,36],
[43,42,43,44,42,0,39,40,36,41],
[41,41,40,42,40,41,0,35,37,34],
[51,43,41,44,46,40,45,0,36,37],
[52,42,48,44,47,44,43,44,0,39],
[45,41,45,44,44,39,46,43,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,34,30,40,36,38,35,23,30],
[44,0,37,47,53,42,48,34,35,45],
[46,43,0,53,57,42,44,44,35,49],
[50,33,27,0,41,36,40,41,27,32],
[40,27,23,39,0,31,32,33,20,29],
[44,38,38,44,49,0,43,44,41,40],
[42,32,36,40,48,37,0,39,30,43],
[45,46,36,39,47,36,41,0,40,40],
[57,45,45,53,60,39,50,40,0,43],
[50,35,31,48,51,40,37,40,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,36,38,37,42,42,39,36,38],
[40,0,36,38,41,37,49,35,37,32],
[44,44,0,35,39,33,38,42,45,39],
[42,42,45,0,44,39,46,42,44,37],
[43,39,41,36,0,35,42,43,45,39],
[38,43,47,41,45,0,50,42,42,43],
[38,31,42,34,38,30,0,37,35,38],
[41,45,38,38,37,38,43,0,44,38],
[44,43,35,36,35,38,45,36,0,36],
[42,48,41,43,41,37,42,42,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,45,39,46,38,50,39,51,46],
[31,0,51,34,47,42,36,47,39,39],
[35,29,0,29,44,29,38,34,33,36],
[41,46,51,0,44,43,39,42,39,48],
[34,33,36,36,0,28,33,33,36,24],
[42,38,51,37,52,0,44,41,47,33],
[30,44,42,41,47,36,0,40,38,38],
[41,33,46,38,47,39,40,0,35,48],
[29,41,47,41,44,33,42,45,0,38],
[34,41,44,32,56,47,42,32,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,40,47,43,47,38,43,36,50],
[39,0,40,42,39,49,45,42,43,42],
[40,40,0,42,38,44,48,44,39,37],
[33,38,38,0,37,37,36,46,38,44],
[37,41,42,43,0,42,36,42,42,39],
[33,31,36,43,38,0,36,40,35,43],
[42,35,32,44,44,44,0,39,42,40],
[37,38,36,34,38,40,41,0,29,42],
[44,37,41,42,38,45,38,51,0,42],
[30,38,43,36,41,37,40,38,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,42,39,40,37,36,43,37],
[37,0,42,39,38,44,32,31,41,36],
[40,38,0,42,37,39,34,34,43,40],
[38,41,38,0,33,43,38,34,37,33],
[41,42,43,47,0,44,45,40,42,44],
[40,36,41,37,36,0,29,30,41,33],
[43,48,46,42,35,51,0,40,40,43],
[44,49,46,46,40,50,40,0,44,40],
[37,39,37,43,38,39,40,36,0,39],
[43,44,40,47,36,47,37,40,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,59,45,43,31,40,54,40,34],
[40,0,51,44,44,31,44,49,36,42],
[21,29,0,42,34,38,34,41,33,30],
[35,36,38,0,34,34,43,44,38,33],
[37,36,46,46,0,33,38,45,43,41],
[49,49,42,46,47,0,41,39,43,40],
[40,36,46,37,42,39,0,42,32,26],
[26,31,39,36,35,41,38,0,44,39],
[40,44,47,42,37,37,48,36,0,37],
[46,38,50,47,39,40,54,41,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,45,45,33,46,37,40,46,35],
[40,0,43,48,40,45,41,46,42,38],
[35,37,0,47,30,39,36,37,38,35],
[35,32,33,0,30,35,30,34,30,24],
[47,40,50,50,0,41,48,40,48,35],
[34,35,41,45,39,0,43,40,35,35],
[43,39,44,50,32,37,0,39,38,42],
[40,34,43,46,40,40,41,0,37,33],
[34,38,42,50,32,45,42,43,0,44],
[45,42,45,56,45,45,38,47,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,23,33,22,28,14,23,44,36],
[49,0,51,51,35,41,35,54,59,48],
[57,29,0,43,36,47,36,46,47,56],
[47,29,37,0,41,21,28,33,47,36],
[58,45,44,39,0,50,40,48,55,54],
[52,39,33,59,30,0,47,41,43,53],
[66,45,44,52,40,33,0,51,49,60],
[57,26,34,47,32,39,29,0,51,63],
[36,21,33,33,25,37,31,29,0,42],
[44,32,24,44,26,27,20,17,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,40,44,42,41,46,45,42,42],
[41,0,38,40,46,39,42,43,41,39],
[40,42,0,42,42,41,47,44,39,41],
[36,40,38,0,38,34,43,39,36,39],
[38,34,38,42,0,40,37,43,39,41],
[39,41,39,46,40,0,41,43,40,46],
[34,38,33,37,43,39,0,42,40,35],
[35,37,36,41,37,37,38,0,35,36],
[38,39,41,44,41,40,40,45,0,38],
[38,41,39,41,39,34,45,44,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,36,27,35,36,32,33,40,41],
[40,0,34,32,36,30,36,36,34,38],
[44,46,0,40,46,38,38,46,39,44],
[53,48,40,0,45,48,36,43,35,51],
[45,44,34,35,0,38,37,40,38,38],
[44,50,42,32,42,0,44,40,41,41],
[48,44,42,44,43,36,0,29,40,38],
[47,44,34,37,40,40,51,0,34,47],
[40,46,41,45,42,39,40,46,0,45],
[39,42,36,29,42,39,42,33,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,45,48,52,44,46,30,38,26],
[34,0,51,46,46,44,49,50,31,45],
[35,29,0,41,41,39,50,37,17,24],
[32,34,39,0,28,43,45,38,26,19],
[28,34,39,52,0,44,49,34,27,25],
[36,36,41,37,36,0,47,47,22,31],
[34,31,30,35,31,33,0,35,31,25],
[50,30,43,42,46,33,45,0,32,29],
[42,49,63,54,53,58,49,48,0,34],
[54,35,56,61,55,49,55,51,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,39,39,46,43,40,42,44,40],
[49,0,42,44,50,39,43,43,51,44],
[41,38,0,35,41,47,41,44,48,44],
[41,36,45,0,49,43,38,43,41,46],
[34,30,39,31,0,41,38,35,42,39],
[37,41,33,37,39,0,46,44,43,39],
[40,37,39,42,42,34,0,42,41,41],
[38,37,36,37,45,36,38,0,38,35],
[36,29,32,39,38,37,39,42,0,37],
[40,36,36,34,41,41,39,45,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,58,46,49,37,47,41,44,53],
[34,0,42,41,33,33,41,37,39,39],
[22,38,0,30,36,25,28,37,24,34],
[34,39,50,0,40,39,46,35,37,39],
[31,47,44,40,0,37,37,38,35,37],
[43,47,55,41,43,0,38,43,40,44],
[33,39,52,34,43,42,0,39,41,39],
[39,43,43,45,42,37,41,0,40,45],
[36,41,56,43,45,40,39,40,0,33],
[27,41,46,41,43,36,41,35,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,40,39,37,37,40,38,42,41],
[40,0,44,40,39,43,44,39,40,44],
[40,36,0,35,37,39,38,39,42,37],
[41,40,45,0,40,39,39,40,44,42],
[43,41,43,40,0,36,46,41,39,46],
[43,37,41,41,44,0,44,39,41,39],
[40,36,42,41,34,36,0,39,38,36],
[42,41,41,40,39,41,41,0,43,44],
[38,40,38,36,41,39,42,37,0,43],
[39,36,43,38,34,41,44,36,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,44,41,40,44,45,49,43,48],
[32,0,40,37,35,37,34,36,34,32],
[36,40,0,37,41,32,41,42,37,45],
[39,43,43,0,35,36,43,42,41,47],
[40,45,39,45,0,39,42,47,39,46],
[36,43,48,44,41,0,41,46,45,48],
[35,46,39,37,38,39,0,33,34,46],
[31,44,38,38,33,34,47,0,43,39],
[37,46,43,39,41,35,46,37,0,46],
[32,48,35,33,34,32,34,41,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,26,32,27,32,41,49,52,41],
[34,0,28,31,32,31,41,40,48,32],
[54,52,0,39,41,42,58,63,58,49],
[48,49,41,0,40,40,55,59,47,41],
[53,48,39,40,0,38,51,57,48,47],
[48,49,38,40,42,0,54,61,56,51],
[39,39,22,25,29,26,0,50,44,24],
[31,40,17,21,23,19,30,0,37,27],
[28,32,22,33,32,24,36,43,0,36],
[39,48,31,39,33,29,56,53,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,52,0,27,55,55,55,80,27],
[55,0,52,27,27,55,55,55,80,27],
[28,28,0,28,0,28,28,28,55,0],
[80,53,52,0,27,55,55,55,80,27],
[53,53,80,53,0,28,28,28,80,55],
[25,25,52,25,52,0,28,25,52,52],
[25,25,52,25,52,52,0,25,52,52],
[25,25,52,25,52,55,55,0,80,52],
[0,0,25,0,0,28,28,0,0,0],
[53,53,80,53,25,28,28,28,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,31,50,31,39,32,38,55,32],
[51,0,42,44,42,42,52,72,59,34],
[49,38,0,50,37,33,49,55,49,40],
[30,36,30,0,44,29,23,44,52,21],
[49,38,43,36,0,33,42,64,65,26],
[41,38,47,51,47,0,59,55,73,33],
[48,28,31,57,38,21,0,62,64,40],
[42,8,25,36,16,25,18,0,50,17],
[25,21,31,28,15,7,16,30,0,18],
[48,46,40,59,54,47,40,63,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,34,46,36,38,41,42,44,45],
[39,0,40,52,49,31,52,55,48,48],
[46,40,0,61,36,42,38,47,38,38],
[34,28,19,0,38,27,31,49,44,32],
[44,31,44,42,0,37,51,43,41,35],
[42,49,38,53,43,0,36,50,48,34],
[39,28,42,49,29,44,0,49,49,42],
[38,25,33,31,37,30,31,0,42,31],
[36,32,42,36,39,32,31,38,0,38],
[35,32,42,48,45,46,38,49,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,37,37,43,44,52,42,20,50],
[37,0,24,42,39,45,37,34,31,35],
[43,56,0,30,43,43,58,42,32,44],
[43,38,50,0,51,50,57,49,43,51],
[37,41,37,29,0,54,62,47,37,42],
[36,35,37,30,26,0,38,41,12,36],
[28,43,22,23,18,42,0,41,18,36],
[38,46,38,31,33,39,39,0,25,43],
[60,49,48,37,43,68,62,55,0,43],
[30,45,36,29,38,44,44,37,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,42,46,42,52,40,51,43,51],
[34,0,34,43,36,43,38,44,42,39],
[38,46,0,50,45,47,40,48,46,44],
[34,37,30,0,32,38,33,42,30,37],
[38,44,35,48,0,45,41,52,47,42],
[28,37,33,42,35,0,36,41,47,39],
[40,42,40,47,39,44,0,42,45,47],
[29,36,32,38,28,39,38,0,31,29],
[37,38,34,50,33,33,35,49,0,39],
[29,41,36,43,38,41,33,51,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,41,31,40,49,31,51,40,26],
[32,0,45,29,37,53,31,43,41,28],
[39,35,0,26,27,43,38,39,33,27],
[49,51,54,0,38,59,43,44,41,40],
[40,43,53,42,0,54,42,55,43,33],
[31,27,37,21,26,0,18,45,36,20],
[49,49,42,37,38,62,0,44,36,42],
[29,37,41,36,25,35,36,0,40,27],
[40,39,47,39,37,44,44,40,0,41],
[54,52,53,40,47,60,38,53,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,46,45,45,45,68,34,45,45],
[34,0,35,23,46,46,58,36,11,46],
[34,45,0,32,45,45,68,34,45,46],
[35,57,48,0,59,47,70,36,47,47],
[35,34,35,21,0,46,70,36,35,35],
[35,34,35,33,34,0,47,46,33,23],
[12,22,12,10,10,33,0,22,21,12],
[46,44,46,44,44,34,58,0,33,34],
[35,69,35,33,45,47,59,47,0,47],
[35,34,34,33,45,57,68,46,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,43,38,41,34,41,37,43,40],
[48,0,44,41,46,41,38,35,48,37],
[37,36,0,38,39,36,25,36,42,38],
[42,39,42,0,40,37,29,41,38,34],
[39,34,41,40,0,37,34,33,43,39],
[46,39,44,43,43,0,32,39,51,48],
[39,42,55,51,46,48,0,40,47,50],
[43,45,44,39,47,41,40,0,44,44],
[37,32,38,42,37,29,33,36,0,41],
[40,43,42,46,41,32,30,36,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,42,48,46,49,46,45,38,51],
[35,0,43,45,44,42,40,37,36,42],
[38,37,0,39,39,43,43,37,33,43],
[32,35,41,0,44,44,40,35,31,38],
[34,36,41,36,0,39,36,32,33,36],
[31,38,37,36,41,0,38,27,31,38],
[34,40,37,40,44,42,0,35,29,39],
[35,43,43,45,48,53,45,0,42,40],
[42,44,47,49,47,49,51,38,0,45],
[29,38,37,42,44,42,41,40,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,26,30,35,48,26,30,40,48],
[32,0,31,31,25,39,31,25,26,37],
[54,49,0,36,32,53,43,41,38,52],
[50,49,44,0,36,51,49,34,30,49],
[45,55,48,44,0,51,45,36,38,54],
[32,41,27,29,29,0,28,29,30,46],
[54,49,37,31,35,52,0,37,35,46],
[50,55,39,46,44,51,43,0,46,54],
[40,54,42,50,42,50,45,34,0,50],
[32,43,28,31,26,34,34,26,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,45,42,34,36,38,45,43,39],
[35,0,39,36,36,34,39,38,40,37],
[35,41,0,40,39,42,44,42,43,38],
[38,44,40,0,37,33,40,46,48,45],
[46,44,41,43,0,37,43,49,46,41],
[44,46,38,47,43,0,42,49,45,41],
[42,41,36,40,37,38,0,47,49,39],
[35,42,38,34,31,31,33,0,40,34],
[37,40,37,32,34,35,31,40,0,30],
[41,43,42,35,39,39,41,46,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,41,44,44,40,43,41,40,43],
[36,0,53,51,44,50,46,39,53,38],
[39,27,0,36,23,38,35,37,39,35],
[36,29,44,0,34,36,46,41,34,28],
[36,36,57,46,0,39,49,45,48,41],
[40,30,42,44,41,0,42,42,50,33],
[37,34,45,34,31,38,0,34,40,39],
[39,41,43,39,35,38,46,0,43,36],
[40,27,41,46,32,30,40,37,0,33],
[37,42,45,52,39,47,41,44,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,47,46,40,54,48,55,42,47],
[51,0,44,57,47,48,42,53,39,44],
[33,36,0,36,38,45,35,45,38,36],
[34,23,44,0,32,45,39,52,37,35],
[40,33,42,48,0,57,41,58,45,36],
[26,32,35,35,23,0,27,45,41,31],
[32,38,45,41,39,53,0,56,40,45],
[25,27,35,28,22,35,24,0,30,33],
[38,41,42,43,35,39,40,50,0,40],
[33,36,44,45,44,49,35,47,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,38,45,39,42,49,47,44],
[36,0,37,38,32,40,37,42,46,33],
[38,43,0,43,37,31,38,44,46,34],
[42,42,37,0,44,36,43,39,50,39],
[35,48,43,36,0,33,48,44,47,40],
[41,40,49,44,47,0,47,48,47,44],
[38,43,42,37,32,33,0,40,49,40],
[31,38,36,41,36,32,40,0,40,34],
[33,34,34,30,33,33,31,40,0,31],
[36,47,46,41,40,36,40,46,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,29,37,37,40,50,49,50,45],
[43,0,27,41,42,38,44,49,56,44],
[51,53,0,50,48,40,56,51,51,42],
[43,39,30,0,37,39,53,51,53,46],
[43,38,32,43,0,43,46,54,42,53],
[40,42,40,41,37,0,50,48,52,39],
[30,36,24,27,34,30,0,38,43,31],
[31,31,29,29,26,32,42,0,40,40],
[30,24,29,27,38,28,37,40,0,29],
[35,36,38,34,27,41,49,40,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,32,31,20,30,41,35,24,22],
[38,0,39,34,30,37,43,32,24,25],
[48,41,0,44,30,43,50,48,32,31],
[49,46,36,0,31,43,37,38,34,29],
[60,50,50,49,0,43,54,45,40,38],
[50,43,37,37,37,0,38,40,35,29],
[39,37,30,43,26,42,0,37,31,33],
[45,48,32,42,35,40,43,0,31,30],
[56,56,48,46,40,45,49,49,0,45],
[58,55,49,51,42,51,47,50,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,42,45,45,43,42,35,30,41],
[33,0,41,46,45,48,43,46,33,36],
[38,39,0,47,45,43,43,42,33,41],
[35,34,33,0,44,34,43,35,25,31],
[35,35,35,36,0,38,40,38,34,29],
[37,32,37,46,42,0,44,34,43,35],
[38,37,37,37,40,36,0,38,27,40],
[45,34,38,45,42,46,42,0,37,42],
[50,47,47,55,46,37,53,43,0,44],
[39,44,39,49,51,45,40,38,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,42,38,38,38,44,38,44,45],
[39,0,39,35,46,41,44,37,51,32],
[38,41,0,43,47,43,53,37,48,48],
[42,45,37,0,52,50,48,41,47,53],
[42,34,33,28,0,38,39,35,47,42],
[42,39,37,30,42,0,36,37,39,41],
[36,36,27,32,41,44,0,42,38,36],
[42,43,43,39,45,43,38,0,38,49],
[36,29,32,33,33,41,42,42,0,37],
[35,48,32,27,38,39,44,31,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,39,37,32,44,30,40,37,38],
[44,0,43,35,29,45,39,42,39,40],
[41,37,0,34,26,40,35,54,30,33],
[43,45,46,0,44,40,43,48,41,40],
[48,51,54,36,0,45,53,53,40,46],
[36,35,40,40,35,0,39,45,30,40],
[50,41,45,37,27,41,0,38,34,31],
[40,38,26,32,27,35,42,0,27,31],
[43,41,50,39,40,50,46,53,0,46],
[42,40,47,40,34,40,49,49,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,28,42,42,37,52,33,28,41],
[58,0,30,42,52,35,47,46,42,56],
[52,50,0,41,58,34,53,52,47,52],
[38,38,39,0,45,43,41,50,38,57],
[38,28,22,35,0,34,46,39,34,38],
[43,45,46,37,46,0,53,50,40,51],
[28,33,27,39,34,27,0,39,33,35],
[47,34,28,30,41,30,41,0,42,45],
[52,38,33,42,46,40,47,38,0,45],
[39,24,28,23,42,29,45,35,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,80,80,80,80,40,40,80,40],
[40,0,80,80,80,80,40,40,80,40],
[0,0,0,0,0,0,40,0,0,0],
[0,0,80,0,40,40,40,40,40,0],
[0,0,80,40,0,0,40,0,40,0],
[0,0,80,40,80,0,40,0,80,0],
[40,40,40,40,40,40,0,40,40,40],
[40,40,80,40,80,80,40,0,80,40],
[0,0,80,40,40,0,40,0,0,0],
[40,40,80,80,80,80,40,40,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,44,32,37,44,37,41,37,40],
[39,0,31,33,33,50,29,38,30,34],
[36,49,0,36,39,45,40,42,43,40],
[48,47,44,0,48,49,39,46,43,48],
[43,47,41,32,0,47,34,37,38,42],
[36,30,35,31,33,0,31,33,28,34],
[43,51,40,41,46,49,0,45,41,44],
[39,42,38,34,43,47,35,0,36,45],
[43,50,37,37,42,52,39,44,0,45],
[40,46,40,32,38,46,36,35,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,40,34,40,34,42,42,25,39],
[36,0,36,36,54,36,49,40,34,43],
[40,44,0,41,45,37,41,43,43,49],
[46,44,39,0,60,35,51,45,43,50],
[40,26,35,20,0,32,40,37,28,33],
[46,44,43,45,48,0,42,48,38,37],
[38,31,39,29,40,38,0,41,31,40],
[38,40,37,35,43,32,39,0,37,45],
[55,46,37,37,52,42,49,43,0,41],
[41,37,31,30,47,43,40,35,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,49,34,40,35,38,38,37,40],
[50,0,59,46,55,47,58,45,56,36],
[31,21,0,24,36,33,43,28,29,26],
[46,34,56,0,37,46,35,24,42,34],
[40,25,44,43,0,39,46,35,25,38],
[45,33,47,34,41,0,49,40,40,43],
[42,22,37,45,34,31,0,30,40,40],
[42,35,52,56,45,40,50,0,44,44],
[43,24,51,38,55,40,40,36,0,38],
[40,44,54,46,42,37,40,36,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,47,63,48,39,40,31,31,48],
[41,0,39,40,41,40,48,24,39,40],
[33,41,0,48,49,40,49,24,39,33],
[17,40,32,0,40,31,40,23,15,32],
[32,39,31,40,0,24,40,16,31,32],
[41,40,40,49,56,0,40,23,23,40],
[40,32,31,40,40,40,0,40,47,32],
[49,56,56,57,64,57,40,0,23,64],
[49,41,41,65,49,57,33,57,0,57],
[32,40,47,48,48,40,48,16,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,49,44,50,40,42,44,45,44],
[36,0,39,15,42,34,38,33,36,33],
[31,41,0,32,39,28,35,39,35,33],
[36,65,48,0,55,50,62,50,55,48],
[30,38,41,25,0,35,31,38,45,36],
[40,46,52,30,45,0,35,36,40,30],
[38,42,45,18,49,45,0,43,43,34],
[36,47,41,30,42,44,37,0,43,29],
[35,44,45,25,35,40,37,37,0,39],
[36,47,47,32,44,50,46,51,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,31,38,36,23,32,30,33,35],
[51,0,39,50,50,47,50,48,48,42],
[49,41,0,44,50,39,47,42,42,39],
[42,30,36,0,24,28,41,30,40,35],
[44,30,30,56,0,34,50,43,34,30],
[57,33,41,52,46,0,47,42,43,37],
[48,30,33,39,30,33,0,26,30,44],
[50,32,38,50,37,38,54,0,39,39],
[47,32,38,40,46,37,50,41,0,39],
[45,38,41,45,50,43,36,41,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,45,41,18,38,33,18,33,39],
[48,0,39,25,32,35,43,33,25,38],
[35,41,0,37,28,37,37,31,34,52],
[39,55,43,0,39,50,41,33,28,51],
[62,48,52,41,0,49,48,40,54,64],
[42,45,43,30,31,0,37,27,30,41],
[47,37,43,39,32,43,0,45,34,50],
[62,47,49,47,40,53,35,0,41,62],
[47,55,46,52,26,50,46,39,0,65],
[41,42,28,29,16,39,30,18,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,43,42,42,40,50,36,57,42],
[32,0,38,41,32,32,35,24,46,30],
[37,42,0,38,35,30,39,32,40,31],
[38,39,42,0,32,31,36,24,46,22],
[38,48,45,48,0,39,45,41,47,40],
[40,48,50,49,41,0,41,35,45,36],
[30,45,41,44,35,39,0,30,44,34],
[44,56,48,56,39,45,50,0,60,53],
[23,34,40,34,33,35,36,20,0,40],
[38,50,49,58,40,44,46,27,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,33,23,23,43,44,36,32,33],
[58,0,43,58,35,45,46,36,34,35],
[47,37,0,48,60,70,35,47,48,26],
[57,22,32,0,23,43,33,48,21,34],
[57,45,20,57,0,20,45,46,45,46],
[37,35,10,37,60,0,35,36,37,26],
[36,34,45,47,35,45,0,36,34,45],
[44,44,33,32,34,44,44,0,32,45],
[48,46,32,59,35,43,46,48,0,58],
[47,45,54,46,34,54,35,35,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,42,36,41,38,42,37,41,36],
[44,0,46,35,35,41,41,33,37,35],
[38,34,0,34,32,29,39,29,33,34],
[44,45,46,0,40,40,46,40,42,37],
[39,45,48,40,0,39,41,43,38,45],
[42,39,51,40,41,0,43,38,42,38],
[38,39,41,34,39,37,0,32,40,35],
[43,47,51,40,37,42,48,0,43,42],
[39,43,47,38,42,38,40,37,0,36],
[44,45,46,43,35,42,45,38,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,36,52,46,41,45,46,51,53],
[44,0,47,44,43,53,44,38,47,47],
[44,33,0,51,51,43,43,51,41,53],
[28,36,29,0,38,38,40,39,43,48],
[34,37,29,42,0,40,46,43,41,44],
[39,27,37,42,40,0,38,36,34,45],
[35,36,37,40,34,42,0,43,49,52],
[34,42,29,41,37,44,37,0,46,46],
[29,33,39,37,39,46,31,34,0,34],
[27,33,27,32,36,35,28,34,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,49,42,37,49,50,43,43,49],
[38,0,40,41,39,40,50,36,36,43],
[31,40,0,36,36,46,42,38,34,41],
[38,39,44,0,45,42,49,35,39,39],
[43,41,44,35,0,43,53,38,43,44],
[31,40,34,38,37,0,41,38,32,39],
[30,30,38,31,27,39,0,36,32,38],
[37,44,42,45,42,42,44,0,37,41],
[37,44,46,41,37,48,48,43,0,37],
[31,37,39,41,36,41,42,39,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,41,39,41,44,38,36,37,41],
[48,0,42,39,37,39,41,36,38,45],
[39,38,0,40,41,46,37,41,38,44],
[41,41,40,0,41,45,40,38,43,41],
[39,43,39,39,0,42,38,40,43,41],
[36,41,34,35,38,0,32,32,37,37],
[42,39,43,40,42,48,0,35,40,42],
[44,44,39,42,40,48,45,0,42,45],
[43,42,42,37,37,43,40,38,0,47],
[39,35,36,39,39,43,38,35,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,32,27,37,43,37,43,22,28],
[38,0,33,35,42,41,39,41,29,36],
[48,47,0,45,47,47,43,52,32,41],
[53,45,35,0,42,56,48,50,43,45],
[43,38,33,38,0,51,41,43,36,38],
[37,39,33,24,29,0,35,49,32,35],
[43,41,37,32,39,45,0,44,43,36],
[37,39,28,30,37,31,36,0,33,34],
[58,51,48,37,44,48,37,47,0,37],
[52,44,39,35,42,45,44,46,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,40,53,51,48,43,41,52],
[37,0,36,45,44,40,48,41,43,37],
[40,44,0,42,48,46,44,35,41,43],
[40,35,38,0,46,42,47,42,38,44],
[27,36,32,34,0,42,36,26,34,37],
[29,40,34,38,38,0,41,29,32,37],
[32,32,36,33,44,39,0,41,38,32],
[37,39,45,38,54,51,39,0,37,42],
[39,37,39,42,46,48,42,43,0,38],
[28,43,37,36,43,43,48,38,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,40,52,48,52,47,39,39,46],
[29,0,23,32,38,33,29,37,34,34],
[40,57,0,49,49,52,44,45,40,40],
[28,48,31,0,41,43,39,39,31,36],
[32,42,31,39,0,44,28,30,42,32],
[28,47,28,37,36,0,31,32,34,27],
[33,51,36,41,52,49,0,40,38,47],
[41,43,35,41,50,48,40,0,37,39],
[41,46,40,49,38,46,42,43,0,44],
[34,46,40,44,48,53,33,41,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,67,39,48,49,40,67,49,55],
[34,0,51,36,37,35,41,54,43,60],
[13,29,0,39,30,35,27,45,29,44],
[41,44,41,0,42,50,40,46,44,55],
[32,43,50,38,0,52,40,49,40,50],
[31,45,45,30,28,0,36,52,29,47],
[40,39,53,40,40,44,0,58,42,50],
[13,26,35,34,31,28,22,0,24,42],
[31,37,51,36,40,51,38,56,0,52],
[25,20,36,25,30,33,30,38,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,42,44,46,40,49,48,40,44],
[31,0,39,38,37,33,35,35,37,42],
[38,41,0,45,34,36,51,41,31,39],
[36,42,35,0,39,35,42,39,35,42],
[34,43,46,41,0,34,44,43,33,48],
[40,47,44,45,46,0,48,50,36,42],
[31,45,29,38,36,32,0,29,37,38],
[32,45,39,41,37,30,51,0,35,41],
[40,43,49,45,47,44,43,45,0,42],
[36,38,41,38,32,38,42,39,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,46,42,40,42,39,38,43,47],
[37,0,34,41,31,38,36,34,35,37],
[34,46,0,42,44,39,38,40,46,47],
[38,39,38,0,39,42,40,36,40,44],
[40,49,36,41,0,41,41,38,44,47],
[38,42,41,38,39,0,37,38,41,45],
[41,44,42,40,39,43,0,39,40,47],
[42,46,40,44,42,42,41,0,42,42],
[37,45,34,40,36,39,40,38,0,43],
[33,43,33,36,33,35,33,38,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,31,63,47,80,63,80,46,65],
[32,0,32,49,32,49,32,49,15,65],
[49,48,0,48,32,65,48,65,15,65],
[17,31,32,0,32,50,16,64,0,33],
[33,48,48,48,0,65,48,65,48,65],
[0,31,15,30,15,0,0,47,15,31],
[17,48,32,64,32,80,0,64,30,65],
[0,31,15,16,15,33,16,0,0,16],
[34,65,65,80,32,65,50,80,0,65],
[15,15,15,47,15,49,15,64,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,35,34,30,40,42,32,39,31],
[56,0,49,40,44,46,45,31,43,45],
[45,31,0,40,34,40,41,32,41,42],
[46,40,40,0,32,43,47,33,32,36],
[50,36,46,48,0,42,44,45,34,42],
[40,34,40,37,38,0,50,34,31,40],
[38,35,39,33,36,30,0,29,41,31],
[48,49,48,47,35,46,51,0,45,52],
[41,37,39,48,46,49,39,35,0,35],
[49,35,38,44,38,40,49,28,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,34,49,42,42,34,35,35,34],
[38,0,57,58,42,51,58,37,44,44],
[46,23,0,51,37,36,42,30,46,31],
[31,22,29,0,37,29,27,36,30,24],
[38,38,43,43,0,51,42,29,51,36],
[38,29,44,51,29,0,57,37,37,30],
[46,22,38,53,38,23,0,37,38,31],
[45,43,50,44,51,43,43,0,52,30],
[45,36,34,50,29,43,42,28,0,42],
[46,36,49,56,44,50,49,50,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,38,37,45,42,35,33,33,37],
[41,0,38,43,49,43,32,40,40,36],
[42,42,0,29,41,34,32,41,36,39],
[43,37,51,0,50,41,36,43,41,41],
[35,31,39,30,0,33,29,31,34,30],
[38,37,46,39,47,0,33,43,34,31],
[45,48,48,44,51,47,0,41,45,40],
[47,40,39,37,49,37,39,0,38,38],
[47,40,44,39,46,46,35,42,0,47],
[43,44,41,39,50,49,40,42,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,38,46,52,42,50,54,61,32],
[25,0,27,51,38,51,44,39,43,26],
[42,53,0,61,47,43,52,57,48,32],
[34,29,19,0,21,42,35,35,47,30],
[28,42,33,59,0,48,44,41,52,41],
[38,29,37,38,32,0,26,36,43,26],
[30,36,28,45,36,54,0,41,39,30],
[26,41,23,45,39,44,39,0,44,32],
[19,37,32,33,28,37,41,36,0,19],
[48,54,48,50,39,54,50,48,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,42,37,41,41,34,48,42,40],
[35,0,33,32,31,37,28,43,39,32],
[38,47,0,41,45,37,36,48,47,40],
[43,48,39,0,52,46,36,42,40,37],
[39,49,35,28,0,38,35,43,38,39],
[39,43,43,34,42,0,23,38,45,36],
[46,52,44,44,45,57,0,49,42,39],
[32,37,32,38,37,42,31,0,37,34],
[38,41,33,40,42,35,38,43,0,44],
[40,48,40,43,41,44,41,46,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,41,48,39,47,36,37,43,43],
[40,0,44,37,34,44,36,33,38,33],
[39,36,0,40,34,45,37,36,42,39],
[32,43,40,0,46,47,38,37,39,32],
[41,46,46,34,0,42,38,40,38,40],
[33,36,35,33,38,0,31,34,37,30],
[44,44,43,42,42,49,0,39,43,41],
[43,47,44,43,40,46,41,0,45,36],
[37,42,38,41,42,43,37,35,0,30],
[37,47,41,48,40,50,39,44,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,37,29,36,41,44,46,19,38],
[49,0,47,41,46,53,43,45,44,36],
[43,33,0,37,56,51,41,38,36,42],
[51,39,43,0,50,48,59,43,36,44],
[44,34,24,30,0,43,40,39,32,39],
[39,27,29,32,37,0,41,39,28,37],
[36,37,39,21,40,39,0,38,33,35],
[34,35,42,37,41,41,42,0,29,34],
[61,36,44,44,48,52,47,51,0,48],
[42,44,38,36,41,43,45,46,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,38,44,38,42,42,34,40,41],
[41,0,40,40,46,44,46,41,40,38],
[42,40,0,46,42,48,38,37,44,36],
[36,40,34,0,44,43,39,41,38,36],
[42,34,38,36,0,48,39,31,43,39],
[38,36,32,37,32,0,34,25,35,30],
[38,34,42,41,41,46,0,39,37,32],
[46,39,43,39,49,55,41,0,44,40],
[40,40,36,42,37,45,43,36,0,33],
[39,42,44,44,41,50,48,40,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,37,49,53,40,41,39,48,50],
[23,0,31,37,41,33,38,32,38,45],
[43,49,0,40,57,38,42,47,48,53],
[31,43,40,0,43,38,37,49,46,51],
[27,39,23,37,0,36,33,45,40,43],
[40,47,42,42,44,0,37,43,42,51],
[39,42,38,43,47,43,0,40,49,54],
[41,48,33,31,35,37,40,0,50,45],
[32,42,32,34,40,38,31,30,0,48],
[30,35,27,29,37,29,26,35,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,37,40,43,34,39,42,36,41],
[45,0,41,53,40,46,46,52,45,42],
[43,39,0,46,43,41,34,46,34,40],
[40,27,34,0,32,34,35,36,35,38],
[37,40,37,48,0,34,38,33,36,37],
[46,34,39,46,46,0,41,43,41,42],
[41,34,46,45,42,39,0,46,42,38],
[38,28,34,44,47,37,34,0,36,42],
[44,35,46,45,44,39,38,44,0,41],
[39,38,40,42,43,38,42,38,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,43,25,16,29,18,37,36,33],
[34,0,22,20,15,24,19,26,15,33],
[37,58,0,24,32,26,13,44,27,31],
[55,60,56,0,36,55,31,45,38,40],
[64,65,48,44,0,48,26,57,41,53],
[51,56,54,25,32,0,25,53,33,36],
[62,61,67,49,54,55,0,65,38,47],
[43,54,36,35,23,27,15,0,34,36],
[44,65,53,42,39,47,42,46,0,42],
[47,47,49,40,27,44,33,44,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,33,29,37,30,35,41,48,46],
[47,0,25,28,42,29,42,52,52,32],
[47,55,0,41,44,55,46,68,55,35],
[51,52,39,0,50,44,55,58,70,55],
[43,38,36,30,0,37,47,54,51,41],
[50,51,25,36,43,0,45,50,62,37],
[45,38,34,25,33,35,0,48,55,31],
[39,28,12,22,26,30,32,0,37,31],
[32,28,25,10,29,18,25,43,0,38],
[34,48,45,25,39,43,49,49,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,38,29,36,39,44,39,45,36],
[38,0,38,20,37,36,43,43,45,30],
[42,42,0,30,38,45,46,43,49,33],
[51,60,50,0,44,46,49,55,60,40],
[44,43,42,36,0,37,43,44,50,39],
[41,44,35,34,43,0,32,41,45,32],
[36,37,34,31,37,48,0,47,44,35],
[41,37,37,25,36,39,33,0,47,36],
[35,35,31,20,30,35,36,33,0,29],
[44,50,47,40,41,48,45,44,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,38,39,44,40,40,41,46,43],
[39,0,37,42,39,34,42,40,40,39],
[42,43,0,35,43,41,45,41,47,43],
[41,38,45,0,36,38,47,37,46,44],
[36,41,37,44,0,38,38,34,47,38],
[40,46,39,42,42,0,47,39,37,44],
[40,38,35,33,42,33,0,32,36,35],
[39,40,39,43,46,41,48,0,50,43],
[34,40,33,34,33,43,44,30,0,33],
[37,41,37,36,42,36,45,37,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,54,41,39,41,54,28,26,54],
[26,0,41,15,13,15,28,28,13,41],
[26,39,0,28,0,13,28,15,13,13],
[39,65,52,0,39,39,67,26,52,52],
[41,67,80,41,0,67,41,28,26,54],
[39,65,67,41,13,0,41,28,26,67],
[26,52,52,13,39,39,0,13,39,39],
[52,52,65,54,52,52,67,0,52,39],
[54,67,67,28,54,54,41,28,0,67],
[26,39,67,28,26,13,41,41,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,37,40,39,46,46,36,38,41],
[45,0,37,38,42,43,38,38,43,41],
[43,43,0,37,42,44,45,38,42,38],
[40,42,43,0,43,52,50,30,41,45],
[41,38,38,37,0,45,36,39,41,42],
[34,37,36,28,35,0,39,39,40,36],
[34,42,35,30,44,41,0,36,38,44],
[44,42,42,50,41,41,44,0,40,44],
[42,37,38,39,39,40,42,40,0,40],
[39,39,42,35,38,44,36,36,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,42,33,49,41,23,36,29,27],
[40,0,48,41,55,37,31,38,36,35],
[38,32,0,32,43,39,26,41,43,38],
[47,39,48,0,53,43,23,52,36,38],
[31,25,37,27,0,41,27,38,25,26],
[39,43,41,37,39,0,23,25,31,32],
[57,49,54,57,53,57,0,56,35,34],
[44,42,39,28,42,55,24,0,27,29],
[51,44,37,44,55,49,45,53,0,58],
[53,45,42,42,54,48,46,51,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,32,39,36,37,41,41,30,39],
[37,0,38,40,42,39,46,53,34,37],
[48,42,0,40,46,33,51,52,33,45],
[41,40,40,0,39,44,52,49,26,35],
[44,38,34,41,0,37,44,35,30,30],
[43,41,47,36,43,0,52,43,34,43],
[39,34,29,28,36,28,0,34,26,37],
[39,27,28,31,45,37,46,0,32,37],
[50,46,47,54,50,46,54,48,0,35],
[41,43,35,45,50,37,43,43,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,37,40,40,46,40,46,50,42],
[41,0,44,40,49,45,43,46,42,43],
[43,36,0,44,48,41,44,45,45,42],
[40,40,36,0,44,44,44,44,44,44],
[40,31,32,36,0,40,35,39,38,34],
[34,35,39,36,40,0,38,37,46,44],
[40,37,36,36,45,42,0,44,39,37],
[34,34,35,36,41,43,36,0,42,38],
[30,38,35,36,42,34,41,38,0,39],
[38,37,38,36,46,36,43,42,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,45,42,39,43,42,39,39,45],
[43,0,45,45,44,48,40,42,39,48],
[35,35,0,38,39,44,40,42,42,46],
[38,35,42,0,41,45,40,40,41,40],
[41,36,41,39,0,44,36,41,39,36],
[37,32,36,35,36,0,35,36,43,39],
[38,40,40,40,44,45,0,42,42,45],
[41,38,38,40,39,44,38,0,42,42],
[41,41,38,39,41,37,38,38,0,45],
[35,32,34,40,44,41,35,38,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,45,46,42,38,41,38,40,40],
[37,0,43,34,43,36,44,34,37,39],
[35,37,0,42,38,42,35,41,46,54],
[34,46,38,0,42,43,40,45,41,42],
[38,37,42,38,0,40,40,36,38,40],
[42,44,38,37,40,0,43,37,40,42],
[39,36,45,40,40,37,0,47,39,41],
[42,46,39,35,44,43,33,0,43,38],
[40,43,34,39,42,40,41,37,0,41],
[40,41,26,38,40,38,39,42,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,49,51,43,35,51,37,42],
[39,0,44,46,50,37,49,47,39,44],
[39,36,0,34,46,40,37,45,42,46],
[31,34,46,0,46,38,40,40,40,44],
[29,30,34,34,0,38,27,36,29,41],
[37,43,40,42,42,0,35,38,38,48],
[45,31,43,40,53,45,0,42,42,45],
[29,33,35,40,44,42,38,0,38,36],
[43,41,38,40,51,42,38,42,0,52],
[38,36,34,36,39,32,35,44,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,41,54,50,43,40,45,45,53],
[32,0,35,47,46,41,32,43,38,47],
[39,45,0,49,42,40,43,39,38,43],
[26,33,31,0,39,28,29,35,29,38],
[30,34,38,41,0,38,37,33,35,34],
[37,39,40,52,42,0,35,44,39,39],
[40,48,37,51,43,45,0,39,40,47],
[35,37,41,45,47,36,41,0,44,50],
[35,42,42,51,45,41,40,36,0,52],
[27,33,37,42,46,41,33,30,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,43,39,42,40,45,45,43,35],
[37,0,45,37,43,46,46,47,41,40],
[37,35,0,39,42,39,37,39,41,35],
[41,43,41,0,41,42,43,43,37,32],
[38,37,38,39,0,39,39,43,35,40],
[40,34,41,38,41,0,38,41,43,40],
[35,34,43,37,41,42,0,42,41,38],
[35,33,41,37,37,39,38,0,43,44],
[37,39,39,43,45,37,39,37,0,38],
[45,40,45,48,40,40,42,36,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,18,44,36,45,19,37,29,17],
[45,0,28,35,55,47,38,55,47,45],
[62,52,0,35,44,53,44,54,54,61],
[36,45,45,0,36,45,28,36,36,34],
[44,25,36,44,0,62,46,46,46,44],
[35,33,27,35,18,0,29,37,28,35],
[61,42,36,52,34,51,0,72,55,61],
[43,25,26,44,34,43,8,0,36,43],
[51,33,26,44,34,52,25,44,0,60],
[63,35,19,46,36,45,19,37,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,33,24,45,46,22,45,46,45],
[35,0,56,23,33,35,34,34,34,34],
[47,24,0,36,12,47,24,12,58,34],
[56,57,44,0,33,33,22,33,34,45],
[35,47,68,47,0,59,46,35,58,45],
[34,45,33,47,21,0,33,33,57,33],
[58,46,56,58,34,47,0,35,46,57],
[35,46,68,47,45,47,45,0,57,57],
[34,46,22,46,22,23,34,23,0,11],
[35,46,46,35,35,47,23,23,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,39,39,40,40,40,30,43,38],
[38,0,33,38,40,30,38,41,47,38],
[41,47,0,53,42,41,37,43,38,50],
[41,42,27,0,39,31,39,34,39,31],
[40,40,38,41,0,33,40,42,44,44],
[40,50,39,49,47,0,50,47,41,51],
[40,42,43,41,40,30,0,25,41,43],
[50,39,37,46,38,33,55,0,47,40],
[37,33,42,41,36,39,39,33,0,37],
[42,42,30,49,36,29,37,40,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,47,59,50,51,57,39,40,31],
[43,0,40,62,42,52,48,38,30,24],
[33,40,0,61,40,41,44,37,31,28],
[21,18,19,0,12,12,27,30,25,12],
[30,38,40,68,0,50,59,43,38,42],
[29,28,39,68,30,0,49,46,23,32],
[23,32,36,53,21,31,0,35,24,29],
[41,42,43,50,37,34,45,0,35,18],
[40,50,49,55,42,57,56,45,0,26],
[49,56,52,68,38,48,51,62,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,46,36,41,33,35,39,39,42],
[51,0,45,43,42,40,44,46,47,42],
[34,35,0,26,34,31,34,39,34,34],
[44,37,54,0,50,36,44,50,42,44],
[39,38,46,30,0,29,40,41,38,44],
[47,40,49,44,51,0,43,50,45,47],
[45,36,46,36,40,37,0,44,43,43],
[41,34,41,30,39,30,36,0,39,36],
[41,33,46,38,42,35,37,41,0,41],
[38,38,46,36,36,33,37,44,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,36,37,41,37,40,48,37,44],
[41,0,43,42,41,40,44,44,46,44],
[44,37,0,43,43,42,45,48,36,50],
[43,38,37,0,39,41,46,48,40,45],
[39,39,37,41,0,36,41,36,41,39],
[43,40,38,39,44,0,48,40,44,40],
[40,36,35,34,39,32,0,34,41,39],
[32,36,32,32,44,40,46,0,44,44],
[43,34,44,40,39,36,39,36,0,38],
[36,36,30,35,41,40,41,36,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,41,33,36,34,41,43,36,33],
[44,0,44,36,36,41,46,43,38,42],
[39,36,0,34,29,30,39,34,33,36],
[47,44,46,0,34,36,46,43,36,42],
[44,44,51,46,0,32,41,45,45,46],
[46,39,50,44,48,0,44,51,46,41],
[39,34,41,34,39,36,0,44,35,34],
[37,37,46,37,35,29,36,0,39,39],
[44,42,47,44,35,34,45,41,0,36],
[47,38,44,38,34,39,46,41,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,44,29,40,37,41,40,37,48],
[37,0,38,32,30,37,43,41,34,35],
[36,42,0,43,40,25,39,37,31,43],
[51,48,37,0,35,34,47,43,38,44],
[40,50,40,45,0,40,42,43,38,43],
[43,43,55,46,40,0,48,44,43,46],
[39,37,41,33,38,32,0,34,32,44],
[40,39,43,37,37,36,46,0,38,44],
[43,46,49,42,42,37,48,42,0,42],
[32,45,37,36,37,34,36,36,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,34,31,26,33,37,34,34,21],
[42,0,45,48,37,45,38,46,43,41],
[46,35,0,46,43,39,37,39,41,33],
[49,32,34,0,38,33,41,36,36,34],
[54,43,37,42,0,47,53,44,41,43],
[47,35,41,47,33,0,37,43,41,38],
[43,42,43,39,27,43,0,38,41,30],
[46,34,41,44,36,37,42,0,40,38],
[46,37,39,44,39,39,39,40,0,33],
[59,39,47,46,37,42,50,42,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,39,43,43,40,43,43,42,43],
[40,0,32,34,42,35,36,47,36,43],
[41,48,0,45,44,39,44,46,38,45],
[37,46,35,0,37,34,46,42,38,40],
[37,38,36,43,0,40,43,43,42,46],
[40,45,41,46,40,0,48,49,46,50],
[37,44,36,34,37,32,0,36,31,48],
[37,33,34,38,37,31,44,0,36,34],
[38,44,42,42,38,34,49,44,0,41],
[37,37,35,40,34,30,32,46,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,47,44,34,36,46,38,46,37],
[45,0,48,49,39,43,49,38,51,50],
[33,32,0,45,32,32,36,34,35,32],
[36,31,35,0,35,34,41,36,41,34],
[46,41,48,45,0,35,36,41,51,44],
[44,37,48,46,45,0,49,47,43,40],
[34,31,44,39,44,31,0,41,32,36],
[42,42,46,44,39,33,39,0,41,35],
[34,29,45,39,29,37,48,39,0,37],
[43,30,48,46,36,40,44,45,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,28,31,33,28,34,35,41,32],
[54,0,37,38,42,41,37,28,39,39],
[52,43,0,35,36,45,38,35,48,39],
[49,42,45,0,33,39,40,35,44,26],
[47,38,44,47,0,44,35,37,49,47],
[52,39,35,41,36,0,47,30,47,36],
[46,43,42,40,45,33,0,46,56,36],
[45,52,45,45,43,50,34,0,48,47],
[39,41,32,36,31,33,24,32,0,33],
[48,41,41,54,33,44,44,33,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,45,47,37,48,47,47,43,46],
[37,0,34,31,33,45,37,43,43,40],
[35,46,0,38,42,50,46,43,42,47],
[33,49,42,0,38,50,43,49,48,48],
[43,47,38,42,0,48,43,47,43,44],
[32,35,30,30,32,0,40,35,34,36],
[33,43,34,37,37,40,0,43,40,38],
[33,37,37,31,33,45,37,0,38,39],
[37,37,38,32,37,46,40,42,0,43],
[34,40,33,32,36,44,42,41,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,40,46,48,48,41,35,49,38],
[31,0,29,24,32,29,33,23,32,34],
[40,51,0,40,40,39,38,40,45,43],
[34,56,40,0,48,39,33,33,40,43],
[32,48,40,32,0,36,34,27,36,30],
[32,51,41,41,44,0,41,34,38,48],
[39,47,42,47,46,39,0,36,46,47],
[45,57,40,47,53,46,44,0,56,46],
[31,48,35,40,44,42,34,24,0,38],
[42,46,37,37,50,32,33,34,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,60,41,46,53,40,41,53,48],
[45,0,73,46,44,53,46,55,58,39],
[20,7,0,29,12,19,31,21,27,14],
[39,34,51,0,31,39,31,34,45,33],
[34,36,68,49,0,36,39,49,61,47],
[27,27,61,41,44,0,46,40,39,46],
[40,34,49,49,41,34,0,41,40,34],
[39,25,59,46,31,40,39,0,44,33],
[27,22,53,35,19,41,40,36,0,36],
[32,41,66,47,33,34,46,47,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,38,39,47,35,41,43,44,50],
[40,0,48,40,42,37,44,38,33,41],
[42,32,0,29,45,45,35,40,44,38],
[41,40,51,0,52,45,44,45,50,44],
[33,38,35,28,0,36,28,33,44,36],
[45,43,35,35,44,0,39,38,41,43],
[39,36,45,36,52,41,0,44,41,34],
[37,42,40,35,47,42,36,0,42,36],
[36,47,36,30,36,39,39,38,0,33],
[30,39,42,36,44,37,46,44,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,47,28,38,34,42,38,40,51],
[36,0,45,38,45,32,49,42,46,43],
[33,35,0,34,35,34,38,45,43,45],
[52,42,46,0,41,32,38,42,47,42],
[42,35,45,39,0,30,34,36,39,29],
[46,48,46,48,50,0,45,44,51,40],
[38,31,42,42,46,35,0,44,38,31],
[42,38,35,38,44,36,36,0,43,46],
[40,34,37,33,41,29,42,37,0,34],
[29,37,35,38,51,40,49,34,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,43,38,33,45,33,44,39,38],
[44,0,40,46,43,41,40,40,50,41],
[37,40,0,40,39,39,35,37,43,40],
[42,34,40,0,40,45,41,39,47,44],
[47,37,41,40,0,41,41,43,46,39],
[35,39,41,35,39,0,39,33,42,39],
[47,40,45,39,39,41,0,36,47,43],
[36,40,43,41,37,47,44,0,48,37],
[41,30,37,33,34,38,33,32,0,32],
[42,39,40,36,41,41,37,43,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,38,43,42,42,36,39,40,48],
[42,0,45,41,42,38,34,38,41,50],
[42,35,0,33,44,49,39,41,39,47],
[37,39,47,0,44,37,35,37,37,47],
[38,38,36,36,0,36,26,29,35,38],
[38,42,31,43,44,0,35,37,34,40],
[44,46,41,45,54,45,0,40,47,42],
[41,42,39,43,51,43,40,0,46,45],
[40,39,41,43,45,46,33,34,0,45],
[32,30,33,33,42,40,38,35,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,36,45,42,33,39,28,43,36],
[36,0,37,40,40,37,45,34,32,39],
[44,43,0,49,43,42,45,40,38,41],
[35,40,31,0,38,26,33,30,31,28],
[38,40,37,42,0,35,45,33,37,32],
[47,43,38,54,45,0,36,47,36,41],
[41,35,35,47,35,44,0,36,37,41],
[52,46,40,50,47,33,44,0,42,44],
[37,48,42,49,43,44,43,38,0,43],
[44,41,39,52,48,39,39,36,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,40,41,41,44,38,37,43,50],
[28,0,37,30,34,33,29,30,40,38],
[40,43,0,41,41,47,43,42,42,46],
[39,50,39,0,46,48,43,46,42,44],
[39,46,39,34,0,45,37,37,40,42],
[36,47,33,32,35,0,35,36,44,42],
[42,51,37,37,43,45,0,37,53,48],
[43,50,38,34,43,44,43,0,52,49],
[37,40,38,38,40,36,27,28,0,44],
[30,42,34,36,38,38,32,31,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,45,45,32,56,44,45,46,44],
[38,0,42,40,40,53,43,42,47,47],
[35,38,0,39,33,51,38,41,40,37],
[35,40,41,0,35,43,35,48,41,45],
[48,40,47,45,0,51,44,43,42,49],
[24,27,29,37,29,0,35,35,40,35],
[36,37,42,45,36,45,0,55,43,49],
[35,38,39,32,37,45,25,0,36,47],
[34,33,40,39,38,40,37,44,0,42],
[36,33,43,35,31,45,31,33,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,36,39,37,40,41,34,39,34],
[42,0,40,44,35,45,38,39,45,36],
[44,40,0,43,37,44,40,40,42,38],
[41,36,37,0,43,43,41,44,39,43],
[43,45,43,37,0,48,36,40,44,41],
[40,35,36,37,32,0,36,40,42,38],
[39,42,40,39,44,44,0,49,41,41],
[46,41,40,36,40,40,31,0,40,38],
[41,35,38,41,36,38,39,40,0,29],
[46,44,42,37,39,42,39,42,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,36,45,38,50,26,37,39,37],
[40,0,36,46,41,45,39,41,37,37],
[44,44,0,46,46,48,40,38,38,43],
[35,34,34,0,42,41,36,37,41,40],
[42,39,34,38,0,43,37,39,38,37],
[30,35,32,39,37,0,32,35,40,35],
[54,41,40,44,43,48,0,38,43,43],
[43,39,42,43,41,45,42,0,41,43],
[41,43,42,39,42,40,37,39,0,41],
[43,43,37,40,43,45,37,37,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,38,42,34,43,38,46,39,36],
[36,0,30,38,31,37,37,38,36,30],
[42,50,0,42,40,46,41,47,35,42],
[38,42,38,0,35,41,39,42,35,25],
[46,49,40,45,0,52,40,52,42,49],
[37,43,34,39,28,0,35,40,36,39],
[42,43,39,41,40,45,0,49,40,35],
[34,42,33,38,28,40,31,0,32,29],
[41,44,45,45,38,44,40,48,0,36],
[44,50,38,55,31,41,45,51,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,47,41,38,38,40,40,39,45],
[45,0,42,40,41,48,40,44,48,44],
[33,38,0,37,37,37,30,28,33,35],
[39,40,43,0,41,45,35,40,39,46],
[42,39,43,39,0,46,35,43,39,45],
[42,32,43,35,34,0,29,40,38,39],
[40,40,50,45,45,51,0,38,45,43],
[40,36,52,40,37,40,42,0,36,43],
[41,32,47,41,41,42,35,44,0,39],
[35,36,45,34,35,41,37,37,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,35,37,41,46,49,38,47,41],
[39,0,33,41,44,44,51,38,48,46],
[45,47,0,40,50,44,50,42,48,45],
[43,39,40,0,45,39,43,44,54,38],
[39,36,30,35,0,37,45,39,48,41],
[34,36,36,41,43,0,45,31,49,34],
[31,29,30,37,35,35,0,33,45,30],
[42,42,38,36,41,49,47,0,49,43],
[33,32,32,26,32,31,35,31,0,35],
[39,34,35,42,39,46,50,37,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,35,26,29,34,29,26,31,43],
[46,0,44,36,29,42,48,39,37,37],
[45,36,0,31,23,38,23,30,30,35],
[54,44,49,0,46,45,40,44,51,53],
[51,51,57,34,0,56,44,47,49,55],
[46,38,42,35,24,0,41,40,47,48],
[51,32,57,40,36,39,0,41,38,47],
[54,41,50,36,33,40,39,0,44,44],
[49,43,50,29,31,33,42,36,0,41],
[37,43,45,27,25,32,33,36,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,43,34,42,37,42,44,43,45],
[43,0,45,41,44,38,38,45,41,46],
[37,35,0,34,32,31,31,36,37,38],
[46,39,46,0,42,46,39,43,38,41],
[38,36,48,38,0,38,36,41,39,39],
[43,42,49,34,42,0,40,47,42,44],
[38,42,49,41,44,40,0,42,42,46],
[36,35,44,37,39,33,38,0,39,38],
[37,39,43,42,41,38,38,41,0,36],
[35,34,42,39,41,36,34,42,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,42,37,32,49,35,52,30,33],
[32,0,24,40,30,33,31,31,27,39],
[38,56,0,48,36,50,36,42,38,39],
[43,40,32,0,25,37,24,29,36,29],
[48,50,44,55,0,37,42,41,42,41],
[31,47,30,43,43,0,27,24,32,34],
[45,49,44,56,38,53,0,32,37,39],
[28,49,38,51,39,56,48,0,38,27],
[50,53,42,44,38,48,43,42,0,45],
[47,41,41,51,39,46,41,53,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,28,44,32,28,46,19,24,33],
[61,0,59,57,52,49,50,39,58,47],
[52,21,0,51,46,38,37,33,26,32],
[36,23,29,0,31,24,24,17,35,28],
[48,28,34,49,0,33,34,34,30,45],
[52,31,42,56,47,0,41,57,34,32],
[34,30,43,56,46,39,0,34,29,42],
[61,41,47,63,46,23,46,0,30,45],
[56,22,54,45,50,46,51,50,0,46],
[47,33,48,52,35,48,38,35,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,36,36,35,33,34,36,37,43],
[42,0,33,39,34,33,37,36,32,36],
[44,47,0,42,41,39,40,42,39,46],
[44,41,38,0,40,36,37,33,40,40],
[45,46,39,40,0,35,41,41,43,40],
[47,47,41,44,45,0,39,40,43,45],
[46,43,40,43,39,41,0,43,41,46],
[44,44,38,47,39,40,37,0,37,50],
[43,48,41,40,37,37,39,43,0,52],
[37,44,34,40,40,35,34,30,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,37,48,41,41,50,40,33,43],
[32,0,40,41,38,49,32,40,43,37],
[43,40,0,39,45,50,46,47,44,35],
[32,39,41,0,44,46,38,42,46,43],
[39,42,35,36,0,48,47,38,39,45],
[39,31,30,34,32,0,27,33,33,28],
[30,48,34,42,33,53,0,46,49,43],
[40,40,33,38,42,47,34,0,37,44],
[47,37,36,34,41,47,31,43,0,37],
[37,43,45,37,35,52,37,36,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,57,47,43,47,44,50,49,47],
[40,0,50,43,45,51,38,56,56,51],
[23,30,0,29,26,33,33,28,38,37],
[33,37,51,0,44,48,39,43,53,49],
[37,35,54,36,0,48,44,48,49,49],
[33,29,47,32,32,0,37,33,48,44],
[36,42,47,41,36,43,0,51,50,51],
[30,24,52,37,32,47,29,0,44,45],
[31,24,42,27,31,32,30,36,0,41],
[33,29,43,31,31,36,29,35,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,39,35,33,32,20,20,35,25],
[46,0,50,31,40,44,39,40,24,34],
[41,30,0,33,30,34,29,23,34,36],
[45,49,47,0,31,30,34,34,39,31],
[47,40,50,49,0,33,35,26,36,38],
[48,36,46,50,47,0,33,30,39,38],
[60,41,51,46,45,47,0,33,49,36],
[60,40,57,46,54,50,47,0,44,36],
[45,56,46,41,44,41,31,36,0,44],
[55,46,44,49,42,42,44,44,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,31,37,39,35,47,37,47,38],
[47,0,33,39,41,34,38,43,45,43],
[49,47,0,34,43,42,47,49,51,45],
[43,41,46,0,41,38,46,39,47,35],
[41,39,37,39,0,37,42,35,35,38],
[45,46,38,42,43,0,45,40,53,42],
[33,42,33,34,38,35,0,37,31,34],
[43,37,31,41,45,40,43,0,43,32],
[33,35,29,33,45,27,49,37,0,36],
[42,37,35,45,42,38,46,48,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,42,57,41,38,35,55,43,42],
[34,0,35,47,38,40,46,47,30,39],
[38,45,0,54,52,26,41,46,45,34],
[23,33,26,0,38,16,24,26,29,27],
[39,42,28,42,0,27,46,38,32,35],
[42,40,54,64,53,0,43,45,38,33],
[45,34,39,56,34,37,0,44,36,38],
[25,33,34,54,42,35,36,0,29,31],
[37,50,35,51,48,42,44,51,0,54],
[38,41,46,53,45,47,42,49,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,55,44,51,41,52,51,35,38],
[30,0,51,33,35,52,46,45,40,41],
[25,29,0,31,26,30,34,28,30,35],
[36,47,49,0,46,36,48,36,32,41],
[29,45,54,34,0,37,40,29,34,41],
[39,28,50,44,43,0,42,42,42,32],
[28,34,46,32,40,38,0,43,34,38],
[29,35,52,44,51,38,37,0,37,35],
[45,40,50,48,46,38,46,43,0,42],
[42,39,45,39,39,48,42,45,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,39,43,44,42,41,45,45,33],
[34,0,38,44,40,42,41,44,39,38],
[41,42,0,45,45,44,41,50,46,38],
[37,36,35,0,35,41,28,38,38,31],
[36,40,35,45,0,46,38,44,44,35],
[38,38,36,39,34,0,36,42,41,36],
[39,39,39,52,42,44,0,39,45,40],
[35,36,30,42,36,38,41,0,44,38],
[35,41,34,42,36,39,35,36,0,25],
[47,42,42,49,45,44,40,42,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,35,42,42,35,36,35,49,40],
[44,0,35,41,45,34,40,40,46,42],
[45,45,0,48,51,32,37,44,47,49],
[38,39,32,0,44,32,41,28,44,42],
[38,35,29,36,0,25,30,25,42,33],
[45,46,48,48,55,0,47,38,49,53],
[44,40,43,39,50,33,0,46,54,45],
[45,40,36,52,55,42,34,0,48,46],
[31,34,33,36,38,31,26,32,0,45],
[40,38,31,38,47,27,35,34,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,30,29,26,31,37,36,29,35],
[46,0,39,37,28,39,32,44,45,38],
[50,41,0,41,38,37,40,40,39,46],
[51,43,39,0,35,45,42,44,41,41],
[54,52,42,45,0,39,43,45,47,52],
[49,41,43,35,41,0,41,47,39,39],
[43,48,40,38,37,39,0,42,43,39],
[44,36,40,36,35,33,38,0,33,35],
[51,35,41,39,33,41,37,47,0,45],
[45,42,34,39,28,41,41,45,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,43,38,37,33,40,45,32,42],
[43,0,45,40,43,37,42,44,45,44],
[37,35,0,37,36,34,40,42,30,41],
[42,40,43,0,47,40,43,45,39,44],
[43,37,44,33,0,29,37,42,38,44],
[47,43,46,40,51,0,39,51,37,43],
[40,38,40,37,43,41,0,46,37,42],
[35,36,38,35,38,29,34,0,26,34],
[48,35,50,41,42,43,43,54,0,47],
[38,36,39,36,36,37,38,46,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,39,43,53,40,44,40,47,42],
[43,0,41,39,50,45,47,39,47,40],
[41,39,0,43,50,48,53,46,45,49],
[37,41,37,0,49,37,43,47,47,50],
[27,30,30,31,0,37,28,37,35,26],
[40,35,32,43,43,0,43,40,36,38],
[36,33,27,37,52,37,0,32,30,30],
[40,41,34,33,43,40,48,0,40,44],
[33,33,35,33,45,44,50,40,0,37],
[38,40,31,30,54,42,50,36,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,0,40,80,40,40,40,80,40],
[40,0,40,40,40,0,0,0,40,40],
[80,40,0,40,80,40,40,40,80,40],
[40,40,40,0,40,40,40,0,40,40],
[0,40,0,40,0,0,0,0,80,40],
[40,80,40,40,80,0,80,0,80,40],
[40,80,40,40,80,0,0,0,80,40],
[40,80,40,80,80,80,80,0,80,40],
[0,40,0,40,0,0,0,0,0,40],
[40,40,40,40,40,40,40,40,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,44,37,51,51,48,43,44,42],
[34,0,38,37,43,41,34,38,31,35],
[36,42,0,34,46,43,36,39,37,48],
[43,43,46,0,46,45,37,40,48,53],
[29,37,34,34,0,39,26,31,38,42],
[29,39,37,35,41,0,37,36,43,43],
[32,46,44,43,54,43,0,40,46,43],
[37,42,41,40,49,44,40,0,49,44],
[36,49,43,32,42,37,34,31,0,42],
[38,45,32,27,38,37,37,36,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,45,38,49,36,42,51,28,44],
[49,0,62,45,53,51,51,58,37,48],
[35,18,0,25,33,34,35,39,33,39],
[42,35,55,0,51,38,38,61,42,41],
[31,27,47,29,0,41,37,42,30,42],
[44,29,46,42,39,0,39,51,35,36],
[38,29,45,42,43,41,0,58,42,38],
[29,22,41,19,38,29,22,0,32,41],
[52,43,47,38,50,45,38,48,0,53],
[36,32,41,39,38,44,42,39,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,35,39,35,38,28,35,39,31],
[47,0,50,47,40,43,45,42,47,38],
[45,30,0,36,32,35,32,33,32,34],
[41,33,44,0,40,36,43,42,39,43],
[45,40,48,40,0,46,43,45,35,44],
[42,37,45,44,34,0,40,40,40,44],
[52,35,48,37,37,40,0,31,36,38],
[45,38,47,38,35,40,49,0,42,47],
[41,33,48,41,45,40,44,38,0,33],
[49,42,46,37,36,36,42,33,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,46,45,50,50,50,34,52,50],
[28,0,29,38,37,39,44,23,38,33],
[34,51,0,43,40,42,52,40,45,42],
[35,42,37,0,46,49,38,30,48,38],
[30,43,40,34,0,35,42,32,40,34],
[30,41,38,31,45,0,44,28,36,39],
[30,36,28,42,38,36,0,22,42,37],
[46,57,40,50,48,52,58,0,46,60],
[28,42,35,32,40,44,38,34,0,34],
[30,47,38,42,46,41,43,20,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,36,43,45,44,41,44,46,49],
[40,0,36,46,47,42,41,43,44,42],
[44,44,0,43,44,39,44,42,47,50],
[37,34,37,0,38,33,38,39,41,40],
[35,33,36,42,0,34,34,42,43,40],
[36,38,41,47,46,0,43,43,45,41],
[39,39,36,42,46,37,0,44,37,41],
[36,37,38,41,38,37,36,0,44,45],
[34,36,33,39,37,35,43,36,0,39],
[31,38,30,40,40,39,39,35,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,28,32,21,33,27,32,37,16],
[48,0,41,33,33,40,34,42,45,38],
[52,39,0,34,38,44,35,41,43,35],
[48,47,46,0,42,51,46,43,47,31],
[59,47,42,38,0,47,43,42,49,38],
[47,40,36,29,33,0,28,31,37,26],
[53,46,45,34,37,52,0,47,53,42],
[48,38,39,37,38,49,33,0,47,41],
[43,35,37,33,31,43,27,33,0,29],
[64,42,45,49,42,54,38,39,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,43,40,48,36,50,36,34,36],
[37,0,32,49,53,50,38,46,46,37],
[37,48,0,43,48,44,47,48,51,41],
[40,31,37,0,43,41,52,38,39,33],
[32,27,32,37,0,32,34,28,37,29],
[44,30,36,39,48,0,48,33,36,45],
[30,42,33,28,46,32,0,30,49,33],
[44,34,32,42,52,47,50,0,40,57],
[46,34,29,41,43,44,31,40,0,45],
[44,43,39,47,51,35,47,23,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,39,42,41,45,43,47,38,43],
[43,0,45,42,47,45,38,47,45,48],
[41,35,0,38,41,45,42,50,50,46],
[38,38,42,0,37,38,36,41,39,42],
[39,33,39,43,0,39,34,43,36,38],
[35,35,35,42,41,0,31,38,39,36],
[37,42,38,44,46,49,0,45,44,38],
[33,33,30,39,37,42,35,0,30,34],
[42,35,30,41,44,41,36,50,0,52],
[37,32,34,38,42,44,42,46,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,39,37,44,35,34,43,27,35],
[46,0,45,51,46,49,49,49,41,40],
[41,35,0,43,47,38,36,37,29,31],
[43,29,37,0,33,33,39,44,25,35],
[36,34,33,47,0,32,36,47,33,34],
[45,31,42,47,48,0,37,42,34,32],
[46,31,44,41,44,43,0,41,40,34],
[37,31,43,36,33,38,39,0,35,34],
[53,39,51,55,47,46,40,45,0,41],
[45,40,49,45,46,48,46,46,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,45,59,44,47,46,50,43,47],
[46,0,38,40,38,49,34,57,40,48],
[35,42,0,47,31,35,36,62,44,42],
[21,40,33,0,30,36,36,54,26,32],
[36,42,49,50,0,53,39,49,35,35],
[33,31,45,44,27,0,32,41,42,30],
[34,46,44,44,41,48,0,59,39,39],
[30,23,18,26,31,39,21,0,33,31],
[37,40,36,54,45,38,41,47,0,30],
[33,32,38,48,45,50,41,49,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,36,34,31,33,46,38,38,53],
[38,0,40,33,29,36,29,45,33,45],
[44,40,0,41,34,48,40,54,42,52],
[46,47,39,0,42,47,55,59,44,53],
[49,51,46,38,0,51,50,48,36,48],
[47,44,32,33,29,0,49,51,26,51],
[34,51,40,25,30,31,0,41,25,44],
[42,35,26,21,32,29,39,0,29,31],
[42,47,38,36,44,54,55,51,0,52],
[27,35,28,27,32,29,36,49,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,42,45,55,47,45,50,43,53],
[42,0,32,41,46,40,41,46,43,46],
[38,48,0,42,48,44,44,51,42,42],
[35,39,38,0,38,29,43,43,42,35],
[25,34,32,42,0,32,36,35,32,35],
[33,40,36,51,48,0,44,45,43,41],
[35,39,36,37,44,36,0,48,40,34],
[30,34,29,37,45,35,32,0,43,42],
[37,37,38,38,48,37,40,37,0,33],
[27,34,38,45,45,39,46,38,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,43,44,35,40,43,48,44,46],
[45,0,44,42,41,44,35,47,45,44],
[37,36,0,44,37,35,31,43,41,35],
[36,38,36,0,36,36,36,46,39,37],
[45,39,43,44,0,46,41,50,40,44],
[40,36,45,44,34,0,32,52,41,42],
[37,45,49,44,39,48,0,51,36,47],
[32,33,37,34,30,28,29,0,39,32],
[36,35,39,41,40,39,44,41,0,37],
[34,36,45,43,36,38,33,48,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,48,61,34,47,40,56,40,48],
[35,0,57,53,37,47,43,53,30,48],
[32,23,0,38,37,33,29,36,19,42],
[19,27,42,0,32,49,24,43,25,46],
[46,43,43,48,0,48,40,48,31,49],
[33,33,47,31,32,0,36,42,26,43],
[40,37,51,56,40,44,0,58,40,49],
[24,27,44,37,32,38,22,0,15,38],
[40,50,61,55,49,54,40,65,0,62],
[32,32,38,34,31,37,31,42,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,33,32,35,42,39,27,42,33],
[37,0,32,33,30,42,37,33,40,31],
[47,48,0,32,35,43,46,44,46,37],
[48,47,48,0,43,46,47,38,43,45],
[45,50,45,37,0,51,51,31,43,42],
[38,38,37,34,29,0,40,29,32,28],
[41,43,34,33,29,40,0,35,32,37],
[53,47,36,42,49,51,45,0,47,38],
[38,40,34,37,37,48,48,33,0,36],
[47,49,43,35,38,52,43,42,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,39,31,39,37,44,37,34,27],
[53,0,41,47,39,50,57,54,43,37],
[41,39,0,43,37,36,57,40,34,38],
[49,33,37,0,40,40,47,43,37,34],
[41,41,43,40,0,34,49,31,31,32],
[43,30,44,40,46,0,53,40,48,30],
[36,23,23,33,31,27,0,31,32,22],
[43,26,40,37,49,40,49,0,40,43],
[46,37,46,43,49,32,48,40,0,31],
[53,43,42,46,48,50,58,37,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,49,37,41,39,41,32,31,44],
[36,0,44,40,33,39,35,30,40,38],
[31,36,0,36,36,34,40,31,33,39],
[43,40,44,0,46,39,47,44,48,38],
[39,47,44,34,0,38,43,38,40,41],
[41,41,46,41,42,0,36,36,32,42],
[39,45,40,33,37,44,0,36,47,40],
[48,50,49,36,42,44,44,0,43,48],
[49,40,47,32,40,48,33,37,0,47],
[36,42,41,42,39,38,40,32,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,47,43,44,44,39,45,43,52],
[40,0,39,43,42,41,37,51,39,51],
[33,41,0,39,37,36,33,35,33,36],
[37,37,41,0,47,40,31,46,39,43],
[36,38,43,33,0,41,33,38,31,45],
[36,39,44,40,39,0,37,53,32,43],
[41,43,47,49,47,43,0,46,38,50],
[35,29,45,34,42,27,34,0,36,42],
[37,41,47,41,49,48,42,44,0,54],
[28,29,44,37,35,37,30,38,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,35,24,39,25,31,28,45,19],
[54,0,38,44,40,44,43,43,55,35],
[45,42,0,35,44,38,44,49,42,35],
[56,36,45,0,43,43,49,54,51,45],
[41,40,36,37,0,35,34,42,45,27],
[55,36,42,37,45,0,42,44,56,43],
[49,37,36,31,46,38,0,49,44,35],
[52,37,31,26,38,36,31,0,40,34],
[35,25,38,29,35,24,36,40,0,38],
[61,45,45,35,53,37,45,46,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,38,27,41,39,44,42,28,34],
[44,0,42,42,40,47,49,49,42,45],
[42,38,0,34,44,39,43,34,32,36],
[53,38,46,0,43,47,48,46,41,47],
[39,40,36,37,0,39,37,40,26,35],
[41,33,41,33,41,0,47,45,35,44],
[36,31,37,32,43,33,0,40,35,35],
[38,31,46,34,40,35,40,0,29,36],
[52,38,48,39,54,45,45,51,0,42],
[46,35,44,33,45,36,45,44,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,45,34,49,31,46,46,40,50],
[40,0,47,42,53,40,47,57,50,48],
[35,33,0,38,28,25,48,51,28,45],
[46,38,42,0,43,29,47,53,36,56],
[31,27,52,37,0,36,31,46,37,47],
[49,40,55,51,44,0,53,63,45,53],
[34,33,32,33,49,27,0,47,34,50],
[34,23,29,27,34,17,33,0,31,40],
[40,30,52,44,43,35,46,49,0,45],
[30,32,35,24,33,27,30,40,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,41,30,33,34,39,33,29,42],
[45,0,39,38,44,31,43,37,44,40],
[39,41,0,39,38,40,49,30,35,36],
[50,42,41,0,30,37,37,40,46,48],
[47,36,42,50,0,38,43,35,45,49],
[46,49,40,43,42,0,38,35,40,52],
[41,37,31,43,37,42,0,31,36,53],
[47,43,50,40,45,45,49,0,42,43],
[51,36,45,34,35,40,44,38,0,46],
[38,40,44,32,31,28,27,37,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,43,34,31,35,33,31,40,38],
[59,0,41,40,51,47,49,40,46,43],
[37,39,0,41,37,39,32,41,41,44],
[46,40,39,0,45,46,45,47,43,46],
[49,29,43,35,0,45,33,39,39,42],
[45,33,41,34,35,0,34,42,39,42],
[47,31,48,35,47,46,0,37,46,42],
[49,40,39,33,41,38,43,0,33,41],
[40,34,39,37,41,41,34,47,0,53],
[42,37,36,34,38,38,38,39,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,40,35,33,38,47,31,37,44],
[42,0,42,38,34,37,38,32,28,36],
[40,38,0,38,33,37,53,40,47,39],
[45,42,42,0,33,39,56,37,35,49],
[47,46,47,47,0,45,54,41,36,53],
[42,43,43,41,35,0,41,30,36,43],
[33,42,27,24,26,39,0,30,24,35],
[49,48,40,43,39,50,50,0,41,46],
[43,52,33,45,44,44,56,39,0,48],
[36,44,41,31,27,37,45,34,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,44,45,46,47,40,48,44,49],
[38,0,36,44,32,36,46,41,36,38],
[36,44,0,48,40,39,38,38,34,46],
[35,36,32,0,37,39,30,35,32,39],
[34,48,40,43,0,43,43,41,41,43],
[33,44,41,41,37,0,44,38,38,40],
[40,34,42,50,37,36,0,32,34,44],
[32,39,42,45,39,42,48,0,37,49],
[36,44,46,48,39,42,46,43,0,41],
[31,42,34,41,37,40,36,31,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,45,36,33,38,38,42,36,45],
[34,0,33,39,35,44,32,32,32,42],
[35,47,0,36,41,38,37,43,37,45],
[44,41,44,0,39,43,43,46,38,47],
[47,45,39,41,0,48,52,33,44,48],
[42,36,42,37,32,0,38,30,33,39],
[42,48,43,37,28,42,0,35,33,40],
[38,48,37,34,47,50,45,0,38,53],
[44,48,43,42,36,47,47,42,0,42],
[35,38,35,33,32,41,40,27,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,37,33,47,36,42,24,40,58],
[45,0,56,51,44,30,44,55,30,67],
[43,24,0,45,42,24,31,29,15,40],
[47,29,35,0,48,23,35,31,42,53],
[33,36,38,32,0,35,33,25,41,49],
[44,50,56,57,45,0,49,50,38,55],
[38,36,49,45,47,31,0,45,36,56],
[56,25,51,49,55,30,35,0,37,46],
[40,50,65,38,39,42,44,43,0,45],
[22,13,40,27,31,25,24,34,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,39,45,42,42,45,40,42,35],
[44,0,42,51,48,42,40,41,47,40],
[41,38,0,44,46,34,41,35,36,41],
[35,29,36,0,35,31,34,33,35,31],
[38,32,34,45,0,42,47,38,40,33],
[38,38,46,49,38,0,47,45,39,39],
[35,40,39,46,33,33,0,42,40,36],
[40,39,45,47,42,35,38,0,43,43],
[38,33,44,45,40,41,40,37,0,41],
[45,40,39,49,47,41,44,37,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,41,48,50,41,40,49,43,53],
[28,0,29,36,45,30,34,38,44,28],
[39,51,0,43,41,37,47,49,38,40],
[32,44,37,0,46,39,46,44,45,35],
[30,35,39,34,0,28,37,39,39,34],
[39,50,43,41,52,0,42,54,41,47],
[40,46,33,34,43,38,0,47,40,42],
[31,42,31,36,41,26,33,0,31,40],
[37,36,42,35,41,39,40,49,0,34],
[27,52,40,45,46,33,38,40,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,33,45,34,35,47,39,35,35],
[39,0,33,39,37,28,39,31,32,31],
[47,47,0,53,37,43,48,50,37,42],
[35,41,27,0,39,30,37,35,32,29],
[46,43,43,41,0,42,40,45,37,34],
[45,52,37,50,38,0,38,42,37,39],
[33,41,32,43,40,42,0,38,35,37],
[41,49,30,45,35,38,42,0,36,39],
[45,48,43,48,43,43,45,44,0,40],
[45,49,38,51,46,41,43,41,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,37,44,39,42,39,45,42,45],
[34,0,40,36,37,36,38,41,33,37],
[43,40,0,48,40,42,45,43,44,44],
[36,44,32,0,45,39,42,45,45,40],
[41,43,40,35,0,47,39,36,36,36],
[38,44,38,41,33,0,44,35,41,42],
[41,42,35,38,41,36,0,43,45,40],
[35,39,37,35,44,45,37,0,42,46],
[38,47,36,35,44,39,35,38,0,47],
[35,43,36,40,44,38,40,34,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,49,59,44,43,37,44,51,41],
[40,0,50,51,38,43,39,45,51,38],
[31,30,0,31,25,31,19,44,45,31],
[21,29,49,0,33,40,23,49,35,37],
[36,42,55,47,0,35,40,51,43,36],
[37,37,49,40,45,0,27,52,45,29],
[43,41,61,57,40,53,0,55,53,47],
[36,35,36,31,29,28,25,0,44,27],
[29,29,35,45,37,35,27,36,0,37],
[39,42,49,43,44,51,33,53,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,35,36,31,39,34,36,37,35],
[45,0,37,41,42,44,42,42,45,38],
[45,43,0,40,41,39,42,43,44,37],
[44,39,40,0,39,32,35,37,37,37],
[49,38,39,41,0,37,43,43,40,41],
[41,36,41,48,43,0,42,41,44,39],
[46,38,38,45,37,38,0,46,46,41],
[44,38,37,43,37,39,34,0,42,35],
[43,35,36,43,40,36,34,38,0,33],
[45,42,43,43,39,41,39,45,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,39,33,38,41,35,39,33,41],
[39,0,43,40,33,46,38,39,42,41],
[41,37,0,46,31,42,44,40,42,43],
[47,40,34,0,37,37,45,40,38,42],
[42,47,49,43,0,45,50,50,38,49],
[39,34,38,43,35,0,31,40,35,40],
[45,42,36,35,30,49,0,39,42,43],
[41,41,40,40,30,40,41,0,38,43],
[47,38,38,42,42,45,38,42,0,42],
[39,39,37,38,31,40,37,37,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,40,39,42,50,42,38,40,40],
[35,0,37,38,37,39,35,37,31,42],
[40,43,0,45,35,44,44,35,39,44],
[41,42,35,0,38,47,39,37,34,44],
[38,43,45,42,0,44,46,38,36,44],
[30,41,36,33,36,0,30,30,30,40],
[38,45,36,41,34,50,0,39,41,42],
[42,43,45,43,42,50,41,0,33,50],
[40,49,41,46,44,50,39,47,0,47],
[40,38,36,36,36,40,38,30,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,43,35,41,39,39,39,37,36],
[44,0,44,42,36,31,36,33,35,30],
[37,36,0,34,45,29,30,39,36,33],
[45,38,46,0,47,41,38,38,44,37],
[39,44,35,33,0,29,35,38,43,36],
[41,49,51,39,51,0,50,45,46,39],
[41,44,50,42,45,30,0,39,34,37],
[41,47,41,42,42,35,41,0,41,35],
[43,45,44,36,37,34,46,39,0,45],
[44,50,47,43,44,41,43,45,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,40,43,39,27,40,36,43,43],
[27,0,41,45,41,27,43,34,31,30],
[40,39,0,41,33,31,39,38,43,37],
[37,35,39,0,42,33,59,35,36,34],
[41,39,47,38,0,28,44,29,43,43],
[53,53,49,47,52,0,42,47,42,38],
[40,37,41,21,36,38,0,39,37,39],
[44,46,42,45,51,33,41,0,39,37],
[37,49,37,44,37,38,43,41,0,34],
[37,50,43,46,37,42,41,43,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,35,34,36,34,48,34,46,40],
[36,0,30,32,37,37,33,34,37,34],
[45,50,0,41,45,49,43,40,56,38],
[46,48,39,0,42,38,46,35,45,40],
[44,43,35,38,0,39,44,32,50,42],
[46,43,31,42,41,0,42,35,43,36],
[32,47,37,34,36,38,0,27,43,38],
[46,46,40,45,48,45,53,0,50,43],
[34,43,24,35,30,37,37,30,0,36],
[40,46,42,40,38,44,42,37,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,44,32,52,47,41,53,48,38],
[44,0,53,45,54,51,33,51,45,47],
[36,27,0,32,44,33,33,37,37,32],
[48,35,48,0,59,48,45,51,58,48],
[28,26,36,21,0,41,31,44,39,38],
[33,29,47,32,39,0,27,49,34,39],
[39,47,47,35,49,53,0,54,47,45],
[27,29,43,29,36,31,26,0,36,35],
[32,35,43,22,41,46,33,44,0,36],
[42,33,48,32,42,41,35,45,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,35,42,37,44,39,30,42,37],
[41,0,30,32,29,47,39,33,50,33],
[45,50,0,45,37,50,45,50,57,39],
[38,48,35,0,26,42,37,40,50,34],
[43,51,43,54,0,49,42,41,49,38],
[36,33,30,38,31,0,32,33,46,26],
[41,41,35,43,38,48,0,38,43,35],
[50,47,30,40,39,47,42,0,47,47],
[38,30,23,30,31,34,37,33,0,27],
[43,47,41,46,42,54,45,33,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,45,40,41,37,43,38,41,41],
[34,0,43,39,42,39,43,45,43,37],
[35,37,0,34,41,37,41,35,41,34],
[40,41,46,0,45,41,39,43,45,40],
[39,38,39,35,0,36,47,38,42,38],
[43,41,43,39,44,0,47,40,47,43],
[37,37,39,41,33,33,0,37,41,36],
[42,35,45,37,42,40,43,0,43,39],
[39,37,39,35,38,33,39,37,0,33],
[39,43,46,40,42,37,44,41,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,38,50,31,25,41,42,25,23],
[64,0,47,58,41,26,33,26,17,49],
[42,33,0,51,17,34,41,25,33,33],
[30,22,29,0,31,25,24,25,25,15],
[49,39,63,49,0,48,48,40,48,31],
[55,54,46,55,32,0,45,25,32,46],
[39,47,39,56,32,35,0,18,25,41],
[38,54,55,55,40,55,62,0,49,38],
[55,63,47,55,32,48,55,31,0,46],
[57,31,47,65,49,34,39,42,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,0,0,20,0,0,20,20],
[80,0,40,40,60,40,80,60,40,40],
[80,40,0,40,40,60,80,40,40,40],
[80,40,40,0,40,40,60,60,40,40],
[80,20,40,40,0,40,40,40,40,20],
[60,40,20,40,40,0,40,40,40,40],
[80,0,0,20,40,40,0,40,20,40],
[80,20,40,20,40,40,40,0,40,60],
[60,40,40,40,40,40,60,40,0,40],
[60,40,40,40,60,40,40,20,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,35,40,38,43,33,34,39,51],
[38,0,33,35,34,38,34,32,34,37],
[45,47,0,47,44,50,43,40,45,41],
[40,45,33,0,37,45,43,41,34,44],
[42,46,36,43,0,40,37,41,39,44],
[37,42,30,35,40,0,35,30,35,41],
[47,46,37,37,43,45,0,41,41,47],
[46,48,40,39,39,50,39,0,43,47],
[41,46,35,46,41,45,39,37,0,41],
[29,43,39,36,36,39,33,33,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,28,33,29,40,38,37,35,43],
[46,0,29,32,36,58,32,43,31,44],
[52,51,0,30,44,46,47,44,30,43],
[47,48,50,0,38,54,42,45,41,44],
[51,44,36,42,0,50,41,45,33,49],
[40,22,34,26,30,0,33,29,24,35],
[42,48,33,38,39,47,0,40,34,40],
[43,37,36,35,35,51,40,0,26,47],
[45,49,50,39,47,56,46,54,0,51],
[37,36,37,36,31,45,40,33,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,32,32,30,34,34,44,37,25],
[51,0,38,39,39,53,40,45,46,42],
[48,42,0,41,38,49,35,52,41,39],
[48,41,39,0,33,45,32,46,39,36],
[50,41,42,47,0,45,39,44,44,39],
[46,27,31,35,35,0,38,42,42,35],
[46,40,45,48,41,42,0,46,46,37],
[36,35,28,34,36,38,34,0,27,34],
[43,34,39,41,36,38,34,53,0,40],
[55,38,41,44,41,45,43,46,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,41,39,41,31,35,33,36,30],
[51,0,48,55,51,43,39,37,46,50],
[39,32,0,41,51,37,33,34,35,37],
[41,25,39,0,45,28,32,32,39,43],
[39,29,29,35,0,28,30,30,31,31],
[49,37,43,52,52,0,47,43,46,48],
[45,41,47,48,50,33,0,34,38,48],
[47,43,46,48,50,37,46,0,47,48],
[44,34,45,41,49,34,42,33,0,38],
[50,30,43,37,49,32,32,32,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,31,30,42,37,35,39,34,40],
[48,0,38,40,45,43,43,46,44,37],
[49,42,0,36,44,43,41,42,46,41],
[50,40,44,0,46,45,45,42,45,43],
[38,35,36,34,0,36,34,39,38,41],
[43,37,37,35,44,0,39,45,39,44],
[45,37,39,35,46,41,0,41,46,45],
[41,34,38,38,41,35,39,0,38,46],
[46,36,34,35,42,41,34,42,0,41],
[40,43,39,37,39,36,35,34,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,36,37,44,44,43,41,45,40],
[40,0,35,40,38,40,45,35,38,35],
[44,45,0,44,49,46,36,44,46,46],
[43,40,36,0,41,42,37,33,37,36],
[36,42,31,39,0,41,35,43,40,40],
[36,40,34,38,39,0,41,37,44,37],
[37,35,44,43,45,39,0,38,37,32],
[39,45,36,47,37,43,42,0,41,43],
[35,42,34,43,40,36,43,39,0,36],
[40,45,34,44,40,43,48,37,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,40,48,41,43,36,41,32,47],
[39,0,42,46,37,57,44,41,34,39],
[40,38,0,45,26,44,33,36,37,52],
[32,34,35,0,34,46,30,40,33,47],
[39,43,54,46,0,55,41,42,39,42],
[37,23,36,34,25,0,32,44,24,36],
[44,36,47,50,39,48,0,47,43,40],
[39,39,44,40,38,36,33,0,34,43],
[48,46,43,47,41,56,37,46,0,44],
[33,41,28,33,38,44,40,37,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,57,46,48,39,48,54,39,63],
[24,0,48,40,33,35,48,40,40,39],
[23,32,0,48,42,49,48,41,30,42],
[34,40,32,0,42,41,39,42,30,31],
[32,47,38,38,0,50,32,29,53,45],
[41,45,31,39,30,0,39,30,45,38],
[32,32,32,41,48,41,0,39,29,38],
[26,40,39,38,51,50,41,0,32,38],
[41,40,50,50,27,35,51,48,0,40],
[17,41,38,49,35,42,42,42,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,46,44,46,40,44,47,43,52],
[33,0,51,40,51,41,46,40,46,53],
[34,29,0,31,40,33,34,30,34,44],
[36,40,49,0,47,48,49,43,41,55],
[34,29,40,33,0,33,37,39,40,48],
[40,39,47,32,47,0,48,37,45,55],
[36,34,46,31,43,32,0,42,45,47],
[33,40,50,37,41,43,38,0,47,46],
[37,34,46,39,40,35,35,33,0,47],
[28,27,36,25,32,25,33,34,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,31,35,27,31,28,35,37,30],
[55,0,35,53,44,44,43,44,43,38],
[49,45,0,46,49,44,42,40,39,47],
[45,27,34,0,29,37,25,28,33,28],
[53,36,31,51,0,38,33,34,35,35],
[49,36,36,43,42,0,37,42,31,40],
[52,37,38,55,47,43,0,43,47,36],
[45,36,40,52,46,38,37,0,36,33],
[43,37,41,47,45,49,33,44,0,40],
[50,42,33,52,45,40,44,47,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,34,44,41,37,32,31,38,36],
[46,0,50,42,48,42,35,36,33,36],
[46,30,0,44,36,39,37,29,32,40],
[36,38,36,0,48,45,33,34,35,39],
[39,32,44,32,0,31,32,32,34,38],
[43,38,41,35,49,0,33,33,36,38],
[48,45,43,47,48,47,0,47,45,37],
[49,44,51,46,48,47,33,0,43,43],
[42,47,48,45,46,44,35,37,0,42],
[44,44,40,41,42,42,43,37,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,31,33,40,40,44,42,37,44],
[42,0,45,39,48,45,59,49,43,35],
[49,35,0,41,49,44,48,50,43,48],
[47,41,39,0,46,50,55,51,37,45],
[40,32,31,34,0,41,45,45,36,42],
[40,35,36,30,39,0,46,44,36,47],
[36,21,32,25,35,34,0,35,34,31],
[38,31,30,29,35,36,45,0,32,36],
[43,37,37,43,44,44,46,48,0,42],
[36,45,32,35,38,33,49,44,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,33,27,38,38,33,32,44,51],
[38,0,30,32,36,38,36,43,37,48],
[47,50,0,32,34,38,37,47,42,42],
[53,48,48,0,40,46,45,50,38,46],
[42,44,46,40,0,41,33,54,46,49],
[42,42,42,34,39,0,41,41,46,45],
[47,44,43,35,47,39,0,49,43,44],
[48,37,33,30,26,39,31,0,35,44],
[36,43,38,42,34,34,37,45,0,37],
[29,32,38,34,31,35,36,36,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,28,15,28,41,30,28,40,28],
[40,0,27,28,15,53,42,25,39,40],
[52,53,0,40,40,53,55,52,53,65],
[65,52,40,0,40,65,27,25,52,55],
[52,65,40,40,0,65,55,40,65,65],
[39,27,27,15,15,0,15,12,27,27],
[50,38,25,53,25,65,0,50,65,65],
[52,55,28,55,40,68,30,0,40,55],
[40,41,27,28,15,53,15,40,0,40],
[52,40,15,25,15,53,15,25,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,40,38,41,39,49,33,46,40],
[42,0,39,42,40,40,43,40,47,45],
[40,41,0,37,36,42,40,33,41,39],
[42,38,43,0,35,41,39,32,44,36],
[39,40,44,45,0,42,45,43,44,43],
[41,40,38,39,38,0,40,36,45,43],
[31,37,40,41,35,40,0,35,42,37],
[47,40,47,48,37,44,45,0,47,44],
[34,33,39,36,36,35,38,33,0,35],
[40,35,41,44,37,37,43,36,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,44,42,49,40,38,41,35,45],
[34,0,43,38,48,34,43,35,37,44],
[36,37,0,34,37,32,35,32,32,36],
[38,42,46,0,43,44,34,38,41,40],
[31,32,43,37,0,41,34,33,37,41],
[40,46,48,36,39,0,40,44,40,40],
[42,37,45,46,46,40,0,40,41,39],
[39,45,48,42,47,36,40,0,39,41],
[45,43,48,39,43,40,39,41,0,44],
[35,36,44,40,39,40,41,39,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,67,53,44,71,40,52,52,44],
[24,0,46,43,31,45,22,46,26,35],
[13,34,0,32,36,41,22,43,24,29],
[27,37,48,0,39,48,33,49,25,43],
[36,49,44,41,0,44,51,46,39,45],
[9,35,39,32,36,0,21,42,30,35],
[40,58,58,47,29,59,0,64,44,44],
[28,34,37,31,34,38,16,0,24,43],
[28,54,56,55,41,50,36,56,0,50],
[36,45,51,37,35,45,36,37,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,38,35,35,29,39,34,32,26],
[34,0,33,31,34,41,30,33,40,36],
[42,47,0,42,34,30,33,35,41,33],
[45,49,38,0,42,37,49,55,45,38],
[45,46,46,38,0,41,35,43,44,42],
[51,39,50,43,39,0,49,35,49,41],
[41,50,47,31,45,31,0,40,46,46],
[46,47,45,25,37,45,40,0,46,42],
[48,40,39,35,36,31,34,34,0,35],
[54,44,47,42,38,39,34,38,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,41,45,44,44,40,47,39,36],
[29,0,30,35,31,28,25,43,26,31],
[39,50,0,43,39,47,43,42,42,47],
[35,45,37,0,38,43,36,39,33,40],
[36,49,41,42,0,43,37,50,44,45],
[36,52,33,37,37,0,31,44,30,33],
[40,55,37,44,43,49,0,42,35,39],
[33,37,38,41,30,36,38,0,36,33],
[41,54,38,47,36,50,45,44,0,42],
[44,49,33,40,35,47,41,47,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,35,37,25,53,55,37,60,54],
[46,0,46,54,46,45,46,28,43,37],
[45,34,0,45,25,53,63,62,52,53],
[43,26,35,0,25,25,35,25,43,46],
[55,34,55,55,0,62,63,45,44,63],
[27,35,27,55,18,0,55,46,36,46],
[25,34,17,45,17,25,0,34,43,45],
[43,52,18,55,35,34,46,0,43,45],
[20,37,28,37,36,44,37,37,0,28],
[26,43,27,34,17,34,35,35,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,40,38,47,41,43,40,39,42],
[32,0,38,34,41,33,38,35,37,37],
[40,42,0,38,41,33,41,36,33,43],
[42,46,42,0,44,41,39,47,41,41],
[33,39,39,36,0,37,42,37,40,44],
[39,47,47,39,43,0,42,39,42,40],
[37,42,39,41,38,38,0,34,43,38],
[40,45,44,33,43,41,46,0,41,41],
[41,43,47,39,40,38,37,39,0,38],
[38,43,37,39,36,40,42,39,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,50,38,43,46,37,33,39,31],
[29,0,41,34,36,37,26,27,35,29],
[30,39,0,31,43,35,28,28,36,27],
[42,46,49,0,45,46,43,33,41,32],
[37,44,37,35,0,37,34,31,34,33],
[34,43,45,34,43,0,28,25,32,26],
[43,54,52,37,46,52,0,32,42,33],
[47,53,52,47,49,55,48,0,45,40],
[41,45,44,39,46,48,38,35,0,36],
[49,51,53,48,47,54,47,40,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,50,40,37,46,36,32,31,34],
[37,0,41,32,41,32,35,28,32,35],
[30,39,0,34,36,35,39,31,29,33],
[40,48,46,0,44,45,41,45,44,43],
[43,39,44,36,0,46,45,30,39,41],
[34,48,45,35,34,0,40,32,39,32],
[44,45,41,39,35,40,0,28,31,48],
[48,52,49,35,50,48,52,0,39,47],
[49,48,51,36,41,41,49,41,0,41],
[46,45,47,37,39,48,32,33,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,38,44,42,38,45,42,45,45],
[37,0,35,39,37,43,38,40,42,41],
[42,45,0,38,44,37,35,34,43,39],
[36,41,42,0,39,33,47,44,47,47],
[38,43,36,41,0,38,32,37,43,44],
[42,37,43,47,42,0,43,40,49,52],
[35,42,45,33,48,37,0,43,45,39],
[38,40,46,36,43,40,37,0,46,44],
[35,38,37,33,37,31,35,34,0,38],
[35,39,41,33,36,28,41,36,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,41,52,42,32,32,39,42,44],
[52,0,55,45,54,42,40,42,49,47],
[39,25,0,33,47,27,36,39,41,40],
[28,35,47,0,47,25,37,38,44,49],
[38,26,33,33,0,24,28,38,49,50],
[48,38,53,55,56,0,40,45,55,51],
[48,40,44,43,52,40,0,43,54,48],
[41,38,41,42,42,35,37,0,39,43],
[38,31,39,36,31,25,26,41,0,41],
[36,33,40,31,30,29,32,37,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,31,63,33,0,0,16,15,32],
[16,0,32,63,49,16,16,32,0,33],
[49,48,0,80,33,32,33,33,0,48],
[17,17,0,0,17,0,0,0,0,17],
[47,31,47,63,0,16,16,32,15,48],
[80,64,48,80,64,0,64,33,48,64],
[80,64,47,80,64,16,0,49,15,48],
[64,48,47,80,48,47,31,0,31,64],
[65,80,80,80,65,32,65,49,0,64],
[48,47,32,63,32,16,32,16,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,47,47,47,56,47,54,46,46],
[41,0,46,52,51,48,41,46,41,33],
[33,34,0,48,42,55,39,57,43,43],
[33,28,32,0,37,51,45,53,34,31],
[33,29,38,43,0,43,44,44,39,29],
[24,32,25,29,37,0,32,44,35,30],
[33,39,41,35,36,48,0,46,35,29],
[26,34,23,27,36,36,34,0,29,32],
[34,39,37,46,41,45,45,51,0,38],
[34,47,37,49,51,50,51,48,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,52,33,42,55,46,49,46,42],
[39,0,43,44,37,50,42,50,47,51],
[28,37,0,33,35,54,42,40,47,37],
[47,36,47,0,51,47,38,52,41,44],
[38,43,45,29,0,49,30,45,41,45],
[25,30,26,33,31,0,30,38,31,43],
[34,38,38,42,50,50,0,52,41,50],
[31,30,40,28,35,42,28,0,37,35],
[34,33,33,39,39,49,39,43,0,40],
[38,29,43,36,35,37,30,45,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,43,35,50,30,23,44,32],
[39,0,43,39,38,42,35,42,39,42],
[39,37,0,37,36,48,27,41,35,34],
[37,41,43,0,41,52,35,32,50,45],
[45,42,44,39,0,47,36,43,55,34],
[30,38,32,28,33,0,28,37,38,37],
[50,45,53,45,44,52,0,39,55,41],
[57,38,39,48,37,43,41,0,48,38],
[36,41,45,30,25,42,25,32,0,34],
[48,38,46,35,46,43,39,42,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,40,27,18,41,41,40,29,61],
[31,0,31,49,39,42,41,62,30,60],
[40,49,0,49,39,42,41,51,39,58],
[53,31,31,0,29,53,43,41,40,62],
[62,41,41,51,0,53,41,50,39,62],
[39,38,38,27,27,0,30,39,18,60],
[39,39,39,37,39,50,0,50,39,51],
[40,18,29,39,30,41,30,0,27,40],
[51,50,41,40,41,62,41,53,0,71],
[19,20,22,18,18,20,29,40,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,47,35,43,47,45,34,51,39],
[43,0,51,45,43,44,54,37,48,43],
[33,29,0,40,38,50,45,33,50,45],
[45,35,40,0,37,48,46,43,45,45],
[37,37,42,43,0,44,48,45,48,38],
[33,36,30,32,36,0,41,39,43,35],
[35,26,35,34,32,39,0,35,43,24],
[46,43,47,37,35,41,45,0,50,47],
[29,32,30,35,32,37,37,30,0,40],
[41,37,35,35,42,45,56,33,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,37,49,36,38,44,31,27,44],
[47,0,47,52,47,46,48,52,30,27],
[43,33,0,43,48,53,54,48,47,44],
[31,28,37,0,31,35,47,32,26,38],
[44,33,32,49,0,43,49,44,28,39],
[42,34,27,45,37,0,42,26,20,34],
[36,32,26,33,31,38,0,29,20,34],
[49,28,32,48,36,54,51,0,15,34],
[53,50,33,54,52,60,60,65,0,46],
[36,53,36,42,41,46,46,46,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,39,56,39,54,35,42,42,43],
[47,0,42,55,42,48,42,40,41,41],
[41,38,0,47,37,42,29,45,45,38],
[24,25,33,0,40,35,24,33,40,31],
[41,38,43,40,0,55,43,52,48,44],
[26,32,38,45,25,0,25,43,36,35],
[45,38,51,56,37,55,0,45,36,39],
[38,40,35,47,28,37,35,0,36,32],
[38,39,35,40,32,44,44,44,0,31],
[37,39,42,49,36,45,41,48,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,37,39,45,39,46,40,42,39],
[45,0,36,39,37,38,39,37,42,34],
[43,44,0,39,39,46,39,36,42,43],
[41,41,41,0,44,35,38,35,46,45],
[35,43,41,36,0,46,39,33,39,39],
[41,42,34,45,34,0,34,30,43,39],
[34,41,41,42,41,46,0,32,44,47],
[40,43,44,45,47,50,48,0,52,49],
[38,38,38,34,41,37,36,28,0,40],
[41,46,37,35,41,41,33,31,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,39,36,30,37,39,38,33,40],
[50,0,48,46,37,44,45,38,40,43],
[41,32,0,42,37,38,42,39,33,38],
[44,34,38,0,35,35,33,39,32,40],
[50,43,43,45,0,42,45,45,40,42],
[43,36,42,45,38,0,39,37,33,44],
[41,35,38,47,35,41,0,37,32,43],
[42,42,41,41,35,43,43,0,40,41],
[47,40,47,48,40,47,48,40,0,43],
[40,37,42,40,38,36,37,39,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,33,39,46,43,40,42,39,37],
[46,0,30,37,43,39,35,41,39,41],
[47,50,0,45,46,39,41,41,51,46],
[41,43,35,0,49,45,28,33,36,37],
[34,37,34,31,0,34,22,40,43,36],
[37,41,41,35,46,0,30,48,43,40],
[40,45,39,52,58,50,0,59,52,53],
[38,39,39,47,40,32,21,0,39,39],
[41,41,29,44,37,37,28,41,0,39],
[43,39,34,43,44,40,27,41,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,45,40,48,35,39,40,32,39],
[34,0,50,36,36,44,27,44,51,34],
[35,30,0,30,36,40,49,36,51,41],
[40,44,50,0,46,48,34,36,37,51],
[32,44,44,34,0,42,34,36,22,43],
[45,36,40,32,38,0,44,31,37,36],
[41,53,31,46,46,36,0,34,37,47],
[40,36,44,44,44,49,46,0,26,43],
[48,29,29,43,58,43,43,54,0,52],
[41,46,39,29,37,44,33,37,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,54,52,54,39,52,49,49,43],
[31,0,45,40,39,36,40,43,42,36],
[26,35,0,37,44,34,37,38,32,29],
[28,40,43,0,36,34,39,35,31,40],
[26,41,36,44,0,31,43,37,37,32],
[41,44,46,46,49,0,50,44,46,40],
[28,40,43,41,37,30,0,36,36,33],
[31,37,42,45,43,36,44,0,39,32],
[31,38,48,49,43,34,44,41,0,37],
[37,44,51,40,48,40,47,48,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,54,46,46,47,49,30,37,50],
[33,0,58,39,36,48,55,49,59,51],
[26,22,0,32,13,31,32,34,35,26],
[34,41,48,0,32,54,49,29,32,31],
[34,44,67,48,0,52,47,33,52,49],
[33,32,49,26,28,0,36,28,27,28],
[31,25,48,31,33,44,0,35,36,30],
[50,31,46,51,47,52,45,0,57,45],
[43,21,45,48,28,53,44,23,0,41],
[30,29,54,49,31,52,50,35,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,41,48,48,55,29,47,46,25],
[47,0,42,40,37,50,28,38,41,23],
[39,38,0,44,42,46,40,37,41,37],
[32,40,36,0,53,43,25,38,40,32],
[32,43,38,27,0,43,23,32,34,23],
[25,30,34,37,37,0,16,33,31,23],
[51,52,40,55,57,64,0,49,50,52],
[33,42,43,42,48,47,31,0,48,36],
[34,39,39,40,46,49,30,32,0,36],
[55,57,43,48,57,57,28,44,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,28,52,19,38,45,27,34,37],
[44,0,44,43,34,35,35,19,35,42],
[52,36,0,54,43,45,35,17,42,35],
[28,37,26,0,9,37,19,9,17,35],
[61,46,37,71,0,39,54,28,35,46],
[42,45,35,43,41,0,54,45,43,37],
[35,45,45,61,26,26,0,17,32,43],
[53,61,63,71,52,35,63,0,43,62],
[46,45,38,63,45,37,48,37,0,55],
[43,38,45,45,34,43,37,18,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,60,41,41,60,41,22,41],
[39,0,38,60,39,19,38,80,22,19],
[39,42,0,61,39,0,19,80,22,20],
[20,20,19,0,20,0,0,39,0,39],
[39,41,41,60,0,41,60,80,22,41],
[39,61,80,80,39,0,58,80,61,39],
[20,42,61,80,20,22,0,61,22,39],
[39,0,0,41,0,0,19,0,22,0],
[58,58,58,80,58,19,58,58,0,39],
[39,61,60,41,39,41,41,80,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,45,50,50,36,44,37,47,44],
[43,0,53,47,48,40,52,40,47,51],
[35,27,0,40,38,31,42,31,32,35],
[30,33,40,0,37,33,43,34,32,40],
[30,32,42,43,0,31,38,38,38,41],
[44,40,49,47,49,0,46,43,45,48],
[36,28,38,37,42,34,0,26,36,40],
[43,40,49,46,42,37,54,0,44,47],
[33,33,48,48,42,35,44,36,0,39],
[36,29,45,40,39,32,40,33,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,37,38,39,42,38,44,36,34],
[37,0,27,34,36,38,33,38,27,35],
[43,53,0,47,41,46,40,50,34,40],
[42,46,33,0,41,45,29,41,35,34],
[41,44,39,39,0,41,42,45,41,37],
[38,42,34,35,39,0,31,39,30,32],
[42,47,40,51,38,49,0,47,38,40],
[36,42,30,39,35,41,33,0,27,32],
[44,53,46,45,39,50,42,53,0,45],
[46,45,40,46,43,48,40,48,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,49,37,39,43,53,49,44,41],
[31,0,39,33,37,40,41,32,37,39],
[31,41,0,40,38,40,52,46,38,39],
[43,47,40,0,29,41,50,38,42,41],
[41,43,42,51,0,40,53,49,42,41],
[37,40,40,39,40,0,48,34,46,40],
[27,39,28,30,27,32,0,32,26,30],
[31,48,34,42,31,46,48,0,32,33],
[36,43,42,38,38,34,54,48,0,34],
[39,41,41,39,39,40,50,47,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,35,34,41,30,38,42,44,39],
[35,0,34,41,35,43,31,44,35,41],
[45,46,0,45,40,44,42,55,45,43],
[46,39,35,0,42,37,41,44,41,48],
[39,45,40,38,0,34,42,46,50,42],
[50,37,36,43,46,0,40,53,40,50],
[42,49,38,39,38,40,0,44,47,47],
[38,36,25,36,34,27,36,0,34,37],
[36,45,35,39,30,40,33,46,0,47],
[41,39,37,32,38,30,33,43,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,45,48,41,51,42,41,41,50],
[45,0,46,53,38,41,46,42,30,44],
[35,34,0,41,36,42,34,46,38,43],
[32,27,39,0,34,42,30,46,37,45],
[39,42,44,46,0,60,43,52,39,50],
[29,39,38,38,20,0,34,36,18,33],
[38,34,46,50,37,46,0,42,28,41],
[39,38,34,34,28,44,38,0,33,38],
[39,50,42,43,41,62,52,47,0,50],
[30,36,37,35,30,47,39,42,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,26,40,31,39,29,40,28,30],
[47,0,33,36,36,41,44,49,45,33],
[54,47,0,49,42,49,46,58,49,32],
[40,44,31,0,38,41,36,46,44,38],
[49,44,38,42,0,47,48,55,46,48],
[41,39,31,39,33,0,43,54,40,44],
[51,36,34,44,32,37,0,41,49,42],
[40,31,22,34,25,26,39,0,40,32],
[52,35,31,36,34,40,31,40,0,50],
[50,47,48,42,32,36,38,48,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,51,42,55,47,47,49,39,36],
[34,0,40,42,47,34,35,30,40,35],
[29,40,0,38,41,39,39,37,36,33],
[38,38,42,0,40,39,40,42,38,31],
[25,33,39,40,0,39,38,37,36,29],
[33,46,41,41,41,0,41,47,39,40],
[33,45,41,40,42,39,0,35,38,38],
[31,50,43,38,43,33,45,0,40,35],
[41,40,44,42,44,41,42,40,0,33],
[44,45,47,49,51,40,42,45,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,32,50,44,49,32,42,39,39],
[42,0,35,42,40,48,30,42,33,39],
[48,45,0,49,45,53,40,41,40,39],
[30,38,31,0,34,46,29,38,37,41],
[36,40,35,46,0,42,31,38,32,40],
[31,32,27,34,38,0,28,27,31,43],
[48,50,40,51,49,52,0,43,40,43],
[38,38,39,42,42,53,37,0,34,41],
[41,47,40,43,48,49,40,46,0,36],
[41,41,41,39,40,37,37,39,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,42,35,41,35,35,49,42,37],
[37,0,34,26,45,30,28,31,32,28],
[38,46,0,24,37,31,37,41,39,36],
[45,54,56,0,46,41,46,38,50,43],
[39,35,43,34,0,37,30,40,36,36],
[45,50,49,39,43,0,42,57,43,45],
[45,52,43,34,50,38,0,41,47,38],
[31,49,39,42,40,23,39,0,40,33],
[38,48,41,30,44,37,33,40,0,34],
[43,52,44,37,44,35,42,47,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,37,37,34,38,38,42,35,34],
[50,0,42,42,37,44,46,39,48,48],
[43,38,0,39,38,43,40,34,42,38],
[43,38,41,0,37,39,39,37,41,40],
[46,43,42,43,0,40,47,39,40,39],
[42,36,37,41,40,0,42,39,44,35],
[42,34,40,41,33,38,0,39,42,38],
[38,41,46,43,41,41,41,0,44,42],
[45,32,38,39,40,36,38,36,0,39],
[46,32,42,40,41,45,42,38,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,40,52,52,36,56,45,49,44],
[31,0,45,35,44,37,35,41,49,38],
[40,35,0,33,47,32,31,50,38,27],
[28,45,47,0,42,29,40,33,35,31],
[28,36,33,38,0,38,35,41,30,32],
[44,43,48,51,42,0,51,37,35,37],
[24,45,49,40,45,29,0,40,38,38],
[35,39,30,47,39,43,40,0,28,37],
[31,31,42,45,50,45,42,52,0,36],
[36,42,53,49,48,43,42,43,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,48,42,46,38,50,45,46,41],
[25,0,34,31,39,32,37,37,38,39],
[32,46,0,38,49,34,39,44,38,43],
[38,49,42,0,50,41,45,50,41,45],
[34,41,31,30,0,38,39,35,32,40],
[42,48,46,39,42,0,43,47,47,47],
[30,43,41,35,41,37,0,43,45,37],
[35,43,36,30,45,33,37,0,41,39],
[34,42,42,39,48,33,35,39,0,41],
[39,41,37,35,40,33,43,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,50,42,44,47,41,37,43,45],
[42,0,46,44,48,38,36,33,37,39],
[30,34,0,29,39,37,31,25,34,36],
[38,36,51,0,45,39,25,36,34,37],
[36,32,41,35,0,37,31,36,32,39],
[33,42,43,41,43,0,50,40,43,42],
[39,44,49,55,49,30,0,29,39,34],
[43,47,55,44,44,40,51,0,45,42],
[37,43,46,46,48,37,41,35,0,54],
[35,41,44,43,41,38,46,38,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,32,49,65,49,48,48,65,65],
[16,0,16,16,49,49,32,16,32,49],
[48,64,0,64,49,49,47,48,49,33],
[31,64,16,0,49,65,47,16,32,33],
[15,31,31,31,0,47,47,15,31,15],
[31,31,31,15,33,0,31,31,32,33],
[32,48,33,33,33,49,0,33,49,33],
[32,64,32,64,65,49,47,0,65,49],
[15,48,31,48,49,48,31,15,0,33],
[15,31,47,47,65,47,47,31,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,46,44,38,39,32,43,41,31],
[33,0,31,37,40,36,26,39,40,38],
[34,49,0,40,45,44,42,35,43,36],
[36,43,40,0,37,38,38,30,41,35],
[42,40,35,43,0,40,35,40,36,35],
[41,44,36,42,40,0,35,39,42,41],
[48,54,38,42,45,45,0,46,40,39],
[37,41,45,50,40,41,34,0,42,40],
[39,40,37,39,44,38,40,38,0,33],
[49,42,44,45,45,39,41,40,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,31,31,56,42,21,43,67,22],
[58,0,21,34,34,32,35,44,57,35],
[49,59,0,56,46,69,45,56,56,36],
[49,46,24,0,47,35,11,46,36,35],
[24,46,34,33,0,55,34,44,56,35],
[38,48,11,45,25,0,34,45,46,35],
[59,45,35,69,46,46,0,69,56,49],
[37,36,24,34,36,35,11,0,36,35],
[13,23,24,44,24,34,24,44,0,24],
[58,45,44,45,45,45,31,45,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,42,36,34,37,34,43,39,37],
[43,0,37,34,34,37,44,37,42,44],
[38,43,0,34,34,39,47,40,48,38],
[44,46,46,0,43,38,41,42,48,48],
[46,46,46,37,0,43,44,46,47,42],
[43,43,41,42,37,0,48,41,40,42],
[46,36,33,39,36,32,0,42,42,41],
[37,43,40,38,34,39,38,0,41,45],
[41,38,32,32,33,40,38,39,0,42],
[43,36,42,32,38,38,39,35,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,37,36,40,41,37,41,47,35],
[34,0,38,39,28,52,43,38,43,38],
[43,42,0,45,39,53,42,44,49,37],
[44,41,35,0,33,36,34,50,40,34],
[40,52,41,47,0,47,41,53,50,45],
[39,28,27,44,33,0,30,45,36,25],
[43,37,38,46,39,50,0,54,43,34],
[39,42,36,30,27,35,26,0,29,31],
[33,37,31,40,30,44,37,51,0,26],
[45,42,43,46,35,55,46,49,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,42,43,58,44,40,39,52,36],
[35,0,35,30,44,40,37,36,47,42],
[38,45,0,38,49,27,36,43,44,40],
[37,50,42,0,53,39,40,44,40,32],
[22,36,31,27,0,33,20,28,45,27],
[36,40,53,41,47,0,46,45,48,36],
[40,43,44,40,60,34,0,42,48,41],
[41,44,37,36,52,35,38,0,46,42],
[28,33,36,40,35,32,32,34,0,31],
[44,38,40,48,53,44,39,38,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,46,44,38,41,45,43,39,44],
[36,0,41,36,39,44,43,47,39,34],
[34,39,0,30,23,42,46,32,31,37],
[36,44,50,0,43,42,47,47,43,43],
[42,41,57,37,0,51,58,43,39,43],
[39,36,38,38,29,0,44,35,27,32],
[35,37,34,33,22,36,0,42,26,35],
[37,33,48,33,37,45,38,0,29,33],
[41,41,49,37,41,53,54,51,0,50],
[36,46,43,37,37,48,45,47,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,45,41,44,44,50,47,48,40],
[45,0,45,37,44,49,54,36,40,39],
[35,35,0,40,51,43,38,44,34,41],
[39,43,40,0,42,43,45,39,43,32],
[36,36,29,38,0,34,36,43,50,29],
[36,31,37,37,46,0,36,36,44,43],
[30,26,42,35,44,44,0,45,46,36],
[33,44,36,41,37,44,35,0,44,36],
[32,40,46,37,30,36,34,36,0,27],
[40,41,39,48,51,37,44,44,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,31,42,45,41,40,52,47,47],
[43,0,24,35,43,33,38,39,40,39],
[49,56,0,44,46,40,45,42,53,44],
[38,45,36,0,40,39,37,48,47,42],
[35,37,34,40,0,40,44,44,46,45],
[39,47,40,41,40,0,32,43,45,56],
[40,42,35,43,36,48,0,47,50,55],
[28,41,38,32,36,37,33,0,48,44],
[33,40,27,33,34,35,30,32,0,42],
[33,41,36,38,35,24,25,36,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,43,37,36,40,34,39,42,36],
[38,0,36,31,38,31,33,36,37,32],
[37,44,0,43,37,40,40,40,43,42],
[43,49,37,0,40,34,43,42,45,40],
[44,42,43,40,0,37,41,41,42,39],
[40,49,40,46,43,0,42,47,48,36],
[46,47,40,37,39,38,0,41,40,44],
[41,44,40,38,39,33,39,0,36,37],
[38,43,37,35,38,32,40,44,0,38],
[44,48,38,40,41,44,36,43,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,40,41,37,44,46,39,34],
[41,0,45,46,44,36,45,34,43,39],
[41,35,0,40,47,38,39,35,39,27],
[40,34,40,0,40,38,39,35,35,33],
[39,36,33,40,0,37,43,41,36,35],
[43,44,42,42,43,0,42,45,37,39],
[36,35,41,41,37,38,0,34,31,32],
[34,46,45,45,39,35,46,0,40,40],
[41,37,41,45,44,43,49,40,0,30],
[46,41,53,47,45,41,48,40,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,34,40,34,32,32,39,30,31],
[54,0,50,48,51,47,46,47,30,34],
[46,30,0,41,47,44,30,36,35,32],
[40,32,39,0,42,34,40,39,34,31],
[46,29,33,38,0,37,39,42,40,29],
[48,33,36,46,43,0,41,39,43,33],
[48,34,50,40,41,39,0,37,38,40],
[41,33,44,41,38,41,43,0,38,41],
[50,50,45,46,40,37,42,42,0,33],
[49,46,48,49,51,47,40,39,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,36,53,34,54,47,39,44,50],
[36,0,30,45,27,61,51,41,52,63],
[44,50,0,50,48,59,59,38,42,64],
[27,35,30,0,41,56,40,30,28,48],
[46,53,32,39,0,53,47,31,34,53],
[26,19,21,24,27,0,28,23,18,49],
[33,29,21,40,33,52,0,31,32,56],
[41,39,42,50,49,57,49,0,55,58],
[36,28,38,52,46,62,48,25,0,58],
[30,17,16,32,27,31,24,22,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,35,40,36,35,31,40,37,29],
[43,0,44,46,37,45,37,40,49,40],
[45,36,0,48,51,47,47,46,45,41],
[40,34,32,0,24,31,36,32,42,39],
[44,43,29,56,0,46,39,40,40,41],
[45,35,33,49,34,0,34,33,34,36],
[49,43,33,44,41,46,0,42,48,39],
[40,40,34,48,40,47,38,0,40,40],
[43,31,35,38,40,46,32,40,0,42],
[51,40,39,41,39,44,41,40,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,42,41,39,41,35,42,45,43],
[33,0,29,39,26,31,25,35,35,37],
[38,51,0,40,33,44,36,39,38,42],
[39,41,40,0,34,44,27,39,36,37],
[41,54,47,46,0,39,32,49,43,43],
[39,49,36,36,41,0,32,41,48,39],
[45,55,44,53,48,48,0,46,37,51],
[38,45,41,41,31,39,34,0,39,42],
[35,45,42,44,37,32,43,41,0,39],
[37,43,38,43,37,41,29,38,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,45,39,51,41,43,35,39,43],
[35,0,41,41,41,39,41,43,36,40],
[35,39,0,31,41,39,35,34,42,41],
[41,39,49,0,46,41,36,46,42,46],
[29,39,39,34,0,38,36,32,30,36],
[39,41,41,39,42,0,36,37,30,34],
[37,39,45,44,44,44,0,39,32,38],
[45,37,46,34,48,43,41,0,39,43],
[41,44,38,38,50,50,48,41,0,51],
[37,40,39,34,44,46,42,37,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,37,36,42,40,50,46,40,40],
[39,0,35,38,46,30,47,31,37,42],
[43,45,0,50,46,39,54,46,42,47],
[44,42,30,0,47,37,51,23,26,30],
[38,34,34,33,0,28,42,32,29,32],
[40,50,41,43,52,0,53,35,42,45],
[30,33,26,29,38,27,0,22,33,35],
[34,49,34,57,48,45,58,0,46,50],
[40,43,38,54,51,38,47,34,0,39],
[40,38,33,50,48,35,45,30,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,53,53,53,53,27,53,53,26],
[53,0,53,80,53,80,27,80,80,53],
[27,27,0,27,54,27,27,54,54,0],
[27,0,53,0,27,54,0,27,54,0],
[27,27,26,53,0,27,27,80,54,0],
[27,0,53,26,53,0,0,53,27,0],
[53,53,53,80,53,80,0,80,80,26],
[27,0,26,53,0,27,0,0,27,0],
[27,0,26,26,26,53,0,53,0,26],
[54,27,80,80,80,80,54,80,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,43,49,37,34,35,48,39,48],
[45,0,50,52,41,49,44,55,40,42],
[37,30,0,34,32,34,29,38,24,34],
[31,28,46,0,26,34,40,34,38,39],
[43,39,48,54,0,43,40,52,46,41],
[46,31,46,46,37,0,31,42,38,42],
[45,36,51,40,40,49,0,50,49,48],
[32,25,42,46,28,38,30,0,37,39],
[41,40,56,42,34,42,31,43,0,51],
[32,38,46,41,39,38,32,41,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,48,48,16,16,32,16,32,48],
[64,0,64,64,32,48,64,48,32,64],
[32,16,0,32,16,16,32,32,16,48],
[32,16,48,0,32,16,48,16,32,48],
[64,48,64,48,0,32,48,48,32,64],
[64,32,64,64,48,0,64,48,64,80],
[48,16,48,32,32,16,0,32,32,48],
[64,32,48,64,32,32,48,0,64,80],
[48,48,64,48,48,16,48,16,0,64],
[32,16,32,32,16,0,32,0,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,43,53,38,43,45,43,36,44],
[36,0,38,41,33,39,41,39,38,44],
[37,42,0,51,43,45,42,45,39,51],
[27,39,29,0,34,39,39,36,38,40],
[42,47,37,46,0,36,43,41,31,45],
[37,41,35,41,44,0,40,40,36,42],
[35,39,38,41,37,40,0,40,39,45],
[37,41,35,44,39,40,40,0,40,42],
[44,42,41,42,49,44,41,40,0,48],
[36,36,29,40,35,38,35,38,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,32,29,31,47,37,35,38,38],
[42,0,38,43,39,46,44,39,40,39],
[48,42,0,45,44,53,47,49,41,39],
[51,37,35,0,38,47,40,45,44,43],
[49,41,36,42,0,48,49,43,36,36],
[33,34,27,33,32,0,28,33,21,32],
[43,36,33,40,31,52,0,41,35,37],
[45,41,31,35,37,47,39,0,41,35],
[42,40,39,36,44,59,45,39,0,45],
[42,41,41,37,44,48,43,45,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,51,45,28,34,44,42,38,37],
[29,0,44,37,28,28,40,32,25,35],
[29,36,0,39,28,27,37,36,41,30],
[35,43,41,0,30,29,43,40,40,32],
[52,52,52,50,0,34,47,50,45,39],
[46,52,53,51,46,0,46,46,39,45],
[36,40,43,37,33,34,0,37,34,34],
[38,48,44,40,30,34,43,0,40,39],
[42,55,39,40,35,41,46,40,0,35],
[43,45,50,48,41,35,46,41,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,52,42,49,39,49,56,46,49],
[27,0,40,39,39,39,34,43,37,39],
[28,40,0,51,42,35,35,43,40,41],
[38,41,29,0,39,41,42,50,49,46],
[31,41,38,41,0,36,34,40,39,30],
[41,41,45,39,44,0,36,55,40,43],
[31,46,45,38,46,44,0,51,43,41],
[24,37,37,30,40,25,29,0,43,31],
[34,43,40,31,41,40,37,37,0,37],
[31,41,39,34,50,37,39,49,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,50,51,51,53,40,46,61,48],
[40,0,42,50,46,52,33,36,65,51],
[30,38,0,48,42,44,45,36,62,43],
[29,30,32,0,42,45,32,36,58,47],
[29,34,38,38,0,30,28,36,63,34],
[27,28,36,35,50,0,26,33,61,41],
[40,47,35,48,52,54,0,45,59,45],
[34,44,44,44,44,47,35,0,53,47],
[19,15,18,22,17,19,21,27,0,31],
[32,29,37,33,46,39,35,33,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,37,31,37,35,36,36,43,37],
[41,0,39,38,32,40,36,39,42,42],
[43,41,0,37,40,42,42,34,41,37],
[49,42,43,0,40,45,39,42,43,45],
[43,48,40,40,0,42,41,40,41,44],
[45,40,38,35,38,0,37,35,43,41],
[44,44,38,41,39,43,0,36,44,42],
[44,41,46,38,40,45,44,0,43,47],
[37,38,39,37,39,37,36,37,0,45],
[43,38,43,35,36,39,38,33,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,43,44,48,39,41,52,43,43],
[34,0,45,44,39,39,42,49,40,43],
[37,35,0,36,43,36,33,49,43,39],
[36,36,44,0,41,44,40,44,42,50],
[32,41,37,39,0,38,31,42,35,36],
[41,41,44,36,42,0,43,43,43,47],
[39,38,47,40,49,37,0,49,35,45],
[28,31,31,36,38,37,31,0,34,37],
[37,40,37,38,45,37,45,46,0,39],
[37,37,41,30,44,33,35,43,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,39,33,36,31,42,40,47,42],
[40,0,36,29,39,27,41,32,42,34],
[41,44,0,35,33,32,35,40,37,39],
[47,51,45,0,40,44,49,38,53,44],
[44,41,47,40,0,38,45,43,43,34],
[49,53,48,36,42,0,48,51,45,41],
[38,39,45,31,35,32,0,31,44,44],
[40,48,40,42,37,29,49,0,50,45],
[33,38,43,27,37,35,36,30,0,34],
[38,46,41,36,46,39,36,35,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,42,49,43,43,39,47,33,38],
[48,0,45,47,49,49,46,39,43,38],
[38,35,0,40,41,40,25,34,41,36],
[31,33,40,0,44,52,40,39,29,33],
[37,31,39,36,0,41,31,38,35,34],
[37,31,40,28,39,0,35,31,31,28],
[41,34,55,40,49,45,0,41,33,38],
[33,41,46,41,42,49,39,0,43,36],
[47,37,39,51,45,49,47,37,0,46],
[42,42,44,47,46,52,42,44,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,39,39,44,48,40,42,38,45],
[22,0,28,41,38,49,30,38,26,38],
[41,52,0,36,43,47,41,38,34,44],
[41,39,44,0,43,55,42,30,45,46],
[36,42,37,37,0,47,33,34,32,42],
[32,31,33,25,33,0,23,29,35,39],
[40,50,39,38,47,57,0,34,46,51],
[38,42,42,50,46,51,46,0,38,51],
[42,54,46,35,48,45,34,42,0,44],
[35,42,36,34,38,41,29,29,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,41,38,33,39,39,38,43,37],
[50,0,50,45,38,42,42,37,48,38],
[39,30,0,37,36,43,39,36,47,41],
[42,35,43,0,32,44,39,40,47,39],
[47,42,44,48,0,42,40,43,49,44],
[41,38,37,36,38,0,42,35,43,41],
[41,38,41,41,40,38,0,42,44,39],
[42,43,44,40,37,45,38,0,53,37],
[37,32,33,33,31,37,36,27,0,30],
[43,42,39,41,36,39,41,43,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,54,38,32,41,25,33,33,35],
[29,0,49,44,30,43,28,33,33,36],
[26,31,0,33,29,28,26,31,26,32],
[42,36,47,0,39,46,38,43,46,45],
[48,50,51,41,0,35,42,35,34,48],
[39,37,52,34,45,0,40,38,32,44],
[55,52,54,42,38,40,0,38,44,40],
[47,47,49,37,45,42,42,0,37,49],
[47,47,54,34,46,48,36,43,0,45],
[45,44,48,35,32,36,40,31,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,48,53,45,48,44,31,28,38],
[39,0,33,55,37,40,43,30,36,39],
[32,47,0,56,47,48,48,42,41,36],
[27,25,24,0,16,29,34,25,18,25],
[35,43,33,64,0,45,43,34,40,42],
[32,40,32,51,35,0,40,22,26,31],
[36,37,32,46,37,40,0,25,29,28],
[49,50,38,55,46,58,55,0,49,34],
[52,44,39,62,40,54,51,31,0,52],
[42,41,44,55,38,49,52,46,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,39,31,51,39,59,55,46,47],
[37,0,38,36,56,54,52,45,46,48],
[41,42,0,33,55,46,51,47,49,64],
[49,44,47,0,55,56,54,61,36,49],
[29,24,25,25,0,30,47,31,37,37],
[41,26,34,24,50,0,41,40,46,35],
[21,28,29,26,33,39,0,24,23,29],
[25,35,33,19,49,40,56,0,34,22],
[34,34,31,44,43,34,57,46,0,34],
[33,32,16,31,43,45,51,58,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,40,29,30,39,38,43,29,27],
[41,0,37,31,41,30,44,45,35,38],
[40,43,0,32,37,35,37,46,35,33],
[51,49,48,0,47,48,49,57,41,40],
[50,39,43,33,0,46,40,52,37,40],
[41,50,45,32,34,0,44,51,33,32],
[42,36,43,31,40,36,0,51,34,29],
[37,35,34,23,28,29,29,0,23,28],
[51,45,45,39,43,47,46,57,0,38],
[53,42,47,40,40,48,51,52,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,57,52,43,41,38,39,38,42],
[29,0,51,40,40,43,45,41,35,43],
[23,29,0,40,37,32,26,34,31,29],
[28,40,40,0,36,44,38,46,40,44],
[37,40,43,44,0,43,39,42,42,45],
[39,37,48,36,37,0,42,41,38,43],
[42,35,54,42,41,38,0,49,39,46],
[41,39,46,34,38,39,31,0,37,51],
[42,45,49,40,38,42,41,43,0,47],
[38,37,51,36,35,37,34,29,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,47,39,43,42,44,45,41,37],
[38,0,53,50,39,46,46,42,40,38],
[33,27,0,38,35,34,45,39,35,31],
[41,30,42,0,43,39,45,41,36,38],
[37,41,45,37,0,44,43,36,36,36],
[38,34,46,41,36,0,39,35,40,32],
[36,34,35,35,37,41,0,36,33,31],
[35,38,41,39,44,45,44,0,34,36],
[39,40,45,44,44,40,47,46,0,44],
[43,42,49,42,44,48,49,44,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,39,38,43,39,40,35,41,35],
[36,0,35,33,42,33,24,27,25,36],
[41,45,0,40,50,38,34,29,38,35],
[42,47,40,0,41,47,40,42,46,41],
[37,38,30,39,0,33,35,25,33,38],
[41,47,42,33,47,0,36,33,41,40],
[40,56,46,40,45,44,0,30,40,44],
[45,53,51,38,55,47,50,0,52,43],
[39,55,42,34,47,39,40,28,0,37],
[45,44,45,39,42,40,36,37,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,46,56,52,39,50,56,47,38],
[40,0,34,44,46,34,40,47,41,45],
[34,46,0,40,52,29,36,38,39,21],
[24,36,40,0,50,34,42,53,38,44],
[28,34,28,30,0,31,33,49,23,31],
[41,46,51,46,49,0,42,39,32,38],
[30,40,44,38,47,38,0,54,42,38],
[24,33,42,27,31,41,26,0,28,22],
[33,39,41,42,57,48,38,52,0,48],
[42,35,59,36,49,42,42,58,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,36,39,44,54,46,41,43,46],
[36,0,32,29,38,40,40,35,39,31],
[44,48,0,36,44,50,51,37,44,42],
[41,51,44,0,47,44,45,39,46,41],
[36,42,36,33,0,41,43,32,41,36],
[26,40,30,36,39,0,38,32,38,33],
[34,40,29,35,37,42,0,27,43,32],
[39,45,43,41,48,48,53,0,43,38],
[37,41,36,34,39,42,37,37,0,36],
[34,49,38,39,44,47,48,42,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,34,70,58,46,35,45,33,47],
[57,0,46,68,68,46,45,57,33,47],
[46,34,0,69,58,24,34,69,34,47],
[10,12,11,0,22,0,11,21,21,35],
[22,12,22,58,0,23,23,45,33,47],
[34,34,56,80,57,0,33,57,33,57],
[45,35,46,69,57,47,0,68,56,70],
[35,23,11,59,35,23,12,0,21,24],
[47,47,46,59,47,47,24,59,0,59],
[33,33,33,45,33,23,10,56,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,39,35,38,38,40,43,36,36],
[42,0,42,44,41,42,50,46,40,36],
[41,38,0,39,38,45,43,42,41,51],
[45,36,41,0,41,40,51,40,40,35],
[42,39,42,39,0,46,46,41,30,40],
[42,38,35,40,34,0,47,33,46,34],
[40,30,37,29,34,33,0,35,29,36],
[37,34,38,40,39,47,45,0,37,39],
[44,40,39,40,50,34,51,43,0,38],
[44,44,29,45,40,46,44,41,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,80,40,40,80,80,80,40,40],
[40,0,40,40,80,40,80,40,40,40],
[0,40,0,40,40,40,40,40,40,0],
[40,40,40,0,80,80,80,80,40,0],
[40,0,40,0,0,40,80,40,0,0],
[0,40,40,0,40,0,40,40,0,0],
[0,0,40,0,0,40,0,40,0,0],
[0,40,40,0,40,40,40,0,0,0],
[40,40,40,40,80,80,80,80,0,40],
[40,40,80,80,80,80,80,80,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,27,14,55,40,27,36,28,42],
[37,0,20,11,32,38,25,27,19,32],
[53,60,0,41,61,38,39,54,41,53],
[66,69,39,0,53,53,39,50,48,72],
[25,48,19,27,0,39,45,29,14,38],
[40,42,42,27,41,0,40,29,14,34],
[53,55,41,41,35,40,0,29,41,45],
[44,53,26,30,51,51,51,0,40,66],
[52,61,39,32,66,66,39,40,0,46],
[38,48,27,8,42,46,35,14,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,33,43,43,41,43,40,51,41],
[42,0,40,53,49,47,39,39,48,45],
[47,40,0,49,48,46,48,46,42,41],
[37,27,31,0,29,35,35,29,38,27],
[37,31,32,51,0,38,39,44,41,26],
[39,33,34,45,42,0,42,41,41,41],
[37,41,32,45,41,38,0,38,38,36],
[40,41,34,51,36,39,42,0,43,42],
[29,32,38,42,39,39,42,37,0,30],
[39,35,39,53,54,39,44,38,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,22,54,26,43,36,34,39,44],
[38,0,27,40,43,50,32,32,44,44],
[58,53,0,54,56,53,37,56,38,39],
[26,40,26,0,32,48,39,31,38,33],
[54,37,24,48,0,49,32,36,42,41],
[37,30,27,32,31,0,25,39,30,21],
[44,48,43,41,48,55,0,55,50,31],
[46,48,24,49,44,41,25,0,39,33],
[41,36,42,42,38,50,30,41,0,31],
[36,36,41,47,39,59,49,47,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,39,38,36,45,34,38,35,39],
[35,0,38,38,41,40,30,35,29,36],
[41,42,0,41,45,50,37,35,40,35],
[42,42,39,0,43,51,41,40,31,37],
[44,39,35,37,0,45,37,35,36,32],
[35,40,30,29,35,0,38,31,31,32],
[46,50,43,39,43,42,0,37,36,37],
[42,45,45,40,45,49,43,0,39,44],
[45,51,40,49,44,49,44,41,0,41],
[41,44,45,43,48,48,43,36,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,44,44,40,40,38,42,45,41],
[42,0,40,47,35,37,48,43,46,45],
[36,40,0,45,34,38,45,41,43,38],
[36,33,35,0,28,30,37,36,35,33],
[40,45,46,52,0,43,42,43,48,41],
[40,43,42,50,37,0,48,44,54,47],
[42,32,35,43,38,32,0,38,40,43],
[38,37,39,44,37,36,42,0,40,41],
[35,34,37,45,32,26,40,40,0,37],
[39,35,42,47,39,33,37,39,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,48,41,46,43,50,48,31,39],
[41,0,45,48,48,36,40,40,40,39],
[32,35,0,44,42,35,40,44,36,38],
[39,32,36,0,43,38,38,43,41,42],
[34,32,38,37,0,32,41,41,33,33],
[37,44,45,42,48,0,41,36,41,38],
[30,40,40,42,39,39,0,29,36,42],
[32,40,36,37,39,44,51,0,38,39],
[49,40,44,39,47,39,44,42,0,43],
[41,41,42,38,47,42,38,41,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,48,48,43,49,48,33,54,42],
[34,0,38,37,44,37,30,31,42,34],
[32,42,0,49,41,40,37,32,49,37],
[32,43,31,0,36,28,40,32,33,25],
[37,36,39,44,0,34,35,32,42,38],
[31,43,40,52,46,0,36,42,44,39],
[32,50,43,40,45,44,0,37,40,44],
[47,49,48,48,48,38,43,0,50,41],
[26,38,31,47,38,36,40,30,0,35],
[38,46,43,55,42,41,36,39,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,33,34,38,32,37,44,31,36],
[33,0,37,32,35,36,27,44,30,43],
[47,43,0,43,46,47,42,47,38,44],
[46,48,37,0,53,45,44,51,45,48],
[42,45,34,27,0,43,37,47,38,44],
[48,44,33,35,37,0,39,43,31,42],
[43,53,38,36,43,41,0,53,40,51],
[36,36,33,29,33,37,27,0,36,32],
[49,50,42,35,42,49,40,44,0,51],
[44,37,36,32,36,38,29,48,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,38,41,30,44,30,39,33,40],
[46,0,39,43,40,48,41,44,44,45],
[42,41,0,41,41,48,42,44,40,46],
[39,37,39,0,31,38,35,39,33,35],
[50,40,39,49,0,42,38,41,47,45],
[36,32,32,42,38,0,33,37,32,39],
[50,39,38,45,42,47,0,42,40,44],
[41,36,36,41,39,43,38,0,33,39],
[47,36,40,47,33,48,40,47,0,43],
[40,35,34,45,35,41,36,41,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,46,41,44,45,41,41,43,45],
[41,0,45,42,42,40,41,44,44,45],
[34,35,0,32,31,37,28,31,33,36],
[39,38,48,0,41,43,41,43,39,45],
[36,38,49,39,0,42,38,42,37,39],
[35,40,43,37,38,0,35,42,40,39],
[39,39,52,39,42,45,0,43,36,42],
[39,36,49,37,38,38,37,0,36,42],
[37,36,47,41,43,40,44,44,0,41],
[35,35,44,35,41,41,38,38,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,44,58,60,57,50,54,49,57],
[44,0,58,58,50,45,38,58,40,50],
[36,22,0,42,42,33,31,35,41,38],
[22,22,38,0,36,33,27,44,36,38],
[20,30,38,44,0,42,31,42,39,39],
[23,35,47,47,38,0,22,32,33,29],
[30,42,49,53,49,58,0,55,51,53],
[26,22,45,36,38,48,25,0,34,24],
[31,40,39,44,41,47,29,46,0,43],
[23,30,42,42,41,51,27,56,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,41,35,39,32,27,43,49,34],
[42,0,45,43,43,46,40,43,39,33],
[39,35,0,46,47,41,46,42,42,48],
[45,37,34,0,42,42,41,45,43,30],
[41,37,33,38,0,32,33,35,26,29],
[48,34,39,38,48,0,45,43,35,34],
[53,40,34,39,47,35,0,44,37,35],
[37,37,38,35,45,37,36,0,32,33],
[31,41,38,37,54,45,43,48,0,38],
[46,47,32,50,51,46,45,47,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,47,37,35,38,36,45,38,39],
[34,0,37,32,35,33,42,35,29,41],
[33,43,0,39,36,38,34,40,38,43],
[43,48,41,0,34,39,40,41,42,45],
[45,45,44,46,0,46,41,42,37,49],
[42,47,42,41,34,0,37,47,39,46],
[44,38,46,40,39,43,0,46,43,40],
[35,45,40,39,38,33,34,0,34,40],
[42,51,42,38,43,41,37,46,0,47],
[41,39,37,35,31,34,40,40,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,36,46,46,43,52,40,45,39],
[47,0,42,36,31,41,54,59,46,38],
[44,38,0,36,43,48,42,48,40,42],
[34,44,44,0,38,45,38,49,41,48],
[34,49,37,42,0,48,42,49,32,48],
[37,39,32,35,32,0,37,40,44,28],
[28,26,38,42,38,43,0,47,42,31],
[40,21,32,31,31,40,33,0,20,39],
[35,34,40,39,48,36,38,60,0,39],
[41,42,38,32,32,52,49,41,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,41,45,43,34,46,36,41,41],
[34,0,48,42,40,34,39,33,41,34],
[39,32,0,43,33,34,37,34,36,41],
[35,38,37,0,39,32,34,41,32,33],
[37,40,47,41,0,37,39,38,43,44],
[46,46,46,48,43,0,43,45,41,37],
[34,41,43,46,41,37,0,35,39,39],
[44,47,46,39,42,35,45,0,40,41],
[39,39,44,48,37,39,41,40,0,38],
[39,46,39,47,36,43,41,39,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,45,42,38,52,38,36,45,43],
[46,0,45,49,37,48,41,39,48,42],
[35,35,0,39,30,46,29,32,42,33],
[38,31,41,0,37,47,30,30,40,38],
[42,43,50,43,0,55,33,40,52,43],
[28,32,34,33,25,0,26,30,33,38],
[42,39,51,50,47,54,0,39,52,45],
[44,41,48,50,40,50,41,0,51,49],
[35,32,38,40,28,47,28,29,0,35],
[37,38,47,42,37,42,35,31,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,35,39,38,32,36,38,42,31],
[46,0,42,39,46,39,41,39,38,43],
[45,38,0,42,42,43,39,45,41,38],
[41,41,38,0,37,34,38,29,45,38],
[42,34,38,43,0,43,45,40,39,43],
[48,41,37,46,37,0,41,35,45,46],
[44,39,41,42,35,39,0,39,41,40],
[42,41,35,51,40,45,41,0,53,41],
[38,42,39,35,41,35,39,27,0,35],
[49,37,42,42,37,34,40,39,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,53,33,33,43,43,32,35,35],
[28,0,35,15,23,21,16,20,28,26],
[27,45,0,25,33,40,37,29,27,29],
[47,65,55,0,35,45,35,44,41,31],
[47,57,47,45,0,42,46,36,39,27],
[37,59,40,35,38,0,30,35,36,32],
[37,64,43,45,34,50,0,35,44,25],
[48,60,51,36,44,45,45,0,38,46],
[45,52,53,39,41,44,36,42,0,37],
[45,54,51,49,53,48,55,34,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,42,44,39,36,47,40,50,46],
[41,0,38,38,45,48,54,49,56,44],
[38,42,0,44,37,48,52,56,46,46],
[36,42,36,0,37,34,38,48,39,52],
[41,35,43,43,0,41,42,59,48,47],
[44,32,32,46,39,0,45,41,47,44],
[33,26,28,42,38,35,0,36,35,43],
[40,31,24,32,21,39,44,0,38,44],
[30,24,34,41,32,33,45,42,0,43],
[34,36,34,28,33,36,37,36,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,45,38,53,42,39,50,43,44],
[45,0,47,33,43,40,41,46,28,33],
[35,33,0,31,38,33,23,42,41,35],
[42,47,49,0,41,46,42,50,35,38],
[27,37,42,39,0,34,29,43,33,25],
[38,40,47,34,46,0,28,44,36,30],
[41,39,57,38,51,52,0,47,37,46],
[30,34,38,30,37,36,33,0,33,38],
[37,52,39,45,47,44,43,47,0,38],
[36,47,45,42,55,50,34,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,50,43,38,46,43,43,47,39],
[34,0,42,46,45,33,37,42,47,37],
[30,38,0,36,29,27,31,35,35,35],
[37,34,44,0,42,36,36,38,27,33],
[42,35,51,38,0,44,43,44,36,32],
[34,47,53,44,36,0,47,44,51,48],
[37,43,49,44,37,33,0,55,42,38],
[37,38,45,42,36,36,25,0,43,33],
[33,33,45,53,44,29,38,37,0,38],
[41,43,45,47,48,32,42,47,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,40,33,35,35,40,34,41,37],
[34,0,29,44,33,35,35,37,37,33],
[40,51,0,45,32,44,42,45,38,43],
[47,36,35,0,30,35,37,39,36,35],
[45,47,48,50,0,44,45,46,44,40],
[45,45,36,45,36,0,38,39,42,35],
[40,45,38,43,35,42,0,43,51,43],
[46,43,35,41,34,41,37,0,39,39],
[39,43,42,44,36,38,29,41,0,37],
[43,47,37,45,40,45,37,41,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,29,36,33,31,39,33,29],
[41,0,43,31,47,34,42,36,41,34],
[41,37,0,34,41,38,41,36,41,39],
[51,49,46,0,50,39,42,45,42,41],
[44,33,39,30,0,31,39,32,41,31],
[47,46,42,41,49,0,44,44,42,36],
[49,38,39,38,41,36,0,37,38,34],
[41,44,44,35,48,36,43,0,42,35],
[47,39,39,38,39,38,42,38,0,36],
[51,46,41,39,49,44,46,45,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,33,28,28,31,38,32,41,41],
[37,0,32,31,33,38,32,32,43,33],
[47,48,0,41,38,40,49,49,47,45],
[52,49,39,0,42,43,48,50,54,49],
[52,47,42,38,0,37,43,47,43,39],
[49,42,40,37,43,0,46,44,45,39],
[42,48,31,32,37,34,0,34,44,41],
[48,48,31,30,33,36,46,0,39,41],
[39,37,33,26,37,35,36,41,0,36],
[39,47,35,31,41,41,39,39,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,60,60,60,20,60,39,60,41],
[20,0,80,60,20,40,20,59,21,61],
[20,0,0,21,0,20,20,0,0,21],
[20,20,59,0,20,40,20,59,0,20],
[20,60,80,60,0,40,61,39,60,61],
[60,40,60,40,40,0,60,19,40,41],
[20,60,60,60,19,20,0,39,40,41],
[41,21,80,21,41,61,41,0,21,41],
[20,59,80,80,20,40,40,59,0,61],
[39,19,59,60,19,39,39,39,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,38,35,45,46,43,48,48,44],
[36,0,37,40,41,49,45,48,46,41],
[42,43,0,36,41,38,41,41,44,35],
[45,40,44,0,52,53,43,45,51,50],
[35,39,39,28,0,36,45,40,41,38],
[34,31,42,27,44,0,42,36,43,42],
[37,35,39,37,35,38,0,28,37,34],
[32,32,39,35,40,44,52,0,47,41],
[32,34,36,29,39,37,43,33,0,34],
[36,39,45,30,42,38,46,39,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,41,35,28,35,37,40,34,37],
[49,0,41,47,43,38,43,48,51,46],
[39,39,0,40,38,36,36,45,43,45],
[45,33,40,0,34,39,38,51,40,39],
[52,37,42,46,0,44,39,44,50,44],
[45,42,44,41,36,0,40,38,44,47],
[43,37,44,42,41,40,0,46,44,43],
[40,32,35,29,36,42,34,0,43,36],
[46,29,37,40,30,36,36,37,0,38],
[43,34,35,41,36,33,37,44,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,43,44,43,45,41,35,44,36],
[45,0,45,44,48,40,43,38,47,35],
[37,35,0,45,42,41,37,39,45,40],
[36,36,35,0,42,40,31,34,34,32],
[37,32,38,38,0,37,33,33,38,35],
[35,40,39,40,43,0,37,33,44,36],
[39,37,43,49,47,43,0,47,44,40],
[45,42,41,46,47,47,33,0,44,37],
[36,33,35,46,42,36,36,36,0,38],
[44,45,40,48,45,44,40,43,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,39,45,34,37,45,40,46,39],
[39,0,47,40,41,42,46,38,46,42],
[41,33,0,39,31,40,43,41,49,41],
[35,40,41,0,37,40,39,33,43,42],
[46,39,49,43,0,43,46,37,45,50],
[43,38,40,40,37,0,43,36,45,42],
[35,34,37,41,34,37,0,37,42,41],
[40,42,39,47,43,44,43,0,48,47],
[34,34,31,37,35,35,38,32,0,37],
[41,38,39,38,30,38,39,33,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,44,39,44,37,31,40,46,36],
[39,0,47,43,46,44,40,38,47,39],
[36,33,0,38,38,42,39,37,48,34],
[41,37,42,0,38,40,37,37,45,38],
[36,34,42,42,0,42,31,40,46,31],
[43,36,38,40,38,0,36,40,47,34],
[49,40,41,43,49,44,0,42,49,41],
[40,42,43,43,40,40,38,0,50,42],
[34,33,32,35,34,33,31,30,0,28],
[44,41,46,42,49,46,39,38,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,30,40,32,38,35,47,30,35],
[38,0,39,37,34,43,41,42,41,36],
[50,41,0,42,36,47,45,57,48,45],
[40,43,38,0,34,33,41,40,47,47],
[48,46,44,46,0,52,48,51,48,40],
[42,37,33,47,28,0,43,34,38,38],
[45,39,35,39,32,37,0,48,39,40],
[33,38,23,40,29,46,32,0,37,43],
[50,39,32,33,32,42,41,43,0,45],
[45,44,35,33,40,42,40,37,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,42,38,40,43,32,32,41,23],
[51,0,46,45,51,43,46,40,44,42],
[38,34,0,43,51,45,24,29,42,29],
[42,35,37,0,43,46,38,32,44,40],
[40,29,29,37,0,45,26,26,38,32],
[37,37,35,34,35,0,36,18,36,32],
[48,34,56,42,54,44,0,32,45,43],
[48,40,51,48,54,62,48,0,54,55],
[39,36,38,36,42,44,35,26,0,37],
[57,38,51,40,48,48,37,25,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,48,46,41,45,44,39,46,43],
[35,0,38,47,40,45,47,38,48,41],
[32,42,0,42,39,45,48,43,44,44],
[34,33,38,0,31,40,38,27,38,26],
[39,40,41,49,0,44,33,29,48,39],
[35,35,35,40,36,0,42,25,38,32],
[36,33,32,42,47,38,0,27,36,36],
[41,42,37,53,51,55,53,0,52,41],
[34,32,36,42,32,42,44,28,0,39],
[37,39,36,54,41,48,44,39,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,34,46,51,58,51,45,52,45],
[21,0,27,28,33,47,34,20,48,27],
[46,53,0,40,45,59,38,53,53,46],
[34,52,40,0,52,52,41,45,39,45],
[29,47,35,28,0,33,49,33,53,34],
[22,33,21,28,47,0,35,28,49,35],
[29,46,42,39,31,45,0,39,40,46],
[35,60,27,35,47,52,41,0,67,42],
[28,32,27,41,27,31,40,13,0,28],
[35,53,34,35,46,45,34,38,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,43,39,49,49,41,46,42,48],
[40,0,37,40,40,39,39,37,36,45],
[37,43,0,45,40,40,37,47,45,40],
[41,40,35,0,39,39,42,47,43,43],
[31,40,40,41,0,38,42,40,44,44],
[31,41,40,41,42,0,39,44,34,39],
[39,41,43,38,38,41,0,44,34,43],
[34,43,33,33,40,36,36,0,34,44],
[38,44,35,37,36,46,46,46,0,39],
[32,35,40,37,36,41,37,36,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,32,35,44,36,39,52,36,37],
[43,0,36,44,54,35,39,52,36,36],
[48,44,0,45,55,33,40,44,30,31],
[45,36,35,0,48,28,43,44,38,32],
[36,26,25,32,0,26,38,39,22,20],
[44,45,47,52,54,0,48,55,35,42],
[41,41,40,37,42,32,0,50,29,33],
[28,28,36,36,41,25,30,0,28,24],
[44,44,50,42,58,45,51,52,0,29],
[43,44,49,48,60,38,47,56,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,36,45,43,34,42,48,44,40],
[40,0,37,47,27,38,39,45,40,42],
[44,43,0,53,34,46,44,55,35,39],
[35,33,27,0,22,29,38,36,36,39],
[37,53,46,58,0,49,56,55,47,49],
[46,42,34,51,31,0,48,47,50,38],
[38,41,36,42,24,32,0,41,34,28],
[32,35,25,44,25,33,39,0,35,35],
[36,40,45,44,33,30,46,45,0,43],
[40,38,41,41,31,42,52,45,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,43,40,48,39,36,35,43,30],
[43,0,39,46,45,44,44,34,35,36],
[37,41,0,47,45,40,40,34,39,42],
[40,34,33,0,51,42,42,33,32,39],
[32,35,35,29,0,28,28,39,31,35],
[41,36,40,38,52,0,38,37,39,40],
[44,36,40,38,52,42,0,36,36,42],
[45,46,46,47,41,43,44,0,39,45],
[37,45,41,48,49,41,44,41,0,47],
[50,44,38,41,45,40,38,35,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,43,35,37,39,37,42,44,38],
[44,0,42,41,42,41,40,44,44,47],
[37,38,0,38,39,45,39,28,33,38],
[45,39,42,0,43,51,39,43,42,43],
[43,38,41,37,0,46,38,39,33,37],
[41,39,35,29,34,0,31,36,35,31],
[43,40,41,41,42,49,0,37,38,34],
[38,36,52,37,41,44,43,0,41,42],
[36,36,47,38,47,45,42,39,0,48],
[42,33,42,37,43,49,46,38,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,49,44,44,33,40,44,44,40],
[40,0,54,47,39,39,52,42,36,32],
[31,26,0,37,31,30,36,29,35,36],
[36,33,43,0,41,38,43,42,40,33],
[36,41,49,39,0,43,40,35,34,25],
[47,41,50,42,37,0,47,48,40,36],
[40,28,44,37,40,33,0,40,39,41],
[36,38,51,38,45,32,40,0,34,39],
[36,44,45,40,46,40,41,46,0,45],
[40,48,44,47,55,44,39,41,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,40,55,63,38,56,46,58,63],
[35,0,35,35,48,35,42,40,49,51],
[40,45,0,40,54,40,45,61,39,54],
[25,45,40,0,54,25,56,54,41,54],
[17,32,26,26,0,17,29,36,32,50],
[42,45,40,55,63,0,56,46,41,46],
[24,38,35,24,51,24,0,39,57,58],
[34,40,19,26,44,34,41,0,49,42],
[22,31,41,39,48,39,23,31,0,41],
[17,29,26,26,30,34,22,38,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,36,42,42,35,34,33,47,38],
[42,0,40,42,38,50,50,36,47,44],
[44,40,0,37,40,43,40,39,52,38],
[38,38,43,0,38,48,37,33,50,39],
[38,42,40,42,0,53,40,41,47,42],
[45,30,37,32,27,0,32,33,41,41],
[46,30,40,43,40,48,0,37,45,43],
[47,44,41,47,39,47,43,0,54,43],
[33,33,28,30,33,39,35,26,0,38],
[42,36,42,41,38,39,37,37,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,41,42,39,40,37,41,44,32],
[42,0,47,38,42,41,40,28,43,39],
[39,33,0,43,35,40,41,37,37,37],
[38,42,37,0,32,44,38,32,37,34],
[41,38,45,48,0,45,43,41,41,39],
[40,39,40,36,35,0,36,31,38,38],
[43,40,39,42,37,44,0,35,46,36],
[39,52,43,48,39,49,45,0,42,43],
[36,37,43,43,39,42,34,38,0,31],
[48,41,43,46,41,42,44,37,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,40,42,33,39,30,40,35,36],
[45,0,41,45,39,49,34,44,45,42],
[40,39,0,47,38,41,43,45,41,41],
[38,35,33,0,37,35,30,38,35,37],
[47,41,42,43,0,40,41,48,49,41],
[41,31,39,45,40,0,36,45,39,40],
[50,46,37,50,39,44,0,52,49,45],
[40,36,35,42,32,35,28,0,33,38],
[45,35,39,45,31,41,31,47,0,38],
[44,38,39,43,39,40,35,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,40,33,42,40,44,38,40,42],
[43,0,50,44,46,46,61,48,38,44],
[40,30,0,45,44,41,46,50,40,42],
[47,36,35,0,39,42,47,46,43,44],
[38,34,36,41,0,43,41,40,36,42],
[40,34,39,38,37,0,46,42,36,38],
[36,19,34,33,39,34,0,37,26,37],
[42,32,30,34,40,38,43,0,30,39],
[40,42,40,37,44,44,54,50,0,43],
[38,36,38,36,38,42,43,41,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,42,43,36,47,39,38,37,43],
[45,0,44,44,43,45,41,43,39,42],
[38,36,0,36,40,35,33,35,34,43],
[37,36,44,0,33,43,42,39,38,45],
[44,37,40,47,0,36,44,40,37,44],
[33,35,45,37,44,0,39,44,40,43],
[41,39,47,38,36,41,0,44,42,45],
[42,37,45,41,40,36,36,0,35,43],
[43,41,46,42,43,40,38,45,0,44],
[37,38,37,35,36,37,35,37,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,56,51,47,39,48,43,49,43],
[37,0,46,51,40,41,43,40,46,37],
[24,34,0,37,33,30,28,33,37,27],
[29,29,43,0,30,28,37,27,42,37],
[33,40,47,50,0,37,45,45,44,40],
[41,39,50,52,43,0,48,29,50,43],
[32,37,52,43,35,32,0,34,41,36],
[37,40,47,53,35,51,46,0,43,49],
[31,34,43,38,36,30,39,37,0,38],
[37,43,53,43,40,37,44,31,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,42,37,42,43,46,48,39,43],
[43,0,45,41,43,42,37,51,47,47],
[38,35,0,44,45,41,43,53,40,46],
[43,39,36,0,41,37,39,56,40,43],
[38,37,35,39,0,30,39,44,41,39],
[37,38,39,43,50,0,39,53,43,38],
[34,43,37,41,41,41,0,53,46,46],
[32,29,27,24,36,27,27,0,32,32],
[41,33,40,40,39,37,34,48,0,37],
[37,33,34,37,41,42,34,48,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,36,30,35,33,38,37,26,31],
[42,0,48,36,44,42,42,44,30,30],
[44,32,0,35,47,32,32,34,31,32],
[50,44,45,0,48,47,43,49,40,39],
[45,36,33,32,0,42,40,38,38,42],
[47,38,48,33,38,0,40,45,42,35],
[42,38,48,37,40,40,0,45,32,33],
[43,36,46,31,42,35,35,0,40,41],
[54,50,49,40,42,38,48,40,0,39],
[49,50,48,41,38,45,47,39,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,34,46,46,42,32,48,54,44],
[38,0,35,51,48,36,38,47,53,37],
[46,45,0,54,52,39,30,45,45,45],
[34,29,26,0,44,26,24,49,40,37],
[34,32,28,36,0,28,25,37,40,34],
[38,44,41,54,52,0,43,51,49,45],
[48,42,50,56,55,37,0,55,51,46],
[32,33,35,31,43,29,25,0,35,35],
[26,27,35,40,40,31,29,45,0,31],
[36,43,35,43,46,35,34,45,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,40,45,40,39,29,44,40,37],
[45,0,38,47,44,39,31,53,33,32],
[40,42,0,48,48,34,34,44,40,34],
[35,33,32,0,35,37,32,50,38,31],
[40,36,32,45,0,30,28,44,34,28],
[41,41,46,43,50,0,39,60,50,39],
[51,49,46,48,52,41,0,52,38,40],
[36,27,36,30,36,20,28,0,29,25],
[40,47,40,42,46,30,42,51,0,42],
[43,48,46,49,52,41,40,55,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,37,40,35,30,33,26,37,24],
[33,0,29,28,20,23,28,26,23,20],
[43,51,0,37,31,37,37,36,36,41],
[40,52,43,0,26,31,39,38,39,27],
[45,60,49,54,0,42,48,35,41,48],
[50,57,43,49,38,0,43,41,36,41],
[47,52,43,41,32,37,0,38,49,44],
[54,54,44,42,45,39,42,0,40,33],
[43,57,44,41,39,44,31,40,0,32],
[56,60,39,53,32,39,36,47,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,43,39,41,44,38,48,47,53],
[30,0,41,31,47,49,35,44,28,61],
[37,39,0,23,29,37,36,32,35,40],
[41,49,57,0,44,40,37,48,46,52],
[39,33,51,36,0,48,43,42,36,50],
[36,31,43,40,32,0,43,51,39,43],
[42,45,44,43,37,37,0,48,39,49],
[32,36,48,32,38,29,32,0,43,45],
[33,52,45,34,44,41,41,37,0,44],
[27,19,40,28,30,37,31,35,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,39,35,40,38,40,37,33,36],
[48,0,41,33,45,43,48,43,45,46],
[41,39,0,40,46,38,46,40,42,37],
[45,47,40,0,44,42,44,41,49,43],
[40,35,34,36,0,32,37,39,35,34],
[42,37,42,38,48,0,39,37,36,36],
[40,32,34,36,43,41,0,40,43,33],
[43,37,40,39,41,43,40,0,45,43],
[47,35,38,31,45,44,37,35,0,39],
[44,34,43,37,46,44,47,37,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,38,41,35,35,35,39,37,41],
[52,0,29,46,33,37,42,32,40,42],
[42,51,0,33,39,36,40,39,39,40],
[39,34,47,0,37,39,33,45,38,31],
[45,47,41,43,0,37,36,37,32,44],
[45,43,44,41,43,0,40,37,34,38],
[45,38,40,47,44,40,0,42,35,45],
[41,48,41,35,43,43,38,0,40,50],
[43,40,41,42,48,46,45,40,0,42],
[39,38,40,49,36,42,35,30,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,42,38,37,41,30,39,41,49],
[39,0,41,43,34,42,36,44,47,46],
[38,39,0,37,43,36,30,38,32,44],
[42,37,43,0,37,38,22,43,33,43],
[43,46,37,43,0,44,38,44,38,45],
[39,38,44,42,36,0,26,41,45,45],
[50,44,50,58,42,54,0,39,53,55],
[41,36,42,37,36,39,41,0,42,41],
[39,33,48,47,42,35,27,38,0,39],
[31,34,36,37,35,35,25,39,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,39,44,37,39,38,41,39,30],
[44,0,48,38,41,34,40,38,38,35],
[41,32,0,33,31,29,38,38,31,27],
[36,42,47,0,37,45,42,43,35,36],
[43,39,49,43,0,39,43,42,40,44],
[41,46,51,35,41,0,45,41,44,37],
[42,40,42,38,37,35,0,41,36,32],
[39,42,42,37,38,39,39,0,32,30],
[41,42,49,45,40,36,44,48,0,41],
[50,45,53,44,36,43,48,50,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,37,28,37,44,41,39,36,30],
[46,0,38,31,28,38,36,35,42,26],
[43,42,0,28,29,37,36,30,35,33],
[52,49,52,0,44,40,49,43,46,55],
[43,52,51,36,0,45,43,43,40,46],
[36,42,43,40,35,0,48,24,38,35],
[39,44,44,31,37,32,0,33,37,34],
[41,45,50,37,37,56,47,0,41,41],
[44,38,45,34,40,42,43,39,0,31],
[50,54,47,25,34,45,46,39,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,40,35,42,51,41,43,29,40],
[38,0,39,35,37,42,41,38,24,49],
[40,41,0,47,25,47,43,44,35,44],
[45,45,33,0,23,49,40,41,34,34],
[38,43,55,57,0,54,49,40,35,50],
[29,38,33,31,26,0,33,34,29,36],
[39,39,37,40,31,47,0,33,23,35],
[37,42,36,39,40,46,47,0,41,48],
[51,56,45,46,45,51,57,39,0,51],
[40,31,36,46,30,44,45,32,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,23,45,44,41,44,36,40,38],
[32,0,30,40,36,40,45,41,47,39],
[57,50,0,51,43,41,53,48,48,39],
[35,40,29,0,41,36,44,38,36,37],
[36,44,37,39,0,42,45,39,34,33],
[39,40,39,44,38,0,38,39,44,40],
[36,35,27,36,35,42,0,34,41,36],
[44,39,32,42,41,41,46,0,43,34],
[40,33,32,44,46,36,39,37,0,39],
[42,41,41,43,47,40,44,46,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,49,44,33,42,45,33,39,51],
[43,0,51,40,44,36,44,43,37,44],
[31,29,0,31,26,38,31,33,29,43],
[36,40,49,0,39,45,52,36,41,44],
[47,36,54,41,0,42,47,46,35,51],
[38,44,42,35,38,0,41,41,38,47],
[35,36,49,28,33,39,0,39,32,45],
[47,37,47,44,34,39,41,0,42,41],
[41,43,51,39,45,42,48,38,0,37],
[29,36,37,36,29,33,35,39,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,34,41,39,33,37,50,44,40],
[39,0,40,45,29,33,42,44,42,34],
[46,40,0,43,35,35,40,52,45,38],
[39,35,37,0,35,30,38,45,36,34],
[41,51,45,45,0,34,43,43,41,42],
[47,47,45,50,46,0,45,45,42,40],
[43,38,40,42,37,35,0,43,40,37],
[30,36,28,35,37,35,37,0,29,33],
[36,38,35,44,39,38,40,51,0,36],
[40,46,42,46,38,40,43,47,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,47,45,42,41,39,47,48,50],
[32,0,43,50,38,46,40,43,46,50],
[33,37,0,34,25,43,34,39,35,39],
[35,30,46,0,32,44,38,42,39,45],
[38,42,55,48,0,42,48,46,52,52],
[39,34,37,36,38,0,46,42,37,48],
[41,40,46,42,32,34,0,37,39,47],
[33,37,41,38,34,38,43,0,38,50],
[32,34,45,41,28,43,41,42,0,44],
[30,30,41,35,28,32,33,30,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,40,40,45,41,34,47,49,40],
[47,0,38,48,49,46,43,59,50,45],
[40,42,0,47,49,45,35,53,52,53],
[40,32,33,0,38,39,29,51,50,33],
[35,31,31,42,0,44,29,49,37,41],
[39,34,35,41,36,0,20,49,51,54],
[46,37,45,51,51,60,0,47,61,59],
[33,21,27,29,31,31,33,0,28,39],
[31,30,28,30,43,29,19,52,0,37],
[40,35,27,47,39,26,21,41,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,32,45,26,45,39,33,40,43],
[37,0,31,40,30,44,42,40,38,39],
[48,49,0,40,47,45,51,46,42,42],
[35,40,40,0,33,36,46,41,43,39],
[54,50,33,47,0,37,44,33,40,38],
[35,36,35,44,43,0,49,41,37,38],
[41,38,29,34,36,31,0,36,35,33],
[47,40,34,39,47,39,44,0,38,44],
[40,42,38,37,40,43,45,42,0,45],
[37,41,38,41,42,42,47,36,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,35,38,41,28,23,48,34,37],
[47,0,57,50,43,45,33,43,44,48],
[45,23,0,41,31,38,26,33,22,42],
[42,30,39,0,35,39,39,47,35,31],
[39,37,49,45,0,36,27,53,34,37],
[52,35,42,41,44,0,34,43,32,32],
[57,47,54,41,53,46,0,54,42,34],
[32,37,47,33,27,37,26,0,30,28],
[46,36,58,45,46,48,38,50,0,39],
[43,32,38,49,43,48,46,52,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,44,46,45,48,39,40,51,48],
[40,0,35,51,36,46,34,36,46,38],
[36,45,0,46,45,43,42,33,43,45],
[34,29,34,0,27,38,31,31,33,40],
[35,44,35,53,0,49,35,34,36,42],
[32,34,37,42,31,0,32,31,37,41],
[41,46,38,49,45,48,0,39,46,36],
[40,44,47,49,46,49,41,0,47,47],
[29,34,37,47,44,43,34,33,0,40],
[32,42,35,40,38,39,44,33,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,36,40,36,42,46,36,37,36],
[32,0,31,32,37,33,35,34,30,31],
[44,49,0,41,44,42,44,41,36,41],
[40,48,39,0,44,48,50,41,44,46],
[44,43,36,36,0,39,46,36,38,37],
[38,47,38,32,41,0,35,41,31,31],
[34,45,36,30,34,45,0,36,31,38],
[44,46,39,39,44,39,44,0,35,42],
[43,50,44,36,42,49,49,45,0,44],
[44,49,39,34,43,49,42,38,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,35,29,39,35,28,43,30,30],
[37,0,31,28,34,38,30,27,30,32],
[45,49,0,34,44,38,28,38,41,32],
[51,52,46,0,40,46,40,35,30,44],
[41,46,36,40,0,39,34,44,26,32],
[45,42,42,34,41,0,37,33,30,30],
[52,50,52,40,46,43,0,49,36,40],
[37,53,42,45,36,47,31,0,30,33],
[50,50,39,50,54,50,44,50,0,46],
[50,48,48,36,48,50,40,47,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,41,30,35,47,49,32,39,47],
[35,0,40,37,47,43,41,39,35,39],
[39,40,0,40,38,47,53,40,39,44],
[50,43,40,0,47,51,57,46,47,47],
[45,33,42,33,0,42,43,43,37,39],
[33,37,33,29,38,0,38,35,41,48],
[31,39,27,23,37,42,0,35,34,38],
[48,41,40,34,37,45,45,0,37,41],
[41,45,41,33,43,39,46,43,0,52],
[33,41,36,33,41,32,42,39,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,39,34,35,38,46,40,38,35],
[45,0,39,35,38,41,32,41,43,39],
[41,41,0,38,39,39,44,39,46,41],
[46,45,42,0,41,41,53,37,44,37],
[45,42,41,39,0,48,42,44,52,40],
[42,39,41,39,32,0,45,36,52,36],
[34,48,36,27,38,35,0,31,44,33],
[40,39,41,43,36,44,49,0,43,39],
[42,37,34,36,28,28,36,37,0,33],
[45,41,39,43,40,44,47,41,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,24,25,32,40,41,29,31,23],
[52,0,38,34,38,49,46,46,41,34],
[56,42,0,38,39,43,37,44,41,48],
[55,46,42,0,40,48,39,46,40,35],
[48,42,41,40,0,45,40,44,38,32],
[40,31,37,32,35,0,33,32,37,32],
[39,34,43,41,40,47,0,41,38,33],
[51,34,36,34,36,48,39,0,42,30],
[49,39,39,40,42,43,42,38,0,38],
[57,46,32,45,48,48,47,50,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,37,39,39,30,45,39,37,41],
[36,0,37,38,36,33,43,41,25,34],
[43,43,0,46,37,31,37,38,35,37],
[41,42,34,0,38,24,40,38,33,34],
[41,44,43,42,0,37,47,36,39,40],
[50,47,49,56,43,0,51,52,36,44],
[35,37,43,40,33,29,0,36,38,31],
[41,39,42,42,44,28,44,0,34,34],
[43,55,45,47,41,44,42,46,0,36],
[39,46,43,46,40,36,49,46,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,38,49,41,43,51,50,44,38],
[32,0,36,47,39,39,43,41,40,32],
[42,44,0,51,38,43,48,42,40,36],
[31,33,29,0,34,37,36,39,35,33],
[39,41,42,46,0,42,49,53,44,45],
[37,41,37,43,38,0,48,53,42,36],
[29,37,32,44,31,32,0,37,30,33],
[30,39,38,41,27,27,43,0,37,34],
[36,40,40,45,36,38,50,43,0,33],
[42,48,44,47,35,44,47,46,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,45,48,45,36,40,49,42,37],
[42,0,47,44,49,40,48,52,44,38],
[35,33,0,40,36,32,31,45,34,35],
[32,36,40,0,35,34,35,37,35,38],
[35,31,44,45,0,30,29,36,37,37],
[44,40,48,46,50,0,41,50,41,42],
[40,32,49,45,51,39,0,45,38,41],
[31,28,35,43,44,30,35,0,35,37],
[38,36,46,45,43,39,42,45,0,43],
[43,42,45,42,43,38,39,43,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,33,30,27,36,20,20,27,32],
[52,0,40,38,39,51,30,40,41,42],
[47,40,0,43,38,46,40,37,45,30],
[50,42,37,0,33,39,31,36,45,36],
[53,41,42,47,0,51,37,42,49,43],
[44,29,34,41,29,0,30,30,43,29],
[60,50,40,49,43,50,0,43,44,40],
[60,40,43,44,38,50,37,0,36,38],
[53,39,35,35,31,37,36,44,0,34],
[48,38,50,44,37,51,40,42,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,39,37,42,46,40,36,41,46],
[44,0,42,41,47,49,39,38,43,43],
[41,38,0,38,39,49,36,45,37,47],
[43,39,42,0,42,46,40,36,47,42],
[38,33,41,38,0,44,47,39,41,46],
[34,31,31,34,36,0,29,32,28,43],
[40,41,44,40,33,51,0,43,41,48],
[44,42,35,44,41,48,37,0,41,50],
[39,37,43,33,39,52,39,39,0,44],
[34,37,33,38,34,37,32,30,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,44,56,55,55,34,44,33,44],
[25,0,33,34,34,44,23,34,33,33],
[36,47,0,59,22,21,46,35,34,36],
[24,46,21,0,21,21,22,46,23,33],
[25,46,58,59,0,44,36,47,58,57],
[25,36,59,59,36,0,35,35,58,36],
[46,57,34,58,44,45,0,58,58,45],
[36,46,45,34,33,45,22,0,47,33],
[47,47,46,57,22,22,22,33,0,45],
[36,47,44,47,23,44,35,47,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,36,38,41,39,41,37,30,35],
[39,0,39,43,41,42,41,43,35,41],
[44,41,0,47,40,45,38,47,35,36],
[42,37,33,0,40,35,42,40,34,31],
[39,39,40,40,0,37,41,42,35,34],
[41,38,35,45,43,0,37,36,40,32],
[39,39,42,38,39,43,0,42,34,34],
[43,37,33,40,38,44,38,0,34,35],
[50,45,45,46,45,40,46,46,0,34],
[45,39,44,49,46,48,46,45,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,35,28,36,25,46,29,50,39],
[47,0,39,45,46,41,47,38,55,40],
[45,41,0,40,44,36,45,38,54,36],
[52,35,40,0,42,42,52,41,63,52],
[44,34,36,38,0,33,48,40,56,39],
[55,39,44,38,47,0,49,43,60,37],
[34,33,35,28,32,31,0,27,44,28],
[51,42,42,39,40,37,53,0,50,43],
[30,25,26,17,24,20,36,30,0,31],
[41,40,44,28,41,43,52,37,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,41,41,31,39,51,42,43,45],
[40,0,40,61,42,43,60,56,39,52],
[39,40,0,42,30,35,49,46,28,39],
[39,19,38,0,29,32,45,42,31,42],
[49,38,50,51,0,41,48,41,44,51],
[41,37,45,48,39,0,49,50,33,44],
[29,20,31,35,32,31,0,37,33,38],
[38,24,34,38,39,30,43,0,33,48],
[37,41,52,49,36,47,47,47,0,52],
[35,28,41,38,29,36,42,32,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,61,39,54,70,51,57,47,55],
[17,0,35,31,45,43,54,37,39,31],
[19,45,0,30,19,35,28,38,39,37],
[41,49,50,0,43,40,59,46,56,64],
[26,35,61,37,0,44,44,29,45,36],
[10,37,45,40,36,0,45,28,30,38],
[29,26,52,21,36,35,0,48,29,46],
[23,43,42,34,51,52,32,0,44,25],
[33,41,41,24,35,50,51,36,0,28],
[25,49,43,16,44,42,34,55,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,42,40,38,39,38,43,32,41],
[41,0,38,35,33,32,36,41,37,41],
[38,42,0,39,39,35,36,39,40,41],
[40,45,41,0,38,38,36,41,39,43],
[42,47,41,42,0,40,45,38,40,48],
[41,48,45,42,40,0,39,39,41,43],
[42,44,44,44,35,41,0,42,37,50],
[37,39,41,39,42,41,38,0,35,45],
[48,43,40,41,40,39,43,45,0,45],
[39,39,39,37,32,37,30,35,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,36,43,44,35,42,44,39,42],
[45,0,41,41,49,40,43,40,46,45],
[44,39,0,39,44,39,41,37,40,40],
[37,39,41,0,40,45,45,35,39,42],
[36,31,36,40,0,37,35,33,34,40],
[45,40,41,35,43,0,42,43,40,47],
[38,37,39,35,45,38,0,36,38,43],
[36,40,43,45,47,37,44,0,42,47],
[41,34,40,41,46,40,42,38,0,48],
[38,35,40,38,40,33,37,33,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,30,35,40,35,40,29,35,34],
[44,0,34,43,40,42,40,33,29,35],
[50,46,0,48,42,42,46,41,46,37],
[45,37,32,0,34,41,39,33,32,31],
[40,40,38,46,0,42,43,35,41,38],
[45,38,38,39,38,0,39,34,34,35],
[40,40,34,41,37,41,0,40,37,47],
[51,47,39,47,45,46,40,0,36,36],
[45,51,34,48,39,46,43,44,0,43],
[46,45,43,49,42,45,33,44,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,23,22,50,51,30,59,49,22],
[65,0,45,38,71,72,56,80,72,39],
[57,35,0,38,52,65,57,60,58,40],
[58,42,42,0,42,58,39,57,58,38],
[30,9,28,38,0,65,29,51,41,21],
[29,8,15,22,15,0,20,42,39,21],
[50,24,23,41,51,60,0,51,58,37],
[21,0,20,23,29,38,29,0,37,21],
[31,8,22,22,39,41,22,43,0,22],
[58,41,40,42,59,59,43,59,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,38,32,31,43,41,32,37,28],
[49,0,39,40,38,46,44,34,41,33],
[42,41,0,32,34,46,47,37,44,40],
[48,40,48,0,41,52,48,46,58,44],
[49,42,46,39,0,47,47,44,48,42],
[37,34,34,28,33,0,26,37,37,34],
[39,36,33,32,33,54,0,43,43,35],
[48,46,43,34,36,43,37,0,41,41],
[43,39,36,22,32,43,37,39,0,31],
[52,47,40,36,38,46,45,39,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,46,42,38,37,38,42,53,48],
[32,0,42,34,38,37,28,34,43,42],
[34,38,0,33,35,37,36,36,40,40],
[38,46,47,0,42,41,41,46,50,52],
[42,42,45,38,0,41,38,37,36,43],
[43,43,43,39,39,0,38,39,40,48],
[42,52,44,39,42,42,0,42,49,45],
[38,46,44,34,43,41,38,0,48,43],
[27,37,40,30,44,40,31,32,0,45],
[32,38,40,28,37,32,35,37,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,38,59,35,52,47,43,44,47],
[38,0,39,47,43,38,48,41,33,38],
[42,41,0,45,42,48,37,35,40,45],
[21,33,35,0,43,36,30,25,37,29],
[45,37,38,37,0,38,36,31,43,38],
[28,42,32,44,42,0,39,35,27,41],
[33,32,43,50,44,41,0,35,42,35],
[37,39,45,55,49,45,45,0,54,49],
[36,47,40,43,37,53,38,26,0,46],
[33,42,35,51,42,39,45,31,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,45,41,36,40,50,39,32,55],
[42,0,34,47,41,41,47,35,38,46],
[35,46,0,38,43,46,44,45,42,45],
[39,33,42,0,41,43,42,30,39,46],
[44,39,37,39,0,38,48,34,34,48],
[40,39,34,37,42,0,42,33,40,41],
[30,33,36,38,32,38,0,31,34,43],
[41,45,35,50,46,47,49,0,42,50],
[48,42,38,41,46,40,46,38,0,49],
[25,34,35,34,32,39,37,30,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,43,59,50,44,43,65,52,51],
[44,0,36,51,44,58,37,60,52,59],
[37,44,0,44,29,44,8,44,38,45],
[21,29,36,0,57,44,21,50,52,37],
[30,36,51,23,0,29,38,30,38,37],
[36,22,36,36,51,0,28,58,52,50],
[37,43,72,59,42,52,0,57,50,51],
[15,20,36,30,50,22,23,0,44,45],
[28,28,42,28,42,28,30,36,0,45],
[29,21,35,43,43,30,29,35,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,20,40,20,20,40,21,21,20],
[59,0,59,59,59,59,59,19,40,39],
[60,21,0,61,61,80,80,40,21,41],
[40,21,19,0,20,39,39,40,40,0],
[60,21,19,60,0,60,60,40,40,41],
[60,21,0,41,20,0,40,21,21,41],
[40,21,0,41,20,40,0,21,21,41],
[59,61,40,40,40,59,59,0,21,20],
[59,40,59,40,40,59,59,59,0,40],
[60,41,39,80,39,39,39,60,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,44,58,48,56,48,54,40,39],
[35,0,25,45,49,35,49,32,28,36],
[36,55,0,47,59,47,42,43,45,41],
[22,35,33,0,49,33,30,39,25,29],
[32,31,21,31,0,35,31,34,30,29],
[24,45,33,47,45,0,30,44,33,30],
[32,31,38,50,49,50,0,29,37,36],
[26,48,37,41,46,36,51,0,27,30],
[40,52,35,55,50,47,43,53,0,29],
[41,44,39,51,51,50,44,50,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,43,40,37,46,40,47,48,40],
[44,0,40,42,43,41,39,47,46,41],
[37,40,0,37,29,48,34,41,38,48],
[40,38,43,0,36,42,33,44,46,40],
[43,37,51,44,0,45,41,53,54,40],
[34,39,32,38,35,0,30,45,34,40],
[40,41,46,47,39,50,0,51,42,42],
[33,33,39,36,27,35,29,0,40,34],
[32,34,42,34,26,46,38,40,0,46],
[40,39,32,40,40,40,38,46,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,32,35,40,43,44,41,41,47],
[38,0,25,33,41,29,51,25,28,42],
[48,55,0,49,42,47,63,43,40,58],
[45,47,31,0,37,38,43,33,41,40],
[40,39,38,43,0,45,45,40,31,42],
[37,51,33,42,35,0,55,42,42,45],
[36,29,17,37,35,25,0,23,24,28],
[39,55,37,47,40,38,57,0,35,55],
[39,52,40,39,49,38,56,45,0,42],
[33,38,22,40,38,35,52,25,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,42,66,66,54,40,68,55,55],
[26,0,42,51,25,39,38,28,26,26],
[38,38,0,51,38,51,52,40,52,52],
[14,29,29,0,26,42,40,29,29,43],
[14,55,42,54,0,54,40,55,41,41],
[26,41,29,38,26,0,26,40,29,14],
[40,42,28,40,40,54,0,42,40,42],
[12,52,40,51,25,40,38,0,41,26],
[25,54,28,51,39,51,40,39,0,27],
[25,54,28,37,39,66,38,54,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,37,48,51,48,37,45,35,44],
[41,0,50,45,51,44,39,45,50,56],
[43,30,0,51,55,45,40,49,42,37],
[32,35,29,0,51,48,53,68,51,37],
[29,29,25,29,0,35,30,32,26,46],
[32,36,35,32,45,0,30,42,46,46],
[43,41,40,27,50,50,0,40,38,39],
[35,35,31,12,48,38,40,0,48,42],
[45,30,38,29,54,34,42,32,0,37],
[36,24,43,43,34,34,41,38,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,47,36,41,40,41,40,40,43],
[49,0,51,42,44,53,36,41,48,46],
[33,29,0,26,31,48,24,35,38,37],
[44,38,54,0,44,50,36,40,43,47],
[39,36,49,36,0,51,42,45,51,37],
[40,27,32,30,29,0,27,35,42,38],
[39,44,56,44,38,53,0,41,47,48],
[40,39,45,40,35,45,39,0,44,43],
[40,32,42,37,29,38,33,36,0,40],
[37,34,43,33,43,42,32,37,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,40,34,37,41,38,35,43,34],
[47,0,35,37,37,38,46,42,45,41],
[40,45,0,40,35,37,38,46,45,38],
[46,43,40,0,36,41,40,42,46,40],
[43,43,45,44,0,42,38,40,47,43],
[39,42,43,39,38,0,38,42,40,47],
[42,34,42,40,42,42,0,41,42,39],
[45,38,34,38,40,38,39,0,35,36],
[37,35,35,34,33,40,38,45,0,29],
[46,39,42,40,37,33,41,44,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,44,42,43,36,47,44,38,46],
[49,0,42,43,37,41,44,48,47,54],
[36,38,0,38,42,35,37,37,32,43],
[38,37,42,0,39,39,45,47,42,49],
[37,43,38,41,0,47,38,41,42,43],
[44,39,45,41,33,0,40,41,44,43],
[33,36,43,35,42,40,0,45,42,46],
[36,32,43,33,39,39,35,0,46,50],
[42,33,48,38,38,36,38,34,0,41],
[34,26,37,31,37,37,34,30,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,49,38,52,55,37,38,45,54],
[34,0,56,38,45,47,41,38,39,40],
[31,24,0,16,31,39,26,24,26,34],
[42,42,64,0,40,47,36,46,41,56],
[28,35,49,40,0,44,33,34,47,37],
[25,33,41,33,36,0,34,37,37,34],
[43,39,54,44,47,46,0,35,43,40],
[42,42,56,34,46,43,45,0,45,46],
[35,41,54,39,33,43,37,35,0,46],
[26,40,46,24,43,46,40,34,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,28,26,18,37,32,23,42,19],
[51,0,42,48,42,48,37,42,55,29],
[52,38,0,57,20,39,52,42,42,30],
[54,32,23,0,21,39,28,32,45,22],
[62,38,60,59,0,58,51,55,54,49],
[43,32,41,41,22,0,37,33,35,32],
[48,43,28,52,29,43,0,40,38,34],
[57,38,38,48,25,47,40,0,47,36],
[38,25,38,35,26,45,42,33,0,29],
[61,51,50,58,31,48,46,44,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,47,43,45,55,59,32,47,36],
[44,0,48,55,44,56,57,57,35,48],
[33,32,0,44,44,44,45,56,32,34],
[37,25,36,0,34,56,48,69,35,36],
[35,36,36,46,0,58,35,44,48,23],
[25,24,36,24,22,0,38,45,25,36],
[21,23,35,32,45,42,0,44,23,23],
[48,23,24,11,36,35,36,0,36,13],
[33,45,48,45,32,55,57,44,0,23],
[44,32,46,44,57,44,57,67,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,32,34,35,37,32,40,33,37],
[39,0,30,35,34,40,32,40,34,37],
[48,50,0,48,42,42,36,40,43,46],
[46,45,32,0,42,41,36,43,39,38],
[45,46,38,38,0,40,35,43,43,41],
[43,40,38,39,40,0,33,42,40,41],
[48,48,44,44,45,47,0,47,40,44],
[40,40,40,37,37,38,33,0,37,37],
[47,46,37,41,37,40,40,43,0,46],
[43,43,34,42,39,39,36,43,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,39,38,37,43,35,32,34,48],
[32,0,40,38,35,34,33,32,33,42],
[41,40,0,36,42,35,43,43,38,47],
[42,42,44,0,35,39,36,40,39,51],
[43,45,38,45,0,39,36,30,39,48],
[37,46,45,41,41,0,39,40,34,43],
[45,47,37,44,44,41,0,42,38,48],
[48,48,37,40,50,40,38,0,46,51],
[46,47,42,41,41,46,42,34,0,46],
[32,38,33,29,32,37,32,29,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,49,49,59,40,29,38,51,38],
[19,0,39,40,28,11,19,18,41,38],
[31,41,0,30,40,30,21,40,50,40],
[31,40,50,0,30,32,40,40,40,50],
[21,52,40,50,0,30,20,29,42,39],
[40,69,50,48,50,0,41,60,50,60],
[51,61,59,40,60,39,0,49,52,61],
[42,62,40,40,51,20,31,0,51,52],
[29,39,30,40,38,30,28,29,0,38],
[42,42,40,30,41,20,19,28,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,42,30,46,38,34,43,40,47],
[28,0,28,34,33,32,27,31,29,30],
[38,52,0,35,52,42,40,46,42,40],
[50,46,45,0,49,35,44,42,37,42],
[34,47,28,31,0,41,35,30,29,42],
[42,48,38,45,39,0,43,40,41,36],
[46,53,40,36,45,37,0,36,41,43],
[37,49,34,38,50,40,44,0,34,34],
[40,51,38,43,51,39,39,46,0,43],
[33,50,40,38,38,44,37,46,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,48,37,52,57,46,46,47,44],
[38,0,49,49,43,59,50,57,53,61],
[32,31,0,40,31,40,46,31,45,43],
[43,31,40,0,38,47,41,33,39,46],
[28,37,49,42,0,45,48,41,47,51],
[23,21,40,33,35,0,39,37,37,41],
[34,30,34,39,32,41,0,36,42,46],
[34,23,49,47,39,43,44,0,42,48],
[33,27,35,41,33,43,38,38,0,42],
[36,19,37,34,29,39,34,32,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,41,41,30,39,39,33,37,34],
[38,0,36,37,30,34,36,35,37,27],
[39,44,0,43,29,42,42,35,32,30],
[39,43,37,0,29,39,40,38,34,29],
[50,50,51,51,0,50,47,42,43,35],
[41,46,38,41,30,0,41,29,32,34],
[41,44,38,40,33,39,0,35,34,30],
[47,45,45,42,38,51,45,0,32,42],
[43,43,48,46,37,48,46,48,0,44],
[46,53,50,51,45,46,50,38,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,38,45,26,46,54,26,19,17],
[55,0,37,54,42,62,53,72,55,43],
[42,43,0,44,51,54,70,35,45,43],
[35,26,36,0,34,53,53,34,20,42],
[54,38,29,46,0,72,62,47,29,54],
[34,18,26,27,8,0,16,27,10,34],
[26,27,10,27,18,64,0,19,21,35],
[54,8,45,46,33,53,61,0,28,24],
[61,25,35,60,51,70,59,52,0,51],
[63,37,37,38,26,46,45,56,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,37,40,45,46,38,41,38,40],
[36,0,33,32,43,19,42,25,31,33],
[43,47,0,44,50,39,38,27,42,39],
[40,48,36,0,57,44,45,29,39,48],
[35,37,30,23,0,24,38,12,27,28],
[34,61,41,36,56,0,43,38,32,33],
[42,38,42,35,42,37,0,29,25,30],
[39,55,53,51,68,42,51,0,44,45],
[42,49,38,41,53,48,55,36,0,44],
[40,47,41,32,52,47,50,35,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,40,44,32,46,60,34,34,43],
[47,0,44,38,36,47,55,42,35,30],
[40,36,0,37,31,42,39,35,30,47],
[36,42,43,0,36,48,46,36,33,30],
[48,44,49,44,0,44,60,56,38,54],
[34,33,38,32,36,0,40,36,29,24],
[20,25,41,34,20,40,0,34,20,36],
[46,38,45,44,24,44,46,0,45,53],
[46,45,50,47,42,51,60,35,0,54],
[37,50,33,50,26,56,44,27,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,42,31,16,30,26,32,38,22],
[53,0,63,53,39,36,38,41,59,48],
[38,17,0,27,24,38,30,38,35,24],
[49,27,53,0,29,39,33,38,48,32],
[64,41,56,51,0,52,51,53,52,26],
[50,44,42,41,28,0,39,44,52,39],
[54,42,50,47,29,41,0,35,48,42],
[48,39,42,42,27,36,45,0,38,38],
[42,21,45,32,28,28,32,42,0,34],
[58,32,56,48,54,41,38,42,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,34,44,35,34,35,43,26,42],
[28,0,27,45,37,44,26,17,27,34],
[46,53,0,46,47,53,26,36,46,45],
[36,35,34,0,9,44,35,35,34,35],
[45,43,33,71,0,53,35,51,35,42],
[46,36,27,36,27,0,35,36,27,36],
[45,54,54,45,45,45,0,35,45,45],
[37,63,44,45,29,44,45,0,46,71],
[54,53,34,46,45,53,35,34,0,44],
[38,46,35,45,38,44,35,9,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,41,48,42,39,33,37,35,34],
[40,0,39,36,39,35,33,34,34,36],
[39,41,0,37,39,42,32,36,34,39],
[32,44,43,0,41,48,37,38,38,31],
[38,41,41,39,0,44,41,40,38,33],
[41,45,38,32,36,0,38,42,27,33],
[47,47,48,43,39,42,0,45,40,38],
[43,46,44,42,40,38,35,0,38,33],
[45,46,46,42,42,53,40,42,0,40],
[46,44,41,49,47,47,42,47,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,54,42,44,33,36,46,56,43],
[30,0,43,35,33,28,25,30,49,35],
[26,37,0,32,36,32,29,40,45,22],
[38,45,48,0,38,29,36,40,43,29],
[36,47,44,42,0,23,36,40,56,33],
[47,52,48,51,57,0,39,52,53,46],
[44,55,51,44,44,41,0,40,57,40],
[34,50,40,40,40,28,40,0,53,42],
[24,31,35,37,24,27,23,27,0,26],
[37,45,58,51,47,34,40,38,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,33,30,38,38,39,36,35,34],
[36,0,40,35,43,32,30,21,30,34],
[47,40,0,41,37,46,42,46,36,39],
[50,45,39,0,38,32,44,43,42,37],
[42,37,43,42,0,35,38,33,25,36],
[42,48,34,48,45,0,40,36,35,35],
[41,50,38,36,42,40,0,36,34,36],
[44,59,34,37,47,44,44,0,33,37],
[45,50,44,38,55,45,46,47,0,45],
[46,46,41,43,44,45,44,43,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,44,51,40,43,33,38,49,46],
[37,0,47,49,45,41,34,43,46,45],
[36,33,0,46,33,34,27,34,40,37],
[29,31,34,0,37,32,33,34,41,31],
[40,35,47,43,0,40,33,32,36,39],
[37,39,46,48,40,0,36,44,45,44],
[47,46,53,47,47,44,0,39,50,42],
[42,37,46,46,48,36,41,0,42,42],
[31,34,40,39,44,35,30,38,0,37],
[34,35,43,49,41,36,38,38,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,34,33,32,34,32,33,17,32],
[15,0,17,17,32,32,47,16,32,32],
[46,63,0,48,30,32,63,16,47,30],
[47,63,32,0,47,32,47,48,47,32],
[48,48,50,33,0,17,48,33,48,65],
[46,48,48,48,63,0,63,31,46,63],
[48,33,17,33,32,17,0,33,17,32],
[47,64,64,32,47,49,47,0,47,47],
[63,48,33,33,32,34,63,33,0,48],
[48,48,50,48,15,17,48,33,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,40,30,33,24,37,38,41,29],
[41,0,40,28,38,30,40,39,39,32],
[40,40,0,32,43,42,40,46,37,35],
[50,52,48,0,38,48,38,48,45,38],
[47,42,37,42,0,35,39,45,37,38],
[56,50,38,32,45,0,33,49,47,40],
[43,40,40,42,41,47,0,50,46,37],
[42,41,34,32,35,31,30,0,36,27],
[39,41,43,35,43,33,34,44,0,27],
[51,48,45,42,42,40,43,53,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,36,35,47,36,36,34,38,31],
[41,0,31,43,48,42,43,39,42,36],
[44,49,0,51,51,37,48,37,50,39],
[45,37,29,0,51,41,37,45,37,44],
[33,32,29,29,0,23,29,27,27,33],
[44,38,43,39,57,0,33,40,40,36],
[44,37,32,43,51,47,0,47,37,46],
[46,41,43,35,53,40,33,0,37,23],
[42,38,30,43,53,40,43,43,0,38],
[49,44,41,36,47,44,34,57,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,50,47,43,38,42,43,40,43],
[45,0,50,40,44,40,43,41,38,51],
[30,30,0,37,30,33,28,35,31,35],
[33,40,43,0,43,38,37,42,39,44],
[37,36,50,37,0,40,35,42,37,41],
[42,40,47,42,40,0,41,45,39,45],
[38,37,52,43,45,39,0,41,40,47],
[37,39,45,38,38,35,39,0,30,44],
[40,42,49,41,43,41,40,50,0,46],
[37,29,45,36,39,35,33,36,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,40,51,42,49,49,45,53,45],
[33,0,53,40,43,45,43,39,42,37],
[40,27,0,43,37,35,35,44,41,40],
[29,40,37,0,44,42,36,24,36,37],
[38,37,43,36,0,37,44,31,45,40],
[31,35,45,38,43,0,37,37,46,35],
[31,37,45,44,36,43,0,38,37,45],
[35,41,36,56,49,43,42,0,43,42],
[27,38,39,44,35,34,43,37,0,41],
[35,43,40,43,40,45,35,38,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,36,38,39,35,31,44,41,39],
[47,0,46,42,46,48,40,46,47,41],
[44,34,0,36,37,38,35,39,40,32],
[42,38,44,0,41,45,39,46,43,39],
[41,34,43,39,0,37,40,44,39,43],
[45,32,42,35,43,0,44,39,42,43],
[49,40,45,41,40,36,0,44,46,42],
[36,34,41,34,36,41,36,0,39,38],
[39,33,40,37,41,38,34,41,0,36],
[41,39,48,41,37,37,38,42,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,32,41,32,38,33,41,46,34],
[35,0,35,37,44,42,41,42,45,43],
[48,45,0,48,36,46,44,42,57,41],
[39,43,32,0,30,42,37,39,53,43],
[48,36,44,50,0,49,42,40,49,45],
[42,38,34,38,31,0,34,43,40,35],
[47,39,36,43,38,46,0,47,45,45],
[39,38,38,41,40,37,33,0,48,39],
[34,35,23,27,31,40,35,32,0,35],
[46,37,39,37,35,45,35,41,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,32,30,42,36,29,35,23,43],
[48,0,42,42,47,32,41,49,41,45],
[48,38,0,36,40,29,27,35,31,34],
[50,38,44,0,42,37,35,36,31,40],
[38,33,40,38,0,33,30,32,25,35],
[44,48,51,43,47,0,36,50,33,53],
[51,39,53,45,50,44,0,46,39,49],
[45,31,45,44,48,30,34,0,30,43],
[57,39,49,49,55,47,41,50,0,55],
[37,35,46,40,45,27,31,37,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,38,57,35,50,41,35,40,40],
[40,0,41,41,40,54,49,27,48,55],
[42,39,0,45,40,47,34,46,39,46],
[23,39,35,0,42,42,44,25,37,46],
[45,40,40,38,0,51,34,40,43,42],
[30,26,33,38,29,0,28,19,38,35],
[39,31,46,36,46,52,0,37,42,46],
[45,53,34,55,40,61,43,0,53,55],
[40,32,41,43,37,42,38,27,0,42],
[40,25,34,34,38,45,34,25,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,30,29,33,40,33,35,39,27],
[37,0,37,40,41,35,51,40,46,40],
[50,43,0,42,43,39,48,44,56,41],
[51,40,38,0,46,43,47,47,43,32],
[47,39,37,34,0,35,57,43,45,39],
[40,45,41,37,45,0,50,47,52,42],
[47,29,32,33,23,30,0,34,45,31],
[45,40,36,33,37,33,46,0,56,33],
[41,34,24,37,35,28,35,24,0,22],
[53,40,39,48,41,38,49,47,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,48,51,46,54,46,48,50,39],
[40,0,50,55,50,52,47,53,55,41],
[32,30,0,40,33,41,38,38,40,34],
[29,25,40,0,16,32,31,34,30,23],
[34,30,47,64,0,58,51,39,52,32],
[26,28,39,48,22,0,34,39,44,26],
[34,33,42,49,29,46,0,35,46,31],
[32,27,42,46,41,41,45,0,47,26],
[30,25,40,50,28,36,34,33,0,34],
[41,39,46,57,48,54,49,54,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,53,36,63,52,52,63,63,53],
[27,0,45,35,53,43,43,54,54,35],
[27,35,0,27,54,44,53,63,63,53],
[44,45,53,0,53,34,61,45,54,44],
[17,27,26,27,0,35,35,18,37,27],
[28,37,36,46,45,0,61,45,63,35],
[28,37,27,19,45,19,0,45,37,28],
[17,26,17,35,62,35,35,0,28,36],
[17,26,17,26,43,17,43,52,0,43],
[27,45,27,36,53,45,52,44,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,40,39,40,60,59,39,60,60],
[39,0,20,59,39,60,59,59,40,60],
[40,60,0,39,40,60,39,60,60,60],
[41,21,41,0,40,40,59,40,40,21],
[40,41,40,40,0,41,59,40,41,41],
[20,20,20,40,39,0,59,39,39,0],
[21,21,41,21,21,21,0,21,21,21],
[41,21,20,40,40,41,59,0,21,41],
[20,40,20,40,39,41,59,59,0,20],
[20,20,20,59,39,80,59,39,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,41,41,39,40,42,35,41,42],
[55,0,40,47,44,51,43,46,49,60],
[39,40,0,36,31,42,41,34,39,49],
[39,33,44,0,32,39,36,39,43,44],
[41,36,49,48,0,39,44,40,50,50],
[40,29,38,41,41,0,38,26,46,46],
[38,37,39,44,36,42,0,40,46,48],
[45,34,46,41,40,54,40,0,53,46],
[39,31,41,37,30,34,34,27,0,43],
[38,20,31,36,30,34,32,34,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,44,24,31,34,27,27,25,30],
[31,0,30,23,32,31,30,25,31,29],
[36,50,0,28,34,39,33,37,30,35],
[56,57,52,0,55,51,40,44,40,41],
[49,48,46,25,0,37,33,32,33,42],
[46,49,41,29,43,0,42,36,32,35],
[53,50,47,40,47,38,0,39,35,39],
[53,55,43,36,48,44,41,0,45,51],
[55,49,50,40,47,48,45,35,0,39],
[50,51,45,39,38,45,41,29,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,32,51,41,40,40,44,37,45],
[43,0,42,37,37,37,42,40,36,40],
[48,38,0,45,38,43,41,41,40,46],
[29,43,35,0,35,39,41,40,42,41],
[39,43,42,45,0,39,41,48,47,45],
[40,43,37,41,41,0,42,43,40,42],
[40,38,39,39,39,38,0,45,38,45],
[36,40,39,40,32,37,35,0,43,42],
[43,44,40,38,33,40,42,37,0,46],
[35,40,34,39,35,38,35,38,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,40,35,46,33,44,54,51,51],
[15,0,24,19,33,28,31,27,17,35],
[40,56,0,43,47,41,51,42,38,60],
[45,61,37,0,29,42,52,53,38,49],
[34,47,33,51,0,33,42,43,42,50],
[47,52,39,38,47,0,61,50,52,47],
[36,49,29,28,38,19,0,56,30,37],
[26,53,38,27,37,30,24,0,25,33],
[29,63,42,42,38,28,50,55,0,55],
[29,45,20,31,30,33,43,47,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,44,43,37,46,41,45,39,44],
[28,0,27,41,30,44,42,38,40,27],
[36,53,0,39,35,45,53,41,34,31],
[37,39,41,0,32,42,35,42,47,41],
[43,50,45,48,0,55,48,44,43,34],
[34,36,35,38,25,0,44,37,33,36],
[39,38,27,45,32,36,0,35,40,30],
[35,42,39,38,36,43,45,0,42,37],
[41,40,46,33,37,47,40,38,0,36],
[36,53,49,39,46,44,50,43,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,41,43,54,33,45,39,34],
[36,0,38,37,36,43,33,32,39,41],
[38,42,0,50,44,53,33,45,53,43],
[39,43,30,0,41,44,38,45,41,49],
[37,44,36,39,0,48,34,40,47,47],
[26,37,27,36,32,0,23,37,33,24],
[47,47,47,42,46,57,0,35,52,43],
[35,48,35,35,40,43,45,0,51,42],
[41,41,27,39,33,47,28,29,0,39],
[46,39,37,31,33,56,37,38,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,38,48,38,40,45,48,48,49],
[36,0,38,45,42,40,39,47,49,51],
[42,42,0,42,37,45,41,44,49,50],
[32,35,38,0,31,35,35,42,45,47],
[42,38,43,49,0,39,38,54,51,45],
[40,40,35,45,41,0,44,43,49,45],
[35,41,39,45,42,36,0,37,44,45],
[32,33,36,38,26,37,43,0,47,44],
[32,31,31,35,29,31,36,33,0,38],
[31,29,30,33,35,35,35,36,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,39,53,50,47,39,44,44,42],
[20,0,33,44,45,32,43,28,48,37],
[41,47,0,35,48,35,31,38,37,33],
[27,36,45,0,62,39,45,40,45,43],
[30,35,32,18,0,27,36,34,39,43],
[33,48,45,41,53,0,48,55,39,32],
[41,37,49,35,44,32,0,49,38,31],
[36,52,42,40,46,25,31,0,53,24],
[36,32,43,35,41,41,42,27,0,46],
[38,43,47,37,37,48,49,56,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,41,22,49,39,47,39,43,34],
[38,0,34,26,39,39,41,27,49,43],
[39,46,0,34,45,41,39,35,50,50],
[58,54,46,0,59,50,45,34,58,54],
[31,41,35,21,0,29,29,30,40,35],
[41,41,39,30,51,0,37,34,51,42],
[33,39,41,35,51,43,0,42,46,48],
[41,53,45,46,50,46,38,0,52,52],
[37,31,30,22,40,29,34,28,0,39],
[46,37,30,26,45,38,32,28,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,30,29,27,39,22,28,17,32],
[61,0,50,40,61,41,52,42,40,20],
[50,30,0,50,48,39,50,39,28,50],
[51,40,30,0,28,29,43,39,28,22],
[53,19,32,52,0,29,22,39,17,12],
[41,39,41,51,51,0,63,53,30,42],
[58,28,30,37,58,17,0,39,17,38],
[52,38,41,41,41,27,41,0,20,41],
[63,40,52,52,63,50,63,60,0,43],
[48,60,30,58,68,38,42,39,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,41,42,34,51,41,53,46,41],
[40,0,46,36,38,53,36,47,35,43],
[39,34,0,36,32,44,33,49,43,42],
[38,44,44,0,40,54,45,44,49,50],
[46,42,48,40,0,59,41,57,47,46],
[29,27,36,26,21,0,28,41,34,35],
[39,44,47,35,39,52,0,45,47,46],
[27,33,31,36,23,39,35,0,38,39],
[34,45,37,31,33,46,33,42,0,39],
[39,37,38,30,34,45,34,41,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,43,43,45,43,55,31,32,33],
[25,0,11,37,11,23,33,23,13,46],
[37,69,0,69,46,47,68,34,69,59],
[37,43,11,0,33,11,43,23,10,21],
[35,69,34,47,0,45,68,22,57,35],
[37,57,33,69,35,0,56,57,33,35],
[25,47,12,37,12,24,0,12,35,35],
[49,57,46,57,58,23,68,0,45,47],
[48,67,11,70,23,47,45,35,0,46],
[47,34,21,59,45,45,45,33,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,34,33,31,21,33,21,30,34],
[47,0,44,47,50,47,50,58,47,31],
[46,36,0,33,33,29,38,45,43,36],
[47,33,47,0,35,30,40,41,44,29],
[49,30,47,45,0,36,52,52,43,46],
[59,33,51,50,44,0,52,58,36,42],
[47,30,42,40,28,28,0,38,38,36],
[59,22,35,39,28,22,42,0,38,30],
[50,33,37,36,37,44,42,42,0,36],
[46,49,44,51,34,38,44,50,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,45,25,38,39,29,32,17,22],
[57,0,63,46,43,49,39,44,32,33],
[35,17,0,18,38,33,21,32,17,21],
[55,34,62,0,42,49,42,42,49,36],
[42,37,42,38,0,40,36,42,25,35],
[41,31,47,31,40,0,29,34,28,29],
[51,41,59,38,44,51,0,47,41,50],
[48,36,48,38,38,46,33,0,42,29],
[63,48,63,31,55,52,39,38,0,38],
[58,47,59,44,45,51,30,51,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,25,27,40,40,27,27,41,53],
[53,0,53,67,42,39,42,41,40,40],
[55,27,0,41,40,54,15,15,29,67],
[53,13,39,0,28,25,28,15,27,26],
[40,38,40,52,0,52,40,26,40,65],
[40,41,26,55,28,0,15,28,42,42],
[53,38,65,52,40,65,0,28,53,65],
[53,39,65,65,54,52,52,0,52,52],
[39,40,51,53,40,38,27,28,0,53],
[27,40,13,54,15,38,15,28,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,43,49,32,32,42,45,33,39],
[51,0,42,45,35,38,45,44,38,43],
[37,38,0,40,36,34,48,37,35,37],
[31,35,40,0,27,24,32,37,33,22],
[48,45,44,53,0,44,51,48,40,45],
[48,42,46,56,36,0,54,53,38,48],
[38,35,32,48,29,26,0,38,25,29],
[35,36,43,43,32,27,42,0,36,30],
[47,42,45,47,40,42,55,44,0,36],
[41,37,43,58,35,32,51,50,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,34,40,38,38,40,35,44,39],
[38,0,39,36,36,39,43,33,34,45],
[46,41,0,39,40,36,46,37,35,40],
[40,44,41,0,36,43,45,40,38,40],
[42,44,40,44,0,47,48,37,38,41],
[42,41,44,37,33,0,45,38,41,44],
[40,37,34,35,32,35,0,31,33,34],
[45,47,43,40,43,42,49,0,45,45],
[36,46,45,42,42,39,47,35,0,44],
[41,35,40,40,39,36,46,35,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,52,46,37,44,36,46,35,44],
[36,0,45,49,45,37,40,50,41,45],
[28,35,0,46,42,30,42,44,35,27],
[34,31,34,0,39,31,23,47,29,34],
[43,35,38,41,0,30,40,52,28,35],
[36,43,50,49,50,0,42,51,38,40],
[44,40,38,57,40,38,0,43,29,38],
[34,30,36,33,28,29,37,0,27,17],
[45,39,45,51,52,42,51,53,0,44],
[36,35,53,46,45,40,42,63,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,33,27,31,25,24,32,29,30],
[54,0,38,43,37,30,27,43,35,32],
[47,42,0,35,28,35,29,35,30,20],
[53,37,45,0,44,35,34,44,37,35],
[49,43,52,36,0,35,32,38,40,41],
[55,50,45,45,45,0,37,45,42,48],
[56,53,51,46,48,43,0,46,37,46],
[48,37,45,36,42,35,34,0,34,31],
[51,45,50,43,40,38,43,46,0,36],
[50,48,60,45,39,32,34,49,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,31,45,34,36,38,48,46,49],
[39,0,31,40,27,39,39,46,39,53],
[49,49,0,46,40,49,45,45,48,54],
[35,40,34,0,27,31,32,40,42,43],
[46,53,40,53,0,41,54,51,50,51],
[44,41,31,49,39,0,47,52,42,45],
[42,41,35,48,26,33,0,45,40,46],
[32,34,35,40,29,28,35,0,37,37],
[34,41,32,38,30,38,40,43,0,54],
[31,27,26,37,29,35,34,43,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,34,41,42,41,36,40,39,39],
[36,0,35,37,39,34,42,36,43,41],
[46,45,0,39,40,35,45,41,44,33],
[39,43,41,0,38,41,37,39,43,36],
[38,41,40,42,0,30,41,39,41,30],
[39,46,45,39,50,0,44,40,41,43],
[44,38,35,43,39,36,0,41,48,37],
[40,44,39,41,41,40,39,0,39,40],
[41,37,36,37,39,39,32,41,0,34],
[41,39,47,44,50,37,43,40,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,39,41,41,47,38,43,42,41],
[44,0,44,43,43,51,51,54,47,38],
[41,36,0,40,42,46,35,50,46,39],
[39,37,40,0,41,44,40,39,32,33],
[39,37,38,39,0,41,39,38,34,40],
[33,29,34,36,39,0,40,41,38,32],
[42,29,45,40,41,40,0,44,37,34],
[37,26,30,41,42,39,36,0,45,37],
[38,33,34,48,46,42,43,35,0,44],
[39,42,41,47,40,48,46,43,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,35,49,41,44,35,47,47,49],
[36,0,45,37,43,32,50,39,50,61],
[45,35,0,28,47,46,34,34,42,60],
[31,43,52,0,47,44,42,42,44,60],
[39,37,33,33,0,34,39,41,34,38],
[36,48,34,36,46,0,39,42,40,52],
[45,30,46,38,41,41,0,50,55,51],
[33,41,46,38,39,38,30,0,33,51],
[33,30,38,36,46,40,25,47,0,49],
[31,19,20,20,42,28,29,29,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,46,42,39,43,53,43,46,46],
[44,0,39,42,43,38,42,42,45,36],
[34,41,0,32,41,37,46,40,41,48],
[38,38,48,0,42,40,36,44,41,38],
[41,37,39,38,0,40,46,44,38,40],
[37,42,43,40,40,0,39,38,48,38],
[27,38,34,44,34,41,0,35,36,39],
[37,38,40,36,36,42,45,0,34,41],
[34,35,39,39,42,32,44,46,0,31],
[34,44,32,42,40,42,41,39,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,33,37,33,41,33,36,36,34],
[42,0,37,40,38,40,40,33,40,34],
[47,43,0,41,36,44,41,43,37,40],
[43,40,39,0,36,44,39,43,40,37],
[47,42,44,44,0,37,38,44,37,37],
[39,40,36,36,43,0,38,40,36,33],
[47,40,39,41,42,42,0,39,35,36],
[44,47,37,37,36,40,41,0,36,30],
[44,40,43,40,43,44,45,44,0,39],
[46,46,40,43,43,47,44,50,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,43,49,45,43,44,39,43,48],
[38,0,50,50,41,44,45,40,41,44],
[37,30,0,41,41,40,39,36,33,41],
[31,30,39,0,36,31,35,39,37,42],
[35,39,39,44,0,41,45,41,36,40],
[37,36,40,49,39,0,43,40,40,43],
[36,35,41,45,35,37,0,38,36,42],
[41,40,44,41,39,40,42,0,39,44],
[37,39,47,43,44,40,44,41,0,44],
[32,36,39,38,40,37,38,36,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,36,54,36,45,36,26,54,36],
[26,0,34,35,45,52,26,43,43,35],
[44,46,0,63,36,63,45,35,45,46],
[26,45,17,0,27,44,27,34,27,44],
[44,35,44,53,0,44,35,35,35,36],
[35,28,17,36,36,0,27,16,19,18],
[44,54,35,53,45,53,0,43,35,36],
[54,37,45,46,45,64,37,0,46,55],
[26,37,35,53,45,61,45,34,0,36],
[44,45,34,36,44,62,44,25,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,38,41,40,42,38,47,43,42],
[34,0,30,30,25,30,34,34,37,33],
[42,50,0,34,33,39,43,48,42,40],
[39,50,46,0,38,40,49,47,45,41],
[40,55,47,42,0,47,47,46,40,44],
[38,50,41,40,33,0,39,38,35,38],
[42,46,37,31,33,41,0,36,39,38],
[33,46,32,33,34,42,44,0,41,33],
[37,43,38,35,40,45,41,39,0,37],
[38,47,40,39,36,42,42,47,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,30,32,34,40,27,38,29,36],
[45,0,32,34,40,36,31,48,36,39],
[50,48,0,39,39,55,40,44,27,47],
[48,46,41,0,42,50,31,34,46,53],
[46,40,41,38,0,41,42,50,38,39],
[40,44,25,30,39,0,28,42,37,39],
[53,49,40,49,38,52,0,38,34,42],
[42,32,36,46,30,38,42,0,37,49],
[51,44,53,34,42,43,46,43,0,51],
[44,41,33,27,41,41,38,31,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,25,34,40,28,24,30,31,20],
[59,0,48,55,53,45,47,40,41,41],
[55,32,0,47,52,40,44,38,39,42],
[46,25,33,0,45,38,38,35,33,30],
[40,27,28,35,0,38,43,25,33,29],
[52,35,40,42,42,0,45,34,35,24],
[56,33,36,42,37,35,0,40,24,28],
[50,40,42,45,55,46,40,0,28,40],
[49,39,41,47,47,45,56,52,0,34],
[60,39,38,50,51,56,52,40,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,37,36,43,42,41,40,45,29],
[48,0,45,38,49,47,51,44,42,39],
[43,35,0,33,50,40,49,37,40,29],
[44,42,47,0,52,40,47,51,50,43],
[37,31,30,28,0,48,43,39,21,28],
[38,33,40,40,32,0,42,47,39,37],
[39,29,31,33,37,38,0,41,31,26],
[40,36,43,29,41,33,39,0,39,33],
[35,38,40,30,59,41,49,41,0,33],
[51,41,51,37,52,43,54,47,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,42,39,35,45,35,41,40,40],
[37,0,35,36,34,44,38,39,42,37],
[38,45,0,35,28,43,35,40,39,41],
[41,44,45,0,37,44,42,44,49,49],
[45,46,52,43,0,52,38,47,50,44],
[35,36,37,36,28,0,35,41,38,39],
[45,42,45,38,42,45,0,45,49,45],
[39,41,40,36,33,39,35,0,34,42],
[40,38,41,31,30,42,31,46,0,40],
[40,43,39,31,36,41,35,38,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,48,48,40,41,42,41,41,46],
[34,0,47,49,42,41,37,46,45,38],
[32,33,0,38,38,42,39,40,41,35],
[32,31,42,0,31,36,33,41,41,35],
[40,38,42,49,0,41,36,44,44,43],
[39,39,38,44,39,0,33,43,42,37],
[38,43,41,47,44,47,0,49,49,44],
[39,34,40,39,36,37,31,0,33,39],
[39,35,39,39,36,38,31,47,0,35],
[34,42,45,45,37,43,36,41,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,36,32,38,43,32,37,39,39],
[40,0,35,36,35,42,22,26,41,44],
[44,45,0,43,39,41,32,36,44,40],
[48,44,37,0,41,49,32,40,43,48],
[42,45,41,39,0,47,24,26,38,43],
[37,38,39,31,33,0,23,36,42,39],
[48,58,48,48,56,57,0,40,43,57],
[43,54,44,40,54,44,40,0,47,50],
[41,39,36,37,42,38,37,33,0,39],
[41,36,40,32,37,41,23,30,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,26,54,28,26,26,0,54,0],
[0,0,26,26,0,0,0,0,26,0],
[54,54,0,54,54,26,54,26,54,54],
[26,54,26,0,26,26,26,26,26,26],
[52,80,26,54,0,52,26,52,80,26],
[54,80,54,54,28,0,28,26,80,28],
[54,80,26,54,54,52,0,26,80,0],
[80,80,54,54,28,54,54,0,80,28],
[26,54,26,54,0,0,0,0,0,0],
[80,80,26,54,54,52,80,52,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,48,44,44,35,42,38,46,46],
[37,0,43,46,36,31,43,35,39,39],
[32,37,0,38,35,25,44,39,38,38],
[36,34,42,0,29,31,40,33,44,37],
[36,44,45,51,0,38,44,41,43,43],
[45,49,55,49,42,0,48,40,48,40],
[38,37,36,40,36,32,0,40,40,37],
[42,45,41,47,39,40,40,0,43,46],
[34,41,42,36,37,32,40,37,0,40],
[34,41,42,43,37,40,43,34,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,33,36,36,39,33,44,35,39],
[40,0,30,35,31,43,37,28,25,41],
[47,50,0,40,36,38,41,36,40,39],
[44,45,40,0,41,43,42,42,37,38],
[44,49,44,39,0,42,39,40,41,46],
[41,37,42,37,38,0,43,34,31,44],
[47,43,39,38,41,37,0,41,34,42],
[36,52,44,38,40,46,39,0,40,42],
[45,55,40,43,39,49,46,40,0,48],
[41,39,41,42,34,36,38,38,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,32,30,34,37,34,29,36,32],
[45,0,33,41,28,36,30,34,36,32],
[48,47,0,34,38,42,39,46,41,35],
[50,39,46,0,33,38,35,40,42,41],
[46,52,42,47,0,46,51,46,54,35],
[43,44,38,42,34,0,39,43,46,37],
[46,50,41,45,29,41,0,39,48,32],
[51,46,34,40,34,37,41,0,50,40],
[44,44,39,38,26,34,32,30,0,32],
[48,48,45,39,45,43,48,40,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,53,40,14,26,55,40,39,27],
[54,0,54,41,55,41,41,54,54,28],
[27,26,0,54,29,0,29,28,41,40],
[40,39,26,0,42,13,28,13,41,13],
[66,25,51,38,0,38,41,38,39,25],
[54,39,80,67,42,0,55,54,68,67],
[25,39,51,52,39,25,0,25,26,38],
[40,26,52,67,42,26,55,0,54,40],
[41,26,39,39,41,12,54,26,0,26],
[53,52,40,67,55,13,42,40,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,39,40,32,36,43,39,42,34],
[45,0,46,42,45,46,45,41,46,37],
[41,34,0,39,38,39,46,35,41,39],
[40,38,41,0,36,42,41,38,45,38],
[48,35,42,44,0,41,44,35,44,46],
[44,34,41,38,39,0,39,40,42,34],
[37,35,34,39,36,41,0,36,35,34],
[41,39,45,42,45,40,44,0,42,42],
[38,34,39,35,36,38,45,38,0,35],
[46,43,41,42,34,46,46,38,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,42,41,39,60,41,80,39,60],
[39,0,39,39,39,39,41,60,39,60],
[38,41,0,20,38,59,20,59,59,39],
[39,41,60,0,60,60,41,80,39,60],
[41,41,42,20,0,62,41,62,41,42],
[20,41,21,20,18,0,20,59,39,39],
[39,39,60,39,39,60,0,39,39,39],
[0,20,21,0,18,21,41,0,0,21],
[41,41,21,41,39,41,41,80,0,60],
[20,20,41,20,38,41,41,59,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,80,41,31,31,41,52,52,54],
[26,0,46,38,11,29,27,52,29,41],
[0,34,0,20,11,20,21,43,32,32],
[39,42,60,0,19,19,29,42,42,42],
[49,69,69,61,0,40,39,61,52,50],
[49,51,60,61,40,0,39,41,43,41],
[39,53,59,51,41,41,0,53,51,53],
[28,28,37,38,19,39,27,0,20,39],
[28,51,48,38,28,37,29,60,0,60],
[26,39,48,38,30,39,27,41,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,35,40,41,39,44,46,45,33],
[49,0,33,60,39,46,42,32,49,37],
[45,47,0,55,35,47,43,45,48,33],
[40,20,25,0,39,27,33,31,37,32],
[39,41,45,41,0,36,43,37,37,34],
[41,34,33,53,44,0,40,45,44,37],
[36,38,37,47,37,40,0,45,45,34],
[34,48,35,49,43,35,35,0,38,39],
[35,31,32,43,43,36,35,42,0,46],
[47,43,47,48,46,43,46,41,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,41,36,38,40,43,44,42,35],
[42,0,47,43,41,42,43,43,46,40],
[39,33,0,40,35,39,33,41,40,37],
[44,37,40,0,40,41,45,46,46,41],
[42,39,45,40,0,47,43,45,48,40],
[40,38,41,39,33,0,44,40,44,32],
[37,37,47,35,37,36,0,38,45,34],
[36,37,39,34,35,40,42,0,42,35],
[38,34,40,34,32,36,35,38,0,33],
[45,40,43,39,40,48,46,45,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,34,55,44,43,42,65,60,66],
[21,0,17,28,33,33,33,33,35,34],
[46,63,0,49,51,38,48,54,51,57],
[25,52,31,0,45,40,44,53,48,49],
[36,47,29,35,0,36,33,49,46,44],
[37,47,42,40,44,0,43,61,53,49],
[38,47,32,36,47,37,0,50,42,44],
[15,47,26,27,31,19,30,0,38,44],
[20,45,29,32,34,27,38,42,0,47],
[14,46,23,31,36,31,36,36,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,30,39,33,28,44,41,40],
[37,0,47,39,40,37,32,42,37,48],
[40,33,0,27,37,19,28,46,34,31],
[50,41,53,0,46,37,33,45,47,43],
[41,40,43,34,0,30,27,48,38,37],
[47,43,61,43,50,0,40,50,40,46],
[52,48,52,47,53,40,0,57,50,47],
[36,38,34,35,32,30,23,0,33,39],
[39,43,46,33,42,40,30,47,0,39],
[40,32,49,37,43,34,33,41,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,34,36,29,33,30,33,35,43],
[48,0,41,47,43,47,39,42,42,50],
[46,39,0,45,34,41,37,37,41,43],
[44,33,35,0,35,44,37,37,48,45],
[51,37,46,45,0,44,40,41,44,44],
[47,33,39,36,36,0,35,40,40,44],
[50,41,43,43,40,45,0,43,42,49],
[47,38,43,43,39,40,37,0,48,44],
[45,38,39,32,36,40,38,32,0,42],
[37,30,37,35,36,36,31,36,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,33,49,35,43,52,38,38,44],
[46,0,21,37,31,29,39,42,18,34],
[47,59,0,57,40,41,53,40,47,46],
[31,43,23,0,25,33,46,35,22,31],
[45,49,40,55,0,56,45,43,30,49],
[37,51,39,47,24,0,36,39,30,43],
[28,41,27,34,35,44,0,40,29,38],
[42,38,40,45,37,41,40,0,37,48],
[42,62,33,58,50,50,51,43,0,46],
[36,46,34,49,31,37,42,32,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,41,39,67,39,67,52,39,52],
[41,0,54,13,41,39,41,39,26,13],
[39,26,0,13,41,39,39,26,13,26],
[41,67,67,0,54,52,67,26,41,52],
[13,39,39,26,0,39,39,39,26,39],
[41,41,41,28,41,0,41,28,15,13],
[13,39,41,13,41,39,0,26,13,26],
[28,41,54,54,41,52,54,0,15,26],
[41,54,67,39,54,65,67,65,0,39],
[28,67,54,28,41,67,54,54,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,37,44,39,39,40,31,36,40],
[46,0,43,47,44,38,36,42,50,44],
[43,37,0,43,37,33,32,33,40,38],
[36,33,37,0,35,34,37,35,39,40],
[41,36,43,45,0,36,39,36,44,36],
[41,42,47,46,44,0,37,34,46,42],
[40,44,48,43,41,43,0,38,50,45],
[49,38,47,45,44,46,42,0,48,45],
[44,30,40,41,36,34,30,32,0,35],
[40,36,42,40,44,38,35,35,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,36,35,43,44,27,51,41,37],
[46,0,43,42,43,47,40,50,43,41],
[44,37,0,42,45,47,38,52,47,39],
[45,38,38,0,46,46,40,47,41,42],
[37,37,35,34,0,42,34,36,43,41],
[36,33,33,34,38,0,36,48,34,37],
[53,40,42,40,46,44,0,51,42,44],
[29,30,28,33,44,32,29,0,28,34],
[39,37,33,39,37,46,38,52,0,36],
[43,39,41,38,39,43,36,46,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,37,43,35,38,47,35,38,39],
[44,0,43,47,44,35,55,49,44,41],
[43,37,0,49,43,40,46,43,48,42],
[37,33,31,0,39,34,47,42,45,39],
[45,36,37,41,0,29,54,36,33,40],
[42,45,40,46,51,0,61,41,45,47],
[33,25,34,33,26,19,0,32,28,27],
[45,31,37,38,44,39,48,0,47,34],
[42,36,32,35,47,35,52,33,0,35],
[41,39,38,41,40,33,53,46,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,35,41,44,36,41,41,37,38],
[43,0,38,46,39,33,33,33,29,37],
[45,42,0,46,43,39,47,33,36,45],
[39,34,34,0,40,30,35,31,27,36],
[36,41,37,40,0,35,36,29,34,33],
[44,47,41,50,45,0,46,38,41,47],
[39,47,33,45,44,34,0,36,32,38],
[39,47,47,49,51,42,44,0,39,46],
[43,51,44,53,46,39,48,41,0,46],
[42,43,35,44,47,33,42,34,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,37,33,42,36,41,43,36,39],
[47,0,46,36,44,43,55,49,46,52],
[43,34,0,39,23,34,48,51,35,36],
[47,44,41,0,38,45,47,49,37,46],
[38,36,57,42,0,37,37,43,37,56],
[44,37,46,35,43,0,35,34,41,53],
[39,25,32,33,43,45,0,30,36,43],
[37,31,29,31,37,46,50,0,34,45],
[44,34,45,43,43,39,44,46,0,43],
[41,28,44,34,24,27,37,35,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,28,35,41,22,27,46,32,20],
[50,0,45,40,57,44,50,54,38,46],
[52,35,0,49,51,40,40,46,34,39],
[45,40,31,0,48,41,40,44,41,33],
[39,23,29,32,0,26,24,44,21,32],
[58,36,40,39,54,0,38,58,45,42],
[53,30,40,40,56,42,0,53,42,39],
[34,26,34,36,36,22,27,0,39,27],
[48,42,46,39,59,35,38,41,0,38],
[60,34,41,47,48,38,41,53,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,34,44,32,47,32,47,43,47],
[46,0,34,44,33,46,35,37,30,37],
[46,46,0,44,46,33,57,46,33,57],
[36,36,36,0,45,47,58,36,56,47],
[48,47,34,35,0,35,48,37,32,37],
[33,34,47,33,45,0,35,23,43,24],
[48,45,23,22,32,45,0,49,32,36],
[33,43,34,44,43,57,31,0,54,33],
[37,50,47,24,48,37,48,26,0,37],
[33,43,23,33,43,56,44,47,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,36,37,41,39,43,38,35,40],
[35,0,39,29,39,35,36,40,38,34],
[44,41,0,35,42,34,41,36,34,32],
[43,51,45,0,44,41,46,46,45,40],
[39,41,38,36,0,36,41,42,40,38],
[41,45,46,39,44,0,42,41,40,39],
[37,44,39,34,39,38,0,35,38,34],
[42,40,44,34,38,39,45,0,37,38],
[45,42,46,35,40,40,42,43,0,34],
[40,46,48,40,42,41,46,42,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,42,43,50,39,43,31,48,40],
[31,0,41,39,39,32,26,23,31,24],
[38,39,0,47,42,36,35,29,43,38],
[37,41,33,0,37,33,45,42,49,33],
[30,41,38,43,0,34,40,32,37,32],
[41,48,44,47,46,0,46,40,52,36],
[37,54,45,35,40,34,0,39,44,33],
[49,57,51,38,48,40,41,0,43,37],
[32,49,37,31,43,28,36,37,0,30],
[40,56,42,47,48,44,47,43,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,47,10,28,38,47,27,42,46],
[44,0,53,44,53,37,44,37,52,44],
[33,27,0,17,34,46,53,27,32,35],
[70,36,63,0,45,46,52,44,42,43],
[52,27,46,35,0,37,62,35,52,46],
[42,43,34,34,43,0,25,25,42,43],
[33,36,27,28,18,55,0,27,51,38],
[53,43,53,36,45,55,53,0,42,44],
[38,28,48,38,28,38,29,38,0,28],
[34,36,45,37,34,37,42,36,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,25,24,41,33,24,16,25,25],
[57,0,25,41,58,49,39,50,50,57],
[55,55,0,39,50,41,46,33,57,41],
[56,39,41,0,42,33,39,32,41,42],
[39,22,30,38,0,39,30,46,30,40],
[47,31,39,47,41,0,47,47,31,42],
[56,41,34,41,50,33,0,50,26,33],
[64,30,47,48,34,33,30,0,48,41],
[55,30,23,39,50,49,54,32,0,57],
[55,23,39,38,40,38,47,39,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,46,35,45,49,40,43,51,40],
[28,0,34,32,37,41,30,33,40,36],
[34,46,0,37,39,46,39,28,46,26],
[45,48,43,0,42,55,39,36,40,36],
[35,43,41,38,0,43,41,34,42,34],
[31,39,34,25,37,0,35,31,34,27],
[40,50,41,41,39,45,0,40,57,40],
[37,47,52,44,46,49,40,0,51,42],
[29,40,34,40,38,46,23,29,0,31],
[40,44,54,44,46,53,40,38,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 80, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_10_80.csv", index=False, header=False)

import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,24,22,22,22,18,19,22,19,20],
[27,0,24,32,25,19,24,28,35,28],
[29,27,0,29,25,24,23,23,21,23],
[29,19,22,0,21,22,20,25,22,21],
[29,26,26,30,0,19,17,22,27,27],
[33,32,27,29,32,0,34,30,27,25],
[32,27,28,31,34,17,0,27,24,27],
[29,23,28,26,29,21,24,0,20,21],
[32,16,30,29,24,24,27,31,0,19],
[31,23,28,30,24,26,24,30,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,23,25,28,27,32,31,25,27],
[28,0,30,21,27,22,26,32,22,29],
[28,21,0,26,29,24,22,28,21,30],
[26,30,25,0,32,26,24,32,24,28],
[23,24,22,19,0,20,25,30,20,26],
[24,29,27,25,31,0,26,35,26,30],
[19,25,29,27,26,25,0,32,24,30],
[20,19,23,19,21,16,19,0,21,26],
[26,29,30,27,31,25,27,30,0,32],
[24,22,21,23,25,21,21,25,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,17,22,20,20,16,21,29,22],
[27,0,22,24,24,22,22,28,27,21],
[34,29,0,24,27,26,21,28,34,25],
[29,27,27,0,22,27,26,21,30,20],
[31,27,24,29,0,27,22,26,34,26],
[31,29,25,24,24,0,23,25,29,22],
[35,29,30,25,29,28,0,23,33,23],
[30,23,23,30,25,26,28,0,29,24],
[22,24,17,21,17,22,18,22,0,20],
[29,30,26,31,25,29,28,27,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,26,19,24,14,9,16,9,19],
[33,0,32,33,23,27,19,19,31,29],
[25,19,0,18,30,21,20,14,20,22],
[32,18,33,0,26,26,15,15,32,33],
[27,28,21,25,0,28,22,29,27,18],
[37,24,30,25,23,0,24,19,37,19],
[42,32,31,36,29,27,0,24,30,33],
[35,32,37,36,22,32,27,0,43,31],
[42,20,31,19,24,14,21,8,0,27],
[32,22,29,18,33,32,18,20,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,29,34,22,25,34,20,29,25],
[27,0,25,34,20,21,31,31,22,26],
[22,26,0,32,16,25,30,21,25,26],
[17,17,19,0,17,18,29,22,22,21],
[29,31,35,34,0,25,34,31,25,26],
[26,30,26,33,26,0,34,24,28,24],
[17,20,21,22,17,17,0,23,22,19],
[31,20,30,29,20,27,28,0,23,23],
[22,29,26,29,26,23,29,28,0,22],
[26,25,25,30,25,27,32,28,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,33,24,35,25,29,31,24,24],
[29,0,28,23,29,31,30,36,27,31],
[18,23,0,21,29,21,25,25,22,27],
[27,28,30,0,40,30,31,27,23,34],
[16,22,22,11,0,19,21,20,17,28],
[26,20,30,21,32,0,28,28,19,23],
[22,21,26,20,30,23,0,23,16,31],
[20,15,26,24,31,23,28,0,13,26],
[27,24,29,28,34,32,35,38,0,41],
[27,20,24,17,23,28,20,25,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,26,34,29,23,24,21,26,26],
[26,0,26,26,24,22,26,28,24,27],
[25,25,0,29,29,24,24,21,25,25],
[17,25,22,0,26,24,25,17,28,25],
[22,27,22,25,0,21,26,22,21,22],
[28,29,27,27,30,0,30,22,25,24],
[27,25,27,26,25,21,0,20,22,25],
[30,23,30,34,29,29,31,0,26,34],
[25,27,26,23,30,26,29,25,0,23],
[25,24,26,26,29,27,26,17,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,37,32,46,27,40,24,21,22],
[25,0,36,25,42,31,36,25,36,22],
[14,15,0,14,31,15,12,9,22,9],
[19,26,37,0,42,15,27,20,33,22],
[5,9,20,9,0,3,20,9,15,12],
[24,20,36,36,48,0,36,26,35,25],
[11,15,39,24,31,15,0,9,18,10],
[27,26,42,31,42,25,42,0,35,34],
[30,15,29,18,36,16,33,16,0,19],
[29,29,42,29,39,26,41,17,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,27,26,23,28,23,28,26,30],
[19,0,22,28,23,30,25,23,20,25],
[24,29,0,26,24,29,26,30,28,32],
[25,23,25,0,23,28,24,27,21,28],
[28,28,27,28,0,25,27,28,24,30],
[23,21,22,23,26,0,20,26,19,28],
[28,26,25,27,24,31,0,25,22,29],
[23,28,21,24,23,25,26,0,23,34],
[25,31,23,30,27,32,29,28,0,30],
[21,26,19,23,21,23,22,17,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,28,28,22,30,29,25,25],
[23,0,21,24,23,20,23,21,20,22],
[25,30,0,27,30,21,25,25,23,22],
[23,27,24,0,25,26,28,24,29,25],
[23,28,21,26,0,26,28,23,25,22],
[29,31,30,25,25,0,23,27,31,24],
[21,28,26,23,23,28,0,20,26,27],
[22,30,26,27,28,24,31,0,22,27],
[26,31,28,22,26,20,25,29,0,25],
[26,29,29,26,29,27,24,24,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,25,24,27,29,24,29,27,28],
[23,0,25,23,22,24,23,31,24,23],
[26,26,0,28,26,26,24,29,28,26],
[27,28,23,0,27,25,31,32,25,26],
[24,29,25,24,0,23,24,29,29,23],
[22,27,25,26,28,0,29,23,27,28],
[27,28,27,20,27,22,0,25,29,28],
[22,20,22,19,22,28,26,0,21,20],
[24,27,23,26,22,24,22,30,0,22],
[23,28,25,25,28,23,23,31,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,22,26,28,24,25,25,23,25],
[27,0,20,26,28,30,26,27,23,27],
[29,31,0,32,35,28,27,31,28,25],
[25,25,19,0,32,29,25,23,20,24],
[23,23,16,19,0,21,21,19,15,18],
[27,21,23,22,30,0,30,21,21,22],
[26,25,24,26,30,21,0,26,25,24],
[26,24,20,28,32,30,25,0,28,24],
[28,28,23,31,36,30,26,23,0,22],
[26,24,26,27,33,29,27,27,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,25,30,36,30,33,26,31,30],
[18,0,21,30,22,19,25,24,26,30],
[26,30,0,34,33,22,32,24,31,28],
[21,21,17,0,30,21,27,20,24,28],
[15,29,18,21,0,24,26,26,22,32],
[21,32,29,30,27,0,35,25,27,27],
[18,26,19,24,25,16,0,15,21,24],
[25,27,27,31,25,26,36,0,29,27],
[20,25,20,27,29,24,30,22,0,27],
[21,21,23,23,19,24,27,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,20,15,17,22,26,18,20,25],
[32,0,23,23,26,25,27,33,29,32],
[31,28,0,31,33,25,33,27,25,34],
[36,28,20,0,26,24,32,33,23,35],
[34,25,18,25,0,29,29,30,21,35],
[29,26,26,27,22,0,29,28,23,30],
[25,24,18,19,22,22,0,24,19,31],
[33,18,24,18,21,23,27,0,22,29],
[31,22,26,28,30,28,32,29,0,34],
[26,19,17,16,16,21,20,22,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,26,25,22,25,30,23,25,27],
[31,0,30,21,21,24,28,25,27,27],
[25,21,0,22,21,23,23,21,19,26],
[26,30,29,0,27,27,31,29,25,31],
[29,30,30,24,0,28,31,24,28,32],
[26,27,28,24,23,0,28,24,24,28],
[21,23,28,20,20,23,0,21,23,26],
[28,26,30,22,27,27,30,0,23,30],
[26,24,32,26,23,27,28,28,0,30],
[24,24,25,20,19,23,25,21,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,19,22,30,30,32,23,21,25],
[28,0,16,21,35,33,27,17,37,22],
[32,35,0,20,30,28,30,25,38,19],
[29,30,31,0,49,29,36,27,35,22],
[21,16,21,2,0,16,17,9,21,14],
[21,18,23,22,35,0,29,25,28,21],
[19,24,21,15,34,22,0,19,32,10],
[28,34,26,24,42,26,32,0,33,20],
[30,14,13,16,30,23,19,18,0,27],
[26,29,32,29,37,30,41,31,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,21,27,33,27,10,25,14,23],
[26,0,13,19,14,19,24,6,26,34],
[30,38,0,19,29,34,24,29,19,28],
[24,32,32,0,32,32,18,27,16,17],
[18,37,22,19,0,31,18,38,27,28],
[24,32,17,19,20,0,7,27,22,23],
[41,27,27,33,33,44,0,25,30,23],
[26,45,22,24,13,24,26,0,26,28],
[37,25,32,35,24,29,21,25,0,34],
[28,17,23,34,23,28,28,23,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,38,37,23,24,35,31,29,26],
[18,0,35,36,28,29,32,27,27,15],
[13,16,0,25,16,14,24,16,15,12],
[14,15,26,0,18,11,24,18,11,12],
[28,23,35,33,0,24,38,32,25,31],
[27,22,37,40,27,0,36,21,16,25],
[16,19,27,27,13,15,0,13,10,12],
[20,24,35,33,19,30,38,0,17,23],
[22,24,36,40,26,35,41,34,0,39],
[25,36,39,39,20,26,39,28,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,18,27,21,16,31,23,24,32],
[18,0,23,27,17,21,39,22,30,33],
[33,28,0,32,25,30,29,30,24,28],
[24,24,19,0,20,22,16,17,18,24],
[30,34,26,31,0,22,40,28,21,45],
[35,30,21,29,29,0,34,25,27,33],
[20,12,22,35,11,17,0,27,19,33],
[28,29,21,34,23,26,24,0,16,26],
[27,21,27,33,30,24,32,35,0,31],
[19,18,23,27,6,18,18,25,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,29,26,23,26,20,34,25,28],
[26,0,26,25,19,14,21,29,25,19],
[22,25,0,23,23,23,24,30,24,23],
[25,26,28,0,23,16,25,26,21,27],
[28,32,28,28,0,21,29,26,24,15],
[25,37,28,35,30,0,25,31,26,26],
[31,30,27,26,22,26,0,32,26,22],
[17,22,21,25,25,20,19,0,16,11],
[26,26,27,30,27,25,25,35,0,26],
[23,32,28,24,36,25,29,40,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,27,22,32,23,27,25,32,26],
[22,0,27,31,38,26,31,31,35,29],
[24,24,0,33,40,27,31,39,34,26],
[29,20,18,0,34,27,28,26,21,19],
[19,13,11,17,0,16,14,18,17,15],
[28,25,24,24,35,0,26,27,29,28],
[24,20,20,23,37,25,0,29,29,25],
[26,20,12,25,33,24,22,0,27,26],
[19,16,17,30,34,22,22,24,0,19],
[25,22,25,32,36,23,26,25,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,33,21,24,24,28,22,27,23],
[28,0,33,23,31,26,27,30,31,25],
[18,18,0,24,25,23,26,28,31,24],
[30,28,27,0,27,23,29,30,31,26],
[27,20,26,24,0,27,24,22,29,24],
[27,25,28,28,24,0,26,25,30,25],
[23,24,25,22,27,25,0,27,31,26],
[29,21,23,21,29,26,24,0,25,28],
[24,20,20,20,22,21,20,26,0,21],
[28,26,27,25,27,26,25,23,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,26,25,27,29,16,25,20,24],
[29,0,29,31,26,30,33,31,22,28],
[25,22,0,27,26,33,24,28,29,26],
[26,20,24,0,30,30,16,25,23,19],
[24,25,25,21,0,29,23,26,21,15],
[22,21,18,21,22,0,17,25,17,20],
[35,18,27,35,28,34,0,23,25,27],
[26,20,23,26,25,26,28,0,21,25],
[31,29,22,28,30,34,26,30,0,28],
[27,23,25,32,36,31,24,26,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,17,28,10,18,15,17,16,27],
[33,0,20,31,15,25,24,19,27,27],
[34,31,0,30,21,31,22,27,28,32],
[23,20,21,0,12,19,13,18,19,23],
[41,36,30,39,0,35,32,24,30,35],
[33,26,20,32,16,0,22,23,25,26],
[36,27,29,38,19,29,0,27,32,33],
[34,32,24,33,27,28,24,0,32,28],
[35,24,23,32,21,26,19,19,0,25],
[24,24,19,28,16,25,18,23,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,26,24,25,24,23,22,27,21],
[24,0,25,23,22,21,25,20,22,22],
[25,26,0,31,24,20,27,25,21,24],
[27,28,20,0,24,22,23,21,24,27],
[26,29,27,27,0,22,28,22,28,19],
[27,30,31,29,29,0,29,26,26,22],
[28,26,24,28,23,22,0,22,28,23],
[29,31,26,30,29,25,29,0,30,27],
[24,29,30,27,23,25,23,21,0,26],
[30,29,27,24,32,29,28,24,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,32,9,23,20,5,24,23,16],
[34,0,32,18,25,27,9,18,21,23],
[19,19,0,22,29,12,20,22,27,22],
[42,33,29,0,25,24,20,27,25,25],
[28,26,22,26,0,28,25,30,30,40],
[31,24,39,27,23,0,21,31,30,34],
[46,42,31,31,26,30,0,42,23,42],
[27,33,29,24,21,20,9,0,23,21],
[28,30,24,26,21,21,28,28,0,31],
[35,28,29,26,11,17,9,30,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,24,14,22,14,22,7,21,21],
[26,0,33,22,27,22,32,25,20,18],
[27,18,0,19,19,17,20,13,20,17],
[37,29,32,0,38,33,32,30,28,24],
[29,24,32,13,0,17,25,9,17,18],
[37,29,34,18,34,0,34,21,23,28],
[29,19,31,19,26,17,0,16,23,17],
[44,26,38,21,42,30,35,0,22,30],
[30,31,31,23,34,28,28,29,0,16],
[30,33,34,27,33,23,34,21,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,19,22,27,25,21,14,20,24],
[25,0,16,25,21,21,23,23,20,26],
[32,35,0,30,27,26,27,24,21,24],
[29,26,21,0,26,24,26,24,20,26],
[24,30,24,25,0,28,25,19,21,27],
[26,30,25,27,23,0,27,23,27,25],
[30,28,24,25,26,24,0,22,22,21],
[37,28,27,27,32,28,29,0,25,28],
[31,31,30,31,30,24,29,26,0,30],
[27,25,27,25,24,26,30,23,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,30,23,34,33,31,28,25,26],
[18,0,27,22,30,24,20,25,26,22],
[21,24,0,29,31,24,28,22,27,24],
[28,29,22,0,33,27,31,24,29,29],
[17,21,20,18,0,18,18,23,18,25],
[18,27,27,24,33,0,30,19,27,24],
[20,31,23,20,33,21,0,21,25,24],
[23,26,29,27,28,32,30,0,28,23],
[26,25,24,22,33,24,26,23,0,22],
[25,29,27,22,26,27,27,28,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,27,28,30,24,27,30,26,27],
[23,0,23,30,36,20,30,28,22,26],
[24,28,0,32,30,34,36,26,13,27],
[23,21,19,0,22,14,19,22,19,18],
[21,15,21,29,0,29,34,23,18,19],
[27,31,17,37,22,0,29,18,25,25],
[24,21,15,32,17,22,0,12,13,23],
[21,23,25,29,28,33,39,0,26,31],
[25,29,38,32,33,26,38,25,0,20],
[24,25,24,33,32,26,28,20,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,20,19,27,23,20,20,20,27],
[22,0,18,20,21,15,15,14,17,17],
[31,33,0,23,25,20,23,22,17,24],
[32,31,28,0,25,19,24,26,25,28],
[24,30,26,26,0,23,27,22,21,26],
[28,36,31,32,28,0,31,25,24,29],
[31,36,28,27,24,20,0,26,25,34],
[31,37,29,25,29,26,25,0,29,23],
[31,34,34,26,30,27,26,22,0,25],
[24,34,27,23,25,22,17,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,29,29,32,33,29,27,25,33],
[21,0,25,20,25,16,23,22,23,24],
[22,26,0,33,30,27,24,27,29,29],
[22,31,18,0,17,26,16,21,25,25],
[19,26,21,34,0,24,28,24,29,33],
[18,35,24,25,27,0,23,30,30,33],
[22,28,27,35,23,28,0,32,26,33],
[24,29,24,30,27,21,19,0,33,33],
[26,28,22,26,22,21,25,18,0,29],
[18,27,22,26,18,18,18,18,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,32,34,27,30,23,24,30,19],
[23,0,29,29,25,25,26,25,26,29],
[19,22,0,19,15,26,14,23,25,18],
[17,22,32,0,20,28,15,22,25,20],
[24,26,36,31,0,29,23,24,22,23],
[21,26,25,23,22,0,16,24,24,20],
[28,25,37,36,28,35,0,30,32,21],
[27,26,28,29,27,27,21,0,32,24],
[21,25,26,26,29,27,19,19,0,27],
[32,22,33,31,28,31,30,27,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,22,26,28,23,30,21,19],
[24,0,26,23,23,22,15,29,21,16],
[23,25,0,14,26,23,25,26,18,26],
[29,28,37,0,27,29,24,36,32,21],
[25,28,25,24,0,26,18,22,16,26],
[23,29,28,22,25,0,23,24,20,28],
[28,36,26,27,33,28,0,27,23,32],
[21,22,25,15,29,27,24,0,26,21],
[30,30,33,19,35,31,28,25,0,29],
[32,35,25,30,25,23,19,30,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,29,37,29,23,29,23,29,37],
[22,0,8,23,23,23,38,8,0,8],
[22,43,0,36,29,36,30,37,42,36],
[14,28,15,0,29,23,30,1,14,14],
[22,28,22,22,0,22,15,22,13,22],
[28,28,15,28,29,0,30,15,14,28],
[22,13,21,21,36,21,0,21,13,21],
[28,43,14,50,29,36,30,0,29,42],
[22,51,9,37,38,37,38,22,0,22],
[14,43,15,37,29,23,30,9,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,19,19,19,37,13,11,19,19],
[39,0,25,49,51,45,35,35,41,51],
[32,26,0,37,34,47,30,35,19,34],
[32,2,14,0,20,24,34,22,23,38],
[32,0,17,31,0,25,18,11,19,27],
[14,6,4,27,26,0,22,17,19,26],
[38,16,21,17,33,29,0,31,33,43],
[40,16,16,29,40,34,20,0,33,40],
[32,10,32,28,32,32,18,18,0,22],
[32,0,17,13,24,25,8,11,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,26,24,12,26,23,27,25,18],
[26,0,28,31,26,22,21,30,36,20],
[25,23,0,22,13,21,24,28,24,17],
[27,20,29,0,10,29,23,32,33,25],
[39,25,38,41,0,32,34,41,47,28],
[25,29,30,22,19,0,26,29,31,19],
[28,30,27,28,17,25,0,29,31,17],
[24,21,23,19,10,22,22,0,25,11],
[26,15,27,18,4,20,20,26,0,9],
[33,31,34,26,23,32,34,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,26,26,27,24,26,35,32,30],
[31,0,29,25,27,22,31,29,30,30],
[25,22,0,19,22,17,12,27,34,31],
[25,26,32,0,40,30,27,36,32,40],
[24,24,29,11,0,21,27,28,28,27],
[27,29,34,21,30,0,20,38,24,31],
[25,20,39,24,24,31,0,30,34,33],
[16,22,24,15,23,13,21,0,22,24],
[19,21,17,19,23,27,17,29,0,27],
[21,21,20,11,24,20,18,27,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,24,28,27,31,23,27,29,31],
[21,0,23,26,25,30,24,32,25,26],
[27,28,0,24,29,29,23,26,26,29],
[23,25,27,0,26,31,21,30,26,26],
[24,26,22,25,0,31,22,26,33,30],
[20,21,22,20,20,0,24,24,22,24],
[28,27,28,30,29,27,0,33,25,31],
[24,19,25,21,25,27,18,0,27,23],
[22,26,25,25,18,29,26,24,0,25],
[20,25,22,25,21,27,20,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,27,34,31,32,28,33,25,29],
[22,0,21,22,22,22,25,20,25,25],
[24,30,0,29,23,28,29,28,22,33],
[17,29,22,0,24,24,27,27,18,24],
[20,29,28,27,0,30,26,27,28,27],
[19,29,23,27,21,0,24,29,22,23],
[23,26,22,24,25,27,0,22,21,21],
[18,31,23,24,24,22,29,0,18,27],
[26,26,29,33,23,29,30,33,0,31],
[22,26,18,27,24,28,30,24,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,36,28,31,30,26,30,19,27],
[28,0,33,32,35,31,26,25,24,18],
[15,18,0,22,22,24,18,16,15,16],
[23,19,29,0,33,35,26,25,24,23],
[20,16,29,18,0,25,20,18,16,23],
[21,20,27,16,26,0,26,20,16,20],
[25,25,33,25,31,25,0,26,20,23],
[21,26,35,26,33,31,25,0,29,22],
[32,27,36,27,35,35,31,22,0,24],
[24,33,35,28,28,31,28,29,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,29,19,27,31,26,20,32,16],
[30,0,24,24,25,29,21,29,30,21],
[22,27,0,26,24,26,16,19,30,25],
[32,27,25,0,25,28,27,30,33,26],
[24,26,27,26,0,29,23,19,32,21],
[20,22,25,23,22,0,21,24,27,17],
[25,30,35,24,28,30,0,26,34,23],
[31,22,32,21,32,27,25,0,38,26],
[19,21,21,18,19,24,17,13,0,20],
[35,30,26,25,30,34,28,25,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,32,26,22,23,24,22,23,24],
[32,0,33,34,23,30,26,28,32,28],
[19,18,0,25,18,16,15,22,19,24],
[25,17,26,0,20,22,26,30,23,25],
[29,28,33,31,0,23,26,29,27,26],
[28,21,35,29,28,0,30,20,27,24],
[27,25,36,25,25,21,0,29,25,29],
[29,23,29,21,22,31,22,0,21,19],
[28,19,32,28,24,24,26,30,0,31],
[27,23,27,26,25,27,22,32,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,29,22,31,31,18,35,20,31],
[20,0,13,22,15,19,0,17,20,15],
[22,38,0,38,38,22,38,22,24,22],
[29,29,13,0,15,15,2,35,20,13],
[20,36,13,36,0,20,36,20,24,20],
[20,32,29,36,31,0,16,36,20,20],
[33,51,13,49,15,35,0,33,35,17],
[16,34,29,16,31,15,18,0,20,18],
[31,31,27,31,27,31,16,31,0,31],
[20,36,29,38,31,31,34,33,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,31,31,35,28,28,25,23,25],
[21,0,26,26,24,23,23,21,21,28],
[20,25,0,18,25,17,14,17,17,18],
[20,25,33,0,29,22,22,28,21,26],
[16,27,26,22,0,23,20,17,22,20],
[23,28,34,29,28,0,19,22,24,26],
[23,28,37,29,31,32,0,24,27,28],
[26,30,34,23,34,29,27,0,24,32],
[28,30,34,30,29,27,24,27,0,30],
[26,23,33,25,31,25,23,19,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,23,32,12,23,6,6,27,22],
[39,0,31,26,22,31,26,26,31,45],
[28,20,0,20,20,27,28,14,10,24],
[19,25,31,0,25,31,19,6,25,25],
[39,29,31,26,0,31,26,14,31,39],
[28,20,24,20,20,0,28,14,20,34],
[45,25,23,32,25,23,0,16,27,35],
[45,25,37,45,37,37,35,0,29,41],
[24,20,41,26,20,31,24,22,0,40],
[29,6,27,26,12,17,16,10,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,20,20,18,26,21,24,28,29],
[27,0,23,28,20,29,21,25,24,30],
[31,28,0,27,22,24,25,29,25,31],
[31,23,24,0,17,25,17,30,25,27],
[33,31,29,34,0,25,22,23,33,31],
[25,22,27,26,26,0,29,22,24,28],
[30,30,26,34,29,22,0,25,32,33],
[27,26,22,21,28,29,26,0,25,29],
[23,27,26,26,18,27,19,26,0,19],
[22,21,20,24,20,23,18,22,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,8,28,4,17,22,8,17,42],
[48,0,23,38,37,31,32,34,32,42],
[43,28,0,35,43,38,43,32,18,45],
[23,13,16,0,15,29,31,17,28,38],
[47,14,8,36,0,17,30,14,17,47],
[34,20,13,22,34,0,21,11,25,34],
[29,19,8,20,21,30,0,24,16,44],
[43,17,19,34,37,40,27,0,18,47],
[34,19,33,23,34,26,35,33,0,36],
[9,9,6,13,4,17,7,4,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,22,24,28,24,28,22,34,23],
[27,0,25,27,29,27,26,20,35,31],
[29,26,0,36,23,33,33,28,34,33],
[27,24,15,0,24,27,29,19,31,21],
[23,22,28,27,0,26,29,23,32,24],
[27,24,18,24,25,0,28,25,26,26],
[23,25,18,22,22,23,0,19,25,24],
[29,31,23,32,28,26,32,0,25,26],
[17,16,17,20,19,25,26,26,0,23],
[28,20,18,30,27,25,27,25,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,28,24,30,28,23,24,29,28],
[30,0,28,32,27,28,25,29,28,30],
[23,23,0,23,19,25,27,22,17,16],
[27,19,28,0,28,26,27,24,25,25],
[21,24,32,23,0,28,26,24,25,23],
[23,23,26,25,23,0,22,20,26,24],
[28,26,24,24,25,29,0,23,23,22],
[27,22,29,27,27,31,28,0,25,25],
[22,23,34,26,26,25,28,26,0,26],
[23,21,35,26,28,27,29,26,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,29,29,28,29,22,30,29,24],
[29,0,25,30,29,32,26,33,33,25],
[22,26,0,29,24,28,19,29,31,25],
[22,21,22,0,24,23,14,23,24,21],
[23,22,27,27,0,30,20,31,23,28],
[22,19,23,28,21,0,21,29,26,22],
[29,25,32,37,31,30,0,31,27,29],
[21,18,22,28,20,22,20,0,26,24],
[22,18,20,27,28,25,24,25,0,26],
[27,26,26,30,23,29,22,27,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,21,24,30,23,25,22,29,20],
[27,0,25,24,30,20,21,20,29,23],
[30,26,0,30,23,20,27,22,25,27],
[27,27,21,0,25,21,17,26,25,22],
[21,21,28,26,0,18,26,18,21,25],
[28,31,31,30,33,0,27,30,27,23],
[26,30,24,34,25,24,0,29,29,21],
[29,31,29,25,33,21,22,0,26,28],
[22,22,26,26,30,24,22,25,0,23],
[31,28,24,29,26,28,30,23,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,25,18,14,21,26,21,23,20],
[27,0,29,25,16,23,24,27,26,19],
[26,22,0,21,13,18,23,20,24,18],
[33,26,30,0,22,22,29,22,23,23],
[37,35,38,29,0,24,26,31,31,28],
[30,28,33,29,27,0,30,27,25,30],
[25,27,28,22,25,21,0,29,25,24],
[30,24,31,29,20,24,22,0,26,26],
[28,25,27,28,20,26,26,25,0,28],
[31,32,33,28,23,21,27,25,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,21,18,8,15,26,19,28,35],
[26,0,17,21,15,19,23,16,32,32],
[30,34,0,34,23,25,23,31,38,30],
[33,30,17,0,35,29,35,33,40,34],
[43,36,28,16,0,33,46,32,45,38],
[36,32,26,22,18,0,24,22,24,38],
[25,28,28,16,5,27,0,28,34,30],
[32,35,20,18,19,29,23,0,26,30],
[23,19,13,11,6,27,17,25,0,25],
[16,19,21,17,13,13,21,21,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,20,23,27,39,28,27,47,42],
[0,0,11,19,18,28,1,9,36,19],
[31,40,0,32,15,40,24,40,36,39],
[28,32,19,0,16,27,20,17,29,43],
[24,33,36,35,0,44,25,25,40,35],
[12,23,11,24,7,0,17,16,28,16],
[23,50,27,31,26,34,0,24,36,38],
[24,42,11,34,26,35,27,0,36,35],
[4,15,15,22,11,23,15,15,0,15],
[9,32,12,8,16,35,13,16,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,31,26,22,20,28,19,15,27],
[25,0,28,27,26,28,27,30,26,27],
[20,23,0,17,19,23,27,19,15,25],
[25,24,34,0,31,33,31,25,23,28],
[29,25,32,20,0,24,25,29,20,28],
[31,23,28,18,27,0,32,24,26,27],
[23,24,24,20,26,19,0,26,22,26],
[32,21,32,26,22,27,25,0,17,21],
[36,25,36,28,31,25,29,34,0,34],
[24,24,26,23,23,24,25,30,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,23,21,26,26,25,21,24],
[26,0,25,24,22,27,27,28,24,22],
[26,26,0,25,27,25,23,26,25,25],
[28,27,26,0,26,31,26,26,25,25],
[30,29,24,25,0,27,29,30,28,24],
[25,24,26,20,24,0,25,27,21,20],
[25,24,28,25,22,26,0,27,26,27],
[26,23,25,25,21,24,24,0,23,20],
[30,27,26,26,23,30,25,28,0,24],
[27,29,26,26,27,31,24,31,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,28,30,24,29,27,25,32,28],
[23,0,23,18,23,29,23,25,24,31],
[23,28,0,29,19,26,33,27,26,29],
[21,33,22,0,18,27,26,22,24,28],
[27,28,32,33,0,26,32,24,29,36],
[22,22,25,24,25,0,20,28,21,26],
[24,28,18,25,19,31,0,26,27,27],
[26,26,24,29,27,23,25,0,25,26],
[19,27,25,27,22,30,24,26,0,28],
[23,20,22,23,15,25,24,25,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,25,23,23,25,24,22,23],
[25,0,26,29,21,19,30,27,21,26],
[25,25,0,23,13,21,25,22,23,26],
[26,22,28,0,22,25,25,31,26,28],
[28,30,38,29,0,29,25,25,25,29],
[28,32,30,26,22,0,29,28,30,23],
[26,21,26,26,26,22,0,28,18,25],
[27,24,29,20,26,23,23,0,22,25],
[29,30,28,25,26,21,33,29,0,29],
[28,25,25,23,22,28,26,26,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,29,28,25,29,25,30,30,28],
[26,0,22,24,25,29,24,24,26,37],
[22,29,0,25,25,28,22,24,29,34],
[23,27,26,0,31,29,28,24,31,28],
[26,26,26,20,0,29,25,27,31,27],
[22,22,23,22,22,0,22,24,22,28],
[26,27,29,23,26,29,0,26,32,31],
[21,27,27,27,24,27,25,0,26,33],
[21,25,22,20,20,29,19,25,0,26],
[23,14,17,23,24,23,20,18,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,28,21,26,20,18,22,24,38],
[20,0,30,19,31,24,24,22,20,34],
[23,21,0,23,30,30,12,28,28,31],
[30,32,28,0,34,32,18,23,25,33],
[25,20,21,17,0,31,10,9,18,26],
[31,27,21,19,20,0,13,18,19,28],
[33,27,39,33,41,38,0,28,24,40],
[29,29,23,28,42,33,23,0,29,27],
[27,31,23,26,33,32,27,22,0,27],
[13,17,20,18,25,23,11,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,28,28,27,29,27,22,27,32],
[22,0,28,26,26,26,27,27,31,35],
[23,23,0,25,25,22,22,25,23,27],
[23,25,26,0,23,25,22,30,27,35],
[24,25,26,28,0,24,27,22,27,33],
[22,25,29,26,27,0,26,24,30,32],
[24,24,29,29,24,25,0,29,31,32],
[29,24,26,21,29,27,22,0,22,30],
[24,20,28,24,24,21,20,29,0,28],
[19,16,24,16,18,19,19,21,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,29,36,38,33,18,29,34,48],
[21,0,28,33,28,27,22,12,37,35],
[22,23,0,31,33,28,28,22,35,40],
[15,18,20,0,24,20,18,18,21,33],
[13,23,18,27,0,27,21,24,33,37],
[18,24,23,31,24,0,19,24,34,35],
[33,29,23,33,30,32,0,29,26,35],
[22,39,29,33,27,27,22,0,32,39],
[17,14,16,30,18,17,25,19,0,25],
[3,16,11,18,14,16,16,12,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,17,17,29,24,22,21,16,21],
[37,0,22,29,31,31,30,20,26,32],
[34,29,0,22,32,32,23,20,26,27],
[34,22,29,0,34,30,26,18,25,24],
[22,20,19,17,0,23,12,11,10,21],
[27,20,19,21,28,0,30,21,12,22],
[29,21,28,25,39,21,0,34,24,29],
[30,31,31,33,40,30,17,0,24,27],
[35,25,25,26,41,39,27,27,0,32],
[30,19,24,27,30,29,22,24,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,26,25,27,23,27,23,25,30],
[29,0,27,26,27,21,23,30,24,24],
[25,24,0,27,18,23,26,30,23,23],
[26,25,24,0,20,27,28,26,21,29],
[24,24,33,31,0,23,24,28,20,28],
[28,30,28,24,28,0,24,27,31,33],
[24,28,25,23,27,27,0,27,28,30],
[28,21,21,25,23,24,24,0,20,23],
[26,27,28,30,31,20,23,31,0,31],
[21,27,28,22,23,18,21,28,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,22,34,23,19,24,17,19,17],
[28,0,15,19,16,20,18,18,11,17],
[29,36,0,30,22,18,24,30,16,26],
[17,32,21,0,17,22,28,26,17,30],
[28,35,29,34,0,24,29,34,29,24],
[32,31,33,29,27,0,22,23,16,23],
[27,33,27,23,22,29,0,28,27,24],
[34,33,21,25,17,28,23,0,15,20],
[32,40,35,34,22,35,24,36,0,25],
[34,34,25,21,27,28,27,31,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,24,26,23,26,22,26,25,26],
[23,0,28,23,27,24,19,27,25,24],
[27,23,0,28,29,29,23,25,23,26],
[25,28,23,0,29,30,27,27,26,28],
[28,24,22,22,0,25,22,27,20,25],
[25,27,22,21,26,0,24,27,29,28],
[29,32,28,24,29,27,0,29,24,27],
[25,24,26,24,24,24,22,0,23,19],
[26,26,28,25,31,22,27,28,0,27],
[25,27,25,23,26,23,24,32,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,27,35,45,30,25,32,29,30],
[21,0,27,35,46,31,28,22,29,29],
[24,24,0,27,47,34,27,24,35,25],
[16,16,24,0,36,27,27,24,26,22],
[6,5,4,15,0,16,11,7,10,14],
[21,20,17,24,35,0,21,23,20,18],
[26,23,24,24,40,30,0,21,22,25],
[19,29,27,27,44,28,30,0,31,37],
[22,22,16,25,41,31,29,20,0,29],
[21,22,26,29,37,33,26,14,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,26,19,21,29,27,25,24,21],
[18,0,31,14,23,18,25,17,24,16],
[25,20,0,19,19,25,25,21,29,23],
[32,37,32,0,22,32,36,24,30,31],
[30,28,32,29,0,28,27,28,26,23],
[22,33,26,19,23,0,31,22,32,20],
[24,26,26,15,24,20,0,20,29,23],
[26,34,30,27,23,29,31,0,35,31],
[27,27,22,21,25,19,22,16,0,28],
[30,35,28,20,28,31,28,20,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,23,35,23,26,39,51,39,39],
[12,0,35,25,12,12,25,22,12,0],
[28,16,0,41,28,28,28,28,28,16],
[16,26,10,0,26,26,26,26,26,26],
[28,39,23,25,0,38,51,38,26,26],
[25,39,23,25,13,0,51,35,23,13],
[12,26,23,25,0,0,0,22,0,0],
[0,29,23,25,13,16,29,0,16,29],
[12,39,23,25,25,28,51,35,0,29],
[12,51,35,25,25,38,51,22,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,37,21,20,8,13,19,11,29],
[21,0,33,32,26,16,18,28,12,22],
[14,18,0,11,17,12,13,23,8,26],
[30,19,40,0,21,17,13,23,9,22],
[31,25,34,30,0,23,19,30,28,22],
[43,35,39,34,28,0,30,32,22,34],
[38,33,38,38,32,21,0,32,26,33],
[32,23,28,28,21,19,19,0,9,23],
[40,39,43,42,23,29,25,42,0,33],
[22,29,25,29,29,17,18,28,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,16,19,24,31,15,20,20,28],
[34,0,30,29,30,26,20,29,25,28],
[35,21,0,27,31,27,29,31,24,30],
[32,22,24,0,26,32,21,30,23,33],
[27,21,20,25,0,25,21,20,20,24],
[20,25,24,19,26,0,20,27,23,30],
[36,31,22,30,30,31,0,27,27,29],
[31,22,20,21,31,24,24,0,22,24],
[31,26,27,28,31,28,24,29,0,33],
[23,23,21,18,27,21,22,27,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,29,29,29,29,25,23,25,22],
[26,0,27,25,27,22,23,21,26,23],
[22,24,0,26,28,29,23,23,24,15],
[22,26,25,0,29,29,30,21,30,24],
[22,24,23,22,0,26,19,20,20,20],
[22,29,22,22,25,0,23,18,24,22],
[26,28,28,21,32,28,0,26,24,27],
[28,30,28,30,31,33,25,0,25,29],
[26,25,27,21,31,27,27,26,0,21],
[29,28,36,27,31,29,24,22,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,16,9,38,33,26,22,35,33],
[15,0,14,15,26,37,23,17,20,11],
[35,37,0,28,29,33,14,28,28,34],
[42,36,23,0,38,33,33,22,47,33],
[13,25,22,13,0,25,26,19,18,18],
[18,14,18,18,26,0,26,26,23,14],
[25,28,37,18,25,25,0,14,39,28],
[29,34,23,29,32,25,37,0,30,25],
[16,31,23,4,33,28,12,21,0,28],
[18,40,17,18,33,37,23,26,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,31,28,27,24,35,19,25,23],
[25,0,21,24,14,27,33,21,19,22],
[20,30,0,33,18,28,30,26,19,21],
[23,27,18,0,17,24,30,23,19,20],
[24,37,33,34,0,33,34,26,29,26],
[27,24,23,27,18,0,31,21,26,20],
[16,18,21,21,17,20,0,15,19,19],
[32,30,25,28,25,30,36,0,27,28],
[26,32,32,32,22,25,32,24,0,28],
[28,29,30,31,25,31,32,23,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,16,14,17,9,14,11,17,16],
[37,0,28,26,29,23,22,26,26,22],
[35,23,0,28,23,27,29,21,19,22],
[37,25,23,0,25,18,19,27,27,25],
[34,22,28,26,0,26,31,27,33,20],
[42,28,24,33,25,0,22,21,28,27],
[37,29,22,32,20,29,0,23,22,16],
[40,25,30,24,24,30,28,0,28,26],
[34,25,32,24,18,23,29,23,0,23],
[35,29,29,26,31,24,35,25,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,46,51,38,27,22,46,27,31],
[0,0,20,18,5,17,12,10,10,5],
[5,31,0,18,5,18,22,10,11,21],
[0,33,33,0,11,17,21,17,10,20],
[13,46,46,40,0,23,17,46,39,40],
[24,34,33,34,28,0,38,33,34,38],
[29,39,29,30,34,13,0,39,39,34],
[5,41,41,34,5,18,12,0,15,21],
[24,41,40,41,12,17,12,36,0,34],
[20,46,30,31,11,13,17,30,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,16,26,9,11,27,24,18,6],
[24,0,11,26,13,18,25,30,23,19],
[35,40,0,36,21,22,44,43,37,30],
[25,25,15,0,9,13,27,21,25,16],
[42,38,30,42,0,23,37,41,30,26],
[40,33,29,38,28,0,36,33,29,25],
[24,26,7,24,14,15,0,23,19,11],
[27,21,8,30,10,18,28,0,24,15],
[33,28,14,26,21,22,32,27,0,23],
[45,32,21,35,25,26,40,36,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,23,25,22,27,19,22,25,21],
[33,0,28,26,22,32,28,26,26,32],
[28,23,0,22,24,23,22,21,27,28],
[26,25,29,0,27,27,27,20,28,29],
[29,29,27,24,0,25,24,21,24,26],
[24,19,28,24,26,0,28,25,24,28],
[32,23,29,24,27,23,0,25,24,32],
[29,25,30,31,30,26,26,0,32,32],
[26,25,24,23,27,27,27,19,0,31],
[30,19,23,22,25,23,19,19,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,27,0,48,24,24,0,48,0],
[3,0,3,0,24,3,0,3,51,3],
[24,48,0,24,24,48,48,24,48,24],
[51,51,27,0,51,27,51,27,51,3],
[3,27,27,0,0,27,24,3,51,3],
[27,48,3,24,24,0,48,24,48,27],
[27,51,3,0,27,3,0,3,51,3],
[51,48,27,24,48,27,48,0,51,27],
[3,0,3,0,0,3,0,0,0,3],
[51,48,27,48,48,24,48,24,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,15,33,27,26,32,33,23,21],
[31,0,23,29,34,24,36,24,36,40],
[36,28,0,22,27,21,29,27,34,26],
[18,22,29,0,27,27,39,24,19,29],
[24,17,24,24,0,27,39,29,36,21],
[25,27,30,24,24,0,35,30,21,30],
[19,15,22,12,12,16,0,16,18,22],
[18,27,24,27,22,21,35,0,12,35],
[28,15,17,32,15,30,33,39,0,28],
[30,11,25,22,30,21,29,16,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,16,18,21,17,15,13,20,24],
[36,0,31,24,26,25,23,29,23,28],
[35,20,0,32,26,29,26,27,31,29],
[33,27,19,0,27,30,24,19,25,32],
[30,25,25,24,0,35,24,25,29,39],
[34,26,22,21,16,0,32,25,24,29],
[36,28,25,27,27,19,0,24,26,25],
[38,22,24,32,26,26,27,0,29,33],
[31,28,20,26,22,27,25,22,0,28],
[27,23,22,19,12,22,26,18,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,25,29,29,25,30,29,34,32],
[22,0,31,30,29,33,26,27,25,23],
[26,20,0,31,30,28,31,26,32,31],
[22,21,20,0,22,26,26,22,20,22],
[22,22,21,29,0,23,24,19,26,22],
[26,18,23,25,28,0,21,24,24,25],
[21,25,20,25,27,30,0,20,25,26],
[22,24,25,29,32,27,31,0,27,27],
[17,26,19,31,25,27,26,24,0,25],
[19,28,20,29,29,26,25,24,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,26,27,30,24,33,27,26,29],
[20,0,26,22,22,27,32,20,28,25],
[25,25,0,25,33,26,23,19,27,18],
[24,29,26,0,32,28,34,23,29,27],
[21,29,18,19,0,16,27,22,24,20],
[27,24,25,23,35,0,27,24,28,28],
[18,19,28,17,24,24,0,19,25,20],
[24,31,32,28,29,27,32,0,28,29],
[25,23,24,22,27,23,26,23,0,28],
[22,26,33,24,31,23,31,22,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,24,31,24,6,21,23,20,12],
[32,0,25,24,36,32,25,24,38,29],
[27,26,0,25,25,22,31,20,20,23],
[20,27,26,0,28,19,17,22,22,17],
[27,15,26,23,0,11,28,16,20,16],
[45,19,29,32,40,0,33,28,27,30],
[30,26,20,34,23,18,0,23,21,26],
[28,27,31,29,35,23,28,0,24,27],
[31,13,31,29,31,24,30,27,0,20],
[39,22,28,34,35,21,25,24,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,34,33,22,26,26,25,15,29],
[29,0,36,34,27,29,31,28,38,22],
[17,15,0,25,13,26,21,24,21,13],
[18,17,26,0,17,20,17,19,18,28],
[29,24,38,34,0,37,40,36,37,27],
[25,22,25,31,14,0,17,29,15,21],
[25,20,30,34,11,34,0,33,29,19],
[26,23,27,32,15,22,18,0,12,22],
[36,13,30,33,14,36,22,39,0,28],
[22,29,38,23,24,30,32,29,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,25,21,25,25,26,32,25,26],
[22,0,26,20,26,18,19,24,21,22],
[26,25,0,15,26,21,24,30,20,28],
[30,31,36,0,27,25,27,33,26,31],
[26,25,25,24,0,21,20,25,26,28],
[26,33,30,26,30,0,25,31,26,30],
[25,32,27,24,31,26,0,29,24,23],
[19,27,21,18,26,20,22,0,24,25],
[26,30,31,25,25,25,27,27,0,27],
[25,29,23,20,23,21,28,26,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,22,26,25,17,23,25,29,25],
[32,0,28,27,27,23,28,30,29,26],
[29,23,0,26,22,22,27,28,25,30],
[25,24,25,0,30,18,21,32,31,32],
[26,24,29,21,0,27,23,30,25,27],
[34,28,29,33,24,0,27,34,27,33],
[28,23,24,30,28,24,0,29,33,26],
[26,21,23,19,21,17,22,0,23,29],
[22,22,26,20,26,24,18,28,0,29],
[26,25,21,19,24,18,25,22,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,19,23,29,26,24,23,21,28],
[21,0,18,13,24,16,18,22,20,26],
[32,33,0,24,34,33,27,34,34,14],
[28,38,27,0,30,31,22,32,20,34],
[22,27,17,21,0,21,20,19,20,22],
[25,35,18,20,30,0,19,26,23,13],
[27,33,24,29,31,32,0,31,27,27],
[28,29,17,19,32,25,20,0,20,23],
[30,31,17,31,31,28,24,31,0,25],
[23,25,37,17,29,38,24,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,20,25,25,21,18,19,24,20],
[32,0,30,27,35,29,20,35,33,23],
[31,21,0,28,27,27,18,24,25,27],
[26,24,23,0,32,23,20,25,28,22],
[26,16,24,19,0,21,17,19,20,24],
[30,22,24,28,30,0,21,28,25,26],
[33,31,33,31,34,30,0,25,30,30],
[32,16,27,26,32,23,26,0,27,26],
[27,18,26,23,31,26,21,24,0,23],
[31,28,24,29,27,25,21,25,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,23,29,21,37,23,23,30,23],
[26,0,27,33,26,35,26,15,22,31],
[28,24,0,26,26,30,26,20,24,26],
[22,18,25,0,15,24,21,20,21,20],
[30,25,25,36,0,33,30,28,32,30],
[14,16,21,27,18,0,12,14,23,18],
[28,25,25,30,21,39,0,21,29,25],
[28,36,31,31,23,37,30,0,24,32],
[21,29,27,30,19,28,22,27,0,26],
[28,20,25,31,21,33,26,19,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,15,23,21,32,26,21,22,12],
[28,0,27,26,26,32,23,22,25,21],
[36,24,0,29,30,36,21,26,24,25],
[28,25,22,0,28,34,27,22,26,22],
[30,25,21,23,0,31,23,25,24,26],
[19,19,15,17,20,0,26,18,26,17],
[25,28,30,24,28,25,0,19,23,22],
[30,29,25,29,26,33,32,0,33,23],
[29,26,27,25,27,25,28,18,0,23],
[39,30,26,29,25,34,29,28,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,22,13,25,22,20,17,24,22],
[30,0,26,23,29,22,37,20,25,28],
[29,25,0,30,39,26,32,29,35,18],
[38,28,21,0,31,26,23,12,29,17],
[26,22,12,20,0,14,21,10,17,13],
[29,29,25,25,37,0,23,13,15,21],
[31,14,19,28,30,28,0,17,17,30],
[34,31,22,39,41,38,34,0,30,22],
[27,26,16,22,34,36,34,21,0,27],
[29,23,33,34,38,30,21,29,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,23,30,28,29,23,24,27,23],
[24,0,29,29,27,28,24,24,30,23],
[28,22,0,27,30,28,23,30,27,26],
[21,22,24,0,22,27,20,28,27,24],
[23,24,21,29,0,27,27,26,29,22],
[22,23,23,24,24,0,21,25,28,25],
[28,27,28,31,24,30,0,30,29,25],
[27,27,21,23,25,26,21,0,27,23],
[24,21,24,24,22,23,22,24,0,19],
[28,28,25,27,29,26,26,28,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,22,25,21,23,21,22,25,25],
[26,0,20,27,24,18,22,19,23,21],
[29,31,0,25,22,25,25,23,23,28],
[26,24,26,0,19,20,19,23,23,23],
[30,27,29,32,0,21,21,22,24,27],
[28,33,26,31,30,0,27,25,28,32],
[30,29,26,32,30,24,0,30,27,28],
[29,32,28,28,29,26,21,0,24,30],
[26,28,28,28,27,23,24,27,0,22],
[26,30,23,28,24,19,23,21,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,25,32,35,28,34,28,32],
[24,0,24,28,28,32,25,29,23,33],
[24,27,0,26,31,31,27,32,26,35],
[26,23,25,0,27,32,28,32,28,30],
[19,23,20,24,0,26,28,27,26,27],
[16,19,20,19,25,0,16,21,20,26],
[23,26,24,23,23,35,0,31,26,30],
[17,22,19,19,24,30,20,0,19,24],
[23,28,25,23,25,31,25,32,0,29],
[19,18,16,21,24,25,21,27,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,26,24,23,30,26,30,21,27],
[24,0,22,21,25,27,19,28,27,23],
[25,29,0,27,21,27,28,26,31,26],
[27,30,24,0,23,27,24,28,29,31],
[28,26,30,28,0,27,24,30,26,24],
[21,24,24,24,24,0,22,23,22,25],
[25,32,23,27,27,29,0,26,26,24],
[21,23,25,23,21,28,25,0,26,23],
[30,24,20,22,25,29,25,25,0,23],
[24,28,25,20,27,26,27,28,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,34,21,23,35,36,27,19,25],
[29,0,32,23,30,32,26,33,23,29],
[17,19,0,14,19,23,20,23,14,18],
[30,28,37,0,25,34,33,36,27,23],
[28,21,32,26,0,33,31,27,24,27],
[16,19,28,17,18,0,28,24,18,22],
[15,25,31,18,20,23,0,23,17,20],
[24,18,28,15,24,27,28,0,20,23],
[32,28,37,24,27,33,34,31,0,32],
[26,22,33,28,24,29,31,28,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,22,30,20,24,26,30,19,17],
[24,0,18,24,23,18,30,29,20,20],
[29,33,0,33,24,22,29,29,26,20],
[21,27,18,0,23,23,23,31,22,17],
[31,28,27,28,0,28,30,27,24,29],
[27,33,29,28,23,0,28,33,23,23],
[25,21,22,28,21,23,0,25,17,18],
[21,22,22,20,24,18,26,0,22,19],
[32,31,25,29,27,28,34,29,0,32],
[34,31,31,34,22,28,33,32,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,21,17,29,30,15,20,21,27],
[36,0,30,32,26,39,25,31,35,32],
[30,21,0,21,19,27,15,24,30,24],
[34,19,30,0,32,35,27,32,30,31],
[22,25,32,19,0,32,20,17,25,28],
[21,12,24,16,19,0,13,20,15,21],
[36,26,36,24,31,38,0,29,31,29],
[31,20,27,19,34,31,22,0,30,28],
[30,16,21,21,26,36,20,21,0,27],
[24,19,27,20,23,30,22,23,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,27,29,27,24,32,19,24,30],
[28,0,19,25,27,23,29,19,27,26],
[24,32,0,32,28,26,29,28,28,31],
[22,26,19,0,22,22,27,20,22,27],
[24,24,23,29,0,23,35,22,26,32],
[27,28,25,29,28,0,30,20,28,29],
[19,22,22,24,16,21,0,15,24,29],
[32,32,23,31,29,31,36,0,27,33],
[27,24,23,29,25,23,27,24,0,27],
[21,25,20,24,19,22,22,18,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,24,30,28,22,32,32,21,30],
[28,0,23,32,28,29,31,29,30,33],
[27,28,0,31,24,23,27,30,28,26],
[21,19,20,0,24,20,27,24,28,25],
[23,23,27,27,0,22,25,25,22,25],
[29,22,28,31,29,0,32,28,28,30],
[19,20,24,24,26,19,0,24,24,28],
[19,22,21,27,26,23,27,0,28,34],
[30,21,23,23,29,23,27,23,0,32],
[21,18,25,26,26,21,23,17,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,26,30,14,20,25,28,26,26],
[30,0,35,39,28,24,33,40,31,24],
[25,16,0,29,14,21,23,31,25,21],
[21,12,22,0,23,18,26,29,25,25],
[37,23,37,28,0,28,38,34,36,32],
[31,27,30,33,23,0,33,36,29,22],
[26,18,28,25,13,18,0,25,23,16],
[23,11,20,22,17,15,26,0,26,16],
[25,20,26,26,15,22,28,25,0,17],
[25,27,30,26,19,29,35,35,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,23,17,20,31,22,20,25],
[28,0,23,24,14,19,22,25,24,25],
[25,28,0,25,22,24,34,27,20,33],
[28,27,26,0,26,27,24,29,27,25],
[34,37,29,25,0,28,30,36,29,33],
[31,32,27,24,23,0,27,26,23,32],
[20,29,17,27,21,24,0,24,24,27],
[29,26,24,22,15,25,27,0,24,23],
[31,27,31,24,22,28,27,27,0,28],
[26,26,18,26,18,19,24,28,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,15,22,23,23,20,19,17],
[26,0,32,31,29,36,27,19,23,26],
[26,19,0,25,23,24,24,28,24,19],
[36,20,26,0,28,30,26,26,17,16],
[29,22,28,23,0,26,23,12,12,13],
[28,15,27,21,25,0,14,13,23,17],
[28,24,27,25,28,37,0,14,25,34],
[31,32,23,25,39,38,37,0,30,27],
[32,28,27,34,39,28,26,21,0,33],
[34,25,32,35,38,34,17,24,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,19,51,27,27,27,19,27,27],
[32,0,24,32,32,32,32,27,48,35],
[32,27,0,32,32,32,8,27,48,11],
[0,19,19,0,16,3,3,19,16,19],
[24,19,19,35,0,27,3,19,43,3],
[24,19,19,48,24,0,3,19,48,27],
[24,19,43,48,48,48,0,43,48,51],
[32,24,24,32,32,32,8,0,48,8],
[24,3,3,35,8,3,3,3,0,3],
[24,16,40,32,48,24,0,43,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,24,24,25,20,23,23,24,23],
[31,0,25,28,27,26,32,26,26,22],
[27,26,0,26,23,22,23,29,31,24],
[27,23,25,0,21,26,23,26,22,24],
[26,24,28,30,0,24,24,31,30,23],
[31,25,29,25,27,0,24,25,27,28],
[28,19,28,28,27,27,0,22,27,23],
[28,25,22,25,20,26,29,0,24,24],
[27,25,20,29,21,24,24,27,0,24],
[28,29,27,27,28,23,28,27,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,30,24,27,32,25,29,20,27],
[19,0,22,16,26,24,24,18,15,21],
[21,29,0,25,30,30,26,19,19,26],
[27,35,26,0,36,33,30,23,26,36],
[24,25,21,15,0,26,19,22,18,24],
[19,27,21,18,25,0,21,17,15,21],
[26,27,25,21,32,30,0,23,17,27],
[22,33,32,28,29,34,28,0,25,32],
[31,36,32,25,33,36,34,26,0,34],
[24,30,25,15,27,30,24,19,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,25,22,25,23,17,27,19,27],
[28,0,22,26,22,25,23,26,25,25],
[26,29,0,24,24,24,23,28,23,26],
[29,25,27,0,30,26,26,28,23,29],
[26,29,27,21,0,26,28,29,26,29],
[28,26,27,25,25,0,27,31,26,32],
[34,28,28,25,23,24,0,30,23,26],
[24,25,23,23,22,20,21,0,19,23],
[32,26,28,28,25,25,28,32,0,33],
[24,26,25,22,22,19,25,28,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,26,23,21,25,25,34,24,17],
[21,0,21,20,21,12,18,16,20,15],
[25,30,0,27,27,25,30,23,29,26],
[28,31,24,0,33,26,25,23,27,22],
[30,30,24,18,0,31,25,25,28,23],
[26,39,26,25,20,0,28,25,27,21],
[26,33,21,26,26,23,0,24,28,20],
[17,35,28,28,26,26,27,0,33,26],
[27,31,22,24,23,24,23,18,0,22],
[34,36,25,29,28,30,31,25,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,23,30,31,29,16,30,23,23],
[26,0,26,34,24,32,28,37,25,26],
[28,25,0,29,28,30,24,38,27,26],
[21,17,22,0,22,24,23,25,17,21],
[20,27,23,29,0,30,24,33,28,30],
[22,19,21,27,21,0,21,27,18,24],
[35,23,27,28,27,30,0,35,28,31],
[21,14,13,26,18,24,16,0,20,18],
[28,26,24,34,23,33,23,31,0,25],
[28,25,25,30,21,27,20,33,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,22,22,15,25,28,28,28,23],
[30,0,30,26,20,29,28,32,29,29],
[29,21,0,24,18,25,23,30,32,27],
[29,25,27,0,27,31,30,29,33,26],
[36,31,33,24,0,28,30,29,35,33],
[26,22,26,20,23,0,31,32,32,26],
[23,23,28,21,21,20,0,30,27,21],
[23,19,21,22,22,19,21,0,20,21],
[23,22,19,18,16,19,24,31,0,21],
[28,22,24,25,18,25,30,30,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,24,30,27,29,30,30,25,27],
[28,0,23,32,24,29,27,35,24,30],
[27,28,0,31,23,27,28,30,25,32],
[21,19,20,0,20,25,20,22,20,24],
[24,27,28,31,0,34,29,32,28,22],
[22,22,24,26,17,0,24,26,26,21],
[21,24,23,31,22,27,0,27,29,25],
[21,16,21,29,19,25,24,0,22,20],
[26,27,26,31,23,25,22,29,0,27],
[24,21,19,27,29,30,26,31,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,34,24,34,34,37,33,23,42],
[32,0,38,24,33,28,34,27,18,36],
[17,13,0,14,18,18,21,9,8,18],
[27,27,37,0,20,30,28,20,22,32],
[17,18,33,31,0,30,30,22,22,34],
[17,23,33,21,21,0,25,21,14,27],
[14,17,30,23,21,26,0,18,10,30],
[18,24,42,31,29,30,33,0,27,34],
[28,33,43,29,29,37,41,24,0,39],
[9,15,33,19,17,24,21,17,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,28,30,27,24,28,28,25,24],
[26,0,28,26,19,24,22,21,24,26],
[23,23,0,28,22,26,28,24,28,27],
[21,25,23,0,24,26,24,23,29,28],
[24,32,29,27,0,26,30,27,32,26],
[27,27,25,25,25,0,29,25,30,28],
[23,29,23,27,21,22,0,29,27,27],
[23,30,27,28,24,26,22,0,27,27],
[26,27,23,22,19,21,24,24,0,27],
[27,25,24,23,25,23,24,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,18,28,24,27,22,20,22,26],
[25,0,20,23,19,21,23,26,28,28],
[33,31,0,31,23,34,29,27,25,31],
[23,28,20,0,22,24,21,22,20,21],
[27,32,28,29,0,29,27,28,28,24],
[24,30,17,27,22,0,24,25,19,30],
[29,28,22,30,24,27,0,29,27,29],
[31,25,24,29,23,26,22,0,19,24],
[29,23,26,31,23,32,24,32,0,33],
[25,23,20,30,27,21,22,27,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,23,20,12,23,23,21,20,20],
[26,0,23,22,27,24,25,25,22,24],
[28,28,0,20,19,28,24,20,21,21],
[31,29,31,0,31,27,29,29,26,25],
[39,24,32,20,0,25,24,26,27,26],
[28,27,23,24,26,0,28,21,22,24],
[28,26,27,22,27,23,0,26,20,22],
[30,26,31,22,25,30,25,0,22,21],
[31,29,30,25,24,29,31,29,0,29],
[31,27,30,26,25,27,29,30,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,27,30,25,27,28,28,22,25],
[14,0,20,23,24,21,15,23,16,24],
[24,31,0,23,28,25,20,24,21,22],
[21,28,28,0,26,22,29,21,20,23],
[26,27,23,25,0,26,21,31,16,26],
[24,30,26,29,25,0,22,23,25,21],
[23,36,31,22,30,29,0,21,22,21],
[23,28,27,30,20,28,30,0,21,24],
[29,35,30,31,35,26,29,30,0,25],
[26,27,29,28,25,30,30,27,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,21,25,34,24,40,32,26,41],
[12,0,7,15,18,7,17,31,25,34],
[30,44,0,22,26,23,36,36,32,39],
[26,36,29,0,21,26,33,39,29,33],
[17,33,25,30,0,32,32,30,26,32],
[27,44,28,25,19,0,40,37,33,43],
[11,34,15,18,19,11,0,34,27,36],
[19,20,15,12,21,14,17,0,20,20],
[25,26,19,22,25,18,24,31,0,33],
[10,17,12,18,19,8,15,31,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,23,28,24,34,30,31,37,30],
[15,0,17,21,17,23,20,18,40,17],
[28,34,0,39,33,36,27,22,31,33],
[23,30,12,0,24,25,31,20,32,24],
[27,34,18,27,0,32,33,25,37,29],
[17,28,15,26,19,0,24,23,37,21],
[21,31,24,20,18,27,0,20,30,32],
[20,33,29,31,26,28,31,0,32,30],
[14,11,20,19,14,14,21,19,0,20],
[21,34,18,27,22,30,19,21,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,12,19,17,20,15,20,15,18],
[37,0,23,32,28,24,21,27,25,26],
[39,28,0,36,33,25,26,29,30,33],
[32,19,15,0,21,18,23,24,11,23],
[34,23,18,30,0,22,20,30,23,26],
[31,27,26,33,29,0,18,31,30,27],
[36,30,25,28,31,33,0,32,30,23],
[31,24,22,27,21,20,19,0,11,28],
[36,26,21,40,28,21,21,40,0,30],
[33,25,18,28,25,24,28,23,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,28,31,25,26,32,27,25,23],
[33,0,24,29,35,30,29,29,26,32],
[23,27,0,26,29,26,31,20,27,26],
[20,22,25,0,21,22,30,21,24,29],
[26,16,22,30,0,28,30,23,23,26],
[25,21,25,29,23,0,27,26,29,20],
[19,22,20,21,21,24,0,23,22,28],
[24,22,31,30,28,25,28,0,28,27],
[26,25,24,27,28,22,29,23,0,19],
[28,19,25,22,25,31,23,24,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,24,21,20,21,23,21,31,19],
[30,0,32,27,21,26,29,24,31,23],
[27,19,0,18,24,14,21,18,24,24],
[30,24,33,0,25,25,30,24,31,33],
[31,30,27,26,0,27,22,21,33,25],
[30,25,37,26,24,0,36,28,35,31],
[28,22,30,21,29,15,0,20,31,23],
[30,27,33,27,30,23,31,0,28,26],
[20,20,27,20,18,16,20,23,0,18],
[32,28,27,18,26,20,28,25,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,32,25,32,24,30,33,37,32],
[15,0,21,21,23,21,19,21,26,30],
[19,30,0,21,29,20,23,28,25,32],
[26,30,30,0,24,19,22,27,30,33],
[19,28,22,27,0,22,26,25,27,30],
[27,30,31,32,29,0,25,31,32,35],
[21,32,28,29,25,26,0,26,28,30],
[18,30,23,24,26,20,25,0,23,30],
[14,25,26,21,24,19,23,28,0,24],
[19,21,19,18,21,16,21,21,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,28,28,25,25,29,23,23,27],
[32,0,28,27,24,23,30,28,25,32],
[23,23,0,26,25,23,27,23,24,24],
[23,24,25,0,24,23,28,23,24,21],
[26,27,26,27,0,24,30,24,25,26],
[26,28,28,28,27,0,24,28,26,28],
[22,21,24,23,21,27,0,22,25,28],
[28,23,28,28,27,23,29,0,26,24],
[28,26,27,27,26,25,26,25,0,24],
[24,19,27,30,25,23,23,27,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,17,25,32,27,34,32,37,24],
[18,0,13,16,14,29,22,21,13,12],
[34,38,0,26,30,31,24,25,29,20],
[26,35,25,0,26,33,31,36,24,11],
[19,37,21,25,0,29,20,33,28,22],
[24,22,20,18,22,0,21,29,19,23],
[17,29,27,20,31,30,0,30,15,18],
[19,30,26,15,18,22,21,0,13,5],
[14,38,22,27,23,32,36,38,0,31],
[27,39,31,40,29,28,33,46,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,27,19,24,28,23,27,23,29],
[25,0,17,15,30,20,18,22,16,31],
[24,34,0,24,36,25,26,31,30,34],
[32,36,27,0,30,28,31,25,36,35],
[27,21,15,21,0,24,18,22,25,21],
[23,31,26,23,27,0,26,26,21,31],
[28,33,25,20,33,25,0,26,18,26],
[24,29,20,26,29,25,25,0,24,33],
[28,35,21,15,26,30,33,27,0,35],
[22,20,17,16,30,20,25,18,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,20,26,24,22,28,25,27,28],
[25,0,21,27,22,19,26,33,25,26],
[31,30,0,27,24,28,26,31,25,31],
[25,24,24,0,20,22,19,31,22,23],
[27,29,27,31,0,23,27,28,27,26],
[29,32,23,29,28,0,27,30,28,33],
[23,25,25,32,24,24,0,32,25,30],
[26,18,20,20,23,21,19,0,12,30],
[24,26,26,29,24,23,26,39,0,24],
[23,25,20,28,25,18,21,21,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,30,22,27,23,27,28,30,28],
[26,0,26,25,24,22,23,28,28,25],
[21,25,0,23,22,20,21,25,24,25],
[29,26,28,0,27,24,25,27,28,27],
[24,27,29,24,0,18,23,23,27,24],
[28,29,31,27,33,0,24,31,32,32],
[24,28,30,26,28,27,0,27,27,28],
[23,23,26,24,28,20,24,0,27,25],
[21,23,27,23,24,19,24,24,0,22],
[23,26,26,24,27,19,23,26,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,25,18,25,27,15,20,12,24],
[27,0,24,28,27,27,22,27,17,31],
[26,27,0,24,28,35,23,14,23,22],
[33,23,27,0,29,32,17,30,29,33],
[26,24,23,22,0,29,22,20,20,28],
[24,24,16,19,22,0,25,25,15,28],
[36,29,28,34,29,26,0,30,22,31],
[31,24,37,21,31,26,21,0,28,31],
[39,34,28,22,31,36,29,23,0,34],
[27,20,29,18,23,23,20,20,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,27,23,33,27,20,29,30,27],
[22,0,20,26,27,26,25,23,26,23],
[24,31,0,23,27,34,27,25,29,30],
[28,25,28,0,30,33,27,26,25,27],
[18,24,24,21,0,21,18,22,21,25],
[24,25,17,18,30,0,18,22,23,25],
[31,26,24,24,33,33,0,27,29,27],
[22,28,26,25,29,29,24,0,23,28],
[21,25,22,26,30,28,22,28,0,30],
[24,28,21,24,26,26,24,23,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,21,30,23,26,23,22,21,25],
[22,0,24,27,29,21,30,26,22,24],
[30,27,0,33,30,28,31,26,25,28],
[21,24,18,0,26,21,26,22,19,22],
[28,22,21,25,0,29,27,22,27,25],
[25,30,23,30,22,0,29,23,20,26],
[28,21,20,25,24,22,0,17,23,26],
[29,25,25,29,29,28,34,0,24,29],
[30,29,26,32,24,31,28,27,0,35],
[26,27,23,29,26,25,25,22,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,27,29,24,22,24,22,21,24],
[31,0,20,32,28,17,23,22,19,27],
[24,31,0,39,32,34,35,26,29,31],
[22,19,12,0,23,21,21,24,16,16],
[27,23,19,28,0,27,31,26,27,30],
[29,34,17,30,24,0,29,28,25,27],
[27,28,16,30,20,22,0,18,13,23],
[29,29,25,27,25,23,33,0,21,26],
[30,32,22,35,24,26,38,30,0,25],
[27,24,20,35,21,24,28,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,20,31,25,23,21,20,19,18],
[20,0,18,31,20,24,19,27,18,19],
[31,33,0,27,28,34,24,23,21,22],
[20,20,24,0,22,26,20,23,22,17],
[26,31,23,29,0,31,18,23,17,26],
[28,27,17,25,20,0,18,19,16,18],
[30,32,27,31,33,33,0,23,26,24],
[31,24,28,28,28,32,28,0,27,20],
[32,33,30,29,34,35,25,24,0,21],
[33,32,29,34,25,33,27,31,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,18,17,23,22,19,17,27,24],
[25,0,22,21,31,28,21,26,30,26],
[33,29,0,23,39,28,28,29,31,28],
[34,30,28,0,31,33,28,25,37,37],
[28,20,12,20,0,22,22,16,27,22],
[29,23,23,18,29,0,23,21,31,30],
[32,30,23,23,29,28,0,16,27,32],
[34,25,22,26,35,30,35,0,27,30],
[24,21,20,14,24,20,24,24,0,19],
[27,25,23,14,29,21,19,21,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,25,31,21,30,36,29,22,22],
[28,0,28,28,26,33,28,24,26,26],
[26,23,0,29,20,29,28,21,19,22],
[20,23,22,0,23,31,24,22,24,20],
[30,25,31,28,0,33,32,22,28,26],
[21,18,22,20,18,0,27,23,19,24],
[15,23,23,27,19,24,0,25,20,20],
[22,27,30,29,29,28,26,0,27,29],
[29,25,32,27,23,32,31,24,0,29],
[29,25,29,31,25,27,31,22,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,32,20,28,27,28,28,35,34],
[25,0,24,26,29,29,24,26,39,26],
[19,27,0,25,31,25,28,27,33,30],
[31,25,26,0,29,31,30,22,30,33],
[23,22,20,22,0,26,25,22,30,25],
[24,22,26,20,25,0,23,27,34,25],
[23,27,23,21,26,28,0,29,31,27],
[23,25,24,29,29,24,22,0,34,27],
[16,12,18,21,21,17,20,17,0,18],
[17,25,21,18,26,26,24,24,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,14,20,29,28,26,28,31,27],
[26,0,25,32,37,36,35,21,39,28],
[37,26,0,24,33,31,26,25,37,24],
[31,19,27,0,25,37,35,23,34,28],
[22,14,18,26,0,28,32,23,33,20],
[23,15,20,14,23,0,18,21,34,19],
[25,16,25,16,19,33,0,18,26,19],
[23,30,26,28,28,30,33,0,34,27],
[20,12,14,17,18,17,25,17,0,20],
[24,23,27,23,31,32,32,24,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,32,23,22,26,19,29,19,26],
[30,0,28,29,25,24,26,32,24,22],
[19,23,0,23,18,27,22,29,22,21],
[28,22,28,0,27,21,23,26,24,18],
[29,26,33,24,0,29,23,28,26,17],
[25,27,24,30,22,0,25,28,27,21],
[32,25,29,28,28,26,0,30,22,20],
[22,19,22,25,23,23,21,0,21,24],
[32,27,29,27,25,24,29,30,0,20],
[25,29,30,33,34,30,31,27,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,22,25,26,26,16,26,24],
[26,0,18,24,30,26,28,16,26,20],
[26,33,0,24,28,24,33,23,27,29],
[29,27,27,0,27,25,28,22,27,24],
[26,21,23,24,0,26,27,18,25,25],
[25,25,27,26,25,0,30,22,25,25],
[25,23,18,23,24,21,0,15,20,19],
[35,35,28,29,33,29,36,0,36,25],
[25,25,24,24,26,26,31,15,0,23],
[27,31,22,27,26,26,32,26,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,28,25,28,25,21,30,29,19],
[32,0,34,34,36,33,28,33,38,24],
[23,17,0,31,20,19,20,24,33,22],
[26,17,20,0,21,16,16,26,23,17],
[23,15,31,30,0,29,14,34,30,17],
[26,18,32,35,22,0,20,32,32,26],
[30,23,31,35,37,31,0,30,30,28],
[21,18,27,25,17,19,21,0,26,17],
[22,13,18,28,21,19,21,25,0,18],
[32,27,29,34,34,25,23,34,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,32,30,23,36,25,22,35],
[25,0,30,37,34,25,30,32,21,34],
[25,21,0,27,29,27,32,24,28,28],
[19,14,24,0,27,19,28,25,18,29],
[21,17,22,24,0,14,25,23,24,21],
[28,26,24,32,37,0,35,24,21,33],
[15,21,19,23,26,16,0,23,23,23],
[26,19,27,26,28,27,28,0,24,27],
[29,30,23,33,27,30,28,27,0,26],
[16,17,23,22,30,18,28,24,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,25,18,19,25,20,21,26,21],
[27,0,24,24,18,31,19,26,27,26],
[26,27,0,23,26,27,22,23,26,26],
[33,27,28,0,28,32,27,22,28,27],
[32,33,25,23,0,31,20,25,28,26],
[26,20,24,19,20,0,18,22,21,22],
[31,32,29,24,31,33,0,25,32,29],
[30,25,28,29,26,29,26,0,29,27],
[25,24,25,23,23,30,19,22,0,22],
[30,25,25,24,25,29,22,24,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,24,30,25,25,35,24,30,27],
[23,0,21,24,27,21,25,26,28,24],
[27,30,0,27,28,29,35,32,25,25],
[21,27,24,0,25,25,27,29,27,27],
[26,24,23,26,0,23,28,23,21,18],
[26,30,22,26,28,0,27,32,25,24],
[16,26,16,24,23,24,0,23,19,18],
[27,25,19,22,28,19,28,0,23,23],
[21,23,26,24,30,26,32,28,0,23],
[24,27,26,24,33,27,33,28,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,23,22,24,23,22,18,19,23],
[37,0,32,30,25,35,35,33,24,26],
[28,19,0,24,26,29,24,27,26,26],
[29,21,27,0,28,30,22,28,22,21],
[27,26,25,23,0,25,25,27,25,25],
[28,16,22,21,26,0,19,20,15,20],
[29,16,27,29,26,32,0,16,21,21],
[33,18,24,23,24,31,35,0,20,23],
[32,27,25,29,26,36,30,31,0,23],
[28,25,25,30,26,31,30,28,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,24,36,26,22,31,30,27,29],
[21,0,16,33,27,19,27,22,20,22],
[27,35,0,32,31,27,26,33,22,29],
[15,18,19,0,22,21,18,19,24,18],
[25,24,20,29,0,24,19,25,26,23],
[29,32,24,30,27,0,34,28,22,30],
[20,24,25,33,32,17,0,28,25,26],
[21,29,18,32,26,23,23,0,18,25],
[24,31,29,27,25,29,26,33,0,28],
[22,29,22,33,28,21,25,26,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,21,27,23,32,29,32,33,22],
[23,0,18,24,20,28,29,27,24,20],
[30,33,0,26,25,31,26,30,35,31],
[24,27,25,0,20,25,21,24,27,26],
[28,31,26,31,0,28,24,28,31,28],
[19,23,20,26,23,0,21,20,27,21],
[22,22,25,30,27,30,0,25,26,24],
[19,24,21,27,23,31,26,0,26,23],
[18,27,16,24,20,24,25,25,0,23],
[29,31,20,25,23,30,27,28,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,27,24,25,22,26,24,22],
[27,0,27,28,26,33,22,33,25,26],
[27,24,0,25,24,29,27,28,21,21],
[24,23,26,0,27,32,27,32,23,24],
[27,25,27,24,0,26,26,28,24,24],
[26,18,22,19,25,0,19,20,19,23],
[29,29,24,24,25,32,0,30,26,25],
[25,18,23,19,23,31,21,0,21,24],
[27,26,30,28,27,32,25,30,0,26],
[29,25,30,27,27,28,26,27,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,17,23,28,28,27,31,23],
[28,0,27,23,22,34,26,31,31,28],
[25,24,0,22,23,30,29,32,28,24],
[34,28,29,0,25,31,27,34,35,29],
[28,29,28,26,0,30,27,29,34,22],
[23,17,21,20,21,0,21,28,24,28],
[23,25,22,24,24,30,0,28,25,28],
[24,20,19,17,22,23,23,0,28,24],
[20,20,23,16,17,27,26,23,0,20],
[28,23,27,22,29,23,23,27,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,25,31,23,28,34,24,17,32],
[25,0,25,33,25,27,31,26,24,26],
[26,26,0,24,24,24,30,17,26,29],
[20,18,27,0,23,22,27,20,24,28],
[28,26,27,28,0,25,31,20,27,26],
[23,24,27,29,26,0,32,25,22,27],
[17,20,21,24,20,19,0,15,17,24],
[27,25,34,31,31,26,36,0,28,29],
[34,27,25,27,24,29,34,23,0,33],
[19,25,22,23,25,24,27,22,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,30,25,24,24,26,26,30,26],
[17,0,21,23,26,21,27,24,26,24],
[21,30,0,28,31,26,24,25,32,26],
[26,28,23,0,27,24,24,24,27,28],
[27,25,20,24,0,24,29,21,23,21],
[27,30,25,27,27,0,22,27,30,23],
[25,24,27,27,22,29,0,26,28,26],
[25,27,26,27,30,24,25,0,30,29],
[21,25,19,24,28,21,23,21,0,25],
[25,27,25,23,30,28,25,22,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,20,26,27,28,25,33,25],
[26,0,21,25,26,24,21,18,26,22],
[26,30,0,33,24,29,34,22,32,24],
[31,26,18,0,29,32,31,26,32,28],
[25,25,27,22,0,23,27,20,24,25],
[24,27,22,19,28,0,22,26,27,22],
[23,30,17,20,24,29,0,23,24,23],
[26,33,29,25,31,25,28,0,32,23],
[18,25,19,19,27,24,27,19,0,21],
[26,29,27,23,26,29,28,28,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,23,31,23,31,30,26,20,19],
[28,0,21,28,23,26,32,26,23,22],
[28,30,0,34,31,28,30,32,26,25],
[20,23,17,0,19,20,26,22,16,17],
[28,28,20,32,0,26,35,27,24,26],
[20,25,23,31,25,0,24,27,20,20],
[21,19,21,25,16,27,0,20,22,18],
[25,25,19,29,24,24,31,0,24,20],
[31,28,25,35,27,31,29,27,0,24],
[32,29,26,34,25,31,33,31,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,23,16,24,27,10,23,31,25],
[29,0,34,27,36,34,22,30,35,35],
[28,17,0,25,26,20,18,35,22,26],
[35,24,26,0,31,34,29,27,34,23],
[27,15,25,20,0,21,24,34,24,27],
[24,17,31,17,30,0,16,30,40,28],
[41,29,33,22,27,35,0,24,34,25],
[28,21,16,24,17,21,27,0,32,27],
[20,16,29,17,27,11,17,19,0,25],
[26,16,25,28,24,23,26,24,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,30,29,29,27,24,31,24,27],
[23,0,34,29,30,29,21,29,26,23],
[21,17,0,26,24,25,19,23,21,21],
[22,22,25,0,25,20,19,26,26,29],
[22,21,27,26,0,22,25,30,23,23],
[24,22,26,31,29,0,23,26,26,25],
[27,30,32,32,26,28,0,31,23,32],
[20,22,28,25,21,25,20,0,19,20],
[27,25,30,25,28,25,28,32,0,28],
[24,28,30,22,28,26,19,31,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,28,19,40,30,30,23,22,23],
[25,0,33,16,42,20,31,22,13,13],
[23,18,0,18,28,33,33,26,12,26],
[32,35,33,0,45,35,43,24,19,24],
[11,9,23,6,0,15,10,17,20,8],
[21,31,18,16,36,0,26,28,22,19],
[21,20,18,8,41,25,0,19,22,19],
[28,29,25,27,34,23,32,0,27,19],
[29,38,39,32,31,29,29,24,0,24],
[28,38,25,27,43,32,32,32,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,31,29,24,23,25,27,25,21],
[25,0,30,31,25,27,21,22,33,21],
[20,21,0,31,22,26,17,20,28,22],
[22,20,20,0,24,28,24,27,24,19],
[27,26,29,27,0,23,24,29,29,22],
[28,24,25,23,28,0,26,26,28,27],
[26,30,34,27,27,25,0,26,29,19],
[24,29,31,24,22,25,25,0,32,22],
[26,18,23,27,22,23,22,19,0,21],
[30,30,29,32,29,24,32,29,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,24,28,23,23,23,34,23,28],
[30,0,23,26,32,21,30,34,28,29],
[27,28,0,10,14,21,14,27,29,23],
[23,25,41,0,31,31,32,38,40,31],
[28,19,37,20,0,30,15,27,30,22],
[28,30,30,20,21,0,26,36,25,36],
[28,21,37,19,36,25,0,34,41,26],
[17,17,24,13,24,15,17,0,15,14],
[28,23,22,11,21,26,10,36,0,29],
[23,22,28,20,29,15,25,37,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,25,23,24,22,28,17,30,30],
[31,0,27,23,27,27,32,26,30,29],
[26,24,0,22,23,29,24,20,26,28],
[28,28,29,0,24,32,31,26,31,32],
[27,24,28,27,0,29,33,21,26,30],
[29,24,22,19,22,0,29,20,24,30],
[23,19,27,20,18,22,0,23,24,27],
[34,25,31,25,30,31,28,0,25,32],
[21,21,25,20,25,27,27,26,0,28],
[21,22,23,19,21,21,24,19,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,20,38,20,33,33,38,25,33],
[30,0,12,30,20,25,25,30,17,25],
[31,39,0,18,46,38,30,39,38,39],
[13,21,33,0,33,20,20,46,33,33],
[31,31,5,18,0,18,30,31,17,31],
[18,26,13,31,33,0,30,39,38,34],
[18,26,21,31,21,21,0,39,38,21],
[13,21,12,5,20,12,12,0,17,13],
[26,34,13,18,34,13,13,34,0,26],
[18,26,12,18,20,17,30,38,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,39,32,28,28,28,28,28,26],
[29,0,23,22,17,16,23,16,23,10],
[12,28,0,18,34,12,22,22,22,10],
[19,29,33,0,35,23,17,41,23,21],
[23,34,17,16,0,16,23,26,16,26],
[23,35,39,28,35,0,35,51,33,27],
[23,28,29,34,28,16,0,44,34,22],
[23,35,29,10,25,0,7,0,19,16],
[23,28,29,28,35,18,17,32,0,20],
[25,41,41,30,25,24,29,35,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,21,20,32,20,16,24,17,29],
[29,0,29,21,27,24,28,17,28,35],
[30,22,0,23,28,23,26,24,26,32],
[31,30,28,0,32,18,23,23,28,46],
[19,24,23,19,0,16,17,17,21,29],
[31,27,28,33,35,0,23,19,27,32],
[35,23,25,28,34,28,0,28,23,29],
[27,34,27,28,34,32,23,0,28,37],
[34,23,25,23,30,24,28,23,0,31],
[22,16,19,5,22,19,22,14,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,32,26,27,34,27,34,29,26],
[27,0,34,29,25,33,27,36,34,28],
[19,17,0,18,21,23,22,28,22,24],
[25,22,33,0,29,33,24,28,29,28],
[24,26,30,22,0,28,25,29,27,29],
[17,18,28,18,23,0,17,24,27,18],
[24,24,29,27,26,34,0,34,30,29],
[17,15,23,23,22,27,17,0,21,22],
[22,17,29,22,24,24,21,30,0,22],
[25,23,27,23,22,33,22,29,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,24,29,36,38,34,30,29,33],
[19,0,18,28,28,27,24,23,28,27],
[27,33,0,40,22,25,33,21,29,29],
[22,23,11,0,21,22,22,16,31,26],
[15,23,29,30,0,26,22,18,30,28],
[13,24,26,29,25,0,22,27,20,26],
[17,27,18,29,29,29,0,21,19,23],
[21,28,30,35,33,24,30,0,31,29],
[22,23,22,20,21,31,32,20,0,25],
[18,24,22,25,23,25,28,22,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,33,35,31,28,30,37,25,29],
[21,0,26,29,26,26,22,34,23,25],
[18,25,0,29,29,28,27,32,24,19],
[16,22,22,0,23,27,23,30,18,24],
[20,25,22,28,0,28,23,33,22,24],
[23,25,23,24,23,0,28,37,23,32],
[21,29,24,28,28,23,0,36,31,23],
[14,17,19,21,18,14,15,0,21,18],
[26,28,27,33,29,28,20,30,0,24],
[22,26,32,27,27,19,28,33,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,36,33,32,27,32,25,35,24],
[21,0,31,21,27,24,21,21,23,26],
[15,20,0,24,28,20,25,21,25,20],
[18,30,27,0,29,18,29,21,23,24],
[19,24,23,22,0,28,26,25,19,28],
[24,27,31,33,23,0,28,25,30,21],
[19,30,26,22,25,23,0,22,20,27],
[26,30,30,30,26,26,29,0,28,23],
[16,28,26,28,32,21,31,23,0,27],
[27,25,31,27,23,30,24,28,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,14,30,28,30,30,30,14,51],
[23,0,37,32,37,23,28,25,21,51],
[37,14,0,46,30,37,37,39,35,46],
[21,19,5,0,35,28,42,30,12,51],
[23,14,21,16,0,16,16,25,5,37],
[21,28,14,23,35,0,42,9,35,51],
[21,23,14,9,35,9,0,9,21,30],
[21,26,12,21,26,42,42,0,26,42],
[37,30,16,39,46,16,30,25,0,46],
[0,0,5,0,14,0,21,9,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,23,21,36,30,27,18,30,18],
[20,0,21,20,18,32,28,23,28,12],
[28,30,0,24,28,28,18,15,34,17],
[30,31,27,0,28,31,25,28,34,24],
[15,33,23,23,0,25,30,14,33,16],
[21,19,23,20,26,0,20,16,27,19],
[24,23,33,26,21,31,0,24,34,14],
[33,28,36,23,37,35,27,0,27,33],
[21,23,17,17,18,24,17,24,0,20],
[33,39,34,27,35,32,37,18,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,27,28,26,26,28,28,25,27],
[25,0,23,24,22,22,24,24,25,23],
[24,28,0,25,26,27,24,25,25,29],
[23,27,26,0,26,22,25,29,29,27],
[25,29,25,25,0,22,22,25,26,32],
[25,29,24,29,29,0,22,31,28,28],
[23,27,27,26,29,29,0,28,26,28],
[23,27,26,22,26,20,23,0,25,25],
[26,26,26,22,25,23,25,26,0,29],
[24,28,22,24,19,23,23,26,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,23,25,19,21,27,20,22,27],
[27,0,25,29,27,25,27,27,25,27],
[28,26,0,23,27,25,25,28,23,31],
[26,22,28,0,25,26,25,27,23,28],
[32,24,24,26,0,21,21,29,24,31],
[30,26,26,25,30,0,33,27,26,29],
[24,24,26,26,30,18,0,25,26,26],
[31,24,23,24,22,24,26,0,24,28],
[29,26,28,28,27,25,25,27,0,33],
[24,24,20,23,20,22,25,23,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,27,23,33,31,37,26,34,26],
[26,0,25,27,27,28,37,26,33,26],
[24,26,0,33,28,22,36,23,34,30],
[28,24,18,0,20,22,31,22,26,16],
[18,24,23,31,0,24,32,18,29,26],
[20,23,29,29,27,0,33,25,31,22],
[14,14,15,20,19,18,0,20,26,19],
[25,25,28,29,33,26,31,0,34,25],
[17,18,17,25,22,20,25,17,0,22],
[25,25,21,35,25,29,32,26,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,16,23,26,23,17,28,22],
[28,0,28,24,25,27,27,29,27,31],
[25,23,0,17,29,28,22,19,32,18],
[35,27,34,0,36,33,31,22,32,26],
[28,26,22,15,0,31,23,25,33,29],
[25,24,23,18,20,0,22,19,28,24],
[28,24,29,20,28,29,0,26,26,29],
[34,22,32,29,26,32,25,0,29,27],
[23,24,19,19,18,23,25,22,0,23],
[29,20,33,25,22,27,22,24,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,30,22,36,30,25,26,29,30],
[25,0,27,27,31,31,28,31,23,30],
[21,24,0,20,30,23,20,21,26,34],
[29,24,31,0,38,25,32,27,25,37],
[15,20,21,13,0,8,17,19,22,27],
[21,20,28,26,43,0,23,24,33,28],
[26,23,31,19,34,28,0,23,23,33],
[25,20,30,24,32,27,28,0,25,33],
[22,28,25,26,29,18,28,26,0,27],
[21,21,17,14,24,23,18,18,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,24,30,21,24,26,29,22],
[27,0,25,27,29,26,30,25,31,26],
[27,26,0,25,31,23,34,28,29,21],
[27,24,26,0,25,29,26,30,28,24],
[21,22,20,26,0,21,27,22,29,24],
[30,25,28,22,30,0,27,23,34,27],
[27,21,17,25,24,24,0,25,26,20],
[25,26,23,21,29,28,26,0,32,28],
[22,20,22,23,22,17,25,19,0,25],
[29,25,30,27,27,24,31,23,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,23,18,32,20,26,21,17,25],
[22,0,16,22,28,28,28,25,19,21],
[28,35,0,21,23,12,42,20,28,14],
[33,29,30,0,27,27,32,21,24,26],
[19,23,28,24,0,26,30,20,23,20],
[31,23,39,24,25,0,33,23,34,19],
[25,23,9,19,21,18,0,23,23,20],
[30,26,31,30,31,28,28,0,19,27],
[34,32,23,27,28,17,28,32,0,15],
[26,30,37,25,31,32,31,24,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,26,28,21,24,20,24,27,34],
[27,0,34,34,27,30,20,19,28,32],
[25,17,0,24,10,20,20,17,34,31],
[23,17,27,0,22,25,16,22,23,29],
[30,24,41,29,0,20,27,27,39,40],
[27,21,31,26,31,0,26,23,35,36],
[31,31,31,35,24,25,0,21,29,31],
[27,32,34,29,24,28,30,0,32,38],
[24,23,17,28,12,16,22,19,0,36],
[17,19,20,22,11,15,20,13,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,25,29,23,23,27,23,24,21],
[25,0,27,22,23,22,31,17,25,27],
[26,24,0,27,22,21,27,28,31,25],
[22,29,24,0,24,27,31,18,27,25],
[28,28,29,27,0,29,32,23,31,33],
[28,29,30,24,22,0,27,22,27,27],
[24,20,24,20,19,24,0,21,25,23],
[28,34,23,33,28,29,30,0,32,29],
[27,26,20,24,20,24,26,19,0,25],
[30,24,26,26,18,24,28,22,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,33,24,27,16,30,26,38,31],
[29,0,26,25,36,31,32,18,25,36],
[18,25,0,21,33,25,26,19,37,29],
[27,26,30,0,36,33,30,24,31,31],
[24,15,18,15,0,27,35,16,29,33],
[35,20,26,18,24,0,28,23,33,35],
[21,19,25,21,16,23,0,18,30,35],
[25,33,32,27,35,28,33,0,31,27],
[13,26,14,20,22,18,21,20,0,23],
[20,15,22,20,18,16,16,24,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,25,38,20,40,34,29,23,27],
[17,0,19,32,25,27,21,16,24,25],
[26,32,0,33,26,33,28,25,23,26],
[13,19,18,0,16,22,25,14,16,21],
[31,26,25,35,0,30,33,22,29,29],
[11,24,18,29,21,0,24,21,15,20],
[17,30,23,26,18,27,0,23,20,21],
[22,35,26,37,29,30,28,0,26,26],
[28,27,28,35,22,36,31,25,0,25],
[24,26,25,30,22,31,30,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,30,22,26,33,21,24,26,26],
[19,0,26,18,21,29,21,21,26,19],
[21,25,0,24,29,31,23,22,21,25],
[29,33,27,0,26,32,28,29,30,25],
[25,30,22,25,0,29,24,29,26,25],
[18,22,20,19,22,0,18,16,17,17],
[30,30,28,23,27,33,0,30,30,25],
[27,30,29,22,22,35,21,0,33,25],
[25,25,30,21,25,34,21,18,0,26],
[25,32,26,26,26,34,26,26,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,28,41,25,37,26,27,25,31],
[27,0,24,26,21,32,32,29,29,37],
[23,27,0,32,29,21,29,20,26,26],
[10,25,19,0,28,33,31,24,21,20],
[26,30,22,23,0,30,37,35,40,24],
[14,19,30,18,21,0,26,24,24,20],
[25,19,22,20,14,25,0,24,32,21],
[24,22,31,27,16,27,27,0,29,23],
[26,22,25,30,11,27,19,22,0,28],
[20,14,25,31,27,31,30,28,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,30,31,17,1,17,31,10,20],
[24,0,21,11,1,15,19,11,11,2],
[21,30,0,27,7,14,8,18,2,17],
[20,40,24,0,21,15,9,8,11,30],
[34,50,44,30,0,25,19,21,21,44],
[50,36,37,36,26,0,38,37,21,36],
[34,32,43,42,32,13,0,30,33,32],
[20,40,33,43,30,14,21,0,23,23],
[41,40,49,40,30,30,18,28,0,40],
[31,49,34,21,7,15,19,28,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,31,35,25,27,27,31,31,27],
[18,0,23,25,19,22,20,20,22,21],
[20,28,0,23,24,22,27,16,22,19],
[16,26,28,0,21,23,19,20,23,19],
[26,32,27,30,0,20,30,23,31,27],
[24,29,29,28,31,0,27,23,29,30],
[24,31,24,32,21,24,0,24,30,24],
[20,31,35,31,28,28,27,0,31,33],
[20,29,29,28,20,22,21,20,0,23],
[24,30,32,32,24,21,27,18,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,27,17,12,27,17,14,20,19],
[34,0,22,36,13,35,25,31,28,36],
[24,29,0,24,24,27,29,14,15,17],
[34,15,27,0,25,18,17,14,20,15],
[39,38,27,26,0,24,38,23,27,26],
[24,16,24,33,27,0,29,23,17,17],
[34,26,22,34,13,22,0,9,13,27],
[37,20,37,37,28,28,42,0,30,18],
[31,23,36,31,24,34,38,21,0,24],
[32,15,34,36,25,34,24,33,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,24,26,28,33,31,31,27,26],
[20,0,22,26,22,27,26,25,24,21],
[27,29,0,27,27,30,30,27,32,25],
[25,25,24,0,20,25,28,23,30,18],
[23,29,24,31,0,26,24,30,29,22],
[18,24,21,26,25,0,25,24,26,22],
[20,25,21,23,27,26,0,27,32,22],
[20,26,24,28,21,27,24,0,30,21],
[24,27,19,21,22,25,19,21,0,19],
[25,30,26,33,29,29,29,30,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,38,25,30,42,32,31,27,32],
[24,0,33,28,31,33,36,28,26,24],
[13,18,0,15,25,20,19,20,17,19],
[26,23,36,0,29,30,26,30,29,23],
[21,20,26,22,0,28,28,27,23,24],
[9,18,31,21,23,0,22,26,22,22],
[19,15,32,25,23,29,0,27,22,28],
[20,23,31,21,24,25,24,0,20,25],
[24,25,34,22,28,29,29,31,0,30],
[19,27,32,28,27,29,23,26,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,39,26,28,23,29,30,36,31],
[19,0,26,20,21,18,27,26,35,25],
[12,25,0,20,23,17,21,26,29,20],
[25,31,31,0,29,30,22,30,35,24],
[23,30,28,22,0,22,24,25,34,25],
[28,33,34,21,29,0,29,35,37,30],
[22,24,30,29,27,22,0,28,31,29],
[21,25,25,21,26,16,23,0,34,25],
[15,16,22,16,17,14,20,17,0,14],
[20,26,31,27,26,21,22,26,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,25,28,29,28,28,27,28,27],
[20,0,22,20,19,19,24,28,13,24],
[26,29,0,29,28,26,32,32,24,28],
[23,31,22,0,22,25,26,27,24,29],
[22,32,23,29,0,28,27,28,24,27],
[23,32,25,26,23,0,33,30,20,25],
[23,27,19,25,24,18,0,25,16,22],
[24,23,19,24,23,21,26,0,20,23],
[23,38,27,27,27,31,35,31,0,32],
[24,27,23,22,24,26,29,28,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,33,34,33,37,28,31,21,35],
[24,0,27,35,32,32,26,25,27,33],
[18,24,0,32,26,26,20,25,19,28],
[17,16,19,0,20,21,15,12,12,17],
[18,19,25,31,0,32,15,29,17,28],
[14,19,25,30,19,0,18,25,14,29],
[23,25,31,36,36,33,0,34,28,37],
[20,26,26,39,22,26,17,0,19,29],
[30,24,32,39,34,37,23,32,0,31],
[16,18,23,34,23,22,14,22,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,24,17,30,26,16,27,22,23],
[25,0,33,22,32,27,19,30,28,28],
[27,18,0,18,27,18,23,23,27,19],
[34,29,33,0,29,30,23,35,32,28],
[21,19,24,22,0,26,21,26,23,25],
[25,24,33,21,25,0,18,30,26,29],
[35,32,28,28,30,33,0,27,33,25],
[24,21,28,16,25,21,24,0,26,22],
[29,23,24,19,28,25,18,25,0,26],
[28,23,32,23,26,22,26,29,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,21,25,27,20,20,19,23,20],
[27,0,21,20,23,21,22,20,24,20],
[30,30,0,25,28,22,26,23,26,21],
[26,31,26,0,29,21,28,24,26,25],
[24,28,23,22,0,21,22,19,22,23],
[31,30,29,30,30,0,26,26,26,25],
[31,29,25,23,29,25,0,23,21,25],
[32,31,28,27,32,25,28,0,25,26],
[28,27,25,25,29,25,30,26,0,22],
[31,31,30,26,28,26,26,25,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,25,20,33,21,36,25,32,30],
[25,0,29,29,29,21,27,20,26,26],
[26,22,0,25,24,21,31,30,34,23],
[31,22,26,0,24,26,30,22,31,28],
[18,22,27,27,0,18,28,20,30,31],
[30,30,30,25,33,0,36,29,37,39],
[15,24,20,21,23,15,0,17,32,24],
[26,31,21,29,31,22,34,0,35,29],
[19,25,17,20,21,14,19,16,0,28],
[21,25,28,23,20,12,27,22,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,16,17,30,41,20,17,32,9],
[31,0,16,9,34,44,29,21,34,9],
[35,35,0,27,35,39,13,17,35,4],
[34,42,24,0,40,51,32,17,42,21],
[21,17,16,11,0,33,7,16,11,4],
[10,7,12,0,18,0,7,5,0,5],
[31,22,38,19,44,44,0,31,31,31],
[34,30,34,34,35,46,20,0,42,4],
[19,17,16,9,40,51,20,9,0,9],
[42,42,47,30,47,46,20,47,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,31,33,22,26,30,26,27,32],
[24,0,33,25,23,26,33,23,24,27],
[20,18,0,18,22,18,23,21,19,22],
[18,26,33,0,25,25,28,22,20,21],
[29,28,29,26,0,29,29,24,25,29],
[25,25,33,26,22,0,27,26,25,30],
[21,18,28,23,22,24,0,21,19,26],
[25,28,30,29,27,25,30,0,26,27],
[24,27,32,31,26,26,32,25,0,28],
[19,24,29,30,22,21,25,24,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,26,30,23,34,29,26,34],
[23,0,24,34,25,24,26,18,15,28],
[25,27,0,28,23,24,28,25,18,29],
[25,17,23,0,29,23,18,27,22,29],
[21,26,28,22,0,26,33,22,21,28],
[28,27,27,28,25,0,31,34,27,26],
[17,25,23,33,18,20,0,15,17,27],
[22,33,26,24,29,17,36,0,25,28],
[25,36,33,29,30,24,34,26,0,25],
[17,23,22,22,23,25,24,23,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,29,36,30,26,33,30,25,28],
[24,0,24,32,22,27,26,22,20,21],
[22,27,0,32,25,25,29,23,27,21],
[15,19,19,0,16,22,20,12,14,17],
[21,29,26,35,0,29,28,23,26,22],
[25,24,26,29,22,0,24,22,24,22],
[18,25,22,31,23,27,0,21,19,17],
[21,29,28,39,28,29,30,0,26,26],
[26,31,24,37,25,27,32,25,0,28],
[23,30,30,34,29,29,34,25,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,35,29,26,21,29,30,34,29],
[22,0,30,28,30,25,25,24,23,31],
[16,21,0,27,21,21,23,16,24,31],
[22,23,24,0,21,21,24,25,28,28],
[25,21,30,30,0,25,26,25,28,35],
[30,26,30,30,26,0,28,24,30,28],
[22,26,28,27,25,23,0,24,32,29],
[21,27,35,26,26,27,27,0,29,34],
[17,28,27,23,23,21,19,22,0,31],
[22,20,20,23,16,23,22,17,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,23,34,35,35,27,21,29,27],
[30,0,25,34,22,38,18,19,26,20],
[28,26,0,29,25,29,19,28,28,16],
[17,17,22,0,26,29,19,20,24,13],
[16,29,26,25,0,34,26,26,22,20],
[16,13,22,22,17,0,15,15,19,9],
[24,33,32,32,25,36,0,19,27,21],
[30,32,23,31,25,36,32,0,25,12],
[22,25,23,27,29,32,24,26,0,29],
[24,31,35,38,31,42,30,39,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,29,28,29,27,29,24,28,34],
[28,0,25,25,32,23,22,24,34,35],
[22,26,0,26,24,19,28,23,25,28],
[23,26,25,0,30,24,28,26,28,33],
[22,19,27,21,0,27,24,20,24,29],
[24,28,32,27,24,0,29,25,30,32],
[22,29,23,23,27,22,0,27,30,31],
[27,27,28,25,31,26,24,0,32,34],
[23,17,26,23,27,21,21,19,0,33],
[17,16,23,18,22,19,20,17,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,15,25,17,16,20,22,17,21],
[37,0,29,30,23,24,38,35,35,28],
[36,22,0,29,25,20,26,38,29,23],
[26,21,22,0,18,23,24,26,26,21],
[34,28,26,33,0,28,27,36,29,22],
[35,27,31,28,23,0,29,38,19,21],
[31,13,25,27,24,22,0,30,32,25],
[29,16,13,25,15,13,21,0,21,17],
[34,16,22,25,22,32,19,30,0,24],
[30,23,28,30,29,30,26,34,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,23,27,33,26,25,20,29,26],
[24,0,20,30,29,24,26,25,27,27],
[28,31,0,35,33,27,26,25,27,31],
[24,21,16,0,27,22,24,23,22,25],
[18,22,18,24,0,20,21,24,23,24],
[25,27,24,29,31,0,27,28,26,23],
[26,25,25,27,30,24,0,21,21,22],
[31,26,26,28,27,23,30,0,25,27],
[22,24,24,29,28,25,30,26,0,27],
[25,24,20,26,27,28,29,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,22,36,36,33,36,22,36,33],
[29,0,42,39,39,22,44,27,45,41],
[29,9,0,28,28,14,29,25,40,20],
[15,12,23,0,8,6,31,23,20,12],
[15,12,23,43,0,28,28,23,28,28],
[18,29,37,45,23,0,40,28,46,31],
[15,7,22,20,23,11,0,5,31,17],
[29,24,26,28,28,23,46,0,40,34],
[15,6,11,31,23,5,20,11,0,22],
[18,10,31,39,23,20,34,17,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,29,25,23,26,24,21,29,22],
[31,0,29,25,30,29,28,29,30,27],
[22,22,0,22,21,21,23,15,25,18],
[26,26,29,0,24,24,25,18,28,20],
[28,21,30,27,0,31,28,23,25,27],
[25,22,30,27,20,0,27,24,25,25],
[27,23,28,26,23,24,0,17,29,22],
[30,22,36,33,28,27,34,0,31,31],
[22,21,26,23,26,26,22,20,0,20],
[29,24,33,31,24,26,29,20,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,18,26,18,23,10,29,27,28],
[27,0,20,34,18,11,13,27,22,22],
[33,31,0,35,24,31,26,38,30,22],
[25,17,16,0,15,15,13,14,20,25],
[33,33,27,36,0,30,15,39,29,26],
[28,40,20,36,21,0,10,27,26,26],
[41,38,25,38,36,41,0,35,28,32],
[22,24,13,37,12,24,16,0,25,28],
[24,29,21,31,22,25,23,26,0,28],
[23,29,29,26,25,25,19,23,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,27,34,24,25,27,29,27,33],
[27,0,29,22,28,24,26,32,22,29],
[24,22,0,22,18,19,22,20,20,21],
[17,29,29,0,24,26,18,18,28,21],
[27,23,33,27,0,16,14,13,29,24],
[26,27,32,25,35,0,34,29,23,29],
[24,25,29,33,37,17,0,22,29,22],
[22,19,31,33,38,22,29,0,29,30],
[24,29,31,23,22,28,22,22,0,24],
[18,22,30,30,27,22,29,21,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,28,28,26,32,23,25,28,29],
[20,0,25,30,28,30,26,28,28,25],
[23,26,0,24,26,29,22,21,27,23],
[23,21,27,0,28,32,23,28,27,23],
[25,23,25,23,0,29,24,28,26,18],
[19,21,22,19,22,0,20,25,23,20],
[28,25,29,28,27,31,0,27,30,26],
[26,23,30,23,23,26,24,0,20,21],
[23,23,24,24,25,28,21,31,0,21],
[22,26,28,28,33,31,25,30,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,25,26,30,23,20,20,25,20],
[30,0,32,27,31,29,28,23,28,27],
[26,19,0,22,31,23,20,22,21,17],
[25,24,29,0,31,26,25,22,26,22],
[21,20,20,20,0,23,20,24,23,19],
[28,22,28,25,28,0,22,23,28,20],
[31,23,31,26,31,29,0,24,27,22],
[31,28,29,29,27,28,27,0,24,26],
[26,23,30,25,28,23,24,27,0,24],
[31,24,34,29,32,31,29,25,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,26,20,22,28,27,25,24,29],
[31,0,28,24,24,33,28,25,29,35],
[25,23,0,23,24,31,27,26,28,28],
[31,27,28,0,25,30,32,32,29,31],
[29,27,27,26,0,32,29,25,30,32],
[23,18,20,21,19,0,17,19,25,28],
[24,23,24,19,22,34,0,26,28,32],
[26,26,25,19,26,32,25,0,20,30],
[27,22,23,22,21,26,23,31,0,30],
[22,16,23,20,19,23,19,21,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,29,28,30,26,27,28,25,22],
[25,0,31,31,34,24,21,21,26,23],
[22,20,0,23,28,26,18,21,23,19],
[23,20,28,0,28,21,18,18,29,21],
[21,17,23,23,0,23,18,15,22,21],
[25,27,25,30,28,0,25,25,22,24],
[24,30,33,33,33,26,0,27,27,28],
[23,30,30,33,36,26,24,0,25,27],
[26,25,28,22,29,29,24,26,0,20],
[29,28,32,30,30,27,23,24,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,24,17,5,17,3,0,33,24],
[29,0,34,33,18,32,29,29,43,34],
[27,17,0,17,27,30,27,14,30,48],
[34,18,34,0,18,29,13,29,43,34],
[46,33,24,33,0,46,46,30,33,24],
[34,19,21,22,5,0,18,0,30,21],
[48,22,24,38,5,33,0,30,33,24],
[51,22,37,22,21,51,21,0,46,37],
[18,8,21,8,18,21,18,5,0,18],
[27,17,3,17,27,30,27,14,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,29,36,34,41,37,22,40,26],
[12,0,31,27,25,27,22,20,30,22],
[22,20,0,25,31,29,35,21,27,26],
[15,24,26,0,20,31,26,12,26,27],
[17,26,20,31,0,34,27,31,27,26],
[10,24,22,20,17,0,19,15,24,16],
[14,29,16,25,24,32,0,18,30,24],
[29,31,30,39,20,36,33,0,36,35],
[11,21,24,25,24,27,21,15,0,23],
[25,29,25,24,25,35,27,16,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,21,23,22,20,23,20,16,23],
[32,0,27,30,25,21,26,23,27,30],
[30,24,0,29,32,22,20,34,25,36],
[28,21,22,0,25,26,21,24,13,24],
[29,26,19,26,0,16,26,25,23,30],
[31,30,29,25,35,0,30,34,22,29],
[28,25,31,30,25,21,0,26,22,33],
[31,28,17,27,26,17,25,0,20,23],
[35,24,26,38,28,29,29,31,0,39],
[28,21,15,27,21,22,18,28,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,24,30,25,29,26,32,22,24],
[31,0,29,36,30,32,34,36,24,35],
[27,22,0,36,27,27,28,24,25,27],
[21,15,15,0,14,20,24,23,26,23],
[26,21,24,37,0,22,30,31,23,25],
[22,19,24,31,29,0,29,24,32,25],
[25,17,23,27,21,22,0,29,20,20],
[19,15,27,28,20,27,22,0,15,18],
[29,27,26,25,28,19,31,36,0,27],
[27,16,24,28,26,26,31,33,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,33,28,38,25,31,33,32,30],
[17,0,21,16,24,20,25,21,24,20],
[18,30,0,23,23,21,24,22,26,19],
[23,35,28,0,30,26,36,32,29,26],
[13,27,28,21,0,23,28,22,20,20],
[26,31,30,25,28,0,30,30,20,28],
[20,26,27,15,23,21,0,22,19,14],
[18,30,29,19,29,21,29,0,24,21],
[19,27,25,22,31,31,32,27,0,27],
[21,31,32,25,31,23,37,30,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,20,15,20,24,29,16,23,22],
[25,0,24,25,31,33,34,29,26,31],
[31,27,0,21,27,24,31,23,24,27],
[36,26,30,0,25,34,41,21,20,25],
[31,20,24,26,0,37,38,23,21,33],
[27,18,27,17,14,0,32,24,16,23],
[22,17,20,10,13,19,0,18,15,18],
[35,22,28,30,28,27,33,0,26,24],
[28,25,27,31,30,35,36,25,0,22],
[29,20,24,26,18,28,33,27,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,29,30,25,18,30,34,23,33],
[27,0,22,23,22,16,16,25,18,22],
[22,29,0,27,25,18,15,32,20,32],
[21,28,24,0,25,20,24,30,27,30],
[26,29,26,26,0,22,22,28,27,32],
[33,35,33,31,29,0,23,36,35,36],
[21,35,36,27,29,28,0,32,32,34],
[17,26,19,21,23,15,19,0,18,33],
[28,33,31,24,24,16,19,33,0,38],
[18,29,19,21,19,15,17,18,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,22,29,23,27,26,25,33,19],
[34,0,29,40,38,38,41,23,29,34],
[29,22,0,34,38,28,31,18,44,34],
[22,11,17,0,21,22,30,19,28,33],
[28,13,13,30,0,18,17,24,35,18],
[24,13,23,29,33,0,27,13,33,29],
[25,10,20,21,34,24,0,20,29,29],
[26,28,33,32,27,38,31,0,43,23],
[18,22,7,23,16,18,22,8,0,23],
[32,17,17,18,33,22,22,28,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,24,33,29,24,32,19,34,35],
[24,0,27,28,30,26,36,30,29,31],
[27,24,0,26,33,30,34,24,31,35],
[18,23,25,0,29,22,20,15,29,29],
[22,21,18,22,0,25,24,20,23,29],
[27,25,21,29,26,0,32,24,28,31],
[19,15,17,31,27,19,0,19,26,36],
[32,21,27,36,31,27,32,0,28,32],
[17,22,20,22,28,23,25,23,0,26],
[16,20,16,22,22,20,15,19,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,34,31,8,25,34,8,34,8],
[43,0,51,34,34,26,45,11,32,11],
[17,0,0,23,2,23,26,0,32,0],
[20,17,28,0,22,43,45,28,32,23],
[43,17,49,29,0,43,43,26,32,23],
[26,25,28,8,8,0,28,25,11,25],
[17,6,25,6,8,23,0,8,9,6],
[43,40,51,23,25,26,43,0,32,29],
[17,19,19,19,19,40,42,19,0,19],
[43,40,51,28,28,26,45,22,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,21,21,20,24,27,21,24],
[24,0,30,24,20,27,24,29,22,23],
[24,21,0,20,20,23,26,27,23,19],
[30,27,31,0,24,23,31,31,26,27],
[30,31,31,27,0,25,27,34,28,27],
[31,24,28,28,26,0,26,31,26,26],
[27,27,25,20,24,25,0,30,27,26],
[24,22,24,20,17,20,21,0,18,19],
[30,29,28,25,23,25,24,33,0,29],
[27,28,32,24,24,25,25,32,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,18,11,33,22,30,8,15,8],
[44,0,30,24,45,37,42,36,24,26],
[33,21,0,28,36,32,41,26,13,18],
[40,27,23,0,44,36,35,33,23,17],
[18,6,15,7,0,21,30,11,4,10],
[29,14,19,15,30,0,14,10,15,11],
[21,9,10,16,21,37,0,12,11,6],
[43,15,25,18,40,41,39,0,27,17],
[36,27,38,28,47,36,40,24,0,27],
[43,25,33,34,41,40,45,34,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,20,23,20,15,22,28,23,21],
[28,0,22,21,15,16,25,23,17,23],
[31,29,0,25,29,23,30,31,19,25],
[28,30,26,0,20,21,28,27,26,29],
[31,36,22,31,0,24,31,32,26,30],
[36,35,28,30,27,0,30,34,23,27],
[29,26,21,23,20,21,0,28,26,24],
[23,28,20,24,19,17,23,0,21,24],
[28,34,32,25,25,28,25,30,0,26],
[30,28,26,22,21,24,27,27,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,27,15,16,26,25,12,21,22],
[25,0,29,19,17,29,28,21,25,22],
[24,22,0,17,13,18,22,10,24,23],
[36,32,34,0,26,25,31,29,35,35],
[35,34,38,25,0,27,34,30,40,38],
[25,22,33,26,24,0,28,22,26,26],
[26,23,29,20,17,23,0,19,19,25],
[39,30,41,22,21,29,32,0,34,36],
[30,26,27,16,11,25,32,17,0,23],
[29,29,28,16,13,25,26,15,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,30,25,32,28,32,25,26,29],
[18,0,28,23,24,18,25,19,24,28],
[21,23,0,22,21,21,21,28,23,23],
[26,28,29,0,29,24,33,28,28,27],
[19,27,30,22,0,22,27,21,29,30],
[23,33,30,27,29,0,31,21,28,32],
[19,26,30,18,24,20,0,22,31,24],
[26,32,23,23,30,30,29,0,26,31],
[25,27,28,23,22,23,20,25,0,29],
[22,23,28,24,21,19,27,20,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,31,21,27,31,27,31,31,33],
[21,0,34,27,27,27,32,36,26,25],
[20,17,0,19,23,18,24,31,24,22],
[30,24,32,0,26,29,27,26,30,28],
[24,24,28,25,0,25,28,32,28,29],
[20,24,33,22,26,0,26,26,26,25],
[24,19,27,24,23,25,0,31,24,25],
[20,15,20,25,19,25,20,0,22,19],
[20,25,27,21,23,25,27,29,0,23],
[18,26,29,23,22,26,26,32,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,28,26,28,23,25,30,31,26],
[15,0,19,22,21,21,25,24,23,20],
[23,32,0,25,27,29,26,24,29,22],
[25,29,26,0,33,25,33,29,23,28],
[23,30,24,18,0,23,30,27,22,17],
[28,30,22,26,28,0,28,25,22,17],
[26,26,25,18,21,23,0,19,21,20],
[21,27,27,22,24,26,32,0,20,21],
[20,28,22,28,29,29,30,31,0,23],
[25,31,29,23,34,34,31,30,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,17,29,28,25,18,20,22,20],
[29,0,25,37,25,37,26,21,29,28],
[34,26,0,36,24,23,17,28,30,19],
[22,14,15,0,21,23,15,13,19,10],
[23,26,27,30,0,19,19,23,24,16],
[26,14,28,28,32,0,17,25,19,16],
[33,25,34,36,32,34,0,34,30,25],
[31,30,23,38,28,26,17,0,24,17],
[29,22,21,32,27,32,21,27,0,14],
[31,23,32,41,35,35,26,34,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,26,27,26,19,26,28,27,25],
[21,0,23,27,28,18,22,21,26,26],
[25,28,0,23,22,17,20,21,22,21],
[24,24,28,0,25,25,20,28,28,25],
[25,23,29,26,0,22,26,25,33,23],
[32,33,34,26,29,0,27,25,29,31],
[25,29,31,31,25,24,0,25,26,26],
[23,30,30,23,26,26,26,0,34,27],
[24,25,29,23,18,22,25,17,0,25],
[26,25,30,26,28,20,25,24,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,32,27,24,33,22,18,32,37],
[17,0,20,24,18,35,20,17,14,30],
[19,31,0,26,21,32,33,24,19,36],
[24,27,25,0,20,27,30,20,24,30],
[27,33,30,31,0,30,22,27,29,42],
[18,16,19,24,21,0,19,16,25,32],
[29,31,18,21,29,32,0,25,25,34],
[33,34,27,31,24,35,26,0,31,34],
[19,37,32,27,22,26,26,20,0,38],
[14,21,15,21,9,19,17,17,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,30,28,28,33,15,25,32],
[25,0,32,32,25,28,29,18,37,23],
[25,19,0,30,29,35,22,33,32,31],
[21,19,21,0,12,25,23,14,19,27],
[23,26,22,39,0,36,27,17,28,43],
[23,23,16,26,15,0,17,21,21,22],
[18,22,29,28,24,34,0,20,25,34],
[36,33,18,37,34,30,31,0,32,34],
[26,14,19,32,23,30,26,19,0,26],
[19,28,20,24,8,29,17,17,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,24,36,25,37,23,26,26,19],
[33,0,18,30,31,31,25,25,23,18],
[27,33,0,40,25,32,20,28,40,18],
[15,21,11,0,20,33,14,10,14,14],
[26,20,26,31,0,20,26,21,33,25],
[14,20,19,18,31,0,23,13,19,14],
[28,26,31,37,25,28,0,13,20,25],
[25,26,23,41,30,38,38,0,14,29],
[25,28,11,37,18,32,31,37,0,16],
[32,33,33,37,26,37,26,22,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,22,24,22,35,15,23,24],
[23,0,31,24,32,31,34,24,31,30],
[25,20,0,21,24,32,34,22,30,23],
[29,27,30,0,34,31,34,26,35,25],
[27,19,27,17,0,22,31,18,23,29],
[29,20,19,20,29,0,30,18,30,25],
[16,17,17,17,20,21,0,9,20,18],
[36,27,29,25,33,33,42,0,39,33],
[28,20,21,16,28,21,31,12,0,26],
[27,21,28,26,22,26,33,18,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,33,27,30,21,36,23,24,22],
[22,0,26,23,25,27,23,24,19,21],
[18,25,0,23,24,18,25,18,18,24],
[24,28,28,0,21,20,25,29,14,26],
[21,26,27,30,0,26,26,18,16,27],
[30,24,33,31,25,0,22,23,25,26],
[15,28,26,26,25,29,0,17,22,26],
[28,27,33,22,33,28,34,0,27,29],
[27,32,33,37,35,26,29,24,0,33],
[29,30,27,25,24,25,25,22,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,31,21,18,40,33,21,30,14],
[26,0,30,27,26,29,29,22,38,22],
[20,21,0,23,27,25,25,23,20,23],
[30,24,28,0,20,23,29,29,38,27],
[33,25,24,31,0,36,30,23,31,25],
[11,22,26,28,15,0,17,20,27,16],
[18,22,26,22,21,34,0,28,25,22],
[30,29,28,22,28,31,23,0,33,33],
[21,13,31,13,20,24,26,18,0,9],
[37,29,28,24,26,35,29,18,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,24,22,24,31,28,35,34,28],
[23,0,33,26,27,34,21,32,21,25],
[27,18,0,21,26,31,23,32,24,22],
[29,25,30,0,29,37,32,38,30,32],
[27,24,25,22,0,35,23,39,26,25],
[20,17,20,14,16,0,19,28,18,23],
[23,30,28,19,28,32,0,37,30,30],
[16,19,19,13,12,23,14,0,19,15],
[17,30,27,21,25,33,21,32,0,22],
[23,26,29,19,26,28,21,36,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,37,20,20,33,27,22,17,35],
[36,0,36,32,32,32,23,30,26,31],
[14,15,0,24,12,24,36,13,15,12],
[31,19,27,0,25,25,27,14,20,36],
[31,19,39,26,0,25,39,17,19,24],
[18,19,27,26,26,0,28,26,21,13],
[24,28,15,24,12,23,0,23,16,11],
[29,21,38,37,34,25,28,0,31,23],
[34,25,36,31,32,30,35,20,0,35],
[16,20,39,15,27,38,40,28,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,27,16,10,8,22,12,16,29],
[36,0,21,36,35,32,36,22,39,34],
[24,30,0,32,31,28,32,20,26,30],
[35,15,19,0,26,19,25,17,22,31],
[41,16,20,25,0,10,33,20,28,33],
[43,19,23,32,41,0,35,25,30,35],
[29,15,19,26,18,16,0,28,33,27],
[39,29,31,34,31,26,23,0,31,30],
[35,12,25,29,23,21,18,20,0,32],
[22,17,21,20,18,16,24,21,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,28,27,31,28,21,33,32,29],
[22,0,18,27,22,19,18,24,25,21],
[23,33,0,32,25,25,25,29,31,29],
[24,24,19,0,22,25,21,23,22,20],
[20,29,26,29,0,26,25,28,27,22],
[23,32,26,26,25,0,28,27,28,21],
[30,33,26,30,26,23,0,29,32,26],
[18,27,22,28,23,24,22,0,28,27],
[19,26,20,29,24,23,19,23,0,27],
[22,30,22,31,29,30,25,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,21,26,26,23,21,20,23,25],
[32,0,30,31,31,28,30,31,23,30],
[30,21,0,29,27,23,24,26,23,29],
[25,20,22,0,24,23,24,20,20,27],
[25,20,24,27,0,27,22,24,22,26],
[28,23,28,28,24,0,27,23,29,27],
[30,21,27,27,29,24,0,27,27,29],
[31,20,25,31,27,28,24,0,26,30],
[28,28,28,31,29,22,24,25,0,28],
[26,21,22,24,25,24,22,21,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,31,30,28,26,26,25,21,23],
[38,0,34,30,32,37,25,31,36,26],
[20,17,0,23,14,28,27,27,20,14],
[21,21,28,0,29,37,23,38,27,28],
[23,19,37,22,0,23,19,27,22,20],
[25,14,23,14,28,0,16,30,23,9],
[25,26,24,28,32,35,0,45,30,20],
[26,20,24,13,24,21,6,0,22,12],
[30,15,31,24,29,28,21,29,0,19],
[28,25,37,23,31,42,31,39,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,24,28,29,29,26,24,25,31],
[20,0,22,27,25,27,28,22,24,24],
[27,29,0,32,31,23,26,29,22,31],
[23,24,19,0,22,26,18,23,18,22],
[22,26,20,29,0,25,20,27,23,24],
[22,24,28,25,26,0,25,23,21,28],
[25,23,25,33,31,26,0,21,26,25],
[27,29,22,28,24,28,30,0,25,28],
[26,27,29,33,28,30,25,26,0,31],
[20,27,20,29,27,23,26,23,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,26,36,29,31,26,21,30,33],
[32,0,32,29,29,26,28,17,31,33],
[25,19,0,22,16,20,19,15,16,21],
[15,22,29,0,18,27,13,16,24,22],
[22,22,35,33,0,27,21,23,31,37],
[20,25,31,24,24,0,25,25,25,26],
[25,23,32,38,30,26,0,26,24,35],
[30,34,36,35,28,26,25,0,34,39],
[21,20,35,27,20,26,27,17,0,24],
[18,18,30,29,14,25,16,12,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,31,24,35,32,18,21,26,19],
[25,0,31,25,26,30,25,24,33,30],
[20,20,0,25,23,24,24,17,23,22],
[27,26,26,0,33,21,30,21,22,27],
[16,25,28,18,0,24,18,12,20,21],
[19,21,27,30,27,0,22,24,25,20],
[33,26,27,21,33,29,0,26,25,28],
[30,27,34,30,39,27,25,0,33,27],
[25,18,28,29,31,26,26,18,0,27],
[32,21,29,24,30,31,23,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,26,26,30,27,27,24,30,31],
[29,0,22,28,21,16,27,20,19,19],
[25,29,0,14,27,18,26,25,20,27],
[25,23,37,0,31,23,41,24,18,30],
[21,30,24,20,0,25,29,25,25,29],
[24,35,33,28,26,0,34,28,23,21],
[24,24,25,10,22,17,0,17,12,19],
[27,31,26,27,26,23,34,0,24,24],
[21,32,31,33,26,28,39,27,0,37],
[20,32,24,21,22,30,32,27,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,32,35,33,30,38,30,32,25],
[12,0,16,19,20,23,24,15,23,18],
[19,35,0,29,30,22,23,27,26,27],
[16,32,22,0,22,20,27,28,27,21],
[18,31,21,29,0,24,34,22,25,21],
[21,28,29,31,27,0,32,28,24,38],
[13,27,28,24,17,19,0,18,24,21],
[21,36,24,23,29,23,33,0,29,17],
[19,28,25,24,26,27,27,22,0,25],
[26,33,24,30,30,13,30,34,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,28,26,20,33,18,27,21,23],
[21,0,26,25,20,28,18,17,15,14],
[23,25,0,27,18,27,19,21,17,23],
[25,26,24,0,22,28,18,16,14,26],
[31,31,33,29,0,34,18,28,21,28],
[18,23,24,23,17,0,18,20,15,20],
[33,33,32,33,33,33,0,27,26,25],
[24,34,30,35,23,31,24,0,23,25],
[30,36,34,37,30,36,25,28,0,29],
[28,37,28,25,23,31,26,26,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,25,22,23,26,29,27,24,25],
[31,0,29,26,23,24,32,28,29,29],
[26,22,0,26,26,25,32,27,25,26],
[29,25,25,0,22,28,28,26,25,27],
[28,28,25,29,0,25,34,28,30,28],
[25,27,26,23,26,0,29,30,32,26],
[22,19,19,23,17,22,0,27,24,21],
[24,23,24,25,23,21,24,0,24,28],
[27,22,26,26,21,19,27,27,0,26],
[26,22,25,24,23,25,30,23,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,23,32,19,24,36,26,38,26],
[25,0,19,10,18,24,22,28,34,11],
[28,32,0,13,12,40,34,40,41,15],
[19,41,38,0,30,37,34,35,44,23],
[32,33,39,21,0,40,34,40,41,24],
[27,27,11,14,11,0,25,34,21,18],
[15,29,17,17,17,26,0,31,24,20],
[25,23,11,16,11,17,20,0,26,6],
[13,17,10,7,10,30,27,25,0,16],
[25,40,36,28,27,33,31,45,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,24,20,26,28,27,29,24,19],
[25,0,24,21,20,24,30,26,19,21],
[27,27,0,14,23,33,22,20,26,26],
[31,30,37,0,29,33,35,31,23,30],
[25,31,28,22,0,34,26,31,21,27],
[23,27,18,18,17,0,26,23,21,25],
[24,21,29,16,25,25,0,24,25,22],
[22,25,31,20,20,28,27,0,28,24],
[27,32,25,28,30,30,26,23,0,25],
[32,30,25,21,24,26,29,27,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,22,27,28,9,23,26,20,35],
[28,0,19,32,35,15,22,23,22,39],
[29,32,0,25,25,13,21,20,22,32],
[24,19,26,0,27,21,19,23,19,34],
[23,16,26,24,0,19,24,25,15,25],
[42,36,38,30,32,0,32,43,25,37],
[28,29,30,32,27,19,0,22,26,42],
[25,28,31,28,26,8,29,0,18,36],
[31,29,29,32,36,26,25,33,0,39],
[16,12,19,17,26,14,9,15,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,20,25,30,28,32,27,25,38],
[27,0,23,26,32,25,31,25,22,31],
[31,28,0,31,31,23,31,30,22,35],
[26,25,20,0,28,22,23,28,19,31],
[21,19,20,23,0,15,25,26,17,25],
[23,26,28,29,36,0,27,31,25,35],
[19,20,20,28,26,24,0,26,26,32],
[24,26,21,23,25,20,25,0,22,28],
[26,29,29,32,34,26,25,29,0,32],
[13,20,16,20,26,16,19,23,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,19,26,27,29,19,18,24,29],
[22,0,16,27,23,27,23,23,18,24],
[32,35,0,30,27,35,26,25,31,27],
[25,24,21,0,27,26,28,25,24,25],
[24,28,24,24,0,30,34,30,30,26],
[22,24,16,25,21,0,22,23,27,26],
[32,28,25,23,17,29,0,24,26,24],
[33,28,26,26,21,28,27,0,24,27],
[27,33,20,27,21,24,25,27,0,23],
[22,27,24,26,25,25,27,24,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,21,25,28,24,22,29,23,22],
[25,0,23,23,24,27,21,24,23,22],
[30,28,0,23,29,26,24,33,27,22],
[26,28,28,0,34,34,28,33,25,25],
[23,27,22,17,0,26,21,27,23,20],
[27,24,25,17,25,0,24,25,22,23],
[29,30,27,23,30,27,0,27,25,26],
[22,27,18,18,24,26,24,0,18,22],
[28,28,24,26,28,29,26,33,0,26],
[29,29,29,26,31,28,25,29,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,23,22,22,26,21,22,22,24],
[28,0,31,18,22,27,21,26,24,29],
[28,20,0,23,22,26,23,21,21,31],
[29,33,28,0,23,33,27,31,33,33],
[29,29,29,28,0,30,22,33,32,33],
[25,24,25,18,21,0,20,22,24,28],
[30,30,28,24,29,31,0,31,29,32],
[29,25,30,20,18,29,20,0,20,26],
[29,27,30,18,19,27,22,31,0,33],
[27,22,20,18,18,23,19,25,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,29,20,25,29,21,26,23,22],
[27,0,31,21,22,26,19,28,22,25],
[22,20,0,22,17,22,16,23,23,25],
[31,30,29,0,27,29,22,33,28,29],
[26,29,34,24,0,31,27,32,27,25],
[22,25,29,22,20,0,20,28,25,25],
[30,32,35,29,24,31,0,34,33,26],
[25,23,28,18,19,23,17,0,20,22],
[28,29,28,23,24,26,18,31,0,27],
[29,26,26,22,26,26,25,29,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,34,33,34,26,25,42,21,27],
[12,0,27,31,32,19,13,30,19,26],
[17,24,0,39,32,24,23,37,33,20],
[18,20,12,0,18,9,11,23,24,17],
[17,19,19,33,0,14,16,19,15,21],
[25,32,27,42,37,0,29,41,36,22],
[26,38,28,40,35,22,0,43,35,29],
[9,21,14,28,32,10,8,0,13,17],
[30,32,18,27,36,15,16,38,0,22],
[24,25,31,34,30,29,22,34,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,29,31,30,34,19,34,28,27],
[30,0,29,30,23,32,23,31,24,28],
[22,22,0,30,23,27,17,28,27,27],
[20,21,21,0,22,24,20,25,24,21],
[21,28,28,29,0,25,19,33,21,22],
[17,19,24,27,26,0,23,27,24,21],
[32,28,34,31,32,28,0,34,25,32],
[17,20,23,26,18,24,17,0,18,12],
[23,27,24,27,30,27,26,33,0,20],
[24,23,24,30,29,30,19,39,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,31,25,29,36,35,30,30,39],
[20,0,21,25,23,20,23,19,16,20],
[20,30,0,37,18,17,40,14,13,30],
[26,26,14,0,16,14,25,5,19,33],
[22,28,33,35,0,15,43,31,22,26],
[15,31,34,37,36,0,35,23,25,33],
[16,28,11,26,8,16,0,17,12,23],
[21,32,37,46,20,28,34,0,26,43],
[21,35,38,32,29,26,39,25,0,27],
[12,31,21,18,25,18,28,8,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,30,25,28,39,31,36,32,24],
[17,0,9,15,12,14,22,26,28,18],
[21,42,0,21,26,37,27,36,27,23],
[26,36,30,0,25,28,34,36,35,27],
[23,39,25,26,0,24,25,38,28,30],
[12,37,14,23,27,0,29,33,36,26],
[20,29,24,17,26,22,0,35,32,19],
[15,25,15,15,13,18,16,0,12,20],
[19,23,24,16,23,15,19,39,0,20],
[27,33,28,24,21,25,32,31,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,18,27,19,16,20,24,21,20],
[24,0,20,24,17,18,21,17,22,16],
[33,31,0,33,26,29,27,30,23,26],
[24,27,18,0,19,17,26,22,19,18],
[32,34,25,32,0,22,29,22,23,20],
[35,33,22,34,29,0,31,27,33,29],
[31,30,24,25,22,20,0,24,24,24],
[27,34,21,29,29,24,27,0,30,17],
[30,29,28,32,28,18,27,21,0,23],
[31,35,25,33,31,22,27,34,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,25,23,26,29,37,33,24,32],
[27,0,24,28,29,30,35,21,29,23],
[26,27,0,31,25,30,31,22,29,31],
[28,23,20,0,17,21,31,18,14,25],
[25,22,26,34,0,26,23,17,29,26],
[22,21,21,30,25,0,30,16,28,33],
[14,16,20,20,28,21,0,21,18,20],
[18,30,29,33,34,35,30,0,28,31],
[27,22,22,37,22,23,33,23,0,29],
[19,28,20,26,25,18,31,20,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,22,18,13,18,21,21,14,15],
[38,0,39,36,18,36,38,31,27,32],
[29,12,0,20,14,19,14,26,13,23],
[33,15,31,0,22,31,27,28,23,27],
[38,33,37,29,0,36,33,24,27,34],
[33,15,32,20,15,0,22,21,20,28],
[30,13,37,24,18,29,0,26,16,27],
[30,20,25,23,27,30,25,0,22,29],
[37,24,38,28,24,31,35,29,0,27],
[36,19,28,24,17,23,24,22,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,22,21,26,25,32,23,30],
[24,0,25,24,22,20,22,29,23,26],
[23,26,0,24,19,22,20,25,19,20],
[29,27,27,0,25,25,27,35,33,30],
[30,29,32,26,0,29,29,37,24,30],
[25,31,29,26,22,0,28,38,30,21],
[26,29,31,24,22,23,0,32,22,25],
[19,22,26,16,14,13,19,0,25,15],
[28,28,32,18,27,21,29,26,0,36],
[21,25,31,21,21,30,26,36,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,22,26,26,25,24,21,21,31],
[30,0,21,23,24,27,26,25,22,34],
[29,30,0,23,33,27,26,35,30,35],
[25,28,28,0,29,30,22,28,25,36],
[25,27,18,22,0,27,24,24,26,29],
[26,24,24,21,24,0,19,26,24,28],
[27,25,25,29,27,32,0,29,27,34],
[30,26,16,23,27,25,22,0,25,34],
[30,29,21,26,25,27,24,26,0,32],
[20,17,16,15,22,23,17,17,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,26,30,31,29,28,25,26,27],
[18,0,29,25,23,28,30,23,24,24],
[25,22,0,22,28,26,28,25,24,25],
[21,26,29,0,28,26,31,19,30,22],
[20,28,23,23,0,23,23,20,19,23],
[22,23,25,25,28,0,26,23,25,22],
[23,21,23,20,28,25,0,22,23,21],
[26,28,26,32,31,28,29,0,30,25],
[25,27,27,21,32,26,28,21,0,25],
[24,27,26,29,28,29,30,26,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,26,32,34,14,30,32,28,31],
[27,0,16,35,34,21,29,37,36,36],
[25,35,0,45,37,27,33,44,42,40],
[19,16,6,0,28,15,27,18,21,30],
[17,17,14,23,0,10,26,16,15,21],
[37,30,24,36,41,0,36,38,32,36],
[21,22,18,24,25,15,0,26,26,34],
[19,14,7,33,35,13,25,0,18,26],
[23,15,9,30,36,19,25,33,0,25],
[20,15,11,21,30,15,17,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,47,31,31,24,23,19,47,27],
[20,0,39,20,26,32,18,31,33,41],
[4,12,0,3,14,22,8,14,23,24],
[20,31,48,0,33,25,18,24,38,34],
[20,25,37,18,0,22,18,21,30,38],
[27,19,29,26,29,0,26,26,33,37],
[28,33,43,33,33,25,0,26,36,36],
[32,20,37,27,30,25,25,0,35,31],
[4,18,28,13,21,18,15,16,0,17],
[24,10,27,17,13,14,15,20,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,23,30,24,29,28,23,27,26],
[33,0,24,36,27,33,30,32,32,29],
[28,27,0,29,24,35,24,25,28,27],
[21,15,22,0,15,24,30,25,26,28],
[27,24,27,36,0,29,31,29,29,32],
[22,18,16,27,22,0,27,22,28,32],
[23,21,27,21,20,24,0,27,25,26],
[28,19,26,26,22,29,24,0,32,34],
[24,19,23,25,22,23,26,19,0,28],
[25,22,24,23,19,19,25,17,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,27,34,24,20,31,29,25,22],
[14,0,19,23,11,16,14,11,21,20],
[24,32,0,34,24,15,23,22,29,25],
[17,28,17,0,11,11,15,18,19,14],
[27,40,27,40,0,20,27,27,30,31],
[31,35,36,40,31,0,30,26,27,24],
[20,37,28,36,24,21,0,23,21,20],
[22,40,29,33,24,25,28,0,33,29],
[26,30,22,32,21,24,30,18,0,21],
[29,31,26,37,20,27,31,22,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,23,25,20,28,28,29,21,22],
[23,0,26,22,21,19,26,23,16,25],
[28,25,0,20,23,22,28,23,19,19],
[26,29,31,0,18,22,23,27,20,27],
[31,30,28,33,0,27,32,25,23,29],
[23,32,29,29,24,0,19,18,17,19],
[23,25,23,28,19,32,0,23,16,22],
[22,28,28,24,26,33,28,0,18,23],
[30,35,32,31,28,34,35,33,0,24],
[29,26,32,24,22,32,29,28,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,17,16,22,18,17,17,22,17],
[25,0,21,24,31,22,16,20,22,23],
[34,30,0,23,29,27,22,27,30,27],
[35,27,28,0,36,27,20,21,26,29],
[29,20,22,15,0,19,16,21,20,18],
[33,29,24,24,32,0,21,26,24,25],
[34,35,29,31,35,30,0,25,31,33],
[34,31,24,30,30,25,26,0,30,26],
[29,29,21,25,31,27,20,21,0,32],
[34,28,24,22,33,26,18,25,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,21,24,26,23,23,26,24,25],
[24,0,26,23,24,24,22,27,20,19],
[30,25,0,24,30,22,24,24,23,21],
[27,28,27,0,26,30,28,28,25,22],
[25,27,21,25,0,25,23,24,22,23],
[28,27,29,21,26,0,21,24,20,23],
[28,29,27,23,28,30,0,22,24,28],
[25,24,27,23,27,27,29,0,24,24],
[27,31,28,26,29,31,27,27,0,25],
[26,32,30,29,28,28,23,27,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,27,16,27,16,28,50,39],
[24,0,12,1,1,23,23,35,35,24],
[24,39,0,39,39,39,39,51,39,40],
[24,50,12,0,16,39,25,37,50,40],
[35,50,12,35,0,50,25,37,37,26],
[24,28,12,12,1,0,24,37,35,24],
[35,28,12,26,26,27,0,14,49,38],
[23,16,0,14,14,14,37,0,37,37],
[1,16,12,1,14,16,2,14,0,1],
[12,27,11,11,25,27,13,14,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,26,29,27,27,32,33,34,30],
[31,0,27,30,35,25,26,24,30,28],
[25,24,0,39,33,33,24,30,32,30],
[22,21,12,0,27,21,25,18,24,30],
[24,16,18,24,0,20,25,25,20,21],
[24,26,18,30,31,0,29,22,30,28],
[19,25,27,26,26,22,0,18,27,28],
[18,27,21,33,26,29,33,0,34,32],
[17,21,19,27,31,21,24,17,0,27],
[21,23,21,21,30,23,23,19,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,27,27,22,30,27,27,23,29],
[32,0,29,27,26,30,26,27,24,25],
[24,22,0,26,24,30,26,20,22,23],
[24,24,25,0,25,26,28,27,27,27],
[29,25,27,26,0,26,25,24,22,29],
[21,21,21,25,25,0,19,24,22,23],
[24,25,25,23,26,32,0,26,23,26],
[24,24,31,24,27,27,25,0,21,23],
[28,27,29,24,29,29,28,30,0,30],
[22,26,28,24,22,28,25,28,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,24,28,33,24,25,28,37,20],
[20,0,31,31,28,31,36,48,35,31],
[27,20,0,12,23,19,31,27,30,31],
[23,20,39,0,26,29,36,25,25,38],
[18,23,28,25,0,25,30,24,36,28],
[27,20,32,22,26,0,37,20,21,28],
[26,15,20,15,21,14,0,15,24,29],
[23,3,24,26,27,31,36,0,26,31],
[14,16,21,26,15,30,27,25,0,26],
[31,20,20,13,23,23,22,20,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,25,22,23,25,23,26,30,21],
[29,0,27,25,26,25,23,25,30,26],
[26,24,0,24,23,27,24,28,31,25],
[29,26,27,0,23,30,30,32,33,30],
[28,25,28,28,0,26,26,28,35,30],
[26,26,24,21,25,0,27,28,27,27],
[28,28,27,21,25,24,0,28,27,27],
[25,26,23,19,23,23,23,0,28,27],
[21,21,20,18,16,24,24,23,0,22],
[30,25,26,21,21,24,24,24,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,23,35,33,30,34,27,31,37],
[24,0,21,25,24,30,26,24,22,28],
[28,30,0,23,29,30,33,29,30,32],
[16,26,28,0,35,25,26,30,24,38],
[18,27,22,16,0,25,19,18,19,20],
[21,21,21,26,26,0,26,24,28,35],
[17,25,18,25,32,25,0,26,28,27],
[24,27,22,21,33,27,25,0,28,29],
[20,29,21,27,32,23,23,23,0,29],
[14,23,19,13,31,16,24,22,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,30,29,31,27,28,23,31,29],
[21,0,26,22,21,24,27,20,24,24],
[21,25,0,23,27,20,25,20,25,22],
[22,29,28,0,28,25,32,23,25,24],
[20,30,24,23,0,24,25,19,26,24],
[24,27,31,26,27,0,25,22,28,26],
[23,24,26,19,26,26,0,16,23,23],
[28,31,31,28,32,29,35,0,30,23],
[20,27,26,26,25,23,28,21,0,24],
[22,27,29,27,27,25,28,28,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,20,19,19,22,21,24,24,31],
[36,0,38,20,28,21,22,36,34,34],
[31,13,0,22,17,19,15,22,15,24],
[32,31,29,0,27,31,25,20,27,28],
[32,23,34,24,0,28,24,34,29,35],
[29,30,32,20,23,0,22,23,13,27],
[30,29,36,26,27,29,0,21,23,40],
[27,15,29,31,17,28,30,0,31,40],
[27,17,36,24,22,38,28,20,0,36],
[20,17,27,23,16,24,11,11,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,21,27,21,25,24,25,25,25],
[30,0,28,29,22,24,20,29,21,24],
[30,23,0,22,28,22,23,29,21,24],
[24,22,29,0,25,27,20,25,19,26],
[30,29,23,26,0,29,26,29,26,27],
[26,27,29,24,22,0,23,29,26,28],
[27,31,28,31,25,28,0,30,25,32],
[26,22,22,26,22,22,21,0,16,24],
[26,30,30,32,25,25,26,35,0,28],
[26,27,27,25,24,23,19,27,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,29,26,25,24,25,29,31,20],
[26,0,26,29,21,16,20,31,32,21],
[22,25,0,23,17,10,22,27,26,16],
[25,22,28,0,14,19,20,25,26,11],
[26,30,34,37,0,30,25,28,35,28],
[27,35,41,32,21,0,33,28,32,23],
[26,31,29,31,26,18,0,34,35,23],
[22,20,24,26,23,23,17,0,32,28],
[20,19,25,25,16,19,16,19,0,18],
[31,30,35,40,23,28,28,23,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,25,29,23,25,30,26,25,17],
[29,0,27,29,27,23,31,29,28,21],
[26,24,0,32,24,25,22,28,24,25],
[22,22,19,0,22,18,24,21,23,17],
[28,24,27,29,0,28,24,25,27,26],
[26,28,26,33,23,0,22,18,31,11],
[21,20,29,27,27,29,0,27,25,22],
[25,22,23,30,26,33,24,0,32,24],
[26,23,27,28,24,20,26,19,0,18],
[34,30,26,34,25,40,29,27,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,32,25,30,26,16,26,23,29],
[24,0,17,23,29,21,26,20,25,30],
[19,34,0,20,24,25,17,21,23,31],
[26,28,31,0,23,25,28,24,36,22],
[21,22,27,28,0,28,23,26,25,34],
[25,30,26,26,23,0,32,31,30,27],
[35,25,34,23,28,19,0,30,29,25],
[25,31,30,27,25,20,21,0,27,22],
[28,26,28,15,26,21,22,24,0,26],
[22,21,20,29,17,24,26,29,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,32,35,27,32,37,28,25,34],
[31,0,30,30,19,30,32,25,33,27],
[19,21,0,27,21,17,27,25,27,31],
[16,21,24,0,22,18,26,29,30,30],
[24,32,30,29,0,28,36,25,32,32],
[19,21,34,33,23,0,32,22,28,33],
[14,19,24,25,15,19,0,25,30,25],
[23,26,26,22,26,29,26,0,33,32],
[26,18,24,21,19,23,21,18,0,22],
[17,24,20,21,19,18,26,19,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,21,33,30,31,22,30,32,26],
[18,0,13,18,21,17,20,23,26,20],
[30,38,0,32,34,34,34,41,42,23],
[18,33,19,0,21,39,26,34,28,26],
[21,30,17,30,0,30,38,38,28,23],
[20,34,17,12,21,0,17,26,30,21],
[29,31,17,25,13,34,0,30,35,23],
[21,28,10,17,13,25,21,0,23,9],
[19,25,9,23,23,21,16,28,0,14],
[25,31,28,25,28,30,28,42,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,22,24,20,24,27,23,25,23],
[21,0,24,26,27,21,32,23,23,25],
[29,27,0,27,23,21,30,28,29,24],
[27,25,24,0,25,28,27,27,27,32],
[31,24,28,26,0,25,28,26,25,29],
[27,30,30,23,26,0,28,29,23,27],
[24,19,21,24,23,23,0,18,22,23],
[28,28,23,24,25,22,33,0,24,34],
[26,28,22,24,26,28,29,27,0,25],
[28,26,27,19,22,24,28,17,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,23,29,31,26,29,32,26,27],
[17,0,13,25,18,24,17,22,23,22],
[28,38,0,24,30,25,26,33,30,29],
[22,26,27,0,18,22,17,27,22,26],
[20,33,21,33,0,30,27,36,29,29],
[25,27,26,29,21,0,18,31,28,29],
[22,34,25,34,24,33,0,37,30,29],
[19,29,18,24,15,20,14,0,23,24],
[25,28,21,29,22,23,21,28,0,29],
[24,29,22,25,22,22,22,27,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,27,29,32,29,17,33,31,29],
[25,0,22,20,20,11,19,19,20,19],
[24,29,0,27,30,24,29,27,41,26],
[22,31,24,0,25,23,26,35,31,28],
[19,31,21,26,0,22,31,29,31,25],
[22,40,27,28,29,0,25,39,33,34],
[34,32,22,25,20,26,0,26,35,27],
[18,32,24,16,22,12,25,0,26,32],
[20,31,10,20,20,18,16,25,0,27],
[22,32,25,23,26,17,24,19,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,23,27,26,29,26,25,29,32],
[22,0,21,17,27,28,25,19,25,27],
[28,30,0,20,29,31,34,31,27,31],
[24,34,31,0,29,31,32,23,24,30],
[25,24,22,22,0,26,25,21,24,24],
[22,23,20,20,25,0,28,20,28,28],
[25,26,17,19,26,23,0,21,28,26],
[26,32,20,28,30,31,30,0,29,33],
[22,26,24,27,27,23,23,22,0,28],
[19,24,20,21,27,23,25,18,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,24,23,30,18,24,24,12,24],
[33,0,32,24,38,34,31,20,26,28],
[27,19,0,30,35,28,33,26,21,8],
[28,27,21,0,25,28,19,16,18,11],
[21,13,16,26,0,15,16,23,9,17],
[33,17,23,23,36,0,32,32,9,17],
[27,20,18,32,35,19,0,17,21,9],
[27,31,25,35,28,19,34,0,17,16],
[39,25,30,33,42,42,30,34,0,23],
[27,23,43,40,34,34,42,35,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,19,20,18,23,17,17,19,24],
[33,0,26,27,30,36,23,23,29,29],
[32,25,0,28,29,34,28,25,28,31],
[31,24,23,0,24,36,26,23,28,29],
[33,21,22,27,0,33,24,27,26,27],
[28,15,17,15,18,0,15,20,18,24],
[34,28,23,25,27,36,0,26,28,29],
[34,28,26,28,24,31,25,0,28,31],
[32,22,23,23,25,33,23,23,0,30],
[27,22,20,22,24,27,22,20,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,24,34,29,23,27,38,28,26],
[28,0,26,31,30,22,31,35,30,22],
[27,25,0,28,27,20,25,32,21,17],
[17,20,23,0,25,18,25,33,23,21],
[22,21,24,26,0,21,25,31,18,24],
[28,29,31,33,30,0,33,43,26,23],
[24,20,26,26,26,18,0,31,19,21],
[13,16,19,18,20,8,20,0,17,13],
[23,21,30,28,33,25,32,34,0,27],
[25,29,34,30,27,28,30,38,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,27,30,26,23,26,29,30,25],
[29,0,29,34,29,23,31,30,31,30],
[24,22,0,28,25,18,24,20,27,27],
[21,17,23,0,19,15,24,24,21,19],
[25,22,26,32,0,23,22,21,22,19],
[28,28,33,36,28,0,25,26,33,23],
[25,20,27,27,29,26,0,24,25,27],
[22,21,31,27,30,25,27,0,31,28],
[21,20,24,30,29,18,26,20,0,27],
[26,21,24,32,32,28,24,23,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,28,24,25,24,34,29,26,26],
[26,0,26,26,22,25,33,28,25,32],
[23,25,0,22,22,26,30,30,25,24],
[27,25,29,0,22,26,34,28,25,28],
[26,29,29,29,0,24,36,27,25,33],
[27,26,25,25,27,0,26,18,26,23],
[17,18,21,17,15,25,0,24,19,17],
[22,23,21,23,24,33,27,0,24,27],
[25,26,26,26,26,25,32,27,0,26],
[25,19,27,23,18,28,34,24,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,25,28,29,32,26,30,29,31],
[22,0,25,28,23,29,29,27,22,21],
[26,26,0,24,18,29,23,24,22,23],
[23,23,27,0,23,31,26,26,24,20],
[22,28,33,28,0,32,32,27,26,24],
[19,22,22,20,19,0,21,23,20,21],
[25,22,28,25,19,30,0,25,21,23],
[21,24,27,25,24,28,26,0,21,23],
[22,29,29,27,25,31,30,30,0,29],
[20,30,28,31,27,30,28,28,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,22,27,25,26,22,28,23,19],
[28,0,22,27,29,22,22,29,29,25],
[29,29,0,27,24,28,31,30,30,26],
[24,24,24,0,25,25,26,34,29,24],
[26,22,27,26,0,21,26,30,24,22],
[25,29,23,26,30,0,29,30,29,25],
[29,29,20,25,25,22,0,25,26,22],
[23,22,21,17,21,21,26,0,24,19],
[28,22,21,22,27,22,25,27,0,22],
[32,26,25,27,29,26,29,32,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,28,30,33,24,26,21,29,31],
[31,0,29,24,36,29,29,28,34,30],
[23,22,0,26,29,31,20,26,30,31],
[21,27,25,0,36,26,26,29,31,30],
[18,15,22,15,0,19,13,20,20,20],
[27,22,20,25,32,0,19,27,27,33],
[25,22,31,25,38,32,0,28,27,39],
[30,23,25,22,31,24,23,0,30,32],
[22,17,21,20,31,24,24,21,0,31],
[20,21,20,21,31,18,12,19,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,30,23,25,35,28,26,32,18],
[24,0,24,28,28,37,29,32,28,25],
[21,27,0,17,28,31,19,23,27,18],
[28,23,34,0,28,35,26,26,30,23],
[26,23,23,23,0,39,18,30,28,21],
[16,14,20,16,12,0,17,22,22,11],
[23,22,32,25,33,34,0,33,36,26],
[25,19,28,25,21,29,18,0,28,18],
[19,23,24,21,23,29,15,23,0,14],
[33,26,33,28,30,40,25,33,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,33,33,23,28,35,31,28,34],
[21,0,29,30,27,26,39,28,32,33],
[18,22,0,25,18,20,27,20,23,23],
[18,21,26,0,23,30,34,29,31,26],
[28,24,33,28,0,33,33,28,30,29],
[23,25,31,21,18,0,26,22,23,25],
[16,12,24,17,18,25,0,19,21,21],
[20,23,31,22,23,29,32,0,29,34],
[23,19,28,20,21,28,30,22,0,26],
[17,18,28,25,22,26,30,17,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,24,32,29,34,42,31,29,32],
[16,0,8,22,16,10,18,13,13,17],
[27,43,0,36,27,26,48,23,37,28],
[19,29,15,0,25,24,32,21,21,18],
[22,35,24,26,0,10,29,17,27,24],
[17,41,25,27,41,0,32,15,45,25],
[9,33,3,19,22,19,0,12,16,11],
[20,38,28,30,34,36,39,0,35,37],
[22,38,14,30,24,6,35,16,0,18],
[19,34,23,33,27,26,40,14,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,30,29,21,25,31,25,27,28],
[31,0,30,28,30,29,34,30,30,22],
[21,21,0,27,25,29,34,24,25,22],
[22,23,24,0,22,25,34,19,24,21],
[30,21,26,29,0,33,32,21,25,22],
[26,22,22,26,18,0,27,18,22,21],
[20,17,17,17,19,24,0,19,21,18],
[26,21,27,32,30,33,32,0,31,22],
[24,21,26,27,26,29,30,20,0,20],
[23,29,29,30,29,30,33,29,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,25,20,23,30,22,27,28,26],
[17,0,22,15,21,21,18,21,15,17],
[26,29,0,26,22,24,23,24,21,19],
[31,36,25,0,26,31,22,27,28,28],
[28,30,29,25,0,29,25,26,27,21],
[21,30,27,20,22,0,20,19,28,15],
[29,33,28,29,26,31,0,29,22,25],
[24,30,27,24,25,32,22,0,21,19],
[23,36,30,23,24,23,29,30,0,26],
[25,34,32,23,30,36,26,32,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,25,25,21,28,24,29,27,23],
[27,0,26,25,19,35,23,30,24,26],
[26,25,0,20,20,26,21,24,28,22],
[26,26,31,0,22,24,27,29,26,31],
[30,32,31,29,0,32,26,30,30,25],
[23,16,25,27,19,0,21,28,19,24],
[27,28,30,24,25,30,0,30,30,23],
[22,21,27,22,21,23,21,0,25,20],
[24,27,23,25,21,32,21,26,0,22],
[28,25,29,20,26,27,28,31,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,31,28,25,23,27,30,32,20],
[23,0,30,31,32,22,31,36,26,23],
[20,21,0,27,18,22,24,28,20,20],
[23,20,24,0,27,23,28,31,21,26],
[26,19,33,24,0,22,30,29,25,24],
[28,29,29,28,29,0,30,31,24,24],
[24,20,27,23,21,21,0,26,20,16],
[21,15,23,20,22,20,25,0,21,21],
[19,25,31,30,26,27,31,30,0,21],
[31,28,31,25,27,27,35,30,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,27,38,31,29,25,21,27,35],
[19,0,21,34,22,33,16,20,26,44],
[24,30,0,37,37,35,30,26,21,30],
[13,17,14,0,23,23,12,23,23,28],
[20,29,14,28,0,20,16,21,27,28],
[22,18,16,28,31,0,17,33,19,23],
[26,35,21,39,35,34,0,27,27,28],
[30,31,25,28,30,18,24,0,8,36],
[24,25,30,28,24,32,24,43,0,34],
[16,7,21,23,23,28,23,15,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,26,21,32,25,22,31,39,25],
[20,0,20,21,27,32,25,26,35,27],
[25,31,0,35,34,26,23,31,30,25],
[30,30,16,0,40,29,24,33,29,34],
[19,24,17,11,0,24,23,28,27,20],
[26,19,25,22,27,0,19,23,31,21],
[29,26,28,27,28,32,0,26,30,22],
[20,25,20,18,23,28,25,0,32,21],
[12,16,21,22,24,20,21,19,0,27],
[26,24,26,17,31,30,29,30,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,27,20,27,23,22,24,23,24],
[25,0,31,25,26,24,25,27,19,29],
[24,20,0,30,29,23,28,26,23,30],
[31,26,21,0,27,26,24,24,27,32],
[24,25,22,24,0,19,23,23,23,25],
[28,27,28,25,32,0,25,25,28,29],
[29,26,23,27,28,26,0,30,26,27],
[27,24,25,27,28,26,21,0,28,29],
[28,32,28,24,28,23,25,23,0,29],
[27,22,21,19,26,22,24,22,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,21,18,21,21,24,22,22],
[28,0,24,29,26,24,26,28,28,25],
[25,27,0,28,31,27,26,30,30,35],
[30,22,23,0,21,25,24,28,27,25],
[33,25,20,30,0,28,20,24,26,23],
[30,27,24,26,23,0,26,31,28,27],
[30,25,25,27,31,25,0,32,26,23],
[27,23,21,23,27,20,19,0,25,25],
[29,23,21,24,25,23,25,26,0,26],
[29,26,16,26,28,24,28,26,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,30,27,2,16,35,14,16,16],
[14,0,28,16,16,14,14,14,14,14],
[21,23,0,23,12,23,21,11,23,27],
[24,35,28,0,16,14,24,28,14,14],
[49,35,39,35,0,35,35,25,35,25],
[35,37,28,37,16,0,35,25,14,28],
[16,37,30,27,16,16,0,14,16,16],
[37,37,40,23,26,26,37,0,12,16],
[35,37,28,37,16,37,35,39,0,27],
[35,37,24,37,26,23,35,35,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,22,22,27,33,27,25,29,25],
[23,0,23,23,27,32,23,19,26,23],
[29,28,0,33,25,34,27,26,27,23],
[29,28,18,0,24,29,24,22,26,22],
[24,24,26,27,0,29,25,17,31,22],
[18,19,17,22,22,0,21,21,22,18],
[24,28,24,27,26,30,0,30,31,28],
[26,32,25,29,34,30,21,0,30,31],
[22,25,24,25,20,29,20,21,0,20],
[26,28,28,29,29,33,23,20,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,21,29,21,21,23,21,18,15],
[28,0,25,35,26,30,26,24,28,25],
[30,26,0,27,24,29,28,23,19,23],
[22,16,24,0,22,24,17,23,19,20],
[30,25,27,29,0,30,20,23,23,27],
[30,21,22,27,21,0,19,25,22,23],
[28,25,23,34,31,32,0,32,23,29],
[30,27,28,28,28,26,19,0,22,22],
[33,23,32,32,28,29,28,29,0,21],
[36,26,28,31,24,28,22,29,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,27,25,22,23,25,32,26,28],
[22,0,27,26,25,24,20,28,17,30],
[24,24,0,20,18,24,22,25,19,32],
[26,25,31,0,27,24,29,27,26,31],
[29,26,33,24,0,23,28,29,28,25],
[28,27,27,27,28,0,25,29,28,31],
[26,31,29,22,23,26,0,29,17,32],
[19,23,26,24,22,22,22,0,24,28],
[25,34,32,25,23,23,34,27,0,28],
[23,21,19,20,26,20,19,23,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,11,32,15,40,34,16,22,16],
[29,0,0,32,15,29,30,23,29,25],
[40,51,0,32,23,44,34,33,33,37],
[19,19,19,0,24,40,23,5,29,34],
[36,36,28,27,0,47,30,22,25,26],
[11,22,7,11,4,0,11,12,1,16],
[17,21,17,28,21,40,0,23,10,26],
[35,28,18,46,29,39,28,0,28,33],
[29,22,18,22,26,50,41,23,0,27],
[35,26,14,17,25,35,25,18,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,24,25,30,27,28,26,28,30],
[25,0,26,33,26,28,28,29,28,33],
[27,25,0,25,27,25,30,25,28,32],
[26,18,26,0,18,25,27,25,22,26],
[21,25,24,33,0,23,27,22,20,26],
[24,23,26,26,28,0,21,27,25,28],
[23,23,21,24,24,30,0,22,20,23],
[25,22,26,26,29,24,29,0,28,27],
[23,23,23,29,31,26,31,23,0,26],
[21,18,19,25,25,23,28,24,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,32,28,21,27,31,29,29],
[25,0,27,29,20,22,25,22,21,25],
[25,24,0,25,24,25,32,20,22,29],
[19,22,26,0,26,20,23,29,24,26],
[23,31,27,25,0,23,29,31,20,29],
[30,29,26,31,28,0,26,29,29,25],
[24,26,19,28,22,25,0,27,24,27],
[20,29,31,22,20,22,24,0,21,25],
[22,30,29,27,31,22,27,30,0,30],
[22,26,22,25,22,26,24,26,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,23,24,21,13,16,26,12,10],
[42,0,39,32,36,23,30,39,33,22],
[28,12,0,31,24,23,28,33,20,12],
[27,19,20,0,25,17,22,23,15,23],
[30,15,27,26,0,22,30,38,25,26],
[38,28,28,34,29,0,25,32,33,23],
[35,21,23,29,21,26,0,31,28,16],
[25,12,18,28,13,19,20,0,16,23],
[39,18,31,36,26,18,23,35,0,14],
[41,29,39,28,25,28,35,28,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,30,32,22,32,32,32,39,36],
[26,0,30,26,21,23,33,24,28,24],
[21,21,0,28,18,25,28,26,23,28],
[19,25,23,0,16,31,31,30,26,23],
[29,30,33,35,0,35,34,32,31,21],
[19,28,26,20,16,0,39,28,24,21],
[19,18,23,20,17,12,0,21,21,18],
[19,27,25,21,19,23,30,0,15,17],
[12,23,28,25,20,27,30,36,0,24],
[15,27,23,28,30,30,33,34,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,28,29,28,24,25,26,30,24],
[21,0,20,25,20,21,17,18,26,16],
[23,31,0,22,18,25,22,22,28,17],
[22,26,29,0,18,23,23,25,24,21],
[23,31,33,33,0,28,29,26,34,23],
[27,30,26,28,23,0,28,28,28,27],
[26,34,29,28,22,23,0,28,29,21],
[25,33,29,26,25,23,23,0,26,24],
[21,25,23,27,17,23,22,25,0,15],
[27,35,34,30,28,24,30,27,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,34,34,32,17,0,32,17,34],
[2,0,2,2,17,2,2,17,19,19],
[17,49,0,34,17,17,17,49,34,34],
[17,49,17,0,17,17,17,49,34,34],
[19,34,34,34,0,34,19,34,34,19],
[34,49,34,34,17,0,34,34,49,34],
[51,49,34,34,32,17,0,34,49,49],
[19,34,2,2,17,17,17,0,34,17],
[34,32,17,17,17,2,2,17,0,34],
[17,32,17,17,32,17,2,34,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,23,26,26,21,24,26,23,20],
[29,0,25,26,27,23,27,30,24,28],
[28,26,0,24,28,26,24,29,26,28],
[25,25,27,0,31,25,27,29,26,28],
[25,24,23,20,0,20,23,32,24,26],
[30,28,25,26,31,0,26,31,28,30],
[27,24,27,24,28,25,0,28,25,24],
[25,21,22,22,19,20,23,0,24,21],
[28,27,25,25,27,23,26,27,0,26],
[31,23,23,23,25,21,27,30,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,33,28,25,30,31,34,31,32],
[25,0,24,21,22,28,19,29,27,29],
[18,27,0,30,28,32,24,27,32,30],
[23,30,21,0,22,31,24,28,32,32],
[26,29,23,29,0,26,29,28,34,32],
[21,23,19,20,25,0,19,26,27,26],
[20,32,27,27,22,32,0,30,31,33],
[17,22,24,23,23,25,21,0,27,25],
[20,24,19,19,17,24,20,24,0,22],
[19,22,21,19,19,25,18,26,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,23,0,0,5,5,23,0],
[51,0,51,51,28,51,28,28,46,23],
[51,0,0,23,28,0,5,28,23,23],
[28,0,28,0,28,5,5,28,0,23],
[51,23,23,23,0,23,28,28,23,23],
[51,0,51,46,28,0,28,28,46,23],
[46,23,46,46,23,23,0,51,46,23],
[46,23,23,23,23,23,0,0,23,0],
[28,5,28,51,28,5,5,28,0,28],
[51,28,28,28,28,28,28,51,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,26,28,32,13,26,19,39,25],
[24,0,31,26,32,28,31,27,34,31],
[25,20,0,25,28,26,23,29,35,23],
[23,25,26,0,27,17,24,24,33,25],
[19,19,23,24,0,16,24,17,27,22],
[38,23,25,34,35,0,28,22,34,28],
[25,20,28,27,27,23,0,22,27,23],
[32,24,22,27,34,29,29,0,33,29],
[12,17,16,18,24,17,24,18,0,19],
[26,20,28,26,29,23,28,22,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,36,33,39,25,24,29,31,28],
[21,0,21,17,20,29,24,31,29,18],
[15,30,0,29,29,26,21,33,26,22],
[18,34,22,0,26,22,17,29,21,29],
[12,31,22,25,0,23,13,26,26,27],
[26,22,25,29,28,0,26,32,28,24],
[27,27,30,34,38,25,0,26,28,27],
[22,20,18,22,25,19,25,0,26,21],
[20,22,25,30,25,23,23,25,0,20],
[23,33,29,22,24,27,24,30,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,26,33,33,32,33,26,39,20],
[12,0,28,39,32,42,38,38,36,32],
[25,23,0,17,33,39,23,33,39,20],
[18,12,34,0,28,22,18,26,42,22],
[18,19,18,23,0,22,22,26,32,18],
[19,9,12,29,29,0,29,32,45,22],
[18,13,28,33,29,22,0,36,36,22],
[25,13,18,25,25,19,15,0,49,28],
[12,15,12,9,19,6,15,2,0,2],
[31,19,31,29,33,29,29,23,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,29,28,30,26,26,28,30],
[26,0,25,26,28,27,24,27,31,25],
[26,26,0,27,29,30,23,29,29,22],
[22,25,24,0,29,29,24,25,30,20],
[23,23,22,22,0,30,21,26,29,24],
[21,24,21,22,21,0,23,20,24,22],
[25,27,28,27,30,28,0,23,28,23],
[25,24,22,26,25,31,28,0,30,28],
[23,20,22,21,22,27,23,21,0,26],
[21,26,29,31,27,29,28,23,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,30,26,29,26,23,28,31,25],
[26,0,25,25,28,29,29,23,28,24],
[21,26,0,29,26,24,24,23,24,26],
[25,26,22,0,26,20,26,27,22,23],
[22,23,25,25,0,22,30,28,23,24],
[25,22,27,31,29,0,32,31,29,27],
[28,22,27,25,21,19,0,25,25,27],
[23,28,28,24,23,20,26,0,26,20],
[20,23,27,29,28,22,26,25,0,27],
[26,27,25,28,27,24,24,31,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,23,27,23,23,26,23,24,23],
[24,0,24,21,26,24,25,23,21,29],
[28,27,0,27,25,27,25,29,31,28],
[24,30,24,0,27,19,26,23,24,28],
[28,25,26,24,0,22,24,25,28,27],
[28,27,24,32,29,0,29,26,26,27],
[25,26,26,25,27,22,0,25,24,27],
[28,28,22,28,26,25,26,0,24,26],
[27,30,20,27,23,25,27,27,0,24],
[28,22,23,23,24,24,24,25,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,32,28,23,30,25,24,18,28],
[26,0,26,21,17,25,21,23,22,20],
[19,25,0,22,18,22,21,23,14,25],
[23,30,29,0,22,31,29,26,29,28],
[28,34,33,29,0,34,25,22,22,30],
[21,26,29,20,17,0,26,23,19,21],
[26,30,30,22,26,25,0,28,28,29],
[27,28,28,25,29,28,23,0,27,25],
[33,29,37,22,29,32,23,24,0,28],
[23,31,26,23,21,30,22,26,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,32,22,24,33,29,24,25,24],
[27,0,27,26,30,29,28,25,30,33],
[19,24,0,20,24,32,24,24,26,25],
[29,25,31,0,29,31,31,28,34,31],
[27,21,27,22,0,28,31,21,26,29],
[18,22,19,20,23,0,23,20,21,22],
[22,23,27,20,20,28,0,21,23,27],
[27,26,27,23,30,31,30,0,27,30],
[26,21,25,17,25,30,28,24,0,23],
[27,18,26,20,22,29,24,21,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,25,29,29,33,26,21,23,27],
[25,0,20,21,28,29,26,23,25,24],
[26,31,0,30,29,36,26,17,18,17],
[22,30,21,0,26,22,24,20,21,23],
[22,23,22,25,0,22,17,19,22,20],
[18,22,15,29,29,0,23,13,19,21],
[25,25,25,27,34,28,0,21,21,25],
[30,28,34,31,32,38,30,0,26,24],
[28,26,33,30,29,32,30,25,0,25],
[24,27,34,28,31,30,26,27,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,20,21,22,20,22,16,16,19],
[28,0,31,33,26,27,28,26,25,26],
[31,20,0,26,28,34,25,20,19,20],
[30,18,25,0,25,26,24,13,12,14],
[29,25,23,26,0,25,30,17,18,24],
[31,24,17,25,26,0,24,26,28,23],
[29,23,26,27,21,27,0,15,19,20],
[35,25,31,38,34,25,36,0,30,32],
[35,26,32,39,33,23,32,21,0,36],
[32,25,31,37,27,28,31,19,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,34,23,27,27,24,26,29,31],
[22,0,27,19,27,26,22,24,28,25],
[17,24,0,19,27,18,21,26,30,25],
[28,32,32,0,29,26,27,27,30,25],
[24,24,24,22,0,26,21,24,25,26],
[24,25,33,25,25,0,27,31,30,30],
[27,29,30,24,30,24,0,25,29,27],
[25,27,25,24,27,20,26,0,26,25],
[22,23,21,21,26,21,22,25,0,25],
[20,26,26,26,25,21,24,26,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,22,22,27,28,19,19,25,21],
[24,0,23,34,20,29,25,25,18,20],
[29,28,0,30,26,27,20,27,21,27],
[29,17,21,0,24,22,15,26,20,15],
[24,31,25,27,0,24,22,28,26,21],
[23,22,24,29,27,0,23,31,23,24],
[32,26,31,36,29,28,0,26,24,25],
[32,26,24,25,23,20,25,0,23,19],
[26,33,30,31,25,28,27,28,0,20],
[30,31,24,36,30,27,26,32,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,25,19,25,14,20,17,21,18],
[31,0,26,25,30,23,29,27,25,22],
[26,25,0,24,27,18,21,21,24,20],
[32,26,27,0,28,21,21,15,25,21],
[26,21,24,23,0,19,23,24,21,18],
[37,28,33,30,32,0,28,24,31,30],
[31,22,30,30,28,23,0,27,26,22],
[34,24,30,36,27,27,24,0,25,27],
[30,26,27,26,30,20,25,26,0,23],
[33,29,31,30,33,21,29,24,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,27,28,25,24,27,20,22],
[28,0,29,24,22,31,24,29,24,25],
[25,22,0,22,27,22,18,28,22,21],
[24,27,29,0,28,29,23,25,26,24],
[23,29,24,23,0,23,21,22,21,23],
[26,20,29,22,28,0,23,30,24,24],
[27,27,33,28,30,28,0,25,25,28],
[24,22,23,26,29,21,26,0,26,21],
[31,27,29,25,30,27,26,25,0,25],
[29,26,30,27,28,27,23,30,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,15,26,15,20,20,21,18,21],
[31,0,23,31,27,26,23,23,30,29],
[36,28,0,27,27,27,26,32,31,23],
[25,20,24,0,23,25,20,24,20,23],
[36,24,24,28,0,33,25,29,27,26],
[31,25,24,26,18,0,19,28,23,25],
[31,28,25,31,26,32,0,25,23,25],
[30,28,19,27,22,23,26,0,24,26],
[33,21,20,31,24,28,28,27,0,25],
[30,22,28,28,25,26,26,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,26,28,27,23,27,22,28,21],
[27,0,27,29,27,23,25,29,26,26],
[25,24,0,28,30,25,25,26,28,28],
[23,22,23,0,32,23,21,19,22,19],
[24,24,21,19,0,22,21,18,24,20],
[28,28,26,28,29,0,22,28,25,27],
[24,26,26,30,30,29,0,32,27,29],
[29,22,25,32,33,23,19,0,29,22],
[23,25,23,29,27,26,24,22,0,23],
[30,25,23,32,31,24,22,29,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,31,31,37,23,27,37,27],
[23,0,25,34,31,31,31,27,33,27],
[25,26,0,33,27,32,27,25,33,30],
[20,17,18,0,28,29,25,22,30,26],
[20,20,24,23,0,26,23,24,30,25],
[14,20,19,22,25,0,20,18,26,26],
[28,20,24,26,28,31,0,24,34,29],
[24,24,26,29,27,33,27,0,32,31],
[14,18,18,21,21,25,17,19,0,18],
[24,24,21,25,26,25,22,20,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,22,27,24,31,20,27,24,35],
[18,0,22,19,20,21,18,21,19,25],
[29,29,0,22,26,29,26,31,27,34],
[24,32,29,0,25,32,17,29,23,33],
[27,31,25,26,0,31,25,26,20,35],
[20,30,22,19,20,0,18,28,26,29],
[31,33,25,34,26,33,0,29,24,33],
[24,30,20,22,25,23,22,0,19,28],
[27,32,24,28,31,25,27,32,0,32],
[16,26,17,18,16,22,18,23,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,31,29,22,26,27,34,37,27],
[22,0,33,33,20,34,27,26,35,32],
[20,18,0,24,12,26,25,19,30,17],
[22,18,27,0,6,22,20,20,21,19],
[29,31,39,45,0,32,35,28,41,24],
[25,17,25,29,19,0,21,27,25,21],
[24,24,26,31,16,30,0,26,30,20],
[17,25,32,31,23,24,25,0,31,22],
[14,16,21,30,10,26,21,20,0,20],
[24,19,34,32,27,30,31,29,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,27,28,26,24,24,23,23,17],
[26,0,27,27,27,25,25,25,22,22],
[24,24,0,26,22,23,23,26,19,16],
[23,24,25,0,28,20,25,24,29,14],
[25,24,29,23,0,21,22,23,16,18],
[27,26,28,31,30,0,28,25,26,22],
[27,26,28,26,29,23,0,28,17,22],
[28,26,25,27,28,26,23,0,22,21],
[28,29,32,22,35,25,34,29,0,26],
[34,29,35,37,33,29,29,30,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,27,24,27,24,32,27,28,27],
[28,0,25,30,29,24,29,23,23,22],
[24,26,0,28,24,24,31,24,25,25],
[27,21,23,0,29,19,27,19,23,25],
[24,22,27,22,0,23,29,25,23,26],
[27,27,27,32,28,0,36,23,29,32],
[19,22,20,24,22,15,0,20,26,19],
[24,28,27,32,26,28,31,0,27,25],
[23,28,26,28,28,22,25,24,0,30],
[24,29,26,26,25,19,32,26,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,32,29,36,33,21,33,36,32],
[11,0,21,19,28,16,20,27,25,26],
[19,30,0,29,42,26,24,28,23,34],
[22,32,22,0,33,16,19,35,21,24],
[15,23,9,18,0,18,19,25,18,24],
[18,35,25,35,33,0,29,37,32,36],
[30,31,27,32,32,22,0,35,28,24],
[18,24,23,16,26,14,16,0,20,20],
[15,26,28,30,33,19,23,31,0,31],
[19,25,17,27,27,15,27,31,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,18,18,18,27,25,19,22,16],
[25,0,28,20,25,31,22,16,18,31],
[33,23,0,27,22,24,24,23,21,22],
[33,31,24,0,21,31,22,25,26,31],
[33,26,29,30,0,28,24,20,25,35],
[24,20,27,20,23,0,16,15,24,24],
[26,29,27,29,27,35,0,22,27,25],
[32,35,28,26,31,36,29,0,24,26],
[29,33,30,25,26,27,24,27,0,26],
[35,20,29,20,16,27,26,25,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,25,30,29,26,25,27,27,23],
[27,0,23,25,33,29,26,21,30,25],
[26,28,0,34,39,36,24,27,24,32],
[21,26,17,0,29,24,27,22,23,21],
[22,18,12,22,0,25,15,23,23,17],
[25,22,15,27,26,0,25,21,25,22],
[26,25,27,24,36,26,0,24,30,27],
[24,30,24,29,28,30,27,0,27,24],
[24,21,27,28,28,26,21,24,0,19],
[28,26,19,30,34,29,24,27,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,32,32,29,29,23,28,22],
[27,0,27,29,29,28,25,25,29,28],
[27,24,0,25,27,26,23,23,27,25],
[19,22,26,0,25,23,18,21,23,19],
[19,22,24,26,0,25,24,20,24,22],
[22,23,25,28,26,0,23,22,22,27],
[22,26,28,33,27,28,0,20,27,24],
[28,26,28,30,31,29,31,0,27,25],
[23,22,24,28,27,29,24,24,0,24],
[29,23,26,32,29,24,27,26,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,29,34,22,32,33,29,28,34],
[25,0,25,28,26,27,33,30,24,24],
[22,26,0,24,22,26,33,22,28,24],
[17,23,27,0,24,29,31,25,29,30],
[29,25,29,27,0,33,37,27,29,27],
[19,24,25,22,18,0,23,22,30,23],
[18,18,18,20,14,28,0,22,23,28],
[22,21,29,26,24,29,29,0,30,25],
[23,27,23,22,22,21,28,21,0,25],
[17,27,27,21,24,28,23,26,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,25,25,21,22,19,20,25,20],
[30,0,30,23,24,26,24,26,31,27],
[26,21,0,19,24,20,21,24,27,25],
[26,28,32,0,23,27,24,25,31,26],
[30,27,27,28,0,27,28,24,29,24],
[29,25,31,24,24,0,23,25,25,24],
[32,27,30,27,23,28,0,23,23,29],
[31,25,27,26,27,26,28,0,28,29],
[26,20,24,20,22,26,28,23,0,21],
[31,24,26,25,27,27,22,22,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,26,26,22,26,29,23,28,18],
[29,0,31,25,19,22,31,18,31,27],
[25,20,0,26,19,20,29,28,23,20],
[25,26,25,0,26,25,28,25,26,25],
[29,32,32,25,0,26,31,29,30,27],
[25,29,31,26,25,0,35,27,31,23],
[22,20,22,23,20,16,0,25,19,17],
[28,33,23,26,22,24,26,0,31,27],
[23,20,28,25,21,20,32,20,0,14],
[33,24,31,26,24,28,34,24,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,22,29,30,29,28,22,26,23],
[23,0,28,27,30,24,26,24,33,30],
[29,23,0,22,25,24,25,29,24,24],
[22,24,29,0,24,25,27,28,30,26],
[21,21,26,27,0,23,23,27,28,24],
[22,27,27,26,28,0,23,24,29,23],
[23,25,26,24,28,28,0,29,32,30],
[29,27,22,23,24,27,22,0,30,24],
[25,18,27,21,23,22,19,21,0,17],
[28,21,27,25,27,28,21,27,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,50,42,28,12,12,27,34,27],
[39,0,42,42,25,48,17,43,42,16],
[1,9,0,27,9,9,1,4,23,0],
[9,9,24,0,25,9,9,12,31,24],
[23,26,42,26,0,24,24,26,26,42],
[39,3,42,42,27,0,16,26,26,19],
[39,34,50,42,27,35,0,26,26,19],
[24,8,47,39,25,25,25,0,31,24],
[17,9,28,20,25,25,25,20,0,25],
[24,35,51,27,9,32,32,27,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,23,37,20,5,17,23,22,28],
[32,0,19,33,27,26,30,32,34,29],
[28,32,0,32,31,16,23,29,23,28],
[14,18,19,0,27,14,27,6,13,23],
[31,24,20,24,0,18,22,21,20,25],
[46,25,35,37,33,0,38,38,32,33],
[34,21,28,24,29,13,0,22,19,33],
[28,19,22,45,30,13,29,0,28,34],
[29,17,28,38,31,19,32,23,0,29],
[23,22,23,28,26,18,18,17,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,26,26,27,29,29,31,24,25],
[24,0,20,25,30,20,25,24,24,29],
[25,31,0,26,32,26,27,30,28,33],
[25,26,25,0,31,23,24,27,24,28],
[24,21,19,20,0,20,24,24,23,27],
[22,31,25,28,31,0,23,27,26,25],
[22,26,24,27,27,28,0,26,27,27],
[20,27,21,24,27,24,25,0,24,27],
[27,27,23,27,28,25,24,27,0,25],
[26,22,18,23,24,26,24,24,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,31,26,29,24,24,23,21,23],
[23,0,24,23,22,21,20,20,18,16],
[20,27,0,28,26,24,24,19,21,16],
[25,28,23,0,30,26,32,23,24,20],
[22,29,25,21,0,18,19,22,16,19],
[27,30,27,25,33,0,26,24,28,19],
[27,31,27,19,32,25,0,28,24,25],
[28,31,32,28,29,27,23,0,22,24],
[30,33,30,27,35,23,27,29,0,27],
[28,35,35,31,32,32,26,27,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,20,27,26,25,29,25,25,26],
[27,0,29,29,26,27,30,29,26,23],
[31,22,0,27,24,23,29,27,26,31],
[24,22,24,0,26,25,29,27,26,31],
[25,25,27,25,0,25,29,22,29,31],
[26,24,28,26,26,0,28,28,28,23],
[22,21,22,22,22,23,0,29,26,27],
[26,22,24,24,29,23,22,0,27,27],
[26,25,25,25,22,23,25,24,0,23],
[25,28,20,20,20,28,24,24,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,26,31,19,18,14,18,28,17],
[21,0,26,27,20,18,17,28,18,11],
[25,25,0,41,19,33,17,29,26,21],
[20,24,10,0,22,21,8,21,24,17],
[32,31,32,29,0,19,20,28,35,25],
[33,33,18,30,32,0,27,27,27,26],
[37,34,34,43,31,24,0,28,32,31],
[33,23,22,30,23,24,23,0,27,23],
[23,33,25,27,16,24,19,24,0,18],
[34,40,30,34,26,25,20,28,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,30,26,26,26,20,26,21,36],
[27,0,23,31,24,26,24,27,21,31],
[21,28,0,24,18,25,24,17,23,34],
[25,20,27,0,25,26,23,28,21,28],
[25,27,33,26,0,24,21,29,26,31],
[25,25,26,25,27,0,19,25,18,34],
[31,27,27,28,30,32,0,25,29,38],
[25,24,34,23,22,26,26,0,24,29],
[30,30,28,30,25,33,22,27,0,38],
[15,20,17,23,20,17,13,22,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,30,23,23,22,25,28,23,29],
[22,0,25,25,26,21,24,25,25,26],
[21,26,0,22,23,22,26,22,22,27],
[28,26,29,0,31,24,22,29,24,29],
[28,25,28,20,0,25,26,27,26,31],
[29,30,29,27,26,0,32,25,31,33],
[26,27,25,29,25,19,0,28,22,32],
[23,26,29,22,24,26,23,0,24,30],
[28,26,29,27,25,20,29,27,0,29],
[22,25,24,22,20,18,19,21,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,15,25,10,27,32,30,37,16],
[28,0,13,22,15,30,31,31,31,26],
[36,38,0,33,21,33,39,36,37,30],
[26,29,18,0,21,27,29,34,35,15],
[41,36,30,30,0,21,38,32,33,28],
[24,21,18,24,30,0,34,33,36,28],
[19,20,12,22,13,17,0,28,30,16],
[21,20,15,17,19,18,23,0,28,16],
[14,20,14,16,18,15,21,23,0,14],
[35,25,21,36,23,23,35,35,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,30,21,24,18,27,14,31,22],
[27,0,20,10,17,7,24,18,18,22],
[21,31,0,26,25,21,23,20,25,29],
[30,41,25,0,28,26,29,24,32,36],
[27,34,26,23,0,18,21,17,20,25],
[33,44,30,25,33,0,28,26,30,35],
[24,27,28,22,30,23,0,16,31,28],
[37,33,31,27,34,25,35,0,29,31],
[20,33,26,19,31,21,20,22,0,25],
[29,29,22,15,26,16,23,20,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,22,27,28,30,30,29,27,22],
[32,0,31,24,36,30,36,37,36,26],
[29,20,0,25,27,29,32,27,28,28],
[24,27,26,0,33,33,33,31,31,24],
[23,15,24,18,0,26,31,24,24,21],
[21,21,22,18,25,0,26,24,25,16],
[21,15,19,18,20,25,0,19,19,21],
[22,14,24,20,27,27,32,0,29,21],
[24,15,23,20,27,26,32,22,0,21],
[29,25,23,27,30,35,30,30,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,28,26,33,35,19,27,32,28],
[26,0,35,31,30,37,32,32,32,25],
[23,16,0,20,35,31,21,36,30,25],
[25,20,31,0,31,34,29,32,29,28],
[18,21,16,20,0,24,20,25,34,21],
[16,14,20,17,27,0,17,24,22,17],
[32,19,30,22,31,34,0,33,28,29],
[24,19,15,19,26,27,18,0,25,21],
[19,19,21,22,17,29,23,26,0,22],
[23,26,26,23,30,34,22,30,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,34,24,27,31,32,27,29,29],
[22,0,31,24,23,27,28,22,24,28],
[17,20,0,23,20,23,18,22,15,21],
[27,27,28,0,23,31,29,30,22,32],
[24,28,31,28,0,28,32,23,26,33],
[20,24,28,20,23,0,24,27,21,27],
[19,23,33,22,19,27,0,22,25,26],
[24,29,29,21,28,24,29,0,28,35],
[22,27,36,29,25,30,26,23,0,27],
[22,23,30,19,18,24,25,16,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,27,16,28,21,25,18,23,25],
[35,0,27,26,31,22,28,20,27,30],
[24,24,0,20,23,15,22,16,15,19],
[35,25,31,0,29,26,28,28,23,27],
[23,20,28,22,0,19,26,20,25,25],
[30,29,36,25,32,0,34,24,28,28],
[26,23,29,23,25,17,0,17,23,26],
[33,31,35,23,31,27,34,0,29,33],
[28,24,36,28,26,23,28,22,0,30],
[26,21,32,24,26,23,25,18,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,20,24,24,27,28,21,25,23],
[24,0,24,24,25,27,22,24,21,23],
[31,27,0,28,24,27,27,24,32,29],
[27,27,23,0,17,24,23,24,24,26],
[27,26,27,34,0,27,30,24,23,30],
[24,24,24,27,24,0,25,21,24,22],
[23,29,24,28,21,26,0,25,25,24],
[30,27,27,27,27,30,26,0,25,29],
[26,30,19,27,28,27,26,26,0,25],
[28,28,22,25,21,29,27,22,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,30,36,26,23,26,27,29,30],
[6,0,18,12,23,16,10,19,9,18],
[21,33,0,18,25,23,16,25,11,19],
[15,39,33,0,28,23,19,20,13,16],
[25,28,26,23,0,26,21,21,22,20],
[28,35,28,28,25,0,27,18,24,19],
[25,41,35,32,30,24,0,26,24,23],
[24,32,26,31,30,33,25,0,24,21],
[22,42,40,38,29,27,27,27,0,30],
[21,33,32,35,31,32,28,30,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,33,31,27,23,29,28,29,24],
[20,0,24,24,21,23,29,25,22,25],
[18,27,0,23,24,25,27,32,18,24],
[20,27,28,0,26,24,24,23,23,29],
[24,30,27,25,0,26,27,27,24,29],
[28,28,26,27,25,0,26,23,25,26],
[22,22,24,27,24,25,0,22,20,26],
[23,26,19,28,24,28,29,0,18,21],
[22,29,33,28,27,26,31,33,0,25],
[27,26,27,22,22,25,25,30,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,7,11,19,7,0,23,0,32],
[31,0,31,31,31,29,31,29,19,51],
[44,20,0,35,33,30,14,23,10,44],
[40,20,16,0,21,26,12,19,17,42],
[32,20,18,30,0,18,12,30,7,39],
[44,22,21,25,33,0,14,23,12,44],
[51,20,37,39,39,37,0,30,37,49],
[28,22,28,32,21,28,21,0,28,44],
[51,32,41,34,44,39,14,23,0,34],
[19,0,7,9,12,7,2,7,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,29,31,32,25,26,27,33,25],
[24,0,30,26,26,23,27,27,27,22],
[22,21,0,28,34,23,28,28,36,20],
[20,25,23,0,23,27,27,23,25,23],
[19,25,17,28,0,28,23,20,26,21],
[26,28,28,24,23,0,28,26,30,26],
[25,24,23,24,28,23,0,25,22,22],
[24,24,23,28,31,25,26,0,25,24],
[18,24,15,26,25,21,29,26,0,17],
[26,29,31,28,30,25,29,27,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,30,29,23,26,29,28,32,29],
[27,0,24,27,24,21,26,23,27,27],
[21,27,0,25,28,21,30,29,30,31],
[22,24,26,0,26,23,29,26,31,28],
[28,27,23,25,0,24,29,25,29,27],
[25,30,30,28,27,0,32,30,34,30],
[22,25,21,22,22,19,0,25,24,23],
[23,28,22,25,26,21,26,0,26,26],
[19,24,21,20,22,17,27,25,0,24],
[22,24,20,23,24,21,28,25,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,23,26,28,29,30,23,32],
[23,0,24,26,23,21,26,26,22,27],
[25,27,0,22,18,12,19,22,17,26],
[28,25,29,0,22,27,28,24,29,32],
[25,28,33,29,0,25,32,26,21,26],
[23,30,39,24,26,0,28,28,28,35],
[22,25,32,23,19,23,0,22,24,27],
[21,25,29,27,25,23,29,0,22,30],
[28,29,34,22,30,23,27,29,0,32],
[19,24,25,19,25,16,24,21,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,29,18,20,28,24,23,23,25],
[28,0,28,24,30,27,24,23,19,28],
[22,23,0,21,18,23,21,19,27,24],
[33,27,30,0,29,33,25,29,23,33],
[31,21,33,22,0,29,27,22,26,24],
[23,24,28,18,22,0,23,25,23,27],
[27,27,30,26,24,28,0,28,25,25],
[28,28,32,22,29,26,23,0,25,24],
[28,32,24,28,25,28,26,26,0,28],
[26,23,27,18,27,24,26,27,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,17,23,22,21,23,28,21,19],
[31,0,21,21,23,29,28,34,25,29],
[34,30,0,30,28,33,26,32,35,18],
[28,30,21,0,22,29,23,29,25,22],
[29,28,23,29,0,20,20,24,26,14],
[30,22,18,22,31,0,21,31,27,24],
[28,23,25,28,31,30,0,30,33,21],
[23,17,19,22,27,20,21,0,23,14],
[30,26,16,26,25,24,18,28,0,19],
[32,22,33,29,37,27,30,37,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,39,20,25,30,31,27,26,26],
[14,0,19,16,20,17,16,17,10,12],
[12,32,0,25,22,20,31,31,19,24],
[31,35,26,0,29,34,33,26,21,27],
[26,31,29,22,0,28,30,33,16,27],
[21,34,31,17,23,0,25,23,17,28],
[20,35,20,18,21,26,0,23,15,28],
[24,34,20,25,18,28,28,0,19,24],
[25,41,32,30,35,34,36,32,0,32],
[25,39,27,24,24,23,23,27,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,23,28,25,31,28,25,26,26],
[19,0,19,19,28,24,30,24,27,16],
[28,32,0,25,28,30,34,28,28,29],
[23,32,26,0,31,24,38,31,30,23],
[26,23,23,20,0,25,28,23,27,24],
[20,27,21,27,26,0,32,25,27,22],
[23,21,17,13,23,19,0,18,24,21],
[26,27,23,20,28,26,33,0,29,26],
[25,24,23,21,24,24,27,22,0,23],
[25,35,22,28,27,29,30,25,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,18,14,16,21,13,23,23,20],
[28,0,25,20,19,28,26,28,28,21],
[33,26,0,20,27,28,23,31,27,27],
[37,31,31,0,33,29,27,32,25,31],
[35,32,24,18,0,30,28,29,26,23],
[30,23,23,22,21,0,25,28,19,22],
[38,25,28,24,23,26,0,32,30,27],
[28,23,20,19,22,23,19,0,24,18],
[28,23,24,26,25,32,21,27,0,24],
[31,30,24,20,28,29,24,33,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,19,20,25,20,25,21,20,19],
[34,0,28,26,21,24,29,27,30,27],
[32,23,0,22,19,17,16,25,20,19],
[31,25,29,0,30,25,31,28,27,29],
[26,30,32,21,0,25,24,25,26,20],
[31,27,34,26,26,0,30,28,28,24],
[26,22,35,20,27,21,0,20,27,23],
[30,24,26,23,26,23,31,0,27,21],
[31,21,31,24,25,23,24,24,0,21],
[32,24,32,22,31,27,28,30,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,26,23,27,32,19,31,25,30],
[34,0,19,31,32,33,35,39,31,41],
[25,32,0,25,28,33,28,34,31,31],
[28,20,26,0,22,36,13,21,26,24],
[24,19,23,29,0,28,17,12,23,22],
[19,18,18,15,23,0,13,31,20,28],
[32,16,23,38,34,38,0,35,28,32],
[20,12,17,30,39,20,16,0,15,20],
[26,20,20,25,28,31,23,36,0,26],
[21,10,20,27,29,23,19,31,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,24,24,28,29,28,24,16,22],
[29,0,36,20,38,20,24,21,20,27],
[27,15,0,25,19,31,15,32,22,29],
[27,31,26,0,18,20,33,22,27,18],
[23,13,32,33,0,20,20,21,18,23],
[22,31,20,31,31,0,31,40,27,31],
[23,27,36,18,31,20,0,25,11,28],
[27,30,19,29,30,11,26,0,18,28],
[35,31,29,24,33,24,40,33,0,25],
[29,24,22,33,28,20,23,23,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,20,22,23,20,24,23,18,19],
[32,0,25,27,29,24,25,29,28,29],
[31,26,0,25,26,19,21,29,26,28],
[29,24,26,0,27,27,22,24,22,21],
[28,22,25,24,0,25,17,26,22,18],
[31,27,32,24,26,0,27,30,27,25],
[27,26,30,29,34,24,0,28,27,24],
[28,22,22,27,25,21,23,0,25,23],
[33,23,25,29,29,24,24,26,0,24],
[32,22,23,30,33,26,27,28,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,7,29,14,12,21,21,18,16],
[30,0,17,17,24,15,22,24,24,31],
[44,34,0,31,31,20,16,31,31,31],
[22,34,20,0,27,25,21,14,9,29],
[37,27,20,24,0,27,7,9,9,44],
[39,36,31,26,24,0,31,33,33,31],
[30,29,35,30,44,20,0,30,30,37],
[30,27,20,37,42,18,21,0,22,44],
[33,27,20,42,42,18,21,29,0,42],
[35,20,20,22,7,20,14,7,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,31,26,30,31,33,25,28,31],
[22,0,26,26,26,28,27,27,22,26],
[20,25,0,20,27,31,26,24,20,25],
[25,25,31,0,27,31,29,29,25,27],
[21,25,24,24,0,30,24,26,20,26],
[20,23,20,20,21,0,22,26,19,23],
[18,24,25,22,27,29,0,22,21,25],
[26,24,27,22,25,25,29,0,21,24],
[23,29,31,26,31,32,30,30,0,34],
[20,25,26,24,25,28,26,27,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,31,25,29,26,27,24,29,30],
[23,0,29,26,26,27,25,27,29,33],
[20,22,0,30,19,19,23,22,24,25],
[26,25,21,0,26,20,33,20,22,27],
[22,25,32,25,0,23,24,22,29,27],
[25,24,32,31,28,0,25,29,30,28],
[24,26,28,18,27,26,0,19,31,27],
[27,24,29,31,29,22,32,0,33,29],
[22,22,27,29,22,21,20,18,0,28],
[21,18,26,24,24,23,24,22,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,25,27,24,18,26,24,32,31],
[20,0,18,24,17,21,16,16,22,21],
[26,33,0,29,28,19,23,29,26,33],
[24,27,22,0,26,19,19,22,24,27],
[27,34,23,25,0,24,24,30,27,25],
[33,30,32,32,27,0,23,31,32,35],
[25,35,28,32,27,28,0,24,31,29],
[27,35,22,29,21,20,27,0,33,27],
[19,29,25,27,24,19,20,18,0,25],
[20,30,18,24,26,16,22,24,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,19,21,17,20,14,31,30,27],
[38,0,24,35,26,34,28,43,38,32],
[32,27,0,32,26,26,25,35,35,32],
[30,16,19,0,29,25,16,30,29,25],
[34,25,25,22,0,34,28,37,30,28],
[31,17,25,26,17,0,23,34,28,30],
[37,23,26,35,23,28,0,42,30,28],
[20,8,16,21,14,17,9,0,29,20],
[21,13,16,22,21,23,21,22,0,23],
[24,19,19,26,23,21,23,31,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,31,30,31,35,41,24,27,25],
[20,0,30,33,31,33,26,26,29,27],
[20,21,0,34,26,25,27,27,21,18],
[21,18,17,0,19,25,25,17,24,18],
[20,20,25,32,0,31,23,26,26,27],
[16,18,26,26,20,0,16,25,20,19],
[10,25,24,26,28,35,0,26,22,24],
[27,25,24,34,25,26,25,0,25,32],
[24,22,30,27,25,31,29,26,0,23],
[26,24,33,33,24,32,27,19,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,22,29,29,26,20,17,32,38],
[27,0,17,23,32,14,18,17,28,36],
[29,34,0,27,25,32,28,23,38,40],
[22,28,24,0,30,26,18,27,36,40],
[22,19,26,21,0,22,16,13,31,37],
[25,37,19,25,29,0,22,16,29,49],
[31,33,23,33,35,29,0,22,38,44],
[34,34,28,24,38,35,29,0,37,38],
[19,23,13,15,20,22,13,14,0,25],
[13,15,11,11,14,2,7,13,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,25,27,32,24,28,28,33,31],
[30,0,33,23,25,26,28,24,31,34],
[26,18,0,18,27,16,21,20,22,30],
[24,28,33,0,32,23,31,29,34,32],
[19,26,24,19,0,20,22,19,28,20],
[27,25,35,28,31,0,30,24,32,29],
[23,23,30,20,29,21,0,22,24,25],
[23,27,31,22,32,27,29,0,28,38],
[18,20,29,17,23,19,27,23,0,25],
[20,17,21,19,31,22,26,13,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,22,23,26,22,20,25,24,21],
[27,0,18,21,23,21,22,25,29,22],
[29,33,0,25,34,26,26,31,31,25],
[28,30,26,0,30,22,25,26,29,28],
[25,28,17,21,0,18,22,24,24,21],
[29,30,25,29,33,0,28,29,25,27],
[31,29,25,26,29,23,0,26,33,25],
[26,26,20,25,27,22,25,0,23,24],
[27,22,20,22,27,26,18,28,0,20],
[30,29,26,23,30,24,26,27,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,24,24,26,24,27,25,27,27],
[26,0,25,32,26,26,24,28,29,26],
[27,26,0,28,27,28,30,24,29,26],
[27,19,23,0,24,28,27,25,26,22],
[25,25,24,27,0,31,24,25,28,24],
[27,25,23,23,20,0,24,23,27,31],
[24,27,21,24,27,27,0,26,27,24],
[26,23,27,26,26,28,25,0,29,27],
[24,22,22,25,23,24,24,22,0,21],
[24,25,25,29,27,20,27,24,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,21,21,25,24,17,22,23],
[28,0,31,19,25,26,23,27,27,20],
[25,20,0,21,17,20,19,20,26,18],
[30,32,30,0,27,23,26,27,26,24],
[30,26,34,24,0,21,24,21,26,20],
[26,25,31,28,30,0,21,27,28,25],
[27,28,32,25,27,30,0,23,25,26],
[34,24,31,24,30,24,28,0,31,25],
[29,24,25,25,25,23,26,20,0,22],
[28,31,33,27,31,26,25,26,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,20,21,20,27,22,24,32,21],
[25,0,21,24,24,23,21,27,26,25],
[31,30,0,32,27,27,29,23,34,23],
[30,27,19,0,31,25,23,32,27,27],
[31,27,24,20,0,24,25,25,29,26],
[24,28,24,26,27,0,19,26,26,26],
[29,30,22,28,26,32,0,29,28,27],
[27,24,28,19,26,25,22,0,29,23],
[19,25,17,24,22,25,23,22,0,22],
[30,26,28,24,25,25,24,28,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,22,32,32,25,23,15,27,35],
[29,0,21,37,36,28,31,30,31,30],
[29,30,0,38,36,30,24,29,31,30],
[19,14,13,0,28,21,16,12,24,22],
[19,15,15,23,0,23,14,17,18,24],
[26,23,21,30,28,0,15,19,31,24],
[28,20,27,35,37,36,0,26,34,31],
[36,21,22,39,34,32,25,0,36,32],
[24,20,20,27,33,20,17,15,0,28],
[16,21,21,29,27,27,20,19,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,22,28,24,26,22,32,24],
[26,0,13,20,23,25,19,22,26,25],
[26,38,0,28,35,28,33,25,35,23],
[29,31,23,0,35,34,20,23,28,26],
[23,28,16,16,0,18,17,18,23,15],
[27,26,23,17,33,0,22,20,24,24],
[25,32,18,31,34,29,0,26,26,27],
[29,29,26,28,33,31,25,0,26,25],
[19,25,16,23,28,27,25,25,0,31],
[27,26,28,25,36,27,24,26,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,21,25,25,23,19,25,24,30],
[24,0,19,21,20,23,23,21,18,23],
[30,32,0,24,20,22,27,29,29,26],
[26,30,27,0,25,24,26,28,28,26],
[26,31,31,26,0,24,27,27,25,27],
[28,28,29,27,27,0,25,29,33,24],
[32,28,24,25,24,26,0,27,32,26],
[26,30,22,23,24,22,24,0,29,28],
[27,33,22,23,26,18,19,22,0,22],
[21,28,25,25,24,27,25,23,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,22,18,34,32,37,23,25,24],
[23,0,14,15,17,24,21,21,22,16],
[29,37,0,24,39,38,38,22,25,22],
[33,36,27,0,30,33,24,25,31,38],
[17,34,12,21,0,20,27,16,22,22],
[19,27,13,18,31,0,21,22,24,23],
[14,30,13,27,24,30,0,26,22,27],
[28,30,29,26,35,29,25,0,27,32],
[26,29,26,20,29,27,29,24,0,25],
[27,35,29,13,29,28,24,19,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,33,24,31,30,25,24,25,33],
[26,0,33,27,30,28,27,26,23,27],
[18,18,0,23,27,22,20,18,16,25],
[27,24,28,0,25,28,27,23,24,28],
[20,21,24,26,0,30,19,26,19,30],
[21,23,29,23,21,0,24,24,17,27],
[26,24,31,24,32,27,0,28,28,28],
[27,25,33,28,25,27,23,0,24,30],
[26,28,35,27,32,34,23,27,0,33],
[18,24,26,23,21,24,23,21,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,36,28,29,35,33,31,37,27],
[27,0,33,33,30,30,31,30,25,31],
[15,18,0,33,22,33,25,20,23,23],
[23,18,18,0,17,29,26,14,16,14],
[22,21,29,34,0,37,35,36,29,30],
[16,21,18,22,14,0,22,19,21,18],
[18,20,26,25,16,29,0,15,22,19],
[20,21,31,37,15,32,36,0,27,28],
[14,26,28,35,22,30,29,24,0,22],
[24,20,28,37,21,33,32,23,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,27,27,22,23,25,28,24,30],
[28,0,28,34,23,24,26,26,28,26],
[24,23,0,21,17,25,21,27,26,23],
[24,17,30,0,21,20,25,23,24,27],
[29,28,34,30,0,25,23,29,31,31],
[28,27,26,31,26,0,24,30,27,28],
[26,25,30,26,28,27,0,33,28,34],
[23,25,24,28,22,21,18,0,23,25],
[27,23,25,27,20,24,23,28,0,23],
[21,25,28,24,20,23,17,26,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,29,21,27,26,18,29,24,26],
[22,0,23,22,21,15,18,28,21,28],
[22,28,0,19,19,13,26,22,21,17],
[30,29,32,0,25,22,27,30,29,31],
[24,30,32,26,0,21,24,29,24,28],
[25,36,38,29,30,0,29,34,23,27],
[33,33,25,24,27,22,0,28,22,24],
[22,23,29,21,22,17,23,0,22,28],
[27,30,30,22,27,28,29,29,0,26],
[25,23,34,20,23,24,27,23,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,23,16,23,19,30,21,23,25],
[24,0,20,22,27,28,33,18,20,22],
[28,31,0,24,22,28,29,25,22,27],
[35,29,27,0,25,30,27,28,24,25],
[28,24,29,26,0,27,34,28,31,26],
[32,23,23,21,24,0,24,21,20,29],
[21,18,22,24,17,27,0,23,19,22],
[30,33,26,23,23,30,28,0,29,28],
[28,31,29,27,20,31,32,22,0,28],
[26,29,24,26,25,22,29,23,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,23,24,29,38,22,42,18,30],
[18,0,28,27,25,34,31,34,19,39],
[28,23,0,33,35,35,29,36,27,33],
[27,24,18,0,33,34,29,34,23,34],
[22,26,16,18,0,25,24,23,22,26],
[13,17,16,17,26,0,22,24,9,17],
[29,20,22,22,27,29,0,26,27,29],
[9,17,15,17,28,27,25,0,16,25],
[33,32,24,28,29,42,24,35,0,30],
[21,12,18,17,25,34,22,26,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,31,25,24,29,23,22,21,23],
[30,0,25,20,25,35,28,28,24,24],
[20,26,0,23,23,30,22,25,23,25],
[26,31,28,0,24,34,29,31,30,30],
[27,26,28,27,0,33,26,29,23,24],
[22,16,21,17,18,0,25,22,23,25],
[28,23,29,22,25,26,0,26,22,25],
[29,23,26,20,22,29,25,0,21,28],
[30,27,28,21,28,28,29,30,0,29],
[28,27,26,21,27,26,26,23,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,35,18,19,50,19,18,1,18],
[50,0,49,49,32,50,33,50,14,32],
[16,2,0,33,34,51,16,33,15,14],
[33,2,18,0,19,51,16,1,15,0],
[32,19,17,32,0,32,15,18,14,14],
[1,1,0,0,19,0,1,0,1,0],
[32,18,35,35,36,50,0,35,17,0],
[33,1,18,50,33,51,16,0,15,14],
[50,37,36,36,37,50,34,36,0,18],
[33,19,37,51,37,51,51,37,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,25,21,33,31,17,26,14,26],
[6,0,22,21,20,29,17,26,5,26],
[26,29,0,29,40,31,20,34,31,34],
[30,30,22,0,24,19,17,11,16,37],
[18,31,11,27,0,29,17,26,23,26],
[20,22,20,32,22,0,12,21,14,26],
[34,34,31,34,34,39,0,20,31,43],
[25,25,17,40,25,30,31,0,30,45],
[37,46,20,35,28,37,20,21,0,35],
[25,25,17,14,25,25,8,6,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,34,26,17,37,22,14,20,20],
[40,0,26,29,19,28,34,14,20,17],
[17,25,0,17,14,34,20,14,21,17],
[25,22,34,0,31,31,31,23,37,31],
[34,32,37,20,0,32,28,15,32,23],
[14,23,17,20,19,0,25,17,17,12],
[29,17,31,20,23,26,0,0,37,17],
[37,37,37,28,36,34,51,0,37,25],
[31,31,30,14,19,34,14,14,0,25],
[31,34,34,20,28,39,34,26,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,21,22,21,20,21,21,18,25],
[27,0,22,26,26,15,22,25,21,32],
[30,29,0,30,28,27,27,24,23,32],
[29,25,21,0,26,18,22,24,25,20],
[30,25,23,25,0,18,22,28,24,30],
[31,36,24,33,33,0,28,28,25,39],
[30,29,24,29,29,23,0,22,21,32],
[30,26,27,27,23,23,29,0,27,27],
[33,30,28,26,27,26,30,24,0,29],
[26,19,19,31,21,12,19,24,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,24,21,25,22,25,26,22,23],
[25,0,27,20,28,22,23,25,23,23],
[27,24,0,24,29,18,31,27,26,24],
[30,31,27,0,27,27,28,28,26,23],
[26,23,22,24,0,19,25,24,25,26],
[29,29,33,24,32,0,29,29,30,29],
[26,28,20,23,26,22,0,23,24,21],
[25,26,24,23,27,22,28,0,25,25],
[29,28,25,25,26,21,27,26,0,21],
[28,28,27,28,25,22,30,26,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,31,17,11,10,8,33,25,16],
[29,0,9,10,20,21,11,38,29,13],
[20,42,0,10,18,17,15,35,27,23],
[34,41,41,0,11,24,14,39,29,18],
[40,31,33,40,0,39,20,40,39,30],
[41,30,34,27,12,0,9,43,22,16],
[43,40,36,37,31,42,0,38,40,18],
[18,13,16,12,11,8,13,0,14,21],
[26,22,24,22,12,29,11,37,0,16],
[35,38,28,33,21,35,33,30,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,23,23,29,22,26,23,24,26],
[15,0,17,15,18,21,18,21,20,13],
[28,34,0,28,28,20,20,25,24,17],
[28,36,23,0,25,22,26,24,28,27],
[22,33,23,26,0,22,18,20,17,23],
[29,30,31,29,29,0,26,29,28,25],
[25,33,31,25,33,25,0,26,19,24],
[28,30,26,27,31,22,25,0,24,22],
[27,31,27,23,34,23,32,27,0,21],
[25,38,34,24,28,26,27,29,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,32,28,20,28,25,31,25,28],
[26,0,22,25,23,28,26,24,25,27],
[19,29,0,27,23,25,28,26,27,30],
[23,26,24,0,29,24,20,29,30,26],
[31,28,28,22,0,26,29,28,28,26],
[23,23,26,27,25,0,20,25,28,24],
[26,25,23,31,22,31,0,26,25,28],
[20,27,25,22,23,26,25,0,25,24],
[26,26,24,21,23,23,26,26,0,30],
[23,24,21,25,25,27,23,27,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,37,11,15,29,13,22,31,17],
[19,0,36,24,14,27,23,18,16,25],
[14,15,0,20,14,14,14,9,17,21],
[40,27,31,0,29,31,20,30,37,33],
[36,37,37,22,0,30,16,22,37,22],
[22,24,37,20,21,0,20,13,20,20],
[38,28,37,31,35,31,0,16,35,30],
[29,33,42,21,29,38,35,0,32,31],
[20,35,34,14,14,31,16,19,0,16],
[34,26,30,18,29,31,21,20,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,20,26,25,29,25,21,28,27],
[30,0,27,24,29,32,32,26,28,30],
[31,24,0,30,22,32,30,23,29,33],
[25,27,21,0,27,31,29,25,28,28],
[26,22,29,24,0,33,28,30,31,26],
[22,19,19,20,18,0,21,18,22,23],
[26,19,21,22,23,30,0,22,26,25],
[30,25,28,26,21,33,29,0,28,31],
[23,23,22,23,20,29,25,23,0,21],
[24,21,18,23,25,28,26,20,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,34,40,44,49,34,51,23,24],
[20,0,32,23,33,32,32,37,11,33],
[17,19,0,19,19,31,39,21,30,24],
[11,28,32,0,24,32,31,28,20,24],
[7,18,32,27,0,39,38,48,20,24],
[2,19,20,19,12,0,22,21,18,24],
[17,19,12,20,13,29,0,17,16,22],
[0,14,30,23,3,30,34,0,12,22],
[28,40,21,31,31,33,35,39,0,24],
[27,18,27,27,27,27,29,29,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,28,31,26,24,26,25,27,25],
[23,0,33,31,30,21,27,29,28,23],
[23,18,0,33,28,18,20,21,26,20],
[20,20,18,0,20,16,19,23,22,13],
[25,21,23,31,0,22,19,24,23,23],
[27,30,33,35,29,0,27,29,34,23],
[25,24,31,32,32,24,0,30,25,24],
[26,22,30,28,27,22,21,0,27,24],
[24,23,25,29,28,17,26,24,0,26],
[26,28,31,38,28,28,27,27,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,25,26,21,28,31,27,25,23],
[34,0,28,25,27,27,34,30,30,27],
[26,23,0,23,19,28,26,26,24,19],
[25,26,28,0,22,30,31,23,24,23],
[30,24,32,29,0,28,35,30,25,22],
[23,24,23,21,23,0,32,27,24,22],
[20,17,25,20,16,19,0,23,19,21],
[24,21,25,28,21,24,28,0,28,22],
[26,21,27,27,26,27,32,23,0,19],
[28,24,32,28,29,29,30,29,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,20,11,0,31,31,31,51,31],
[11,0,20,11,11,31,31,31,51,31],
[31,31,0,11,11,31,11,31,31,11],
[40,40,40,0,40,40,20,40,40,20],
[51,40,40,11,0,51,31,51,51,31],
[20,20,20,11,0,0,20,31,31,31],
[20,20,40,31,20,31,0,31,31,31],
[20,20,20,11,0,20,20,0,51,20],
[0,0,20,11,0,20,20,0,0,20],
[20,20,40,31,20,20,20,31,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,20,23,19,24,19,26,23,24],
[24,0,18,31,22,25,23,28,23,28],
[31,33,0,34,24,26,28,36,29,27],
[28,20,17,0,19,25,19,28,20,25],
[32,29,27,32,0,25,26,31,20,30],
[27,26,25,26,26,0,27,31,24,25],
[32,28,23,32,25,24,0,30,24,28],
[25,23,15,23,20,20,21,0,23,23],
[28,28,22,31,31,27,27,28,0,25],
[27,23,24,26,21,26,23,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,24,24,29,25,29,32,30,26],
[25,0,22,27,31,23,25,35,31,25],
[27,29,0,24,31,26,29,31,32,26],
[27,24,27,0,30,25,29,30,28,26],
[22,20,20,21,0,30,31,27,31,23],
[26,28,25,26,21,0,27,32,29,27],
[22,26,22,22,20,24,0,27,29,22],
[19,16,20,21,24,19,24,0,23,20],
[21,20,19,23,20,22,22,28,0,22],
[25,26,25,25,28,24,29,31,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,22,25,18,24,24,30,15,29],
[24,0,23,15,17,14,28,24,13,23],
[29,28,0,17,22,21,27,24,12,27],
[26,36,34,0,27,27,26,28,23,29],
[33,34,29,24,0,24,34,35,22,27],
[27,37,30,24,27,0,25,25,26,23],
[27,23,24,25,17,26,0,20,15,21],
[21,27,27,23,16,26,31,0,17,21],
[36,38,39,28,29,25,36,34,0,31],
[22,28,24,22,24,28,30,30,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,22,14,24,24,16,19,15,16],
[19,0,21,21,27,31,18,24,17,10],
[29,30,0,23,22,20,31,26,27,26],
[37,30,28,0,32,27,28,28,21,25],
[27,24,29,19,0,32,28,27,23,18],
[27,20,31,24,19,0,26,23,25,25],
[35,33,20,23,23,25,0,28,27,18],
[32,27,25,23,24,28,23,0,33,26],
[36,34,24,30,28,26,24,18,0,31],
[35,41,25,26,33,26,33,25,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,24,22,29,23,25,27,31,24],
[23,0,29,18,25,24,25,28,30,25],
[27,22,0,26,26,25,29,25,33,21],
[29,33,25,0,28,27,30,25,33,29],
[22,26,25,23,0,23,24,25,25,24],
[28,27,26,24,28,0,28,28,28,24],
[26,26,22,21,27,23,0,23,25,27],
[24,23,26,26,26,23,28,0,22,24],
[20,21,18,18,26,23,26,29,0,22],
[27,26,30,22,27,27,24,27,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,31,29,25,22,30,38,28,24],
[21,0,30,30,23,25,27,39,27,23],
[20,21,0,22,21,21,22,27,22,17],
[22,21,29,0,21,22,24,34,21,18],
[26,28,30,30,0,29,26,35,27,22],
[29,26,30,29,22,0,27,37,25,19],
[21,24,29,27,25,24,0,32,26,22],
[13,12,24,17,16,14,19,0,17,16],
[23,24,29,30,24,26,25,34,0,27],
[27,28,34,33,29,32,29,35,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,23,26,25,19,27,27,23,34],
[29,0,19,24,26,29,26,24,26,29],
[28,32,0,31,27,25,25,27,29,30],
[25,27,20,0,28,22,15,27,20,24],
[26,25,24,23,0,24,24,17,25,31],
[32,22,26,29,27,0,29,23,28,33],
[24,25,26,36,27,22,0,25,36,34],
[24,27,24,24,34,28,26,0,21,26],
[28,25,22,31,26,23,15,30,0,37],
[17,22,21,27,20,18,17,25,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,45,31,36,33,25,26,33,28],
[9,0,10,14,26,17,16,17,10,10],
[6,41,0,13,27,22,13,17,7,6],
[20,37,38,0,30,20,19,20,21,37],
[15,25,24,21,0,22,13,10,15,14],
[18,34,29,31,29,0,28,18,25,18],
[26,35,38,32,38,23,0,20,25,24],
[25,34,34,31,41,33,31,0,25,34],
[18,41,44,30,36,26,26,26,0,36],
[23,41,45,14,37,33,27,17,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,24,29,24,25,27,25,23,28],
[21,0,18,22,20,22,19,23,22,30],
[27,33,0,27,27,31,24,24,23,30],
[22,29,24,0,23,23,22,28,25,28],
[27,31,24,28,0,23,29,29,29,33],
[26,29,20,28,28,0,24,30,19,30],
[24,32,27,29,22,27,0,28,24,29],
[26,28,27,23,22,21,23,0,24,29],
[28,29,28,26,22,32,27,27,0,32],
[23,21,21,23,18,21,22,22,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,25,24,26,25,18,23,24,24],
[29,0,25,22,25,24,21,26,26,25],
[26,26,0,29,23,23,22,28,30,28],
[27,29,22,0,23,28,32,25,29,24],
[25,26,28,28,0,26,22,29,31,26],
[26,27,28,23,25,0,23,19,26,24],
[33,30,29,19,29,28,0,21,30,27],
[28,25,23,26,22,32,30,0,31,27],
[27,25,21,22,20,25,21,20,0,21],
[27,26,23,27,25,27,24,24,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,23,28,26,34,30,25,28,27],
[14,0,12,19,19,23,23,20,21,21],
[28,39,0,26,25,26,29,32,35,29],
[23,32,25,0,27,17,26,26,24,27],
[25,32,26,24,0,26,27,35,32,30],
[17,28,25,34,25,0,25,31,33,26],
[21,28,22,25,24,26,0,28,28,28],
[26,31,19,25,16,20,23,0,29,26],
[23,30,16,27,19,18,23,22,0,29],
[24,30,22,24,21,25,23,25,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,29,32,27,26,30,32,35,31],
[29,0,38,32,32,34,33,24,34,34],
[22,13,0,30,21,32,22,17,27,34],
[19,19,21,0,18,26,32,20,21,22],
[24,19,30,33,0,29,33,26,30,28],
[25,17,19,25,22,0,20,18,24,15],
[21,18,29,19,18,31,0,20,32,34],
[19,27,34,31,25,33,31,0,33,36],
[16,17,24,30,21,27,19,18,0,27],
[20,17,17,29,23,36,17,15,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,13,18,17,5,25,23,23,12],
[36,0,27,35,31,22,31,34,31,19],
[38,24,0,40,40,26,33,28,26,28],
[33,16,11,0,25,14,20,23,18,12],
[34,20,11,26,0,6,26,23,31,21],
[46,29,25,37,45,0,36,36,34,31],
[26,20,18,31,25,15,0,27,15,8],
[28,17,23,28,28,15,24,0,29,16],
[28,20,25,33,20,17,36,22,0,7],
[39,32,23,39,30,20,43,35,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,23,24,19,29,22,21,26,14],
[24,0,20,19,19,24,25,29,13,23],
[28,31,0,29,21,30,25,25,18,23],
[27,32,22,0,25,29,27,28,19,19],
[32,32,30,26,0,24,23,28,24,31],
[22,27,21,22,27,0,21,19,19,23],
[29,26,26,24,28,30,0,27,20,25],
[30,22,26,23,23,32,24,0,19,21],
[25,38,33,32,27,32,31,32,0,26],
[37,28,28,32,20,28,26,30,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,18,23,21,20,25,28,26,20],
[34,0,29,28,22,26,31,36,30,28],
[33,22,0,28,24,25,28,27,28,28],
[28,23,23,0,25,23,28,28,32,27],
[30,29,27,26,0,23,29,29,27,28],
[31,25,26,28,28,0,34,34,33,29],
[26,20,23,23,22,17,0,22,29,22],
[23,15,24,23,22,17,29,0,25,20],
[25,21,23,19,24,18,22,26,0,25],
[31,23,23,24,23,22,29,31,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,20,22,23,28,22,23,27,21],
[23,0,26,25,31,30,21,28,29,28],
[31,25,0,22,31,27,24,23,28,23],
[29,26,29,0,30,32,26,34,25,26],
[28,20,20,21,0,27,22,21,25,21],
[23,21,24,19,24,0,20,22,27,22],
[29,30,27,25,29,31,0,31,27,26],
[28,23,28,17,30,29,20,0,24,27],
[24,22,23,26,26,24,24,27,0,15],
[30,23,28,25,30,29,25,24,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,15,22,17,22,23,10,17,17],
[28,0,15,11,17,17,36,28,12,19],
[36,36,0,24,30,29,36,33,31,19],
[29,40,27,0,22,21,35,34,23,29],
[34,34,21,29,0,17,31,28,13,25],
[29,34,22,30,34,0,31,34,29,17],
[28,15,15,16,20,20,0,28,10,4],
[41,23,18,17,23,17,23,0,13,7],
[34,39,20,28,38,22,41,38,0,24],
[34,32,32,22,26,34,47,44,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,23,25,28,24,21,32,23,29],
[28,0,28,27,29,21,31,26,19,30],
[28,23,0,27,25,26,20,24,23,24],
[26,24,24,0,27,22,26,26,26,25],
[23,22,26,24,0,22,27,25,23,26],
[27,30,25,29,29,0,26,34,25,26],
[30,20,31,25,24,25,0,25,19,21],
[19,25,27,25,26,17,26,0,28,27],
[28,32,28,25,28,26,32,23,0,34],
[22,21,27,26,25,25,30,24,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,24,24,23,25,24,24,27,25],
[28,0,28,30,27,27,32,29,23,31],
[27,23,0,22,29,31,31,25,27,30],
[27,21,29,0,26,29,28,26,23,27],
[28,24,22,25,0,26,33,29,26,26],
[26,24,20,22,25,0,33,24,24,26],
[27,19,20,23,18,18,0,22,21,23],
[27,22,26,25,22,27,29,0,23,25],
[24,28,24,28,25,27,30,28,0,31],
[26,20,21,24,25,25,28,26,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,23,37,25,35,31,35,33,20],
[15,0,14,19,18,24,26,23,27,21],
[28,37,0,25,29,37,39,33,44,31],
[14,32,26,0,29,25,24,25,30,21],
[26,33,22,22,0,29,33,33,38,26],
[16,27,14,26,22,0,26,35,28,23],
[20,25,12,27,18,25,0,26,32,19],
[16,28,18,26,18,16,25,0,29,13],
[18,24,7,21,13,23,19,22,0,26],
[31,30,20,30,25,28,32,38,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,27,34,32,27,31,39,25,22],
[20,0,20,32,28,21,24,30,23,17],
[24,31,0,32,22,22,21,25,22,21],
[17,19,19,0,22,17,26,19,22,20],
[19,23,29,29,0,24,37,33,30,27],
[24,30,29,34,27,0,22,29,16,26],
[20,27,30,25,14,29,0,29,19,17],
[12,21,26,32,18,22,22,0,19,17],
[26,28,29,29,21,35,32,32,0,27],
[29,34,30,31,24,25,34,34,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,34,25,31,20,29,27,27,27],
[22,0,29,23,33,18,28,19,25,25],
[17,22,0,20,29,20,22,21,23,23],
[26,28,31,0,33,27,26,23,29,27],
[20,18,22,18,0,18,22,14,22,23],
[31,33,31,24,33,0,28,25,30,27],
[22,23,29,25,29,23,0,21,21,27],
[24,32,30,28,37,26,30,0,25,27],
[24,26,28,22,29,21,30,26,0,25],
[24,26,28,24,28,24,24,24,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,27,27,23,21,22,31,23],
[28,0,24,29,32,27,24,26,33,23],
[25,27,0,32,36,30,24,25,34,27],
[24,22,19,0,26,31,22,26,28,23],
[24,19,15,25,0,24,14,20,27,20],
[28,24,21,20,27,0,22,21,27,22],
[30,27,27,29,37,29,0,27,30,22],
[29,25,26,25,31,30,24,0,31,22],
[20,18,17,23,24,24,21,20,0,17],
[28,28,24,28,31,29,29,29,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,34,21,38,25,15,30,21,18],
[25,0,39,26,36,27,23,25,29,29],
[17,12,0,15,31,20,11,19,18,20],
[30,25,36,0,40,36,28,28,29,30],
[13,15,20,11,0,17,12,21,16,15],
[26,24,31,15,34,0,20,21,27,16],
[36,28,40,23,39,31,0,32,18,29],
[21,26,32,23,30,30,19,0,20,23],
[30,22,33,22,35,24,33,31,0,24],
[33,22,31,21,36,35,22,28,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,27,20,28,29,31,23,22],
[24,0,24,27,26,26,28,29,20,22],
[23,27,0,27,28,30,30,23,26,22],
[24,24,24,0,27,28,26,29,18,24],
[31,25,23,24,0,28,30,27,18,23],
[23,25,21,23,23,0,30,30,20,27],
[22,23,21,25,21,21,0,28,18,28],
[20,22,28,22,24,21,23,0,26,20],
[28,31,25,33,33,31,33,25,0,28],
[29,29,29,27,28,24,23,31,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,15,16,18,33,33,23,25,25],
[27,0,25,33,18,36,26,33,33,32],
[36,26,0,17,20,36,26,16,36,28],
[35,18,34,0,19,43,42,36,28,35],
[33,33,31,32,0,33,33,25,44,43],
[18,15,15,8,18,0,25,15,25,25],
[18,25,25,9,18,26,0,33,22,35],
[28,18,35,15,26,36,18,0,26,41],
[26,18,15,23,7,26,29,25,0,36],
[26,19,23,16,8,26,16,10,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,23,16,19,18,9,14,15,20],
[35,0,38,28,32,29,23,34,34,17],
[28,13,0,17,12,21,3,12,16,20],
[35,23,34,0,26,18,15,22,22,26],
[32,19,39,25,0,14,27,26,19,21],
[33,22,30,33,37,0,28,27,23,18],
[42,28,48,36,24,23,0,29,27,28],
[37,17,39,29,25,24,22,0,19,20],
[36,17,35,29,32,28,24,32,0,16],
[31,34,31,25,30,33,23,31,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,45,25,16,12,22,13,28,48],
[35,0,35,19,15,19,19,16,15,35],
[6,16,0,25,16,12,22,16,6,26],
[26,32,26,0,16,10,19,7,6,39],
[35,36,35,35,0,35,19,23,31,48],
[39,32,39,41,16,0,32,20,35,39],
[29,32,29,32,32,19,0,29,35,32],
[38,35,35,44,28,31,22,0,31,51],
[23,36,45,45,20,16,16,20,0,36],
[3,16,25,12,3,12,19,0,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,25,28,28,22,40,24,37,30],
[21,0,20,19,19,24,25,20,22,26],
[26,31,0,28,23,26,28,32,26,28],
[23,32,23,0,35,28,31,29,28,28],
[23,32,28,16,0,25,29,26,27,32],
[29,27,25,23,26,0,38,30,35,22],
[11,26,23,20,22,13,0,17,24,25],
[27,31,19,22,25,21,34,0,32,29],
[14,29,25,23,24,16,27,19,0,28],
[21,25,23,23,19,29,26,22,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,14,30,32,31,14,29,19,27],
[30,0,24,38,43,26,36,40,34,33],
[37,27,0,35,34,27,22,35,34,24],
[21,13,16,0,17,17,14,41,15,34],
[19,8,17,34,0,10,11,29,14,24],
[20,25,24,34,41,0,11,31,24,27],
[37,15,29,37,40,40,0,39,30,34],
[22,11,16,10,22,20,12,0,17,26],
[32,17,17,36,37,27,21,34,0,27],
[24,18,27,17,27,24,17,25,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,25,33,32,30,28,27,30,30],
[17,0,21,22,26,20,22,15,22,27],
[26,30,0,26,30,28,25,29,27,29],
[18,29,25,0,31,25,23,23,21,29],
[19,25,21,20,0,20,22,23,25,27],
[21,31,23,26,31,0,23,26,31,27],
[23,29,26,28,29,28,0,26,24,28],
[24,36,22,28,28,25,25,0,30,31],
[21,29,24,30,26,20,27,21,0,31],
[21,24,22,22,24,24,23,20,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,28,17,21,28,20,29,13,35],
[31,0,24,24,26,26,22,30,20,36],
[23,27,0,22,19,28,29,28,27,38],
[34,27,29,0,26,32,27,30,25,31],
[30,25,32,25,0,21,28,25,23,32],
[23,25,23,19,30,0,28,29,16,26],
[31,29,22,24,23,23,0,33,24,32],
[22,21,23,21,26,22,18,0,18,27],
[38,31,24,26,28,35,27,33,0,35],
[16,15,13,20,19,25,19,24,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,32,28,29,29,25,28,30],
[23,0,23,20,23,24,23,23,28,25],
[25,28,0,28,26,25,22,22,26,27],
[19,31,23,0,26,21,26,19,18,25],
[23,28,25,25,0,26,28,27,29,28],
[22,27,26,30,25,0,23,19,28,25],
[22,28,29,25,23,28,0,20,25,27],
[26,28,29,32,24,32,31,0,33,34],
[23,23,25,33,22,23,26,18,0,27],
[21,26,24,26,23,26,24,17,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,24,24,28,24,27,29,25,29],
[31,0,29,28,25,29,26,31,30,33],
[27,22,0,25,23,26,28,24,21,28],
[27,23,26,0,31,30,28,26,26,27],
[23,26,28,20,0,25,33,24,22,27],
[27,22,25,21,26,0,26,24,23,26],
[24,25,23,23,18,25,0,22,24,27],
[22,20,27,25,27,27,29,0,25,30],
[26,21,30,25,29,28,27,26,0,29],
[22,18,23,24,24,25,24,21,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,27,27,30,30,25,31,28,31],
[26,0,28,24,30,32,26,29,27,34],
[24,23,0,20,30,25,21,25,23,27],
[24,27,31,0,30,30,23,27,24,29],
[21,21,21,21,0,25,19,25,21,30],
[21,19,26,21,26,0,26,24,27,27],
[26,25,30,28,32,25,0,32,26,31],
[20,22,26,24,26,27,19,0,22,27],
[23,24,28,27,30,24,25,29,0,28],
[20,17,24,22,21,24,20,24,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,13,28,15,21,14,15,17,30],
[37,0,24,29,15,24,24,30,25,36],
[38,27,0,27,25,30,23,26,24,39],
[23,22,24,0,23,31,19,23,25,31],
[36,36,26,28,0,33,27,34,19,39],
[30,27,21,20,18,0,17,19,19,33],
[37,27,28,32,24,34,0,34,27,34],
[36,21,25,28,17,32,17,0,22,34],
[34,26,27,26,32,32,24,29,0,36],
[21,15,12,20,12,18,17,17,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,27,30,27,29,26,25,25],
[24,0,24,19,29,19,22,27,20,21],
[24,27,0,19,31,29,28,27,23,27],
[24,32,32,0,32,28,35,31,26,24],
[21,22,20,19,0,24,27,22,19,17],
[24,32,22,23,27,0,28,24,21,26],
[22,29,23,16,24,23,0,23,21,22],
[25,24,24,20,29,27,28,0,23,22],
[26,31,28,25,32,30,30,28,0,25],
[26,30,24,27,34,25,29,29,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,27,31,38,35,38,29,35,34],
[32,0,36,25,33,40,40,33,38,36],
[24,15,0,28,29,25,29,21,30,31],
[20,26,23,0,36,31,29,31,36,32],
[13,18,22,15,0,29,26,24,18,26],
[16,11,26,20,22,0,24,23,23,29],
[13,11,22,22,25,27,0,16,25,32],
[22,18,30,20,27,28,35,0,28,31],
[16,13,21,15,33,28,26,23,0,27],
[17,15,20,19,25,22,19,20,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,20,22,23,26,23,31,22],
[24,0,24,20,21,23,19,17,28,25],
[23,27,0,19,20,21,16,20,26,27],
[31,31,32,0,28,26,21,23,33,28],
[29,30,31,23,0,29,25,31,35,28],
[28,28,30,25,22,0,20,24,33,25],
[25,32,35,30,26,31,0,30,34,33],
[28,34,31,28,20,27,21,0,28,25],
[20,23,25,18,16,18,17,23,0,21],
[29,26,24,23,23,26,18,26,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,25,20,27,28,22,26,22,24],
[23,0,26,22,27,26,29,28,29,26],
[26,25,0,28,25,26,28,29,22,27],
[31,29,23,0,26,26,29,30,27,27],
[24,24,26,25,0,27,25,28,24,25],
[23,25,25,25,24,0,26,29,26,27],
[29,22,23,22,26,25,0,27,21,23],
[25,23,22,21,23,22,24,0,22,25],
[29,22,29,24,27,25,30,29,0,27],
[27,25,24,24,26,24,28,26,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,22,19,16,21,14,27,28,20],
[29,0,24,26,23,23,26,24,26,29],
[29,27,0,23,17,28,24,34,29,23],
[32,25,28,0,28,26,27,29,35,30],
[35,28,34,23,0,32,35,33,31,30],
[30,28,23,25,19,0,30,26,28,24],
[37,25,27,24,16,21,0,28,28,28],
[24,27,17,22,18,25,23,0,27,27],
[23,25,22,16,20,23,23,24,0,27],
[31,22,28,21,21,27,23,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,28,26,24,28,33,24,30,23],
[23,0,23,23,26,19,24,25,28,27],
[23,28,0,29,29,28,31,24,24,20],
[25,28,22,0,22,24,28,24,28,24],
[27,25,22,29,0,26,33,30,29,24],
[23,32,23,27,25,0,31,30,30,24],
[18,27,20,23,18,20,0,22,23,22],
[27,26,27,27,21,21,29,0,25,26],
[21,23,27,23,22,21,28,26,0,27],
[28,24,31,27,27,27,29,25,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,35,28,32,26,24,22,33,23],
[23,0,34,21,22,23,24,22,32,22],
[16,17,0,18,19,19,21,18,25,20],
[23,30,33,0,23,26,26,22,31,26],
[19,29,32,28,0,22,28,22,29,26],
[25,28,32,25,29,0,29,26,35,27],
[27,27,30,25,23,22,0,28,35,29],
[29,29,33,29,29,25,23,0,31,28],
[18,19,26,20,22,16,16,20,0,13],
[28,29,31,25,25,24,22,23,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,26,28,19,36,19,21,25,40],
[19,0,21,18,26,36,25,21,26,33],
[25,30,0,32,31,28,31,16,21,40],
[23,33,19,0,19,20,12,10,25,28],
[32,25,20,32,0,25,33,27,34,33],
[15,15,23,31,26,0,32,6,9,12],
[32,26,20,39,18,19,0,9,26,23],
[30,30,35,41,24,45,42,0,35,38],
[26,25,30,26,17,42,25,16,0,37],
[11,18,11,23,18,39,28,13,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,25,25,27,29,30,31,26,29],
[19,0,25,22,17,24,22,24,28,24],
[26,26,0,26,25,24,27,25,28,25],
[26,29,25,0,25,24,26,26,25,30],
[24,34,26,26,0,22,26,27,27,26],
[22,27,27,27,29,0,30,26,24,25],
[21,29,24,25,25,21,0,27,28,29],
[20,27,26,25,24,25,24,0,24,25],
[25,23,23,26,24,27,23,27,0,25],
[22,27,26,21,25,26,22,26,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,23,20,25,29,21,30,24,30],
[23,0,19,22,20,25,26,22,24,26],
[28,32,0,25,26,31,36,33,25,30],
[31,29,26,0,28,26,34,30,30,24],
[26,31,25,23,0,29,29,25,23,26],
[22,26,20,25,22,0,25,28,30,24],
[30,25,15,17,22,26,0,22,21,28],
[21,29,18,21,26,23,29,0,20,24],
[27,27,26,21,28,21,30,31,0,29],
[21,25,21,27,25,27,23,27,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,19,22,35,22,28,32,20,27],
[22,0,20,21,28,19,30,27,18,18],
[32,31,0,27,28,31,28,35,24,28],
[29,30,24,0,33,21,29,29,23,30],
[16,23,23,18,0,19,18,29,18,16],
[29,32,20,30,32,0,32,33,26,24],
[23,21,23,22,33,19,0,23,18,25],
[19,24,16,22,22,18,28,0,19,23],
[31,33,27,28,33,25,33,32,0,29],
[24,33,23,21,35,27,26,28,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,28,28,36,26,14,10,18,32],
[41,0,47,47,47,37,29,33,23,41],
[23,4,0,26,18,21,8,18,12,8],
[23,4,25,0,28,29,23,25,27,23],
[15,4,33,23,0,21,15,19,23,23],
[25,14,30,22,30,0,26,12,12,18],
[37,22,43,28,36,25,0,26,19,30],
[41,18,33,26,32,39,25,0,15,33],
[33,28,39,24,28,39,32,36,0,18],
[19,10,43,28,28,33,21,18,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,28,34,22,32,31,30,24,26],
[21,0,22,24,22,20,30,21,24,21],
[23,29,0,26,19,20,30,23,21,27],
[17,27,25,0,24,22,24,16,19,19],
[29,29,32,27,0,26,30,31,28,25],
[19,31,31,29,25,0,28,23,27,25],
[20,21,21,27,21,23,0,23,22,25],
[21,30,28,35,20,28,28,0,26,22],
[27,27,30,32,23,24,29,25,0,28],
[25,30,24,32,26,26,26,29,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,25,36,28,32,25,31,37,34],
[23,0,22,32,23,31,25,31,24,28],
[26,29,0,31,25,30,21,28,35,29],
[15,19,20,0,21,18,18,18,24,20],
[23,28,26,30,0,30,26,26,31,24],
[19,20,21,33,21,0,25,26,29,23],
[26,26,30,33,25,26,0,27,29,31],
[20,20,23,33,25,25,24,0,30,26],
[14,27,16,27,20,22,22,21,0,24],
[17,23,22,31,27,28,20,25,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,27,19,18,21,27,22,17,29],
[30,0,25,30,27,32,37,24,29,33],
[24,26,0,24,26,34,30,27,29,28],
[32,21,27,0,34,28,32,21,29,31],
[33,24,25,17,0,29,34,22,27,31],
[30,19,17,23,22,0,29,17,23,25],
[24,14,21,19,17,22,0,21,25,26],
[29,27,24,30,29,34,30,0,24,30],
[34,22,22,22,24,28,26,27,0,30],
[22,18,23,20,20,26,25,21,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,29,27,28,23,28,24,27,24],
[19,0,26,22,23,19,26,24,26,15],
[22,25,0,19,28,28,28,21,22,23],
[24,29,32,0,24,29,34,32,26,29],
[23,28,23,27,0,32,32,22,26,23],
[28,32,23,22,19,0,34,25,23,20],
[23,25,23,17,19,17,0,18,23,18],
[27,27,30,19,29,26,33,0,27,22],
[24,25,29,25,25,28,28,24,0,25],
[27,36,28,22,28,31,33,29,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,29,31,24,17,23,31,30,25],
[33,0,37,21,21,21,29,26,36,32],
[22,14,0,21,18,21,18,21,25,20],
[20,30,30,0,28,31,33,25,32,25],
[27,30,33,23,0,27,32,24,34,22],
[34,30,30,20,24,0,23,26,35,26],
[28,22,33,18,19,28,0,21,27,27],
[20,25,30,26,27,25,30,0,26,37],
[21,15,26,19,17,16,24,25,0,28],
[26,19,31,26,29,25,24,14,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,22,19,23,23,26,21,29,19],
[27,0,26,16,16,25,21,26,31,22],
[29,25,0,22,26,23,28,27,29,27],
[32,35,29,0,31,23,30,27,35,29],
[28,35,25,20,0,21,28,23,36,22],
[28,26,28,28,30,0,28,29,32,25],
[25,30,23,21,23,23,0,17,34,22],
[30,25,24,24,28,22,34,0,34,29],
[22,20,22,16,15,19,17,17,0,22],
[32,29,24,22,29,26,29,22,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,24,28,28,26,28,25,24,18],
[25,0,25,25,30,25,25,24,22,28],
[27,26,0,27,28,21,29,28,22,30],
[23,26,24,0,29,25,25,26,23,22],
[23,21,23,22,0,25,22,26,23,27],
[25,26,30,26,26,0,26,27,24,29],
[23,26,22,26,29,25,0,28,22,24],
[26,27,23,25,25,24,23,0,26,21],
[27,29,29,28,28,27,29,25,0,29],
[33,23,21,29,24,22,27,30,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,18,29,27,22,25,30,25,24],
[22,0,14,20,20,15,24,16,16,27],
[33,37,0,28,32,24,23,31,26,28],
[22,31,23,0,28,21,23,25,23,25],
[24,31,19,23,0,27,27,25,18,28],
[29,36,27,30,24,0,33,38,27,28],
[26,27,28,28,24,18,0,26,25,20],
[21,35,20,26,26,13,25,0,20,23],
[26,35,25,28,33,24,26,31,0,30],
[27,24,23,26,23,23,31,28,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,29,26,23,29,22,22,20,23],
[27,0,28,26,23,30,27,23,23,25],
[22,23,0,23,22,23,20,19,21,23],
[25,25,28,0,23,28,25,24,21,28],
[28,28,29,28,0,27,21,25,20,27],
[22,21,28,23,24,0,18,26,20,24],
[29,24,31,26,30,33,0,30,26,29],
[29,28,32,27,26,25,21,0,29,25],
[31,28,30,30,31,31,25,22,0,26],
[28,26,28,23,24,27,22,26,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,23,34,27,25,22,19,28,29],
[24,0,24,31,26,26,24,21,20,24],
[28,27,0,27,25,26,23,22,18,22],
[17,20,24,0,24,24,18,21,20,22],
[24,25,26,27,0,28,29,26,27,27],
[26,25,25,27,23,0,26,16,21,28],
[29,27,28,33,22,25,0,24,24,26],
[32,30,29,30,25,35,27,0,25,26],
[23,31,33,31,24,30,27,26,0,27],
[22,27,29,29,24,23,25,25,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,21,23,29,28,23,27,22,21],
[23,0,24,27,28,24,23,30,27,20],
[30,27,0,33,32,29,29,31,27,25],
[28,24,18,0,28,20,21,28,23,19],
[22,23,19,23,0,25,21,22,17,16],
[23,27,22,31,26,0,22,29,23,24],
[28,28,22,30,30,29,0,29,24,26],
[24,21,20,23,29,22,22,0,21,19],
[29,24,24,28,34,28,27,30,0,19],
[30,31,26,32,35,27,25,32,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,22,20,27,23,23,19,21,21],
[26,0,24,23,28,30,26,24,22,22],
[29,27,0,26,32,24,28,26,23,30],
[31,28,25,0,34,25,24,27,27,28],
[24,23,19,17,0,22,26,21,23,22],
[28,21,27,26,29,0,29,21,23,27],
[28,25,23,27,25,22,0,22,26,23],
[32,27,25,24,30,30,29,0,25,28],
[30,29,28,24,28,28,25,26,0,24],
[30,29,21,23,29,24,28,23,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,25,19,25,23,23,23,28,25],
[24,0,25,19,26,19,28,18,30,20],
[26,26,0,24,27,24,30,19,29,24],
[32,32,27,0,31,24,30,26,30,28],
[26,25,24,20,0,23,30,23,31,25],
[28,32,27,27,28,0,34,25,26,28],
[28,23,21,21,21,17,0,17,26,22],
[28,33,32,25,28,26,34,0,30,23],
[23,21,22,21,20,25,25,21,0,22],
[26,31,27,23,26,23,29,28,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,33,21,26,22,26,27,21,29],
[23,0,29,24,26,23,21,24,19,26],
[18,22,0,21,27,19,18,23,19,23],
[30,27,30,0,28,24,33,27,23,29],
[25,25,24,23,0,25,25,27,26,26],
[29,28,32,27,26,0,29,25,25,27],
[25,30,33,18,26,22,0,29,19,27],
[24,27,28,24,24,26,22,0,24,25],
[30,32,32,28,25,26,32,27,0,28],
[22,25,28,22,25,24,24,26,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,31,26,25,33,29,22,23,23],
[23,0,33,23,27,34,20,25,19,21],
[20,18,0,26,11,27,21,14,19,25],
[25,28,25,0,27,23,30,23,28,29],
[26,24,40,24,0,34,29,24,25,24],
[18,17,24,28,17,0,24,14,21,20],
[22,31,30,21,22,27,0,26,26,24],
[29,26,37,28,27,37,25,0,24,27],
[28,32,32,23,26,30,25,27,0,21],
[28,30,26,22,27,31,27,24,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,29,24,40,33,36,33,37,32],
[11,0,5,11,6,9,21,18,15,14],
[22,46,0,36,27,32,44,29,23,22],
[27,40,15,0,33,37,41,33,28,32],
[11,45,24,18,0,22,34,25,25,16],
[18,42,19,14,29,0,34,23,30,20],
[15,30,7,10,17,17,0,17,14,25],
[18,33,22,18,26,28,34,0,26,25],
[14,36,28,23,26,21,37,25,0,24],
[19,37,29,19,35,31,26,26,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,31,28,21,29,22,25,25,31],
[27,0,23,30,21,29,20,26,21,31],
[20,28,0,26,22,29,21,28,24,28],
[23,21,25,0,21,28,19,20,20,28],
[30,30,29,30,0,29,25,25,26,28],
[22,22,22,23,22,0,28,23,24,31],
[29,31,30,32,26,23,0,28,27,30],
[26,25,23,31,26,28,23,0,20,27],
[26,30,27,31,25,27,24,31,0,28],
[20,20,23,23,23,20,21,24,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,20,28,25,30,28,23,25],
[26,0,20,22,24,20,33,26,22,32],
[26,31,0,20,28,25,31,18,26,29],
[31,29,31,0,35,24,32,25,27,32],
[23,27,23,16,0,25,23,29,22,25],
[26,31,26,27,26,0,27,30,23,30],
[21,18,20,19,28,24,0,24,19,23],
[23,25,33,26,22,21,27,0,21,24],
[28,29,25,24,29,28,32,30,0,32],
[26,19,22,19,26,21,28,27,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,22,35,35,30,51,23,18,47],
[16,0,33,30,12,38,21,13,25,26],
[29,18,0,43,29,38,29,30,30,43],
[16,21,8,0,16,42,37,16,29,42],
[16,39,22,35,0,26,39,23,18,42],
[21,13,13,9,25,0,25,9,5,35],
[0,30,22,14,12,26,0,1,13,26],
[28,38,21,35,28,42,50,0,18,38],
[33,26,21,22,33,46,38,33,0,30],
[4,25,8,9,9,16,25,13,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,26,26,25,24,31,27,21,25],
[22,0,24,18,21,23,28,20,26,27],
[25,27,0,25,27,27,32,21,27,26],
[25,33,26,0,28,28,31,27,28,29],
[26,30,24,23,0,25,32,28,28,28],
[27,28,24,23,26,0,29,24,28,30],
[20,23,19,20,19,22,0,18,21,24],
[24,31,30,24,23,27,33,0,25,32],
[30,25,24,23,23,23,30,26,0,29],
[26,24,25,22,23,21,27,19,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,21,29,28,23,21,30,25,28],
[30,0,24,30,38,32,29,35,33,32],
[30,27,0,29,29,34,23,32,27,25],
[22,21,22,0,28,29,20,34,28,28],
[23,13,22,23,0,24,16,28,25,24],
[28,19,17,22,27,0,20,29,27,26],
[30,22,28,31,35,31,0,35,35,32],
[21,16,19,17,23,22,16,0,21,18],
[26,18,24,23,26,24,16,30,0,23],
[23,19,26,23,27,25,19,33,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,33,34,37,28,22,30,31,22],
[15,0,16,14,24,14,13,19,19,18],
[18,35,0,28,33,25,19,30,23,23],
[17,37,23,0,35,20,23,23,21,21],
[14,27,18,16,0,19,17,31,20,26],
[23,37,26,31,32,0,26,29,27,31],
[29,38,32,28,34,25,0,31,34,28],
[21,32,21,28,20,22,20,0,18,28],
[20,32,28,30,31,24,17,33,0,24],
[29,33,28,30,25,20,23,23,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,36,27,36,16,21,30,29,15],
[0,0,29,15,26,13,15,13,21,5],
[15,22,0,30,23,21,12,28,22,15],
[24,36,21,0,28,16,20,22,33,27],
[15,25,28,23,0,31,28,21,25,13],
[35,38,30,35,20,0,42,34,26,26],
[30,36,39,31,23,9,0,30,30,29],
[21,38,23,29,30,17,21,0,24,33],
[22,30,29,18,26,25,21,27,0,12],
[36,46,36,24,38,25,22,18,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,21,22,22,23,29,32,24],
[23,0,23,29,20,20,30,33,24,20],
[25,28,0,30,21,30,25,29,30,24],
[30,22,21,0,25,19,28,30,31,23],
[29,31,30,26,0,25,26,35,27,23],
[29,31,21,32,26,0,22,27,35,23],
[28,21,26,23,25,29,0,26,25,23],
[22,18,22,21,16,24,25,0,27,27],
[19,27,21,20,24,16,26,24,0,17],
[27,31,27,28,28,28,28,24,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,36,32,31,22,33,29,27,29],
[24,0,31,25,23,20,29,24,25,24],
[15,20,0,26,24,18,29,12,22,25],
[19,26,25,0,23,23,29,22,20,22],
[20,28,27,28,0,21,25,22,30,27],
[29,31,33,28,30,0,35,25,29,31],
[18,22,22,22,26,16,0,16,25,22],
[22,27,39,29,29,26,35,0,26,33],
[24,26,29,31,21,22,26,25,0,33],
[22,27,26,29,24,20,29,18,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,25,28,33,28,26,25,26,24],
[25,0,22,29,36,21,25,15,25,23],
[26,29,0,18,32,29,30,30,24,21],
[23,22,33,0,30,26,25,19,26,28],
[18,15,19,21,0,16,23,20,23,21],
[23,30,22,25,35,0,30,22,25,25],
[25,26,21,26,28,21,0,24,30,26],
[26,36,21,32,31,29,27,0,25,23],
[25,26,27,25,28,26,21,26,0,20],
[27,28,30,23,30,26,25,28,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,15,27,0,39,16,31,16,27],
[32,0,15,27,20,39,16,27,24,27],
[36,36,0,51,36,36,16,39,36,39],
[24,24,0,0,8,32,4,12,12,8],
[51,31,15,43,0,39,31,31,51,27],
[12,12,15,19,12,0,4,27,12,27],
[35,35,35,47,20,47,0,47,32,47],
[20,24,12,39,20,24,4,0,24,15],
[35,27,15,39,0,39,19,27,0,15],
[24,24,12,43,24,24,4,36,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,39,31,23,15,16,35,39,31],
[28,0,28,20,28,32,16,28,28,32],
[12,23,0,0,12,16,28,12,39,16],
[20,31,51,0,23,16,28,31,39,32],
[28,23,39,28,0,4,28,24,47,28],
[36,19,35,35,47,0,24,31,47,24],
[35,35,23,23,23,27,0,35,47,35],
[16,23,39,20,27,20,16,0,27,20],
[12,23,12,12,4,4,4,24,0,12],
[20,19,35,19,23,27,16,31,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,38,31,29,38,19,27,31,28],
[15,0,33,22,14,33,22,15,31,22],
[13,18,0,16,10,31,12,13,16,22],
[20,29,35,0,25,26,16,28,29,34],
[22,37,41,26,0,33,32,41,30,30],
[13,18,20,25,18,0,20,13,27,26],
[32,29,39,35,19,31,0,37,35,28],
[24,36,38,23,10,38,14,0,30,35],
[20,20,35,22,21,24,16,21,0,21],
[23,29,29,17,21,25,23,16,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,31,33,29,39,38,33,21],
[10,0,27,32,22,21,35,19,25,24],
[10,24,0,21,21,16,15,18,16,24],
[20,19,30,0,22,23,29,19,28,26],
[18,29,30,29,0,11,32,25,17,27],
[22,30,35,28,40,0,34,34,26,23],
[12,16,36,22,19,17,0,20,21,25],
[13,32,33,32,26,17,31,0,31,26],
[18,26,35,23,34,25,30,20,0,18],
[30,27,27,25,24,28,26,25,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,21,24,27,24,36,24,10,38],
[20,0,10,18,16,8,33,22,17,32],
[30,41,0,21,38,24,33,28,17,42],
[27,33,30,0,33,25,28,29,29,34],
[24,35,13,18,0,27,35,17,20,32],
[27,43,27,26,24,0,39,29,24,34],
[15,18,18,23,16,12,0,18,10,20],
[27,29,23,22,34,22,33,0,20,36],
[41,34,34,22,31,27,41,31,0,36],
[13,19,9,17,19,17,31,15,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,28,25,26,26,24,25,29,22],
[35,0,28,28,25,30,27,28,31,26],
[23,23,0,26,28,25,20,15,25,15],
[26,23,25,0,27,21,21,25,28,25],
[25,26,23,24,0,17,23,16,25,13],
[25,21,26,30,34,0,17,20,35,9],
[27,24,31,30,28,34,0,23,36,29],
[26,23,36,26,35,31,28,0,41,25],
[22,20,26,23,26,16,15,10,0,16],
[29,25,36,26,38,42,22,26,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,21,25,23,21,21,22,17,28],
[28,0,26,27,27,27,28,30,18,29],
[30,25,0,26,27,26,23,27,21,25],
[26,24,25,0,25,22,25,23,21,21],
[28,24,24,26,0,31,28,25,18,28],
[30,24,25,29,20,0,28,23,25,23],
[30,23,28,26,23,23,0,19,19,24],
[29,21,24,28,26,28,32,0,27,25],
[34,33,30,30,33,26,32,24,0,33],
[23,22,26,30,23,28,27,26,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,29,32,27,31,29,33,24,28],
[19,0,26,25,18,21,26,26,21,20],
[22,25,0,33,22,22,15,28,18,26],
[19,26,18,0,15,23,24,23,25,23],
[24,33,29,36,0,27,26,33,28,32],
[20,30,29,28,24,0,30,30,27,27],
[22,25,36,27,25,21,0,28,30,22],
[18,25,23,28,18,21,23,0,21,23],
[27,30,33,26,23,24,21,30,0,27],
[23,31,25,28,19,24,29,28,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,29,24,26,27,26,25,24,24],
[23,0,21,22,22,27,26,21,25,23],
[22,30,0,22,23,25,30,26,25,24],
[27,29,29,0,26,24,27,27,29,28],
[25,29,28,25,0,25,31,28,32,24],
[24,24,26,27,26,0,34,24,24,27],
[25,25,21,24,20,17,0,22,22,23],
[26,30,25,24,23,27,29,0,27,28],
[27,26,26,22,19,27,29,24,0,27],
[27,28,27,23,27,24,28,23,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,17,17,17,26,15,20,27,28],
[28,0,23,24,18,27,21,21,26,24],
[34,28,0,24,31,25,24,20,25,22],
[34,27,27,0,22,35,20,21,28,24],
[34,33,20,29,0,28,24,28,29,24],
[25,24,26,16,23,0,22,22,27,23],
[36,30,27,31,27,29,0,15,17,27],
[31,30,31,30,23,29,36,0,25,30],
[24,25,26,23,22,24,34,26,0,26],
[23,27,29,27,27,28,24,21,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,26,27,33,23,24,24,25,24],
[20,0,25,19,31,25,23,23,25,18],
[25,26,0,26,34,17,26,25,22,26],
[24,32,25,0,34,22,26,23,24,27],
[18,20,17,17,0,17,16,19,21,14],
[28,26,34,29,34,0,29,27,27,23],
[27,28,25,25,35,22,0,27,20,28],
[27,28,26,28,32,24,24,0,23,23],
[26,26,29,27,30,24,31,28,0,26],
[27,33,25,24,37,28,23,28,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,29,22,28,23,28,27,28,16],
[25,0,29,22,28,15,24,27,27,20],
[22,22,0,28,23,23,19,23,30,23],
[29,29,23,0,25,29,24,26,28,28],
[23,23,28,26,0,25,24,26,34,20],
[28,36,28,22,26,0,29,32,31,27],
[23,27,32,27,27,22,0,28,32,22],
[24,24,28,25,25,19,23,0,29,24],
[23,24,21,23,17,20,19,22,0,25],
[35,31,28,23,31,24,29,27,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,36,17,41,34,30,40,33,41],
[18,0,34,17,35,30,29,29,28,23],
[15,17,0,6,27,27,19,21,11,25],
[34,34,45,0,36,34,25,40,27,35],
[10,16,24,15,0,20,12,26,15,23],
[17,21,24,17,31,0,27,19,22,23],
[21,22,32,26,39,24,0,25,27,16],
[11,22,30,11,25,32,26,0,27,28],
[18,23,40,24,36,29,24,24,0,23],
[10,28,26,16,28,28,35,23,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,32,25,25,32,34,23,42,28],
[14,0,28,17,21,24,25,28,23,16],
[19,23,0,21,16,20,16,30,19,16],
[26,34,30,0,21,37,29,28,26,33],
[26,30,35,30,0,29,31,31,19,34],
[19,27,31,14,22,0,25,25,19,21],
[17,26,35,22,20,26,0,25,22,18],
[28,23,21,23,20,26,26,0,32,22],
[9,28,32,25,32,32,29,19,0,25],
[23,35,35,18,17,30,33,29,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,28,31,29,16,19,15,18,25],
[38,0,24,24,27,27,16,26,20,28],
[23,27,0,35,28,29,12,19,18,25],
[20,27,16,0,15,18,15,18,15,26],
[22,24,23,36,0,22,17,21,30,27],
[35,24,22,33,29,0,13,17,22,22],
[32,35,39,36,34,38,0,35,20,35],
[36,25,32,33,30,34,16,0,26,20],
[33,31,33,36,21,29,31,25,0,26],
[26,23,26,25,24,29,16,31,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,20,26,29,24,32,26,29,18],
[21,0,17,20,23,21,22,16,24,21],
[31,34,0,24,35,27,38,28,32,27],
[25,31,27,0,33,23,34,26,30,24],
[22,28,16,18,0,21,26,18,21,20],
[27,30,24,28,30,0,32,23,27,26],
[19,29,13,17,25,19,0,17,17,19],
[25,35,23,25,33,28,34,0,32,22],
[22,27,19,21,30,24,34,19,0,25],
[33,30,24,27,31,25,32,29,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,20,26,18,25,23,27,28,24],
[32,0,18,28,27,31,28,30,28,30],
[31,33,0,24,23,27,31,25,31,28],
[25,23,27,0,24,25,24,23,24,26],
[33,24,28,27,0,30,23,29,24,25],
[26,20,24,26,21,0,26,24,21,29],
[28,23,20,27,28,25,0,24,29,25],
[24,21,26,28,22,27,27,0,27,28],
[23,23,20,27,27,30,22,24,0,24],
[27,21,23,25,26,22,26,23,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,21,28,22,21,27,18,15,16],
[21,0,15,15,10,21,14,14,2,22],
[30,36,0,22,27,23,23,27,13,22],
[23,36,29,0,19,16,34,16,22,21],
[29,41,24,32,0,22,30,21,16,31],
[30,30,28,35,29,0,27,28,25,28],
[24,37,28,17,21,24,0,25,14,29],
[33,37,24,35,30,23,26,0,27,37],
[36,49,38,29,35,26,37,24,0,42],
[35,29,29,30,20,23,22,14,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,21,17,19,19,17,20,20,19],
[35,0,27,28,23,27,29,32,26,27],
[30,24,0,28,24,24,29,30,25,25],
[34,23,23,0,23,21,23,32,24,22],
[32,28,27,28,0,25,28,30,25,27],
[32,24,27,30,26,0,28,34,27,27],
[34,22,22,28,23,23,0,30,22,28],
[31,19,21,19,21,17,21,0,22,22],
[31,25,26,27,26,24,29,29,0,23],
[32,24,26,29,24,24,23,29,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,25,25,27,27,26,29,27,28],
[31,0,27,26,35,32,25,32,29,26],
[26,24,0,23,28,24,26,22,25,24],
[26,25,28,0,30,27,23,26,30,21],
[24,16,23,21,0,24,23,15,25,21],
[24,19,27,24,27,0,25,29,29,25],
[25,26,25,28,28,26,0,26,30,25],
[22,19,29,25,36,22,25,0,24,23],
[24,22,26,21,26,22,21,27,0,20],
[23,25,27,30,30,26,26,28,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,27,26,30,33,32,22,26,33],
[21,0,26,22,30,14,27,23,24,35],
[24,25,0,22,25,20,18,18,25,26],
[25,29,29,0,25,16,25,17,22,20],
[21,21,26,26,0,17,27,26,27,23],
[18,37,31,35,34,0,28,19,22,35],
[19,24,33,26,24,23,0,24,19,22],
[29,28,33,34,25,32,27,0,21,19],
[25,27,26,29,24,29,32,30,0,25],
[18,16,25,31,28,16,29,32,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,29,29,20,26,27,26,23,25],
[25,0,30,24,24,27,20,23,25,28],
[22,21,0,25,23,23,24,24,22,19],
[22,27,26,0,25,23,22,25,26,24],
[31,27,28,26,0,21,26,25,32,29],
[25,24,28,28,30,0,27,31,27,21],
[24,31,27,29,25,24,0,23,25,22],
[25,28,27,26,26,20,28,0,25,22],
[28,26,29,25,19,24,26,26,0,22],
[26,23,32,27,22,30,29,29,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,25,28,32,32,32,33,33,28],
[16,0,19,21,29,21,21,20,21,27],
[26,32,0,23,28,33,29,29,21,27],
[23,30,28,0,28,38,28,27,25,25],
[19,22,23,23,0,30,18,26,23,24],
[19,30,18,13,21,0,13,24,14,27],
[19,30,22,23,33,38,0,27,23,31],
[18,31,22,24,25,27,24,0,17,25],
[18,30,30,26,28,37,28,34,0,32],
[23,24,24,26,27,24,20,26,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,14,25,15,2,18,20,30,14],
[42,0,41,40,33,42,33,24,33,33],
[37,10,0,34,27,19,11,20,26,17],
[26,11,17,0,16,16,27,27,16,16],
[36,18,24,35,0,16,23,12,34,17],
[49,9,32,35,35,0,29,19,40,34],
[33,18,40,24,28,22,0,22,33,24],
[31,27,31,24,39,32,29,0,38,23],
[21,18,25,35,17,11,18,13,0,23],
[37,18,34,35,34,17,27,28,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,34,9,32,26,30,35,35,22],
[26,0,20,27,30,40,34,34,32,20],
[17,31,0,7,17,22,21,28,25,15],
[42,24,44,0,30,34,28,40,44,31],
[19,21,34,21,0,26,27,33,29,22],
[25,11,29,17,25,0,23,23,18,12],
[21,17,30,23,24,28,0,36,36,23],
[16,17,23,11,18,28,15,0,22,16],
[16,19,26,7,22,33,15,29,0,19],
[29,31,36,20,29,39,28,35,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,27,28,17,22,22,16,20,20],
[29,0,35,28,25,31,27,25,25,25],
[24,16,0,29,19,29,22,26,21,19],
[23,23,22,0,23,24,23,20,24,20],
[34,26,32,28,0,27,24,25,25,30],
[29,20,22,27,24,0,27,21,24,21],
[29,24,29,28,27,24,0,23,25,20],
[35,26,25,31,26,30,28,0,24,24],
[31,26,30,27,26,27,26,27,0,20],
[31,26,32,31,21,30,31,27,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,29,30,25,35,39,27,34,29],
[21,0,27,27,16,33,33,21,27,31],
[22,24,0,31,23,27,28,25,32,34],
[21,24,20,0,21,29,33,20,28,31],
[26,35,28,30,0,37,38,23,30,33],
[16,18,24,22,14,0,33,22,28,31],
[12,18,23,18,13,18,0,17,22,23],
[24,30,26,31,28,29,34,0,34,32],
[17,24,19,23,21,23,29,17,0,27],
[22,20,17,20,18,20,28,19,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,29,23,33,25,26,26,30,26],
[30,0,26,28,35,33,20,29,31,28],
[22,25,0,29,34,22,22,28,29,23],
[28,23,22,0,30,32,26,24,31,25],
[18,16,17,21,0,24,12,17,21,22],
[26,18,29,19,27,0,19,17,26,26],
[25,31,29,25,39,32,0,27,36,30],
[25,22,23,27,34,34,24,0,30,26],
[21,20,22,20,30,25,15,21,0,23],
[25,23,28,26,29,25,21,25,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,25,41,32,37,29,24,30,25],
[23,0,26,33,27,22,21,12,16,16],
[26,25,0,25,24,31,23,18,34,27],
[10,18,26,0,17,24,7,12,17,21],
[19,24,27,34,0,32,29,27,32,20],
[14,29,20,27,19,0,21,9,22,21],
[22,30,28,44,22,30,0,22,27,25],
[27,39,33,39,24,42,29,0,37,31],
[21,35,17,34,19,29,24,14,0,25],
[26,35,24,30,31,30,26,20,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,28,31,18,29,24,33,27,24],
[37,0,36,35,41,35,29,41,33,24],
[23,15,0,24,18,29,24,25,28,16],
[20,16,27,0,18,26,23,34,27,17],
[33,10,33,33,0,24,27,41,32,13],
[22,16,22,25,27,0,21,26,28,20],
[27,22,27,28,24,30,0,28,27,26],
[18,10,26,17,10,25,23,0,24,11],
[24,18,23,24,19,23,24,27,0,21],
[27,27,35,34,38,31,25,40,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,24,26,28,25,25,21,31,26],
[28,0,26,27,27,24,25,28,26,28],
[27,25,0,24,26,24,29,19,28,25],
[25,24,27,0,28,30,28,24,24,23],
[23,24,25,23,0,25,24,19,25,24],
[26,27,27,21,26,0,21,21,27,24],
[26,26,22,23,27,30,0,20,29,26],
[30,23,32,27,32,30,31,0,29,25],
[20,25,23,27,26,24,22,22,0,31],
[25,23,26,28,27,27,25,26,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,32,27,25,25,24,25,27,26],
[27,0,30,22,28,22,27,25,30,25],
[19,21,0,24,20,18,23,21,21,21],
[24,29,27,0,29,27,22,32,29,25],
[26,23,31,22,0,20,14,21,23,26],
[26,29,33,24,31,0,22,29,28,31],
[27,24,28,29,37,29,0,29,29,26],
[26,26,30,19,30,22,22,0,29,27],
[24,21,30,22,28,23,22,22,0,31],
[25,26,30,26,25,20,25,24,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,26,22,20,27,23,21,31,26],
[20,0,21,20,24,22,20,23,26,21],
[25,30,0,23,31,27,29,27,33,24],
[29,31,28,0,26,28,22,23,31,24],
[31,27,20,25,0,24,25,22,31,25],
[24,29,24,23,27,0,21,23,30,24],
[28,31,22,29,26,30,0,31,33,23],
[30,28,24,28,29,28,20,0,35,22],
[20,25,18,20,20,21,18,16,0,16],
[25,30,27,27,26,27,28,29,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,24,24,19,24,29,21,25,26],
[29,0,29,30,24,22,29,26,29,30],
[27,22,0,22,23,22,29,25,28,25],
[27,21,29,0,25,28,32,30,32,27],
[32,27,28,26,0,24,29,26,27,26],
[27,29,29,23,27,0,27,27,30,27],
[22,22,22,19,22,24,0,24,26,21],
[30,25,26,21,25,24,27,0,25,24],
[26,22,23,19,24,21,25,26,0,19],
[25,21,26,24,25,24,30,27,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,28,24,28,27,28,26,26,28],
[23,0,25,25,32,29,30,23,25,29],
[23,26,0,20,32,23,23,24,24,25],
[27,26,31,0,29,24,26,22,25,31],
[23,19,19,22,0,27,23,21,20,22],
[24,22,28,27,24,0,25,20,21,20],
[23,21,28,25,28,26,0,25,20,26],
[25,28,27,29,30,31,26,0,22,31],
[25,26,27,26,31,30,31,29,0,27],
[23,22,26,20,29,31,25,20,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,28,18,22,13,16,23,24,19],
[38,0,31,23,28,26,25,26,34,32],
[23,20,0,17,27,18,19,18,30,19],
[33,28,34,0,36,26,27,25,34,31],
[29,23,24,15,0,18,19,18,25,22],
[38,25,33,25,33,0,28,33,35,26],
[35,26,32,24,32,23,0,28,36,23],
[28,25,33,26,33,18,23,0,30,27],
[27,17,21,17,26,16,15,21,0,20],
[32,19,32,20,29,25,28,24,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,27,20,25,27,24,29,26,27],
[23,0,26,24,28,27,27,26,27,23],
[24,25,0,24,21,24,28,26,25,21],
[31,27,27,0,25,25,31,32,28,31],
[26,23,30,26,0,20,21,34,33,25],
[24,24,27,26,31,0,22,30,21,26],
[27,24,23,20,30,29,0,33,29,23],
[22,25,25,19,17,21,18,0,20,20],
[25,24,26,23,18,30,22,31,0,22],
[24,28,30,20,26,25,28,31,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,24,21,28,28,24,28,28,28],
[26,0,19,27,21,23,16,26,30,17],
[27,32,0,26,23,20,24,28,26,25],
[30,24,25,0,29,29,21,27,29,27],
[23,30,28,22,0,25,23,24,26,25],
[23,28,31,22,26,0,28,31,31,28],
[27,35,27,30,28,23,0,34,28,25],
[23,25,23,24,27,20,17,0,22,21],
[23,21,25,22,25,20,23,29,0,24],
[23,34,26,24,26,23,26,30,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,13,19,24,19,35,33,31,27],
[18,0,22,24,26,23,37,20,33,25],
[38,29,0,20,33,24,32,38,33,30],
[32,27,31,0,29,26,32,31,37,25],
[27,25,18,22,0,29,30,30,29,17],
[32,28,27,25,22,0,26,32,31,27],
[16,14,19,19,21,25,0,21,26,17],
[18,31,13,20,21,19,30,0,34,29],
[20,18,18,14,22,20,25,17,0,23],
[24,26,21,26,34,24,34,22,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,29,27,26,27,34,26,29,25],
[20,0,29,19,30,25,31,28,24,25],
[22,22,0,23,29,28,29,25,29,24],
[24,32,28,0,32,30,30,28,34,27],
[25,21,22,19,0,27,20,30,24,21],
[24,26,23,21,24,0,24,25,28,18],
[17,20,22,21,31,27,0,29,20,29],
[25,23,26,23,21,26,22,0,33,26],
[22,27,22,17,27,23,31,18,0,20],
[26,26,27,24,30,33,22,25,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,26,19,24,23,26,23,19,18],
[31,0,27,25,28,22,27,30,29,27],
[25,24,0,24,25,21,23,26,17,21],
[32,26,27,0,28,28,29,31,25,29],
[27,23,26,23,0,23,28,24,24,25],
[28,29,30,23,28,0,28,30,25,24],
[25,24,28,22,23,23,0,32,22,30],
[28,21,25,20,27,21,19,0,22,26],
[32,22,34,26,27,26,29,29,0,30],
[33,24,30,22,26,27,21,25,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,23,21,23,16,27,23,31,23],
[27,0,23,27,28,18,27,20,27,22],
[28,28,0,30,28,22,26,26,34,20],
[30,24,21,0,22,20,20,24,25,26],
[28,23,23,29,0,18,28,26,29,23],
[35,33,29,31,33,0,31,35,37,24],
[24,24,25,31,23,20,0,20,25,23],
[28,31,25,27,25,16,31,0,35,25],
[20,24,17,26,22,14,26,16,0,25],
[28,29,31,25,28,27,28,26,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,22,23,20,13,26,19,17,18],
[24,0,23,31,20,16,23,18,20,18],
[29,28,0,26,28,22,27,26,25,25],
[28,20,25,0,24,18,21,21,20,22],
[31,31,23,27,0,19,31,23,25,19],
[38,35,29,33,32,0,30,24,26,28],
[25,28,24,30,20,21,0,24,23,19],
[32,33,25,30,28,27,27,0,29,27],
[34,31,26,31,26,25,28,22,0,23],
[33,33,26,29,32,23,32,24,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,22,27,27,29,26,21,30,28],
[14,0,9,21,24,23,20,25,27,23],
[29,42,0,24,30,28,25,30,30,28],
[24,30,27,0,29,21,27,26,26,25],
[24,27,21,22,0,21,20,23,28,21],
[22,28,23,30,30,0,25,32,28,26],
[25,31,26,24,31,26,0,29,32,29],
[30,26,21,25,28,19,22,0,26,23],
[21,24,21,25,23,23,19,25,0,15],
[23,28,23,26,30,25,22,28,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,25,23,34,26,23,21,21,25],
[19,0,26,30,27,24,23,21,21,25],
[26,25,0,32,35,29,21,24,23,31],
[28,21,19,0,34,29,16,21,17,23],
[17,24,16,17,0,16,10,16,14,17],
[25,27,22,22,35,0,20,25,20,22],
[28,28,30,35,41,31,0,24,27,30],
[30,30,27,30,35,26,27,0,25,26],
[30,30,28,34,37,31,24,26,0,31],
[26,26,20,28,34,29,21,25,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,30,22,22,24,27,23,18,24],
[22,0,22,14,17,18,18,16,13,14],
[21,29,0,16,20,26,24,17,19,23],
[29,37,35,0,27,29,28,24,27,24],
[29,34,31,24,0,27,25,27,29,28],
[27,33,25,22,24,0,20,18,16,25],
[24,33,27,23,26,31,0,24,21,21],
[28,35,34,27,24,33,27,0,22,31],
[33,38,32,24,22,35,30,29,0,26],
[27,37,28,27,23,26,30,20,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,25,24,23,25,23,28,28,20],
[24,0,34,35,21,37,30,11,35,23],
[26,17,0,36,14,26,10,10,33,20],
[27,16,15,0,21,19,12,12,27,10],
[28,30,37,30,0,29,29,10,32,20],
[26,14,25,32,22,0,21,11,34,15],
[28,21,41,39,22,30,0,18,38,24],
[23,40,41,39,41,40,33,0,39,34],
[23,16,18,24,19,17,13,12,0,11],
[31,28,31,41,31,36,27,17,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,28,23,19,29,30,16,24,20],
[22,0,28,22,20,27,20,14,23,16],
[23,23,0,24,18,22,28,18,18,25],
[28,29,27,0,26,28,26,28,23,21],
[32,31,33,25,0,29,29,30,26,26],
[22,24,29,23,22,0,29,26,23,25],
[21,31,23,25,22,22,0,18,22,15],
[35,37,33,23,21,25,33,0,22,26],
[27,28,33,28,25,28,29,29,0,19],
[31,35,26,30,25,26,36,25,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,16,30,21,19,32,8,9,12],
[30,0,40,49,6,29,29,19,19,29],
[35,11,0,22,11,11,24,2,11,2],
[21,2,29,0,2,15,25,21,13,25],
[30,45,40,49,0,29,29,21,28,31],
[32,22,40,36,22,0,32,21,26,36],
[19,22,27,26,22,19,0,19,26,13],
[43,32,49,30,30,30,32,0,20,34],
[42,32,40,38,23,25,25,31,0,25],
[39,22,49,26,20,15,38,17,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,35,31,31,22,33,40,27,27],
[27,0,33,25,25,30,24,33,19,21],
[16,18,0,21,22,19,22,35,22,22],
[20,26,30,0,33,25,34,27,24,20],
[20,26,29,18,0,23,27,32,20,27],
[29,21,32,26,28,0,30,40,22,22],
[18,27,29,17,24,21,0,23,22,20],
[11,18,16,24,19,11,28,0,22,9],
[24,32,29,27,31,29,29,29,0,24],
[24,30,29,31,24,29,31,42,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,32,23,28,20,31,21,27,25],
[31,0,36,30,30,25,33,32,30,29],
[19,15,0,17,21,19,19,14,30,21],
[28,21,34,0,21,18,24,30,29,27],
[23,21,30,30,0,27,26,25,31,22],
[31,26,32,33,24,0,26,26,31,25],
[20,18,32,27,25,25,0,14,21,15],
[30,19,37,21,26,25,37,0,29,26],
[24,21,21,22,20,20,30,22,0,17],
[26,22,30,24,29,26,36,25,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,19,24,20,22,25,27,16,25],
[29,0,22,24,21,23,27,27,24,24],
[32,29,0,27,25,26,24,35,25,28],
[27,27,24,0,21,24,30,30,23,30],
[31,30,26,30,0,27,26,33,25,29],
[29,28,25,27,24,0,26,28,26,30],
[26,24,27,21,25,25,0,24,23,26],
[24,24,16,21,18,23,27,0,21,20],
[35,27,26,28,26,25,28,30,0,30],
[26,27,23,21,22,21,25,31,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,26,20,28,34,27,30,23,20],
[21,0,26,28,26,33,17,27,24,19],
[25,25,0,22,26,25,25,25,27,21],
[31,23,29,0,31,33,26,25,28,26],
[23,25,25,20,0,30,23,24,26,22],
[17,18,26,18,21,0,15,23,20,15],
[24,34,26,25,28,36,0,26,31,26],
[21,24,26,26,27,28,25,0,21,22],
[28,27,24,23,25,31,20,30,0,21],
[31,32,30,25,29,36,25,29,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,41,28,42,38,39,37,27,24],
[15,0,28,26,29,32,27,32,13,18],
[10,23,0,14,35,30,20,21,21,20],
[23,25,37,0,36,31,26,27,28,24],
[9,22,16,15,0,21,14,22,14,16],
[13,19,21,20,30,0,18,17,16,15],
[12,24,31,25,37,33,0,24,32,26],
[14,19,30,24,29,34,27,0,14,18],
[24,38,30,23,37,35,19,37,0,33],
[27,33,31,27,35,36,25,33,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,24,28,24,24,26,23,25,28],
[23,0,34,29,21,26,22,35,26,38],
[27,17,0,19,23,25,24,30,22,32],
[23,22,32,0,27,25,21,29,25,31],
[27,30,28,24,0,24,25,29,24,32],
[27,25,26,26,27,0,21,23,22,31],
[25,29,27,30,26,30,0,28,23,33],
[28,16,21,22,22,28,23,0,26,28],
[26,25,29,26,27,29,28,25,0,29],
[23,13,19,20,19,20,18,23,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,30,25,36,12,30,31,24,22],
[32,0,27,23,35,22,31,32,27,26],
[21,24,0,20,27,15,31,20,19,24],
[26,28,31,0,27,23,39,28,26,29],
[15,16,24,24,0,10,32,22,18,18],
[39,29,36,28,41,0,38,36,32,25],
[21,20,20,12,19,13,0,25,20,15],
[20,19,31,23,29,15,26,0,25,18],
[27,24,32,25,33,19,31,26,0,22],
[29,25,27,22,33,26,36,33,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,31,29,28,28,30,27,24,26],
[15,0,26,19,25,23,24,23,17,18],
[20,25,0,26,23,25,25,25,17,20],
[22,32,25,0,27,22,25,21,25,23],
[23,26,28,24,0,26,26,24,21,24],
[23,28,26,29,25,0,24,24,24,24],
[21,27,26,26,25,27,0,25,22,22],
[24,28,26,30,27,27,26,0,27,26],
[27,34,34,26,30,27,29,24,0,27],
[25,33,31,28,27,27,29,25,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,27,24,26,25,23,27,23,28],
[25,0,29,30,30,24,26,29,25,26],
[24,22,0,25,27,21,26,21,20,19],
[27,21,26,0,26,23,27,24,20,24],
[25,21,24,25,0,27,21,24,25,20],
[26,27,30,28,24,0,24,28,23,24],
[28,25,25,24,30,27,0,25,25,24],
[24,22,30,27,27,23,26,0,23,20],
[28,26,31,31,26,28,26,28,0,25],
[23,25,32,27,31,27,27,31,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,25,18,27,24,20,19,21,18],
[34,0,29,30,31,32,28,25,25,27],
[26,22,0,25,27,26,28,26,19,23],
[33,21,26,0,28,28,25,21,20,27],
[24,20,24,23,0,30,29,22,19,19],
[27,19,25,23,21,0,25,23,21,22],
[31,23,23,26,22,26,0,21,24,25],
[32,26,25,30,29,28,30,0,22,24],
[30,26,32,31,32,30,27,29,0,24],
[33,24,28,24,32,29,26,27,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,24,25,19,22,25,20,29,26],
[25,0,27,31,29,25,21,27,29,24],
[27,24,0,33,23,27,29,28,37,27],
[26,20,18,0,24,26,24,25,24,21],
[32,22,28,27,0,23,27,27,28,23],
[29,26,24,25,28,0,29,24,28,25],
[26,30,22,27,24,22,0,21,23,24],
[31,24,23,26,24,27,30,0,24,28],
[22,22,14,27,23,23,28,27,0,23],
[25,27,24,30,28,26,27,23,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,40,26,38,25,42,45,30,17],
[30,0,34,35,45,28,32,45,38,25],
[11,17,0,21,38,23,19,38,19,19],
[25,16,30,0,38,25,16,32,29,21],
[13,6,13,13,0,21,10,23,17,13],
[26,23,28,26,30,0,26,43,30,28],
[9,19,32,35,41,25,0,45,17,17],
[6,6,13,19,28,8,6,0,14,13],
[21,13,32,22,34,21,34,37,0,32],
[34,26,32,30,38,23,34,38,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,19,19,28,18,28,25,29,17],
[26,0,26,23,32,22,27,28,35,24],
[32,25,0,28,29,26,27,31,30,26],
[32,28,23,0,27,22,31,33,34,18],
[23,19,22,24,0,21,30,30,31,24],
[33,29,25,29,30,0,30,37,35,31],
[23,24,24,20,21,21,0,30,23,22],
[26,23,20,18,21,14,21,0,30,15],
[22,16,21,17,20,16,28,21,0,18],
[34,27,25,33,27,20,29,36,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,11,15,19,14,15,22,27,19],
[29,0,21,15,17,22,22,22,27,17],
[40,30,0,25,25,24,29,28,43,35],
[36,36,26,0,25,30,29,34,33,36],
[32,34,26,26,0,34,22,37,35,36],
[37,29,27,21,17,0,28,34,41,40],
[36,29,22,22,29,23,0,28,35,28],
[29,29,23,17,14,17,23,0,35,33],
[24,24,8,18,16,10,16,16,0,16],
[32,34,16,15,15,11,23,18,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,16,16,24,16,25,20,20,23],
[25,0,15,13,22,12,19,22,20,21],
[35,36,0,25,28,23,37,34,33,33],
[35,38,26,0,33,26,33,35,24,30],
[27,29,23,18,0,19,27,25,25,24],
[35,39,28,25,32,0,41,41,32,34],
[26,32,14,18,24,10,0,17,18,19],
[31,29,17,16,26,10,34,0,20,22],
[31,31,18,27,26,19,33,31,0,27],
[28,30,18,21,27,17,32,29,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,30,27,20,21,36,31,23,24],
[26,0,45,27,25,36,37,41,32,39],
[21,6,0,20,23,30,33,33,17,25],
[24,24,31,0,27,28,32,37,22,39],
[31,26,28,24,0,31,30,30,21,31],
[30,15,21,23,20,0,33,28,22,27],
[15,14,18,19,21,18,0,14,20,24],
[20,10,18,14,21,23,37,0,21,27],
[28,19,34,29,30,29,31,30,0,41],
[27,12,26,12,20,24,27,24,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,18,24,20,22,17,24,17,21],
[22,0,19,20,17,15,23,24,25,22],
[33,32,0,27,28,24,33,30,29,21],
[27,31,24,0,25,27,32,28,28,21],
[31,34,23,26,0,21,31,31,25,27],
[29,36,27,24,30,0,32,34,29,25],
[34,28,18,19,20,19,0,28,25,19],
[27,27,21,23,20,17,23,0,22,23],
[34,26,22,23,26,22,26,29,0,26],
[30,29,30,30,24,26,32,28,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,30,20,23,25,33,26,37,25],
[15,0,26,18,11,21,31,22,26,19],
[21,25,0,17,13,14,30,24,29,23],
[31,33,34,0,28,32,32,32,23,37],
[28,40,38,23,0,24,35,31,34,31],
[26,30,37,19,27,0,23,34,39,31],
[18,20,21,19,16,28,0,24,23,27],
[25,29,27,19,20,17,27,0,27,33],
[14,25,22,28,17,12,28,24,0,17],
[26,32,28,14,20,20,24,18,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,26,29,34,32,24,20,29,24],
[21,0,27,28,25,27,22,25,39,27],
[25,24,0,29,23,27,29,18,33,23],
[22,23,22,0,32,28,14,15,33,19],
[17,26,28,19,0,23,19,14,22,19],
[19,24,24,23,28,0,15,16,30,27],
[27,29,22,37,32,36,0,28,41,33],
[31,26,33,36,37,35,23,0,40,41],
[22,12,18,18,29,21,10,11,0,18],
[27,24,28,32,32,24,18,10,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,28,28,22,45,34,33,34,44],
[23,0,28,23,24,34,33,22,24,24],
[23,23,0,23,32,46,29,29,21,28],
[23,28,28,0,22,47,31,21,36,35],
[29,27,19,29,0,48,25,21,23,29],
[6,17,5,4,3,0,15,14,2,19],
[17,18,22,20,26,36,0,28,26,26],
[18,29,22,30,30,37,23,0,26,19],
[17,27,30,15,28,49,25,25,0,32],
[7,27,23,16,22,32,25,32,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,29,31,41,16,22,30,36,28],
[27,0,31,34,32,29,23,24,33,31],
[22,20,0,26,18,21,15,12,27,28],
[20,17,25,0,26,23,12,14,32,20],
[10,19,33,25,0,22,26,18,34,32],
[35,22,30,28,29,0,20,19,34,31],
[29,28,36,39,25,31,0,19,30,30],
[21,27,39,37,33,32,32,0,39,40],
[15,18,24,19,17,17,21,12,0,28],
[23,20,23,31,19,20,21,11,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,26,22,20,27,21,29,29,28],
[26,0,31,20,24,27,20,20,27,20],
[25,20,0,17,26,26,26,24,27,27],
[29,31,34,0,29,32,23,26,35,30],
[31,27,25,22,0,22,23,19,26,20],
[24,24,25,19,29,0,15,19,26,29],
[30,31,25,28,28,36,0,27,26,34],
[22,31,27,25,32,32,24,0,32,31],
[22,24,24,16,25,25,25,19,0,26],
[23,31,24,21,31,22,17,20,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,25,27,31,27,29,26,31,26],
[27,0,23,27,24,22,27,27,27,25],
[26,28,0,31,29,25,27,28,27,32],
[24,24,20,0,25,24,27,25,23,25],
[20,27,22,26,0,27,25,26,28,25],
[24,29,26,27,24,0,30,29,32,30],
[22,24,24,24,26,21,0,27,26,26],
[25,24,23,26,25,22,24,0,25,28],
[20,24,24,28,23,19,25,26,0,27],
[25,26,19,26,26,21,25,23,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,29,28,30,31,39,42,33,33],
[30,0,32,26,23,32,35,34,35,34],
[22,19,0,26,18,20,34,26,20,25],
[23,25,25,0,22,23,36,35,23,38],
[21,28,33,29,0,19,32,36,22,36],
[20,19,31,28,32,0,35,31,32,39],
[12,16,17,15,19,16,0,19,18,26],
[9,17,25,16,15,20,32,0,29,33],
[18,16,31,28,29,19,33,22,0,37],
[18,17,26,13,15,12,25,18,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,27,24,24,30,26,24,32,21],
[21,0,18,15,22,22,22,21,26,16],
[24,33,0,23,34,27,35,29,31,34],
[27,36,28,0,33,33,41,32,41,24],
[27,29,17,18,0,26,26,26,28,16],
[21,29,24,18,25,0,32,21,31,29],
[25,29,16,10,25,19,0,22,28,27],
[27,30,22,19,25,30,29,0,35,19],
[19,25,20,10,23,20,23,16,0,22],
[30,35,17,27,35,22,24,32,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,7,21,32,31,27,17,15,12],
[32,0,0,29,24,31,13,29,7,20],
[44,51,0,41,44,43,27,41,43,24],
[30,22,10,0,30,19,19,21,10,30],
[19,27,7,21,0,27,15,29,27,0],
[20,20,8,32,24,0,9,29,12,20],
[24,38,24,32,36,42,0,41,38,24],
[34,22,10,30,22,22,10,0,22,22],
[36,44,8,41,24,39,13,29,0,20],
[39,31,27,21,51,31,27,29,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,31,26,29,24,29,30,24,23],
[23,0,27,26,24,21,26,26,20,18],
[20,24,0,29,24,21,24,31,25,19],
[25,25,22,0,24,19,25,25,24,22],
[22,27,27,27,0,28,28,31,25,24],
[27,30,30,32,23,0,28,33,25,20],
[22,25,27,26,23,23,0,29,27,18],
[21,25,20,26,20,18,22,0,25,22],
[27,31,26,27,26,26,24,26,0,27],
[28,33,32,29,27,31,33,29,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,30,36,33,23,26,29,25,31],
[12,0,20,29,20,18,20,23,17,20],
[21,31,0,31,32,25,24,25,25,26],
[15,22,20,0,22,17,20,21,12,19],
[18,31,19,29,0,22,14,22,13,14],
[28,33,26,34,29,0,20,30,19,24],
[25,31,27,31,37,31,0,27,24,33],
[22,28,26,30,29,21,24,0,27,25],
[26,34,26,39,38,32,27,24,0,26],
[20,31,25,32,37,27,18,26,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,19,0,13,9,11,21,11,0],
[42,0,21,27,31,36,26,32,21,27],
[32,30,0,30,19,19,26,47,2,15],
[51,24,21,0,28,24,26,21,11,24],
[38,20,32,23,0,9,22,32,32,38],
[42,15,32,27,42,0,22,32,23,38],
[40,25,25,25,29,29,0,34,16,29],
[30,19,4,30,19,19,17,0,6,19],
[40,30,49,40,19,28,35,45,0,36],
[51,24,36,27,13,13,22,32,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,23,28,28,24,19,23,18,16],
[28,0,20,29,29,33,34,27,28,19],
[28,31,0,30,33,37,29,32,22,19],
[23,22,21,0,29,28,29,27,16,13],
[23,22,18,22,0,29,28,20,26,14],
[27,18,14,23,22,0,28,21,28,17],
[32,17,22,22,23,23,0,27,15,17],
[28,24,19,24,31,30,24,0,17,18],
[33,23,29,35,25,23,36,34,0,29],
[35,32,32,38,37,34,34,33,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,18,19,17,17,14,21,17,17],
[35,0,34,28,26,35,26,30,19,28],
[33,17,0,15,23,30,21,25,21,25],
[32,23,36,0,37,26,22,31,24,29],
[34,25,28,14,0,25,21,26,15,22],
[34,16,21,25,26,0,20,22,15,25],
[37,25,30,29,30,31,0,36,22,30],
[30,21,26,20,25,29,15,0,14,22],
[34,32,30,27,36,36,29,37,0,24],
[34,23,26,22,29,26,21,29,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,28,25,26,25,25,24,31,24],
[26,0,26,25,20,28,25,21,32,20],
[23,25,0,22,23,24,23,21,27,25],
[26,26,29,0,21,28,21,24,32,31],
[25,31,28,30,0,25,24,18,32,27],
[26,23,27,23,26,0,24,26,30,26],
[26,26,28,30,27,27,0,20,29,25],
[27,30,30,27,33,25,31,0,30,28],
[20,19,24,19,19,21,22,21,0,21],
[27,31,26,20,24,25,26,23,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,30,33,25,33,38,34,27,35],
[21,0,33,31,25,34,29,30,28,29],
[21,18,0,20,25,28,27,32,24,26],
[18,20,31,0,25,29,28,26,30,27],
[26,26,26,26,0,29,28,30,26,25],
[18,17,23,22,22,0,22,31,22,22],
[13,22,24,23,23,29,0,33,20,29],
[17,21,19,25,21,20,18,0,21,23],
[24,23,27,21,25,29,31,30,0,29],
[16,22,25,24,26,29,22,28,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,23,21,26,28,24,24,24,34],
[25,0,24,22,28,30,24,26,27,30],
[28,27,0,23,27,30,21,26,23,31],
[30,29,28,0,25,33,26,25,23,32],
[25,23,24,26,0,30,19,26,24,28],
[23,21,21,18,21,0,23,20,22,29],
[27,27,30,25,32,28,0,27,29,33],
[27,25,25,26,25,31,24,0,25,33],
[27,24,28,28,27,29,22,26,0,32],
[17,21,20,19,23,22,18,18,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,26,33,29,25,24,23,23,30],
[24,0,23,35,22,21,23,19,16,24],
[25,28,0,27,18,24,19,27,18,23],
[18,16,24,0,25,14,16,19,12,23],
[22,29,33,26,0,27,19,20,27,34],
[26,30,27,37,24,0,24,25,25,26],
[27,28,32,35,32,27,0,29,16,26],
[28,32,24,32,31,26,22,0,23,27],
[28,35,33,39,24,26,35,28,0,30],
[21,27,28,28,17,25,25,24,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,22,22,26,23,23,25,27,23],
[27,0,20,27,27,24,23,20,25,28],
[29,31,0,25,24,31,26,15,24,25],
[29,24,26,0,27,26,20,20,24,25],
[25,24,27,24,0,27,26,27,29,25],
[28,27,20,25,24,0,23,20,25,23],
[28,28,25,31,25,28,0,21,28,21],
[26,31,36,31,24,31,30,0,29,32],
[24,26,27,27,22,26,23,22,0,24],
[28,23,26,26,26,28,30,19,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,26,23,21,23,22,23,29,26],
[24,0,31,29,27,27,27,24,22,29],
[25,20,0,26,21,18,21,19,24,20],
[28,22,25,0,23,19,21,16,20,26],
[30,24,30,28,0,24,26,23,21,26],
[28,24,33,32,27,0,29,32,27,29],
[29,24,30,30,25,22,0,26,26,28],
[28,27,32,35,28,19,25,0,25,30],
[22,29,27,31,30,24,25,26,0,28],
[25,22,31,25,25,22,23,21,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,26,20,24,25,24,22,21,24],
[24,0,31,28,23,25,24,26,19,21],
[25,20,0,27,20,24,26,21,22,23],
[31,23,24,0,24,20,22,27,19,24],
[27,28,31,27,0,24,29,28,19,24],
[26,26,27,31,27,0,31,28,25,26],
[27,27,25,29,22,20,0,21,22,27],
[29,25,30,24,23,23,30,0,20,26],
[30,32,29,32,32,26,29,31,0,25],
[27,30,28,27,27,25,24,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,29,31,34,44,39,28,36,26],
[31,0,31,28,23,31,28,21,25,30],
[22,20,0,15,16,24,20,21,21,17],
[20,23,36,0,8,20,23,28,35,22],
[17,28,35,43,0,37,33,34,36,31],
[7,20,27,31,14,0,29,24,39,24],
[12,23,31,28,18,22,0,22,29,18],
[23,30,30,23,17,27,29,0,28,25],
[15,26,30,16,15,12,22,23,0,21],
[25,21,34,29,20,27,33,26,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,22,24,22,26,23,26,23],
[24,0,28,22,26,26,22,29,28,21],
[23,23,0,18,24,23,18,27,24,17],
[29,29,33,0,26,26,28,26,27,25],
[27,25,27,25,0,25,27,29,30,23],
[29,25,28,25,26,0,19,29,25,25],
[25,29,33,23,24,32,0,31,31,27],
[28,22,24,25,22,22,20,0,27,19],
[25,23,27,24,21,26,20,24,0,20],
[28,30,34,26,28,26,24,32,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,27,29,31,24,26,28,25,25],
[30,0,26,30,31,28,32,26,30,25],
[24,25,0,30,26,29,29,31,26,23],
[22,21,21,0,28,21,27,28,26,24],
[20,20,25,23,0,25,23,20,19,21],
[27,23,22,30,26,0,25,30,27,22],
[25,19,22,24,28,26,0,23,21,23],
[23,25,20,23,31,21,28,0,27,23],
[26,21,25,25,32,24,30,24,0,26],
[26,26,28,27,30,29,28,28,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,28,24,25,27,24,23,29,25],
[22,0,31,23,21,30,24,21,24,29],
[23,20,0,22,21,29,23,21,24,28],
[27,28,29,0,25,29,31,28,26,32],
[26,30,30,26,0,29,31,24,25,30],
[24,21,22,22,22,0,23,24,21,26],
[27,27,28,20,20,28,0,30,29,33],
[28,30,30,23,27,27,21,0,26,28],
[22,27,27,25,26,30,22,25,0,27],
[26,22,23,19,21,25,18,23,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,28,25,33,28,34,28,23,28],
[19,0,23,23,26,18,27,23,22,27],
[23,28,0,24,23,21,26,25,22,23],
[26,28,27,0,29,24,30,31,28,30],
[18,25,28,22,0,26,26,23,24,24],
[23,33,30,27,25,0,29,30,27,27],
[17,24,25,21,25,22,0,23,20,25],
[23,28,26,20,28,21,28,0,25,26],
[28,29,29,23,27,24,31,26,0,30],
[23,24,28,21,27,24,26,25,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,25,29,30,26,28,26,26,26],
[27,0,24,28,27,23,26,29,25,27],
[26,27,0,30,34,25,26,28,26,25],
[22,23,21,0,24,25,25,25,25,25],
[21,24,17,27,0,21,22,22,20,21],
[25,28,26,26,30,0,28,25,24,31],
[23,25,25,26,29,23,0,28,21,22],
[25,22,23,26,29,26,23,0,23,29],
[25,26,25,26,31,27,30,28,0,27],
[25,24,26,26,30,20,29,22,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,24,21,32,33,35,20,34,31],
[32,0,26,22,33,41,29,27,28,27],
[27,25,0,29,40,32,27,33,27,31],
[30,29,22,0,31,36,30,26,22,29],
[19,18,11,20,0,28,16,17,14,20],
[18,10,19,15,23,0,25,16,28,24],
[16,22,24,21,35,26,0,22,19,29],
[31,24,18,25,34,35,29,0,18,24],
[17,23,24,29,37,23,32,33,0,29],
[20,24,20,22,31,27,22,27,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,21,15,20,24,25,18,22,15],
[32,0,19,25,27,21,28,18,20,16],
[30,32,0,27,29,28,33,22,26,23],
[36,26,24,0,25,25,27,22,23,22],
[31,24,22,26,0,19,27,12,28,18],
[27,30,23,26,32,0,31,24,23,26],
[26,23,18,24,24,20,0,14,26,10],
[33,33,29,29,39,27,37,0,26,25],
[29,31,25,28,23,28,25,25,0,21],
[36,35,28,29,33,25,41,26,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,39,25,36,27,33,21,22,20],
[24,0,32,25,36,32,31,25,22,28],
[12,19,0,17,26,25,25,16,24,21],
[26,26,34,0,27,21,27,14,16,17],
[15,15,25,24,0,21,34,22,17,17],
[24,19,26,30,30,0,22,17,21,15],
[18,20,26,24,17,29,0,16,14,14],
[30,26,35,37,29,34,35,0,26,19],
[29,29,27,35,34,30,37,25,0,31],
[31,23,30,34,34,36,37,32,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,28,24,22,21,29,24,29,24],
[23,0,24,23,20,28,25,29,35,19],
[23,27,0,24,14,20,28,26,22,24],
[27,28,27,0,22,21,35,30,24,19],
[29,31,37,29,0,30,33,34,33,20],
[30,23,31,30,21,0,30,34,30,26],
[22,26,23,16,18,21,0,26,31,26],
[27,22,25,21,17,17,25,0,22,22],
[22,16,29,27,18,21,20,29,0,22],
[27,32,27,32,31,25,25,29,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,29,29,33,22,22,32,31,30],
[14,0,17,14,23,13,9,21,14,14],
[22,34,0,32,29,27,16,32,29,27],
[22,37,19,0,28,22,21,27,26,25],
[18,28,22,23,0,19,22,31,23,22],
[29,38,24,29,32,0,26,24,28,30],
[29,42,35,30,29,25,0,36,32,35],
[19,30,19,24,20,27,15,0,21,19],
[20,37,22,25,28,23,19,30,0,24],
[21,37,24,26,29,21,16,32,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,27,24,26,27,26,31,23,28],
[19,0,22,25,18,24,25,25,23,21],
[24,29,0,24,27,28,26,24,23,27],
[27,26,27,0,26,28,27,27,19,29],
[25,33,24,25,0,29,29,29,24,24],
[24,27,23,23,22,0,22,27,23,22],
[25,26,25,24,22,29,0,31,26,24],
[20,26,27,24,22,24,20,0,21,20],
[28,28,28,32,27,28,25,30,0,29],
[23,30,24,22,27,29,27,31,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,24,30,11,13,27,16,6,30],
[12,0,22,21,12,24,21,17,11,18],
[27,29,0,30,27,30,27,33,26,24],
[21,30,21,0,21,24,38,14,14,38],
[40,39,24,30,0,40,30,33,19,40],
[38,27,21,27,11,0,27,4,11,31],
[24,30,24,13,21,24,0,14,14,14],
[35,34,18,37,18,47,37,0,11,35],
[45,40,25,37,32,40,37,40,0,35],
[21,33,27,13,11,20,37,16,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,24,32,27,31,30,29,24,34],
[24,0,23,25,20,33,22,25,24,29],
[27,28,0,29,30,28,28,26,28,23],
[19,26,22,0,26,31,23,27,22,24],
[24,31,21,25,0,26,24,25,24,24],
[20,18,23,20,25,0,23,23,20,19],
[21,29,23,28,27,28,0,31,26,30],
[22,26,25,24,26,28,20,0,21,25],
[27,27,23,29,27,31,25,30,0,26],
[17,22,28,27,27,32,21,26,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,31,33,34,24,29,40,25,26],
[23,0,27,31,37,22,23,29,28,28],
[20,24,0,24,32,21,24,25,20,21],
[18,20,27,0,31,22,19,33,23,20],
[17,14,19,20,0,15,18,25,16,16],
[27,29,30,29,36,0,24,37,30,28],
[22,28,27,32,33,27,0,36,27,24],
[11,22,26,18,26,14,15,0,18,16],
[26,23,31,28,35,21,24,33,0,28],
[25,23,30,31,35,23,27,35,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,15,24,19,20,22,21,19,17],
[32,0,22,20,27,27,24,30,24,23],
[36,29,0,27,27,25,28,30,25,26],
[27,31,24,0,24,23,23,24,21,26],
[32,24,24,27,0,24,23,32,20,25],
[31,24,26,28,27,0,26,26,22,25],
[29,27,23,28,28,25,0,33,22,18],
[30,21,21,27,19,25,18,0,20,20],
[32,27,26,30,31,29,29,31,0,25],
[34,28,25,25,26,26,33,31,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,20,20,15,25,20,6,18,4],
[8,0,6,18,4,0,4,14,18,4],
[31,45,0,45,31,45,49,24,49,31],
[31,33,6,0,33,33,37,24,49,31],
[36,47,20,18,0,33,20,42,18,4],
[26,51,6,18,18,0,18,28,32,18],
[31,47,2,14,31,33,0,24,35,0],
[45,37,27,27,9,23,27,0,27,9],
[33,33,2,2,33,19,16,24,0,14],
[47,47,20,20,47,33,51,42,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,20,15,27,30,32,27,20,27],
[18,0,30,13,19,14,19,14,13,20],
[31,21,0,18,21,24,34,27,26,19],
[36,38,33,0,30,38,39,35,26,25],
[24,32,30,21,0,20,31,32,31,25],
[21,37,27,13,31,0,31,21,26,30],
[19,32,17,12,20,20,0,31,23,17],
[24,37,24,16,19,30,20,0,28,22],
[31,38,25,25,20,25,28,23,0,17],
[24,31,32,26,26,21,34,29,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,27,22,27,30,25,29,14,13],
[30,0,32,21,32,40,19,37,7,18],
[24,19,0,15,28,36,19,28,15,14],
[29,30,36,0,24,39,31,37,16,29],
[24,19,23,27,0,32,26,26,17,22],
[21,11,15,12,19,0,4,22,7,6],
[26,32,32,20,25,47,0,27,26,19],
[22,14,23,14,25,29,24,0,13,19],
[37,44,36,35,34,44,25,38,0,22],
[38,33,37,22,29,45,32,32,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,25,31,29,30,36,25,25,29],
[21,0,25,27,25,25,32,24,27,27],
[26,26,0,30,25,26,30,26,24,28],
[20,24,21,0,24,27,26,22,25,25],
[22,26,26,27,0,27,28,27,21,28],
[21,26,25,24,24,0,29,26,21,31],
[15,19,21,25,23,22,0,20,21,27],
[26,27,25,29,24,25,31,0,21,32],
[26,24,27,26,30,30,30,30,0,33],
[22,24,23,26,23,20,24,19,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,15,25,18,15,16,16,22,20],
[33,0,26,34,26,22,30,28,29,34],
[36,25,0,31,30,28,26,27,22,27],
[26,17,20,0,19,19,16,16,28,28],
[33,25,21,32,0,31,32,28,27,29],
[36,29,23,32,20,0,21,32,32,29],
[35,21,25,35,19,30,0,28,29,25],
[35,23,24,35,23,19,23,0,30,30],
[29,22,29,23,24,19,22,21,0,27],
[31,17,24,23,22,22,26,21,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,18,31,25,27,27,29,32,21],
[26,0,20,25,25,24,19,25,25,24],
[33,31,0,29,34,32,26,35,31,25],
[20,26,22,0,30,26,22,27,28,25],
[26,26,17,21,0,22,23,26,27,25],
[24,27,19,25,29,0,27,31,31,25],
[24,32,25,29,28,24,0,27,31,27],
[22,26,16,24,25,20,24,0,29,21],
[19,26,20,23,24,20,20,22,0,22],
[30,27,26,26,26,26,24,30,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,30,30,30,10,30,30,30,30],
[21,0,31,31,21,31,51,51,31,31],
[21,20,0,30,20,10,30,30,10,20],
[21,20,21,0,20,0,30,20,10,20],
[21,30,31,31,0,10,30,30,31,30],
[41,20,41,51,41,0,51,41,51,20],
[21,0,21,21,21,0,0,21,21,0],
[21,0,21,31,21,10,30,0,31,0],
[21,20,41,41,20,0,30,20,0,20],
[21,20,31,31,21,31,51,51,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,25,23,25,25,20,23,17,18],
[35,0,30,33,26,30,30,27,27,23],
[26,21,0,25,30,28,26,28,22,24],
[28,18,26,0,33,33,26,28,27,24],
[26,25,21,18,0,20,25,21,23,23],
[26,21,23,18,31,0,23,22,22,26],
[31,21,25,25,26,28,0,22,27,21],
[28,24,23,23,30,29,29,0,21,23],
[34,24,29,24,28,29,24,30,0,26],
[33,28,27,27,28,25,30,28,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,25,23,31,29,27,29,25,22],
[23,0,23,23,23,27,19,27,22,18],
[26,28,0,27,25,33,28,34,31,24],
[28,28,24,0,29,31,28,30,30,22],
[20,28,26,22,0,30,31,29,27,21],
[22,24,18,20,21,0,19,21,22,19],
[24,32,23,23,20,32,0,30,30,24],
[22,24,17,21,22,30,21,0,23,17],
[26,29,20,21,24,29,21,28,0,27],
[29,33,27,29,30,32,27,34,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,26,25,25,27,24,30,19,26],
[20,0,18,23,21,21,19,21,19,19],
[25,33,0,28,27,27,31,29,21,28],
[26,28,23,0,28,25,27,28,19,20],
[26,30,24,23,0,28,29,25,23,25],
[24,30,24,26,23,0,21,25,21,20],
[27,32,20,24,22,30,0,24,21,20],
[21,30,22,23,26,26,27,0,20,25],
[32,32,30,32,28,30,30,31,0,24],
[25,32,23,31,26,31,31,26,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,24,32,27,32,31,28,23,31],
[22,0,22,26,28,25,39,29,32,30],
[27,29,0,26,22,26,36,24,26,30],
[19,25,25,0,18,22,31,23,18,26],
[24,23,29,33,0,34,21,28,26,29],
[19,26,25,29,17,0,26,22,23,20],
[20,12,15,20,30,25,0,23,16,19],
[23,22,27,28,23,29,28,0,22,27],
[28,19,25,33,25,28,35,29,0,28],
[20,21,21,25,22,31,32,24,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,30,24,25,26,30,29,28,23],
[21,0,23,23,17,21,25,22,26,21],
[21,28,0,21,24,26,35,21,23,23],
[27,28,30,0,21,26,28,28,29,26],
[26,34,27,30,0,26,27,25,32,28],
[25,30,25,25,25,0,29,24,25,22],
[21,26,16,23,24,22,0,16,25,20],
[22,29,30,23,26,27,35,0,29,21],
[23,25,28,22,19,26,26,22,0,23],
[28,30,28,25,23,29,31,30,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,24,23,20,29,25,22,24,28],
[31,0,32,29,27,25,27,33,27,30],
[27,19,0,20,21,22,17,23,30,24],
[28,22,31,0,27,27,24,27,31,26],
[31,24,30,24,0,28,27,28,26,31],
[22,26,29,24,23,0,27,28,26,28],
[26,24,34,27,24,24,0,28,32,28],
[29,18,28,24,23,23,23,0,28,27],
[27,24,21,20,25,25,19,23,0,30],
[23,21,27,25,20,23,23,24,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,22,25,24,31,23,33,28,31],
[20,0,18,15,24,27,21,28,27,23],
[29,33,0,28,22,30,25,36,25,34],
[26,36,23,0,22,27,26,34,26,30],
[27,27,29,29,0,24,24,28,23,28],
[20,24,21,24,27,0,24,27,23,28],
[28,30,26,25,27,27,0,31,23,25],
[18,23,15,17,23,24,20,0,22,24],
[23,24,26,25,28,28,28,29,0,27],
[20,28,17,21,23,23,26,27,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,19,24,27,23,19,19,13,26],
[20,0,31,13,20,18,28,0,20,18],
[32,20,0,13,19,19,32,16,17,15],
[27,38,38,0,27,38,19,38,19,34],
[24,31,32,24,0,19,28,19,24,19],
[28,33,32,13,32,0,28,8,13,39],
[32,23,19,32,23,23,0,19,32,19],
[32,51,35,13,32,43,32,0,24,39],
[38,31,34,32,27,38,19,27,0,26],
[25,33,36,17,32,12,32,12,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,37,26,25,33,27,32,29,23],
[19,0,28,22,24,32,23,32,35,27],
[14,23,0,28,23,29,17,27,30,23],
[25,29,23,0,25,35,30,28,33,24],
[26,27,28,26,0,40,18,30,31,20],
[18,19,22,16,11,0,17,22,30,15],
[24,28,34,21,33,34,0,35,36,27],
[19,19,24,23,21,29,16,0,36,16],
[22,16,21,18,20,21,15,15,0,19],
[28,24,28,27,31,36,24,35,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,29,15,21,19,15,19,16,25],
[42,0,32,19,25,23,23,21,31,35],
[22,19,0,21,21,24,24,18,24,20],
[36,32,30,0,27,29,27,25,31,28],
[30,26,30,24,0,29,26,22,31,27],
[32,28,27,22,22,0,17,16,37,31],
[36,28,27,24,25,34,0,28,32,33],
[32,30,33,26,29,35,23,0,28,28],
[35,20,27,20,20,14,19,23,0,19],
[26,16,31,23,24,20,18,23,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,31,27,29,30,32,25,34],
[23,0,28,28,26,24,29,25,25,33],
[25,23,0,31,20,23,25,24,24,26],
[20,23,20,0,19,22,21,22,26,29],
[24,25,31,32,0,27,28,27,27,29],
[22,27,28,29,24,0,30,28,23,30],
[21,22,26,30,23,21,0,27,24,31],
[19,26,27,29,24,23,24,0,25,31],
[26,26,27,25,24,28,27,26,0,28],
[17,18,25,22,22,21,20,20,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,19,23,24,21,15,20,22,15],
[20,0,27,21,22,27,15,24,27,19],
[32,24,0,28,20,24,27,24,28,28],
[28,30,23,0,27,24,26,18,26,28],
[27,29,31,24,0,23,29,22,32,25],
[30,24,27,27,28,0,21,29,28,26],
[36,36,24,25,22,30,0,27,25,29],
[31,27,27,33,29,22,24,0,22,33],
[29,24,23,25,19,23,26,29,0,27],
[36,32,23,23,26,25,22,18,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,25,24,13,26,17,17,17,13],
[29,0,21,20,14,30,21,10,10,20],
[26,30,0,27,11,35,22,24,30,22],
[27,31,24,0,12,32,24,16,16,17],
[38,37,40,39,0,46,30,30,33,22],
[25,21,16,19,5,0,20,13,13,14],
[34,30,29,27,21,31,0,24,29,25],
[34,41,27,35,21,38,27,0,21,29],
[34,41,21,35,18,38,22,30,0,28],
[38,31,29,34,29,37,26,22,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,20,27,21,27,24,26,28,28],
[33,0,28,30,25,26,27,27,27,25],
[31,23,0,27,25,24,24,26,28,30],
[24,21,24,0,21,28,23,25,34,18],
[30,26,26,30,0,20,28,26,29,25],
[24,25,27,23,31,0,26,23,27,24],
[27,24,27,28,23,25,0,31,28,25],
[25,24,25,26,25,28,20,0,29,24],
[23,24,23,17,22,24,23,22,0,23],
[23,26,21,33,26,27,26,27,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,32,21,19,27,18,20,22,22],
[29,0,35,29,15,28,19,28,18,22],
[19,16,0,24,15,23,19,23,12,24],
[30,22,27,0,17,23,21,21,20,26],
[32,36,36,34,0,30,30,35,22,30],
[24,23,28,28,21,0,20,20,21,25],
[33,32,32,30,21,31,0,30,28,28],
[31,23,28,30,16,31,21,0,19,28],
[29,33,39,31,29,30,23,32,0,29],
[29,29,27,25,21,26,23,23,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,36,27,27,32,22,22,28,38],
[20,0,27,28,29,24,27,23,29,38],
[15,24,0,20,17,26,13,23,26,28],
[24,23,31,0,35,26,24,20,29,32],
[24,22,34,16,0,26,23,22,21,28],
[19,27,25,25,25,0,16,24,20,28],
[29,24,38,27,28,35,0,26,30,34],
[29,28,28,31,29,27,25,0,21,36],
[23,22,25,22,30,31,21,30,0,27],
[13,13,23,19,23,23,17,15,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,27,21,29,38,28,34,22,27],
[16,0,19,16,32,35,17,27,19,18],
[24,32,0,18,39,30,25,30,22,24],
[30,35,33,0,39,22,27,35,29,24],
[22,19,12,12,0,26,16,19,9,22],
[13,16,21,29,25,0,19,18,20,15],
[23,34,26,24,35,32,0,35,26,21],
[17,24,21,16,32,33,16,0,18,17],
[29,32,29,22,42,31,25,33,0,18],
[24,33,27,27,29,36,30,34,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,32,27,24,34,24,35,25,32],
[24,0,28,22,24,27,23,29,31,37],
[19,23,0,27,26,26,25,21,34,30],
[24,29,24,0,26,35,22,32,23,29],
[27,27,25,25,0,32,26,32,32,31],
[17,24,25,16,19,0,23,24,26,31],
[27,28,26,29,25,28,0,30,26,30],
[16,22,30,19,19,27,21,0,25,28],
[26,20,17,28,19,25,25,26,0,23],
[19,14,21,22,20,20,21,23,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,22,20,23,20,33,20,28,25],
[30,0,16,29,27,27,26,27,27,16],
[29,35,0,29,34,21,25,33,33,30],
[31,22,22,0,22,19,24,21,12,24],
[28,24,17,29,0,17,16,21,28,23],
[31,24,30,32,34,0,30,23,32,28],
[18,25,26,27,35,21,0,19,31,21],
[31,24,18,30,30,28,32,0,24,18],
[23,24,18,39,23,19,20,27,0,19],
[26,35,21,27,28,23,30,33,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,22,36,22,23,25,32,38,25],
[20,0,18,20,17,16,16,31,15,13],
[29,33,0,35,32,31,31,40,39,22],
[15,31,16,0,22,9,13,20,21,7],
[29,34,19,29,0,23,14,34,32,14],
[28,35,20,42,28,0,24,35,42,28],
[26,35,20,38,37,27,0,35,35,29],
[19,20,11,31,17,16,16,0,24,11],
[13,36,12,30,19,9,16,27,0,16],
[26,38,29,44,37,23,22,40,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,26,22,25,27,27,24,29,35],
[35,0,24,32,31,38,29,29,26,29],
[25,27,0,31,32,44,35,30,30,38],
[29,19,20,0,30,27,28,29,31,34],
[26,20,19,21,0,29,27,33,26,30],
[24,13,7,24,22,0,27,21,28,30],
[24,22,16,23,24,24,0,27,20,22],
[27,22,21,22,18,30,24,0,34,34],
[22,25,21,20,25,23,31,17,0,28],
[16,22,13,17,21,21,29,17,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,25,22,26,20,24,22,22,17],
[32,0,27,28,31,24,30,19,19,24],
[26,24,0,22,22,21,28,21,23,15],
[29,23,29,0,29,23,36,19,14,24],
[25,20,29,22,0,23,28,21,16,22],
[31,27,30,28,28,0,34,23,26,25],
[27,21,23,15,23,17,0,18,17,20],
[29,32,30,32,30,28,33,0,23,26],
[29,32,28,37,35,25,34,28,0,32],
[34,27,36,27,29,26,31,25,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,32,22,30,28,32,23,28,26],
[21,0,28,13,22,15,23,16,22,18],
[19,23,0,21,24,27,25,25,30,20],
[29,38,30,0,34,27,32,25,34,28],
[21,29,27,17,0,19,26,21,24,25],
[23,36,24,24,32,0,30,27,29,22],
[19,28,26,19,25,21,0,25,27,21],
[28,35,26,26,30,24,26,0,31,23],
[23,29,21,17,27,22,24,20,0,18],
[25,33,31,23,26,29,30,28,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,26,29,25,23,18,25,24,23],
[27,0,24,35,31,25,25,27,28,20],
[25,27,0,30,30,21,21,28,23,21],
[22,16,21,0,21,25,18,21,23,24],
[26,20,21,30,0,27,19,27,21,19],
[28,26,30,26,24,0,23,26,26,24],
[33,26,30,33,32,28,0,25,26,28],
[26,24,23,30,24,25,26,0,24,22],
[27,23,28,28,30,25,25,27,0,25],
[28,31,30,27,32,27,23,29,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,33,22,27,24,24,23,24,27],
[19,0,27,17,26,24,23,25,21,26],
[18,24,0,17,25,20,15,20,19,22],
[29,34,34,0,35,30,27,25,28,31],
[24,25,26,16,0,23,20,18,21,23],
[27,27,31,21,28,0,27,21,23,29],
[27,28,36,24,31,24,0,29,24,30],
[28,26,31,26,33,30,22,0,30,28],
[27,30,32,23,30,28,27,21,0,29],
[24,25,29,20,28,22,21,23,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,23,30,22,27,25,31,30,28],
[11,0,22,25,20,22,22,32,22,18],
[28,29,0,27,26,26,26,31,27,24],
[21,26,24,0,20,24,21,29,25,14],
[29,31,25,31,0,33,26,30,33,26],
[24,29,25,27,18,0,28,27,23,19],
[26,29,25,30,25,23,0,33,28,18],
[20,19,20,22,21,24,18,0,22,15],
[21,29,24,26,18,28,23,29,0,15],
[23,33,27,37,25,32,33,36,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,30,32,29,30,27,28,26,24],
[23,0,24,28,20,25,26,29,30,27],
[21,27,0,27,24,27,26,25,19,28],
[19,23,24,0,25,27,25,28,20,27],
[22,31,27,26,0,32,25,28,27,24],
[21,26,24,24,19,0,25,27,24,21],
[24,25,25,26,26,26,0,30,24,24],
[23,22,26,23,23,24,21,0,19,21],
[25,21,32,31,24,27,27,32,0,30],
[27,24,23,24,27,30,27,30,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,25,28,27,23,16,26,23,23],
[23,0,27,26,25,29,24,25,23,26],
[26,24,0,21,25,25,26,27,20,23],
[23,25,30,0,31,31,23,31,26,26],
[24,26,26,20,0,24,19,22,19,19],
[28,22,26,20,27,0,20,29,21,22],
[35,27,25,28,32,31,0,34,27,25],
[25,26,24,20,29,22,17,0,22,21],
[28,28,31,25,32,30,24,29,0,28],
[28,25,28,25,32,29,26,30,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,31,31,30,32,36,27,31,28],
[26,0,27,28,29,24,32,24,24,27],
[20,24,0,27,26,26,27,20,23,30],
[20,23,24,0,29,20,24,23,23,24],
[21,22,25,22,0,16,24,20,24,23],
[19,27,25,31,35,0,34,23,23,32],
[15,19,24,27,27,17,0,26,21,26],
[24,27,31,28,31,28,25,0,27,30],
[20,27,28,28,27,28,30,24,0,27],
[23,24,21,27,28,19,25,21,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,25,18,24,20,26,29,17,21],
[32,0,32,27,26,24,28,33,23,29],
[26,19,0,22,26,23,31,29,20,27],
[33,24,29,0,27,30,30,27,28,32],
[27,25,25,24,0,30,28,27,22,31],
[31,27,28,21,21,0,33,30,25,30],
[25,23,20,21,23,18,0,23,18,27],
[22,18,22,24,24,21,28,0,16,24],
[34,28,31,23,29,26,33,35,0,28],
[30,22,24,19,20,21,24,27,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,31,36,29,31,19,26,27,27],
[11,0,22,25,20,25,14,20,17,20],
[20,29,0,25,19,23,19,23,24,30],
[15,26,26,0,25,26,24,24,23,25],
[22,31,32,26,0,30,23,23,23,25],
[20,26,28,25,21,0,19,17,17,23],
[32,37,32,27,28,32,0,28,25,30],
[25,31,28,27,28,34,23,0,23,31],
[24,34,27,28,28,34,26,28,0,25],
[24,31,21,26,26,28,21,20,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,18,27,21,17,20,24,27,28],
[27,0,16,34,23,25,15,24,24,30],
[33,35,0,29,27,24,22,30,24,31],
[24,17,22,0,14,21,15,21,26,24],
[30,28,24,37,0,23,29,23,25,27],
[34,26,27,30,28,0,22,29,29,33],
[31,36,29,36,22,29,0,34,37,37],
[27,27,21,30,28,22,17,0,26,26],
[24,27,27,25,26,22,14,25,0,28],
[23,21,20,27,24,18,14,25,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,24,23,24,28,28,34,31,27],
[22,0,25,22,24,20,26,34,27,26],
[27,26,0,25,23,19,22,29,32,22],
[28,29,26,0,24,23,25,32,34,30],
[27,27,28,27,0,30,24,32,35,25],
[23,31,32,28,21,0,30,29,33,21],
[23,25,29,26,27,21,0,28,25,22],
[17,17,22,19,19,22,23,0,29,21],
[20,24,19,17,16,18,26,22,0,16],
[24,25,29,21,26,30,29,30,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,24,24,21,23,27,23,21,27],
[20,0,24,21,21,23,24,20,24,21],
[27,27,0,22,23,21,26,23,25,25],
[27,30,29,0,24,25,30,25,32,22],
[30,30,28,27,0,25,31,27,27,29],
[28,28,30,26,26,0,27,20,31,26],
[24,27,25,21,20,24,0,17,20,23],
[28,31,28,26,24,31,34,0,28,33],
[30,27,26,19,24,20,31,23,0,27],
[24,30,26,29,22,25,28,18,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,15,24,20,32,21,27,18,27],
[30,0,23,36,34,35,32,31,20,27],
[36,28,0,32,34,34,31,31,19,32],
[27,15,19,0,25,24,25,27,16,22],
[31,17,17,26,0,27,24,19,21,22],
[19,16,17,27,24,0,20,21,21,21],
[30,19,20,26,27,31,0,26,24,25],
[24,20,20,24,32,30,25,0,23,32],
[33,31,32,35,30,30,27,28,0,25],
[24,24,19,29,29,30,26,19,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,25,28,26,26,28,23,26,28],
[27,0,25,25,23,28,29,28,23,30],
[26,26,0,31,32,31,31,30,23,30],
[23,26,20,0,24,28,32,27,26,28],
[25,28,19,27,0,25,30,28,28,27],
[25,23,20,23,26,0,27,24,25,24],
[23,22,20,19,21,24,0,23,24,22],
[28,23,21,24,23,27,28,0,27,22],
[25,28,28,25,23,26,27,24,0,24],
[23,21,21,23,24,27,29,29,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,21,26,26,29,30,25,28,26],
[29,0,23,33,28,26,35,30,31,25],
[30,28,0,28,25,30,35,29,29,28],
[25,18,23,0,24,23,28,23,23,25],
[25,23,26,27,0,27,31,24,26,27],
[22,25,21,28,24,0,29,27,24,27],
[21,16,16,23,20,22,0,23,19,24],
[26,21,22,28,27,24,28,0,26,29],
[23,20,22,28,25,27,32,25,0,21],
[25,26,23,26,24,24,27,22,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,22,25,23,24,30,22,29,34],
[23,0,27,27,27,27,26,26,30,29],
[29,24,0,31,28,22,31,24,32,35],
[26,24,20,0,19,33,30,20,32,36],
[28,24,23,32,0,30,21,21,30,33],
[27,24,29,18,21,0,32,24,24,29],
[21,25,20,21,30,19,0,21,23,28],
[29,25,27,31,30,27,30,0,33,31],
[22,21,19,19,21,27,28,18,0,24],
[17,22,16,15,18,22,23,20,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,24,30,22,23,31,23,27,32],
[30,0,27,26,20,15,32,19,21,28],
[27,24,0,27,21,23,30,21,20,33],
[21,25,24,0,22,23,24,17,29,34],
[29,31,30,29,0,28,34,30,24,37],
[28,36,28,28,23,0,36,21,33,36],
[20,19,21,27,17,15,0,21,21,18],
[28,32,30,34,21,30,30,0,24,36],
[24,30,31,22,27,18,30,27,0,34],
[19,23,18,17,14,15,33,15,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,38,31,38,34,34,25,24,29],
[29,0,25,25,32,27,35,24,24,29],
[13,26,0,15,21,36,31,25,22,24],
[20,26,36,0,33,37,39,32,25,31],
[13,19,30,18,0,27,30,19,24,31],
[17,24,15,14,24,0,23,14,14,24],
[17,16,20,12,21,28,0,25,14,19],
[26,27,26,19,32,37,26,0,28,30],
[27,27,29,26,27,37,37,23,0,30],
[22,22,27,20,20,27,32,21,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,23,26,24,22,34,28,27],
[26,0,25,26,24,26,24,38,29,27],
[26,26,0,29,24,27,24,37,29,24],
[28,25,22,0,26,24,28,35,30,28],
[25,27,27,25,0,26,26,33,31,31],
[27,25,24,27,25,0,25,39,36,31],
[29,27,27,23,25,26,0,37,29,26],
[17,13,14,16,18,12,14,0,22,18],
[23,22,22,21,20,15,22,29,0,23],
[24,24,27,23,20,20,25,33,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,19,27,29,29,24,26,20,31],
[23,0,20,29,21,24,24,23,21,26],
[32,31,0,30,28,35,31,25,28,34],
[24,22,21,0,28,27,24,27,21,28],
[22,30,23,23,0,29,27,27,30,30],
[22,27,16,24,22,0,26,24,21,32],
[27,27,20,27,24,25,0,26,22,32],
[25,28,26,24,24,27,25,0,29,28],
[31,30,23,30,21,30,29,22,0,30],
[20,25,17,23,21,19,19,23,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,30,30,32,27,29,32,24],
[24,0,23,23,26,24,27,26,30,27],
[24,28,0,24,24,26,29,21,31,30],
[21,28,27,0,27,24,20,18,30,26],
[21,25,27,24,0,30,20,21,31,25],
[19,27,25,27,21,0,24,26,34,25],
[24,24,22,31,31,27,0,18,27,19],
[22,25,30,33,30,25,33,0,27,31],
[19,21,20,21,20,17,24,24,0,19],
[27,24,21,25,26,26,32,20,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,20,32,21,24,32,27,28,23],
[28,0,28,28,29,25,34,28,28,29],
[31,23,0,32,21,26,29,25,32,24],
[19,23,19,0,19,17,26,26,29,23],
[30,22,30,32,0,21,30,24,29,21],
[27,26,25,34,30,0,32,29,32,28],
[19,17,22,25,21,19,0,23,28,24],
[24,23,26,25,27,22,28,0,26,21],
[23,23,19,22,22,19,23,25,0,20],
[28,22,27,28,30,23,27,30,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,22,29,24,29,24,29,26,34],
[30,0,22,27,21,28,25,30,19,32],
[29,29,0,30,23,30,30,26,26,31],
[22,24,21,0,20,27,22,22,21,24],
[27,30,28,31,0,29,31,31,22,34],
[22,23,21,24,22,0,24,27,25,25],
[27,26,21,29,20,27,0,26,21,31],
[22,21,25,29,20,24,25,0,24,20],
[25,32,25,30,29,26,30,27,0,31],
[17,19,20,27,17,26,20,31,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,24,25,24,27,23,21,24,18],
[26,0,23,26,29,29,22,31,28,29],
[27,28,0,27,21,24,23,27,27,27],
[26,25,24,0,25,30,27,26,29,26],
[27,22,30,26,0,28,18,23,28,24],
[24,22,27,21,23,0,21,19,20,18],
[28,29,28,24,33,30,0,31,31,29],
[30,20,24,25,28,32,20,0,30,31],
[27,23,24,22,23,31,20,21,0,25],
[33,22,24,25,27,33,22,20,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,25,18,27,18,21,25,19,26],
[27,0,29,20,29,21,23,20,24,25],
[26,22,0,15,25,23,16,15,15,23],
[33,31,36,0,36,29,23,30,30,33],
[24,22,26,15,0,16,16,20,15,22],
[33,30,28,22,35,0,25,25,30,29],
[30,28,35,28,35,26,0,17,22,24],
[26,31,36,21,31,26,34,0,20,32],
[32,27,36,21,36,21,29,31,0,30],
[25,26,28,18,29,22,27,19,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,24,22,25,32,31,28,23,22],
[21,0,30,24,32,28,33,30,19,27],
[27,21,0,18,22,24,23,21,24,23],
[29,27,33,0,21,34,26,28,24,21],
[26,19,29,30,0,28,30,27,21,24],
[19,23,27,17,23,0,26,22,21,24],
[20,18,28,25,21,25,0,21,21,23],
[23,21,30,23,24,29,30,0,25,23],
[28,32,27,27,30,30,30,26,0,25],
[29,24,28,30,27,27,28,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,4,18,16,12,14,14,0],
[51,0,21,25,35,51,51,14,35,25],
[51,30,0,33,18,34,30,26,26,20],
[47,26,18,0,18,30,26,14,14,4],
[33,16,33,33,0,16,16,16,47,16],
[35,0,17,21,35,0,33,14,31,21],
[39,0,21,25,35,18,0,14,31,21],
[37,37,25,37,35,37,37,0,51,37],
[37,16,25,37,4,20,20,0,0,20],
[51,26,31,47,35,30,30,14,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,29,30,28,28,26,23,35,28],
[24,0,19,20,19,21,22,13,22,17],
[22,32,0,37,22,21,27,26,32,26],
[21,31,14,0,19,14,21,17,24,18],
[23,32,29,32,0,20,30,26,31,30],
[23,30,30,37,31,0,31,25,38,30],
[25,29,24,30,21,20,0,17,32,22],
[28,38,25,34,25,26,34,0,44,30],
[16,29,19,27,20,13,19,7,0,21],
[23,34,25,33,21,21,29,21,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,31,21,30,31,37,25,33,29],
[24,0,31,15,20,28,26,19,13,15],
[20,20,0,16,28,28,26,29,22,21],
[30,36,35,0,29,29,36,30,23,22],
[21,31,23,22,0,30,28,24,25,23],
[20,23,23,22,21,0,31,25,26,22],
[14,25,25,15,23,20,0,20,16,15],
[26,32,22,21,27,26,31,0,29,25],
[18,38,29,28,26,25,35,22,0,15],
[22,36,30,29,28,29,36,26,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,27,19,16,18,23,18,33,26],
[33,0,37,31,18,36,26,20,30,22],
[24,14,0,17,14,17,21,13,26,19],
[32,20,34,0,23,30,18,16,33,22],
[35,33,37,28,0,29,26,21,26,26],
[33,15,34,21,22,0,20,14,32,28],
[28,25,30,33,25,31,0,31,39,23],
[33,31,38,35,30,37,20,0,34,29],
[18,21,25,18,25,19,12,17,0,26],
[25,29,32,29,25,23,28,22,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,28,34,19,36,13,29,25,43],
[17,0,15,22,9,16,10,3,10,29],
[23,36,0,30,22,30,20,26,25,43],
[17,29,21,0,20,27,27,23,24,23],
[32,42,29,31,0,24,21,29,26,31],
[15,35,21,24,27,0,20,25,26,27],
[38,41,31,24,30,31,0,24,40,45],
[22,48,25,28,22,26,27,0,25,36],
[26,41,26,27,25,25,11,26,0,42],
[8,22,8,28,20,24,6,15,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,26,32,27,23,28,28,27,22],
[26,0,23,27,27,20,21,25,27,22],
[25,28,0,31,25,24,30,25,27,31],
[19,24,20,0,20,24,21,20,28,17],
[24,24,26,31,0,26,21,24,22,23],
[28,31,27,27,25,0,26,23,24,23],
[23,30,21,30,30,25,0,26,27,32],
[23,26,26,31,27,28,25,0,24,24],
[24,24,24,23,29,27,24,27,0,21],
[29,29,20,34,28,28,19,27,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,20,16,22,27,18,23,21,20],
[32,0,26,25,27,31,23,27,28,25],
[31,25,0,27,31,39,29,34,29,27],
[35,26,24,0,25,30,25,30,23,26],
[29,24,20,26,0,32,25,31,26,26],
[24,20,12,21,19,0,21,24,22,20],
[33,28,22,26,26,30,0,30,21,21],
[28,24,17,21,20,27,21,0,20,20],
[30,23,22,28,25,29,30,31,0,31],
[31,26,24,25,25,31,30,31,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,27,24,31,20,25,23,26,23],
[27,0,30,25,32,24,28,25,26,30],
[24,21,0,24,28,23,24,19,19,24],
[27,26,27,0,30,29,25,28,31,25],
[20,19,23,21,0,26,39,31,32,25],
[31,27,28,22,25,0,23,24,26,22],
[26,23,27,26,12,28,0,23,27,23],
[28,26,32,23,20,27,28,0,27,28],
[25,25,32,20,19,25,24,24,0,21],
[28,21,27,26,26,29,28,23,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,30,29,32,30,28,28,20,26],
[30,0,33,37,39,40,28,32,27,23],
[21,18,0,25,24,24,24,26,19,27],
[22,14,26,0,31,21,31,13,18,14],
[19,12,27,20,0,19,22,19,19,16],
[21,11,27,30,32,0,20,22,29,13],
[23,23,27,20,29,31,0,27,23,21],
[23,19,25,38,32,29,24,0,23,14],
[31,24,32,33,32,22,28,28,0,28],
[25,28,24,37,35,38,30,37,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,23,20,22,21,25,26,18,20],
[28,0,24,25,20,25,27,28,20,26],
[28,27,0,23,26,31,28,29,27,27],
[31,26,28,0,22,33,29,29,22,27],
[29,31,25,29,0,28,29,37,24,27],
[30,26,20,18,23,0,28,28,23,18],
[26,24,23,22,22,23,0,32,21,25],
[25,23,22,22,14,23,19,0,17,19],
[33,31,24,29,27,28,30,34,0,28],
[31,25,24,24,24,33,26,32,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,24,29,36,36,32,36,13,32],
[22,0,15,12,22,17,13,12,3,5],
[27,36,0,25,36,36,18,15,10,18],
[22,39,26,0,39,39,24,12,10,18],
[15,29,15,12,0,29,13,19,13,21],
[15,34,15,12,22,0,13,22,3,23],
[19,38,33,27,38,38,0,27,30,27],
[15,39,36,39,32,29,24,0,13,42],
[38,48,41,41,38,48,21,38,0,41],
[19,46,33,33,30,28,24,9,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,28,19,24,25,28,18,21,25],
[30,0,24,21,26,27,32,25,21,27],
[23,27,0,23,23,25,27,23,20,23],
[32,30,28,0,20,25,28,21,22,24],
[27,25,28,31,0,30,35,28,26,23],
[26,24,26,26,21,0,26,21,18,23],
[23,19,24,23,16,25,0,15,18,20],
[33,26,28,30,23,30,36,0,21,25],
[30,30,31,29,25,33,33,30,0,30],
[26,24,28,27,28,28,31,26,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,28,29,24,27,23,25,32,33],
[22,0,15,20,23,21,22,21,29,30],
[23,36,0,25,27,26,28,26,30,32],
[22,31,26,0,27,26,25,19,27,26],
[27,28,24,24,0,25,23,29,30,30],
[24,30,25,25,26,0,27,28,31,31],
[28,29,23,26,28,24,0,20,27,32],
[26,30,25,32,22,23,31,0,32,33],
[19,22,21,24,21,20,24,19,0,27],
[18,21,19,25,21,20,19,18,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,15,20,20,19,11,17,13,26],
[35,0,17,22,10,23,13,9,14,19],
[36,34,0,29,26,22,18,31,22,33],
[31,29,22,0,28,32,36,12,19,16],
[31,41,25,23,0,36,16,24,16,29],
[32,28,29,19,15,0,18,22,7,21],
[40,38,33,15,35,33,0,24,22,30],
[34,42,20,39,27,29,27,0,27,39],
[38,37,29,32,35,44,29,24,0,26],
[25,32,18,35,22,30,21,12,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,20,19,26,25,23,33,37,33],
[18,0,19,27,16,18,20,27,33,24],
[31,32,0,29,25,32,26,29,40,28],
[32,24,22,0,20,21,25,27,39,27],
[25,35,26,31,0,20,24,28,37,28],
[26,33,19,30,31,0,18,27,36,27],
[28,31,25,26,27,33,0,28,42,36],
[18,24,22,24,23,24,23,0,30,25],
[14,18,11,12,14,15,9,21,0,13],
[18,27,23,24,23,24,15,26,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,27,32,21,28,27,27,22,21],
[20,0,22,32,28,24,28,31,28,21],
[24,29,0,29,20,20,21,26,23,16],
[19,19,22,0,24,24,25,20,21,18],
[30,23,31,27,0,29,30,30,23,24],
[23,27,31,27,22,0,21,26,19,18],
[24,23,30,26,21,30,0,29,20,30],
[24,20,25,31,21,25,22,0,26,23],
[29,23,28,30,28,32,31,25,0,26],
[30,30,35,33,27,33,21,28,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,25,35,16,21,23,21,21,29],
[21,0,22,20,11,15,18,29,16,23],
[26,29,0,30,26,19,26,32,22,37],
[16,31,21,0,16,17,16,30,20,29],
[35,40,25,35,0,21,31,26,21,40],
[30,36,32,34,30,0,23,29,26,31],
[28,33,25,35,20,28,0,28,27,24],
[30,22,19,21,25,22,23,0,26,35],
[30,35,29,31,30,25,24,25,0,33],
[22,28,14,22,11,20,27,16,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,30,34,31,31,34,23,28,30],
[20,0,23,26,25,26,27,26,21,22],
[21,28,0,27,27,22,33,22,27,27],
[17,25,24,0,16,25,29,21,20,24],
[20,26,24,35,0,30,31,23,23,32],
[20,25,29,26,21,0,27,20,18,25],
[17,24,18,22,20,24,0,19,23,23],
[28,25,29,30,28,31,32,0,30,29],
[23,30,24,31,28,33,28,21,0,29],
[21,29,24,27,19,26,28,22,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,42,34,25,34,25,29,31,29],
[23,0,39,37,24,35,27,23,36,24],
[9,12,0,19,18,18,15,13,16,11],
[17,14,32,0,21,24,26,21,29,20],
[26,27,33,30,0,24,19,29,31,30],
[17,16,33,27,27,0,22,18,27,27],
[26,24,36,25,32,29,0,24,28,32],
[22,28,38,30,22,33,27,0,40,29],
[20,15,35,22,20,24,23,11,0,20],
[22,27,40,31,21,24,19,22,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,27,29,30,23,27,25,30,29],
[29,0,29,23,28,27,28,26,30,30],
[24,22,0,22,27,27,32,24,27,29],
[22,28,29,0,30,25,31,24,29,27],
[21,23,24,21,0,25,27,25,24,27],
[28,24,24,26,26,0,30,25,26,23],
[24,23,19,20,24,21,0,23,26,21],
[26,25,27,27,26,26,28,0,24,25],
[21,21,24,22,27,25,25,27,0,23],
[22,21,22,24,24,28,30,26,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,23,19,32,26,31,18,19,35],
[27,0,26,27,30,29,18,18,30,36],
[28,25,0,14,30,13,21,10,14,28],
[32,24,37,0,34,24,23,24,28,27],
[19,21,21,17,0,24,15,16,17,25],
[25,22,38,27,27,0,15,27,27,28],
[20,33,30,28,36,36,0,33,28,28],
[33,33,41,27,35,24,18,0,20,28],
[32,21,37,23,34,24,23,31,0,32],
[16,15,23,24,26,23,23,23,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,17,26,23,17,31,21,18,26],
[25,0,21,28,27,27,32,24,23,35],
[34,30,0,31,35,24,38,26,33,37],
[25,23,20,0,24,19,29,23,25,21],
[28,24,16,27,0,21,30,24,26,28],
[34,24,27,32,30,0,34,28,24,31],
[20,19,13,22,21,17,0,24,17,24],
[30,27,25,28,27,23,27,0,29,33],
[33,28,18,26,25,27,34,22,0,32],
[25,16,14,30,23,20,27,18,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,35,26,27,30,30,15,34,30],
[19,0,31,18,19,27,11,19,30,26],
[16,20,0,16,16,19,20,8,28,16],
[25,33,35,0,25,27,25,12,32,12],
[24,32,35,26,0,19,20,30,38,30],
[21,24,32,24,32,0,17,27,32,27],
[21,40,31,26,31,34,0,23,34,19],
[36,32,43,39,21,24,28,0,36,31],
[17,21,23,19,13,19,17,15,0,19],
[21,25,35,39,21,24,32,20,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,20,21,21,23,25,25,29,21],
[27,0,20,21,25,24,25,18,27,23],
[31,31,0,27,26,26,29,33,32,23],
[30,30,24,0,34,33,27,29,36,31],
[30,26,25,17,0,30,31,30,33,24],
[28,27,25,18,21,0,30,25,32,24],
[26,26,22,24,20,21,0,24,27,29],
[26,33,18,22,21,26,27,0,30,22],
[22,24,19,15,18,19,24,21,0,18],
[30,28,28,20,27,27,22,29,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,29,25,32,30,24,26,29,34],
[28,0,31,27,27,26,29,31,23,32],
[22,20,0,20,21,22,23,21,26,19],
[26,24,31,0,31,27,28,33,26,31],
[19,24,30,20,0,29,26,25,21,27],
[21,25,29,24,22,0,30,26,31,26],
[27,22,28,23,25,21,0,27,29,28],
[25,20,30,18,26,25,24,0,31,29],
[22,28,25,25,30,20,22,20,0,27],
[17,19,32,20,24,25,23,22,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,19,26,24,26,33,26,22,23],
[25,0,27,30,26,26,33,27,27,31],
[32,24,0,28,30,27,31,24,23,27],
[25,21,23,0,21,20,29,17,19,28],
[27,25,21,30,0,21,29,24,25,27],
[25,25,24,31,30,0,26,20,24,28],
[18,18,20,22,22,25,0,24,19,22],
[25,24,27,34,27,31,27,0,25,27],
[29,24,28,32,26,27,32,26,0,34],
[28,20,24,23,24,23,29,24,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,15,24,24,22,27,18,29,11],
[23,0,24,20,25,25,32,25,24,14],
[36,27,0,26,27,26,33,25,28,32],
[27,31,25,0,24,28,34,21,29,20],
[27,26,24,27,0,30,30,24,24,22],
[29,26,25,23,21,0,37,21,19,24],
[24,19,18,17,21,14,0,15,18,17],
[33,26,26,30,27,30,36,0,23,22],
[22,27,23,22,27,32,33,28,0,20],
[40,37,19,31,29,27,34,29,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,24,28,21,24,22,29,28,20],
[35,0,26,30,25,23,26,28,22,21],
[27,25,0,29,26,25,24,29,27,23],
[23,21,22,0,26,22,26,30,23,22],
[30,26,25,25,0,22,26,31,24,24],
[27,28,26,29,29,0,26,30,26,25],
[29,25,27,25,25,25,0,30,23,24],
[22,23,22,21,20,21,21,0,23,25],
[23,29,24,28,27,25,28,28,0,28],
[31,30,28,29,27,26,27,26,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,25,33,27,47,28,31,25,31],
[11,0,12,25,20,21,18,21,24,13],
[26,39,0,33,33,37,24,38,33,41],
[18,26,18,0,23,27,31,23,36,23],
[24,31,18,28,0,23,9,21,29,18],
[4,30,14,24,28,0,13,30,25,16],
[23,33,27,20,42,38,0,40,30,33],
[20,30,13,28,30,21,11,0,29,33],
[26,27,18,15,22,26,21,22,0,18],
[20,38,10,28,33,35,18,18,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,26,25,31,31,40,41,33,26],
[19,0,29,21,23,29,24,29,26,10],
[25,22,0,24,21,31,35,42,22,15],
[26,30,27,0,29,27,30,30,27,16],
[20,28,30,22,0,27,33,32,27,16],
[20,22,20,24,24,0,29,31,24,9],
[11,27,16,21,18,22,0,30,24,8],
[10,22,9,21,19,20,21,0,18,7],
[18,25,29,24,24,27,27,33,0,14],
[25,41,36,35,35,42,43,44,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,24,31,16,32,26,20,18,22],
[16,0,16,30,20,29,23,21,21,16],
[27,35,0,35,29,35,34,19,13,18],
[20,21,16,0,18,22,21,10,10,14],
[35,31,22,33,0,28,34,17,17,12],
[19,22,16,29,23,0,31,7,11,16],
[25,28,17,30,17,20,0,8,14,10],
[31,30,32,41,34,44,43,0,20,33],
[33,30,38,41,34,40,37,31,0,25],
[29,35,33,37,39,35,41,18,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,32,23,32,28,29,38,26,28],
[26,0,31,21,35,24,35,32,25,19],
[19,20,0,20,25,24,29,33,29,19],
[28,30,31,0,27,27,32,34,28,19],
[19,16,26,24,0,30,34,40,29,22],
[23,27,27,24,21,0,31,33,28,17],
[22,16,22,19,17,20,0,28,21,17],
[13,19,18,17,11,18,23,0,22,18],
[25,26,22,23,22,23,30,29,0,15],
[23,32,32,32,29,34,34,33,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,26,32,30,30,27,22,23,33],
[27,0,30,38,27,33,24,33,23,30],
[25,21,0,31,24,29,29,25,18,26],
[19,13,20,0,25,22,23,26,17,23],
[21,24,27,26,0,27,23,34,19,31],
[21,18,22,29,24,0,24,26,26,31],
[24,27,22,28,28,27,0,27,19,30],
[29,18,26,25,17,25,24,0,14,23],
[28,28,33,34,32,25,32,37,0,32],
[18,21,25,28,20,20,21,28,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,30,10,24,28,18,31,34,21],
[22,0,32,23,20,29,27,37,23,23],
[21,19,0,12,10,23,18,24,32,17],
[41,28,39,0,26,31,19,37,32,31],
[27,31,41,25,0,37,22,40,41,34],
[23,22,28,20,14,0,25,26,28,21],
[33,24,33,32,29,26,0,34,30,31],
[20,14,27,14,11,25,17,0,25,28],
[17,28,19,19,10,23,21,26,0,20],
[30,28,34,20,17,30,20,23,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,25,27,25,24,32,24,33,26],
[23,0,22,19,24,28,21,18,21,22],
[26,29,0,34,25,34,28,22,28,29],
[24,32,17,0,29,26,18,23,22,27],
[26,27,26,22,0,22,25,29,25,26],
[27,23,17,25,29,0,22,27,18,26],
[19,30,23,33,26,29,0,27,30,22],
[27,33,29,28,22,24,24,0,30,26],
[18,30,23,29,26,33,21,21,0,31],
[25,29,22,24,25,25,29,25,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,35,29,27,29,22,30,31,24],
[29,0,29,30,25,28,29,29,30,27],
[16,22,0,24,22,26,23,25,23,21],
[22,21,27,0,26,25,19,25,20,23],
[24,26,29,25,0,25,22,24,27,27],
[22,23,25,26,26,0,22,26,25,25],
[29,22,28,32,29,29,0,31,29,24],
[21,22,26,26,27,25,20,0,27,24],
[20,21,28,31,24,26,22,24,0,22],
[27,24,30,28,24,26,27,27,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,34,20,27,5,18,16,5,25],
[46,0,44,51,27,38,49,49,24,47],
[17,7,0,7,29,7,7,7,7,14],
[31,0,44,0,25,33,17,0,3,22],
[24,24,22,26,0,26,27,24,12,31],
[46,13,44,18,25,0,18,16,3,35],
[33,2,44,34,24,33,0,34,9,19],
[35,2,44,51,27,35,17,0,26,24],
[46,27,44,48,39,48,42,25,0,32],
[26,4,37,29,20,16,32,27,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,22,24,24,25,23,22,22,24],
[34,0,26,29,30,31,27,24,24,30],
[29,25,0,28,29,28,26,22,22,32],
[27,22,23,0,23,30,26,24,19,26],
[27,21,22,28,0,29,24,25,26,26],
[26,20,23,21,22,0,22,18,19,21],
[28,24,25,25,27,29,0,24,24,30],
[29,27,29,27,26,33,27,0,27,25],
[29,27,29,32,25,32,27,24,0,31],
[27,21,19,25,25,30,21,26,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,21,29,21,32,26,28,20,29],
[29,0,24,32,26,31,31,24,27,30],
[30,27,0,28,26,25,26,24,23,23],
[22,19,23,0,22,27,26,21,20,23],
[30,25,25,29,0,34,29,26,27,29],
[19,20,26,24,17,0,25,19,18,23],
[25,20,25,25,22,26,0,24,24,24],
[23,27,27,30,25,32,27,0,24,29],
[31,24,28,31,24,33,27,27,0,34],
[22,21,28,28,22,28,27,22,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,22,21,20,25,29,15,32,28],
[23,0,26,24,22,25,30,19,31,25],
[29,25,0,29,26,29,34,27,27,23],
[30,27,22,0,31,28,33,28,36,33],
[31,29,25,20,0,27,34,24,37,30],
[26,26,22,23,24,0,26,14,31,21],
[22,21,17,18,17,25,0,12,30,20],
[36,32,24,23,27,37,39,0,35,30],
[19,20,24,15,14,20,21,16,0,17],
[23,26,28,18,21,30,31,21,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,17,21,21,19,20,20,19,16],
[31,0,22,25,23,29,28,26,27,22],
[34,29,0,23,26,23,32,29,23,26],
[30,26,28,0,26,24,24,26,19,26],
[30,28,25,25,0,28,27,25,26,22],
[32,22,28,27,23,0,32,28,23,22],
[31,23,19,27,24,19,0,24,24,17],
[31,25,22,25,26,23,27,0,27,27],
[32,24,28,32,25,28,27,24,0,20],
[35,29,25,25,29,29,34,24,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,45,33,22,31,25,24,32,20],
[19,0,24,16,20,31,11,23,22,25],
[6,27,0,16,10,13,6,16,18,13],
[18,35,35,0,24,26,16,39,32,29],
[29,31,41,27,0,35,26,40,41,24],
[20,20,38,25,16,0,15,20,25,14],
[26,40,45,35,25,36,0,42,40,34],
[27,28,35,12,11,31,9,0,24,17],
[19,29,33,19,10,26,11,27,0,17],
[31,26,38,22,27,37,17,34,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,28,25,30,24,26,25,28,27],
[21,0,19,21,26,20,31,25,31,30],
[23,32,0,20,28,23,29,24,31,28],
[26,30,31,0,29,27,30,25,24,31],
[21,25,23,22,0,20,29,24,28,31],
[27,31,28,24,31,0,24,27,28,23],
[25,20,22,21,22,27,0,25,35,26],
[26,26,27,26,27,24,26,0,31,28],
[23,20,20,27,23,23,16,20,0,30],
[24,21,23,20,20,28,25,23,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,20,27,31,29,21,26,24,24],
[27,0,23,29,42,31,23,37,18,31],
[31,28,0,22,32,24,26,22,27,22],
[24,22,29,0,37,28,18,23,22,20],
[20,9,19,14,0,20,20,28,21,20],
[22,20,27,23,31,0,23,21,19,25],
[30,28,25,33,31,28,0,33,28,26],
[25,14,29,28,23,30,18,0,19,28],
[27,33,24,29,30,32,23,32,0,28],
[27,20,29,31,31,26,25,23,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,29,21,15,0,0,12,16,0],
[51,0,33,33,15,29,26,12,30,26],
[22,18,0,39,15,18,14,0,18,14],
[30,18,12,0,15,30,14,12,30,26],
[36,36,36,36,0,18,18,0,22,28],
[51,22,33,21,33,0,18,30,44,18],
[51,25,37,37,33,33,0,29,51,33],
[39,39,51,39,51,21,22,0,37,39],
[35,21,33,21,29,7,0,14,0,14],
[51,25,37,25,23,33,18,12,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,24,26,20,25,24,19,17,24],
[28,0,26,26,23,20,21,21,20,22],
[27,25,0,27,28,30,24,28,28,23],
[25,25,24,0,21,24,21,21,21,25],
[31,28,23,30,0,29,25,28,22,28],
[26,31,21,27,22,0,21,21,20,21],
[27,30,27,30,26,30,0,26,27,24],
[32,30,23,30,23,30,25,0,27,25],
[34,31,23,30,29,31,24,24,0,27],
[27,29,28,26,23,30,27,26,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,32,17,26,18,9,27,11,14],
[38,0,39,25,38,19,25,29,18,28],
[19,12,0,11,16,19,10,11,16,17],
[34,26,40,0,39,31,28,29,23,31],
[25,13,35,12,0,24,22,22,23,25],
[33,32,32,20,27,0,19,31,19,16],
[42,26,41,23,29,32,0,35,18,24],
[24,22,40,22,29,20,16,0,13,19],
[40,33,35,28,28,32,33,38,0,22],
[37,23,34,20,26,35,27,32,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,16,21,19,12,9,32,30,13],
[12,0,12,30,12,14,19,24,30,12],
[35,39,0,29,11,30,18,30,42,23],
[30,21,22,0,31,31,30,14,24,24],
[32,39,40,20,0,21,21,30,33,15],
[39,37,21,20,30,0,24,32,42,31],
[42,32,33,21,30,27,0,30,40,33],
[19,27,21,37,21,19,21,0,32,12],
[21,21,9,27,18,9,11,19,0,9],
[38,39,28,27,36,20,18,39,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,41,35,41,29,33,43,22,31],
[17,0,36,17,9,9,16,24,17,17],
[10,15,0,2,10,23,2,11,2,23],
[16,34,49,0,9,29,7,37,21,29],
[10,42,41,42,0,38,21,43,23,23],
[22,42,28,22,13,0,21,30,10,23],
[18,35,49,44,30,30,0,39,31,31],
[8,27,40,14,8,21,12,0,13,29],
[29,34,49,30,28,41,20,38,0,32],
[20,34,28,22,28,28,20,22,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,13,19,25,15,11,15,25,36],
[35,0,22,43,40,28,21,24,50,43],
[38,29,0,27,25,28,20,20,36,43],
[32,8,24,0,16,32,23,26,35,37],
[26,11,26,35,0,20,20,28,34,28],
[36,23,23,19,31,0,20,8,26,36],
[40,30,31,28,31,31,0,16,34,37],
[36,27,31,25,23,43,35,0,26,42],
[26,1,15,16,17,25,17,25,0,29],
[15,8,8,14,23,15,14,9,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,25,21,30,22,26,15,36,29],
[19,0,29,30,23,17,14,15,29,26],
[26,22,0,15,22,20,25,12,26,25],
[30,21,36,0,27,20,29,26,30,30],
[21,28,29,24,0,24,21,18,25,31],
[29,34,31,31,27,0,27,22,30,24],
[25,37,26,22,30,24,0,19,40,33],
[36,36,39,25,33,29,32,0,36,34],
[15,22,25,21,26,21,11,15,0,27],
[22,25,26,21,20,27,18,17,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,23,25,23,26,23,20,25,24],
[28,0,23,27,27,28,24,27,27,27],
[28,28,0,27,25,32,27,28,30,33],
[26,24,24,0,26,29,25,27,22,27],
[28,24,26,25,0,28,27,24,25,30],
[25,23,19,22,23,0,23,24,23,25],
[28,27,24,26,24,28,0,26,25,27],
[31,24,23,24,27,27,25,0,26,28],
[26,24,21,29,26,28,26,25,0,28],
[27,24,18,24,21,26,24,23,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,36,26,26,22,27,30,32,33],
[20,0,26,18,12,21,29,30,29,30],
[15,25,0,21,16,24,15,26,32,23],
[25,33,30,0,26,25,28,34,34,31],
[25,39,35,25,0,29,34,35,40,32],
[29,30,27,26,22,0,26,28,33,26],
[24,22,36,23,17,25,0,33,26,20],
[21,21,25,17,16,23,18,0,21,24],
[19,22,19,17,11,18,25,30,0,21],
[18,21,28,20,19,25,31,27,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,22,28,26,21,15,22,25,21],
[26,0,24,26,27,25,20,30,27,22],
[29,27,0,32,27,28,22,27,28,29],
[23,25,19,0,25,28,15,23,19,21],
[25,24,24,26,0,31,26,30,29,24],
[30,26,23,23,20,0,17,28,30,25],
[36,31,29,36,25,34,0,35,32,28],
[29,21,24,28,21,23,16,0,26,19],
[26,24,23,32,22,21,19,25,0,18],
[30,29,22,30,27,26,23,32,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,29,38,30,29,27,36,22,33],
[20,0,23,27,26,24,23,33,18,25],
[22,28,0,41,27,23,22,30,19,32],
[13,24,10,0,18,23,24,26,15,26],
[21,25,24,33,0,20,21,26,17,31],
[22,27,28,28,31,0,24,32,27,29],
[24,28,29,27,30,27,0,35,21,29],
[15,18,21,25,25,19,16,0,13,27],
[29,33,32,36,34,24,30,38,0,29],
[18,26,19,25,20,22,22,24,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,23,23,18,20,22,21,26,21],
[26,0,29,22,24,25,26,26,23,27],
[28,22,0,27,30,23,30,21,27,23],
[28,29,24,0,26,18,26,26,28,24],
[33,27,21,25,0,26,26,27,23,26],
[31,26,28,33,25,0,28,30,27,26],
[29,25,21,25,25,23,0,25,29,27],
[30,25,30,25,24,21,26,0,22,24],
[25,28,24,23,28,24,22,29,0,23],
[30,24,28,27,25,25,24,27,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,35,35,35,28,12,12,12,28],
[16,0,39,0,39,16,16,16,0,16],
[16,12,0,0,39,16,16,16,0,28],
[16,51,51,0,51,28,28,28,28,28],
[16,12,12,0,0,28,12,12,12,28],
[23,35,35,23,23,0,23,23,35,35],
[39,35,35,23,39,28,0,39,12,28],
[39,35,35,23,39,28,12,0,12,28],
[39,51,51,23,39,16,39,39,0,51],
[23,35,23,23,23,16,23,23,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,22,29,20,33,25,25,23,27],
[28,0,30,26,30,29,25,30,26,24],
[29,21,0,29,22,30,24,28,27,20],
[22,25,22,0,21,27,25,27,21,23],
[31,21,29,30,0,29,28,32,28,24],
[18,22,21,24,22,0,24,26,20,18],
[26,26,27,26,23,27,0,27,26,26],
[26,21,23,24,19,25,24,0,20,21],
[28,25,24,30,23,31,25,31,0,26],
[24,27,31,28,27,33,25,30,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,21,12,18,13,13,8,34,21],
[31,0,30,13,14,30,28,26,28,26],
[30,21,0,18,18,18,25,10,19,18],
[39,38,33,0,18,35,35,13,30,33],
[33,37,33,33,0,27,23,24,26,31],
[38,21,33,16,24,0,26,18,43,31],
[38,23,26,16,28,25,0,12,28,28],
[43,25,41,38,27,33,39,0,26,26],
[17,23,32,21,25,8,23,25,0,20],
[30,25,33,18,20,20,23,25,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,20,30,10,20,28,35,21,10],
[24,0,23,26,13,26,21,21,31,23],
[31,28,0,41,30,48,28,28,21,38],
[21,25,10,0,13,21,38,25,31,18],
[41,38,21,38,0,51,28,35,21,35],
[31,25,3,30,0,0,28,25,21,10],
[23,30,23,13,23,23,0,30,23,10],
[16,30,23,26,16,26,21,0,31,10],
[30,20,30,20,30,30,28,20,0,30],
[41,28,13,33,16,41,41,41,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,23,28,18,32,25,27,26],
[26,0,26,23,25,24,27,23,17,25],
[26,25,0,20,22,21,22,20,27,25],
[28,28,31,0,27,21,30,24,26,27],
[23,26,29,24,0,20,29,30,29,22],
[33,27,30,30,31,0,25,34,31,26],
[19,24,29,21,22,26,0,26,23,28],
[26,28,31,27,21,17,25,0,26,23],
[24,34,24,25,22,20,28,25,0,29],
[25,26,26,24,29,25,23,28,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,22,28,23,24,29,25,20,28],
[28,0,25,28,27,27,32,30,29,31],
[29,26,0,29,25,35,33,30,26,27],
[23,23,22,0,29,27,32,26,27,23],
[28,24,26,22,0,31,28,28,26,27],
[27,24,16,24,20,0,29,25,25,21],
[22,19,18,19,23,22,0,23,20,20],
[26,21,21,25,23,26,28,0,26,27],
[31,22,25,24,25,26,31,25,0,27],
[23,20,24,28,24,30,31,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,34,35,27,23,26,33,26,34],
[25,0,26,27,15,22,26,14,20,16],
[17,25,0,25,19,22,25,17,19,24],
[16,24,26,0,21,8,18,17,21,28],
[24,36,32,30,0,19,21,29,29,27],
[28,29,29,43,32,0,25,21,37,28],
[25,25,26,33,30,26,0,22,24,24],
[18,37,34,34,22,30,29,0,37,42],
[25,31,32,30,22,14,27,14,0,12],
[17,35,27,23,24,23,27,9,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,17,28,22,29,17,21,25,26],
[23,0,18,25,18,20,17,23,27,20],
[34,33,0,32,20,36,26,32,29,32],
[23,26,19,0,17,26,22,21,25,24],
[29,33,31,34,0,31,24,36,25,28],
[22,31,15,25,20,0,17,31,26,18],
[34,34,25,29,27,34,0,38,34,35],
[30,28,19,30,15,20,13,0,24,24],
[26,24,22,26,26,25,17,27,0,30],
[25,31,19,27,23,33,16,27,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,17,30,6,38,41,38,16,28],
[30,0,17,30,30,40,43,40,18,43],
[34,34,0,35,35,39,31,39,21,35],
[21,21,16,0,19,26,28,27,19,14],
[45,21,16,32,0,39,42,50,28,32],
[13,11,12,25,12,0,40,36,15,24],
[10,8,20,23,9,11,0,11,11,22],
[13,11,12,24,1,15,40,0,1,12],
[35,33,30,32,23,36,40,50,0,44],
[23,8,16,37,19,27,29,39,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,35,25,31,32,28,29,34,34],
[18,0,20,16,19,22,19,21,28,29],
[16,31,0,20,25,24,18,17,23,26],
[26,35,31,0,32,30,27,24,29,32],
[20,32,26,19,0,28,25,26,26,26],
[19,29,27,21,23,0,22,21,30,35],
[23,32,33,24,26,29,0,23,29,36],
[22,30,34,27,25,30,28,0,33,35],
[17,23,28,22,25,21,22,18,0,32],
[17,22,25,19,25,16,15,16,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,20,32,24,21,24,26,25,29],
[26,0,24,28,26,21,26,27,24,30],
[31,27,0,30,27,26,26,27,23,30],
[19,23,21,0,17,16,23,25,19,22],
[27,25,24,34,0,24,21,31,26,26],
[30,30,25,35,27,0,23,28,25,30],
[27,25,25,28,30,28,0,29,31,27],
[25,24,24,26,20,23,22,0,25,28],
[26,27,28,32,25,26,20,26,0,24],
[22,21,21,29,25,21,24,23,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,51,20,41,51,41,20,51,51],
[10,0,10,30,10,10,20,10,10,10],
[0,41,0,20,0,10,20,20,10,41],
[31,21,31,0,21,31,21,21,31,31],
[10,41,51,30,0,10,20,30,30,51],
[0,41,41,20,41,0,41,20,51,41],
[10,31,31,30,31,10,0,10,31,31],
[31,41,31,30,21,31,41,0,31,51],
[0,41,41,20,21,0,20,20,0,41],
[0,41,10,20,0,10,20,0,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,18,41,33,8,36,38,15,30],
[27,0,38,30,32,29,33,46,21,28],
[33,13,0,30,35,21,42,37,17,21],
[10,21,21,0,10,12,32,37,9,14],
[18,19,16,41,0,9,32,38,20,16],
[43,22,30,39,42,0,38,37,26,31],
[15,18,9,19,19,13,0,28,8,22],
[13,5,14,14,13,14,23,0,14,6],
[36,30,34,42,31,25,43,37,0,33],
[21,23,30,37,35,20,29,45,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,35,22,29,30,31,30,25,27],
[26,0,26,23,31,24,33,30,21,21],
[16,25,0,22,28,31,30,28,26,26],
[29,28,29,0,27,30,37,37,34,22],
[22,20,23,24,0,28,32,28,29,27],
[21,27,20,21,23,0,27,26,22,20],
[20,18,21,14,19,24,0,23,20,24],
[21,21,23,14,23,25,28,0,24,23],
[26,30,25,17,22,29,31,27,0,22],
[24,30,25,29,24,31,27,28,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,24,32,29,30,28,27,26,33],
[24,0,27,33,32,30,25,24,30,27],
[27,24,0,31,26,28,28,26,26,27],
[19,18,20,0,23,27,22,21,19,21],
[22,19,25,28,0,26,20,21,24,20],
[21,21,23,24,25,0,22,23,20,22],
[23,26,23,29,31,29,0,25,27,29],
[24,27,25,30,30,28,26,0,29,29],
[25,21,25,32,27,31,24,22,0,27],
[18,24,24,30,31,29,22,22,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,30,26,26,30,27,26,26,27],
[26,0,30,24,32,33,29,23,29,26],
[21,21,0,24,25,29,27,24,28,24],
[25,27,27,0,29,30,30,26,31,27],
[25,19,26,22,0,27,23,26,24,28],
[21,18,22,21,24,0,25,22,25,26],
[24,22,24,21,28,26,0,25,26,25],
[25,28,27,25,25,29,26,0,25,25],
[25,22,23,20,27,26,25,26,0,31],
[24,25,27,24,23,25,26,26,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,15,14,28,21,26,21,17,23],
[26,0,19,21,21,29,24,27,24,22],
[36,32,0,26,30,27,34,25,28,33],
[37,30,25,0,32,28,33,29,23,27],
[23,30,21,19,0,29,31,26,24,28],
[30,22,24,23,22,0,28,13,18,19],
[25,27,17,18,20,23,0,16,15,19],
[30,24,26,22,25,38,35,0,24,21],
[34,27,23,28,27,33,36,27,0,34],
[28,29,18,24,23,32,32,30,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,30,32,24,41,43,36,35,28],
[11,0,8,28,13,29,25,25,24,23],
[21,43,0,30,32,35,33,35,36,32],
[19,23,21,0,26,29,27,22,31,26],
[27,38,19,25,0,38,28,27,34,29],
[10,22,16,22,13,0,21,27,22,23],
[8,26,18,24,23,30,0,20,34,19],
[15,26,16,29,24,24,31,0,32,19],
[16,27,15,20,17,29,17,19,0,22],
[23,28,19,25,22,28,32,32,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,22,26,27,24,26,29,33,21],
[23,0,21,20,20,19,18,28,28,22],
[29,30,0,23,27,24,24,27,33,23],
[25,31,28,0,21,23,23,27,28,21],
[24,31,24,30,0,22,23,27,35,26],
[27,32,27,28,29,0,19,32,30,25],
[25,33,27,28,28,32,0,30,36,21],
[22,23,24,24,24,19,21,0,33,18],
[18,23,18,23,16,21,15,18,0,16],
[30,29,28,30,25,26,30,33,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,31,23,46,23,23,23,23,8],
[20,0,51,23,23,28,23,23,28,28],
[20,0,0,15,15,28,23,15,28,20],
[28,28,36,0,28,13,31,36,51,28],
[5,28,36,23,0,28,23,23,28,13],
[28,23,23,38,23,0,31,23,51,28],
[28,28,28,20,28,20,0,43,51,28],
[28,28,36,15,28,28,8,0,51,5],
[28,23,23,0,23,0,0,0,0,0],
[43,23,31,23,38,23,23,46,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,23,45,44,36,39,39,30,38],
[9,0,17,23,33,24,23,25,16,25],
[28,34,0,31,28,31,24,40,37,38],
[6,28,20,0,21,21,18,24,20,24],
[7,18,23,30,0,19,24,29,15,24],
[15,27,20,30,32,0,20,27,21,21],
[12,28,27,33,27,31,0,30,29,30],
[12,26,11,27,22,24,21,0,13,24],
[21,35,14,31,36,30,22,38,0,31],
[13,26,13,27,27,30,21,27,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,17,14,27,35,26,21,23,27],
[29,0,23,22,26,34,25,26,27,26],
[34,28,0,24,30,25,31,26,33,26],
[37,29,27,0,29,36,34,31,24,28],
[24,25,21,22,0,32,24,27,27,17],
[16,17,26,15,19,0,14,26,21,11],
[25,26,20,17,27,37,0,25,28,25],
[30,25,25,20,24,25,26,0,23,16],
[28,24,18,27,24,30,23,28,0,26],
[24,25,25,23,34,40,26,35,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,19,21,25,24,27,23,21,26],
[21,0,22,27,24,27,26,20,28,21],
[32,29,0,30,31,28,30,26,25,28],
[30,24,21,0,29,25,24,19,23,24],
[26,27,20,22,0,27,27,26,21,23],
[27,24,23,26,24,0,26,27,26,21],
[24,25,21,27,24,25,0,22,29,24],
[28,31,25,32,25,24,29,0,29,25],
[30,23,26,28,30,25,22,22,0,24],
[25,30,23,27,28,30,27,26,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,25,27,25,24,29,24,25,28],
[22,0,36,25,32,28,30,29,30,29],
[26,15,0,25,18,19,23,22,23,28],
[24,26,26,0,23,22,24,29,21,28],
[26,19,33,28,0,24,34,25,28,27],
[27,23,32,29,27,0,32,23,30,29],
[22,21,28,27,17,19,0,20,27,26],
[27,22,29,22,26,28,31,0,24,26],
[26,21,28,30,23,21,24,27,0,27],
[23,22,23,23,24,22,25,25,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,27,29,23,17,29,22,26,24],
[26,0,22,26,21,22,27,22,19,26],
[24,29,0,27,18,17,19,23,22,26],
[22,25,24,0,23,23,26,24,22,26],
[28,30,33,28,0,27,26,28,25,28],
[34,29,34,28,24,0,26,31,30,32],
[22,24,32,25,25,25,0,20,22,28],
[29,29,28,27,23,20,31,0,22,30],
[25,32,29,29,26,21,29,29,0,29],
[27,25,25,25,23,19,23,21,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,32,30,34,31,32,24,27,22],
[24,0,27,30,30,25,28,28,27,22],
[19,24,0,31,27,23,25,19,23,21],
[21,21,20,0,27,23,21,19,24,21],
[17,21,24,24,0,22,21,23,23,20],
[20,26,28,28,29,0,27,25,30,29],
[19,23,26,30,30,24,0,24,19,23],
[27,23,32,32,28,26,27,0,24,29],
[24,24,28,27,28,21,32,27,0,24],
[29,29,30,30,31,22,28,22,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,32,29,29,26,31,24,30,28],
[24,0,27,22,20,24,25,26,19,19],
[19,24,0,22,22,27,33,18,22,21],
[22,29,29,0,25,26,29,21,26,23],
[22,31,29,26,0,29,36,29,30,26],
[25,27,24,25,22,0,27,22,22,21],
[20,26,18,22,15,24,0,18,18,20],
[27,25,33,30,22,29,33,0,25,22],
[21,32,29,25,21,29,33,26,0,24],
[23,32,30,28,25,30,31,29,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,28,19,13,15,22,18,20,21],
[25,0,29,20,19,20,20,23,20,32],
[23,22,0,18,19,22,22,19,22,25],
[32,31,33,0,24,36,35,33,27,33],
[38,32,32,27,0,29,28,31,16,27],
[36,31,29,15,22,0,28,32,22,30],
[29,31,29,16,23,23,0,26,23,21],
[33,28,32,18,20,19,25,0,16,21],
[31,31,29,24,35,29,28,35,0,26],
[30,19,26,18,24,21,30,30,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,24,18,19,18,23,17,17,15],
[28,0,30,25,26,27,24,28,28,25],
[27,21,0,25,23,27,25,31,25,23],
[33,26,26,0,23,23,26,29,27,16],
[32,25,28,28,0,30,23,33,29,27],
[33,24,24,28,21,0,25,20,26,20],
[28,27,26,25,28,26,0,24,26,22],
[34,23,20,22,18,31,27,0,27,22],
[34,23,26,24,22,25,25,24,0,28],
[36,26,28,35,24,31,29,29,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,22,26,20,29,28,30,24,30],
[27,0,25,26,23,26,26,24,29,30],
[29,26,0,28,26,22,28,24,26,27],
[25,25,23,0,23,30,20,22,25,31],
[31,28,25,28,0,26,28,30,23,30],
[22,25,29,21,25,0,25,24,24,29],
[23,25,23,31,23,26,0,24,27,27],
[21,27,27,29,21,27,27,0,27,27],
[27,22,25,26,28,27,24,24,0,31],
[21,21,24,20,21,22,24,24,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,25,18,22,27,26,25,21,24],
[25,0,25,28,23,27,29,22,27,25],
[26,26,0,24,30,30,27,20,29,27],
[33,23,27,0,27,34,27,20,28,28],
[29,28,21,24,0,23,20,18,27,27],
[24,24,21,17,28,0,26,24,27,23],
[25,22,24,24,31,25,0,23,24,24],
[26,29,31,31,33,27,28,0,30,23],
[30,24,22,23,24,24,27,21,0,29],
[27,26,24,23,24,28,27,28,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,27,27,26,30,28,26,25,25],
[26,0,24,26,25,26,26,29,26,24],
[24,27,0,27,24,25,26,24,25,22],
[24,25,24,0,22,24,25,25,21,24],
[25,26,27,29,0,28,32,30,27,27],
[21,25,26,27,23,0,27,26,25,25],
[23,25,25,26,19,24,0,21,24,22],
[25,22,27,26,21,25,30,0,23,20],
[26,25,26,30,24,26,27,28,0,26],
[26,27,29,27,24,26,29,31,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,22,25,31,27,25,32,25,28],
[25,0,20,18,26,21,23,19,25,25],
[29,31,0,24,30,26,24,27,24,25],
[26,33,27,0,25,29,30,31,30,30],
[20,25,21,26,0,25,23,24,22,27],
[24,30,25,22,26,0,28,27,29,32],
[26,28,27,21,28,23,0,26,25,25],
[19,32,24,20,27,24,25,0,26,30],
[26,26,27,21,29,22,26,25,0,28],
[23,26,26,21,24,19,26,21,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,21,18,12,15,25,15,15,18],
[41,0,32,28,25,27,34,28,28,26],
[30,19,0,21,19,20,23,20,22,28],
[33,23,30,0,26,30,35,27,25,29],
[39,26,32,25,0,25,33,29,31,30],
[36,24,31,21,26,0,33,32,35,26],
[26,17,28,16,18,18,0,25,21,20],
[36,23,31,24,22,19,26,0,26,27],
[36,23,29,26,20,16,30,25,0,27],
[33,25,23,22,21,25,31,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,32,33,37,33,35,39,29,35],
[27,0,20,21,34,39,30,41,28,38],
[19,31,0,31,36,29,30,45,46,46],
[18,30,20,0,32,32,28,34,28,35],
[14,17,15,19,0,22,19,29,14,37],
[18,12,22,19,29,0,22,29,24,29],
[16,21,21,23,32,29,0,41,32,33],
[12,10,6,17,22,22,10,0,12,35],
[22,23,5,23,37,27,19,39,0,30],
[16,13,5,16,14,22,18,16,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,26,27,26,24,19,24,30,26],
[30,0,28,31,35,28,28,25,35,27],
[25,23,0,29,24,24,21,25,32,26],
[24,20,22,0,21,19,17,19,29,22],
[25,16,27,30,0,16,20,22,28,18],
[27,23,27,32,35,0,26,26,36,24],
[32,23,30,34,31,25,0,26,29,26],
[27,26,26,32,29,25,25,0,33,30],
[21,16,19,22,23,15,22,18,0,21],
[25,24,25,29,33,27,25,21,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,27,28,28,25,33,26,31,27],
[23,0,30,26,30,32,37,26,28,23],
[24,21,0,29,27,28,35,29,30,27],
[23,25,22,0,29,32,25,27,33,23],
[23,21,24,22,0,28,31,26,28,29],
[26,19,23,19,23,0,26,23,32,19],
[18,14,16,26,20,25,0,26,25,11],
[25,25,22,24,25,28,25,0,32,25],
[20,23,21,18,23,19,26,19,0,20],
[24,28,24,28,22,32,40,26,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,29,33,23,15,18,31,25,26],
[25,0,30,26,22,23,22,27,21,23],
[22,21,0,32,21,22,23,36,27,32],
[18,25,19,0,26,18,26,34,24,24],
[28,29,30,25,0,27,22,32,23,36],
[36,28,29,33,24,0,25,37,28,39],
[33,29,28,25,29,26,0,30,25,25],
[20,24,15,17,19,14,21,0,23,21],
[26,30,24,27,28,23,26,28,0,25],
[25,28,19,27,15,12,26,30,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,26,26,22,24,27,30,27,13],
[24,0,27,23,18,21,22,26,31,20],
[25,24,0,25,20,22,22,23,32,24],
[25,28,26,0,18,24,24,20,31,21],
[29,33,31,33,0,25,34,31,33,25],
[27,30,29,27,26,0,25,26,31,26],
[24,29,29,27,17,26,0,29,29,18],
[21,25,28,31,20,25,22,0,32,21],
[24,20,19,20,18,20,22,19,0,16],
[38,31,27,30,26,25,33,30,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,23,25,31,24,23,22,20,29],
[23,0,34,30,43,30,34,28,26,31],
[28,17,0,21,29,26,31,20,23,29],
[26,21,30,0,36,23,28,18,29,26],
[20,8,22,15,0,23,22,14,26,20],
[27,21,25,28,28,0,34,32,27,26],
[28,17,20,23,29,17,0,19,22,25],
[29,23,31,33,37,19,32,0,27,29],
[31,25,28,22,25,24,29,24,0,25],
[22,20,22,25,31,25,26,22,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,40,28,33,29,35,31,30,37],
[31,0,32,31,33,27,33,28,20,31],
[11,19,0,24,23,27,34,26,16,26],
[23,20,27,0,23,26,34,17,17,27],
[18,18,28,28,0,25,29,25,17,26],
[22,24,24,25,26,0,32,20,14,29],
[16,18,17,17,22,19,0,21,16,34],
[20,23,25,34,26,31,30,0,26,44],
[21,31,35,34,34,37,35,25,0,32],
[14,20,25,24,25,22,17,7,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,22,26,20,25,27,30,29,23],
[28,0,28,24,26,30,29,29,33,31],
[29,23,0,26,26,27,26,32,35,27],
[25,27,25,0,27,23,30,33,32,35],
[31,25,25,24,0,26,28,31,32,31],
[26,21,24,28,25,0,27,32,28,29],
[24,22,25,21,23,24,0,24,28,30],
[21,22,19,18,20,19,27,0,27,31],
[22,18,16,19,19,23,23,24,0,26],
[28,20,24,16,20,22,21,20,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,22,21,22,30,27,26,25,17],
[15,0,32,26,23,24,28,21,29,18],
[29,19,0,22,21,22,28,19,27,14],
[30,25,29,0,33,29,32,31,27,31],
[29,28,30,18,0,26,27,25,28,15],
[21,27,29,22,25,0,21,22,27,13],
[24,23,23,19,24,30,0,28,20,20],
[25,30,32,20,26,29,23,0,30,24],
[26,22,24,24,23,24,31,21,0,18],
[34,33,37,20,36,38,31,27,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,27,25,31,23,25,33,28,24],
[27,0,32,27,28,27,27,33,25,28],
[24,19,0,25,31,27,24,27,23,31],
[26,24,26,0,28,28,23,26,26,28],
[20,23,20,23,0,23,19,25,19,26],
[28,24,24,23,28,0,26,28,27,27],
[26,24,27,28,32,25,0,28,30,33],
[18,18,24,25,26,23,23,0,21,23],
[23,26,28,25,32,24,21,30,0,29],
[27,23,20,23,25,24,18,28,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,19,14,20,23,27,24,23,25],
[28,0,29,27,23,25,26,29,30,28],
[32,22,0,22,21,26,28,30,24,26],
[37,24,29,0,28,30,35,34,31,35],
[31,28,30,23,0,25,36,29,30,29],
[28,26,25,21,26,0,34,26,22,29],
[24,25,23,16,15,17,0,28,29,23],
[27,22,21,17,22,25,23,0,23,27],
[28,21,27,20,21,29,22,28,0,28],
[26,23,25,16,22,22,28,24,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,24,23,23,24,23,28,26,31],
[28,0,26,26,26,26,24,32,29,32],
[27,25,0,27,23,21,24,26,26,30],
[28,25,24,0,24,25,29,30,32,28],
[28,25,28,27,0,30,24,30,30,29],
[27,25,30,26,21,0,26,30,26,30],
[28,27,27,22,27,25,0,29,29,29],
[23,19,25,21,21,21,22,0,21,27],
[25,22,25,19,21,25,22,30,0,27],
[20,19,21,23,22,21,22,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,25,33,28,21,24,32,23,30],
[36,0,31,35,34,28,22,31,24,29],
[26,20,0,23,28,20,13,26,22,31],
[18,16,28,0,18,17,17,24,21,23],
[23,17,23,33,0,22,13,24,19,32],
[30,23,31,34,29,0,21,29,29,32],
[27,29,38,34,38,30,0,29,20,35],
[19,20,25,27,27,22,22,0,17,21],
[28,27,29,30,32,22,31,34,0,30],
[21,22,20,28,19,19,16,30,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,29,27,31,27,25,26,30,29],
[19,0,22,29,29,27,26,23,28,29],
[22,29,0,29,25,29,32,24,33,34],
[24,22,22,0,28,26,28,21,28,32],
[20,22,26,23,0,30,26,23,28,28],
[24,24,22,25,21,0,26,25,26,29],
[26,25,19,23,25,25,0,25,26,33],
[25,28,27,30,28,26,26,0,29,33],
[21,23,18,23,23,25,25,22,0,21],
[22,22,17,19,23,22,18,18,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,34,38,33,23,37,35,31,30],
[21,0,37,29,27,14,32,35,23,29],
[17,14,0,19,13,24,32,21,0,22],
[13,22,32,0,24,17,34,35,23,27],
[18,24,38,27,0,18,38,34,32,27],
[28,37,27,34,33,0,31,36,23,28],
[14,19,19,17,13,20,0,21,17,25],
[16,16,30,16,17,15,30,0,12,25],
[20,28,51,28,19,28,34,39,0,36],
[21,22,29,24,24,23,26,26,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,30,29,28,34,39,24,33],
[27,0,24,28,25,30,26,36,27,36],
[27,27,0,26,18,23,23,30,19,32],
[21,23,25,0,22,25,27,32,26,32],
[22,26,33,29,0,26,32,34,24,29],
[23,21,28,26,25,0,27,38,24,32],
[17,25,28,24,19,24,0,33,25,31],
[12,15,21,19,17,13,18,0,15,18],
[27,24,32,25,27,27,26,36,0,31],
[18,15,19,19,22,19,20,33,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,26,36,34,32,26,23,25,30],
[7,0,19,15,16,33,12,28,14,19],
[25,32,0,29,26,20,16,25,16,17],
[15,36,22,0,25,26,22,21,12,23],
[17,35,25,26,0,29,20,25,14,32],
[19,18,31,25,22,0,19,18,24,17],
[25,39,35,29,31,32,0,22,29,39],
[28,23,26,30,26,33,29,0,19,22],
[26,37,35,39,37,27,22,32,0,32],
[21,32,34,28,19,34,12,29,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,34,28,24,26,23,31,30,25],
[23,0,26,22,22,22,21,24,28,21],
[17,25,0,25,24,26,24,27,28,26],
[23,29,26,0,22,21,23,28,31,29],
[27,29,27,29,0,23,21,27,31,26],
[25,29,25,30,28,0,27,29,32,30],
[28,30,27,28,30,24,0,26,28,27],
[20,27,24,23,24,22,25,0,24,21],
[21,23,23,20,20,19,23,27,0,22],
[26,30,25,22,25,21,24,30,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,28,26,22,23,23,17,18,28],
[28,0,25,33,22,21,28,17,23,28],
[23,26,0,30,23,21,25,22,23,27],
[25,18,21,0,20,18,20,14,16,21],
[29,29,28,31,0,25,24,21,25,29],
[28,30,30,33,26,0,28,22,24,28],
[28,23,26,31,27,23,0,26,25,31],
[34,34,29,37,30,29,25,0,30,33],
[33,28,28,35,26,27,26,21,0,32],
[23,23,24,30,22,23,20,18,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,29,31,28,23,32,27,32,25],
[16,0,27,22,26,24,20,20,28,25],
[22,24,0,23,27,24,27,19,29,23],
[20,29,28,0,30,30,26,30,25,25],
[23,25,24,21,0,20,26,22,24,22],
[28,27,27,21,31,0,29,22,32,23],
[19,31,24,25,25,22,0,22,23,19],
[24,31,32,21,29,29,29,0,30,31],
[19,23,22,26,27,19,28,21,0,22],
[26,26,28,26,29,28,32,20,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,21,19,14,31,31,34,29,42],
[17,0,25,19,31,28,34,30,11,35],
[30,26,0,27,20,28,37,40,31,37],
[32,32,24,0,31,32,41,33,26,28],
[37,20,31,20,0,22,22,31,20,28],
[20,23,23,19,29,0,22,23,23,35],
[20,17,14,10,29,29,0,30,23,26],
[17,21,11,18,20,28,21,0,26,28],
[22,40,20,25,31,28,28,25,0,30],
[9,16,14,23,23,16,25,23,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,25,13,17,18,29,20,21,29],
[23,0,8,11,33,21,19,17,8,24],
[26,43,0,28,29,26,29,35,14,32],
[38,40,23,0,29,20,27,22,23,27],
[34,18,22,22,0,19,18,26,25,30],
[33,30,25,31,32,0,31,29,25,31],
[22,32,22,24,33,20,0,27,29,32],
[31,34,16,29,25,22,24,0,20,31],
[30,43,37,28,26,26,22,31,0,34],
[22,27,19,24,21,20,19,20,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,30,23,21,27,22,24,23,23],
[21,0,28,24,21,19,24,28,24,21],
[21,23,0,25,27,23,18,23,24,19],
[28,27,26,0,21,25,29,24,25,27],
[30,30,24,30,0,24,28,24,24,21],
[24,32,28,26,27,0,25,26,22,26],
[29,27,33,22,23,26,0,26,21,22],
[27,23,28,27,27,25,25,0,26,24],
[28,27,27,26,27,29,30,25,0,25],
[28,30,32,24,30,25,29,27,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,26,21,25,20,30,22,22,30],
[26,0,21,28,25,18,30,31,25,33],
[25,30,0,29,27,24,30,29,25,32],
[30,23,22,0,25,22,26,20,24,25],
[26,26,24,26,0,22,28,21,24,27],
[31,33,27,29,29,0,31,33,24,33],
[21,21,21,25,23,20,0,18,18,25],
[29,20,22,31,30,18,33,0,27,31],
[29,26,26,27,27,27,33,24,0,29],
[21,18,19,26,24,18,26,20,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,25,33,25,24,26,23,24,21],
[22,0,26,29,25,27,25,23,27,22],
[26,25,0,24,25,24,26,23,24,18],
[18,22,27,0,18,24,26,21,17,19],
[26,26,26,33,0,30,30,28,24,28],
[27,24,27,27,21,0,22,28,23,20],
[25,26,25,25,21,29,0,22,24,25],
[28,28,28,30,23,23,29,0,20,23],
[27,24,27,34,27,28,27,31,0,29],
[30,29,33,32,23,31,26,28,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,31,25,26,21,26,30,33,29],
[22,0,28,23,26,24,28,27,30,25],
[20,23,0,22,20,19,20,27,27,21],
[26,28,29,0,25,23,28,31,29,23],
[25,25,31,26,0,26,25,31,31,25],
[30,27,32,28,25,0,24,30,29,24],
[25,23,31,23,26,27,0,29,28,23],
[21,24,24,20,20,21,22,0,24,22],
[18,21,24,22,20,22,23,27,0,16],
[22,26,30,28,26,27,28,29,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,22,31,23,25,20,22,23,31],
[27,0,28,31,20,23,20,23,23,27],
[29,23,0,30,25,26,20,29,25,26],
[20,20,21,0,21,22,19,18,20,21],
[28,31,26,30,0,29,27,27,23,28],
[26,28,25,29,22,0,22,27,23,25],
[31,31,31,32,24,29,0,27,26,29],
[29,28,22,33,24,24,24,0,23,29],
[28,28,26,31,28,28,25,28,0,29],
[20,24,25,30,23,26,22,22,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,32,26,19,25,19,20,24,24],
[25,0,35,28,24,34,30,30,29,38],
[19,16,0,12,20,29,19,24,33,28],
[25,23,39,0,28,32,28,34,37,26],
[32,27,31,23,0,30,30,32,34,28],
[26,17,22,19,21,0,26,13,29,29],
[32,21,32,23,21,25,0,25,24,29],
[31,21,27,17,19,38,26,0,25,33],
[27,22,18,14,17,22,27,26,0,30],
[27,13,23,25,23,22,22,18,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,29,28,36,35,29,25,31,33],
[20,0,22,27,26,27,25,28,23,35],
[22,29,0,25,31,28,24,29,26,30],
[23,24,26,0,29,23,22,22,23,29],
[15,25,20,22,0,28,21,19,24,26],
[16,24,23,28,23,0,23,22,19,28],
[22,26,27,29,30,28,0,25,26,33],
[26,23,22,29,32,29,26,0,26,29],
[20,28,25,28,27,32,25,25,0,29],
[18,16,21,22,25,23,18,22,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,18,27,28,27,26,34,24,24],
[16,0,21,29,22,24,14,28,22,24],
[33,30,0,35,25,25,27,38,29,38],
[24,22,16,0,24,21,19,32,26,25],
[23,29,26,27,0,25,22,33,30,29],
[24,27,26,30,26,0,25,31,28,30],
[25,37,24,32,29,26,0,33,23,30],
[17,23,13,19,18,20,18,0,20,26],
[27,29,22,25,21,23,28,31,0,23],
[27,27,13,26,22,21,21,25,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,28,23,26,27,29,28,23],
[24,0,30,32,24,33,32,30,25,26],
[23,21,0,26,22,19,24,29,17,21],
[23,19,25,0,22,27,28,27,20,25],
[28,27,29,29,0,34,26,28,24,26],
[25,18,32,24,17,0,25,25,15,26],
[24,19,27,23,25,26,0,30,23,21],
[22,21,22,24,23,26,21,0,17,21],
[23,26,34,31,27,36,28,34,0,26],
[28,25,30,26,25,25,30,30,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,25,28,26,32,33,15,18,26],
[24,0,26,25,18,23,27,15,16,22],
[26,25,0,26,25,29,29,20,24,27],
[23,26,25,0,21,22,25,16,18,27],
[25,33,26,30,0,27,29,23,23,32],
[19,28,22,29,24,0,27,17,26,29],
[18,24,22,26,22,24,0,10,19,28],
[36,36,31,35,28,34,41,0,25,34],
[33,35,27,33,28,25,32,26,0,38],
[25,29,24,24,19,22,23,17,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,24,27,26,21,24,23,31,30],
[31,0,26,33,29,21,32,28,31,31],
[27,25,0,30,31,25,26,28,31,28],
[24,18,21,0,30,21,21,23,28,27],
[25,22,20,21,0,24,23,20,26,25],
[30,30,26,30,27,0,27,25,32,31],
[27,19,25,30,28,24,0,30,32,25],
[28,23,23,28,31,26,21,0,28,28],
[20,20,20,23,25,19,19,23,0,24],
[21,20,23,24,26,20,26,23,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,28,42,32,34,23,39,33,18],
[16,0,6,24,18,20,4,30,26,10],
[23,45,0,43,25,32,25,37,40,23],
[9,27,8,0,27,27,17,29,27,17],
[19,33,26,24,0,34,31,39,36,17],
[17,31,19,24,17,0,23,30,31,31],
[28,47,26,34,20,28,0,40,27,33],
[12,21,14,22,12,21,11,0,14,26],
[18,25,11,24,15,20,24,37,0,15],
[33,41,28,34,34,20,18,25,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,29,26,23,16,29,14,27,26],
[22,0,23,20,22,22,27,13,27,11],
[22,28,0,16,23,18,21,13,24,16],
[25,31,35,0,31,18,33,29,32,14],
[28,29,28,20,0,26,29,24,33,15],
[35,29,33,33,25,0,27,21,33,18],
[22,24,30,18,22,24,0,24,30,19],
[37,38,38,22,27,30,27,0,33,21],
[24,24,27,19,18,18,21,18,0,18],
[25,40,35,37,36,33,32,30,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,30,28,29,27,27,36,36,37],
[27,0,23,26,30,28,22,33,32,36],
[21,28,0,24,20,23,21,26,29,34],
[23,25,27,0,26,24,22,26,31,33],
[22,21,31,25,0,22,20,24,26,25],
[24,23,28,27,29,0,19,32,30,29],
[24,29,30,29,31,32,0,33,30,34],
[15,18,25,25,27,19,18,0,20,30],
[15,19,22,20,25,21,21,31,0,29],
[14,15,17,18,26,22,17,21,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,24,23,24,25,21,26,28,22],
[26,0,23,27,29,31,20,26,28,22],
[27,28,0,26,23,29,24,26,30,25],
[28,24,25,0,29,32,26,31,34,28],
[27,22,28,22,0,29,23,27,27,28],
[26,20,22,19,22,0,16,23,24,19],
[30,31,27,25,28,35,0,28,31,27],
[25,25,25,20,24,28,23,0,27,17],
[23,23,21,17,24,27,20,24,0,20],
[29,29,26,23,23,32,24,34,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,18,27,22,16,22,15,12,24],
[30,0,29,28,27,23,30,22,20,17],
[33,22,0,27,27,25,27,23,26,19],
[24,23,24,0,21,28,33,27,14,23],
[29,24,24,30,0,27,28,26,22,20],
[35,28,26,23,24,0,26,19,18,31],
[29,21,24,18,23,25,0,21,19,21],
[36,29,28,24,25,32,30,0,27,23],
[39,31,25,37,29,33,32,24,0,24],
[27,34,32,28,31,20,30,28,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,23,28,17,29,29,24,29,33],
[30,0,29,30,23,26,29,27,24,28],
[28,22,0,20,21,23,22,18,18,29],
[23,21,31,0,18,20,25,12,21,25],
[34,28,30,33,0,27,23,21,30,28],
[22,25,28,31,24,0,28,21,23,24],
[22,22,29,26,28,23,0,23,29,29],
[27,24,33,39,30,30,28,0,27,30],
[22,27,33,30,21,28,22,24,0,28],
[18,23,22,26,23,27,22,21,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,27,25,18,18,18,19,19,25],
[29,0,28,29,28,24,30,22,29,29],
[24,23,0,34,24,27,25,30,36,32],
[26,22,17,0,18,16,24,22,23,29],
[33,23,27,33,0,17,28,29,22,33],
[33,27,24,35,34,0,26,27,30,33],
[33,21,26,27,23,25,0,22,30,35],
[32,29,21,29,22,24,29,0,25,32],
[32,22,15,28,29,21,21,26,0,24],
[26,22,19,22,18,18,16,19,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,24,28,14,25,23,7,16,1],
[35,0,42,51,14,45,27,27,24,21],
[27,9,0,21,22,18,26,20,14,9],
[23,0,30,0,6,24,22,11,12,8],
[37,37,29,45,0,38,30,37,26,23],
[26,6,33,27,13,0,18,17,6,0],
[28,24,25,29,21,33,0,24,24,24],
[44,24,31,40,14,34,27,0,17,21],
[35,27,37,39,25,45,27,34,0,28],
[50,30,42,43,28,51,27,30,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,24,20,25,25,25,32,26,25],
[15,0,25,20,23,19,20,23,23,29],
[27,26,0,24,33,22,26,31,29,24],
[31,31,27,0,21,22,21,26,28,25],
[26,28,18,30,0,24,22,25,21,25],
[26,32,29,29,27,0,28,23,31,29],
[26,31,25,30,29,23,0,31,32,30],
[19,28,20,25,26,28,20,0,19,26],
[25,28,22,23,30,20,19,32,0,27],
[26,22,27,26,26,22,21,25,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,24,21,30,29,32,30,26,25],
[21,0,26,25,33,27,29,28,20,29],
[27,25,0,28,34,31,31,28,25,31],
[30,26,23,0,27,29,26,28,21,26],
[21,18,17,24,0,25,25,24,21,22],
[22,24,20,22,26,0,23,21,28,24],
[19,22,20,25,26,28,0,23,24,26],
[21,23,23,23,27,30,28,0,25,25],
[25,31,26,30,30,23,27,26,0,28],
[26,22,20,25,29,27,25,26,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,33,22,23,26,19,17,29,20],
[33,0,29,28,18,28,23,26,32,24],
[18,22,0,22,13,24,16,17,26,13],
[29,23,29,0,18,26,22,19,23,17],
[28,33,38,33,0,30,26,26,32,21],
[25,23,27,25,21,0,20,18,27,16],
[32,28,35,29,25,31,0,28,35,31],
[34,25,34,32,25,33,23,0,30,23],
[22,19,25,28,19,24,16,21,0,19],
[31,27,38,34,30,35,20,28,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,25,25,24,22,24,21,26,24],
[30,0,26,28,25,31,28,28,28,27],
[26,25,0,29,27,25,29,27,31,25],
[26,23,22,0,26,28,26,24,26,24],
[27,26,24,25,0,24,29,27,30,26],
[29,20,26,23,27,0,24,24,22,25],
[27,23,22,25,22,27,0,20,28,22],
[30,23,24,27,24,27,31,0,31,24],
[25,23,20,25,21,29,23,20,0,20],
[27,24,26,27,25,26,29,27,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,23,27,24,24,21,28,28,23],
[25,0,24,31,23,23,22,28,29,26],
[28,27,0,33,28,28,24,29,28,28],
[24,20,18,0,21,23,21,27,20,17],
[27,28,23,30,0,27,24,30,25,20],
[27,28,23,28,24,0,25,31,27,25],
[30,29,27,30,27,26,0,30,28,23],
[23,23,22,24,21,20,21,0,24,24],
[23,22,23,31,26,24,23,27,0,23],
[28,25,23,34,31,26,28,27,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,10,19,20,21,26,19,17],
[27,0,18,17,17,13,23,19,22,12],
[27,33,0,16,19,28,18,25,25,23],
[41,34,35,0,30,31,21,33,36,28],
[32,34,32,21,0,31,31,26,30,26],
[31,38,23,20,20,0,25,22,26,22],
[30,28,33,30,20,26,0,32,27,31],
[25,32,26,18,25,29,19,0,24,25],
[32,29,26,15,21,25,24,27,0,17],
[34,39,28,23,25,29,20,26,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,24,24,27,13,29,26,22,23],
[22,0,22,29,28,20,19,37,30,17],
[27,29,0,23,32,19,22,26,26,26],
[27,22,28,0,34,18,21,40,24,25],
[24,23,19,17,0,7,16,24,17,18],
[38,31,32,33,44,0,29,37,29,23],
[22,32,29,30,35,22,0,37,26,24],
[25,14,25,11,27,14,14,0,19,21],
[29,21,25,27,34,22,25,32,0,22],
[28,34,25,26,33,28,27,30,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,31,30,22,32,23,24,29],
[24,0,33,30,29,28,21,26,19,29],
[23,18,0,20,23,21,26,23,19,27],
[20,21,31,0,30,17,27,25,19,30],
[21,22,28,21,0,16,26,21,19,28],
[29,23,30,34,35,0,29,27,26,31],
[19,30,25,24,25,22,0,29,25,29],
[28,25,28,26,30,24,22,0,29,33],
[27,32,32,32,32,25,26,22,0,29],
[22,22,24,21,23,20,22,18,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,24,29,27,25,30,29,27,26],
[21,0,23,21,24,22,23,23,23,19],
[27,28,0,32,27,33,24,29,32,27],
[22,30,19,0,25,26,20,28,29,26],
[24,27,24,26,0,25,22,28,27,28],
[26,29,18,25,26,0,22,28,28,26],
[21,28,27,31,29,29,0,25,31,29],
[22,28,22,23,23,23,26,0,27,22],
[24,28,19,22,24,23,20,24,0,21],
[25,32,24,25,23,25,22,29,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,14,42,1,38,23,21,18,18],
[24,0,19,26,0,28,22,26,17,11],
[37,32,0,31,23,49,38,36,31,23],
[9,25,20,0,9,35,14,13,7,24],
[50,51,28,42,0,43,23,27,27,38],
[13,23,2,16,8,0,14,12,7,23],
[28,29,13,37,28,37,0,17,7,28],
[30,25,15,38,24,39,34,0,14,25],
[33,34,20,44,24,44,44,37,0,24],
[33,40,28,27,13,28,23,26,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,27,25,30,27,28,23,23,28],
[28,0,23,32,23,27,29,28,31,24],
[24,28,0,25,24,27,29,27,22,21],
[26,19,26,0,26,31,28,20,23,23],
[21,28,27,25,0,26,26,25,23,25],
[24,24,24,20,25,0,21,16,25,22],
[23,22,22,23,25,30,0,22,24,20],
[28,23,24,31,26,35,29,0,31,20],
[28,20,29,28,28,26,27,20,0,27],
[23,27,30,28,26,29,31,31,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,21,23,25,23,28,21,21,23],
[29,0,17,19,30,25,32,21,20,22],
[30,34,0,22,37,27,34,20,21,28],
[28,32,29,0,38,30,31,22,27,24],
[26,21,14,13,0,18,20,16,19,19],
[28,26,24,21,33,0,31,25,22,25],
[23,19,17,20,31,20,0,22,20,23],
[30,30,31,29,35,26,29,0,22,31],
[30,31,30,24,32,29,31,29,0,30],
[28,29,23,27,32,26,28,20,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,26,32,25,32,31,25,30,23],
[21,0,13,25,23,35,24,23,30,22],
[25,38,0,34,25,41,32,26,33,28],
[19,26,17,0,19,34,28,21,23,23],
[26,28,26,32,0,29,28,32,33,22],
[19,16,10,17,22,0,20,19,22,20],
[20,27,19,23,23,31,0,22,32,23],
[26,28,25,30,19,32,29,0,33,25],
[21,21,18,28,18,29,19,18,0,27],
[28,29,23,28,29,31,28,26,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,19,18,18,28,29,14,21,27],
[26,0,23,23,21,27,23,15,26,30],
[32,28,0,19,18,33,30,20,21,28],
[33,28,32,0,24,36,34,20,28,32],
[33,30,33,27,0,26,25,23,26,31],
[23,24,18,15,25,0,26,17,16,22],
[22,28,21,17,26,25,0,21,24,31],
[37,36,31,31,28,34,30,0,25,38],
[30,25,30,23,25,35,27,26,0,41],
[24,21,23,19,20,29,20,13,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,2,10,29,10,0,2,0,24],
[39,0,19,18,19,18,8,10,27,30],
[49,32,0,30,49,18,20,32,37,30],
[41,33,21,0,33,21,21,41,21,33],
[22,32,2,18,0,18,8,10,8,32],
[41,33,33,30,33,0,41,41,29,22],
[51,43,31,30,43,10,0,51,39,24],
[49,41,19,10,41,10,0,0,19,22],
[51,24,14,30,43,22,12,32,0,24],
[27,21,21,18,19,29,27,29,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,26,24,28,20,27,25,28,32],
[19,0,23,27,24,21,29,32,24,33],
[25,28,0,22,24,24,29,31,25,37],
[27,24,29,0,23,23,34,29,28,31],
[23,27,27,28,0,26,30,29,20,30],
[31,30,27,28,25,0,31,31,30,37],
[24,22,22,17,21,20,0,20,24,26],
[26,19,20,22,22,20,31,0,21,25],
[23,27,26,23,31,21,27,30,0,28],
[19,18,14,20,21,14,25,26,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,19,27,27,28,17,22,29,29],
[30,0,28,22,31,29,26,28,33,32],
[32,23,0,26,36,36,24,25,29,28],
[24,29,25,0,31,31,25,27,30,33],
[24,20,15,20,0,22,24,18,25,34],
[23,22,15,20,29,0,21,25,28,33],
[34,25,27,26,27,30,0,24,30,33],
[29,23,26,24,33,26,27,0,35,33],
[22,18,22,21,26,23,21,16,0,21],
[22,19,23,18,17,18,18,18,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,33,27,28,27,25,28,27,28],
[27,0,28,22,23,27,19,25,23,22],
[18,23,0,18,21,21,19,22,20,24],
[24,29,33,0,25,24,27,27,26,26],
[23,28,30,26,0,21,23,25,23,21],
[24,24,30,27,30,0,21,29,25,25],
[26,32,32,24,28,30,0,27,31,28],
[23,26,29,24,26,22,24,0,29,24],
[24,28,31,25,28,26,20,22,0,21],
[23,29,27,25,30,26,23,27,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,22,24,20,31,28,24,13,23],
[27,0,30,25,32,35,33,25,31,28],
[29,21,0,19,26,45,37,22,26,30],
[27,26,32,0,20,39,40,20,21,30],
[31,19,25,31,0,42,39,27,19,38],
[20,16,6,12,9,0,16,6,17,24],
[23,18,14,11,12,35,0,13,18,22],
[27,26,29,31,24,45,38,0,26,31],
[38,20,25,30,32,34,33,25,0,35],
[28,23,21,21,13,27,29,20,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,32,20,32,32,32,37,35,27],
[19,0,32,21,29,26,13,22,24,26],
[19,19,0,27,27,23,21,27,29,29],
[31,30,24,0,34,27,24,37,38,26],
[19,22,24,17,0,26,21,26,28,12],
[19,25,28,24,25,0,18,24,22,23],
[19,38,30,27,30,33,0,27,34,24],
[14,29,24,14,25,27,24,0,19,19],
[16,27,22,13,23,29,17,32,0,22],
[24,25,22,25,39,28,27,32,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,21,29,11,19,25,25,45,28],
[26,0,36,38,21,24,28,28,34,48],
[30,15,0,20,3,21,28,7,27,27],
[22,13,31,0,18,20,35,35,31,20],
[40,30,48,33,0,34,36,17,39,28],
[32,27,30,31,17,0,25,17,37,37],
[26,23,23,16,15,26,0,17,25,25],
[26,23,44,16,34,34,34,0,40,26],
[6,17,24,20,12,14,26,11,0,18],
[23,3,24,31,23,14,26,25,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,27,28,23,22,31,26,26,34],
[17,0,25,19,20,22,30,21,21,20],
[24,26,0,20,20,21,23,27,27,27],
[23,32,31,0,28,24,31,29,30,29],
[28,31,31,23,0,27,28,32,27,27],
[29,29,30,27,24,0,34,33,26,30],
[20,21,28,20,23,17,0,20,32,23],
[25,30,24,22,19,18,31,0,25,28],
[25,30,24,21,24,25,19,26,0,21],
[17,31,24,22,24,21,28,23,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,38,29,25,26,38,31,34,39],
[27,0,35,35,25,20,29,35,22,30],
[13,16,0,22,17,23,22,22,26,29],
[22,16,29,0,17,19,30,18,33,28],
[26,26,34,34,0,21,32,33,26,38],
[25,31,28,32,30,0,34,37,29,36],
[13,22,29,21,19,17,0,29,19,35],
[20,16,29,33,18,14,22,0,22,26],
[17,29,25,18,25,22,32,29,0,38],
[12,21,22,23,13,15,16,25,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,24,30,23,26,24,23,27,26],
[25,0,26,28,26,32,21,27,25,29],
[27,25,0,28,26,30,20,24,25,30],
[21,23,23,0,19,27,26,26,19,26],
[28,25,25,32,0,30,26,30,27,28],
[25,19,21,24,21,0,19,21,17,25],
[27,30,31,25,25,32,0,27,22,31],
[28,24,27,25,21,30,24,0,23,28],
[24,26,26,32,24,34,29,28,0,34],
[25,22,21,25,23,26,20,23,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,19,31,14,32,14,14,17,15],
[35,0,33,42,26,32,21,34,31,31],
[32,18,0,23,14,34,17,25,24,21],
[20,9,28,0,6,27,15,19,15,21],
[37,25,37,45,0,37,26,25,26,27],
[19,19,17,24,14,0,18,17,25,13],
[37,30,34,36,25,33,0,31,40,28],
[37,17,26,32,26,34,20,0,21,34],
[34,20,27,36,25,26,11,30,0,26],
[36,20,30,30,24,38,23,17,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,26,22,20,16,20,22,22,19],
[34,0,29,25,29,28,25,31,31,26],
[25,22,0,22,25,21,25,27,21,24],
[29,26,29,0,24,24,27,31,26,25],
[31,22,26,27,0,24,24,25,29,26],
[35,23,30,27,27,0,29,28,30,24],
[31,26,26,24,27,22,0,24,28,24],
[29,20,24,20,26,23,27,0,27,21],
[29,20,30,25,22,21,23,24,0,22],
[32,25,27,26,25,27,27,30,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,27,25,33,20,31,26,31,30],
[20,0,24,26,22,14,27,15,24,28],
[24,27,0,22,25,27,25,24,25,30],
[26,25,29,0,28,23,30,22,28,33],
[18,29,26,23,0,24,30,30,36,36],
[31,37,24,28,27,0,35,34,38,34],
[20,24,26,21,21,16,0,18,26,28],
[25,36,27,29,21,17,33,0,31,30],
[20,27,26,23,15,13,25,20,0,28],
[21,23,21,18,15,17,23,21,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,24,25,21,18,29,24,30,35],
[28,0,22,34,25,18,27,29,38,41],
[27,29,0,20,22,25,39,35,32,26],
[26,17,31,0,24,20,23,29,26,35],
[30,26,29,27,0,28,35,25,29,29],
[33,33,26,31,23,0,30,34,29,33],
[22,24,12,28,16,21,0,22,33,30],
[27,22,16,22,26,17,29,0,29,27],
[21,13,19,25,22,22,18,22,0,33],
[16,10,25,16,22,18,21,24,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,24,32,23,41,20,30,26,18],
[31,0,21,35,32,44,27,32,30,23],
[27,30,0,27,30,31,27,21,31,22],
[19,16,24,0,33,35,28,29,21,17],
[28,19,21,18,0,32,22,27,27,16],
[10,7,20,16,19,0,16,18,19,21],
[31,24,24,23,29,35,0,31,37,23],
[21,19,30,22,24,33,20,0,27,14],
[25,21,20,30,24,32,14,24,0,29],
[33,28,29,34,35,30,28,37,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,28,25,27,23,27,27,28,26],
[18,0,25,26,24,19,22,22,26,17],
[23,26,0,26,27,26,24,29,28,23],
[26,25,25,0,20,22,20,27,27,20],
[24,27,24,31,0,22,25,24,28,23],
[28,32,25,29,29,0,26,36,30,24],
[24,29,27,31,26,25,0,26,27,26],
[24,29,22,24,27,15,25,0,24,16],
[23,25,23,24,23,21,24,27,0,21],
[25,34,28,31,28,27,25,35,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,20,26,25,28,31,23,30,27],
[32,0,28,35,24,32,38,35,34,39],
[31,23,0,40,25,24,26,27,34,34],
[25,16,11,0,21,22,27,28,21,28],
[26,27,26,30,0,31,30,22,28,27],
[23,19,27,29,20,0,23,21,23,26],
[20,13,25,24,21,28,0,23,29,26],
[28,16,24,23,29,30,28,0,29,28],
[21,17,17,30,23,28,22,22,0,29],
[24,12,17,23,24,25,25,23,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,27,27,38,26,24,24,20,34],
[28,0,40,29,40,24,28,24,21,39],
[24,11,0,25,37,30,19,28,20,27],
[24,22,26,0,30,27,28,24,27,29],
[13,11,14,21,0,24,17,20,16,8],
[25,27,21,24,27,0,22,26,31,25],
[27,23,32,23,34,29,0,32,25,30],
[27,27,23,27,31,25,19,0,19,22],
[31,30,31,24,35,20,26,32,0,34],
[17,12,24,22,43,26,21,29,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,40,22,17,37,35,26,29,26],
[24,0,46,34,32,24,24,32,32,31],
[11,5,0,9,16,8,11,32,14,20],
[29,17,42,0,16,24,23,32,10,14],
[34,19,35,35,0,28,28,24,43,21],
[14,27,43,27,23,0,5,26,27,29],
[16,27,40,28,23,46,0,39,29,30],
[25,19,19,19,27,25,12,0,27,21],
[22,19,37,41,8,24,22,24,0,15],
[25,20,31,37,30,22,21,30,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,28,33,28,30,21,23,28,15],
[19,0,23,22,31,31,30,25,25,24],
[23,28,0,34,25,30,19,22,25,19],
[18,29,17,0,26,22,23,19,27,15],
[23,20,26,25,0,30,19,28,27,28],
[21,20,21,29,21,0,20,21,29,19],
[30,21,32,28,32,31,0,29,28,22],
[28,26,29,32,23,30,22,0,29,20],
[23,26,26,24,24,22,23,22,0,19],
[36,27,32,36,23,32,29,31,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,26,23,21,19,14,28,16,16],
[24,0,25,19,19,7,16,17,19,18],
[25,26,0,29,25,19,20,26,25,26],
[28,32,22,0,30,24,27,30,20,25],
[30,32,26,21,0,12,19,21,26,28],
[32,44,32,27,39,0,35,31,21,37],
[37,35,31,24,32,16,0,36,27,24],
[23,34,25,21,30,20,15,0,19,32],
[35,32,26,31,25,30,24,32,0,33],
[35,33,25,26,23,14,27,19,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,20,26,16,22,21,23,21,20],
[22,0,19,21,20,18,16,24,27,16],
[31,32,0,30,29,23,29,32,30,26],
[25,30,21,0,21,22,20,22,23,21],
[35,31,22,30,0,23,26,21,29,27],
[29,33,28,29,28,0,27,27,27,22],
[30,35,22,31,25,24,0,26,28,21],
[28,27,19,29,30,24,25,0,30,20],
[30,24,21,28,22,24,23,21,0,16],
[31,35,25,30,24,29,30,31,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,33,29,28,22,32,25,22,29],
[29,0,29,27,28,23,32,30,22,28],
[18,22,0,25,23,17,19,22,20,19],
[22,24,26,0,22,19,27,28,23,17],
[23,23,28,29,0,20,22,26,17,21],
[29,28,34,32,31,0,35,30,25,28],
[19,19,32,24,29,16,0,24,20,25],
[26,21,29,23,25,21,27,0,18,16],
[29,29,31,28,34,26,31,33,0,22],
[22,23,32,34,30,23,26,35,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,15,15,29,38,18,29,29,15],
[22,0,28,28,42,51,36,42,47,24],
[36,23,0,0,38,23,36,42,23,9],
[36,23,51,0,47,47,36,42,47,33],
[22,9,13,4,0,13,22,28,18,9],
[13,0,28,4,38,0,27,42,38,9],
[33,15,15,15,29,24,0,38,38,15],
[22,9,9,9,23,9,13,0,23,9],
[22,4,28,4,33,13,13,28,0,0],
[36,27,42,18,42,42,36,42,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,29,37,25,29,21,35,28,28],
[11,0,18,23,18,16,20,23,29,18],
[22,33,0,30,19,22,23,26,20,25],
[14,28,21,0,25,20,17,27,22,22],
[26,33,32,26,0,21,26,33,33,28],
[22,35,29,31,30,0,19,35,24,23],
[30,31,28,34,25,32,0,34,25,25],
[16,28,25,24,18,16,17,0,24,21],
[23,22,31,29,18,27,26,27,0,30],
[23,33,26,29,23,28,26,30,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,22,30,26,32,17,28,24,29],
[32,0,28,28,37,29,25,26,28,33],
[29,23,0,39,39,29,21,23,30,32],
[21,23,12,0,29,31,27,21,30,26],
[25,14,12,22,0,23,16,16,22,19],
[19,22,22,20,28,0,19,16,23,28],
[34,26,30,24,35,32,0,26,30,35],
[23,25,28,30,35,35,25,0,34,32],
[27,23,21,21,29,28,21,17,0,26],
[22,18,19,25,32,23,16,19,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,21,24,17,18,19,17,21,28],
[27,0,24,25,29,26,25,29,20,30],
[30,27,0,26,28,24,29,28,30,34],
[27,26,25,0,21,24,26,22,23,27],
[34,22,23,30,0,26,27,29,25,24],
[33,25,27,27,25,0,25,23,26,31],
[32,26,22,25,24,26,0,27,30,26],
[34,22,23,29,22,28,24,0,24,28],
[30,31,21,28,26,25,21,27,0,26],
[23,21,17,24,27,20,25,23,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,19,27,30,24,16,16,21,19],
[28,0,19,26,32,28,22,26,22,17],
[32,32,0,35,34,31,32,38,32,24],
[24,25,16,0,42,33,31,18,22,25],
[21,19,17,9,0,17,15,17,18,8],
[27,23,20,18,34,0,14,21,23,18],
[35,29,19,20,36,37,0,26,35,26],
[35,25,13,33,34,30,25,0,28,31],
[30,29,19,29,33,28,16,23,0,22],
[32,34,27,26,43,33,25,20,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,23,26,21,31,22,21,27,27],
[28,0,27,24,26,30,27,25,33,30],
[28,24,0,19,27,29,24,21,26,27],
[25,27,32,0,29,32,30,28,29,30],
[30,25,24,22,0,28,25,27,28,27],
[20,21,22,19,23,0,19,22,20,24],
[29,24,27,21,26,32,0,29,28,27],
[30,26,30,23,24,29,22,0,26,27],
[24,18,25,22,23,31,23,25,0,26],
[24,21,24,21,24,27,24,24,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,29,40,26,32,36,37,23,22],
[5,0,10,25,16,24,15,13,13,15],
[22,41,0,16,28,31,33,34,27,26],
[11,26,35,0,32,36,25,33,30,26],
[25,35,23,19,0,25,28,31,19,31],
[19,27,20,15,26,0,23,27,23,34],
[15,36,18,26,23,28,0,24,10,24],
[14,38,17,18,20,24,27,0,10,16],
[28,38,24,21,32,28,41,41,0,35],
[29,36,25,25,20,17,27,35,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,28,22,27,27,23,31,29,22],
[26,0,28,28,28,29,27,32,29,25],
[23,23,0,26,25,25,24,27,30,24],
[29,23,25,0,25,29,29,30,30,23],
[24,23,26,26,0,23,25,28,27,19],
[24,22,26,22,28,0,25,31,28,27],
[28,24,27,22,26,26,0,26,31,27],
[20,19,24,21,23,20,25,0,24,25],
[22,22,21,21,24,23,20,27,0,27],
[29,26,27,28,32,24,24,26,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,23,22,19,27,22,25,23,29],
[22,0,29,21,27,29,25,26,26,31],
[28,22,0,24,26,27,26,23,24,27],
[29,30,27,0,25,31,18,28,28,30],
[32,24,25,26,0,24,22,27,24,28],
[24,22,24,20,27,0,17,25,27,35],
[29,26,25,33,29,34,0,28,29,33],
[26,25,28,23,24,26,23,0,29,25],
[28,25,27,23,27,24,22,22,0,25],
[22,20,24,21,23,16,18,26,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,27,29,22,29,20,22,17,23],
[28,0,22,26,20,21,23,21,19,34],
[24,29,0,28,25,23,31,23,28,21],
[22,25,23,0,28,11,30,18,25,23],
[29,31,26,23,0,17,27,23,25,31],
[22,30,28,40,34,0,27,29,24,34],
[31,28,20,21,24,24,0,26,23,29],
[29,30,28,33,28,22,25,0,21,29],
[34,32,23,26,26,27,28,30,0,38],
[28,17,30,28,20,17,22,22,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,20,17,24,26,20,26,25,27],
[27,0,19,19,26,23,18,27,18,28],
[31,32,0,24,30,28,30,26,25,28],
[34,32,27,0,35,28,25,30,27,30],
[27,25,21,16,0,23,14,23,23,27],
[25,28,23,23,28,0,24,27,24,28],
[31,33,21,26,37,27,0,32,33,34],
[25,24,25,21,28,24,19,0,23,25],
[26,33,26,24,28,27,18,28,0,28],
[24,23,23,21,24,23,17,26,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,21,31,34,32,30,12,30,28],
[12,0,18,30,22,24,29,6,24,20],
[30,33,0,29,26,29,22,17,26,28],
[20,21,22,0,30,29,36,20,17,17],
[17,29,25,21,0,29,30,11,13,16],
[19,27,22,22,22,0,27,15,15,15],
[21,22,29,15,21,24,0,22,14,20],
[39,45,34,31,40,36,29,0,24,36],
[21,27,25,34,38,36,37,27,0,26],
[23,31,23,34,35,36,31,15,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,15,20,13,25,25,20,23],
[27,0,27,19,23,21,26,27,21,27],
[27,24,0,20,24,16,27,26,25,25],
[36,32,31,0,30,22,34,34,27,32],
[31,28,27,21,0,26,26,27,24,27],
[38,30,35,29,25,0,29,33,27,32],
[26,25,24,17,25,22,0,26,21,24],
[26,24,25,17,24,18,25,0,23,25],
[31,30,26,24,27,24,30,28,0,31],
[28,24,26,19,24,19,27,26,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,21,23,23,26,20,24,22,24],
[27,0,26,27,26,29,25,27,25,30],
[30,25,0,29,26,24,22,29,23,22],
[28,24,22,0,22,27,25,23,19,26],
[28,25,25,29,0,24,26,28,21,30],
[25,22,27,24,27,0,20,25,18,23],
[31,26,29,26,25,31,0,30,27,30],
[27,24,22,28,23,26,21,0,23,26],
[29,26,28,32,30,33,24,28,0,33],
[27,21,29,25,21,28,21,25,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,32,29,25,28,36,28,29,28],
[17,0,24,25,33,26,26,34,23,26],
[19,27,0,34,26,22,33,26,27,25],
[22,26,17,0,30,29,28,27,22,14],
[26,18,25,21,0,20,30,28,19,18],
[23,25,29,22,31,0,30,27,29,30],
[15,25,18,23,21,21,0,30,16,24],
[23,17,25,24,23,24,21,0,17,16],
[22,28,24,29,32,22,35,34,0,29],
[23,25,26,37,33,21,27,35,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,26,28,18,23,18,26,19,21],
[31,0,17,39,23,28,21,28,29,25],
[25,34,0,33,27,31,25,26,29,31],
[23,12,18,0,11,21,17,17,14,18],
[33,28,24,40,0,34,26,28,30,32],
[28,23,20,30,17,0,23,27,24,21],
[33,30,26,34,25,28,0,26,29,29],
[25,23,25,34,23,24,25,0,24,22],
[32,22,22,37,21,27,22,27,0,30],
[30,26,20,33,19,30,22,29,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,30,31,22,24,18,23,28,30],
[19,0,19,14,23,21,22,16,23,21],
[21,32,0,22,31,22,24,20,36,29],
[20,37,29,0,31,26,32,23,24,29],
[29,28,20,20,0,21,13,28,25,35],
[27,30,29,25,30,0,26,20,29,29],
[33,29,27,19,38,25,0,28,25,32],
[28,35,31,28,23,31,23,0,29,29],
[23,28,15,27,26,22,26,22,0,22],
[21,30,22,22,16,22,19,22,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,27,25,23,18,25,28,18,21],
[29,0,24,27,24,28,25,17,33,29],
[24,27,0,29,30,29,27,32,24,22],
[26,24,22,0,41,24,28,24,31,25],
[28,27,21,10,0,21,22,25,34,15],
[33,23,22,27,30,0,25,26,28,19],
[26,26,24,23,29,26,0,34,24,24],
[23,34,19,27,26,25,17,0,33,19],
[33,18,27,20,17,23,27,18,0,17],
[30,22,29,26,36,32,27,32,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,31,20,26,20,18,23,38,30],
[27,0,34,19,24,27,20,28,41,33],
[20,17,0,17,22,27,21,26,38,29],
[31,32,34,0,27,29,19,23,41,33],
[25,27,29,24,0,30,27,22,28,23],
[31,24,24,22,21,0,33,27,35,31],
[33,31,30,32,24,18,0,24,36,22],
[28,23,25,28,29,24,27,0,43,39],
[13,10,13,10,23,16,15,8,0,21],
[21,18,22,18,28,20,29,12,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,18,28,26,24,20,20,19,26],
[21,0,18,15,18,20,16,19,11,24],
[33,33,0,32,27,21,21,29,17,29],
[23,36,19,0,25,26,20,22,15,26],
[25,33,24,26,0,25,22,30,24,26],
[27,31,30,25,26,0,28,28,26,30],
[31,35,30,31,29,23,0,27,19,29],
[31,32,22,29,21,23,24,0,20,27],
[32,40,34,36,27,25,32,31,0,33],
[25,27,22,25,25,21,22,24,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,24,29,33,25,31,33,32,35],
[20,0,27,23,31,17,27,29,28,27],
[27,24,0,24,26,29,26,33,33,25],
[22,28,27,0,29,28,29,30,31,28],
[18,20,25,22,0,25,20,26,27,26],
[26,34,22,23,26,0,31,31,29,27],
[20,24,25,22,31,20,0,26,25,24],
[18,22,18,21,25,20,25,0,28,24],
[19,23,18,20,24,22,26,23,0,26],
[16,24,26,23,25,24,27,27,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,20,30,22,19,20,17,17,19],
[31,0,22,33,24,24,19,27,25,27],
[31,29,0,27,25,26,17,22,21,20],
[21,18,24,0,22,22,22,14,22,17],
[29,27,26,29,0,18,19,20,24,20],
[32,27,25,29,33,0,22,31,31,27],
[31,32,34,29,32,29,0,23,26,30],
[34,24,29,37,31,20,28,0,27,29],
[34,26,30,29,27,20,25,24,0,24],
[32,24,31,34,31,24,21,22,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,20,29,34,32,20,33,28,37],
[5,0,10,19,24,22,1,1,10,18],
[31,41,0,50,28,37,29,22,36,32],
[22,32,1,0,24,23,25,13,28,14],
[17,27,23,27,0,22,14,18,27,18],
[19,29,14,28,29,0,20,10,24,18],
[31,50,22,26,37,31,0,31,31,27],
[18,50,29,38,33,41,20,0,33,46],
[23,41,15,23,24,27,20,18,0,23],
[14,33,19,37,33,33,24,5,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,31,21,21,24,22,20,27,29],
[18,0,24,19,19,24,21,20,26,26],
[20,27,0,15,15,21,20,13,19,23],
[30,32,36,0,26,26,27,24,29,29],
[30,32,36,25,0,28,24,26,32,30],
[27,27,30,25,23,0,22,17,29,24],
[29,30,31,24,27,29,0,26,26,25],
[31,31,38,27,25,34,25,0,31,32],
[24,25,32,22,19,22,25,20,0,23],
[22,25,28,22,21,27,26,19,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,29,30,25,30,26,29,28,25],
[24,0,27,31,28,30,29,28,25,22],
[22,24,0,26,22,24,24,20,24,22],
[21,20,25,0,26,25,20,20,21,21],
[26,23,29,25,0,29,24,26,26,23],
[21,21,27,26,22,0,25,20,26,26],
[25,22,27,31,27,26,0,28,27,24],
[22,23,31,31,25,31,23,0,26,21],
[23,26,27,30,25,25,24,25,0,27],
[26,29,29,30,28,25,27,30,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,29,35,33,32,31,29,34,28],
[28,0,25,32,37,33,34,39,32,30],
[22,26,0,34,33,35,37,28,31,28],
[16,19,17,0,34,33,25,30,29,20],
[18,14,18,17,0,26,22,25,31,24],
[19,18,16,18,25,0,28,26,22,26],
[20,17,14,26,29,23,0,26,24,21],
[22,12,23,21,26,25,25,0,24,24],
[17,19,20,22,20,29,27,27,0,27],
[23,21,23,31,27,25,30,27,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,22,25,28,23,24,28,27,30],
[25,0,30,26,29,27,22,30,24,25],
[29,21,0,24,28,32,22,34,36,30],
[26,25,27,0,27,24,25,29,26,24],
[23,22,23,24,0,25,26,26,27,28],
[28,24,19,27,26,0,28,23,27,32],
[27,29,29,26,25,23,0,29,33,28],
[23,21,17,22,25,28,22,0,21,27],
[24,27,15,25,24,24,18,30,0,28],
[21,26,21,27,23,19,23,24,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,29,27,20,31,25,23,24,26],
[30,0,33,33,29,38,30,25,29,29],
[22,18,0,26,28,30,25,22,25,25],
[24,18,25,0,19,29,23,14,27,21],
[31,22,23,32,0,41,27,26,30,26],
[20,13,21,22,10,0,19,15,18,21],
[26,21,26,28,24,32,0,27,24,29],
[28,26,29,37,25,36,24,0,31,30],
[27,22,26,24,21,33,27,20,0,29],
[25,22,26,30,25,30,22,21,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,22,29,29,21,25,33,25,20],
[35,0,23,34,35,27,26,37,38,24],
[29,28,0,30,38,25,31,36,33,28],
[22,17,21,0,23,21,25,31,26,20],
[22,16,13,28,0,26,26,22,29,15],
[30,24,26,30,25,0,25,33,28,20],
[26,25,20,26,25,26,0,29,41,21],
[18,14,15,20,29,18,22,0,20,14],
[26,13,18,25,22,23,10,31,0,20],
[31,27,23,31,36,31,30,37,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,22,23,26,25,23,22,31,21],
[25,0,22,25,23,20,21,24,25,23],
[29,29,0,31,25,23,32,23,27,29],
[28,26,20,0,24,24,23,27,25,24],
[25,28,26,27,0,21,23,26,32,25],
[26,31,28,27,30,0,19,22,32,25],
[28,30,19,28,28,32,0,26,33,27],
[29,27,28,24,25,29,25,0,33,23],
[20,26,24,26,19,19,18,18,0,17],
[30,28,22,27,26,26,24,28,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,28,27,28,27,28,28,24,27],
[19,0,26,26,27,21,22,23,19,25],
[23,25,0,27,28,24,27,24,23,28],
[24,25,24,0,27,18,23,22,22,24],
[23,24,23,24,0,19,25,25,15,20],
[24,30,27,33,32,0,31,30,27,33],
[23,29,24,28,26,20,0,19,15,22],
[23,28,27,29,26,21,32,0,20,23],
[27,32,28,29,36,24,36,31,0,27],
[24,26,23,27,31,18,29,28,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,27,27,32,27,22,33,28,23],
[28,0,29,28,25,20,28,42,20,34],
[24,22,0,29,30,18,30,45,21,26],
[24,23,22,0,33,22,31,33,21,32],
[19,26,21,18,0,18,27,25,35,29],
[24,31,33,29,33,0,33,44,30,21],
[29,23,21,20,24,18,0,25,38,29],
[18,9,6,18,26,7,26,0,16,18],
[23,31,30,30,16,21,13,35,0,20],
[28,17,25,19,22,30,22,33,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,7,22,34,16,33,31,33,19],
[33,0,28,43,22,44,43,39,23,40],
[44,23,0,33,33,23,33,39,33,30],
[29,8,18,0,22,18,33,46,18,19],
[17,29,18,29,0,22,26,36,28,28],
[35,7,28,33,29,0,43,36,17,40],
[18,8,18,18,25,8,0,31,25,28],
[20,12,12,5,15,15,20,0,20,17],
[18,28,18,33,23,34,26,31,0,23],
[32,11,21,32,23,11,23,34,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,38,36,33,30,28,28,51,13],
[25,0,38,31,28,25,23,15,46,8],
[13,13,0,26,18,20,13,0,51,13],
[15,20,25,0,28,25,20,15,38,28],
[18,23,33,23,0,30,23,10,46,23],
[21,26,31,26,21,0,26,13,31,26],
[23,28,38,31,28,25,0,13,46,21],
[23,36,51,36,41,38,38,0,51,13],
[0,5,0,13,5,20,5,0,0,13],
[38,43,38,23,28,25,30,38,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,22,23,21,26,20,31,30,27],
[27,0,21,19,29,30,23,33,34,26],
[29,30,0,26,26,29,19,30,30,22],
[28,32,25,0,28,31,24,35,36,26],
[30,22,25,23,0,30,20,34,33,29],
[25,21,22,20,21,0,19,29,26,22],
[31,28,32,27,31,32,0,30,30,23],
[20,18,21,16,17,22,21,0,22,15],
[21,17,21,15,18,25,21,29,0,21],
[24,25,29,25,22,29,28,36,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,51,51,51,51,51,9,28,51],
[0,0,9,19,19,28,9,9,28,9],
[0,42,0,19,19,51,32,9,28,23],
[0,32,32,0,42,51,32,9,9,32],
[0,32,32,9,0,32,32,9,9,32],
[0,23,0,0,19,0,23,9,9,23],
[0,42,19,19,19,28,0,9,28,23],
[42,42,42,42,42,42,42,0,19,42],
[23,23,23,42,42,42,23,32,0,23],
[0,42,28,19,19,28,28,9,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,26,26,29,28,20,33,20,30],
[32,0,20,26,28,27,24,28,20,35],
[25,31,0,35,30,31,25,35,27,33],
[25,25,16,0,23,27,18,29,17,19],
[22,23,21,28,0,29,24,25,21,26],
[23,24,20,24,22,0,20,27,19,24],
[31,27,26,33,27,31,0,39,23,33],
[18,23,16,22,26,24,12,0,14,25],
[31,31,24,34,30,32,28,37,0,36],
[21,16,18,32,25,27,18,26,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,22,25,33,23,23,28,26,23],
[28,0,32,25,24,19,27,28,25,25],
[29,19,0,26,23,25,28,28,26,27],
[26,26,25,0,26,23,25,33,25,20],
[18,27,28,25,0,17,22,32,21,23],
[28,32,26,28,34,0,27,31,28,25],
[28,24,23,26,29,24,0,27,21,17],
[23,23,23,18,19,20,24,0,22,18],
[25,26,25,26,30,23,30,29,0,24],
[28,26,24,31,28,26,34,33,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,26,37,32,34,24,24,33,32],
[14,0,20,23,24,28,22,20,26,19],
[25,31,0,26,31,22,23,32,30,27],
[14,28,25,0,22,20,26,18,21,14],
[19,27,20,29,0,32,24,23,32,32],
[17,23,29,31,19,0,33,12,32,28],
[27,29,28,25,27,18,0,28,32,31],
[27,31,19,33,28,39,23,0,30,31],
[18,25,21,30,19,19,19,21,0,19],
[19,32,24,37,19,23,20,20,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,25,23,29,26,34,31,23,21],
[32,0,21,24,29,28,30,34,26,26],
[26,30,0,30,31,26,30,33,24,27],
[28,27,21,0,26,25,26,30,20,24],
[22,22,20,25,0,21,26,28,26,18],
[25,23,25,26,30,0,33,36,25,28],
[17,21,21,25,25,18,0,25,18,18],
[20,17,18,21,23,15,26,0,18,22],
[28,25,27,31,25,26,33,33,0,27],
[30,25,24,27,33,23,33,29,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,35,36,35,15,36,48,22,23],
[29,0,31,27,20,24,23,48,30,27],
[16,20,0,25,25,23,25,37,17,26],
[15,24,26,0,9,11,34,32,13,21],
[16,31,26,42,0,19,27,31,27,24],
[36,27,28,40,32,0,29,40,39,23],
[15,28,26,17,24,22,0,29,16,25],
[3,3,14,19,20,11,22,0,3,11],
[29,21,34,38,24,12,35,48,0,22],
[28,24,25,30,27,28,26,40,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,27,29,24,29,24,26,27],
[26,0,28,23,24,29,18,21,27,30],
[26,23,0,26,20,28,20,29,25,29],
[24,28,25,0,24,29,22,28,22,28],
[22,27,31,27,0,25,24,26,25,26],
[27,22,23,22,26,0,24,23,25,18],
[22,33,31,29,27,27,0,30,26,32],
[27,30,22,23,25,28,21,0,23,31],
[25,24,26,29,26,26,25,28,0,31],
[24,21,22,23,25,33,19,20,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,14,28,20,16,24,29,27],
[28,0,19,15,17,14,14,13,25,29],
[25,32,0,26,23,18,23,34,31,32],
[37,36,25,0,32,31,28,37,41,37],
[23,34,28,19,0,25,26,27,28,31],
[31,37,33,20,26,0,30,34,35,28],
[35,37,28,23,25,21,0,43,36,36],
[27,38,17,14,24,17,8,0,24,29],
[22,26,20,10,23,16,15,27,0,30],
[24,22,19,14,20,23,15,22,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,21,19,26,24,31,26,25,26],
[26,0,22,29,36,26,29,29,21,27],
[30,29,0,26,35,36,31,31,30,25],
[32,22,25,0,33,28,29,25,22,22],
[25,15,16,18,0,21,22,19,19,21],
[27,25,15,23,30,0,26,27,12,24],
[20,22,20,22,29,25,0,22,23,22],
[25,22,20,26,32,24,29,0,23,21],
[26,30,21,29,32,39,28,28,0,25],
[25,24,26,29,30,27,29,30,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,25,10,16,16,41,35,35,25],
[16,0,41,26,16,16,16,41,26,16],
[26,10,0,26,26,26,26,26,26,26],
[41,25,25,0,41,16,41,25,51,25],
[35,35,25,10,0,26,51,35,35,25],
[35,35,25,35,25,0,51,35,35,25],
[10,35,25,10,0,0,0,35,35,25],
[16,10,25,26,16,16,16,0,26,16],
[16,25,25,0,16,16,16,25,0,25],
[26,35,25,26,26,26,26,35,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,33,22,25,30,26,25,29,20],
[21,0,37,26,33,34,28,20,30,17],
[18,14,0,19,19,22,21,10,23,11],
[29,25,32,0,33,32,31,18,27,22],
[26,18,32,18,0,22,28,18,34,20],
[21,17,29,19,29,0,32,27,25,20],
[25,23,30,20,23,19,0,23,24,18],
[26,31,41,33,33,24,28,0,34,29],
[22,21,28,24,17,26,27,17,0,16],
[31,34,40,29,31,31,33,22,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,9,0,0,0,18,0,9,27],
[42,0,9,18,18,18,18,0,27,27],
[42,42,0,33,33,27,18,24,42,42],
[51,33,18,0,9,18,27,33,33,51],
[51,33,18,42,0,18,36,33,33,51],
[51,33,24,33,33,0,27,15,24,51],
[33,33,33,24,15,24,0,24,33,51],
[51,51,27,18,18,36,27,0,42,36],
[42,24,9,18,18,27,18,9,0,27],
[24,24,9,0,0,0,0,15,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,23,22,29,27,22,25,22,24],
[28,0,24,26,28,30,24,28,25,26],
[28,27,0,27,27,29,23,25,22,25],
[29,25,24,0,22,28,25,27,26,26],
[22,23,24,29,0,23,19,25,21,27],
[24,21,22,23,28,0,28,26,22,23],
[29,27,28,26,32,23,0,26,23,27],
[26,23,26,24,26,25,25,0,25,27],
[29,26,29,25,30,29,28,26,0,29],
[27,25,26,25,24,28,24,24,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,20,30,25,26,26,28,26,27],
[22,0,22,26,26,33,29,27,26,21],
[31,29,0,23,36,38,36,33,38,29],
[21,25,28,0,29,30,17,25,20,24],
[26,25,15,22,0,27,29,30,24,22],
[25,18,13,21,24,0,26,25,19,17],
[25,22,15,34,22,25,0,25,20,28],
[23,24,18,26,21,26,26,0,29,19],
[25,25,13,31,27,32,31,22,0,23],
[24,30,22,27,29,34,23,32,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,25,29,22,20,28,22,21,30],
[24,0,24,28,21,18,23,17,19,28],
[26,27,0,28,18,17,23,18,23,26],
[22,23,23,0,20,20,28,18,23,30],
[29,30,33,31,0,22,32,27,27,36],
[31,33,34,31,29,0,29,26,25,29],
[23,28,28,23,19,22,0,21,23,28],
[29,34,33,33,24,25,30,0,24,29],
[30,32,28,28,24,26,28,27,0,30],
[21,23,25,21,15,22,23,22,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,24,32,14,15,15,5,25,25],
[26,0,24,41,14,5,15,0,34,5],
[27,27,0,37,14,17,10,10,15,10],
[19,10,14,0,14,0,10,0,15,10],
[37,37,37,37,0,37,37,37,25,37],
[36,46,34,51,14,0,10,19,34,15],
[36,36,41,41,14,41,0,9,24,41],
[46,51,41,51,14,32,42,0,34,42],
[26,17,36,36,26,17,27,17,0,17],
[26,46,41,41,14,36,10,9,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,33,30,26,24,21,34,23,27],
[23,0,30,30,18,19,24,27,21,25],
[18,21,0,21,7,15,15,22,16,17],
[21,21,30,0,14,21,21,32,20,29],
[25,33,44,37,0,33,27,26,35,32],
[27,32,36,30,18,0,21,33,18,37],
[30,27,36,30,24,30,0,33,30,38],
[17,24,29,19,25,18,18,0,21,28],
[28,30,35,31,16,33,21,30,0,34],
[24,26,34,22,19,14,13,23,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,21,27,21,23,23,25,19,26],
[31,0,28,34,22,22,32,29,31,30],
[30,23,0,26,24,27,28,23,26,25],
[24,17,25,0,18,24,19,14,17,29],
[30,29,27,33,0,31,27,30,23,33],
[28,29,24,27,20,0,23,21,24,25],
[28,19,23,32,24,28,0,25,19,25],
[26,22,28,37,21,30,26,0,31,28],
[32,20,25,34,28,27,32,20,0,31],
[25,21,26,22,18,26,26,23,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,24,33,32,29,25,29,30,30],
[26,0,29,29,34,29,31,29,28,25],
[27,22,0,27,34,29,26,28,29,28],
[18,22,24,0,23,28,23,17,24,23],
[19,17,17,28,0,21,22,23,28,23],
[22,22,22,23,30,0,25,22,26,24],
[26,20,25,28,29,26,0,26,25,23],
[22,22,23,34,28,29,25,0,27,26],
[21,23,22,27,23,25,26,24,0,23],
[21,26,23,28,28,27,28,25,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,38,34,23,24,24,34,35],
[23,0,18,33,23,24,21,23,23,26],
[25,33,0,36,38,29,22,24,30,36],
[13,18,15,0,23,18,24,26,16,26],
[17,28,13,28,0,22,19,17,19,28],
[28,27,22,33,29,0,24,21,28,30],
[27,30,29,27,32,27,0,20,28,26],
[27,28,27,25,34,30,31,0,25,31],
[17,28,21,35,32,23,23,26,0,30],
[16,25,15,25,23,21,25,20,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,26,29,27,31,34,20,25,26],
[21,0,15,16,19,18,23,23,18,21],
[25,36,0,23,26,30,25,21,24,31],
[22,35,28,0,27,34,34,20,25,26],
[24,32,25,24,0,26,27,22,26,26],
[20,33,21,17,25,0,21,14,14,19],
[17,28,26,17,24,30,0,18,25,22],
[31,28,30,31,29,37,33,0,21,24],
[26,33,27,26,25,37,26,30,0,22],
[25,30,20,25,25,32,29,27,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,22,26,29,26,25,26,23,29],
[22,0,23,26,28,18,21,25,18,28],
[29,28,0,29,30,25,24,22,25,29],
[25,25,22,0,27,24,24,21,21,28],
[22,23,21,24,0,18,20,24,21,28],
[25,33,26,27,33,0,28,27,31,35],
[26,30,27,27,31,23,0,21,22,27],
[25,26,29,30,27,24,30,0,25,29],
[28,33,26,30,30,20,29,26,0,31],
[22,23,22,23,23,16,24,22,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,24,32,29,34,39,25,32,22],
[11,0,7,22,0,12,18,4,17,16],
[27,44,0,31,20,27,33,26,35,35],
[19,29,20,0,20,20,11,11,19,19],
[22,51,31,31,0,41,37,28,38,25],
[17,39,24,31,10,0,24,10,27,21],
[12,33,18,40,14,27,0,19,33,30],
[26,47,25,40,23,41,32,0,40,34],
[19,34,16,32,13,24,18,11,0,32],
[29,35,16,32,26,30,21,17,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,21,31,27,24,25,14,23,34],
[22,0,40,41,40,40,38,28,34,40],
[30,11,0,34,19,34,23,24,36,33],
[20,10,17,0,11,33,21,7,28,21],
[24,11,32,40,0,28,28,25,33,39],
[27,11,17,18,23,0,15,8,34,33],
[26,13,28,30,23,36,0,15,33,32],
[37,23,27,44,26,43,36,0,44,34],
[28,17,15,23,18,17,18,7,0,30],
[17,11,18,30,12,18,19,17,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,22,27,18,30,29,28,19,24],
[30,0,22,24,17,33,30,28,28,23],
[29,29,0,26,24,31,36,33,32,30],
[24,27,25,0,22,27,25,32,24,24],
[33,34,27,29,0,33,25,31,26,23],
[21,18,20,24,18,0,20,23,17,22],
[22,21,15,26,26,31,0,27,26,24],
[23,23,18,19,20,28,24,0,18,18],
[32,23,19,27,25,34,25,33,0,37],
[27,28,21,27,28,29,27,33,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,35,34,20,22,23,31,25,16],
[29,0,36,32,26,30,34,30,28,24],
[16,15,0,22,19,27,23,22,21,15],
[17,19,29,0,17,27,23,26,15,19],
[31,25,32,34,0,28,28,32,23,24],
[29,21,24,24,23,0,22,36,17,25],
[28,17,28,28,23,29,0,36,27,22],
[20,21,29,25,19,15,15,0,11,19],
[26,23,30,36,28,34,24,40,0,27],
[35,27,36,32,27,26,29,32,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,13,20,18,23,24,27,24,21],
[38,0,22,22,25,35,27,36,25,24],
[38,29,0,25,33,26,31,38,30,24],
[31,29,26,0,25,26,28,32,20,24],
[33,26,18,26,0,27,22,30,25,17],
[28,16,25,25,24,0,24,29,19,15],
[27,24,20,23,29,27,0,36,24,18],
[24,15,13,19,21,22,15,0,19,21],
[27,26,21,31,26,32,27,32,0,28],
[30,27,27,27,34,36,33,30,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,26,23,20,26,27,16,31,12],
[27,0,32,26,27,27,28,26,23,21],
[25,19,0,21,22,20,23,24,18,12],
[28,25,30,0,25,31,25,24,22,13],
[31,24,29,26,0,33,21,23,18,26],
[25,24,31,20,18,0,18,21,19,18],
[24,23,28,26,30,33,0,27,25,20],
[35,25,27,27,28,30,24,0,27,20],
[20,28,33,29,33,32,26,24,0,25],
[39,30,39,38,25,33,31,31,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,30,23,31,29,29,25,28],
[24,0,24,29,21,23,27,27,22,25],
[24,27,0,25,20,28,30,28,26,29],
[21,22,26,0,16,30,29,27,25,28],
[28,30,31,35,0,36,32,29,25,28],
[20,28,23,21,15,0,24,26,20,21],
[22,24,21,22,19,27,0,24,23,24],
[22,24,23,24,22,25,27,0,25,26],
[26,29,25,26,26,31,28,26,0,29],
[23,26,22,23,23,30,27,25,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,30,26,25,23,18,21,20,19],
[29,0,26,33,24,24,26,28,31,25],
[21,25,0,25,22,18,21,22,25,23],
[25,18,26,0,18,22,16,19,21,21],
[26,27,29,33,0,25,17,23,26,31],
[28,27,33,29,26,0,22,26,27,28],
[33,25,30,35,34,29,0,27,34,25],
[30,23,29,32,28,25,24,0,32,28],
[31,20,26,30,25,24,17,19,0,22],
[32,26,28,30,20,23,26,23,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,30,34,35,27,38,33,31,26],
[26,0,25,27,26,24,28,27,23,26],
[21,26,0,36,21,23,28,15,20,22],
[17,24,15,0,17,22,34,25,24,18],
[16,25,30,34,0,24,29,27,29,22],
[24,27,28,29,27,0,30,26,20,24],
[13,23,23,17,22,21,0,17,28,25],
[18,24,36,26,24,25,34,0,30,33],
[20,28,31,27,22,31,23,21,0,27],
[25,25,29,33,29,27,26,18,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,25,30,32,31,31,29,29,34],
[22,0,24,33,33,22,29,29,27,19],
[26,27,0,28,29,31,36,31,25,29],
[21,18,23,0,29,28,33,29,26,19],
[19,18,22,22,0,21,30,30,24,22],
[20,29,20,23,30,0,34,29,28,27],
[20,22,15,18,21,17,0,28,17,18],
[22,22,20,22,21,22,23,0,22,22],
[22,24,26,25,27,23,34,29,0,20],
[17,32,22,32,29,24,33,29,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,28,28,36,31,28,20,32,33],
[19,0,21,18,25,22,27,18,25,22],
[23,30,0,13,22,17,17,26,22,24],
[23,33,38,0,28,25,26,20,28,34],
[15,26,29,23,0,23,28,23,23,29],
[20,29,34,26,28,0,25,25,22,26],
[23,24,34,25,23,26,0,21,28,32],
[31,33,25,31,28,26,30,0,31,38],
[19,26,29,23,28,29,23,20,0,32],
[18,29,27,17,22,25,19,13,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,0,5,2,7,20,15,2,2],
[49,0,29,35,41,45,40,44,21,29],
[51,22,0,30,30,32,32,27,22,23],
[46,16,21,0,36,33,40,38,24,26],
[49,10,21,15,0,29,25,41,18,24],
[44,6,19,18,22,0,23,24,21,24],
[31,11,19,11,26,28,0,23,6,19],
[36,7,24,13,10,27,28,0,8,19],
[49,30,29,27,33,30,45,43,0,19],
[49,22,28,25,27,27,32,32,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,38,30,40,30,28,28,30,23],
[19,0,23,23,13,21,15,7,27,29],
[13,28,0,15,13,19,10,11,12,12],
[21,28,36,0,32,25,21,15,26,36],
[11,38,38,19,0,23,17,14,18,31],
[21,30,32,26,28,0,23,18,34,32],
[23,36,41,30,34,28,0,22,36,34],
[23,44,40,36,37,33,29,0,36,44],
[21,24,39,25,33,17,15,15,0,34],
[28,22,39,15,20,19,17,7,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,20,26,22,20,23,19,15,26],
[22,0,17,31,24,22,24,22,18,28],
[31,34,0,35,21,30,26,27,28,36],
[25,20,16,0,23,24,19,18,21,28],
[29,27,30,28,0,29,28,27,22,29],
[31,29,21,27,22,0,21,23,21,30],
[28,27,25,32,23,30,0,27,23,34],
[32,29,24,33,24,28,24,0,22,32],
[36,33,23,30,29,30,28,29,0,35],
[25,23,15,23,22,21,17,19,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,28,19,24,29,20,20,31,25],
[31,0,33,17,28,32,32,26,34,26],
[23,18,0,18,25,26,27,19,26,21],
[32,34,33,0,34,34,32,25,31,23],
[27,23,26,17,0,25,25,18,25,23],
[22,19,25,17,26,0,25,15,22,18],
[31,19,24,19,26,26,0,21,32,22],
[31,25,32,26,33,36,30,0,34,27],
[20,17,25,20,26,29,19,17,0,17],
[26,25,30,28,28,33,29,24,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,22,28,24,26,27,25,28,25],
[25,0,27,27,22,21,29,21,29,23],
[29,24,0,29,25,23,27,27,31,22],
[23,24,22,0,22,21,27,24,26,19],
[27,29,26,29,0,24,30,27,37,24],
[25,30,28,30,27,0,38,28,31,30],
[24,22,24,24,21,13,0,18,23,22],
[26,30,24,27,24,23,33,0,30,22],
[23,22,20,25,14,20,28,21,0,19],
[26,28,29,32,27,21,29,29,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,27,27,27,32,23,23,29,23],
[16,0,17,10,21,20,13,16,15,16],
[24,34,0,23,26,35,21,25,31,28],
[24,41,28,0,27,29,24,25,33,26],
[24,30,25,24,0,30,27,30,31,31],
[19,31,16,22,21,0,22,25,26,25],
[28,38,30,27,24,29,0,22,30,21],
[28,35,26,26,21,26,29,0,30,25],
[22,36,20,18,20,25,21,21,0,21],
[28,35,23,25,20,26,30,26,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,29,29,27,36,26,28,30,30],
[26,0,22,28,28,33,27,24,24,28],
[22,29,0,28,29,32,26,19,25,26],
[22,23,23,0,19,28,25,23,24,28],
[24,23,22,32,0,31,22,22,25,23],
[15,18,19,23,20,0,18,15,19,21],
[25,24,25,26,29,33,0,27,22,25],
[23,27,32,28,29,36,24,0,30,27],
[21,27,26,27,26,32,29,21,0,24],
[21,23,25,23,28,30,26,24,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,28,18,30,32,27,18,28,29],
[34,0,29,19,25,31,17,32,22,33],
[23,22,0,27,26,27,16,27,14,23],
[33,32,24,0,33,35,23,34,22,32],
[21,26,25,18,0,25,23,27,23,23],
[19,20,24,16,26,0,16,25,5,14],
[24,34,35,28,28,35,0,34,31,34],
[33,19,24,17,24,26,17,0,22,28],
[23,29,37,29,28,46,20,29,0,41],
[22,18,28,19,28,37,17,23,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,24,26,27,28,25,27,20,30],
[24,0,23,25,22,29,23,25,22,32],
[27,28,0,28,27,30,24,29,28,30],
[25,26,23,0,22,24,19,23,23,29],
[24,29,24,29,0,30,23,32,27,26],
[23,22,21,27,21,0,25,28,22,22],
[26,28,27,32,28,26,0,28,24,29],
[24,26,22,28,19,23,23,0,18,25],
[31,29,23,28,24,29,27,33,0,31],
[21,19,21,22,25,29,22,26,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,23,22,22,22,20,22,27,23],
[26,0,31,25,24,25,26,27,22,24],
[28,20,0,24,24,22,24,21,25,29],
[29,26,27,0,28,24,24,25,31,25],
[29,27,27,23,0,28,28,26,27,34],
[29,26,29,27,23,0,24,24,32,26],
[31,25,27,27,23,27,0,25,29,27],
[29,24,30,26,25,27,26,0,28,27],
[24,29,26,20,24,19,22,23,0,23],
[28,27,22,26,17,25,24,24,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,26,28,22,18,26,27,20,31],
[26,0,31,33,25,29,27,29,26,26],
[25,20,0,24,20,25,25,23,22,28],
[23,18,27,0,32,21,31,26,23,23],
[29,26,31,19,0,20,26,22,16,28],
[33,22,26,30,31,0,31,27,30,29],
[25,24,26,20,25,20,0,27,25,21],
[24,22,28,25,29,24,24,0,22,26],
[31,25,29,28,35,21,26,29,0,32],
[20,25,23,28,23,22,30,25,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,20,20,22,25,22,21,24,21],
[33,0,27,25,24,27,30,31,31,25],
[31,24,0,29,25,31,30,24,27,20],
[31,26,22,0,24,17,28,24,28,18],
[29,27,26,27,0,29,35,25,30,28],
[26,24,20,34,22,0,22,23,31,23],
[29,21,21,23,16,29,0,23,24,18],
[30,20,27,27,26,28,28,0,27,24],
[27,20,24,23,21,20,27,24,0,23],
[30,26,31,33,23,28,33,27,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,31,29,22,19,17,28,20,21],
[23,0,30,30,24,28,17,25,25,24],
[20,21,0,18,21,18,19,24,20,22],
[22,21,33,0,26,23,16,19,26,23],
[29,27,30,25,0,22,18,28,26,25],
[32,23,33,28,29,0,24,33,27,32],
[34,34,32,35,33,27,0,25,34,24],
[23,26,27,32,23,18,26,0,26,19],
[31,26,31,25,25,24,17,25,0,20],
[30,27,29,28,26,19,27,32,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,22,17,17,32,14,15,23,22],
[20,0,21,23,18,27,17,16,31,25],
[29,30,0,18,30,34,26,26,32,35],
[34,28,33,0,26,34,29,16,29,39],
[34,33,21,25,0,32,28,27,31,32],
[19,24,17,17,19,0,18,10,31,19],
[37,34,25,22,23,33,0,29,30,35],
[36,35,25,35,24,41,22,0,30,36],
[28,20,19,22,20,20,21,21,0,27],
[29,26,16,12,19,32,16,15,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,34,23,21,29,16,31,23,30],
[25,0,32,23,21,36,25,27,26,25],
[17,19,0,24,17,26,19,26,19,28],
[28,28,27,0,22,26,26,35,19,33],
[30,30,34,29,0,34,28,30,19,29],
[22,15,25,25,17,0,16,26,20,29],
[35,26,32,25,23,35,0,28,19,35],
[20,24,25,16,21,25,23,0,18,18],
[28,25,32,32,32,31,32,33,0,32],
[21,26,23,18,22,22,16,33,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,26,27,24,26,28,23,19,26],
[27,0,30,34,31,32,33,31,26,24],
[25,21,0,27,23,28,24,25,20,16],
[24,17,24,0,24,30,25,31,25,16],
[27,20,28,27,0,30,33,24,29,20],
[25,19,23,21,21,0,29,23,23,14],
[23,18,27,26,18,22,0,22,22,15],
[28,20,26,20,27,28,29,0,25,21],
[32,25,31,26,22,28,29,26,0,19],
[25,27,35,35,31,37,36,30,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,26,16,16,24,20,23,20,20],
[38,0,26,33,29,27,27,25,26,30],
[25,25,0,29,17,20,19,24,22,23],
[35,18,22,0,16,22,21,28,20,28],
[35,22,34,35,0,24,23,24,25,34],
[27,24,31,29,27,0,20,23,23,27],
[31,24,32,30,28,31,0,29,26,34],
[28,26,27,23,27,28,22,0,22,26],
[31,25,29,31,26,28,25,29,0,37],
[31,21,28,23,17,24,17,25,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,27,24,28,25,25,25,20,34],
[25,0,21,22,26,22,25,27,26,35],
[24,30,0,26,27,33,26,27,21,37],
[27,29,25,0,22,35,33,28,23,33],
[23,25,24,29,0,28,27,24,23,30],
[26,29,18,16,23,0,21,25,19,29],
[26,26,25,18,24,30,0,25,21,37],
[26,24,24,23,27,26,26,0,22,31],
[31,25,30,28,28,32,30,29,0,35],
[17,16,14,18,21,22,14,20,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,22,26,29,24,32,27,25,26],
[26,0,24,24,28,25,26,32,29,32],
[29,27,0,34,25,33,32,29,27,34],
[25,27,17,0,23,28,33,29,17,23],
[22,23,26,28,0,25,29,33,30,31],
[27,26,18,23,26,0,24,27,21,26],
[19,25,19,18,22,27,0,30,18,20],
[24,19,22,22,18,24,21,0,28,20],
[26,22,24,34,21,30,33,23,0,31],
[25,19,17,28,20,25,31,31,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,20,21,24,29,32,27,33,17],
[29,0,29,24,26,26,34,32,36,24],
[31,22,0,28,25,31,38,32,26,33],
[30,27,23,0,28,31,31,37,29,32],
[27,25,26,23,0,32,35,33,22,23],
[22,25,20,20,19,0,26,27,32,13],
[19,17,13,20,16,25,0,27,15,22],
[24,19,19,14,18,24,24,0,17,26],
[18,15,25,22,29,19,36,34,0,25],
[34,27,18,19,28,38,29,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,22,27,16,20,25,22,15,21],
[20,0,8,21,20,15,24,21,16,20],
[29,43,0,31,21,30,32,31,26,30],
[24,30,20,0,26,29,35,29,23,14],
[35,31,30,25,0,25,37,30,28,20],
[31,36,21,22,26,0,28,27,22,28],
[26,27,19,16,14,23,0,20,23,22],
[29,30,20,22,21,24,31,0,23,21],
[36,35,25,28,23,29,28,28,0,27],
[30,31,21,37,31,23,29,30,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,26,15,18,29,28,23,22,16],
[26,0,23,18,29,28,25,19,26,30],
[25,28,0,21,29,29,30,26,23,24],
[36,33,30,0,24,27,33,34,32,30],
[33,22,22,27,0,26,27,24,32,16],
[22,23,22,24,25,0,28,20,18,24],
[23,26,21,18,24,23,0,24,24,23],
[28,32,25,17,27,31,27,0,28,28],
[29,25,28,19,19,33,27,23,0,19],
[35,21,27,21,35,27,28,23,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,18,27,20,29,20,28,19,31],
[28,0,19,24,20,26,26,27,17,28],
[33,32,0,29,26,25,29,28,25,36],
[24,27,22,0,25,31,14,26,26,29],
[31,31,25,26,0,30,26,34,22,30],
[22,25,26,20,21,0,23,25,24,30],
[31,25,22,37,25,28,0,31,23,30],
[23,24,23,25,17,26,20,0,25,33],
[32,34,26,25,29,27,28,26,0,40],
[20,23,15,22,21,21,21,18,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,28,24,24,26,22,23,30,21],
[25,0,25,25,21,25,19,22,25,25],
[23,26,0,21,25,19,24,24,24,22],
[27,26,30,0,33,26,30,25,27,27],
[27,30,26,18,0,25,25,26,30,24],
[25,26,32,25,26,0,27,25,26,24],
[29,32,27,21,26,24,0,23,27,25],
[28,29,27,26,25,26,28,0,29,25],
[21,26,27,24,21,25,24,22,0,26],
[30,26,29,24,27,27,26,26,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,35,23,23,23,23,23,23,29],
[37,0,27,9,21,9,25,31,15,15],
[16,24,0,24,0,0,16,10,0,6],
[28,42,27,0,18,27,37,28,27,27],
[28,30,51,33,0,33,25,42,15,25],
[28,42,51,24,18,0,25,28,15,25],
[28,26,35,14,26,26,0,36,0,6],
[28,20,41,23,9,23,15,0,15,15],
[28,36,51,24,36,36,51,36,0,28],
[22,36,45,24,26,26,45,36,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,28,28,31,19,24,25,29,29],
[26,0,29,20,23,30,28,22,34,26],
[23,22,0,30,29,29,29,31,39,28],
[23,31,21,0,26,28,31,28,33,25],
[20,28,22,25,0,23,28,23,26,28],
[32,21,22,23,28,0,24,29,28,26],
[27,23,22,20,23,27,0,21,35,23],
[26,29,20,23,28,22,30,0,30,29],
[22,17,12,18,25,23,16,21,0,23],
[22,25,23,26,23,25,28,22,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,20,23,19,20,25,23,24,13],
[29,0,26,24,25,30,35,25,30,23],
[31,25,0,31,23,27,29,36,25,26],
[28,27,20,0,26,23,27,32,25,25],
[32,26,28,25,0,26,36,30,29,22],
[31,21,24,28,25,0,29,31,27,23],
[26,16,22,24,15,22,0,28,18,20],
[28,26,15,19,21,20,23,0,23,22],
[27,21,26,26,22,24,33,28,0,22],
[38,28,25,26,29,28,31,29,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,49,46,40,25,32,29,49,27],
[8,0,32,48,40,23,19,15,33,11],
[2,19,0,24,37,24,17,28,49,27],
[5,3,27,0,39,26,19,13,26,5],
[11,11,14,12,0,26,25,21,28,5],
[26,28,27,25,25,0,38,35,41,27],
[19,32,34,32,26,13,0,37,46,28],
[22,36,23,38,30,16,14,0,34,32],
[2,18,2,25,23,10,5,17,0,17],
[24,40,24,46,46,24,23,19,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,32,34,24,23,44,44,18,29],
[17,0,23,25,9,23,19,19,19,7],
[19,28,0,23,7,16,15,33,5,14],
[17,26,28,0,10,20,21,32,15,8],
[27,42,44,41,0,40,31,34,29,15],
[28,28,35,31,11,0,28,40,24,12],
[7,32,36,30,20,23,0,30,5,22],
[7,32,18,19,17,11,21,0,9,6],
[33,32,46,36,22,27,46,42,0,24],
[22,44,37,43,36,39,29,45,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,17,25,16,26,22,20,24,19],
[40,0,25,43,36,33,36,30,28,16],
[34,26,0,36,33,28,26,31,25,25],
[26,8,15,0,18,29,21,27,29,13],
[35,15,18,33,0,22,23,29,28,19],
[25,18,23,22,29,0,19,26,20,14],
[29,15,25,30,28,32,0,23,25,17],
[31,21,20,24,22,25,28,0,24,28],
[27,23,26,22,23,31,26,27,0,22],
[32,35,26,38,32,37,34,23,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,21,17,28,31,17,28,14,26],
[19,0,24,14,26,30,9,21,15,32],
[30,27,0,25,37,31,27,32,20,35],
[34,37,26,0,34,34,30,34,23,29],
[23,25,14,17,0,26,3,28,8,18],
[20,21,20,17,25,0,9,18,14,26],
[34,42,24,21,48,42,0,36,27,33],
[23,30,19,17,23,33,15,0,16,28],
[37,36,31,28,43,37,24,35,0,36],
[25,19,16,22,33,25,18,23,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,28,23,22,31,24,31,17,34],
[17,0,20,22,17,30,24,25,23,28],
[23,31,0,23,28,34,26,32,23,33],
[28,29,28,0,20,25,20,26,23,31],
[29,34,23,31,0,31,28,25,27,29],
[20,21,17,26,20,0,24,22,20,22],
[27,27,25,31,23,27,0,29,25,28],
[20,26,19,25,26,29,22,0,28,27],
[34,28,28,28,24,31,26,23,0,32],
[17,23,18,20,22,29,23,24,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,41,19,19,27,17,23,36,19],
[24,0,41,11,32,34,18,28,24,15],
[10,10,0,10,10,17,14,23,16,17],
[32,40,41,0,35,37,24,44,48,35],
[32,19,41,16,0,29,18,30,32,12],
[24,17,34,14,22,0,17,29,33,8],
[34,33,37,27,33,34,0,29,25,18],
[28,23,28,7,21,22,22,0,21,30],
[15,27,35,3,19,18,26,30,0,18],
[32,36,34,16,39,43,33,21,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,26,24,25,28,28,21,17],
[23,0,30,28,23,21,32,27,24,23],
[25,21,0,26,21,24,28,28,16,23],
[25,23,25,0,22,27,28,31,28,23],
[27,28,30,29,0,25,34,33,30,28],
[26,30,27,24,26,0,34,32,24,22],
[23,19,23,23,17,17,0,23,14,20],
[23,24,23,20,18,19,28,0,21,23],
[30,27,35,23,21,27,37,30,0,28],
[34,28,28,28,23,29,31,28,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,19,26,34,33,10,23,27],
[23,0,20,18,20,27,23,16,18,25],
[25,31,0,23,22,35,30,10,15,20],
[32,33,28,0,28,43,36,26,22,32],
[25,31,29,23,0,34,28,24,23,27],
[17,24,16,8,17,0,22,2,15,12],
[18,28,21,15,23,29,0,13,12,20],
[41,35,41,25,27,49,38,0,26,36],
[28,33,36,29,28,36,39,25,0,29],
[24,26,31,19,24,39,31,15,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,28,31,14,24,20,33,18,29],
[15,0,6,11,17,12,4,5,7,14],
[23,45,0,30,20,33,30,44,26,32],
[20,40,21,0,21,18,6,33,22,32],
[37,34,31,30,0,38,23,32,33,33],
[27,39,18,33,13,0,24,35,25,26],
[31,47,21,45,28,27,0,38,31,40],
[18,46,7,18,19,16,13,0,21,23],
[33,44,25,29,18,26,20,30,0,26],
[22,37,19,19,18,25,11,28,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,23,21,19,23,26,20,23],
[27,0,31,29,24,34,31,28,22,26],
[27,20,0,20,24,25,26,25,19,22],
[28,22,31,0,25,23,32,25,23,24],
[30,27,27,26,0,27,28,27,26,24],
[32,17,26,28,24,0,30,31,20,24],
[28,20,25,19,23,21,0,25,25,25],
[25,23,26,26,24,20,26,0,22,18],
[31,29,32,28,25,31,26,29,0,23],
[28,25,29,27,27,27,26,33,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,31,26,31,31,42,21,26,21],
[8,0,22,16,10,18,26,21,22,6],
[20,29,0,9,23,25,31,17,18,11],
[25,35,42,0,33,38,42,36,39,27],
[20,41,28,18,0,26,37,23,25,16],
[20,33,26,13,25,0,35,21,23,19],
[9,25,20,9,14,16,0,17,19,14],
[30,30,34,15,28,30,34,0,37,14],
[25,29,33,12,26,28,32,14,0,11],
[30,45,40,24,35,32,37,37,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,30,26,30,25,26,28,31,25],
[28,0,27,23,22,23,24,25,32,24],
[21,24,0,26,28,21,25,24,30,24],
[25,28,25,0,24,23,23,27,23,28],
[21,29,23,27,0,23,22,25,24,23],
[26,28,30,28,28,0,32,29,24,30],
[25,27,26,28,29,19,0,27,26,24],
[23,26,27,24,26,22,24,0,22,22],
[20,19,21,28,27,27,25,29,0,25],
[26,27,27,23,28,21,27,29,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,18,25,23,25,23,23,24,29],
[33,0,24,26,30,40,27,29,30,32],
[33,27,0,29,30,37,21,25,28,26],
[26,25,22,0,27,35,21,28,25,31],
[28,21,21,24,0,31,27,19,29,28],
[26,11,14,16,20,0,16,20,19,23],
[28,24,30,30,24,35,0,24,29,29],
[28,22,26,23,32,31,27,0,27,33],
[27,21,23,26,22,32,22,24,0,22],
[22,19,25,20,23,28,22,18,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,21,17,30,28,24,30,19,30],
[29,0,29,16,34,37,34,29,20,23],
[30,22,0,26,32,31,27,22,17,22],
[34,35,25,0,35,31,35,32,30,28],
[21,17,19,16,0,22,25,24,15,22],
[23,14,20,20,29,0,27,23,13,22],
[27,17,24,16,26,24,0,30,20,27],
[21,22,29,19,27,28,21,0,23,20],
[32,31,34,21,36,38,31,28,0,28],
[21,28,29,23,29,29,24,31,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,22,23,35,20,29,35,28,23],
[25,0,26,12,21,22,20,36,27,19],
[29,25,0,24,24,33,26,28,25,11],
[28,39,27,0,33,24,26,33,39,34],
[16,30,27,18,0,25,25,19,39,28],
[31,29,18,27,26,0,19,30,20,17],
[22,31,25,25,26,32,0,28,21,19],
[16,15,23,18,32,21,23,0,23,24],
[23,24,26,12,12,31,30,28,0,20],
[28,32,40,17,23,34,32,27,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,21,20,25,28,21,22,23,19],
[25,0,26,26,24,31,24,24,29,25],
[30,25,0,22,25,26,23,25,24,26],
[31,25,29,0,29,30,26,28,33,29],
[26,27,26,22,0,26,21,23,22,21],
[23,20,25,21,25,0,28,26,24,24],
[30,27,28,25,30,23,0,33,29,27],
[29,27,26,23,28,25,18,0,24,24],
[28,22,27,18,29,27,22,27,0,21],
[32,26,25,22,30,27,24,27,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,13,19,20,23,14,18,20,17],
[36,0,25,27,28,23,30,27,28,15],
[38,26,0,36,33,38,33,28,23,31],
[32,24,15,0,21,26,31,22,23,16],
[31,23,18,30,0,27,34,28,24,27],
[28,28,13,25,24,0,35,30,23,22],
[37,21,18,20,17,16,0,20,15,15],
[33,24,23,29,23,21,31,0,17,16],
[31,23,28,28,27,28,36,34,0,23],
[34,36,20,35,24,29,36,35,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,18,17,18,23,30,13,30,29],
[26,0,21,21,27,26,32,28,37,30],
[33,30,0,25,31,37,25,27,44,27],
[34,30,26,0,27,30,33,25,41,34],
[33,24,20,24,0,27,27,21,37,31],
[28,25,14,21,24,0,35,23,41,29],
[21,19,26,18,24,16,0,18,29,16],
[38,23,24,26,30,28,33,0,35,28],
[21,14,7,10,14,10,22,16,0,12],
[22,21,24,17,20,22,35,23,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,25,25,28,26,23,20,27,23],
[27,0,27,30,30,24,30,27,20,22],
[26,24,0,25,26,24,25,26,25,23],
[26,21,26,0,30,23,20,21,20,22],
[23,21,25,21,0,15,21,20,23,16],
[25,27,27,28,36,0,30,27,31,27],
[28,21,26,31,30,21,0,22,25,23],
[31,24,25,30,31,24,29,0,31,23],
[24,31,26,31,28,20,26,20,0,21],
[28,29,28,29,35,24,28,28,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,16,19,21,26,22,20,14,19],
[26,0,26,24,24,26,19,21,26,12],
[35,25,0,29,24,30,24,20,21,21],
[32,27,22,0,28,34,32,22,27,26],
[30,27,27,23,0,29,26,21,29,22],
[25,25,21,17,22,0,21,18,19,23],
[29,32,27,19,25,30,0,27,20,23],
[31,30,31,29,30,33,24,0,23,27],
[37,25,30,24,22,32,31,28,0,23],
[32,39,30,25,29,28,28,24,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,28,21,18,22,24,18,19,17],
[28,0,28,21,20,16,28,23,30,29],
[23,23,0,27,23,26,27,23,25,27],
[30,30,24,0,19,25,26,19,32,26],
[33,31,28,32,0,24,31,28,35,26],
[29,35,25,26,27,0,27,22,34,27],
[27,23,24,25,20,24,0,21,31,32],
[33,28,28,32,23,29,30,0,40,31],
[32,21,26,19,16,17,20,11,0,22],
[34,22,24,25,25,24,19,20,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,33,35,47,47,39,27,37,37],
[26,0,25,26,30,31,30,20,28,28],
[18,26,0,20,32,43,22,20,26,36],
[16,25,31,0,39,39,24,16,28,36],
[4,21,19,12,0,35,24,6,20,22],
[4,20,8,12,16,0,16,6,18,20],
[12,21,29,27,27,35,0,14,18,34],
[24,31,31,35,45,45,37,0,43,42],
[14,23,25,23,31,33,33,8,0,16],
[14,23,15,15,29,31,17,9,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,28,27,26,26,25,25,24,26],
[19,0,24,21,28,27,17,27,19,19],
[23,27,0,24,32,25,22,26,22,20],
[24,30,27,0,28,21,23,19,22,21],
[25,23,19,23,0,22,22,23,17,20],
[25,24,26,30,29,0,24,22,23,24],
[26,34,29,28,29,27,0,28,21,23],
[26,24,25,32,28,29,23,0,21,27],
[27,32,29,29,34,28,30,30,0,25],
[25,32,31,30,31,27,28,24,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,29,27,33,24,32,28,30,31],
[22,0,22,21,30,26,32,25,34,29],
[22,29,0,28,30,31,31,30,31,31],
[24,30,23,0,38,25,32,23,29,30],
[18,21,21,13,0,21,23,21,17,15],
[27,25,20,26,30,0,30,20,24,24],
[19,19,20,19,28,21,0,18,31,17],
[23,26,21,28,30,31,33,0,25,25],
[21,17,20,22,34,27,20,26,0,18],
[20,22,20,21,36,27,34,26,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,32,26,28,25,30,25,30,29],
[24,0,32,28,26,26,34,28,30,33],
[19,19,0,22,22,19,28,23,29,19],
[25,23,29,0,23,25,33,26,29,28],
[23,25,29,28,0,24,29,26,23,22],
[26,25,32,26,27,0,30,25,31,23],
[21,17,23,18,22,21,0,21,20,23],
[26,23,28,25,25,26,30,0,31,24],
[21,21,22,22,28,20,31,20,0,24],
[22,18,32,23,29,28,28,27,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,22,26,22,20,30,28,23,24],
[32,0,25,29,29,27,31,36,30,33],
[29,26,0,20,29,32,30,27,30,29],
[25,22,31,0,30,29,25,26,33,29],
[29,22,22,21,0,25,29,21,24,30],
[31,24,19,22,26,0,23,25,28,28],
[21,20,21,26,22,28,0,27,26,21],
[23,15,24,25,30,26,24,0,27,24],
[28,21,21,18,27,23,25,24,0,27],
[27,18,22,22,21,23,30,27,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,27,27,28,27,25,26,25,24],
[30,0,25,25,26,28,29,29,27,32],
[24,26,0,23,30,26,30,26,26,29],
[24,26,28,0,26,24,24,28,24,28],
[23,25,21,25,0,24,25,29,24,22],
[24,23,25,27,27,0,29,29,21,27],
[26,22,21,27,26,22,0,25,18,26],
[25,22,25,23,22,22,26,0,19,24],
[26,24,25,27,27,30,33,32,0,31],
[27,19,22,23,29,24,25,27,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,22,21,21,28,20,28,26,23],
[28,0,29,25,24,30,30,30,31,27],
[29,22,0,24,23,27,25,28,27,29],
[30,26,27,0,30,29,24,29,27,27],
[30,27,28,21,0,28,27,28,32,27],
[23,21,24,22,23,0,22,27,20,26],
[31,21,26,27,24,29,0,29,28,28],
[23,21,23,22,23,24,22,0,21,22],
[25,20,24,24,19,31,23,30,0,28],
[28,24,22,24,24,25,23,29,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,27,21,29,19,22,27,23,21],
[30,0,31,28,35,25,29,32,29,26],
[24,20,0,22,16,21,21,24,19,22],
[30,23,29,0,30,27,29,30,28,26],
[22,16,35,21,0,19,27,31,25,20],
[32,26,30,24,32,0,26,31,27,24],
[29,22,30,22,24,25,0,33,27,20],
[24,19,27,21,20,20,18,0,21,19],
[28,22,32,23,26,24,24,30,0,23],
[30,25,29,25,31,27,31,32,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,25,26,23,27,26,23,26,25],
[29,0,25,26,23,30,28,27,26,25],
[26,26,0,28,20,29,26,25,25,27],
[25,25,23,0,26,28,22,25,27,26],
[28,28,31,25,0,29,27,24,28,27],
[24,21,22,23,22,0,24,16,27,25],
[25,23,25,29,24,27,0,22,28,25],
[28,24,26,26,27,35,29,0,31,26],
[25,25,26,24,23,24,23,20,0,25],
[26,26,24,25,24,26,26,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,25,19,24,33,24,21,23,22],
[28,0,29,22,32,35,24,26,25,26],
[26,22,0,25,25,30,25,26,23,26],
[32,29,26,0,32,38,30,24,30,27],
[27,19,26,19,0,34,23,22,22,22],
[18,16,21,13,17,0,17,20,17,18],
[27,27,26,21,28,34,0,24,26,30],
[30,25,25,27,29,31,27,0,25,26],
[28,26,28,21,29,34,25,26,0,25],
[29,25,25,24,29,33,21,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,33,31,31,28,38,32,25,29],
[14,0,27,12,22,23,23,25,22,17],
[18,24,0,17,20,23,28,22,12,14],
[20,39,34,0,25,28,32,28,22,31],
[20,29,31,26,0,23,31,27,23,24],
[23,28,28,23,28,0,30,26,21,21],
[13,28,23,19,20,21,0,23,21,20],
[19,26,29,23,24,25,28,0,26,24],
[26,29,39,29,28,30,30,25,0,26],
[22,34,37,20,27,30,31,27,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,34,23,34,35,37,22,33,23],
[24,0,29,14,25,23,24,18,21,26],
[17,22,0,20,25,17,28,26,23,26],
[28,37,31,0,35,36,28,21,22,28],
[17,26,26,16,0,21,24,15,23,19],
[16,28,34,15,30,0,30,18,19,29],
[14,27,23,23,27,21,0,27,18,24],
[29,33,25,30,36,33,24,0,22,25],
[18,30,28,29,28,32,33,29,0,23],
[28,25,25,23,32,22,27,26,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,25,28,25,25,27,29,27,25],
[27,0,31,27,24,25,32,28,26,24],
[26,20,0,25,20,24,27,26,27,20],
[23,24,26,0,22,24,23,30,21,26],
[26,27,31,29,0,23,30,32,30,24],
[26,26,27,27,28,0,27,25,25,23],
[24,19,24,28,21,24,0,28,20,21],
[22,23,25,21,19,26,23,0,25,23],
[24,25,24,30,21,26,31,26,0,27],
[26,27,31,25,27,28,30,28,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,23,21,23,23,27,25,24,26],
[32,0,27,28,27,27,29,27,27,24],
[28,24,0,23,22,27,26,21,28,27],
[30,23,28,0,27,29,28,26,28,22],
[28,24,29,24,0,28,28,27,31,29],
[28,24,24,22,23,0,26,19,24,26],
[24,22,25,23,23,25,0,25,25,23],
[26,24,30,25,24,32,26,0,33,27],
[27,24,23,23,20,27,26,18,0,23],
[25,27,24,29,22,25,28,24,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,30,22,22,24,27,22,23],
[23,0,19,23,19,22,23,22,20,19],
[25,32,0,34,28,31,29,34,26,28],
[21,28,17,0,21,23,26,25,20,15],
[29,32,23,30,0,26,25,34,29,28],
[29,29,20,28,25,0,26,28,26,25],
[27,28,22,25,26,25,0,31,23,26],
[24,29,17,26,17,23,20,0,19,19],
[29,31,25,31,22,25,28,32,0,25],
[28,32,23,36,23,26,25,32,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,26,15,25,28,17,25,14,32],
[27,0,27,21,25,21,22,29,15,35],
[25,24,0,27,21,28,21,20,16,33],
[36,30,24,0,21,24,17,23,21,32],
[26,26,30,30,0,36,19,20,23,32],
[23,30,23,27,15,0,12,19,18,30],
[34,29,30,34,32,39,0,23,26,28],
[26,22,31,28,31,32,28,0,22,34],
[37,36,35,30,28,33,25,29,0,36],
[19,16,18,19,19,21,23,17,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,22,27,24,25,25,24,27,27],
[29,0,25,31,27,26,26,37,27,30],
[29,26,0,30,26,31,24,30,25,34],
[24,20,21,0,20,20,23,20,19,28],
[27,24,25,31,0,22,19,29,23,25],
[26,25,20,31,29,0,19,25,25,27],
[26,25,27,28,32,32,0,30,27,32],
[27,14,21,31,22,26,21,0,25,28],
[24,24,26,32,28,26,24,26,0,25],
[24,21,17,23,26,24,19,23,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,20,23,31,24,22,22,22,22],
[29,0,22,22,34,28,21,22,26,26],
[31,29,0,23,32,27,20,27,20,23],
[28,29,28,0,31,27,18,25,23,25],
[20,17,19,20,0,27,18,20,22,24],
[27,23,24,24,24,0,21,24,22,24],
[29,30,31,33,33,30,0,25,27,27],
[29,29,24,26,31,27,26,0,29,26],
[29,25,31,28,29,29,24,22,0,26],
[29,25,28,26,27,27,24,25,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,20,22,21,22,25,31,22,24],
[29,0,28,27,31,27,25,30,21,28],
[31,23,0,27,28,25,32,36,31,32],
[29,24,24,0,23,25,26,32,25,25],
[30,20,23,28,0,23,27,33,28,30],
[29,24,26,26,28,0,30,31,24,27],
[26,26,19,25,24,21,0,24,21,26],
[20,21,15,19,18,20,27,0,17,22],
[29,30,20,26,23,27,30,34,0,26],
[27,23,19,26,21,24,25,29,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,30,27,30,26,32,26,21,30],
[28,0,26,33,32,31,31,29,23,31],
[21,25,0,33,25,20,27,27,19,28],
[24,18,18,0,27,23,23,26,18,24],
[21,19,26,24,0,25,24,25,18,24],
[25,20,31,28,26,0,30,28,20,28],
[19,20,24,28,27,21,0,26,20,23],
[25,22,24,25,26,23,25,0,27,28],
[30,28,32,33,33,31,31,24,0,30],
[21,20,23,27,27,23,28,23,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,2,11,12,26,11,11,11,24],
[23,0,10,13,12,17,13,21,9,13],
[49,41,0,23,24,35,27,25,23,31],
[40,38,28,0,18,40,18,26,16,35],
[39,39,27,33,0,33,32,19,24,34],
[25,34,16,11,18,0,4,15,17,25],
[40,38,24,33,19,47,0,23,41,39],
[40,30,26,25,32,36,28,0,27,40],
[40,42,28,35,27,34,10,24,0,34],
[27,38,20,16,17,26,12,11,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,18,19,19,21,31,26,22,24],
[24,0,31,38,31,29,38,37,25,34],
[33,20,0,25,31,27,35,35,22,34],
[32,13,26,0,25,20,33,32,23,25],
[32,20,20,26,0,16,30,29,23,28],
[30,22,24,31,35,0,33,35,26,26],
[20,13,16,18,21,18,0,23,18,18],
[25,14,16,19,22,16,28,0,7,16],
[29,26,29,28,28,25,33,44,0,28],
[27,17,17,26,23,25,33,35,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,40,17,40,17,33,22,40,35],
[22,0,11,17,11,17,22,11,22,17],
[11,40,0,11,0,11,33,17,29,17],
[34,34,40,0,40,16,38,22,40,29],
[11,40,51,11,0,11,44,33,46,35],
[34,34,40,35,40,0,45,22,40,29],
[18,29,18,13,7,6,0,22,18,35],
[29,40,34,29,18,29,29,0,29,35],
[11,29,22,11,5,11,33,22,0,17],
[16,34,34,22,16,22,16,16,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,29,26,28,30,25,32,27,27],
[25,0,20,24,23,28,19,30,24,23],
[22,31,0,25,31,32,28,29,28,27],
[25,27,26,0,26,25,25,29,28,27],
[23,28,20,25,0,26,16,29,25,23],
[21,23,19,26,25,0,22,25,18,22],
[26,32,23,26,35,29,0,31,29,25],
[19,21,22,22,22,26,20,0,25,25],
[24,27,23,23,26,33,22,26,0,24],
[24,28,24,24,28,29,26,26,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,26,42,42,25,22,36,4,46],
[12,0,12,26,12,12,12,20,12,12],
[25,39,0,39,29,26,23,29,29,39],
[9,25,12,0,11,13,16,20,13,16],
[9,39,22,40,0,27,30,13,13,23],
[26,39,25,38,24,0,25,32,17,32],
[29,39,28,35,21,26,0,29,21,43],
[15,31,22,31,38,19,22,0,14,38],
[47,39,22,38,38,34,30,37,0,46],
[5,39,12,35,28,19,8,13,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,6,18,0,45,28,6,18,6],
[23,0,23,23,23,23,23,17,23,23],
[45,28,0,45,45,45,34,23,39,33],
[33,28,6,0,10,33,28,23,28,22],
[51,28,6,41,0,45,28,23,28,12],
[6,28,6,18,6,0,28,6,18,6],
[23,28,17,23,23,23,0,23,29,23],
[45,34,28,28,28,45,28,0,28,16],
[33,28,12,23,23,33,22,23,0,23],
[45,28,18,29,39,45,28,35,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,27,24,28,26,26,32,22,19],
[26,0,32,21,31,32,23,29,23,25],
[24,19,0,27,32,29,25,30,27,25],
[27,30,24,0,31,31,27,28,26,28],
[23,20,19,20,0,28,19,29,16,22],
[25,19,22,20,23,0,15,21,17,20],
[25,28,26,24,32,36,0,30,28,32],
[19,22,21,23,22,30,21,0,14,20],
[29,28,24,25,35,34,23,37,0,22],
[32,26,26,23,29,31,19,31,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,25,29,22,28,28,22,20,21],
[28,0,30,39,28,29,31,29,25,22],
[26,21,0,34,25,28,24,28,28,23],
[22,12,17,0,21,22,18,23,19,17],
[29,23,26,30,0,31,24,26,27,28],
[23,22,23,29,20,0,28,30,23,23],
[23,20,27,33,27,23,0,25,25,18],
[29,22,23,28,25,21,26,0,18,23],
[31,26,23,32,24,28,26,33,0,25],
[30,29,28,34,23,28,33,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,30,47,34,21,23,22,44,22],
[16,0,19,26,26,28,26,29,26,28],
[21,32,0,26,11,21,21,24,21,19],
[4,25,25,0,34,4,23,14,25,14],
[17,25,40,17,0,12,10,29,22,12],
[30,23,30,47,39,0,28,40,23,40],
[28,25,30,28,41,23,0,29,32,21],
[29,22,27,37,22,11,22,0,22,20],
[7,25,30,26,29,28,19,29,0,19],
[29,23,32,37,39,11,30,31,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,12,27,17,21,31,23,25,14],
[29,0,23,28,21,24,20,23,17,10],
[39,28,0,27,21,28,28,37,29,26],
[24,23,24,0,22,23,31,24,20,24],
[34,30,30,29,0,30,34,28,23,28],
[30,27,23,28,21,0,20,28,28,18],
[20,31,23,20,17,31,0,28,27,21],
[28,28,14,27,23,23,23,0,27,23],
[26,34,22,31,28,23,24,24,0,21],
[37,41,25,27,23,33,30,28,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,26,23,28,23,22,28,25,29],
[27,0,29,24,28,26,27,28,28,24],
[25,22,0,22,30,25,24,30,25,28],
[28,27,29,0,30,32,24,30,27,24],
[23,23,21,21,0,19,17,24,22,22],
[28,25,26,19,32,0,24,32,30,29],
[29,24,27,27,34,27,0,29,33,32],
[23,23,21,21,27,19,22,0,20,23],
[26,23,26,24,29,21,18,31,0,26],
[22,27,23,27,29,22,19,28,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,26,25,22,26,27,25,26,23],
[18,0,27,26,20,22,21,21,23,25],
[25,24,0,30,21,20,26,24,23,26],
[26,25,21,0,22,29,25,24,26,25],
[29,31,30,29,0,23,28,30,28,26],
[25,29,31,22,28,0,26,28,28,26],
[24,30,25,26,23,25,0,25,27,26],
[26,30,27,27,21,23,26,0,29,27],
[25,28,28,25,23,23,24,22,0,21],
[28,26,25,26,25,25,25,24,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,15,18,23,19,24,20,24,19],
[28,0,21,20,22,21,26,21,26,18],
[36,30,0,25,27,24,30,28,28,27],
[33,31,26,0,32,25,28,23,28,23],
[28,29,24,19,0,20,24,23,24,25],
[32,30,27,26,31,0,32,27,28,23],
[27,25,21,23,27,19,0,24,27,21],
[31,30,23,28,28,24,27,0,29,28],
[27,25,23,23,27,23,24,22,0,19],
[32,33,24,28,26,28,30,23,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,29,34,32,25,27,27,23,34],
[24,0,22,30,13,25,20,22,13,20],
[22,29,0,22,26,29,24,26,25,21],
[17,21,29,0,18,28,22,24,16,18],
[19,38,25,33,0,29,26,23,20,25],
[26,26,22,23,22,0,21,18,19,26],
[24,31,27,29,25,30,0,14,20,28],
[24,29,25,27,28,33,37,0,28,26],
[28,38,26,35,31,32,31,23,0,34],
[17,31,30,33,26,25,23,25,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,27,25,26,31,24,26,30,27],
[26,0,23,22,17,28,18,17,28,19],
[24,28,0,28,24,25,25,26,30,22],
[26,29,23,0,25,26,28,20,30,19],
[25,34,27,26,0,27,22,20,38,19],
[20,23,26,25,24,0,18,20,26,17],
[27,33,26,23,29,33,0,25,35,22],
[25,34,25,31,31,31,26,0,37,25],
[21,23,21,21,13,25,16,14,0,15],
[24,32,29,32,32,34,29,26,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,28,30,32,30,26,27,26,28],
[29,0,26,25,28,28,27,28,29,29],
[23,25,0,28,27,24,30,29,26,31],
[21,26,23,0,27,28,26,23,28,24],
[19,23,24,24,0,27,25,26,25,29],
[21,23,27,23,24,0,27,25,18,26],
[25,24,21,25,26,24,0,25,26,26],
[24,23,22,28,25,26,26,0,23,27],
[25,22,25,23,26,33,25,28,0,28],
[23,22,20,27,22,25,25,24,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,33,27,27,32,23,29,23,23],
[34,0,28,28,27,36,51,21,31,24],
[18,23,0,28,14,32,26,35,32,20],
[24,23,23,0,14,32,32,26,38,20],
[24,24,37,37,0,26,32,21,33,6],
[19,15,19,19,25,0,36,21,15,6],
[28,0,25,19,19,15,0,21,21,6],
[22,30,16,25,30,30,30,0,39,30],
[28,20,19,13,18,36,30,12,0,14],
[28,27,31,31,45,45,45,21,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,13,26,15,24,11,35,48,33],
[29,0,15,26,17,15,14,35,31,35],
[38,36,0,29,40,26,16,42,47,44],
[25,25,22,0,24,22,14,31,27,24],
[36,34,11,27,0,22,14,42,38,35],
[27,36,25,29,29,0,27,34,36,36],
[40,37,35,37,37,24,0,35,51,44],
[16,16,9,20,9,17,16,0,16,16],
[3,20,4,24,13,15,0,35,0,24],
[18,16,7,27,16,15,7,35,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,37,23,32,38,46,35,21,26],
[20,0,25,15,20,22,26,23,13,8],
[14,26,0,22,25,28,32,25,14,16],
[28,36,29,0,23,32,33,37,29,24],
[19,31,26,28,0,32,26,39,19,25],
[13,29,23,19,19,0,28,31,13,4],
[5,25,19,18,25,23,0,35,12,9],
[16,28,26,14,12,20,16,0,14,16],
[30,38,37,22,32,38,39,37,0,34],
[25,43,35,27,26,47,42,35,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,15,13,32,22,24,23,27,33],
[26,0,19,25,37,32,20,21,31,21],
[36,32,0,24,43,37,30,33,28,38],
[38,26,27,0,36,37,29,27,25,30],
[19,14,8,15,0,16,18,9,11,20],
[29,19,14,14,35,0,22,13,23,21],
[27,31,21,22,33,29,0,24,33,26],
[28,30,18,24,42,38,27,0,32,33],
[24,20,23,26,40,28,18,19,0,23],
[18,30,13,21,31,30,25,18,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,31,40,38,31,39,31,22,34],
[18,0,18,30,40,22,22,30,18,27],
[20,33,0,45,43,22,31,29,20,32],
[11,21,6,0,26,16,13,18,8,14],
[13,11,8,25,0,23,11,25,7,23],
[20,29,29,35,28,0,28,23,28,39],
[12,29,20,38,40,23,0,30,17,45],
[20,21,22,33,26,28,21,0,19,32],
[29,33,31,43,44,23,34,32,0,37],
[17,24,19,37,28,12,6,19,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,15,17,24,27,20,25,21,21],
[34,0,25,21,23,28,25,33,25,26],
[36,26,0,25,30,28,26,25,23,27],
[34,30,26,0,24,32,23,29,25,27],
[27,28,21,27,0,23,26,28,24,20],
[24,23,23,19,28,0,25,27,21,22],
[31,26,25,28,25,26,0,28,31,25],
[26,18,26,22,23,24,23,0,26,23],
[30,26,28,26,27,30,20,25,0,25],
[30,25,24,24,31,29,26,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,30,31,29,24,28,27,30,27],
[24,0,31,33,26,23,26,25,29,27],
[21,20,0,25,18,18,19,20,22,22],
[20,18,26,0,23,19,18,23,20,23],
[22,25,33,28,0,26,25,27,33,29],
[27,28,33,32,25,0,26,24,29,27],
[23,25,32,33,26,25,0,28,30,23],
[24,26,31,28,24,27,23,0,27,24],
[21,22,29,31,18,22,21,24,0,27],
[24,24,29,28,22,24,28,27,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,32,21,38,29,25,25,28,24],
[19,0,28,23,30,19,16,13,16,22],
[19,23,0,21,24,14,17,19,11,15],
[30,28,30,0,30,22,25,26,25,27],
[13,21,27,21,0,17,14,16,21,18],
[22,32,37,29,34,0,27,29,20,26],
[26,35,34,26,37,24,0,23,29,24],
[26,38,32,25,35,22,28,0,20,22],
[23,35,40,26,30,31,22,31,0,27],
[27,29,36,24,33,25,27,29,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,24,28,24,22,20,23,29,26],
[18,0,20,21,17,18,16,17,19,22],
[27,31,0,25,25,26,24,26,25,22],
[23,30,26,0,24,20,21,23,26,24],
[27,34,26,27,0,22,20,22,26,22],
[29,33,25,31,29,0,26,27,32,31],
[31,35,27,30,31,25,0,29,29,30],
[28,34,25,28,29,24,22,0,30,28],
[22,32,26,25,25,19,22,21,0,22],
[25,29,29,27,29,20,21,23,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,24,16,47,27,47,24,12,47],
[12,0,4,12,8,15,12,4,0,27],
[27,47,0,27,35,23,39,31,23,39],
[35,39,24,0,47,27,47,39,24,47],
[4,43,16,4,0,15,27,4,0,39],
[24,36,28,24,36,0,36,28,36,36],
[4,39,12,4,24,15,0,12,0,39],
[27,47,20,12,47,23,39,0,20,39],
[39,51,28,27,51,15,51,31,0,51],
[4,24,12,4,12,15,12,12,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,29,18,18,29,29,32,51,13],
[32,0,39,16,41,37,27,42,51,23],
[22,12,0,20,30,31,38,31,31,30],
[33,35,31,0,33,31,31,42,42,15],
[33,10,21,18,0,28,27,32,42,14],
[22,14,20,20,23,0,31,33,33,23],
[22,24,13,20,24,20,0,33,24,24],
[19,9,20,9,19,18,18,0,30,9],
[0,0,20,9,9,18,27,21,0,9],
[38,28,21,36,37,28,27,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,29,27,28,33,23,26,23,30],
[23,0,28,18,27,25,18,22,18,26],
[22,23,0,18,26,26,21,16,26,23],
[24,33,33,0,28,26,26,24,28,33],
[23,24,25,23,0,26,20,24,24,26],
[18,26,25,25,25,0,24,20,23,25],
[28,33,30,25,31,27,0,20,27,30],
[25,29,35,27,27,31,31,0,29,26],
[28,33,25,23,27,28,24,22,0,28],
[21,25,28,18,25,26,21,25,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,15,18,19,26,25,27,28,24],
[29,0,21,30,22,31,25,29,30,31],
[36,30,0,31,24,34,29,29,32,33],
[33,21,20,0,23,26,22,27,28,29],
[32,29,27,28,0,27,30,24,30,34],
[25,20,17,25,24,0,23,22,21,26],
[26,26,22,29,21,28,0,22,29,29],
[24,22,22,24,27,29,29,0,26,31],
[23,21,19,23,21,30,22,25,0,33],
[27,20,18,22,17,25,22,20,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,24,15,39,30,27,18,41,20],
[18,0,27,22,38,28,27,21,36,31],
[27,24,0,20,28,17,32,28,31,29],
[36,29,31,0,29,20,22,20,33,28],
[12,13,23,22,0,16,27,24,14,25],
[21,23,34,31,35,0,36,30,29,25],
[24,24,19,29,24,15,0,24,26,22],
[33,30,23,31,27,21,27,0,39,30],
[10,15,20,18,37,22,25,12,0,28],
[31,20,22,23,26,26,29,21,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,30,24,23,22,31,22,24,26],
[22,0,29,22,25,23,27,23,19,22],
[21,22,0,19,24,17,23,18,22,21],
[27,29,32,0,25,29,28,25,27,21],
[28,26,27,26,0,22,29,24,24,20],
[29,28,34,22,29,0,30,26,32,27],
[20,24,28,23,22,21,0,19,19,20],
[29,28,33,26,27,25,32,0,29,26],
[27,32,29,24,27,19,32,22,0,25],
[25,29,30,30,31,24,31,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,26,23,21,23,17,14,25],
[26,0,31,28,29,26,20,25,27,30],
[26,20,0,30,23,27,17,22,17,17],
[25,23,21,0,19,20,22,23,16,22],
[28,22,28,32,0,24,21,23,15,26],
[30,25,24,31,27,0,22,19,22,25],
[28,31,34,29,30,29,0,23,23,31],
[34,26,29,28,28,32,28,0,17,27],
[37,24,34,35,36,29,28,34,0,29],
[26,21,34,29,25,26,20,24,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,31,33,25,26,30,28,30,28],
[27,0,28,25,21,26,21,37,29,27],
[20,23,0,27,21,13,19,27,23,23],
[18,26,24,0,16,18,21,27,21,19],
[26,30,30,35,0,29,32,38,24,24],
[25,25,38,33,22,0,27,29,29,30],
[21,30,32,30,19,24,0,33,23,29],
[23,14,24,24,13,22,18,0,22,21],
[21,22,28,30,27,22,28,29,0,25],
[23,24,28,32,27,21,22,30,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,23,28,27,20,31,23,23,23],
[24,0,19,18,21,22,29,18,21,23],
[28,32,0,22,20,24,29,22,29,28],
[23,33,29,0,28,23,28,20,29,27],
[24,30,31,23,0,22,32,25,25,25],
[31,29,27,28,29,0,26,23,28,25],
[20,22,22,23,19,25,0,18,19,22],
[28,33,29,31,26,28,33,0,25,24],
[28,30,22,22,26,23,32,26,0,31],
[28,28,23,24,26,26,29,27,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,19,25,25,24,26,25,30,26],
[21,0,22,18,25,21,22,17,30,24],
[32,29,0,26,32,23,31,34,32,31],
[26,33,25,0,27,31,32,27,33,27],
[26,26,19,24,0,22,28,23,28,21],
[27,30,28,20,29,0,27,26,35,30],
[25,29,20,19,23,24,0,25,28,23],
[26,34,17,24,28,25,26,0,27,26],
[21,21,19,18,23,16,23,24,0,21],
[25,27,20,24,30,21,28,25,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,28,32,20,36,27,32,26,27],
[29,0,29,26,18,27,31,24,25,25],
[23,22,0,35,19,26,28,32,27,25],
[19,25,16,0,20,22,23,25,24,18],
[31,33,32,31,0,35,37,33,30,24],
[15,24,25,29,16,0,25,27,21,20],
[24,20,23,28,14,26,0,26,19,18],
[19,27,19,26,18,24,25,0,26,21],
[25,26,24,27,21,30,32,25,0,24],
[24,26,26,33,27,31,33,30,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,18,23,19,27,23,18,22,17],
[31,0,24,26,27,30,26,20,27,24],
[33,27,0,31,18,33,28,29,29,29],
[28,25,20,0,20,24,20,20,22,19],
[32,24,33,31,0,30,28,20,27,26],
[24,21,18,27,21,0,23,19,17,20],
[28,25,23,31,23,28,0,23,25,25],
[33,31,22,31,31,32,28,0,25,23],
[29,24,22,29,24,34,26,26,0,26],
[34,27,22,32,25,31,26,28,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,27,28,24,27,26,24,21,32],
[23,0,19,28,20,18,31,19,25,28],
[24,32,0,27,28,27,29,26,26,35],
[23,23,24,0,27,24,27,29,25,32],
[27,31,23,24,0,27,32,27,26,27],
[24,33,24,27,24,0,32,28,28,31],
[25,20,22,24,19,19,0,22,26,24],
[27,32,25,22,24,23,29,0,24,30],
[30,26,25,26,25,23,25,27,0,30],
[19,23,16,19,24,20,27,21,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,7,33,30,44,23,19,30,36],
[29,0,25,29,30,40,37,40,44,25],
[44,26,0,26,37,47,44,15,44,44],
[18,22,25,0,11,43,22,11,30,40],
[21,21,14,40,0,40,22,21,26,32],
[7,11,4,8,11,0,15,11,19,29],
[28,14,7,29,29,36,0,14,19,32],
[32,11,36,40,30,40,37,0,44,36],
[21,7,7,21,25,32,32,7,0,25],
[15,26,7,11,19,22,19,15,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,23,19,28,22,23,18,28,19],
[23,0,19,22,24,21,19,18,24,22],
[28,32,0,27,29,31,29,32,26,25],
[32,29,24,0,29,27,26,28,32,28],
[23,27,22,22,0,26,28,26,23,20],
[29,30,20,24,25,0,23,32,27,17],
[28,32,22,25,23,28,0,27,24,20],
[33,33,19,23,25,19,24,0,25,21],
[23,27,25,19,28,24,27,26,0,24],
[32,29,26,23,31,34,31,30,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,28,25,22,28,25,19,26,24],
[28,0,23,29,21,29,20,22,19,20],
[23,28,0,19,21,32,26,17,19,26],
[26,22,32,0,25,21,24,13,22,26],
[29,30,30,26,0,26,22,26,28,27],
[23,22,19,30,25,0,27,17,21,27],
[26,31,25,27,29,24,0,20,26,25],
[32,29,34,38,25,34,31,0,28,29],
[25,32,32,29,23,30,25,23,0,26],
[27,31,25,25,24,24,26,22,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,34,32,31,30,24,33,24,34],
[19,0,23,15,23,21,23,30,20,22],
[17,28,0,20,24,22,29,32,24,27],
[19,36,31,0,35,29,30,29,28,29],
[20,28,27,16,0,25,20,25,18,23],
[21,30,29,22,26,0,24,35,23,25],
[27,28,22,21,31,27,0,32,24,31],
[18,21,19,22,26,16,19,0,13,16],
[27,31,27,23,33,28,27,38,0,24],
[17,29,24,22,28,26,20,35,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,32,27,23,33,33,36,32,39],
[11,0,21,28,19,14,19,20,18,33],
[19,30,0,20,30,23,23,31,28,35],
[24,23,31,0,33,24,34,28,36,32],
[28,32,21,18,0,21,24,23,25,32],
[18,37,28,27,30,0,32,34,38,39],
[18,32,28,17,27,19,0,28,25,35],
[15,31,20,23,28,17,23,0,24,32],
[19,33,23,15,26,13,26,27,0,33],
[12,18,16,19,19,12,16,19,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,27,24,24,29,27,26,27,32],
[21,0,28,21,32,29,29,27,28,29],
[24,23,0,27,25,27,24,29,24,30],
[27,30,24,0,32,27,29,30,27,35],
[27,19,26,19,0,23,19,26,21,24],
[22,22,24,24,28,0,26,27,27,29],
[24,22,27,22,32,25,0,28,25,25],
[25,24,22,21,25,24,23,0,27,27],
[24,23,27,24,30,24,26,24,0,23],
[19,22,21,16,27,22,26,24,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,27,22,24,27,29,20,29,23],
[25,0,14,15,18,20,26,11,18,28],
[24,37,0,32,34,39,31,29,37,37],
[29,36,19,0,33,38,31,24,35,35],
[27,33,17,18,0,26,27,8,37,23],
[24,31,12,13,25,0,25,19,18,34],
[22,25,20,20,24,26,0,17,26,29],
[31,40,22,27,43,32,34,0,38,28],
[22,33,14,16,14,33,25,13,0,25],
[28,23,14,16,28,17,22,23,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,24,25,30,16,18,23,25,21],
[29,0,30,23,36,21,17,26,26,25],
[27,21,0,14,24,11,20,16,22,23],
[26,28,37,0,31,17,20,21,33,29],
[21,15,27,20,0,19,15,21,25,13],
[35,30,40,34,32,0,28,32,36,23],
[33,34,31,31,36,23,0,30,29,33],
[28,25,35,30,30,19,21,0,27,31],
[26,25,29,18,26,15,22,24,0,23],
[30,26,28,22,38,28,18,20,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,28,23,19,28,23,23,24,25],
[23,0,31,22,24,22,21,18,27,21],
[23,20,0,27,23,23,18,24,25,24],
[28,29,24,0,21,27,30,27,25,30],
[32,27,28,30,0,28,27,23,29,25],
[23,29,28,24,23,0,21,29,25,26],
[28,30,33,21,24,30,0,29,23,28],
[28,33,27,24,28,22,22,0,21,32],
[27,24,26,26,22,26,28,30,0,23],
[26,30,27,21,26,25,23,19,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,24,29,25,30,28,21,25,29],
[20,0,20,31,20,26,26,24,27,23],
[27,31,0,25,30,29,28,33,30,25],
[22,20,26,0,26,27,24,27,24,23],
[26,31,21,25,0,27,24,29,25,20],
[21,25,22,24,24,0,22,26,23,20],
[23,25,23,27,27,29,0,30,31,27],
[30,27,18,24,22,25,21,0,30,26],
[26,24,21,27,26,28,20,21,0,23],
[22,28,26,28,31,31,24,25,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,28,28,20,18,28,27,22,26],
[19,0,24,24,23,21,22,22,20,18],
[23,27,0,25,20,21,30,28,17,21],
[23,27,26,0,19,24,26,27,22,22],
[31,28,31,32,0,23,31,30,25,26],
[33,30,30,27,28,0,30,27,26,24],
[23,29,21,25,20,21,0,23,23,23],
[24,29,23,24,21,24,28,0,22,23],
[29,31,34,29,26,25,28,29,0,30],
[25,33,30,29,25,27,28,28,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,43,26,25,43,35,0,34,34],
[16,0,25,17,16,33,34,16,16,16],
[8,26,0,26,24,42,25,8,25,33],
[25,34,25,0,33,34,42,17,16,25],
[26,35,27,18,0,43,43,26,18,34],
[8,18,9,17,8,0,17,8,0,8],
[16,17,26,9,8,34,0,8,8,8],
[51,35,43,34,25,43,43,0,34,43],
[17,35,26,35,33,51,43,17,0,42],
[17,35,18,26,17,43,43,8,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,26,21,27,25,25,28,29,26],
[17,0,25,17,26,19,23,26,18,22],
[25,26,0,18,21,14,23,20,16,24],
[30,34,33,0,29,27,31,25,26,29],
[24,25,30,22,0,26,33,25,31,28],
[26,32,37,24,25,0,28,23,17,28],
[26,28,28,20,18,23,0,19,22,14],
[23,25,31,26,26,28,32,0,29,31],
[22,33,35,25,20,34,29,22,0,30],
[25,29,27,22,23,23,37,20,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,26,22,24,19,19,25,21,26],
[20,0,27,28,27,19,23,18,27,23],
[25,24,0,28,26,24,20,29,26,23],
[29,23,23,0,25,11,19,18,28,18],
[27,24,25,26,0,25,23,29,21,25],
[32,32,27,40,26,0,23,33,27,24],
[32,28,31,32,28,28,0,25,27,28],
[26,33,22,33,22,18,26,0,20,21],
[30,24,25,23,30,24,24,31,0,23],
[25,28,28,33,26,27,23,30,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,28,29,20,21,16,28,23,14],
[22,0,21,16,17,17,16,26,21,21],
[23,30,0,34,28,28,22,27,19,23],
[22,35,17,0,22,27,23,25,17,21],
[31,34,23,29,0,25,26,28,24,18],
[30,34,23,24,26,0,21,26,27,18],
[35,35,29,28,25,30,0,34,30,26],
[23,25,24,26,23,25,17,0,15,13],
[28,30,32,34,27,24,21,36,0,36],
[37,30,28,30,33,33,25,38,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,23,25,23,31,31,24,29,31],
[18,0,23,20,16,25,21,20,18,22],
[28,28,0,23,28,29,23,26,27,23],
[26,31,28,0,25,29,25,23,19,25],
[28,35,23,26,0,25,24,28,29,34],
[20,26,22,22,26,0,21,22,21,26],
[20,30,28,26,27,30,0,26,26,23],
[27,31,25,28,23,29,25,0,26,29],
[22,33,24,32,22,30,25,25,0,27],
[20,29,28,26,17,25,28,22,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,21,27,22,24,24,29,28,30],
[23,0,27,29,21,20,24,26,23,29],
[30,24,0,26,26,27,18,23,30,24],
[24,22,25,0,25,23,20,17,24,25],
[29,30,25,26,0,24,24,25,30,26],
[27,31,24,28,27,0,19,21,33,27],
[27,27,33,31,27,32,0,26,25,38],
[22,25,28,34,26,30,25,0,32,30],
[23,28,21,27,21,18,26,19,0,31],
[21,22,27,26,25,24,13,21,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,23,20,23,26,24,20,26,30],
[23,0,29,26,31,27,28,23,24,30],
[28,22,0,20,31,30,31,25,30,32],
[31,25,31,0,34,37,39,33,35,33],
[28,20,20,17,0,32,25,21,22,30],
[25,24,21,14,19,0,13,22,22,18],
[27,23,20,12,26,38,0,29,23,24],
[31,28,26,18,30,29,22,0,28,31],
[25,27,21,16,29,29,28,23,0,26],
[21,21,19,18,21,33,27,20,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,28,27,19,26,32,34,30,23],
[27,0,30,28,26,29,25,30,20,26],
[23,21,0,26,23,25,25,27,22,22],
[24,23,25,0,23,22,21,25,23,22],
[32,25,28,28,0,28,26,26,22,23],
[25,22,26,29,23,0,22,29,17,25],
[19,26,26,30,25,29,0,29,23,24],
[17,21,24,26,25,22,22,0,21,23],
[21,31,29,28,29,34,28,30,0,25],
[28,25,29,29,28,26,27,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,33,33,17,25,28,22,29],
[23,0,25,25,38,24,33,33,28,31],
[25,26,0,32,29,26,19,26,24,27],
[18,26,19,0,19,22,24,21,15,24],
[18,13,22,32,0,22,21,28,21,26],
[34,27,25,29,29,0,23,30,27,24],
[26,18,32,27,30,28,0,29,29,26],
[23,18,25,30,23,21,22,0,22,26],
[29,23,27,36,30,24,22,29,0,28],
[22,20,24,27,25,27,25,25,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,24,26,33,31,26,29,26,29],
[21,0,23,22,25,28,26,24,22,28],
[27,28,0,24,29,30,26,31,30,25],
[25,29,27,0,22,25,21,24,24,28],
[18,26,22,29,0,25,24,21,23,30],
[20,23,21,26,26,0,17,27,19,28],
[25,25,25,30,27,34,0,27,24,26],
[22,27,20,27,30,24,24,0,20,29],
[25,29,21,27,28,32,27,31,0,27],
[22,23,26,23,21,23,25,22,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,13,19,31,32,22,15,21,39],
[29,0,29,19,27,35,24,23,21,28],
[38,22,0,20,28,36,25,27,18,34],
[32,32,31,0,43,36,22,34,32,35],
[20,24,23,8,0,30,25,19,14,30],
[19,16,15,15,21,0,10,15,12,21],
[29,27,26,29,26,41,0,22,23,25],
[36,28,24,17,32,36,29,0,27,31],
[30,30,33,19,37,39,28,24,0,37],
[12,23,17,16,21,30,26,20,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,26,22,41,19,44,27,16,37],
[20,0,18,15,36,19,33,14,18,32],
[25,33,0,19,47,22,33,27,18,37],
[29,36,32,0,47,18,43,26,23,29],
[10,15,4,4,0,4,15,5,16,10],
[32,32,29,33,47,0,32,19,18,29],
[7,18,18,8,36,19,0,14,11,19],
[24,37,24,25,46,32,37,0,29,25],
[35,33,33,28,35,33,40,22,0,39],
[14,19,14,22,41,22,32,26,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,19,29,26,26,22,27,28,27],
[21,0,26,28,11,14,22,30,26,16],
[32,25,0,18,26,24,25,33,24,21],
[22,23,33,0,18,20,23,27,22,11],
[25,40,25,33,0,32,27,33,33,29],
[25,37,27,31,19,0,31,31,38,28],
[29,29,26,28,24,20,0,25,28,18],
[24,21,18,24,18,20,26,0,22,13],
[23,25,27,29,18,13,23,29,0,15],
[24,35,30,40,22,23,33,38,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,26,31,23,25,27,26,27,25],
[24,0,25,24,31,25,27,27,27,23],
[25,26,0,19,25,24,23,30,19,24],
[20,27,32,0,23,21,20,25,22,22],
[28,20,26,28,0,27,20,26,22,23],
[26,26,27,30,24,0,23,28,24,26],
[24,24,28,31,31,28,0,24,25,25],
[25,24,21,26,25,23,27,0,23,17],
[24,24,32,29,29,27,26,28,0,28],
[26,28,27,29,28,25,26,34,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,28,21,22,28,25,24,18,32],
[22,0,25,10,16,17,19,20,19,33],
[23,26,0,12,20,22,20,18,19,29],
[30,41,39,0,34,29,35,23,28,42],
[29,35,31,17,0,25,32,23,23,36],
[23,34,29,22,26,0,29,29,27,37],
[26,32,31,16,19,22,0,24,20,33],
[27,31,33,28,28,22,27,0,27,31],
[33,32,32,23,28,24,31,24,0,36],
[19,18,22,9,15,14,18,20,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,29,26,24,25,29,30,29,29],
[24,0,28,24,29,26,25,27,28,24],
[22,23,0,25,22,21,25,28,27,26],
[25,27,26,0,22,25,29,28,29,27],
[27,22,29,29,0,25,31,32,32,30],
[26,25,30,26,26,0,30,27,27,27],
[22,26,26,22,20,21,0,27,26,21],
[21,24,23,23,19,24,24,0,25,28],
[22,23,24,22,19,24,25,26,0,25],
[22,27,25,24,21,24,30,23,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,30,24,27,32,29,26,31,35],
[30,0,31,26,30,29,28,27,25,40],
[21,20,0,19,22,22,25,14,23,35],
[27,25,32,0,20,22,34,20,29,27],
[24,21,29,31,0,23,29,31,22,33],
[19,22,29,29,28,0,26,21,27,33],
[22,23,26,17,22,25,0,20,27,30],
[25,24,37,31,20,30,31,0,25,34],
[20,26,28,22,29,24,24,26,0,39],
[16,11,16,24,18,18,21,17,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,31,25,32,17,21,30,18,30],
[32,0,35,26,26,16,26,29,25,21],
[20,16,0,23,20,15,30,23,32,22],
[26,25,28,0,30,9,32,17,22,29],
[19,25,31,21,0,17,21,29,23,29],
[34,35,36,42,34,0,38,25,30,28],
[30,25,21,19,30,13,0,19,26,28],
[21,22,28,34,22,26,32,0,17,32],
[33,26,19,29,28,21,25,34,0,34],
[21,30,29,22,22,23,23,19,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,29,29,24,24,26,26,22,22],
[18,0,17,17,20,16,23,21,19,19],
[22,34,0,28,19,24,24,31,25,26],
[22,34,23,0,21,25,24,27,26,22],
[27,31,32,30,0,30,28,35,26,24],
[27,35,27,26,21,0,29,30,26,25],
[25,28,27,27,23,22,0,26,23,25],
[25,30,20,24,16,21,25,0,23,21],
[29,32,26,25,25,25,28,28,0,25],
[29,32,25,29,27,26,26,30,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,23,22,26,26,28,29,23,35],
[19,0,24,13,23,15,21,24,20,27],
[28,27,0,19,23,23,25,27,22,32],
[29,38,32,0,28,25,30,31,23,34],
[25,28,28,23,0,24,26,26,22,28],
[25,36,28,26,27,0,26,28,22,33],
[23,30,26,21,25,25,0,24,26,29],
[22,27,24,20,25,23,27,0,26,28],
[28,31,29,28,29,29,25,25,0,34],
[16,24,19,17,23,18,22,23,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,14,24,20,17,24,28,27,17],
[26,0,21,24,24,14,23,18,25,23],
[37,30,0,26,26,25,31,30,27,18],
[27,27,25,0,25,20,26,26,28,16],
[31,27,25,26,0,20,29,23,28,19],
[34,37,26,31,31,0,27,23,31,26],
[27,28,20,25,22,24,0,23,22,15],
[23,33,21,25,28,28,28,0,31,28],
[24,26,24,23,23,20,29,20,0,20],
[34,28,33,35,32,25,36,23,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,32,33,25,28,25,24,30,33],
[25,0,23,34,24,23,26,23,25,29],
[19,28,0,37,24,28,26,20,32,39],
[18,17,14,0,20,19,18,11,21,27],
[26,27,27,31,0,34,25,28,30,34],
[23,28,23,32,17,0,25,26,27,31],
[26,25,25,33,26,26,0,29,26,35],
[27,28,31,40,23,25,22,0,26,34],
[21,26,19,30,21,24,25,25,0,23],
[18,22,12,24,17,20,16,17,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,17,18,27,20,20,19,19,25],
[36,0,20,22,31,26,26,29,27,28],
[34,31,0,27,29,25,22,31,25,31],
[33,29,24,0,38,25,23,36,23,32],
[24,20,22,13,0,15,20,19,20,18],
[31,25,26,26,36,0,24,33,22,30],
[31,25,29,28,31,27,0,31,21,29],
[32,22,20,15,32,18,20,0,24,26],
[32,24,26,28,31,29,30,27,0,28],
[26,23,20,19,33,21,22,25,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,31,30,28,32,28,27,31,25],
[24,0,25,28,27,26,26,24,32,20],
[20,26,0,29,22,27,26,25,31,30],
[21,23,22,0,23,23,23,30,23,22],
[23,24,29,28,0,22,27,30,33,27],
[19,25,24,28,29,0,28,31,28,27],
[23,25,25,28,24,23,0,28,28,24],
[24,27,26,21,21,20,23,0,24,26],
[20,19,20,28,18,23,23,27,0,22],
[26,31,21,29,24,24,27,25,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,17,34,17,34,17,17,34,17],
[17,0,34,51,17,34,34,17,51,0],
[34,17,0,34,0,17,17,17,51,0],
[17,0,17,0,17,34,17,17,17,0],
[34,34,51,34,0,17,34,17,51,0],
[17,17,34,17,34,0,34,17,34,0],
[34,17,34,34,17,17,0,34,34,17],
[34,34,34,34,34,34,17,0,34,34],
[17,0,0,34,0,17,17,17,0,0],
[34,51,51,51,51,51,34,17,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,20,30,28,21,32,22,30,26],
[19,0,16,28,23,14,24,14,26,17],
[31,35,0,30,26,23,28,28,30,26],
[21,23,21,0,20,19,26,17,25,24],
[23,28,25,31,0,27,28,23,28,27],
[30,37,28,32,24,0,23,22,36,23],
[19,27,23,25,23,28,0,14,23,19],
[29,37,23,34,28,29,37,0,41,33],
[21,25,21,26,23,15,28,10,0,21],
[25,34,25,27,24,28,32,18,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,22,32,19,28,16,21,13,18],
[39,0,25,36,33,32,27,36,35,47],
[29,26,0,29,18,22,29,26,29,41],
[19,15,22,0,12,18,18,26,16,15],
[32,18,33,39,0,39,32,33,29,32],
[23,19,29,33,12,0,28,23,20,19],
[35,24,22,33,19,23,0,36,18,24],
[30,15,25,25,18,28,15,0,15,20],
[38,16,22,35,22,31,33,36,0,26],
[33,4,10,36,19,32,27,31,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,30,22,41,40,40,29,22,41],
[11,0,33,33,41,51,51,21,33,41],
[21,18,0,43,41,51,40,39,32,51],
[29,18,8,0,31,29,28,19,8,31],
[10,10,10,20,0,10,20,10,10,10],
[11,0,0,22,41,0,18,11,10,33],
[11,0,11,23,31,33,0,11,0,23],
[22,30,12,32,41,40,40,0,22,51],
[29,18,19,43,41,41,51,29,0,51],
[10,10,0,20,41,18,28,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,17,26,23,22,21,27,26,15],
[30,0,17,22,28,22,23,17,30,28],
[34,34,0,33,21,45,34,16,34,38],
[25,29,18,0,23,25,24,18,29,33],
[28,23,30,28,0,35,23,21,28,23],
[29,29,6,26,16,0,11,5,29,21],
[30,28,17,27,28,40,0,22,28,33],
[24,34,35,33,30,46,29,0,34,39],
[25,21,17,22,23,22,23,17,0,28],
[36,23,13,18,28,30,18,12,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,19,27,15,21,19,11,18,21],
[37,0,30,31,35,27,27,29,28,23],
[32,21,0,32,20,24,19,18,20,25],
[24,20,19,0,22,28,17,14,16,28],
[36,16,31,29,0,21,23,23,28,24],
[30,24,27,23,30,0,33,22,24,30],
[32,24,32,34,28,18,0,20,21,24],
[40,22,33,37,28,29,31,0,23,26],
[33,23,31,35,23,27,30,28,0,23],
[30,28,26,23,27,21,27,25,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,29,34,30,23,28,32,24,36],
[23,0,22,24,25,25,26,32,21,22],
[22,29,0,24,24,25,26,35,25,27],
[17,27,27,0,23,17,26,27,23,30],
[21,26,27,28,0,24,24,29,24,34],
[28,26,26,34,27,0,22,27,32,35],
[23,25,25,25,27,29,0,27,27,32],
[19,19,16,24,22,24,24,0,21,24],
[27,30,26,28,27,19,24,30,0,35],
[15,29,24,21,17,16,19,27,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,21,16,16,29,25,28,20,19],
[24,0,24,26,21,30,32,37,17,28],
[30,27,0,33,19,29,27,29,27,32],
[35,25,18,0,22,25,24,22,27,18],
[35,30,32,29,0,29,22,35,25,30],
[22,21,22,26,22,0,23,33,25,25],
[26,19,24,27,29,28,0,27,20,28],
[23,14,22,29,16,18,24,0,19,24],
[31,34,24,24,26,26,31,32,0,29],
[32,23,19,33,21,26,23,27,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,26,23,27,25,29,29,28],
[24,0,17,24,15,22,21,24,23,29],
[23,34,0,20,22,24,21,24,24,35],
[25,27,31,0,27,35,30,34,37,35],
[28,36,29,24,0,25,31,29,32,33],
[24,29,27,16,26,0,19,21,20,24],
[26,30,30,21,20,32,0,29,32,32],
[22,27,27,17,22,30,22,0,25,31],
[22,28,27,14,19,31,19,26,0,30],
[23,22,16,16,18,27,19,20,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,27,25,28,20,25,26,26,22],
[29,0,29,28,29,26,20,38,28,19],
[24,22,0,24,18,25,25,29,29,21],
[26,23,27,0,26,20,24,25,23,21],
[23,22,33,25,0,25,23,26,29,26],
[31,25,26,31,26,0,28,31,27,25],
[26,31,26,27,28,23,0,35,31,26],
[25,13,22,26,25,20,16,0,27,18],
[25,23,22,28,22,24,20,24,0,17],
[29,32,30,30,25,26,25,33,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,23,29,28,27,23,29,28,22],
[24,0,30,22,23,27,25,33,27,26],
[28,21,0,24,24,21,23,29,31,26],
[22,29,27,0,23,23,27,33,28,27],
[23,28,27,28,0,21,26,30,28,30],
[24,24,30,28,30,0,31,28,29,32],
[28,26,28,24,25,20,0,24,22,32],
[22,18,22,18,21,23,27,0,30,23],
[23,24,20,23,23,22,29,21,0,21],
[29,25,25,24,21,19,19,28,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,24,27,32,29,34,28,31,27],
[17,0,22,18,21,26,19,27,23,20],
[27,29,0,21,27,26,28,26,23,28],
[24,33,30,0,31,26,28,30,29,29],
[19,30,24,20,0,26,23,30,27,26],
[22,25,25,25,25,0,22,25,26,21],
[17,32,23,23,28,29,0,24,28,18],
[23,24,25,21,21,26,27,0,28,18],
[20,28,28,22,24,25,23,23,0,21],
[24,31,23,22,25,30,33,33,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,27,32,23,26,19,26,25,30],
[20,0,30,26,26,30,26,31,31,35],
[24,21,0,26,25,26,20,24,21,24],
[19,25,25,0,20,23,17,27,25,30],
[28,25,26,31,0,24,20,26,27,29],
[25,21,25,28,27,0,23,28,26,25],
[32,25,31,34,31,28,0,35,30,37],
[25,20,27,24,25,23,16,0,27,23],
[26,20,30,26,24,25,21,24,0,26],
[21,16,27,21,22,26,14,28,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,29,33,25,29,23,23,31,25],
[24,0,22,32,16,22,22,24,25,27],
[22,29,0,29,20,24,24,24,27,22],
[18,19,22,0,16,18,19,19,23,25],
[26,35,31,35,0,33,23,27,34,30],
[22,29,27,33,18,0,25,27,32,28],
[28,29,27,32,28,26,0,30,32,23],
[28,27,27,32,24,24,21,0,29,26],
[20,26,24,28,17,19,19,22,0,24],
[26,24,29,26,21,23,28,25,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,22,20,18,30,24,18,21,19],
[32,0,24,33,27,28,27,29,22,31],
[29,27,0,33,17,34,27,26,30,25],
[31,18,18,0,20,24,24,18,23,17],
[33,24,34,31,0,35,23,26,29,33],
[21,23,17,27,16,0,15,22,16,28],
[27,24,24,27,28,36,0,20,30,31],
[33,22,25,33,25,29,31,0,27,26],
[30,29,21,28,22,35,21,24,0,32],
[32,20,26,34,18,23,20,25,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,19,29,24,22,21,22,19,23],
[28,0,21,36,30,24,26,29,29,27],
[32,30,0,30,24,26,29,28,22,26],
[22,15,21,0,24,17,19,21,24,21],
[27,21,27,27,0,22,26,27,18,25],
[29,27,25,34,29,0,25,27,28,25],
[30,25,22,32,25,26,0,30,26,25],
[29,22,23,30,24,24,21,0,27,26],
[32,22,29,27,33,23,25,24,0,21],
[28,24,25,30,26,26,26,25,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,31,41,9,22,11,11,10,30],
[31,0,42,31,21,42,31,31,31,21],
[20,9,0,20,19,0,10,10,20,19],
[10,20,31,0,19,11,0,0,10,9],
[42,30,32,32,0,32,21,21,10,21],
[29,9,51,40,19,0,31,10,20,30],
[40,20,41,51,30,20,0,20,19,19],
[40,20,41,51,30,41,31,0,19,30],
[41,20,31,41,41,31,32,32,0,31],
[21,30,32,42,30,21,32,21,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,25,32,24,23,23,17,20,21],
[22,0,23,22,20,20,17,19,23,21],
[26,28,0,28,27,29,26,19,27,29],
[19,29,23,0,24,27,28,24,28,27],
[27,31,24,27,0,25,20,24,25,24],
[28,31,22,24,26,0,22,22,21,27],
[28,34,25,23,31,29,0,23,31,29],
[34,32,32,27,27,29,28,0,33,25],
[31,28,24,23,26,30,20,18,0,27],
[30,30,22,24,27,24,22,26,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,36,26,26,17,21,25,35,28],
[30,0,28,28,24,24,26,27,29,26],
[15,23,0,25,24,21,16,19,24,20],
[25,23,26,0,25,23,24,24,28,25],
[25,27,27,26,0,26,25,27,35,21],
[34,27,30,28,25,0,23,26,32,26],
[30,25,35,27,26,28,0,29,29,27],
[26,24,32,27,24,25,22,0,26,21],
[16,22,27,23,16,19,22,25,0,15],
[23,25,31,26,30,25,24,30,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,30,39,36,36,29,28,38,23],
[8,0,23,29,28,27,15,31,25,11],
[21,28,0,17,31,19,23,32,20,21],
[12,22,34,0,32,22,15,26,32,21],
[15,23,20,19,0,15,23,23,29,18],
[15,24,32,29,36,0,24,31,28,21],
[22,36,28,36,28,27,0,25,30,20],
[23,20,19,25,28,20,26,0,37,29],
[13,26,31,19,22,23,21,14,0,22],
[28,40,30,30,33,30,31,22,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,24,25,22,31,26,23,21,25],
[31,0,27,22,24,22,23,24,16,24],
[27,24,0,29,26,25,28,27,24,32],
[26,29,22,0,32,33,26,23,30,33],
[29,27,25,19,0,33,32,19,22,29],
[20,29,26,18,18,0,22,15,18,28],
[25,28,23,25,19,29,0,14,26,20],
[28,27,24,28,32,36,37,0,30,27],
[30,35,27,21,29,33,25,21,0,20],
[26,27,19,18,22,23,31,24,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,0,17,18,17,0,17,18,18],
[33,0,17,17,34,17,0,33,18,18],
[51,34,0,33,34,33,16,33,34,34],
[34,34,18,0,34,16,16,16,34,34],
[33,17,17,17,0,17,17,17,17,35],
[34,34,18,35,34,0,34,51,18,34],
[51,51,35,35,34,17,0,51,35,35],
[34,18,18,35,34,0,0,0,18,18],
[33,33,17,17,34,33,16,33,0,51],
[33,33,17,17,16,17,16,33,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,31,25,21,25,27,27,37,27],
[29,0,28,27,23,19,27,20,34,29],
[20,23,0,25,21,22,27,22,29,28],
[26,24,26,0,29,30,25,20,36,28],
[30,28,30,22,0,27,29,28,39,29],
[26,32,29,21,24,0,23,24,39,27],
[24,24,24,26,22,28,0,22,29,24],
[24,31,29,31,23,27,29,0,33,30],
[14,17,22,15,12,12,22,18,0,16],
[24,22,23,23,22,24,27,21,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,34,33,23,21,30,29,36,31],
[25,0,36,32,34,19,25,30,38,28],
[17,15,0,31,15,16,20,18,37,22],
[18,19,20,0,21,19,24,27,27,28],
[28,17,36,30,0,13,23,26,32,28],
[30,32,35,32,38,0,29,25,30,29],
[21,26,31,27,28,22,0,28,35,33],
[22,21,33,24,25,26,23,0,40,36],
[15,13,14,24,19,21,16,11,0,24],
[20,23,29,23,23,22,18,15,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,25,21,27,26,18,20,19,21],
[30,0,22,23,30,27,19,22,24,18],
[26,29,0,28,26,27,23,23,27,22],
[30,28,23,0,26,28,20,22,21,21],
[24,21,25,25,0,21,15,15,23,19],
[25,24,24,23,30,0,23,20,23,22],
[33,32,28,31,36,28,0,27,23,31],
[31,29,28,29,36,31,24,0,31,27],
[32,27,24,30,28,28,28,20,0,27],
[30,33,29,30,32,29,20,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,27,32,27,28,29,22,21,24],
[20,0,20,20,20,27,18,22,20,22],
[24,31,0,22,26,25,21,29,34,25],
[19,31,29,0,21,30,24,27,27,27],
[24,31,25,30,0,30,29,30,37,29],
[23,24,26,21,21,0,23,18,28,24],
[22,33,30,27,22,28,0,25,31,23],
[29,29,22,24,21,33,26,0,31,25],
[30,31,17,24,14,23,20,20,0,21],
[27,29,26,24,22,27,28,26,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,24,24,17,27,29,30,32,29],
[21,0,19,24,18,23,28,32,23,23],
[27,32,0,35,21,33,26,35,24,31],
[27,27,16,0,19,22,27,25,22,26],
[34,33,30,32,0,25,31,41,31,26],
[24,28,18,29,26,0,25,27,25,25],
[22,23,25,24,20,26,0,25,20,25],
[21,19,16,26,10,24,26,0,21,16],
[19,28,27,29,20,26,31,30,0,25],
[22,28,20,25,25,26,26,35,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,26,26,23,22,24,28,22],
[24,0,28,24,27,21,21,23,25,21],
[23,23,0,27,26,23,24,27,22,26],
[25,27,24,0,26,24,25,22,26,27],
[25,24,25,25,0,30,21,25,29,27],
[28,30,28,27,21,0,26,27,31,23],
[29,30,27,26,30,25,0,28,23,26],
[27,28,24,29,26,24,23,0,24,26],
[23,26,29,25,22,20,28,27,0,25],
[29,30,25,24,24,28,25,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,21,22,21,24,25,21,29,27],
[33,0,30,25,30,29,26,32,26,26],
[30,21,0,22,26,25,25,33,25,30],
[29,26,29,0,22,27,27,34,24,28],
[30,21,25,29,0,23,22,22,30,31],
[27,22,26,24,28,0,27,26,28,25],
[26,25,26,24,29,24,0,24,28,24],
[30,19,18,17,29,25,27,0,21,26],
[22,25,26,27,21,23,23,30,0,25],
[24,25,21,23,20,26,27,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,21,27,24,19,30,33,25],
[28,0,26,24,29,22,28,31,35,19],
[25,25,0,27,30,17,20,34,26,26],
[30,27,24,0,28,24,28,28,28,23],
[24,22,21,23,0,20,19,27,28,20],
[27,29,34,27,31,0,24,37,35,30],
[32,23,31,23,32,27,0,30,33,33],
[21,20,17,23,24,14,21,0,25,24],
[18,16,25,23,23,16,18,26,0,26],
[26,32,25,28,31,21,18,27,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,38,39,40,36,39,41,33,18],
[19,0,29,25,32,35,24,19,24,29],
[13,22,0,25,33,18,25,21,14,11],
[12,26,26,0,40,18,25,33,32,18],
[11,19,18,11,0,24,19,19,20,18],
[15,16,33,33,27,0,32,22,32,26],
[12,27,26,26,32,19,0,28,32,18],
[10,32,30,18,32,29,23,0,17,18],
[18,27,37,19,31,19,19,34,0,24],
[33,22,40,33,33,25,33,33,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,34,30,29,27,26,25,25,26],
[23,0,30,21,20,24,22,21,30,26],
[17,21,0,22,19,25,22,24,24,19],
[21,30,29,0,29,29,18,27,26,20],
[22,31,32,22,0,30,26,29,26,24],
[24,27,26,22,21,0,18,23,23,21],
[25,29,29,33,25,33,0,25,26,20],
[26,30,27,24,22,28,26,0,28,23],
[26,21,27,25,25,28,25,23,0,26],
[25,25,32,31,27,30,31,28,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,32,32,32,22,33,28,34,21],
[24,0,37,33,43,28,36,24,35,25],
[19,14,0,23,25,22,28,21,30,19],
[19,18,28,0,24,21,30,20,30,18],
[19,8,26,27,0,26,24,18,24,22],
[29,23,29,30,25,0,30,23,29,23],
[18,15,23,21,27,21,0,13,27,23],
[23,27,30,31,33,28,38,0,36,28],
[17,16,21,21,27,22,24,15,0,25],
[30,26,32,33,29,28,28,23,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,35,29,33,31,23,29,22,31],
[21,0,30,29,31,27,25,25,21,33],
[16,21,0,22,25,23,25,22,21,21],
[22,22,29,0,27,28,30,26,19,24],
[18,20,26,24,0,24,25,23,20,23],
[20,24,28,23,27,0,18,22,15,28],
[28,26,26,21,26,33,0,19,24,24],
[22,26,29,25,28,29,32,0,22,29],
[29,30,30,32,31,36,27,29,0,25],
[20,18,30,27,28,23,27,22,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,20,28,23,22,23,26,30,26],
[26,0,24,26,21,24,27,25,34,27],
[31,27,0,25,27,27,27,26,33,26],
[23,25,26,0,24,23,25,26,30,28],
[28,30,24,27,0,31,29,33,33,30],
[29,27,24,28,20,0,26,21,24,30],
[28,24,24,26,22,25,0,22,27,28],
[25,26,25,25,18,30,29,0,30,30],
[21,17,18,21,18,27,24,21,0,24],
[25,24,25,23,21,21,23,21,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,34,17,17,17,17,17,17,34],
[17,0,17,17,17,17,0,17,17,17],
[17,34,0,0,17,0,17,17,34,0],
[34,34,51,0,51,34,17,51,51,51],
[34,34,34,0,0,17,17,34,51,17],
[34,34,51,17,34,0,34,17,34,34],
[34,51,34,34,34,17,0,34,34,34],
[34,34,34,0,17,34,17,0,34,17],
[34,34,17,0,0,17,17,17,0,17],
[17,34,51,0,34,17,17,34,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,21,26,25,28,33,21,29,29],
[30,0,24,29,27,26,36,22,26,30],
[30,27,0,25,18,22,27,20,26,27],
[25,22,26,0,25,25,33,24,25,27],
[26,24,33,26,0,25,33,26,27,32],
[23,25,29,26,26,0,28,25,28,27],
[18,15,24,18,18,23,0,17,22,28],
[30,29,31,27,25,26,34,0,30,27],
[22,25,25,26,24,23,29,21,0,29],
[22,21,24,24,19,24,23,24,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,35,32,29,32,28,32,35,23],
[19,0,32,34,30,27,32,23,30,26],
[16,19,0,25,20,23,26,22,23,22],
[19,17,26,0,19,22,31,27,27,27],
[22,21,31,32,0,28,32,28,25,21],
[19,24,28,29,23,0,27,23,27,21],
[23,19,25,20,19,24,0,20,23,18],
[19,28,29,24,23,28,31,0,26,27],
[16,21,28,24,26,24,28,25,0,20],
[28,25,29,24,30,30,33,24,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,29,22,20,21,24,14,7,22],
[16,0,22,16,29,23,16,16,16,29],
[22,29,0,29,29,14,22,14,22,20],
[29,35,22,0,20,30,31,7,16,29],
[31,22,22,31,0,30,24,30,31,22],
[30,28,37,21,21,0,24,13,24,22],
[27,35,29,20,27,27,0,27,20,22],
[37,35,37,44,21,38,24,0,31,30],
[44,35,29,35,20,27,31,20,0,22],
[29,22,31,22,29,29,29,21,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,21,30,41,11,31,31,30,21],
[20,0,31,30,31,21,31,31,30,10],
[30,20,0,30,40,31,20,20,30,20],
[21,21,21,0,31,11,21,31,30,21],
[10,20,11,20,0,11,21,31,20,20],
[40,30,20,40,40,0,30,20,40,30],
[20,20,31,30,30,21,0,31,30,20],
[20,20,31,20,20,31,20,0,30,20],
[21,21,21,21,31,11,21,21,0,21],
[30,41,31,30,31,21,31,31,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,24,28,22,27,20,24,25,23],
[32,0,25,35,27,30,25,30,28,25],
[27,26,0,27,25,22,26,24,24,22],
[23,16,24,0,23,17,21,20,19,21],
[29,24,26,28,0,27,27,27,25,22],
[24,21,29,34,24,0,22,25,21,23],
[31,26,25,30,24,29,0,26,27,22],
[27,21,27,31,24,26,25,0,26,27],
[26,23,27,32,26,30,24,25,0,20],
[28,26,29,30,29,28,29,24,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,31,23,25,23,13,31,21,25],
[22,0,29,25,27,29,15,28,33,32],
[20,22,0,20,21,23,18,17,18,25],
[28,26,31,0,27,27,28,22,27,36],
[26,24,30,24,0,34,24,23,30,31],
[28,22,28,24,17,0,21,26,29,21],
[38,36,33,23,27,30,0,33,33,33],
[20,23,34,29,28,25,18,0,36,28],
[30,18,33,24,21,22,18,15,0,28],
[26,19,26,15,20,30,18,23,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,21,26,31,27,30,25,27],
[23,0,26,26,24,36,24,27,20,28],
[25,25,0,28,22,29,28,31,22,22],
[30,25,23,0,22,29,22,26,22,25],
[25,27,29,29,0,35,29,32,28,30],
[20,15,22,22,16,0,22,23,16,20],
[24,27,23,29,22,29,0,28,21,23],
[21,24,20,25,19,28,23,0,25,22],
[26,31,29,29,23,35,30,26,0,29],
[24,23,29,26,21,31,28,29,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,23,19,19,27,24,26,19,19],
[31,0,30,29,24,25,31,26,29,20],
[28,21,0,22,25,24,29,18,25,25],
[32,22,29,0,27,26,29,24,27,27],
[32,27,26,24,0,26,31,32,21,25],
[24,26,27,25,25,0,32,32,27,22],
[27,20,22,22,20,19,0,21,19,25],
[25,25,33,27,19,19,30,0,18,27],
[32,22,26,24,30,24,32,33,0,23],
[32,31,26,24,26,29,26,24,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,51,51,40,36,36,25,28,40],
[11,0,23,11,11,24,24,11,24,26],
[0,28,0,28,28,13,13,0,28,15],
[0,40,23,0,40,13,25,12,28,15],
[11,40,23,11,0,24,24,12,39,15],
[15,27,38,38,27,0,51,27,15,15],
[15,27,38,26,27,0,0,27,15,15],
[26,40,51,39,39,24,24,0,39,39],
[23,27,23,23,12,36,36,12,0,27],
[11,25,36,36,36,36,36,12,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,21,40,8,8,40,8,30,19],
[32,0,32,21,11,32,32,22,22,51],
[30,19,0,19,19,30,40,19,19,30],
[11,30,32,0,8,11,40,19,30,30],
[43,40,32,43,0,21,43,43,43,51],
[43,19,21,40,30,0,40,30,30,40],
[11,19,11,11,8,11,0,8,19,19],
[43,29,32,32,8,21,43,0,22,29],
[21,29,32,21,8,21,32,29,0,40],
[32,0,21,21,0,11,32,22,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,36,18,36,18,36,0,36,36],
[33,0,36,18,36,33,51,33,36,51],
[15,15,0,18,0,15,15,15,36,15],
[33,33,33,0,18,15,33,33,51,33],
[15,15,51,33,0,15,51,15,51,33],
[33,18,36,36,36,0,51,33,36,18],
[15,0,36,18,0,0,0,0,36,18],
[51,18,36,18,36,18,51,0,36,36],
[15,15,15,0,0,15,15,15,0,15],
[15,0,36,18,18,33,33,15,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,12,21,25,24,11,26,17,25],
[30,0,34,34,39,30,25,30,38,31],
[39,17,0,31,33,28,15,33,26,29],
[30,17,20,0,34,24,24,29,28,26],
[26,12,18,17,0,19,11,24,25,17],
[27,21,23,27,32,0,17,25,22,31],
[40,26,36,27,40,34,0,22,39,35],
[25,21,18,22,27,26,29,0,30,31],
[34,13,25,23,26,29,12,21,0,30],
[26,20,22,25,34,20,16,20,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,34,31,30,31,26,22,27,30],
[32,0,33,31,28,34,28,23,28,27],
[17,18,0,26,27,23,18,23,20,17],
[20,20,25,0,20,25,20,24,18,16],
[21,23,24,31,0,26,20,27,26,22],
[20,17,28,26,25,0,22,22,24,21],
[25,23,33,31,31,29,0,30,23,30],
[29,28,28,27,24,29,21,0,21,27],
[24,23,31,33,25,27,28,30,0,24],
[21,24,34,35,29,30,21,24,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,39,29,34,34,22,17,22,28],
[23,0,29,30,35,34,18,29,29,30],
[12,22,0,23,16,17,22,17,22,34],
[22,21,28,0,33,21,22,11,16,28],
[17,16,35,18,0,22,12,17,17,24],
[17,17,34,30,29,0,23,17,28,29],
[29,33,29,29,39,28,0,17,29,35],
[34,22,34,40,34,34,34,0,35,34],
[29,22,29,35,34,23,22,16,0,29],
[23,21,17,23,27,22,16,17,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,24,28,26,24,37,30,24,24],
[29,0,24,26,32,42,37,23,24,18],
[27,27,0,27,33,46,46,27,34,21],
[23,25,24,0,38,36,37,30,24,24],
[25,19,18,13,0,42,31,18,24,18],
[27,9,5,15,9,0,40,6,18,5],
[14,14,5,14,20,11,0,5,18,11],
[21,28,24,21,33,45,46,0,39,33],
[27,27,17,27,27,33,33,12,0,17],
[27,33,30,27,33,46,40,18,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,22,16,20,17,17,20,19,26],
[33,0,26,25,24,27,29,30,33,28],
[29,25,0,20,24,19,22,21,27,27],
[35,26,31,0,23,33,31,29,27,31],
[31,27,27,28,0,25,29,30,31,32],
[34,24,32,18,26,0,30,22,24,24],
[34,22,29,20,22,21,0,25,23,28],
[31,21,30,22,21,29,26,0,31,32],
[32,18,24,24,20,27,28,20,0,32],
[25,23,24,20,19,27,23,19,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,23,22,25,28,26,28,29,20],
[26,0,25,31,29,28,26,21,30,28],
[28,26,0,26,30,28,29,32,23,27],
[29,20,25,0,32,27,24,30,26,22],
[26,22,21,19,0,32,23,24,23,19],
[23,23,23,24,19,0,25,25,25,21],
[25,25,22,27,28,26,0,26,21,25],
[23,30,19,21,27,26,25,0,24,27],
[22,21,28,25,28,26,30,27,0,29],
[31,23,24,29,32,30,26,24,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,33,27,23,26,39,36,23,38],
[17,0,33,23,29,20,29,30,24,28],
[18,18,0,21,28,12,29,32,14,28],
[24,28,30,0,25,21,31,29,22,25],
[28,22,23,26,0,19,25,22,27,26],
[25,31,39,30,32,0,36,36,28,39],
[12,22,22,20,26,15,0,22,28,25],
[15,21,19,22,29,15,29,0,15,21],
[28,27,37,29,24,23,23,36,0,33],
[13,23,23,26,25,12,26,30,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,21,33,29,24,30,26,19,17],
[22,0,22,34,20,31,25,22,18,18],
[30,29,0,28,32,25,27,29,24,34],
[18,17,23,0,21,15,22,14,13,18],
[22,31,19,30,0,21,14,27,21,22],
[27,20,26,36,30,0,32,23,15,20],
[21,26,24,29,37,19,0,30,14,19],
[25,29,22,37,24,28,21,0,21,17],
[32,33,27,38,30,36,37,30,0,19],
[34,33,17,33,29,31,32,34,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,29,20,30,27,31,28,24,22],
[22,0,30,26,39,17,34,29,31,27],
[22,21,0,23,33,17,32,26,21,22],
[31,25,28,0,31,23,29,29,30,25],
[21,12,18,20,0,18,26,27,26,13],
[24,34,34,28,33,0,33,32,23,26],
[20,17,19,22,25,18,0,25,19,24],
[23,22,25,22,24,19,26,0,25,18],
[27,20,30,21,25,28,32,26,0,20],
[29,24,29,26,38,25,27,33,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,28,20,26,26,24,27,29],
[24,0,21,21,23,24,27,21,24,29],
[24,30,0,25,26,27,27,23,23,27],
[23,30,26,0,21,28,25,25,26,30],
[31,28,25,30,0,33,30,28,29,31],
[25,27,24,23,18,0,27,19,24,26],
[25,24,24,26,21,24,0,22,28,24],
[27,30,28,26,23,32,29,0,29,26],
[24,27,28,25,22,27,23,22,0,28],
[22,22,24,21,20,25,27,25,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,38,25,13,38,38,12,25,25],
[25,0,25,12,13,12,25,12,25,12],
[13,26,0,25,0,25,25,25,25,25],
[26,39,26,0,13,26,26,25,38,13],
[38,38,51,38,0,25,38,38,38,38],
[13,39,26,25,26,0,38,25,25,38],
[13,26,26,25,13,13,0,12,25,0],
[39,39,26,26,13,26,39,0,38,26],
[26,26,26,13,13,26,26,13,0,26],
[26,39,26,38,13,13,51,25,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,25,21,34,28,21,29,31,16],
[17,0,9,27,26,22,20,21,23,15],
[26,42,0,22,35,32,23,38,29,27],
[30,24,29,0,34,27,26,30,31,25],
[17,25,16,17,0,14,13,27,24,19],
[23,29,19,24,37,0,21,27,25,27],
[30,31,28,25,38,30,0,29,28,20],
[22,30,13,21,24,24,22,0,22,23],
[20,28,22,20,27,26,23,29,0,20],
[35,36,24,26,32,24,31,28,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,17,21,23,19,30,26,20,22],
[28,0,22,34,23,18,29,26,19,20],
[34,29,0,37,27,26,32,30,27,23],
[30,17,14,0,28,16,33,22,18,16],
[28,28,24,23,0,16,30,27,19,28],
[32,33,25,35,35,0,34,27,27,23],
[21,22,19,18,21,17,0,22,19,16],
[25,25,21,29,24,24,29,0,25,29],
[31,32,24,33,32,24,32,26,0,23],
[29,31,28,35,23,28,35,22,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,12,12,38,38,37,26,51,39],
[25,0,37,25,37,24,37,12,51,39],
[39,14,0,39,38,38,51,14,51,39],
[39,26,12,0,26,38,25,26,39,39],
[13,14,13,25,0,26,25,14,27,39],
[13,27,13,13,25,0,25,27,39,39],
[14,14,0,26,26,26,0,14,27,39],
[25,39,37,25,37,24,37,0,51,39],
[0,0,0,12,24,12,24,0,0,26],
[12,12,12,12,12,12,12,12,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,26,27,25,29,21,26,19,27],
[24,0,24,31,27,29,23,28,19,23],
[25,27,0,29,34,28,26,30,24,29],
[24,20,22,0,31,20,25,29,24,22],
[26,24,17,20,0,24,17,20,15,23],
[22,22,23,31,27,0,22,24,19,24],
[30,28,25,26,34,29,0,31,27,24],
[25,23,21,22,31,27,20,0,22,22],
[32,32,27,27,36,32,24,29,0,30],
[24,28,22,29,28,27,27,29,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,38,28,25,30,37,33,25,37],
[24,0,35,27,28,34,32,31,18,27],
[13,16,0,16,11,14,30,13,14,21],
[23,24,35,0,18,27,31,29,20,31],
[26,23,40,33,0,28,47,44,28,41],
[21,17,37,24,23,0,42,27,23,30],
[14,19,21,20,4,9,0,12,22,19],
[18,20,38,22,7,24,39,0,25,36],
[26,33,37,31,23,28,29,26,0,31],
[14,24,30,20,10,21,32,15,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,20,23,24,19,29,23,23,22],
[28,0,23,29,23,18,31,27,27,26],
[31,28,0,25,19,18,23,29,24,25],
[28,22,26,0,27,19,29,29,17,17],
[27,28,32,24,0,27,28,29,27,20],
[32,33,33,32,24,0,27,34,26,28],
[22,20,28,22,23,24,0,24,24,23],
[28,24,22,22,22,17,27,0,19,21],
[28,24,27,34,24,25,27,32,0,28],
[29,25,26,34,31,23,28,30,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,17,29,23,24,37,33,25,17],
[24,0,27,27,31,26,32,32,34,29],
[34,24,0,34,29,28,32,33,34,23],
[22,24,17,0,20,23,31,33,30,25],
[28,20,22,31,0,22,34,34,34,23],
[27,25,23,28,29,0,35,36,30,25],
[14,19,19,20,17,16,0,35,30,9],
[18,19,18,18,17,15,16,0,22,9],
[26,17,17,21,17,21,21,29,0,14],
[34,22,28,26,28,26,42,42,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,25,29,29,26,22,24,22,28],
[25,0,27,31,34,18,24,16,26,32],
[26,24,0,31,29,24,27,20,27,31],
[22,20,20,0,25,17,23,22,26,23],
[22,17,22,26,0,14,17,22,21,24],
[25,33,27,34,37,0,25,27,35,35],
[29,27,24,28,34,26,0,24,27,30],
[27,35,31,29,29,24,27,0,30,27],
[29,25,24,25,30,16,24,21,0,27],
[23,19,20,28,27,16,21,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,29,36,36,29,23,37,29,44],
[7,0,22,20,15,28,15,22,7,22],
[22,29,0,28,36,29,30,30,29,29],
[15,31,23,0,22,29,15,22,15,23],
[15,36,15,29,0,29,8,22,14,29],
[22,23,22,22,22,0,22,22,15,37],
[28,36,21,36,43,29,0,36,14,44],
[14,29,21,29,29,29,15,0,29,29],
[22,44,22,36,37,36,37,22,0,36],
[7,29,22,28,22,14,7,22,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,34,28,25,26,23,21,26,27],
[24,0,31,26,18,25,19,20,22,23],
[17,20,0,20,15,21,18,17,18,19],
[23,25,31,0,21,30,13,23,21,32],
[26,33,36,30,0,31,25,29,29,30],
[25,26,30,21,20,0,14,22,20,22],
[28,32,33,38,26,37,0,26,24,31],
[30,31,34,28,22,29,25,0,26,31],
[25,29,33,30,22,31,27,25,0,30],
[24,28,32,19,21,29,20,20,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,25,25,17,13,28,15,29,22],
[30,0,26,22,29,23,29,18,34,32],
[26,25,0,15,17,20,19,11,28,21],
[26,29,36,0,23,20,26,21,30,24],
[34,22,34,28,0,31,28,26,31,31],
[38,28,31,31,20,0,29,23,32,31],
[23,22,32,25,23,22,0,21,32,27],
[36,33,40,30,25,28,30,0,42,31],
[22,17,23,21,20,19,19,9,0,21],
[29,19,30,27,20,20,24,20,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,26,20,28,23,29,25,21,18],
[21,0,26,20,23,18,24,23,12,23],
[25,25,0,22,26,28,30,27,22,24],
[31,31,29,0,31,20,35,32,27,31],
[23,28,25,20,0,26,30,29,19,20],
[28,33,23,31,25,0,27,39,27,31],
[22,27,21,16,21,24,0,31,23,18],
[26,28,24,19,22,12,20,0,20,28],
[30,39,29,24,32,24,28,31,0,28],
[33,28,27,20,31,20,33,23,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,12,12,12,38,23,12,23,23],
[24,0,12,11,23,26,24,11,23,24],
[39,39,0,24,24,39,24,24,36,24],
[39,40,27,0,23,26,36,40,23,36],
[39,28,27,28,0,39,39,28,23,24],
[13,25,12,25,12,0,25,25,12,25],
[28,27,27,15,12,26,0,27,12,12],
[39,40,27,11,23,26,24,0,23,24],
[28,28,15,28,28,39,39,28,0,13],
[28,27,27,15,27,26,39,27,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,34,16,18,18,34,34,34,34],
[17,0,34,0,17,18,34,16,16,34],
[17,17,0,17,17,35,0,17,17,35],
[35,51,34,0,35,18,34,51,34,34],
[33,34,34,16,0,18,34,34,34,34],
[33,33,16,33,33,0,16,33,33,51],
[17,17,51,17,17,35,0,17,17,35],
[17,35,34,0,17,18,34,0,16,34],
[17,35,34,17,17,18,34,35,0,35],
[17,17,16,17,17,0,16,17,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,46,31,21,25,20,33,28,20],
[32,0,33,31,20,31,13,39,28,13],
[5,18,0,19,13,18,18,25,21,12],
[20,20,32,0,14,13,6,21,20,14],
[30,31,38,37,0,25,31,19,39,18],
[26,20,33,38,26,0,18,33,20,27],
[31,38,33,45,20,33,0,39,34,32],
[18,12,26,30,32,18,12,0,20,6],
[23,23,30,31,12,31,17,31,0,24],
[31,38,39,37,33,24,19,45,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,27,32,24,26,19,19,26,33],
[21,0,19,26,21,14,23,17,19,26],
[24,32,0,31,24,24,22,22,22,36],
[19,25,20,0,23,16,16,18,23,28],
[27,30,27,28,0,25,25,19,25,25],
[25,37,27,35,26,0,27,27,24,31],
[32,28,29,35,26,24,0,19,31,34],
[32,34,29,33,32,24,32,0,28,33],
[25,32,29,28,26,27,20,23,0,37],
[18,25,15,23,26,20,17,18,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,32,27,21,34,27,24,22,27],
[19,0,17,17,7,31,31,21,26,9],
[19,34,0,39,25,29,37,24,23,14],
[24,34,12,0,15,25,30,29,35,14],
[30,44,26,36,0,34,39,33,34,20],
[17,20,22,26,17,0,28,15,33,20],
[24,20,14,21,12,23,0,25,20,19],
[27,30,27,22,18,36,26,0,30,22],
[29,25,28,16,17,18,31,21,0,25],
[24,42,37,37,31,31,32,29,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,29,31,30,28,36,31,34,25],
[21,0,24,28,28,26,28,28,27,27],
[22,27,0,33,30,30,33,26,31,23],
[20,23,18,0,23,21,26,25,28,21],
[21,23,21,28,0,29,33,30,25,22],
[23,25,21,30,22,0,31,23,33,22],
[15,23,18,25,18,20,0,27,22,16],
[20,23,25,26,21,28,24,0,28,23],
[17,24,20,23,26,18,29,23,0,21],
[26,24,28,30,29,29,35,28,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,16,21,19,15,29,23,14,21],
[34,0,21,21,25,29,33,23,19,26],
[35,30,0,23,29,31,32,28,24,26],
[30,30,28,0,19,29,31,23,25,24],
[32,26,22,32,0,24,32,29,24,27],
[36,22,20,22,27,0,30,25,17,17],
[22,18,19,20,19,21,0,19,19,23],
[28,28,23,28,22,26,32,0,29,24],
[37,32,27,26,27,34,32,22,0,26],
[30,25,25,27,24,34,28,27,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,21,26,30,26,27,23,26,25],
[29,0,27,30,29,23,25,24,26,26],
[30,24,0,31,28,26,22,28,31,24],
[25,21,20,0,21,20,19,21,22,22],
[21,22,23,30,0,18,19,21,23,20],
[25,28,25,31,33,0,27,29,27,30],
[24,26,29,32,32,24,0,27,21,22],
[28,27,23,30,30,22,24,0,30,25],
[25,25,20,29,28,24,30,21,0,29],
[26,25,27,29,31,21,29,26,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,31,29,22,12,22,32,19,31],
[29,0,41,29,22,32,10,20,19,39],
[20,10,0,20,22,10,10,20,10,20],
[22,22,31,0,12,12,12,22,21,31],
[29,29,29,39,0,19,39,30,29,39],
[39,19,41,39,32,0,29,30,29,39],
[29,41,41,39,12,22,0,32,9,41],
[19,31,31,29,21,21,19,0,19,31],
[32,32,41,30,22,22,42,32,0,41],
[20,12,31,20,12,12,10,20,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,33,34,41,31,31,24,26,28],
[21,0,27,34,33,27,21,22,26,24],
[18,24,0,28,29,26,34,23,23,15],
[17,17,23,0,24,16,27,18,26,21],
[10,18,22,27,0,24,23,25,21,23],
[20,24,25,35,27,0,33,25,22,19],
[20,30,17,24,28,18,0,10,20,17],
[27,29,28,33,26,26,41,0,26,19],
[25,25,28,25,30,29,31,25,0,25],
[23,27,36,30,28,32,34,32,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,20,15,24,17,19,32,27,9],
[37,0,41,31,35,16,30,42,27,25],
[31,10,0,13,17,15,14,36,17,12],
[36,20,38,0,30,26,17,43,25,27],
[27,16,34,21,0,26,21,34,17,14],
[34,35,36,25,25,0,27,34,25,22],
[32,21,37,34,30,24,0,32,28,21],
[19,9,15,8,17,17,19,0,20,11],
[24,24,34,26,34,26,23,31,0,21],
[42,26,39,24,37,29,30,40,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,28,31,21,36,22,26,25,30],
[29,0,29,28,20,30,23,30,29,31],
[23,22,0,31,17,27,29,27,21,25],
[20,23,20,0,18,27,20,27,18,29],
[30,31,34,33,0,37,22,35,32,37],
[15,21,24,24,14,0,18,20,17,27],
[29,28,22,31,29,33,0,31,25,30],
[25,21,24,24,16,31,20,0,22,31],
[26,22,30,33,19,34,26,29,0,35],
[21,20,26,22,14,24,21,20,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,22,14,51,32,33,16,33,27],
[28,0,26,18,36,28,28,28,36,36],
[29,25,0,26,43,37,25,16,33,37],
[37,33,25,0,45,45,27,19,35,35],
[0,15,8,6,0,8,16,16,16,0],
[19,23,14,6,43,0,33,16,33,27],
[18,23,26,24,35,18,0,16,32,35],
[35,23,35,32,35,35,35,0,31,35],
[18,15,18,16,35,18,19,20,0,27],
[24,15,14,16,51,24,16,16,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,29,33,18,43,32,27,28,28],
[9,0,25,24,22,25,13,23,25,24],
[22,26,0,38,26,26,26,36,31,32],
[18,27,13,0,26,23,22,27,23,18],
[33,29,25,25,0,35,24,19,29,20],
[8,26,25,28,16,0,22,27,26,28],
[19,38,25,29,27,29,0,23,34,32],
[24,28,15,24,32,24,28,0,29,28],
[23,26,20,28,22,25,17,22,0,18],
[23,27,19,33,31,23,19,23,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,20,15,22,21,16,23,16,19],
[40,0,23,28,30,25,28,30,23,20],
[31,28,0,22,29,28,23,34,23,14],
[36,23,29,0,21,17,27,33,21,24],
[29,21,22,30,0,29,17,30,22,29],
[30,26,23,34,22,0,27,28,23,18],
[35,23,28,24,34,24,0,33,21,26],
[28,21,17,18,21,23,18,0,14,21],
[35,28,28,30,29,28,30,37,0,23],
[32,31,37,27,22,33,25,30,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,19,27,24,20,22,20,22,23],
[30,0,24,31,25,20,24,32,22,27],
[32,27,0,29,27,28,27,27,24,29],
[24,20,22,0,27,20,23,23,26,32],
[27,26,24,24,0,22,29,26,27,29],
[31,31,23,31,29,0,27,27,31,28],
[29,27,24,28,22,24,0,26,24,29],
[31,19,24,28,25,24,25,0,20,29],
[29,29,27,25,24,20,27,31,0,28],
[28,24,22,19,22,23,22,22,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,12,35,37,25,31,29,21,30],
[25,0,26,32,27,31,26,24,27,31],
[39,25,0,39,37,33,31,37,32,29],
[16,19,12,0,31,31,22,19,19,23],
[14,24,14,20,0,20,25,17,19,22],
[26,20,18,20,31,0,22,24,31,24],
[20,25,20,29,26,29,0,26,27,34],
[22,27,14,32,34,27,25,0,22,33],
[30,24,19,32,32,20,24,29,0,36],
[21,20,22,28,29,27,17,18,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,31,14,26,20,13,21,25,25],
[32,0,36,14,16,12,25,20,25,21],
[20,15,0,15,10,16,9,11,19,21],
[37,37,36,0,26,16,21,26,21,26],
[25,35,41,25,0,26,23,25,35,31],
[31,39,35,35,25,0,29,29,45,33],
[38,26,42,30,28,22,0,27,27,36],
[30,31,40,25,26,22,24,0,36,25],
[26,26,32,30,16,6,24,15,0,24],
[26,30,30,25,20,18,15,26,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,29,27,34,27,29,29,29,22],
[25,0,15,22,22,19,24,26,22,22],
[22,36,0,30,27,24,27,29,30,28],
[24,29,21,0,27,22,28,27,32,25],
[17,29,24,24,0,23,25,27,28,28],
[24,32,27,29,28,0,31,29,29,29],
[22,27,24,23,26,20,0,28,25,25],
[22,25,22,24,24,22,23,0,19,22],
[22,29,21,19,23,22,26,32,0,23],
[29,29,23,26,23,22,26,29,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,23,14,21,15,11,10,16,22],
[33,0,25,26,29,34,26,27,29,33],
[28,26,0,30,17,19,15,21,23,33],
[37,25,21,0,21,22,30,27,25,37],
[30,22,34,30,0,23,26,24,20,36],
[36,17,32,29,28,0,29,25,31,36],
[40,25,36,21,25,22,0,29,24,33],
[41,24,30,24,27,26,22,0,21,28],
[35,22,28,26,31,20,27,30,0,35],
[29,18,18,14,15,15,18,23,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,24,26,28,29,26,25,36,28],
[22,0,25,19,23,23,28,26,29,25],
[27,26,0,22,29,28,32,29,33,30],
[25,32,29,0,24,23,30,26,32,28],
[23,28,22,27,0,28,27,26,27,25],
[22,28,23,28,23,0,32,28,34,25],
[25,23,19,21,24,19,0,25,34,27],
[26,25,22,25,25,23,26,0,33,23],
[15,22,18,19,24,17,17,18,0,20],
[23,26,21,23,26,26,24,28,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,18,26,25,25,26,28,24,24],
[29,0,26,26,21,27,25,29,31,24],
[33,25,0,22,23,24,28,28,28,26],
[25,25,29,0,23,28,28,32,28,17],
[26,30,28,28,0,30,30,32,23,26],
[26,24,27,23,21,0,29,33,26,28],
[25,26,23,23,21,22,0,29,20,24],
[23,22,23,19,19,18,22,0,23,17],
[27,20,23,23,28,25,31,28,0,30],
[27,27,25,34,25,23,27,34,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,23,26,19,25,22,25,26,24],
[29,0,28,28,24,30,33,33,25,33],
[28,23,0,24,20,25,24,30,20,30],
[25,23,27,0,26,24,28,31,23,25],
[32,27,31,25,0,25,28,30,25,27],
[26,21,26,27,26,0,31,26,21,29],
[29,18,27,23,23,20,0,32,22,30],
[26,18,21,20,21,25,19,0,15,24],
[25,26,31,28,26,30,29,36,0,30],
[27,18,21,26,24,22,21,27,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,25,23,29,33,27,27,30,29],
[17,0,28,31,22,31,26,27,25,35],
[26,23,0,27,24,31,29,28,31,33],
[28,20,24,0,26,30,21,30,27,33],
[22,29,27,25,0,26,24,26,25,33],
[18,20,20,21,25,0,16,20,19,30],
[24,25,22,30,27,35,0,32,31,41],
[24,24,23,21,25,31,19,0,25,35],
[21,26,20,24,26,32,20,26,0,30],
[22,16,18,18,18,21,10,16,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,20,29,28,20,28,23,29,34],
[27,0,27,34,27,23,26,26,30,35],
[31,24,0,29,25,33,31,23,28,27],
[22,17,22,0,22,19,19,28,21,29],
[23,24,26,29,0,34,28,29,29,31],
[31,28,18,32,17,0,31,26,25,29],
[23,25,20,32,23,20,0,25,24,33],
[28,25,28,23,22,25,26,0,30,33],
[22,21,23,30,22,26,27,21,0,25],
[17,16,24,22,20,22,18,18,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,28,24,22,26,28,25,22,25],
[27,0,28,23,22,20,26,21,23,22],
[23,23,0,25,19,25,26,19,22,21],
[27,28,26,0,27,27,32,24,26,25],
[29,29,32,24,0,22,30,27,20,26],
[25,31,26,24,29,0,30,27,28,30],
[23,25,25,19,21,21,0,23,26,24],
[26,30,32,27,24,24,28,0,27,27],
[29,28,29,25,31,23,25,24,0,23],
[26,29,30,26,25,21,27,24,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,22,22,24,18,30,17,21,29],
[26,0,22,20,23,20,24,21,23,25],
[29,29,0,24,30,25,30,27,15,26],
[29,31,27,0,35,25,31,30,32,29],
[27,28,21,16,0,26,22,17,19,25],
[33,31,26,26,25,0,26,26,27,34],
[21,27,21,20,29,25,0,20,23,26],
[34,30,24,21,34,25,31,0,35,30],
[30,28,36,19,32,24,28,16,0,24],
[22,26,25,22,26,17,25,21,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,24,22,27,26,27,30,27,25],
[23,0,16,19,20,22,21,27,28,20],
[27,35,0,25,25,28,30,25,33,26],
[29,32,26,0,25,28,26,33,31,30],
[24,31,26,26,0,28,34,29,32,26],
[25,29,23,23,23,0,26,26,28,26],
[24,30,21,25,17,25,0,28,28,26],
[21,24,26,18,22,25,23,0,25,24],
[24,23,18,20,19,23,23,26,0,20],
[26,31,25,21,25,25,25,27,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,25,28,25,20,26,29,26,23],
[34,0,33,32,26,32,25,20,21,26],
[26,18,0,23,25,26,27,24,25,29],
[23,19,28,0,17,18,23,19,23,31],
[26,25,26,34,0,21,30,32,32,25],
[31,19,25,33,30,0,27,24,26,26],
[25,26,24,28,21,24,0,25,15,33],
[22,31,27,32,19,27,26,0,26,27],
[25,30,26,28,19,25,36,25,0,32],
[28,25,22,20,26,25,18,24,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,14,17,18,23,17,17,17,18],
[34,0,21,26,30,35,32,28,30,34],
[37,30,0,24,30,30,27,23,31,28],
[34,25,27,0,23,28,29,21,28,33],
[33,21,21,28,0,30,27,20,31,33],
[28,16,21,23,21,0,22,21,15,27],
[34,19,24,22,24,29,0,25,23,30],
[34,23,28,30,31,30,26,0,31,29],
[34,21,20,23,20,36,28,20,0,31],
[33,17,23,18,18,24,21,22,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,18,18,42,34,25,27,25],
[26,0,24,25,34,41,33,32,34,32],
[26,27,0,27,35,35,27,26,25,26],
[33,26,24,0,44,51,34,34,26,42],
[33,17,16,7,0,42,24,24,16,42],
[9,10,16,0,9,0,0,24,9,27],
[17,18,24,17,27,51,0,24,26,42],
[26,19,25,17,27,27,27,0,9,27],
[24,17,26,25,35,42,25,42,0,42],
[26,19,25,9,9,24,9,24,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,34,30,34,23,24,33,28,27],
[20,0,24,25,27,22,24,26,29,28],
[17,27,0,21,26,27,26,24,27,27],
[21,26,30,0,31,26,23,31,28,29],
[17,24,25,20,0,22,16,23,24,29],
[28,29,24,25,29,0,28,26,28,31],
[27,27,25,28,35,23,0,25,28,26],
[18,25,27,20,28,25,26,0,25,28],
[23,22,24,23,27,23,23,26,0,30],
[24,23,24,22,22,20,25,23,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,36,25,27,32,27,31,28,35],
[13,0,19,17,28,22,21,27,20,23],
[15,32,0,22,30,24,26,28,24,23],
[26,34,29,0,31,32,33,31,23,33],
[24,23,21,20,0,25,34,28,18,21],
[19,29,27,19,26,0,28,32,25,25],
[24,30,25,18,17,23,0,29,22,23],
[20,24,23,20,23,19,22,0,18,23],
[23,31,27,28,33,26,29,33,0,30],
[16,28,28,18,30,26,28,28,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,20,22,24,24,22,26,26,26],
[29,0,23,22,24,25,24,23,31,31],
[31,28,0,20,30,24,24,27,28,26],
[29,29,31,0,27,25,26,25,27,33],
[27,27,21,24,0,23,22,23,31,28],
[27,26,27,26,28,0,23,30,28,32],
[29,27,27,25,29,28,0,29,28,33],
[25,28,24,26,28,21,22,0,27,29],
[25,20,23,24,20,23,23,24,0,26],
[25,20,25,18,23,19,18,22,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,24,25,21,22,20,30,16,24],
[29,0,25,26,19,27,19,29,16,20],
[27,26,0,30,25,26,22,30,25,27],
[26,25,21,0,23,27,13,25,18,23],
[30,32,26,28,0,29,23,34,29,28],
[29,24,25,24,22,0,18,30,20,22],
[31,32,29,38,28,33,0,31,25,28],
[21,22,21,26,17,21,20,0,26,19],
[35,35,26,33,22,31,26,25,0,30],
[27,31,24,28,23,29,23,32,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,21,19,17,27,19,27,28,33],
[30,0,27,25,22,23,34,27,31,36],
[30,24,0,16,12,20,20,27,26,30],
[32,26,35,0,28,21,32,26,35,30],
[34,29,39,23,0,30,28,27,29,38],
[24,28,31,30,21,0,28,22,34,38],
[32,17,31,19,23,23,0,25,30,25],
[24,24,24,25,24,29,26,0,33,33],
[23,20,25,16,22,17,21,18,0,24],
[18,15,21,21,13,13,26,18,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,25,39,40,30,29,34,30,31],
[31,0,27,29,27,30,28,24,31,32],
[26,24,0,31,28,27,29,27,36,26],
[12,22,20,0,29,20,19,21,26,26],
[11,24,23,22,0,25,21,23,28,23],
[21,21,24,31,26,0,27,25,32,23],
[22,23,22,32,30,24,0,26,23,29],
[17,27,24,30,28,26,25,0,26,26],
[21,20,15,25,23,19,28,25,0,20],
[20,19,25,25,28,28,22,25,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,26,23,26,25,26,24,23,27],
[31,0,30,30,27,29,32,24,26,28],
[25,21,0,24,25,22,27,21,22,24],
[28,21,27,0,27,29,22,22,22,28],
[25,24,26,24,0,24,26,26,27,24],
[26,22,29,22,27,0,25,25,20,25],
[25,19,24,29,25,26,0,20,19,27],
[27,27,30,29,25,26,31,0,25,32],
[28,25,29,29,24,31,32,26,0,31],
[24,23,27,23,27,26,24,19,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,18,22,18,16,20,22,21,23],
[28,0,25,24,22,20,26,23,28,27],
[33,26,0,25,27,21,23,21,26,25],
[29,27,26,0,24,27,23,27,32,21],
[33,29,24,27,0,24,21,27,25,21],
[35,31,30,24,27,0,28,29,31,24],
[31,25,28,28,30,23,0,27,30,29],
[29,28,30,24,24,22,24,0,26,22],
[30,23,25,19,26,20,21,25,0,26],
[28,24,26,30,30,27,22,29,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,29,29,20,24,21,18,35,21],
[21,0,26,29,23,25,20,21,32,23],
[22,25,0,25,23,13,18,14,28,18],
[22,22,26,0,25,20,16,16,34,19],
[31,28,28,26,0,27,20,21,36,21],
[27,26,38,31,24,0,19,27,39,27],
[30,31,33,35,31,32,0,27,37,23],
[33,30,37,35,30,24,24,0,40,22],
[16,19,23,17,15,12,14,11,0,14],
[30,28,33,32,30,24,28,29,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,19,25,28,15,29,22,24,28],
[39,0,25,24,33,26,28,29,23,29],
[32,26,0,36,43,21,31,25,28,31],
[26,27,15,0,37,28,24,22,18,25],
[23,18,8,14,0,11,21,14,15,23],
[36,25,30,23,40,0,29,28,29,30],
[22,23,20,27,30,22,0,21,21,30],
[29,22,26,29,37,23,30,0,18,26],
[27,28,23,33,36,22,30,33,0,29],
[23,22,20,26,28,21,21,25,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,38,14,14,26,38,12,12,26],
[27,0,27,27,27,27,27,27,27,14],
[13,24,0,13,0,39,39,25,0,12],
[37,24,38,0,0,39,51,25,12,12],
[37,24,51,51,0,51,51,25,12,12],
[25,24,12,12,0,0,12,0,0,0],
[13,24,12,0,0,39,0,12,0,12],
[39,24,26,26,26,51,39,0,12,26],
[39,24,51,39,39,51,51,39,0,26],
[25,37,39,39,39,51,39,25,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,20,32,30,31,30,24,23,17],
[18,0,22,20,28,33,32,32,29,11],
[31,29,0,28,37,39,34,36,23,20],
[19,31,23,0,30,33,32,30,26,26],
[21,23,14,21,0,25,39,28,20,21],
[20,18,12,18,26,0,26,23,9,16],
[21,19,17,19,12,25,0,25,16,14],
[27,19,15,21,23,28,26,0,27,18],
[28,22,28,25,31,42,35,24,0,20],
[34,40,31,25,30,35,37,33,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,27,28,27,25,26,27,25,30],
[25,0,26,30,26,19,28,21,27,22],
[24,25,0,30,26,24,29,24,23,25],
[23,21,21,0,21,25,22,20,23,23],
[24,25,25,30,0,25,25,26,26,24],
[26,32,27,26,26,0,27,28,24,25],
[25,23,22,29,26,24,0,27,26,23],
[24,30,27,31,25,23,24,0,31,26],
[26,24,28,28,25,27,25,20,0,22],
[21,29,26,28,27,26,28,25,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,19,20,23,21,19,13,18,17],
[32,0,28,30,26,26,28,25,29,22],
[32,23,0,27,24,24,29,22,27,22],
[31,21,24,0,24,26,32,24,32,19],
[28,25,27,27,0,24,29,30,29,22],
[30,25,27,25,27,0,28,27,30,21],
[32,23,22,19,22,23,0,19,26,20],
[38,26,29,27,21,24,32,0,32,28],
[33,22,24,19,22,21,25,19,0,22],
[34,29,29,32,29,30,31,23,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,22,17,21,22,22,17,27,27],
[30,0,32,31,36,41,37,22,37,27],
[29,19,0,26,25,35,37,26,26,27],
[34,20,25,0,25,31,20,32,25,26],
[30,15,26,26,0,41,32,26,27,31],
[29,10,16,20,10,0,26,11,21,21],
[29,14,14,31,19,25,0,21,24,25],
[34,29,25,19,25,40,30,0,25,20],
[24,14,25,26,24,30,27,26,0,36],
[24,24,24,25,20,30,26,31,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,24,26,26,27,31,25,22,30],
[18,0,23,16,16,22,23,22,23,19],
[27,28,0,22,20,28,31,22,26,21],
[25,35,29,0,26,27,29,26,25,28],
[25,35,31,25,0,30,32,24,25,29],
[24,29,23,24,21,0,30,21,26,22],
[20,28,20,22,19,21,0,18,17,24],
[26,29,29,25,27,30,33,0,25,26],
[29,28,25,26,26,25,34,26,0,24],
[21,32,30,23,22,29,27,25,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,29,17,18,26,21,19,24,19],
[31,0,32,21,24,22,22,25,29,26],
[22,19,0,23,18,16,17,27,23,22],
[34,30,28,0,33,29,21,34,32,24],
[33,27,33,18,0,28,19,26,19,20],
[25,29,35,22,23,0,19,23,19,23],
[30,29,34,30,32,32,0,29,24,26],
[32,26,24,17,25,28,22,0,26,21],
[27,22,28,19,32,32,27,25,0,29],
[32,25,29,27,31,28,25,30,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,18,24,16,20,20,32,16,20],
[34,0,18,32,22,27,21,26,28,21],
[33,33,0,37,30,34,31,38,23,35],
[27,19,14,0,21,20,21,27,18,24],
[35,29,21,30,0,29,32,38,27,22],
[31,24,17,31,22,0,27,24,23,27],
[31,30,20,30,19,24,0,34,24,26],
[19,25,13,24,13,27,17,0,20,26],
[35,23,28,33,24,28,27,31,0,24],
[31,30,16,27,29,24,25,25,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,25,21,27,17,32,28,32,30],
[17,0,25,25,22,23,19,26,31,17],
[26,26,0,20,25,25,25,26,30,20],
[30,26,31,0,25,25,28,32,35,27],
[24,29,26,26,0,25,27,36,31,17],
[34,28,26,26,26,0,25,36,31,25],
[19,32,26,23,24,26,0,29,27,20],
[23,25,25,19,15,15,22,0,25,21],
[19,20,21,16,20,20,24,26,0,17],
[21,34,31,24,34,26,31,30,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,30,37,27,39,32,25,33,30],
[16,0,23,20,21,20,26,17,15,21],
[21,28,0,23,30,22,31,23,25,23],
[14,31,28,0,26,20,28,20,30,29],
[24,30,21,25,0,27,31,30,25,22],
[12,31,29,31,24,0,29,21,29,28],
[19,25,20,23,20,22,0,23,27,22],
[26,34,28,31,21,30,28,0,32,27],
[18,36,26,21,26,22,24,19,0,29],
[21,30,28,22,29,23,29,24,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,18,12,13,15,16,21,22,18],
[33,0,26,21,20,26,23,29,31,21],
[33,25,0,19,21,21,19,20,29,21],
[39,30,32,0,23,28,25,34,33,25],
[38,31,30,28,0,28,30,23,36,37],
[36,25,30,23,23,0,23,19,37,36],
[35,28,32,26,21,28,0,30,33,32],
[30,22,31,17,28,32,21,0,34,30],
[29,20,22,18,15,14,18,17,0,20],
[33,30,30,26,14,15,19,21,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,26,23,26,27,24,27,26,27],
[24,0,23,21,24,26,22,22,23,27],
[25,28,0,21,25,28,25,25,22,28],
[28,30,30,0,23,31,23,34,29,29],
[25,27,26,28,0,28,28,28,25,25],
[24,25,23,20,23,0,20,28,23,27],
[27,29,26,28,23,31,0,32,29,28],
[24,29,26,17,23,23,19,0,22,25],
[25,28,29,22,26,28,22,29,0,29],
[24,24,23,22,26,24,23,26,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,28,26,30,31,26,27,31,23],
[25,0,28,25,30,30,26,20,30,25],
[23,23,0,26,31,26,27,26,27,27],
[25,26,25,0,23,28,24,21,25,20],
[21,21,20,28,0,25,21,26,24,23],
[20,21,25,23,26,0,24,20,28,25],
[25,25,24,27,30,27,0,24,30,26],
[24,31,25,30,25,31,27,0,32,24],
[20,21,24,26,27,23,21,19,0,22],
[28,26,24,31,28,26,25,27,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,16,37,36,31,29,29,35,29],
[28,0,34,27,34,21,18,20,26,12],
[35,17,0,27,37,25,29,13,19,17],
[14,24,24,0,24,24,16,12,18,22],
[15,17,14,27,0,11,23,21,21,23],
[20,30,26,27,40,0,24,26,32,20],
[22,33,22,35,28,27,0,22,21,27],
[22,31,38,39,30,25,29,0,19,29],
[16,25,32,33,30,19,30,32,0,24],
[22,39,34,29,28,31,24,22,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,31,18,22,11,29,22,14,26],
[29,0,33,28,12,34,40,27,29,22],
[20,18,0,21,18,21,28,23,21,23],
[33,23,30,0,29,35,41,26,22,22],
[29,39,33,22,0,34,34,25,23,22],
[40,17,30,16,17,0,34,27,17,26],
[22,11,23,10,17,17,0,18,16,9],
[29,24,28,25,26,24,33,0,21,24],
[37,22,30,29,28,34,35,30,0,24],
[25,29,28,29,29,25,42,27,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,31,24,27,26,26,24,27,32],
[24,0,29,30,29,28,26,23,26,27],
[20,22,0,24,28,22,22,23,24,24],
[27,21,27,0,31,26,26,22,27,27],
[24,22,23,20,0,24,25,26,23,22],
[25,23,29,25,27,0,23,24,27,26],
[25,25,29,25,26,28,0,27,27,27],
[27,28,28,29,25,27,24,0,27,27],
[24,25,27,24,28,24,24,24,0,26],
[19,24,27,24,29,25,24,24,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,22,23,29,34,28,23,25,32],
[22,0,15,19,29,28,16,25,19,29],
[29,36,0,24,30,42,25,31,30,34],
[28,32,27,0,24,40,23,28,34,44],
[22,22,21,27,0,32,18,26,25,31],
[17,23,9,11,19,0,10,20,12,22],
[23,35,26,28,33,41,0,26,30,38],
[28,26,20,23,25,31,25,0,27,31],
[26,32,21,17,26,39,21,24,0,25],
[19,22,17,7,20,29,13,20,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,27,25,24,27,22,19,24,19],
[23,0,23,22,24,30,26,29,24,29],
[24,28,0,23,18,27,22,27,26,27],
[26,29,28,0,25,26,30,19,26,29],
[27,27,33,26,0,33,30,22,25,30],
[24,21,24,25,18,0,16,22,25,28],
[29,25,29,21,21,35,0,23,22,29],
[32,22,24,32,29,29,28,0,27,33],
[27,27,25,25,26,26,29,24,0,35],
[32,22,24,22,21,23,22,18,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,24,32,35,30,20,41,30,26],
[18,0,18,29,23,18,18,26,11,18],
[27,33,0,37,34,19,21,24,28,21],
[19,22,14,0,14,18,15,25,12,21],
[16,28,17,37,0,22,26,29,18,24],
[21,33,32,33,29,0,22,41,20,31],
[31,33,30,36,25,29,0,36,26,33],
[10,25,27,26,22,10,15,0,12,16],
[21,40,23,39,33,31,25,39,0,25],
[25,33,30,30,27,20,18,35,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,35,40,26,26,25,24,28,30],
[12,0,23,34,20,19,22,20,16,23],
[16,28,0,24,23,29,26,28,17,16],
[11,17,27,0,20,20,24,21,21,18],
[25,31,28,31,0,31,29,28,28,32],
[25,32,22,31,20,0,20,22,16,19],
[26,29,25,27,22,31,0,32,28,25],
[27,31,23,30,23,29,19,0,19,19],
[23,35,34,30,23,35,23,32,0,28],
[21,28,35,33,19,32,26,32,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,24,25,24,27,32,21,22,26],
[20,0,22,22,20,25,22,23,24,24],
[27,29,0,28,22,28,27,25,22,25],
[26,29,23,0,21,26,29,22,30,24],
[27,31,29,30,0,27,33,23,26,27],
[24,26,23,25,24,0,30,25,24,22],
[19,29,24,22,18,21,0,19,23,25],
[30,28,26,29,28,26,32,0,25,26],
[29,27,29,21,25,27,28,26,0,25],
[25,27,26,27,24,29,26,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,32,27,39,29,29,32,34,24],
[21,0,24,21,25,25,20,20,25,27],
[19,27,0,30,34,20,15,22,15,19],
[24,30,21,0,27,20,24,23,21,15],
[12,26,17,24,0,15,9,14,14,10],
[22,26,31,31,36,0,21,25,33,28],
[22,31,36,27,42,30,0,28,32,30],
[19,31,29,28,37,26,23,0,29,23],
[17,26,36,30,37,18,19,22,0,30],
[27,24,32,36,41,23,21,28,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,23,23,22,22,25,28,23,19],
[29,0,25,28,25,28,30,33,30,27],
[28,26,0,23,22,24,20,28,24,30],
[28,23,28,0,26,20,23,24,32,31],
[29,26,29,25,0,21,22,29,22,24],
[29,23,27,31,30,0,25,28,29,27],
[26,21,31,28,29,26,0,29,25,29],
[23,18,23,27,22,23,22,0,25,28],
[28,21,27,19,29,22,26,26,0,23],
[32,24,21,20,27,24,22,23,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,26,24,27,28,24,30,24,22],
[29,0,28,25,30,25,28,24,27,28],
[25,23,0,28,22,23,25,28,23,22],
[27,26,23,0,24,24,25,26,25,24],
[24,21,29,27,0,24,27,27,27,27],
[23,26,28,27,27,0,23,31,31,23],
[27,23,26,26,24,28,0,27,33,26],
[21,27,23,25,24,20,24,0,26,21],
[27,24,28,26,24,20,18,25,0,23],
[29,23,29,27,24,28,25,30,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,33,29,37,29,30,31,32,24],
[16,0,25,13,27,16,17,23,28,21],
[18,26,0,19,21,24,26,27,28,28],
[22,38,32,0,33,28,37,30,37,33],
[14,24,30,18,0,30,21,25,28,21],
[22,35,27,23,21,0,28,28,28,32],
[21,34,25,14,30,23,0,33,29,21],
[20,28,24,21,26,23,18,0,26,23],
[19,23,23,14,23,23,22,25,0,30],
[27,30,23,18,30,19,30,28,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,22,19,25,21,19,24,25,21],
[27,0,25,24,24,26,27,27,24,26],
[29,26,0,14,21,27,22,26,20,18],
[32,27,37,0,31,33,30,30,28,25],
[26,27,30,20,0,31,25,26,23,24],
[30,25,24,18,20,0,20,26,19,20],
[32,24,29,21,26,31,0,28,22,21],
[27,24,25,21,25,25,23,0,21,20],
[26,27,31,23,28,32,29,30,0,28],
[30,25,33,26,27,31,30,31,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,18,26,22,14,27,16,34,17],
[27,0,25,22,14,18,19,16,29,22],
[33,26,0,27,31,21,26,20,32,31],
[25,29,24,0,35,29,25,30,35,26],
[29,37,20,16,0,22,23,20,28,27],
[37,33,30,22,29,0,28,23,31,26],
[24,32,25,26,28,23,0,29,39,28],
[35,35,31,21,31,28,22,0,38,32],
[17,22,19,16,23,20,12,13,0,27],
[34,29,20,25,24,25,23,19,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,25,30,22,18,31,21,24,25],
[31,0,25,31,23,27,32,34,25,37],
[26,26,0,32,26,24,30,29,19,33],
[21,20,19,0,25,21,25,27,20,18],
[29,28,25,26,0,18,29,28,33,29],
[33,24,27,30,33,0,29,33,23,36],
[20,19,21,26,22,22,0,24,21,23],
[30,17,22,24,23,18,27,0,21,33],
[27,26,32,31,18,28,30,30,0,31],
[26,14,18,33,22,15,28,18,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,25,27,24,23,19,29,27],
[23,0,26,29,27,29,21,22,25,29],
[25,25,0,26,21,25,20,21,27,22],
[26,22,25,0,31,20,22,25,21,28],
[24,24,30,20,0,31,19,22,24,24],
[27,22,26,31,20,0,21,26,30,27],
[28,30,31,29,32,30,0,25,27,30],
[32,29,30,26,29,25,26,0,31,28],
[22,26,24,30,27,21,24,20,0,25],
[24,22,29,23,27,24,21,23,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,32,27,21,25,27,25,23,19],
[21,0,37,23,22,21,27,21,24,24],
[19,14,0,18,18,19,19,20,20,17],
[24,28,33,0,19,24,28,26,27,20],
[30,29,33,32,0,30,30,28,21,26],
[26,30,32,27,21,0,25,19,21,27],
[24,24,32,23,21,26,0,19,28,25],
[26,30,31,25,23,32,32,0,29,29],
[28,27,31,24,30,30,23,22,0,31],
[32,27,34,31,25,24,26,22,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,27,25,27,28,25,27,30,25],
[28,0,22,24,26,27,27,27,25,24],
[24,29,0,27,24,30,24,27,24,24],
[26,27,24,0,22,27,27,26,26,25],
[24,25,27,29,0,26,27,23,24,22],
[23,24,21,24,25,0,26,24,23,25],
[26,24,27,24,24,25,0,26,25,23],
[24,24,24,25,28,27,25,0,26,26],
[21,26,27,25,27,28,26,25,0,29],
[26,27,27,26,29,26,28,25,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,29,29,44,16,30,29,16,22],
[22,0,29,30,31,16,30,29,31,23],
[22,22,0,30,38,23,37,30,23,23],
[22,21,21,0,36,8,22,44,16,14],
[7,20,13,15,0,7,22,21,8,22],
[35,35,28,43,44,0,22,36,29,29],
[21,21,14,29,29,29,0,22,14,14],
[22,22,21,7,30,15,29,0,23,15],
[35,20,28,35,43,22,37,28,0,21],
[29,28,28,37,29,22,37,36,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,32,32,29,33,32,23,23,30],
[21,0,19,22,21,21,26,16,20,16],
[19,32,0,25,26,29,24,16,18,20],
[19,29,26,0,28,27,34,24,17,28],
[22,30,25,23,0,29,28,25,21,20],
[18,30,22,24,22,0,25,23,19,16],
[19,25,27,17,23,26,0,18,19,20],
[28,35,35,27,26,28,33,0,21,26],
[28,31,33,34,30,32,32,30,0,24],
[21,35,31,23,31,35,31,25,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,17,22,21,28,30,16,18,29],
[42,0,27,24,18,34,30,18,28,35],
[34,24,0,33,22,26,24,28,28,31],
[29,27,18,0,20,20,26,25,25,34],
[30,33,29,31,0,25,19,26,28,36],
[23,17,25,31,26,0,28,23,21,31],
[21,21,27,25,32,23,0,28,27,31],
[35,33,23,26,25,28,23,0,27,39],
[33,23,23,26,23,30,24,24,0,40],
[22,16,20,17,15,20,20,12,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,15,38,30,30,22,30,24,23],
[20,0,14,22,20,22,14,14,7,22],
[36,37,0,45,21,30,21,36,24,45],
[13,29,6,0,6,28,14,13,14,28],
[21,31,30,45,0,30,21,15,24,30],
[21,29,21,23,21,0,29,29,23,23],
[29,37,30,37,30,22,0,37,30,37],
[21,37,15,38,36,22,14,0,24,23],
[27,44,27,37,27,28,21,27,0,29],
[28,29,6,23,21,28,14,28,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,29,29,28,23,27,30,27,26],
[23,0,33,32,31,27,25,31,27,30],
[22,18,0,26,24,19,27,28,30,23],
[22,19,25,0,30,26,26,26,28,24],
[23,20,27,21,0,26,21,25,31,25],
[28,24,32,25,25,0,26,29,32,25],
[24,26,24,25,30,25,0,27,31,27],
[21,20,23,25,26,22,24,0,24,21],
[24,24,21,23,20,19,20,27,0,19],
[25,21,28,27,26,26,24,30,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,31,23,28,34,22,24,22,27],
[23,0,30,25,22,27,24,24,18,29],
[20,21,0,25,32,33,26,23,23,30],
[28,26,26,0,28,34,21,27,27,33],
[23,29,19,23,0,23,20,17,22,29],
[17,24,18,17,28,0,18,20,20,25],
[29,27,25,30,31,33,0,26,28,29],
[27,27,28,24,34,31,25,0,30,32],
[29,33,28,24,29,31,23,21,0,31],
[24,22,21,18,22,26,22,19,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,35,33,31,33,35,16,33,32],
[22,0,27,25,30,39,40,30,23,25],
[16,24,0,27,20,24,25,17,20,21],
[18,26,24,0,29,33,32,18,21,35],
[20,21,31,22,0,30,27,20,24,24],
[18,12,27,18,21,0,20,4,20,22],
[16,11,26,19,24,31,0,16,14,24],
[35,21,34,33,31,47,35,0,25,31],
[18,28,31,30,27,31,37,26,0,33],
[19,26,30,16,27,29,27,20,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,30,25,23,26,32,26,22,29],
[27,0,32,26,20,31,31,26,27,36],
[21,19,0,25,20,29,26,19,19,24],
[26,25,26,0,22,26,38,25,26,30],
[28,31,31,29,0,29,36,25,31,32],
[25,20,22,25,22,0,21,23,20,26],
[19,20,25,13,15,30,0,19,20,24],
[25,25,32,26,26,28,32,0,24,33],
[29,24,32,25,20,31,31,27,0,24],
[22,15,27,21,19,25,27,18,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,20,27,17,21,24,20,18,28],
[31,0,21,27,19,32,33,31,25,28],
[31,30,0,30,23,25,35,31,26,32],
[24,24,21,0,22,20,33,24,20,29],
[34,32,28,29,0,26,32,27,24,32],
[30,19,26,31,25,0,34,24,21,28],
[27,18,16,18,19,17,0,23,20,29],
[31,20,20,27,24,27,28,0,26,31],
[33,26,25,31,27,30,31,25,0,30],
[23,23,19,22,19,23,22,20,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,34,27,22,19,29,38,31,38],
[33,0,30,32,21,26,32,37,21,33],
[17,21,0,15,15,18,28,33,26,29],
[24,19,36,0,20,24,39,39,36,40],
[29,30,36,31,0,16,37,28,39,27],
[32,25,33,27,35,0,32,37,32,31],
[22,19,23,12,14,19,0,29,31,24],
[13,14,18,12,23,14,22,0,27,26],
[20,30,25,15,12,19,20,24,0,32],
[13,18,22,11,24,20,27,25,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,0,42,0,12,12,12,12,12],
[29,0,10,20,10,20,31,22,32,31],
[51,41,0,51,31,51,21,31,41,41],
[9,31,0,0,9,0,21,21,21,21],
[51,41,20,42,0,42,31,51,41,41],
[39,31,0,51,9,0,21,31,41,41],
[39,20,30,30,20,30,0,20,42,29],
[39,29,20,30,0,20,31,0,41,19],
[39,19,10,30,10,10,9,10,0,29],
[39,20,10,30,10,10,22,32,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,21,31,30,24,20,24,23,18],
[27,0,24,32,30,28,26,27,25,31],
[30,27,0,30,29,27,25,23,25,28],
[20,19,21,0,28,27,14,19,21,20],
[21,21,22,23,0,23,22,24,22,22],
[27,23,24,24,28,0,24,28,28,18],
[31,25,26,37,29,27,0,32,28,27],
[27,24,28,32,27,23,19,0,27,26],
[28,26,26,30,29,23,23,24,0,19],
[33,20,23,31,29,33,24,25,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,28,25,24,26,28,26,28,30],
[23,0,27,28,26,25,27,26,30,25],
[23,24,0,26,23,25,26,24,28,23],
[26,23,25,0,26,20,21,19,23,22],
[27,25,28,25,0,23,26,24,24,29],
[25,26,26,31,28,0,28,24,31,30],
[23,24,25,30,25,23,0,26,27,29],
[25,25,27,32,27,27,25,0,31,28],
[23,21,23,28,27,20,24,20,0,27],
[21,26,28,29,22,21,22,23,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,24,33,20,22,24,22,19,36],
[31,0,32,30,21,24,22,26,27,33],
[27,19,0,27,30,25,27,30,24,29],
[18,21,24,0,17,13,23,24,17,25],
[31,30,21,34,0,25,27,32,21,36],
[29,27,26,38,26,0,22,27,20,35],
[27,29,24,28,24,29,0,34,27,37],
[29,25,21,27,19,24,17,0,24,37],
[32,24,27,34,30,31,24,27,0,38],
[15,18,22,26,15,16,14,14,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,19,23,30,25,31,27,23,28],
[31,0,30,28,24,30,31,27,25,33],
[32,21,0,27,33,33,32,29,21,33],
[28,23,24,0,32,27,29,34,27,32],
[21,27,18,19,0,28,34,26,24,31],
[26,21,18,24,23,0,28,22,26,24],
[20,20,19,22,17,23,0,21,27,25],
[24,24,22,17,25,29,30,0,22,27],
[28,26,30,24,27,25,24,29,0,36],
[23,18,18,19,20,27,26,24,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,25,25,25,17,18,20,28,28],
[29,0,26,21,23,21,24,19,31,23],
[26,25,0,18,18,12,17,17,28,17],
[26,30,33,0,32,28,25,30,38,30],
[26,28,33,19,0,24,27,23,38,30],
[34,30,39,23,27,0,30,28,39,30],
[33,27,34,26,24,21,0,24,35,26],
[31,32,34,21,28,23,27,0,34,32],
[23,20,23,13,13,12,16,17,0,26],
[23,28,34,21,21,21,25,19,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,28,29,24,29,21,25,29,20],
[30,0,26,26,21,31,24,26,25,26],
[23,25,0,20,19,26,19,25,24,28],
[22,25,31,0,14,24,25,23,26,23],
[27,30,32,37,0,37,25,31,25,30],
[22,20,25,27,14,0,25,25,23,24],
[30,27,32,26,26,26,0,22,22,29],
[26,25,26,28,20,26,29,0,26,28],
[22,26,27,25,26,28,29,25,0,24],
[31,25,23,28,21,27,22,23,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,24,35,31,25,25,26,31,34],
[31,0,25,37,33,27,36,31,28,31],
[27,26,0,34,28,17,30,23,27,26],
[16,14,17,0,18,16,21,19,19,20],
[20,18,23,33,0,19,24,25,20,27],
[26,24,34,35,32,0,27,28,26,26],
[26,15,21,30,27,24,0,23,22,28],
[25,20,28,32,26,23,28,0,31,28],
[20,23,24,32,31,25,29,20,0,31],
[17,20,25,31,24,25,23,23,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,15,11,12,18,21,22,18,15],
[33,0,21,21,22,20,28,21,30,25],
[36,30,0,34,30,28,37,28,28,22],
[40,30,17,0,25,28,25,23,30,24],
[39,29,21,26,0,29,28,27,26,26],
[33,31,23,23,22,0,27,28,28,29],
[30,23,14,26,23,24,0,21,20,19],
[29,30,23,28,24,23,30,0,21,26],
[33,21,23,21,25,23,31,30,0,22],
[36,26,29,27,25,22,32,25,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,20,16,19,27,20,14,12,10],
[25,0,20,15,21,27,25,21,21,20],
[31,31,0,19,26,30,32,27,23,28],
[35,36,32,0,29,31,35,30,32,25],
[32,30,25,22,0,34,32,25,21,23],
[24,24,21,20,17,0,21,21,21,20],
[31,26,19,16,19,30,0,22,21,25],
[37,30,24,21,26,30,29,0,26,30],
[39,30,28,19,30,30,30,25,0,25],
[41,31,23,26,28,31,26,21,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,30,13,21,26,33,16,35,14],
[31,0,23,31,25,51,45,25,44,16],
[21,28,0,28,29,35,42,22,44,28],
[38,20,23,0,20,20,36,29,36,20],
[30,26,22,31,0,44,42,24,28,35],
[25,0,16,31,7,0,23,25,22,0],
[18,6,9,15,9,28,0,18,28,0],
[35,26,29,22,27,26,33,0,28,26],
[16,7,7,15,23,29,23,23,0,7],
[37,35,23,31,16,51,51,25,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,25,30,29,30,25,24,26,25],
[23,0,26,24,26,21,24,23,29,23],
[26,25,0,29,29,25,31,28,28,26],
[21,27,22,0,18,21,24,21,25,22],
[22,25,22,33,0,23,27,21,27,22],
[21,30,26,30,28,0,25,26,27,22],
[26,27,20,27,24,26,0,25,30,21],
[27,28,23,30,30,25,26,0,30,29],
[25,22,23,26,24,24,21,21,0,20],
[26,28,25,29,29,29,30,22,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,17,35,18,21,32,31,18,25],
[27,0,30,33,31,32,29,38,21,25],
[34,21,0,33,26,30,27,32,30,30],
[16,18,18,0,19,17,28,24,15,21],
[33,20,25,32,0,24,25,30,19,31],
[30,19,21,34,27,0,32,27,20,29],
[19,22,24,23,26,19,0,28,15,25],
[20,13,19,27,21,24,23,0,10,24],
[33,30,21,36,32,31,36,41,0,36],
[26,26,21,30,20,22,26,27,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,29,24,29,25,21,25,24,24],
[31,0,25,26,30,21,17,22,27,22],
[22,26,0,28,27,18,20,29,26,20],
[27,25,23,0,27,20,22,24,19,21],
[22,21,24,24,0,28,21,24,23,20],
[26,30,33,31,23,0,26,26,33,27],
[30,34,31,29,30,25,0,37,27,27],
[26,29,22,27,27,25,14,0,25,25],
[27,24,25,32,28,18,24,26,0,23],
[27,29,31,30,31,24,24,26,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,25,27,29,24,25,29,24,32],
[19,0,25,23,23,27,27,34,29,28],
[26,26,0,25,22,22,24,34,28,29],
[24,28,26,0,24,21,31,29,30,25],
[22,28,29,27,0,26,29,32,31,27],
[27,24,29,30,25,0,31,38,33,31],
[26,24,27,20,22,20,0,33,33,27],
[22,17,17,22,19,13,18,0,15,20],
[27,22,23,21,20,18,18,36,0,21],
[19,23,22,26,24,20,24,31,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,32,32,31,24,31,19,22,22],
[30,0,31,34,31,30,31,24,21,28],
[19,20,0,19,19,20,16,12,18,18],
[19,17,32,0,24,17,21,25,21,19],
[20,20,32,27,0,27,28,24,21,23],
[27,21,31,34,24,0,30,19,20,28],
[20,20,35,30,23,21,0,25,16,20],
[32,27,39,26,27,32,26,0,24,21],
[29,30,33,30,30,31,35,27,0,24],
[29,23,33,32,28,23,31,30,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,20,21,29,19,21,24,23,26],
[24,0,20,15,22,19,20,27,17,26],
[31,31,0,28,30,24,27,31,23,34],
[30,36,23,0,32,29,29,30,25,34],
[22,29,21,19,0,19,15,18,21,19],
[32,32,27,22,32,0,25,30,27,30],
[30,31,24,22,36,26,0,28,27,25],
[27,24,20,21,33,21,23,0,22,27],
[28,34,28,26,30,24,24,29,0,29],
[25,25,17,17,32,21,26,24,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,15,20,27,27,22,16,22,25],
[31,0,18,25,27,30,23,21,27,30],
[36,33,0,24,29,34,33,30,38,38],
[31,26,27,0,31,30,28,25,28,33],
[24,24,22,20,0,32,27,23,23,22],
[24,21,17,21,19,0,22,19,19,21],
[29,28,18,23,24,29,0,23,24,31],
[35,30,21,26,28,32,28,0,22,29],
[29,24,13,23,28,32,27,29,0,23],
[26,21,13,18,29,30,20,22,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,24,25,26,24,25,23,26,24],
[29,0,24,25,28,22,30,28,22,23],
[27,27,0,26,22,25,27,27,27,24],
[26,26,25,0,23,29,22,26,27,21],
[25,23,29,28,0,21,26,29,24,19],
[27,29,26,22,30,0,28,31,29,28],
[26,21,24,29,25,23,0,30,26,21],
[28,23,24,25,22,20,21,0,19,23],
[25,29,24,24,27,22,25,32,0,20],
[27,28,27,30,32,23,30,28,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,24,27,23,22,30,31,28,25],
[22,0,25,29,27,21,29,25,29,23],
[27,26,0,26,28,26,32,30,28,25],
[24,22,25,0,21,27,32,26,22,29],
[28,24,23,30,0,23,28,31,31,25],
[29,30,25,24,28,0,34,29,30,30],
[21,22,19,19,23,17,0,22,25,27],
[20,26,21,25,20,22,29,0,26,22],
[23,22,23,29,20,21,26,25,0,21],
[26,28,26,22,26,21,24,29,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,23,19,24,20,20,24,20,22],
[25,0,21,19,22,23,19,23,21,21],
[28,30,0,22,29,27,24,30,27,25],
[32,32,29,0,26,27,27,31,24,28],
[27,29,22,25,0,32,26,28,25,27],
[31,28,24,24,19,0,24,25,18,27],
[31,32,27,24,25,27,0,29,25,27],
[27,28,21,20,23,26,22,0,19,22],
[31,30,24,27,26,33,26,32,0,27],
[29,30,26,23,24,24,24,29,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,26,23,22,28,23,30,28,23],
[20,0,26,21,18,27,20,27,30,19],
[25,25,0,21,17,29,25,32,26,19],
[28,30,30,0,29,25,32,30,30,24],
[29,33,34,22,0,31,33,36,38,26],
[23,24,22,26,20,0,29,31,30,16],
[28,31,26,19,18,22,0,30,29,23],
[21,24,19,21,15,20,21,0,18,15],
[23,21,25,21,13,21,22,33,0,10],
[28,32,32,27,25,35,28,36,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,24,33,30,26,25,31,28,29],
[25,0,27,41,29,35,18,29,30,26],
[27,24,0,39,25,28,22,19,30,23],
[18,10,12,0,16,22,10,14,17,10],
[21,22,26,35,0,27,22,29,20,27],
[25,16,23,29,24,0,26,21,26,22],
[26,33,29,41,29,25,0,27,35,25],
[20,22,32,37,22,30,24,0,30,25],
[23,21,21,34,31,25,16,21,0,31],
[22,25,28,41,24,29,26,26,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,23,26,27,21,25,19,21,30],
[26,0,27,21,39,31,24,35,29,31],
[28,24,0,28,35,30,26,29,29,27],
[25,30,23,0,42,34,29,28,30,33],
[24,12,16,9,0,22,22,21,17,14],
[30,20,21,17,29,0,30,23,19,21],
[26,27,25,22,29,21,0,26,20,22],
[32,16,22,23,30,28,25,0,27,23],
[30,22,22,21,34,32,31,24,0,29],
[21,20,24,18,37,30,29,28,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,35,14,18,24,32,23,9,19],
[29,0,38,29,22,28,33,30,28,31],
[16,13,0,8,18,20,14,8,8,12],
[37,22,43,0,23,29,29,20,18,27],
[33,29,33,28,0,30,25,27,30,29],
[27,23,31,22,21,0,24,26,23,25],
[19,18,37,22,26,27,0,22,16,28],
[28,21,43,31,24,25,29,0,21,28],
[42,23,43,33,21,28,35,30,0,35],
[32,20,39,24,22,26,23,23,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,25,24,23,31,21,24,27,29],
[28,0,32,26,28,33,28,33,24,33],
[26,19,0,21,19,24,14,26,17,23],
[27,25,30,0,23,32,19,28,25,27],
[28,23,32,28,0,36,25,33,26,37],
[20,18,27,19,15,0,17,18,19,25],
[30,23,37,32,26,34,0,30,34,33],
[27,18,25,23,18,33,21,0,23,35],
[24,27,34,26,25,32,17,28,0,30],
[22,18,28,24,14,26,18,16,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,21,19,20,20,28,18,18,21],
[34,0,22,34,38,29,25,33,21,29],
[30,29,0,34,34,28,30,35,25,40],
[32,17,17,0,33,26,19,24,27,34],
[31,13,17,18,0,26,13,11,10,20],
[31,22,23,25,25,0,28,24,19,27],
[23,26,21,32,38,23,0,22,18,24],
[33,18,16,27,40,27,29,0,23,35],
[33,30,26,24,41,32,33,28,0,27],
[30,22,11,17,31,24,27,16,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,33,31,34,26,21,31,29,36],
[24,0,27,27,40,22,24,28,31,36],
[18,24,0,20,21,23,22,24,26,26],
[20,24,31,0,32,23,29,26,23,24],
[17,11,30,19,0,18,18,21,30,26],
[25,29,28,28,33,0,28,35,35,32],
[30,27,29,22,33,23,0,24,25,28],
[20,23,27,25,30,16,27,0,24,29],
[22,20,25,28,21,16,26,27,0,27],
[15,15,25,27,25,19,23,22,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,23,30,26,22,18,22,30,25],
[26,0,19,27,20,22,21,26,29,28],
[28,32,0,32,28,26,26,30,29,22],
[21,24,19,0,22,18,15,17,21,16],
[25,31,23,29,0,23,26,27,30,18],
[29,29,25,33,28,0,26,21,31,26],
[33,30,25,36,25,25,0,27,33,25],
[29,25,21,34,24,30,24,0,32,26],
[21,22,22,30,21,20,18,19,0,22],
[26,23,29,35,33,25,26,25,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,24,25,22,25,21,32,27,27],
[25,0,28,32,28,35,23,30,30,30],
[27,23,0,30,24,28,26,33,31,31],
[26,19,21,0,23,21,29,24,26,23],
[29,23,27,28,0,25,23,31,24,25],
[26,16,23,30,26,0,20,25,22,28],
[30,28,25,22,28,31,0,26,26,29],
[19,21,18,27,20,26,25,0,23,26],
[24,21,20,25,27,29,25,28,0,24],
[24,21,20,28,26,23,22,25,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,37,30,39,19,31,24,18,33],
[32,0,32,32,27,32,31,33,25,26],
[14,19,0,12,27,19,25,13,12,27],
[21,19,39,0,39,26,25,25,19,27],
[12,24,24,12,0,12,11,11,12,19],
[32,19,32,25,39,0,31,32,19,20],
[20,20,26,26,40,20,0,13,19,33],
[27,18,38,26,40,19,38,0,26,39],
[33,26,39,32,39,32,32,25,0,39],
[18,25,24,24,32,31,18,12,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,20,32,29,35,17,20,14,13],
[33,0,22,28,23,33,26,35,36,19],
[31,29,0,31,25,38,32,28,31,31],
[19,23,20,0,23,24,26,20,25,23],
[22,28,26,28,0,32,28,24,26,25],
[16,18,13,27,19,0,15,21,18,15],
[34,25,19,25,23,36,0,25,27,27],
[31,16,23,31,27,30,26,0,23,19],
[37,15,20,26,25,33,24,28,0,17],
[38,32,20,28,26,36,24,32,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,20,30,25,29,27,27,26],
[27,0,21,27,29,22,29,28,31,28],
[27,30,0,27,27,26,27,26,33,24],
[31,24,24,0,31,23,30,28,30,28],
[21,22,24,20,0,22,31,20,30,19],
[26,29,25,28,29,0,28,26,30,25],
[22,22,24,21,20,23,0,21,21,21],
[24,23,25,23,31,25,30,0,33,30],
[24,20,18,21,21,21,30,18,0,23],
[25,23,27,23,32,26,30,21,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,33,26,24,34,31,30,29,23],
[25,0,31,33,27,32,30,30,25,29],
[18,20,0,32,26,29,28,26,28,24],
[25,18,19,0,25,26,24,24,15,18],
[27,24,25,26,0,25,22,25,26,23],
[17,19,22,25,26,0,31,23,21,23],
[20,21,23,27,29,20,0,28,19,22],
[21,21,25,27,26,28,23,0,20,27],
[22,26,23,36,25,30,32,31,0,29],
[28,22,27,33,28,28,29,24,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,32,21,51,30,20,21,30,19],
[31,0,42,42,42,32,11,32,41,30],
[19,9,0,19,30,19,9,10,19,19],
[30,9,32,0,41,30,20,32,30,30],
[0,9,21,10,0,10,0,10,19,19],
[21,19,32,21,41,0,30,31,19,30],
[31,40,42,31,51,21,0,31,30,40],
[30,19,41,19,41,20,20,0,30,30],
[21,10,32,21,32,32,21,21,0,21],
[32,21,32,21,32,21,11,21,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,29,29,23,21,25,20,20,26],
[24,0,38,33,26,30,23,30,25,27],
[22,13,0,30,27,22,19,21,16,21],
[22,18,21,0,21,24,31,28,16,23],
[28,25,24,30,0,26,26,25,24,25],
[30,21,29,27,25,0,26,31,21,24],
[26,28,32,20,25,25,0,28,27,18],
[31,21,30,23,26,20,23,0,25,26],
[31,26,35,35,27,30,24,26,0,28],
[25,24,30,28,26,27,33,25,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,33,22,31,24,35,38,30,38],
[9,0,23,22,20,18,20,26,16,32],
[18,28,0,22,19,18,24,24,18,30],
[29,29,29,0,28,25,30,30,30,31],
[20,31,32,23,0,22,26,34,22,34],
[27,33,33,26,29,0,27,30,22,40],
[16,31,27,21,25,24,0,20,25,37],
[13,25,27,21,17,21,31,0,18,32],
[21,35,33,21,29,29,26,33,0,32],
[13,19,21,20,17,11,14,19,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,31,28,26,26,30,29,25,32],
[23,0,27,26,23,25,23,29,29,28],
[20,24,0,23,22,25,20,22,18,24],
[23,25,28,0,19,23,22,24,22,26],
[25,28,29,32,0,22,25,28,25,33],
[25,26,26,28,29,0,30,26,24,33],
[21,28,31,29,26,21,0,26,24,29],
[22,22,29,27,23,25,25,0,20,23],
[26,22,33,29,26,27,27,31,0,29],
[19,23,27,25,18,18,22,28,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,31,26,29,28,35,31,32,25],
[20,0,26,18,21,25,28,25,22,27],
[20,25,0,19,26,31,25,22,25,26],
[25,33,32,0,26,33,25,22,25,25],
[22,30,25,25,0,31,32,35,34,31],
[23,26,20,18,20,0,30,19,22,24],
[16,23,26,26,19,21,0,22,24,25],
[20,26,29,29,16,32,29,0,26,26],
[19,29,26,26,17,29,27,25,0,21],
[26,24,25,26,20,27,26,25,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,26,29,34,23,24,21,28,28],
[27,0,26,29,33,23,31,28,25,28],
[25,25,0,29,25,28,22,23,28,27],
[22,22,22,0,34,19,21,24,20,23],
[17,18,26,17,0,23,26,14,22,24],
[28,28,23,32,28,0,21,25,25,25],
[27,20,29,30,25,30,0,25,24,31],
[30,23,28,27,37,26,26,0,31,32],
[23,26,23,31,29,26,27,20,0,21],
[23,23,24,28,27,26,20,19,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,18,22,27,27,21,27,27,27],
[27,0,19,21,28,23,17,22,21,21],
[33,32,0,29,34,26,28,29,25,29],
[29,30,22,0,30,27,25,31,25,29],
[24,23,17,21,0,26,19,23,19,23],
[24,28,25,24,25,0,21,26,23,28],
[30,34,23,26,32,30,0,31,26,32],
[24,29,22,20,28,25,20,0,28,27],
[24,30,26,26,32,28,25,23,0,30],
[24,30,22,22,28,23,19,24,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,25,28,24,22,28,29,21,21],
[24,0,18,21,22,19,38,26,28,24],
[26,33,0,28,19,27,40,32,31,29],
[23,30,23,0,30,27,31,36,32,35],
[27,29,32,21,0,23,30,28,23,23],
[29,32,24,24,28,0,36,30,34,33],
[23,13,11,20,21,15,0,14,21,29],
[22,25,19,15,23,21,37,0,27,31],
[30,23,20,19,28,17,30,24,0,25],
[30,27,22,16,28,18,22,20,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,31,31,23,31,29,26,36,32],
[24,0,32,28,24,25,20,16,28,26],
[20,19,0,25,22,23,16,23,28,21],
[20,23,26,0,26,20,25,25,32,26],
[28,27,29,25,0,24,23,24,27,29],
[20,26,28,31,27,0,22,22,23,21],
[22,31,35,26,28,29,0,24,38,35],
[25,35,28,26,27,29,27,0,31,30],
[15,23,23,19,24,28,13,20,0,26],
[19,25,30,25,22,30,16,21,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,38,31,38,32,33,25,44,35],
[23,0,22,23,28,24,24,25,35,20],
[13,29,0,26,20,21,25,20,32,27],
[20,28,25,0,27,28,20,27,35,25],
[13,23,31,24,0,20,22,17,32,21],
[19,27,30,23,31,0,25,23,25,27],
[18,27,26,31,29,26,0,26,34,16],
[26,26,31,24,34,28,25,0,37,31],
[7,16,19,16,19,26,17,14,0,17],
[16,31,24,26,30,24,35,20,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,36,28,29,27,25,26,29,25],
[12,0,29,21,19,26,21,27,16,16],
[15,22,0,28,24,17,16,20,14,21],
[23,30,23,0,25,23,13,27,17,19],
[22,32,27,26,0,24,19,25,24,25],
[24,25,34,28,27,0,26,27,22,30],
[26,30,35,38,32,25,0,33,30,30],
[25,24,31,24,26,24,18,0,23,20],
[22,35,37,34,27,29,21,28,0,23],
[26,35,30,32,26,21,21,31,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,14,17,29,31,24,22,16,18],
[24,0,21,18,18,22,16,20,10,22],
[37,30,0,23,29,27,27,23,16,31],
[34,33,28,0,24,30,22,31,19,20],
[22,33,22,27,0,27,22,31,22,27],
[20,29,24,21,24,0,27,20,21,27],
[27,35,24,29,29,24,0,34,26,26],
[29,31,28,20,20,31,17,0,13,33],
[35,41,35,32,29,30,25,38,0,34],
[33,29,20,31,24,24,25,18,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,30,39,28,32,30,25,24,26],
[20,0,33,33,32,30,31,28,25,27],
[21,18,0,27,26,20,29,16,25,21],
[12,18,24,0,22,19,19,11,20,19],
[23,19,25,29,0,28,25,20,30,17],
[19,21,31,32,23,0,27,20,25,24],
[21,20,22,32,26,24,0,20,20,19],
[26,23,35,40,31,31,31,0,29,35],
[27,26,26,31,21,26,31,22,0,23],
[25,24,30,32,34,27,32,16,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,15,22,30,23,20,29,21,28],
[28,0,25,31,28,28,24,32,25,31],
[36,26,0,27,27,27,22,28,24,31],
[29,20,24,0,28,22,25,24,24,26],
[21,23,24,23,0,20,27,25,26,30],
[28,23,24,29,31,0,22,27,28,34],
[31,27,29,26,24,29,0,28,28,31],
[22,19,23,27,26,24,23,0,28,34],
[30,26,27,27,25,23,23,23,0,28],
[23,20,20,25,21,17,20,17,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,29,37,25,30,33,32,30,26],
[14,0,32,32,20,30,27,24,20,23],
[22,19,0,38,23,29,31,23,11,22],
[14,19,13,0,14,20,25,27,14,25],
[26,31,28,37,0,32,25,33,29,21],
[21,21,22,31,19,0,28,30,24,25],
[18,24,20,26,26,23,0,25,18,16],
[19,27,28,24,18,21,26,0,15,21],
[21,31,40,37,22,27,33,36,0,18],
[25,28,29,26,30,26,35,30,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,21,21,21,23,24,24,21,25],
[23,0,19,21,19,22,12,22,10,21],
[30,32,0,28,27,29,30,24,27,33],
[30,30,23,0,30,23,30,28,25,29],
[30,32,24,21,0,30,22,24,24,30],
[28,29,22,28,21,0,26,23,21,31],
[27,39,21,21,29,25,0,24,30,32],
[27,29,27,23,27,28,27,0,24,35],
[30,41,24,26,27,30,21,27,0,34],
[26,30,18,22,21,20,19,16,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,22,25,30,31,29,27,27,28],
[23,0,26,29,24,29,28,27,27,21],
[29,25,0,28,28,32,33,31,27,25],
[26,22,23,0,21,30,27,25,24,27],
[21,27,23,30,0,31,29,26,23,25],
[20,22,19,21,20,0,23,18,22,20],
[22,23,18,24,22,28,0,20,24,22],
[24,24,20,26,25,33,31,0,27,24],
[24,24,24,27,28,29,27,24,0,24],
[23,30,26,24,26,31,29,27,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,25,25,30,26,29,27,24],
[24,0,25,22,26,24,24,26,24,22],
[23,26,0,21,28,21,29,26,31,24],
[26,29,30,0,25,27,29,29,27,24],
[26,25,23,26,0,26,25,27,26,26],
[21,27,30,24,25,0,32,27,27,21],
[25,27,22,22,26,19,0,25,25,24],
[22,25,25,22,24,24,26,0,25,20],
[24,27,20,24,25,24,26,26,0,18],
[27,29,27,27,25,30,27,31,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,29,24,27,25,24,18,30,21],
[27,0,25,22,29,29,21,29,27,20],
[22,26,0,24,31,25,29,26,37,29],
[27,29,27,0,23,24,27,18,26,21],
[24,22,20,28,0,28,32,27,30,25],
[26,22,26,27,23,0,23,20,29,24],
[27,30,22,24,19,28,0,23,33,23],
[33,22,25,33,24,31,28,0,35,28],
[21,24,14,25,21,22,18,16,0,15],
[30,31,22,30,26,27,28,23,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,30,25,26,30,28,31,28,23],
[21,0,26,24,23,25,23,27,25,24],
[21,25,0,24,24,19,20,27,26,22],
[26,27,27,0,23,21,27,26,26,27],
[25,28,27,28,0,26,24,30,28,25],
[21,26,32,30,25,0,27,27,24,20],
[23,28,31,24,27,24,0,29,25,28],
[20,24,24,25,21,24,22,0,20,20],
[23,26,25,25,23,27,26,31,0,21],
[28,27,29,24,26,31,23,31,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,23,24,26,29,26,27,26,25],
[23,0,28,27,25,24,33,23,27,27],
[28,23,0,26,28,24,27,22,27,24],
[27,24,25,0,22,23,27,20,19,18],
[25,26,23,29,0,22,28,22,24,19],
[22,27,27,28,29,0,31,22,20,19],
[25,18,24,24,23,20,0,24,22,19],
[24,28,29,31,29,29,27,0,31,22],
[25,24,24,32,27,31,29,20,0,25],
[26,24,27,33,32,32,32,29,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,33,16,25,33,25,51,25,42],
[34,0,16,16,17,34,34,34,8,34],
[18,35,0,17,18,34,26,35,9,26],
[35,35,34,0,25,34,26,43,35,34],
[26,34,33,26,0,42,25,34,26,42],
[18,17,17,17,9,0,17,26,17,18],
[26,17,25,25,26,34,0,34,17,34],
[0,17,16,8,17,25,17,0,8,26],
[26,43,42,16,25,34,34,43,0,34],
[9,17,25,17,9,33,17,25,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,26,22,31,29,41,30,29],
[12,0,24,5,12,24,29,36,24,29],
[12,27,0,15,10,13,17,17,18,29],
[25,46,36,0,29,31,29,36,36,42],
[29,39,41,22,0,41,29,46,25,46],
[20,27,38,20,10,0,23,23,29,28],
[22,22,34,22,22,28,0,35,16,34],
[10,15,34,15,5,28,16,0,12,29],
[21,27,33,15,26,22,35,39,0,33],
[22,22,22,9,5,23,17,22,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,21,33,23,31,33,26,17,28],
[20,0,24,38,17,20,26,31,27,34],
[30,27,0,46,27,27,32,34,22,35],
[18,13,5,0,9,22,14,22,8,19],
[28,34,24,42,0,30,37,38,23,39],
[20,31,24,29,21,0,33,24,22,26],
[18,25,19,37,14,18,0,31,27,32],
[25,20,17,29,13,27,20,0,14,26],
[34,24,29,43,28,29,24,37,0,31],
[23,17,16,32,12,25,19,25,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,19,18,28,27,34,36,28,34],
[35,0,24,20,21,32,37,36,25,27],
[32,27,0,22,25,24,36,32,24,28],
[33,31,29,0,25,33,27,33,25,28],
[23,30,26,26,0,34,30,31,23,15],
[24,19,27,18,17,0,22,25,24,25],
[17,14,15,24,21,29,0,20,17,14],
[15,15,19,18,20,26,31,0,16,11],
[23,26,27,26,28,27,34,35,0,19],
[17,24,23,23,36,26,37,40,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,25,28,23,22,25,23,25,28],
[21,0,20,15,24,15,24,18,25,30],
[26,31,0,24,26,29,30,25,37,28],
[23,36,27,0,26,20,34,26,32,30],
[28,27,25,25,0,21,29,25,30,33],
[29,36,22,31,30,0,30,23,33,32],
[26,27,21,17,22,21,0,21,27,25],
[28,33,26,25,26,28,30,0,37,31],
[26,26,14,19,21,18,24,14,0,24],
[23,21,23,21,18,19,26,20,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,19,13,21,17,13,25,6,11],
[36,0,36,23,38,10,23,16,10,18],
[32,15,0,24,25,17,17,19,17,11],
[38,28,27,0,25,30,12,18,13,24],
[30,13,26,26,0,15,26,9,11,16],
[34,41,34,21,36,0,21,25,26,31],
[38,28,34,39,25,30,0,30,19,24],
[26,35,32,33,42,26,21,0,19,19],
[45,41,34,38,40,25,32,32,0,29],
[40,33,40,27,35,20,27,32,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,24,26,26,32,30,27,26,31],
[28,0,35,17,30,27,24,27,28,29],
[27,16,0,21,23,21,25,19,27,23],
[25,34,30,0,32,35,28,28,26,35],
[25,21,28,19,0,26,23,23,28,27],
[19,24,30,16,25,0,27,22,22,29],
[21,27,26,23,28,24,0,18,24,26],
[24,24,32,23,28,29,33,0,20,29],
[25,23,24,25,23,29,27,31,0,31],
[20,22,28,16,24,22,25,22,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,27,33,30,21,31,26,27,21],
[23,0,22,28,24,17,25,20,18,22],
[24,29,0,33,37,24,27,26,29,26],
[18,23,18,0,25,19,28,20,21,21],
[21,27,14,26,0,18,26,15,20,18],
[30,34,27,32,33,0,29,25,25,24],
[20,26,24,23,25,22,0,16,21,19],
[25,31,25,31,36,26,35,0,22,24],
[24,33,22,30,31,26,30,29,0,23],
[30,29,25,30,33,27,32,27,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,0,13,13,13,25,13,12,0],
[26,0,13,26,13,13,13,26,13,13],
[51,38,0,25,25,38,38,25,38,13],
[38,25,26,0,25,25,25,38,38,13],
[38,38,26,26,0,26,38,38,25,13],
[38,38,13,26,25,0,38,38,25,13],
[26,38,13,26,13,13,0,26,13,26],
[38,25,26,13,13,13,25,0,25,13],
[39,38,13,13,26,26,38,26,0,13],
[51,38,38,38,38,38,25,38,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,36,21,28,26,25,25,34,30],
[22,0,33,26,26,17,30,19,33,28],
[15,18,0,16,20,22,18,21,23,21],
[30,25,35,0,22,28,27,27,27,31],
[23,25,31,29,0,29,29,32,31,28],
[25,34,29,23,22,0,27,22,37,32],
[26,21,33,24,22,24,0,24,29,31],
[26,32,30,24,19,29,27,0,33,31],
[17,18,28,24,20,14,22,18,0,26],
[21,23,30,20,23,19,20,20,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,32,26,24,34,32,22,29,26],
[19,0,24,25,22,27,30,21,27,21],
[19,27,0,25,24,30,31,20,18,27],
[25,26,26,0,26,28,35,25,26,26],
[27,29,27,25,0,29,30,20,28,27],
[17,24,21,23,22,0,19,22,26,23],
[19,21,20,16,21,32,0,21,20,26],
[29,30,31,26,31,29,30,0,34,25],
[22,24,33,25,23,25,31,17,0,25],
[25,30,24,25,24,28,25,26,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,16,33,33,33,33,33,33,51],
[18,0,16,33,16,0,18,33,0,34],
[35,35,0,17,17,17,35,17,17,35],
[18,18,34,0,0,18,18,0,0,18],
[18,35,34,51,0,35,18,51,18,34],
[18,51,34,33,16,0,34,33,0,34],
[18,33,16,33,33,17,0,33,17,51],
[18,18,34,51,0,18,18,0,18,18],
[18,51,34,51,33,51,34,33,0,34],
[0,17,16,33,17,17,0,33,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,31,24,31,33,24,23,29,19],
[30,0,31,27,29,27,24,32,28,35],
[20,20,0,32,27,32,25,21,32,25],
[27,24,19,0,25,31,27,26,32,25],
[20,22,24,26,0,26,20,28,28,27],
[18,24,19,20,25,0,23,26,23,28],
[27,27,26,24,31,28,0,28,29,24],
[28,19,30,25,23,25,23,0,25,26],
[22,23,19,19,23,28,22,26,0,19],
[32,16,26,26,24,23,27,25,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,27,21,25,23,18,23,25,21],
[29,0,33,27,25,21,25,26,26,23],
[24,18,0,22,22,21,22,23,24,26],
[30,24,29,0,25,25,23,29,27,23],
[26,26,29,26,0,25,23,27,25,20],
[28,30,30,26,26,0,31,29,28,24],
[33,26,29,28,28,20,0,31,25,23],
[28,25,28,22,24,22,20,0,24,24],
[26,25,27,24,26,23,26,27,0,19],
[30,28,25,28,31,27,28,27,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,32,28,26,26,26,35,24,27],
[25,0,29,29,24,23,28,34,26,26],
[19,22,0,25,28,24,25,33,22,26],
[23,22,26,0,25,24,23,28,20,23],
[25,27,23,26,0,25,25,30,21,25],
[25,28,27,27,26,0,26,34,21,29],
[25,23,26,28,26,25,0,27,21,20],
[16,17,18,23,21,17,24,0,17,24],
[27,25,29,31,30,30,30,34,0,28],
[24,25,25,28,26,22,31,27,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,28,24,30,28,27,29,26,30],
[20,0,26,22,24,26,22,21,27,27],
[23,25,0,26,17,22,21,23,23,16],
[27,29,25,0,21,25,26,25,28,23],
[21,27,34,30,0,24,20,25,26,24],
[23,25,29,26,27,0,23,25,25,21],
[24,29,30,25,31,28,0,25,26,27],
[22,30,28,26,26,26,26,0,28,22],
[25,24,28,23,25,26,25,23,0,23],
[21,24,35,28,27,30,24,29,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,16,9,15,24,35,15,27,8],
[28,0,28,9,26,35,28,9,28,19],
[35,23,0,17,24,25,28,15,35,26],
[42,42,34,0,24,42,43,34,34,27],
[36,25,27,27,0,34,36,25,27,27],
[27,16,26,9,17,0,28,8,27,18],
[16,23,23,8,15,23,0,15,26,16],
[36,42,36,17,26,43,36,0,44,36],
[24,23,16,17,24,24,25,7,0,8],
[43,32,25,24,24,33,35,15,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,16,21,10,17,15,27,25,22],
[35,0,21,25,20,25,19,38,21,25],
[35,30,0,34,24,27,38,39,30,36],
[30,26,17,0,15,22,24,33,25,27],
[41,31,27,36,0,32,21,39,32,32],
[34,26,24,29,19,0,28,38,21,30],
[36,32,13,27,30,23,0,31,27,23],
[24,13,12,18,12,13,20,0,19,23],
[26,30,21,26,19,30,24,32,0,26],
[29,26,15,24,19,21,28,28,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,32,44,32,37,37,32,44,19],
[31,0,39,24,39,29,39,39,38,19],
[19,12,0,17,32,36,25,19,37,19],
[7,27,34,0,34,39,33,33,25,14],
[19,12,19,17,0,25,20,12,19,11],
[14,22,15,12,26,0,15,15,25,14],
[14,12,26,18,31,36,0,14,37,13],
[19,12,32,18,39,36,37,0,37,26],
[7,13,14,26,32,26,14,14,0,14],
[32,32,32,37,40,37,38,25,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,20,23,25,21,27,17,21,10],
[25,0,20,13,16,23,19,19,11,16],
[31,31,0,33,24,28,26,20,23,27],
[28,38,18,0,25,33,29,29,26,10],
[26,35,27,26,0,23,19,24,27,31],
[30,28,23,18,28,0,11,18,17,23],
[24,32,25,22,32,40,0,22,21,21],
[34,32,31,22,27,33,29,0,21,18],
[30,40,28,25,24,34,30,30,0,35],
[41,35,24,41,20,28,30,33,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,23,27,21,28,27,26,18,24],
[25,0,31,33,27,31,35,35,26,23],
[28,20,0,29,23,31,24,29,19,19],
[24,18,22,0,23,27,29,32,23,29],
[30,24,28,28,0,31,32,34,25,23],
[23,20,20,24,20,0,24,23,23,14],
[24,16,27,22,19,27,0,25,23,21],
[25,16,22,19,17,28,26,0,23,22],
[33,25,32,28,26,28,28,28,0,23],
[27,28,32,22,28,37,30,29,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,30,25,25,28,29,22,17],
[24,0,28,26,18,25,26,35,29,24],
[24,23,0,23,27,26,26,35,22,28],
[21,25,28,0,14,27,33,27,25,24],
[26,33,24,37,0,25,31,30,26,27],
[26,26,25,24,26,0,25,28,29,19],
[23,25,25,18,20,26,0,30,20,24],
[22,16,16,24,21,23,21,0,24,28],
[29,22,29,26,25,22,31,27,0,26],
[34,27,23,27,24,32,27,23,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,22,30,25,21,21,28,26,25],
[26,0,23,30,31,27,29,29,30,21],
[29,28,0,25,29,22,26,30,33,26],
[21,21,26,0,25,18,21,22,29,17],
[26,20,22,26,0,22,23,31,25,26],
[30,24,29,33,29,0,25,31,32,22],
[30,22,25,30,28,26,0,33,30,30],
[23,22,21,29,20,20,18,0,29,23],
[25,21,18,22,26,19,21,22,0,23],
[26,30,25,34,25,29,21,28,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,25,24,24,30,28,28,28,29],
[29,0,22,23,25,29,24,27,27,29],
[26,29,0,28,24,32,27,26,27,27],
[27,28,23,0,26,26,30,29,27,35],
[27,26,27,25,0,32,30,29,25,28],
[21,22,19,25,19,0,18,18,21,23],
[23,27,24,21,21,33,0,22,28,27],
[23,24,25,22,22,33,29,0,28,30],
[23,24,24,24,26,30,23,23,0,31],
[22,22,24,16,23,28,24,21,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,27,31,27,24,31,31,21,26],
[27,0,21,26,28,22,28,27,20,26],
[24,30,0,29,29,25,30,27,28,27],
[20,25,22,0,27,21,23,24,27,23],
[24,23,22,24,0,21,25,26,20,21],
[27,29,26,30,30,0,31,23,25,31],
[20,23,21,28,26,20,0,23,17,17],
[20,24,24,27,25,28,28,0,24,31],
[30,31,23,24,31,26,34,27,0,33],
[25,25,24,28,30,20,34,20,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,23,29,25,27,27,26,25,32],
[30,0,24,20,29,22,31,20,30,30],
[28,27,0,23,31,28,27,17,33,29],
[22,31,28,0,28,22,28,19,33,35],
[26,22,20,23,0,25,27,21,25,28],
[24,29,23,29,26,0,29,22,24,27],
[24,20,24,23,24,22,0,20,29,24],
[25,31,34,32,30,29,31,0,33,35],
[26,21,18,18,26,27,22,18,0,29],
[19,21,22,16,23,24,27,16,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,20,27,24,33,27,20,28,25],
[22,0,27,28,30,35,29,22,30,32],
[31,24,0,27,35,32,29,27,33,30],
[24,23,24,0,31,34,24,30,33,32],
[27,21,16,20,0,31,20,22,31,18],
[18,16,19,17,20,0,26,18,26,25],
[24,22,22,27,31,25,0,22,25,27],
[31,29,24,21,29,33,29,0,34,25],
[23,21,18,18,20,25,26,17,0,23],
[26,19,21,19,33,26,24,26,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,20,27,22,24,28,28,20,25],
[27,0,24,25,24,22,24,18,20,19],
[31,27,0,28,24,23,30,26,23,26],
[24,26,23,0,28,18,21,23,17,23],
[29,27,27,23,0,23,20,27,22,26],
[27,29,28,33,28,0,29,26,29,25],
[23,27,21,30,31,22,0,26,19,24],
[23,33,25,28,24,25,25,0,25,27],
[31,31,28,34,29,22,32,26,0,26],
[26,32,25,28,25,26,27,24,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,15,13,27,17,19,25,25,18],
[19,0,15,18,18,19,19,25,19,15],
[36,36,0,27,33,32,32,32,24,33],
[38,33,24,0,30,31,31,34,31,27],
[24,33,18,21,0,31,21,29,21,22],
[34,32,19,20,20,0,24,25,23,22],
[32,32,19,20,30,27,0,33,31,24],
[26,26,19,17,22,26,18,0,24,25],
[26,32,27,20,30,28,20,27,0,23],
[33,36,18,24,29,29,27,26,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,28,26,30,32,25,23,30,27],
[26,0,25,20,33,27,19,24,27,30],
[23,26,0,20,32,22,23,28,26,25],
[25,31,31,0,30,25,27,25,30,37],
[21,18,19,21,0,18,15,24,19,24],
[19,24,29,26,33,0,21,23,25,31],
[26,32,28,24,36,30,0,20,29,33],
[28,27,23,26,27,28,31,0,31,26],
[21,24,25,21,32,26,22,20,0,22],
[24,21,26,14,27,20,18,25,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,29,23,31,26,31,30,28,29],
[21,0,35,29,32,23,31,30,30,30],
[22,16,0,19,27,21,27,33,24,22],
[28,22,32,0,33,25,28,30,26,24],
[20,19,24,18,0,15,24,26,22,24],
[25,28,30,26,36,0,38,34,31,35],
[20,20,24,23,27,13,0,26,27,24],
[21,21,18,21,25,17,25,0,26,24],
[23,21,27,25,29,20,24,25,0,30],
[22,21,29,27,27,16,27,27,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,30,20,29,26,23,24,23,18],
[30,0,28,30,30,24,31,35,27,25],
[21,23,0,23,28,19,24,29,25,26],
[31,21,28,0,34,25,27,31,24,24],
[22,21,23,17,0,22,23,25,25,20],
[25,27,32,26,29,0,26,30,31,28],
[28,20,27,24,28,25,0,26,28,20],
[27,16,22,20,26,21,25,0,25,25],
[28,24,26,27,26,20,23,26,0,21],
[33,26,25,27,31,23,31,26,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,33,21,35,31,24,25,26,33],
[14,0,22,21,23,22,17,19,16,26],
[18,29,0,21,26,24,18,18,23,27],
[30,30,30,0,36,32,29,21,24,31],
[16,28,25,15,0,28,16,13,21,27],
[20,29,27,19,23,0,22,16,16,24],
[27,34,33,22,35,29,0,29,29,30],
[26,32,33,30,38,35,22,0,21,37],
[25,35,28,27,30,35,22,30,0,31],
[18,25,24,20,24,27,21,14,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,28,22,24,20,26,24,22,19],
[23,0,34,20,30,23,21,22,19,17],
[23,17,0,16,25,17,19,21,19,18],
[29,31,35,0,28,25,29,34,25,29],
[27,21,26,23,0,25,29,26,25,25],
[31,28,34,26,26,0,28,37,28,21],
[25,30,32,22,22,23,0,31,20,24],
[27,29,30,17,25,14,20,0,23,20],
[29,32,32,26,26,23,31,28,0,25],
[32,34,33,22,26,30,27,31,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,26,26,31,33,31,30,30,19],
[27,0,24,30,34,31,28,33,29,24],
[25,27,0,33,31,35,29,28,29,28],
[25,21,18,0,27,21,24,26,28,24],
[20,17,20,24,0,24,24,23,24,15],
[18,20,16,30,27,0,22,24,23,20],
[20,23,22,27,27,29,0,22,23,21],
[21,18,23,25,28,27,29,0,25,16],
[21,22,22,23,27,28,28,26,0,26],
[32,27,23,27,36,31,30,35,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,22,25,27,26,22,27,17,22],
[38,0,44,42,44,25,33,28,37,35],
[29,7,0,19,21,25,24,18,14,13],
[26,9,32,0,22,21,27,24,19,19],
[24,7,30,29,0,21,27,10,13,13],
[25,26,26,30,30,0,34,27,30,27],
[29,18,27,24,24,17,0,19,9,19],
[24,23,33,27,41,24,32,0,22,29],
[34,14,37,32,38,21,42,29,0,26],
[29,16,38,32,38,24,32,22,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,21,22,19,32,27,21,22,26],
[25,0,26,27,27,29,30,27,29,30],
[30,25,0,23,31,32,24,28,26,26],
[29,24,28,0,26,28,32,25,24,23],
[32,24,20,25,0,30,18,22,27,30],
[19,22,19,23,21,0,19,22,21,17],
[24,21,27,19,33,32,0,22,27,29],
[30,24,23,26,29,29,29,0,29,36],
[29,22,25,27,24,30,24,22,0,22],
[25,21,25,28,21,34,22,15,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,26,25,26,38,13,13,26,51],
[13,0,13,26,13,26,26,13,13,26],
[25,38,0,38,13,38,26,26,13,38],
[26,25,13,0,13,26,26,13,13,26],
[25,38,38,38,0,25,26,26,26,38],
[13,25,13,25,26,0,26,13,13,13],
[38,25,25,25,25,25,0,38,25,38],
[38,38,25,38,25,38,13,0,38,51],
[25,38,38,38,25,38,26,13,0,38],
[0,25,13,25,13,38,13,0,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,27,25,46,24,38,43,30,38],
[15,0,27,20,51,32,36,37,33,32],
[24,24,0,36,42,35,31,48,33,41],
[26,31,15,0,37,19,16,43,31,29],
[5,0,9,14,0,24,9,22,25,14],
[27,19,16,32,27,0,22,38,24,32],
[13,15,20,35,42,29,0,37,30,27],
[8,14,3,8,29,13,14,0,19,29],
[21,18,18,20,26,27,21,32,0,22],
[13,19,10,22,37,19,24,22,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,27,29,34,30,24,24,31,28],
[22,0,28,30,27,27,25,23,30,27],
[24,23,0,27,22,21,25,24,28,27],
[22,21,24,0,20,21,25,19,24,24],
[17,24,29,31,0,25,23,20,20,27],
[21,24,30,30,26,0,22,29,30,33],
[27,26,26,26,28,29,0,25,25,27],
[27,28,27,32,31,22,26,0,31,31],
[20,21,23,27,31,21,26,20,0,25],
[23,24,24,27,24,18,24,20,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,23,25,33,28,35,30,34,30],
[20,0,24,21,28,22,27,20,31,23],
[28,27,0,27,31,26,31,24,31,28],
[26,30,24,0,27,22,31,28,30,24],
[18,23,20,24,0,24,28,19,24,31],
[23,29,25,29,27,0,35,22,28,26],
[16,24,20,20,23,16,0,20,26,20],
[21,31,27,23,32,29,31,0,31,25],
[17,20,20,21,27,23,25,20,0,23],
[21,28,23,27,20,25,31,26,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,31,28,29,29,28,25,23,28],
[23,0,19,30,25,27,26,27,25,27],
[20,32,0,33,25,34,24,31,29,32],
[23,21,18,0,27,25,24,26,24,28],
[22,26,26,24,0,25,23,22,23,29],
[22,24,17,26,26,0,21,26,26,23],
[23,25,27,27,28,30,0,27,28,35],
[26,24,20,25,29,25,24,0,23,29],
[28,26,22,27,28,25,23,28,0,30],
[23,24,19,23,22,28,16,22,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,25,21,23,25,15,25,26,20],
[22,0,25,18,22,21,15,26,22,17],
[26,26,0,23,16,26,13,21,16,19],
[30,33,28,0,31,36,23,32,20,22],
[28,29,35,20,0,26,29,23,23,25],
[26,30,25,15,25,0,14,28,14,19],
[36,36,38,28,22,37,0,25,20,34],
[26,25,30,19,28,23,26,0,21,26],
[25,29,35,31,28,37,31,30,0,30],
[31,34,32,29,26,32,17,25,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,26,27,22,26,24,24,35,28],
[34,0,35,29,22,25,26,30,42,30],
[25,16,0,22,21,25,19,19,38,28],
[24,22,29,0,20,27,20,16,29,30],
[29,29,30,31,0,32,29,25,44,27],
[25,26,26,24,19,0,23,29,40,33],
[27,25,32,31,22,28,0,30,38,31],
[27,21,32,35,26,22,21,0,39,27],
[16,9,13,22,7,11,13,12,0,19],
[23,21,23,21,24,18,20,24,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,35,33,37,22,28,37,34,29],
[26,0,32,21,30,29,32,33,28,29],
[16,19,0,15,22,16,23,31,26,21],
[18,30,36,0,31,22,30,37,29,27],
[14,21,29,20,0,20,24,31,24,20],
[29,22,35,29,31,0,31,34,33,32],
[23,19,28,21,27,20,0,30,25,20],
[14,18,20,14,20,17,21,0,15,21],
[17,23,25,22,27,18,26,36,0,18],
[22,22,30,24,31,19,31,30,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,31,23,31,23,31,29,31,23],
[29,0,29,38,29,29,29,29,22,38],
[20,22,0,23,31,23,37,29,31,23],
[28,13,28,0,21,35,35,34,28,28],
[20,22,20,30,0,27,35,36,35,29],
[28,22,28,16,24,0,28,29,29,29],
[20,22,14,16,16,23,0,29,14,23],
[22,22,22,17,15,22,22,0,22,31],
[20,29,20,23,16,22,37,29,0,36],
[28,13,28,23,22,22,28,20,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,25,26,26,27,25,25,27,25],
[23,0,23,22,26,23,32,22,24,25],
[26,28,0,25,23,27,31,22,28,23],
[25,29,26,0,25,33,25,26,25,29],
[25,25,28,26,0,25,25,22,23,26],
[24,28,24,18,26,0,26,27,23,27],
[26,19,20,26,26,25,0,24,22,24],
[26,29,29,25,29,24,27,0,24,26],
[24,27,23,26,28,28,29,27,0,25],
[26,26,28,22,25,24,27,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,23,24,22,18,24,24,19,14],
[30,0,23,23,26,22,29,25,31,20],
[28,28,0,22,30,22,32,24,26,25],
[27,28,29,0,31,24,27,30,22,21],
[29,25,21,20,0,24,26,31,29,18],
[33,29,29,27,27,0,23,35,26,23],
[27,22,19,24,25,28,0,27,22,27],
[27,26,27,21,20,16,24,0,25,15],
[32,20,25,29,22,25,29,26,0,21],
[37,31,26,30,33,28,24,36,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,24,29,26,29,28,34,32,33],
[24,0,26,31,33,32,26,36,32,30],
[27,25,0,36,29,33,32,24,28,33],
[22,20,15,0,23,27,25,26,23,30],
[25,18,22,28,0,27,20,29,25,27],
[22,19,18,24,24,0,26,22,21,25],
[23,25,19,26,31,25,0,29,26,27],
[17,15,27,25,22,29,22,0,21,23],
[19,19,23,28,26,30,25,30,0,33],
[18,21,18,21,24,26,24,28,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,30,24,21,27,28,24,21,25],
[22,0,35,29,25,31,33,23,26,30],
[21,16,0,24,26,28,29,21,21,23],
[27,22,27,0,21,30,27,25,23,19],
[30,26,25,30,0,29,30,27,24,35],
[24,20,23,21,22,0,24,20,22,27],
[23,18,22,24,21,27,0,18,21,21],
[27,28,30,26,24,31,33,0,24,29],
[30,25,30,28,27,29,30,27,0,28],
[26,21,28,32,16,24,30,22,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,27,33,25,24,28,30,30,27],
[29,0,24,33,33,30,30,30,37,24],
[24,27,0,32,24,27,27,29,29,27],
[18,18,19,0,17,22,24,25,25,29],
[26,18,27,34,0,27,26,19,31,24],
[27,21,24,29,24,0,19,26,32,23],
[23,21,24,27,25,32,0,30,26,25],
[21,21,22,26,32,25,21,0,25,25],
[21,14,22,26,20,19,25,26,0,24],
[24,27,24,22,27,28,26,26,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,29,29,19,29,29,26,23,28],
[29,0,32,28,30,33,25,32,27,36],
[22,19,0,31,25,27,23,20,22,25],
[22,23,20,0,17,26,27,22,25,28],
[32,21,26,34,0,36,30,28,26,29],
[22,18,24,25,15,0,26,15,23,21],
[22,26,28,24,21,25,0,31,22,27],
[25,19,31,29,23,36,20,0,30,29],
[28,24,29,26,25,28,29,21,0,29],
[23,15,26,23,22,30,24,22,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,17,17,0,17,0,0,0,17],
[34,0,17,34,17,17,17,34,17,17],
[34,34,0,34,17,17,17,34,17,17],
[34,17,17,0,0,17,0,17,17,34],
[51,34,34,51,0,34,17,34,34,34],
[34,34,34,34,17,0,34,34,17,17],
[51,34,34,51,34,17,0,51,34,34],
[51,17,17,34,17,17,0,0,17,17],
[51,34,34,34,17,34,17,34,0,51],
[34,34,34,17,17,34,17,34,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,16,20,17,26,26,18,21,22],
[29,0,22,27,24,34,27,23,24,30],
[35,29,0,27,23,29,28,27,26,23],
[31,24,24,0,27,30,28,29,26,31],
[34,27,28,24,0,36,34,31,30,20],
[25,17,22,21,15,0,26,21,22,23],
[25,24,23,23,17,25,0,20,15,25],
[33,28,24,22,20,30,31,0,26,24],
[30,27,25,25,21,29,36,25,0,25],
[29,21,28,20,31,28,26,27,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,14,20,23,17,26,19,26,26],
[33,0,32,31,31,20,28,25,22,32],
[37,19,0,40,28,21,35,27,25,35],
[31,20,11,0,23,18,25,22,29,26],
[28,20,23,28,0,21,35,18,29,30],
[34,31,30,33,30,0,39,23,32,38],
[25,23,16,26,16,12,0,12,18,17],
[32,26,24,29,33,28,39,0,32,23],
[25,29,26,22,22,19,33,19,0,29],
[25,19,16,25,21,13,34,28,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,25,27,27,31,26,26,27,27],
[28,0,32,33,24,35,33,33,34,29],
[26,19,0,28,24,26,29,31,30,26],
[24,18,23,0,19,29,31,29,33,24],
[24,27,27,32,0,35,28,40,34,32],
[20,16,25,22,16,0,23,28,28,21],
[25,18,22,20,23,28,0,21,25,27],
[25,18,20,22,11,23,30,0,21,31],
[24,17,21,18,17,23,26,30,0,25],
[24,22,25,27,19,30,24,20,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,23,34,40,17,22,22,25,24],
[29,0,23,41,28,29,28,22,30,24],
[28,28,0,28,28,21,21,33,29,16],
[17,10,23,0,11,10,21,17,11,17],
[11,23,23,40,0,16,20,22,23,11],
[34,22,30,41,35,0,33,27,25,34],
[29,23,30,30,31,18,0,28,13,31],
[29,29,18,34,29,24,23,0,13,24],
[26,21,22,40,28,26,38,38,0,23],
[27,27,35,34,40,17,20,27,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,19,23,28,24,24,26,20,32],
[27,0,24,18,29,33,27,26,30,29],
[32,27,0,26,24,36,21,21,32,22],
[28,33,25,0,26,28,23,20,29,25],
[23,22,27,25,0,31,17,22,31,24],
[27,18,15,23,20,0,19,16,26,22],
[27,24,30,28,34,32,0,28,27,21],
[25,25,30,31,29,35,23,0,34,30],
[31,21,19,22,20,25,24,17,0,23],
[19,22,29,26,27,29,30,21,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,26,35,42,23,16,35,26],
[23,0,26,23,34,23,23,16,35,23],
[25,25,0,16,34,41,25,32,35,16],
[25,28,35,0,34,32,32,16,35,35],
[16,17,17,17,0,24,7,7,35,17],
[9,28,10,19,27,0,9,16,28,19],
[28,28,26,19,44,42,0,26,28,19],
[35,35,19,35,44,35,25,0,44,35],
[16,16,16,16,16,23,23,7,0,7],
[25,28,35,16,34,32,32,16,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,27,24,20,20,26,19,26,23],
[21,0,28,22,26,15,26,24,28,21],
[24,23,0,17,16,16,27,21,30,25],
[27,29,34,0,28,20,29,30,33,29],
[31,25,35,23,0,26,31,19,30,30],
[31,36,35,31,25,0,29,26,35,24],
[25,25,24,22,20,22,0,21,32,27],
[32,27,30,21,32,25,30,0,36,32],
[25,23,21,18,21,16,19,15,0,19],
[28,30,26,22,21,27,24,19,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,15,10,19,24,16,14,25,11],
[34,0,19,18,23,23,23,26,31,18],
[36,32,0,28,35,26,24,30,39,29],
[41,33,23,0,31,31,26,34,38,22],
[32,28,16,20,0,24,26,20,27,21],
[27,28,25,20,27,0,29,23,30,24],
[35,28,27,25,25,22,0,19,34,21],
[37,25,21,17,31,28,32,0,35,21],
[26,20,12,13,24,21,17,16,0,22],
[40,33,22,29,30,27,30,30,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,21,31,26,24,14,22,16,21],
[24,0,14,27,13,23,18,20,17,20],
[30,37,0,36,31,25,29,29,28,29],
[20,24,15,0,15,20,13,22,18,16],
[25,38,20,36,0,31,26,31,23,27],
[27,28,26,31,20,0,28,21,29,30],
[37,33,22,38,25,23,0,23,33,33],
[29,31,22,29,20,30,28,0,27,20],
[35,34,23,33,28,22,18,24,0,24],
[30,31,22,35,24,21,18,31,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,24,27,26,27,31,32,28,21],
[19,0,17,19,19,21,20,25,24,13],
[27,34,0,23,28,24,26,31,28,24],
[24,32,28,0,22,26,24,28,29,25],
[25,32,23,29,0,23,25,24,31,26],
[24,30,27,25,28,0,24,25,30,26],
[20,31,25,27,26,27,0,29,29,18],
[19,26,20,23,27,26,22,0,25,15],
[23,27,23,22,20,21,22,26,0,25],
[30,38,27,26,25,25,33,36,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,34,23,30,28,30,18,29,26],
[31,0,28,21,26,32,29,29,33,24],
[17,23,0,20,27,31,25,17,27,18],
[28,30,31,0,23,29,22,25,24,23],
[21,25,24,28,0,34,33,27,26,29],
[23,19,20,22,17,0,26,25,20,23],
[21,22,26,29,18,25,0,27,23,27],
[33,22,34,26,24,26,24,0,32,33],
[22,18,24,27,25,31,28,19,0,27],
[25,27,33,28,22,28,24,18,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,25,22,22,25,26,19,21,21],
[21,0,24,23,22,23,26,24,23,20],
[26,27,0,24,25,29,23,30,31,23],
[29,28,27,0,31,27,30,28,25,23],
[29,29,26,20,0,25,28,22,23,27],
[26,28,22,24,26,0,30,26,25,25],
[25,25,28,21,23,21,0,26,23,23],
[32,27,21,23,29,25,25,0,28,23],
[30,28,20,26,28,26,28,23,0,22],
[30,31,28,28,24,26,28,28,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,32,30,27,31,32,25,30,32],
[24,0,36,29,28,30,34,28,28,25],
[19,15,0,19,25,23,20,20,21,21],
[21,22,32,0,29,28,31,25,23,30],
[24,23,26,22,0,25,20,21,20,22],
[20,21,28,23,26,0,25,27,25,23],
[19,17,31,20,31,26,0,22,23,24],
[26,23,31,26,30,24,29,0,27,25],
[21,23,30,28,31,26,28,24,0,24],
[19,26,30,21,29,28,27,26,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,31,32,28,32,33,29,28,29],
[30,0,32,34,36,24,30,30,27,30],
[20,19,0,29,25,20,33,30,19,23],
[19,17,22,0,29,17,21,21,25,16],
[23,15,26,22,0,23,31,24,25,25],
[19,27,31,34,28,0,35,28,38,31],
[18,21,18,30,20,16,0,26,25,27],
[22,21,21,30,27,23,25,0,28,26],
[23,24,32,26,26,13,26,23,0,27],
[22,21,28,35,26,20,24,25,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,21,27,20,23,25,20,23,31],
[26,0,26,27,27,27,26,21,29,35],
[30,25,0,16,14,20,22,10,26,24],
[24,24,35,0,21,20,19,17,27,20],
[31,24,37,30,0,24,25,26,26,30],
[28,24,31,31,27,0,19,22,28,27],
[26,25,29,32,26,32,0,28,26,20],
[31,30,41,34,25,29,23,0,32,27],
[28,22,25,24,25,23,25,19,0,34],
[20,16,27,31,21,24,31,24,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,34,32,37,29,32,28,29,31],
[26,0,25,24,30,28,39,23,35,26],
[17,26,0,22,29,27,28,19,22,22],
[19,27,29,0,32,30,34,24,26,34],
[14,21,22,19,0,24,36,25,24,21],
[22,23,24,21,27,0,29,28,25,25],
[19,12,23,17,15,22,0,15,27,17],
[23,28,32,27,26,23,36,0,27,29],
[22,16,29,25,27,26,24,24,0,18],
[20,25,29,17,30,26,34,22,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,4,15,20,24,28,19,33,23],
[32,0,11,22,8,13,21,13,22,26],
[47,40,0,21,28,30,28,30,37,31],
[36,29,30,0,33,30,23,34,27,22],
[31,43,23,18,0,24,23,27,27,32],
[27,38,21,21,27,0,13,28,25,29],
[23,30,23,28,28,38,0,24,27,29],
[32,38,21,17,24,23,27,0,23,23],
[18,29,14,24,24,26,24,28,0,18],
[28,25,20,29,19,22,22,28,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,12,11,0,23,12,20,0,0],
[41,0,41,20,20,41,32,41,20,20],
[39,10,0,11,21,30,11,29,11,21],
[40,31,40,0,28,42,40,41,18,28],
[51,31,30,23,0,42,21,41,21,21],
[28,10,21,9,9,0,9,20,9,9],
[39,19,40,11,30,42,0,29,29,19],
[31,10,22,10,10,31,22,0,10,10],
[51,31,40,33,30,42,22,41,0,19],
[51,31,30,23,30,42,32,41,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,31,33,35,29,25,29,36,31],
[23,0,30,25,30,28,27,30,33,33],
[20,21,0,24,23,19,28,26,26,23],
[18,26,27,0,33,24,26,27,29,31],
[16,21,28,18,0,21,21,23,30,25],
[22,23,32,27,30,0,26,26,35,29],
[26,24,23,25,30,25,0,15,28,23],
[22,21,25,24,28,25,36,0,33,25],
[15,18,25,22,21,16,23,18,0,17],
[20,18,28,20,26,22,28,26,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,24,30,22,27,21,23,24,25],
[28,0,26,26,23,27,26,27,23,26],
[27,25,0,29,27,25,28,29,24,29],
[21,25,22,0,19,27,26,26,26,26],
[29,28,24,32,0,32,31,25,27,30],
[24,24,26,24,19,0,25,24,21,26],
[30,25,23,25,20,26,0,25,27,23],
[28,24,22,25,26,27,26,0,26,26],
[27,28,27,25,24,30,24,25,0,30],
[26,25,22,25,21,25,28,25,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,29,32,33,26,21,34,23,39],
[25,0,18,21,29,16,25,31,25,34],
[22,33,0,28,29,37,20,32,18,31],
[19,30,23,0,27,24,26,28,27,31],
[18,22,22,24,0,18,17,29,27,33],
[25,35,14,27,33,0,26,36,29,34],
[30,26,31,25,34,25,0,31,22,32],
[17,20,19,23,22,15,20,0,21,26],
[28,26,33,24,24,22,29,30,0,37],
[12,17,20,20,18,17,19,25,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,23,25,24,22,21,29,28,20],
[28,0,30,24,28,27,26,27,33,31],
[28,21,0,23,21,14,20,24,24,15],
[26,27,28,0,24,24,29,35,30,19],
[27,23,30,27,0,21,23,31,27,19],
[29,24,37,27,30,0,22,38,29,25],
[30,25,31,22,28,29,0,32,32,25],
[22,24,27,16,20,13,19,0,26,21],
[23,18,27,21,24,22,19,25,0,18],
[31,20,36,32,32,26,26,30,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,25,36,27,26,27,30,27,27],
[30,0,32,27,29,24,25,27,27,22],
[26,19,0,27,26,22,26,23,27,20],
[15,24,24,0,26,22,25,23,29,20],
[24,22,25,25,0,22,19,27,28,18],
[25,27,29,29,29,0,28,30,31,22],
[24,26,25,26,32,23,0,27,31,23],
[21,24,28,28,24,21,24,0,29,23],
[24,24,24,22,23,20,20,22,0,20],
[24,29,31,31,33,29,28,28,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,25,13,19,23,22,19,21,20],
[29,0,33,23,25,33,28,25,24,27],
[26,18,0,24,24,27,28,23,26,14],
[38,28,27,0,26,35,24,29,29,26],
[32,26,27,25,0,32,34,20,27,23],
[28,18,24,16,19,0,23,22,26,20],
[29,23,23,27,17,28,0,27,25,20],
[32,26,28,22,31,29,24,0,28,23],
[30,27,25,22,24,25,26,23,0,21],
[31,24,37,25,28,31,31,28,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,24,26,21,27,25,24,26,29],
[22,0,23,29,22,26,22,25,23,25],
[27,28,0,27,27,27,25,29,26,29],
[25,22,24,0,27,27,23,23,20,25],
[30,29,24,24,0,25,20,24,32,27],
[24,25,24,24,26,0,21,27,24,24],
[26,29,26,28,31,30,0,24,31,30],
[27,26,22,28,27,24,27,0,27,32],
[25,28,25,31,19,27,20,24,0,29],
[22,26,22,26,24,27,21,19,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,9,0,0,9,9,9,0,18],
[51,0,42,33,22,29,51,31,42,29],
[42,9,0,20,31,9,40,22,31,9],
[51,18,31,0,20,18,40,20,40,29],
[51,29,20,31,0,29,51,31,31,29],
[42,22,42,33,22,0,51,31,42,40],
[42,0,11,11,0,0,0,22,20,9],
[42,20,29,31,20,20,29,0,31,29],
[51,9,20,11,20,9,31,20,0,18],
[33,22,42,22,22,11,42,22,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,28,27,27,18,29,15,22,23],
[34,0,25,29,24,27,34,21,26,31],
[23,26,0,26,27,18,26,20,16,22],
[24,22,25,0,24,22,27,27,15,22],
[24,27,24,27,0,34,29,19,29,29],
[33,24,33,29,17,0,29,26,21,29],
[22,17,25,24,22,22,0,18,12,24],
[36,30,31,24,32,25,33,0,23,34],
[29,25,35,36,22,30,39,28,0,34],
[28,20,29,29,22,22,27,17,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,23,20,31,28,21,26,18,29],
[33,0,33,27,40,39,25,29,26,37],
[28,18,0,22,30,37,27,27,22,30],
[31,24,29,0,38,35,30,31,29,35],
[20,11,21,13,0,16,15,18,18,23],
[23,12,14,16,35,0,14,13,22,29],
[30,26,24,21,36,37,0,33,33,35],
[25,22,24,20,33,38,18,0,24,33],
[33,25,29,22,33,29,18,27,0,37],
[22,14,21,16,28,22,16,18,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,35,29,25,24,29,26,27,29],
[25,0,33,28,31,24,28,31,28,30],
[16,18,0,17,16,19,19,18,20,24],
[22,23,34,0,27,27,28,29,26,30],
[26,20,35,24,0,22,27,28,30,28],
[27,27,32,24,29,0,30,23,32,27],
[22,23,32,23,24,21,0,26,26,26],
[25,20,33,22,23,28,25,0,29,29],
[24,23,31,25,21,19,25,22,0,29],
[22,21,27,21,23,24,25,22,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,25,20,27,23,21,25,22,24],
[33,0,25,25,33,26,30,31,27,26],
[26,26,0,29,29,31,27,28,24,27],
[31,26,22,0,30,23,27,29,28,26],
[24,18,22,21,0,21,23,22,19,18],
[28,25,20,28,30,0,27,32,26,23],
[30,21,24,24,28,24,0,28,27,26],
[26,20,23,22,29,19,23,0,24,24],
[29,24,27,23,32,25,24,27,0,23],
[27,25,24,25,33,28,25,27,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,22,14,25,30,19,23,21,11],
[36,0,30,29,38,43,27,23,22,32],
[29,21,0,21,32,34,26,21,30,27],
[37,22,30,0,32,32,32,21,20,25],
[26,13,19,19,0,32,13,11,20,20],
[21,8,17,19,19,0,14,22,15,19],
[32,24,25,19,38,37,0,27,17,28],
[28,28,30,30,40,29,24,0,28,29],
[30,29,21,31,31,36,34,23,0,26],
[40,19,24,26,31,32,23,22,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,35,28,29,21,28,34,28,34],
[27,0,40,33,28,27,21,29,29,28],
[16,11,0,22,18,17,16,17,19,18],
[23,18,29,0,27,23,26,24,27,34],
[22,23,33,24,0,20,26,19,27,33],
[30,24,34,28,31,0,22,17,28,30],
[23,30,35,25,25,29,0,31,26,33],
[17,22,34,27,32,34,20,0,30,32],
[23,22,32,24,24,23,25,21,0,31],
[17,23,33,17,18,21,18,19,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,41,32,21,41,41,32,31,32],
[30,0,41,31,30,40,30,30,40,21],
[10,10,0,31,10,21,20,31,20,31],
[19,20,20,0,9,9,19,9,40,10],
[30,21,41,42,0,41,41,41,31,21],
[10,11,30,42,10,0,19,32,31,10],
[10,21,31,32,10,32,0,32,31,21],
[19,21,20,42,10,19,19,0,31,10],
[20,11,31,11,20,20,20,20,0,11],
[19,30,20,41,30,41,30,41,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,17,20,29,25,36,26,21,22],
[37,0,26,25,34,26,39,40,31,30],
[34,25,0,30,37,37,33,41,34,41],
[31,26,21,0,38,26,36,42,26,31],
[22,17,14,13,0,15,26,30,22,19],
[26,25,14,25,36,0,35,40,33,28],
[15,12,18,15,25,16,0,28,20,17],
[25,11,10,9,21,11,23,0,25,13],
[30,20,17,25,29,18,31,26,0,25],
[29,21,10,20,32,23,34,38,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,27,24,22,21,20,20,13,20],
[30,0,25,22,23,17,29,31,26,22],
[24,26,0,30,28,24,27,24,25,28],
[27,29,21,0,22,16,23,25,23,25],
[29,28,23,29,0,25,27,27,26,24],
[30,34,27,35,26,0,32,30,22,25],
[31,22,24,28,24,19,0,25,24,25],
[31,20,27,26,24,21,26,0,24,24],
[38,25,26,28,25,29,27,27,0,25],
[31,29,23,26,27,26,26,27,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,25,25,26,21,21,24,27,22],
[21,0,22,22,28,24,20,26,26,28],
[26,29,0,30,24,27,25,30,27,24],
[26,29,21,0,25,23,20,24,26,23],
[25,23,27,26,0,23,26,27,26,24],
[30,27,24,28,28,0,27,24,29,21],
[30,31,26,31,25,24,0,26,27,25],
[27,25,21,27,24,27,25,0,27,23],
[24,25,24,25,25,22,24,24,0,18],
[29,23,27,28,27,30,26,28,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,19,25,21,26,30,25,25,21],
[30,0,24,30,14,29,41,29,24,34],
[32,27,0,27,22,30,26,26,19,27],
[26,21,24,0,25,21,37,29,25,31],
[30,37,29,26,0,34,32,32,20,37],
[25,22,21,30,17,0,35,25,13,26],
[21,10,25,14,19,16,0,25,21,21],
[26,22,25,22,19,26,26,0,15,22],
[26,27,32,26,31,38,30,36,0,17],
[30,17,24,20,14,25,30,29,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,24,16,24,25,23,27,31,31],
[19,0,17,8,7,17,18,19,20,12],
[27,34,0,27,32,25,24,33,40,32],
[35,43,24,0,28,36,27,34,33,41],
[27,44,19,23,0,32,30,29,35,33],
[26,34,26,15,19,0,28,30,32,32],
[28,33,27,24,21,23,0,24,38,26],
[24,32,18,17,22,21,27,0,29,25],
[20,31,11,18,16,19,13,22,0,17],
[20,39,19,10,18,19,25,26,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,36,33,29,22,26,28,27,31],
[22,0,26,28,26,23,18,22,23,23],
[15,25,0,30,24,28,21,23,22,23],
[18,23,21,0,25,20,19,21,27,25],
[22,25,27,26,0,15,18,17,18,21],
[29,28,23,31,36,0,20,27,27,31],
[25,33,30,32,33,31,0,30,29,28],
[23,29,28,30,34,24,21,0,19,27],
[24,28,29,24,33,24,22,32,0,31],
[20,28,28,26,30,20,23,24,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,23,24,32,30,22,26,23,26],
[22,0,22,22,29,29,24,21,21,27],
[28,29,0,27,32,35,31,28,25,28],
[27,29,24,0,29,26,26,24,22,26],
[19,22,19,22,0,22,17,22,18,17],
[21,22,16,25,29,0,26,22,21,21],
[29,27,20,25,34,25,0,25,17,24],
[25,30,23,27,29,29,26,0,27,28],
[28,30,26,29,33,30,34,24,0,25],
[25,24,23,25,34,30,27,23,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,17,13,21,27,16,25,21,23],
[25,0,22,14,26,21,26,28,25,33],
[34,29,0,26,24,26,26,29,23,28],
[38,37,25,0,29,27,28,33,26,34],
[30,25,27,22,0,23,23,24,21,28],
[24,30,25,24,28,0,24,27,28,23],
[35,25,25,23,28,27,0,23,25,32],
[26,23,22,18,27,24,28,0,23,30],
[30,26,28,25,30,23,26,28,0,29],
[28,18,23,17,23,28,19,21,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,21,27,24,20,24,24,18,19],
[29,0,31,30,34,22,31,33,23,27],
[30,20,0,28,28,26,25,28,24,24],
[24,21,23,0,25,27,23,24,21,19],
[27,17,23,26,0,15,21,23,20,20],
[31,29,25,24,36,0,28,32,29,21],
[27,20,26,28,30,23,0,29,24,21],
[27,18,23,27,28,19,22,0,22,22],
[33,28,27,30,31,22,27,29,0,26],
[32,24,27,32,31,30,30,29,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,36,27,44,33,40,31,24,35],
[16,0,22,13,28,21,21,21,16,29],
[15,29,0,34,41,28,30,20,19,30],
[24,38,17,0,37,34,29,19,18,36],
[7,23,10,14,0,13,17,7,2,21],
[18,30,23,17,38,0,22,16,18,25],
[11,30,21,22,34,29,0,16,9,33],
[20,30,31,32,44,35,35,0,31,42],
[27,35,32,33,49,33,42,20,0,33],
[16,22,21,15,30,26,18,9,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,26,15,16,26,13,28,15,18],
[36,0,23,41,30,32,25,31,30,33],
[25,28,0,18,19,22,15,16,15,18],
[36,10,33,0,25,27,17,35,27,18],
[35,21,32,26,0,30,23,35,33,24],
[25,19,29,24,21,0,21,25,22,18],
[38,26,36,34,28,30,0,31,24,30],
[23,20,35,16,16,26,20,0,25,17],
[36,21,36,24,18,29,27,26,0,18],
[33,18,33,33,27,33,21,34,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,29,26,30,23,25,25,26,31],
[25,0,24,24,20,17,23,21,17,33],
[22,27,0,27,25,18,28,24,15,34],
[25,27,24,0,27,22,28,25,18,33],
[21,31,26,24,0,24,21,22,21,33],
[28,34,33,29,27,0,36,28,22,39],
[26,28,23,23,30,15,0,23,22,28],
[26,30,27,26,29,23,28,0,21,32],
[25,34,36,33,30,29,29,30,0,41],
[20,18,17,18,18,12,23,19,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,23,30,42,20,39,38,29,18],
[19,0,20,28,38,27,36,28,32,22],
[28,31,0,40,39,22,43,36,32,20],
[21,23,11,0,35,29,32,22,22,18],
[9,13,12,16,0,17,32,17,20,12],
[31,24,29,22,34,0,41,29,23,26],
[12,15,8,19,19,10,0,19,19,8],
[13,23,15,29,34,22,32,0,21,11],
[22,19,19,29,31,28,32,30,0,16],
[33,29,31,33,39,25,43,40,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,23,28,26,21,18,29,21,20],
[27,0,23,22,21,25,21,21,25,24],
[28,28,0,27,22,23,29,28,29,24],
[23,29,24,0,27,26,19,23,24,23],
[25,30,29,24,0,25,23,20,26,24],
[30,26,28,25,26,0,21,20,22,26],
[33,30,22,32,28,30,0,30,31,27],
[22,30,23,28,31,31,21,0,26,30],
[30,26,22,27,25,29,20,25,0,23],
[31,27,27,28,27,25,24,21,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,29,32,32,39,27,27,23,33],
[21,0,17,18,20,31,18,13,25,22],
[22,34,0,29,34,36,27,26,29,40],
[19,33,22,0,17,35,16,20,24,28],
[19,31,17,34,0,35,16,24,28,28],
[12,20,15,16,16,0,7,17,18,15],
[24,33,24,35,35,44,0,30,28,32],
[24,38,25,31,27,34,21,0,30,35],
[28,26,22,27,23,33,23,21,0,30],
[18,29,11,23,23,36,19,16,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,18,27,31,16,16,21,23,19],
[33,0,31,30,34,29,29,21,28,18],
[33,20,0,29,34,25,29,26,29,21],
[24,21,22,0,32,22,24,24,20,21],
[20,17,17,19,0,17,21,16,18,11],
[35,22,26,29,34,0,39,21,31,28],
[35,22,22,27,30,12,0,26,36,16],
[30,30,25,27,35,30,25,0,28,24],
[28,23,22,31,33,20,15,23,0,21],
[32,33,30,30,40,23,35,27,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,24,27,36,18,17,29,19,21],
[19,0,19,30,38,23,22,32,21,19],
[27,32,0,27,35,23,25,30,29,26],
[24,21,24,0,21,18,26,20,21,16],
[15,13,16,30,0,13,17,22,18,16],
[33,28,28,33,38,0,21,27,34,29],
[34,29,26,25,34,30,0,26,26,24],
[22,19,21,31,29,24,25,0,23,18],
[32,30,22,30,33,17,25,28,0,24],
[30,32,25,35,35,22,27,33,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,22,29,29,29,25,21,24,22],
[17,0,24,21,29,21,21,19,21,18],
[29,27,0,28,25,22,20,28,23,23],
[22,30,23,0,26,26,23,17,22,27],
[22,22,26,25,0,21,21,19,21,24],
[22,30,29,25,30,0,27,21,27,26],
[26,30,31,28,30,24,0,23,23,28],
[30,32,23,34,32,30,28,0,30,34],
[27,30,28,29,30,24,28,21,0,30],
[29,33,28,24,27,25,23,17,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,16,12,36,23,19,16,13,30],
[30,0,27,14,34,38,32,24,19,40],
[35,24,0,17,34,30,27,16,8,32],
[39,37,34,0,39,35,32,23,26,39],
[15,17,17,12,0,23,16,16,21,27],
[28,13,21,16,28,0,23,14,17,21],
[32,19,24,19,35,28,0,24,20,31],
[35,27,35,28,35,37,27,0,25,30],
[38,32,43,25,30,34,31,26,0,33],
[21,11,19,12,24,30,20,21,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,19,15,22,24,26,22,23,17],
[30,0,23,15,22,19,23,28,25,21],
[32,28,0,24,22,30,28,28,27,20],
[36,36,27,0,28,31,27,32,20,23],
[29,29,29,23,0,28,30,37,22,21],
[27,32,21,20,23,0,31,31,27,18],
[25,28,23,24,21,20,0,26,27,26],
[29,23,23,19,14,20,25,0,23,11],
[28,26,24,31,29,24,24,28,0,20],
[34,30,31,28,30,33,25,40,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,26,19,30,21,23,32,19],
[24,0,21,23,23,26,25,26,24,21],
[24,30,0,26,23,34,27,27,33,26],
[25,28,25,0,22,32,26,32,30,21],
[32,28,28,29,0,32,27,30,29,19],
[21,25,17,19,19,0,25,23,26,19],
[30,26,24,25,24,26,0,26,32,28],
[28,25,24,19,21,28,25,0,26,19],
[19,27,18,21,22,25,19,25,0,17],
[32,30,25,30,32,32,23,32,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,22,13,13,19,10,13,31,25],
[31,0,27,13,23,28,23,20,29,21],
[29,24,0,19,28,33,25,23,34,24],
[38,38,32,0,35,36,33,27,41,24],
[38,28,23,16,0,34,24,32,34,18],
[32,23,18,15,17,0,10,15,32,26],
[41,28,26,18,27,41,0,25,36,34],
[38,31,28,24,19,36,26,0,31,25],
[20,22,17,10,17,19,15,20,0,18],
[26,30,27,27,33,25,17,26,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,27,33,19,19,21,19,27,21],
[23,0,28,28,26,21,22,26,27,26],
[24,23,0,19,17,21,29,18,23,24],
[18,23,32,0,28,23,33,24,31,23],
[32,25,34,23,0,22,33,27,31,23],
[32,30,30,28,29,0,42,24,20,27],
[30,29,22,18,18,9,0,23,23,14],
[32,25,33,27,24,27,28,0,32,23],
[24,24,28,20,20,31,28,19,0,24],
[30,25,27,28,28,24,37,28,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,29,21,30,24,19,26,28,26],
[24,0,24,21,27,28,23,24,25,23],
[22,27,0,20,31,31,27,27,30,26],
[30,30,31,0,33,30,24,28,30,29],
[21,24,20,18,0,28,19,19,25,21],
[27,23,20,21,23,0,24,25,24,21],
[32,28,24,27,32,27,0,30,32,29],
[25,27,24,23,32,26,21,0,24,29],
[23,26,21,21,26,27,19,27,0,26],
[25,28,25,22,30,30,22,22,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,23,29,25,24,27,24,27,21],
[24,0,22,24,28,19,25,23,30,25],
[28,29,0,28,32,26,32,28,24,27],
[22,27,23,0,28,25,26,24,23,24],
[26,23,19,23,0,23,24,15,21,18],
[27,32,25,26,28,0,28,26,25,24],
[24,26,19,25,27,23,0,18,21,18],
[27,28,23,27,36,25,33,0,27,25],
[24,21,27,28,30,26,30,24,0,22],
[30,26,24,27,33,27,33,26,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,23,27,26,26,21,24,18,23],
[29,0,29,28,28,27,26,24,26,30],
[28,22,0,29,27,24,26,26,23,22],
[24,23,22,0,24,22,23,22,18,24],
[25,23,24,27,0,26,18,25,20,20],
[25,24,27,29,25,0,27,26,19,24],
[30,25,25,28,33,24,0,26,22,22],
[27,27,25,29,26,25,25,0,25,24],
[33,25,28,33,31,32,29,26,0,27],
[28,21,29,27,31,27,29,27,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,25,30,24,16,35,30,30,27],
[29,0,17,27,19,19,24,36,27,25],
[26,34,0,44,23,27,34,40,39,38],
[21,24,7,0,17,14,28,34,18,23],
[27,32,28,34,0,22,29,32,39,32],
[35,32,24,37,29,0,41,35,42,31],
[16,27,17,23,22,10,0,20,25,31],
[21,15,11,17,19,16,31,0,22,14],
[21,24,12,33,12,9,26,29,0,23],
[24,26,13,28,19,20,20,37,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,26,39,27,25,27,25,14,13],
[26,0,38,26,26,12,26,24,26,12],
[25,13,0,25,25,25,25,13,25,25],
[12,25,26,0,27,13,27,12,26,13],
[24,25,26,24,0,37,25,12,24,37],
[26,39,26,38,14,0,14,26,26,0],
[24,25,26,24,26,37,0,12,38,12],
[26,27,38,39,39,25,39,0,26,25],
[37,25,26,25,27,25,13,25,0,25],
[38,39,26,38,14,51,39,26,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,31,26,22,19,27,19,34,26],
[21,0,22,20,21,15,17,16,25,21],
[20,29,0,22,26,19,26,18,32,27],
[25,31,29,0,33,24,37,28,22,22],
[29,30,25,18,0,33,26,26,23,30],
[32,36,32,27,18,0,35,24,34,26],
[24,34,25,14,25,16,0,20,33,24],
[32,35,33,23,25,27,31,0,29,27],
[17,26,19,29,28,17,18,22,0,25],
[25,30,24,29,21,25,27,24,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,20,21,24,17,18,20,30,25],
[21,0,21,13,15,12,23,19,26,17],
[31,30,0,34,26,26,31,25,36,28],
[30,38,17,0,25,19,29,23,34,23],
[27,36,25,26,0,24,25,24,30,19],
[34,39,25,32,27,0,31,28,36,26],
[33,28,20,22,26,20,0,22,37,21],
[31,32,26,28,27,23,29,0,23,21],
[21,25,15,17,21,15,14,28,0,25],
[26,34,23,28,32,25,30,30,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,29,27,22,28,29,28,25,28],
[18,0,20,20,20,22,22,19,24,24],
[22,31,0,23,25,23,27,23,27,30],
[24,31,28,0,31,24,27,28,29,33],
[29,31,26,20,0,24,32,25,27,29],
[23,29,28,27,27,0,26,25,29,31],
[22,29,24,24,19,25,0,27,26,24],
[23,32,28,23,26,26,24,0,29,28],
[26,27,24,22,24,22,25,22,0,27],
[23,27,21,18,22,20,27,23,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,18,34,18,16,18,34,34,34],
[35,0,18,18,18,18,18,34,18,18],
[33,33,0,16,17,16,34,33,34,16],
[17,33,35,0,17,33,35,33,35,16],
[33,33,34,34,0,16,34,34,34,34],
[35,33,35,18,35,0,18,51,18,18],
[33,33,17,16,17,33,0,33,16,16],
[17,17,18,18,17,0,18,0,18,18],
[17,33,17,16,17,33,35,33,0,16],
[17,33,35,35,17,33,35,33,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,26,0,17,27,20,28,25,17],
[34,0,34,14,32,21,21,29,32,13],
[25,17,0,20,24,27,20,27,24,24],
[51,37,31,0,39,27,32,39,37,25],
[34,19,27,12,0,21,21,28,33,21],
[24,30,24,24,30,0,25,37,23,18],
[31,30,31,19,30,26,0,31,37,30],
[23,22,24,12,23,14,20,0,30,17],
[26,19,27,14,18,28,14,21,0,14],
[34,38,27,26,30,33,21,34,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,29,24,26,21,32,21,28,25],
[27,0,39,23,31,28,35,22,28,33],
[22,12,0,17,16,16,28,19,15,19],
[27,28,34,0,23,19,31,22,21,22],
[25,20,35,28,0,26,28,30,31,26],
[30,23,35,32,25,0,36,25,27,26],
[19,16,23,20,23,15,0,18,17,18],
[30,29,32,29,21,26,33,0,30,23],
[23,23,36,30,20,24,34,21,0,22],
[26,18,32,29,25,25,33,28,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,20,20,23,25,21,23,30,26],
[29,0,21,21,30,38,36,23,35,17],
[31,30,0,27,20,31,33,20,28,29],
[31,30,24,0,29,34,42,30,39,27],
[28,21,31,22,0,36,28,21,34,27],
[26,13,20,17,15,0,17,16,24,13],
[30,15,18,9,23,34,0,24,28,28],
[28,28,31,21,30,35,27,0,30,23],
[21,16,23,12,17,27,23,21,0,13],
[25,34,22,24,24,38,23,28,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,20,10,31,20,20,10,21,31],
[20,0,10,20,20,10,20,10,21,31],
[31,41,0,20,31,21,21,31,31,31],
[41,31,31,0,41,31,31,21,31,31],
[20,31,20,10,0,20,20,20,21,31],
[31,41,30,20,31,0,31,41,31,31],
[31,31,30,20,31,20,0,10,21,31],
[41,41,20,30,31,10,41,0,31,31],
[30,30,20,20,30,20,30,20,0,41],
[20,20,20,20,20,20,20,20,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,26,28,27,28,32,32,23,32],
[27,0,17,30,24,19,22,23,18,28],
[25,34,0,31,37,21,28,29,27,37],
[23,21,20,0,22,23,27,19,22,26],
[24,27,14,29,0,16,23,30,20,29],
[23,32,30,28,35,0,30,23,26,27],
[19,29,23,24,28,21,0,23,18,26],
[19,28,22,32,21,28,28,0,14,37],
[28,33,24,29,31,25,33,37,0,37],
[19,23,14,25,22,24,25,14,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,18,24,24,23,25,27,34,25],
[20,0,19,25,27,30,20,24,18,19],
[33,32,0,20,24,25,24,27,29,16],
[27,26,31,0,32,30,38,38,32,23],
[27,24,27,19,0,20,20,23,31,14],
[28,21,26,21,31,0,22,30,29,18],
[26,31,27,13,31,29,0,33,38,28],
[24,27,24,13,28,21,18,0,22,20],
[17,33,22,19,20,22,13,29,0,29],
[26,32,35,28,37,33,23,31,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,21,23,31,19,18,27,26,24],
[32,0,30,28,32,29,27,31,33,24],
[30,21,0,34,30,30,22,28,33,27],
[28,23,17,0,29,25,20,23,29,24],
[20,19,21,22,0,21,21,24,23,22],
[32,22,21,26,30,0,21,30,29,27],
[33,24,29,31,30,30,0,31,33,30],
[24,20,23,28,27,21,20,0,27,18],
[25,18,18,22,28,22,18,24,0,20],
[27,27,24,27,29,24,21,33,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,28,30,17,24,29,23,23,29],
[30,0,28,26,21,24,27,25,28,23],
[23,23,0,21,26,19,14,21,22,23],
[21,25,30,0,19,19,27,20,20,23],
[34,30,25,32,0,24,25,27,25,24],
[27,27,32,32,27,0,31,25,27,24],
[22,24,37,24,26,20,0,25,25,19],
[28,26,30,31,24,26,26,0,28,23],
[28,23,29,31,26,24,26,23,0,23],
[22,28,28,28,27,27,32,28,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,25,25,30,15,27,24,27,22],
[28,0,23,27,29,19,28,27,20,19],
[26,28,0,26,28,19,26,23,31,19],
[26,24,25,0,29,21,30,24,26,22],
[21,22,23,22,0,20,27,21,18,19],
[36,32,32,30,31,0,31,25,31,29],
[24,23,25,21,24,20,0,20,27,22],
[27,24,28,27,30,26,31,0,31,26],
[24,31,20,25,33,20,24,20,0,23],
[29,32,32,29,32,22,29,25,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,24,31,27,22,27,30,29,31],
[25,0,30,26,27,20,31,30,24,22],
[27,21,0,23,20,26,27,29,23,25],
[20,25,28,0,25,25,25,25,26,22],
[24,24,31,26,0,28,21,30,29,21],
[29,31,25,26,23,0,24,30,24,23],
[24,20,24,26,30,27,0,26,24,25],
[21,21,22,26,21,21,25,0,23,25],
[22,27,28,25,22,27,27,28,0,31],
[20,29,26,29,30,28,26,26,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,20,25,9,25,20,28,9,17],
[42,0,27,36,35,25,27,34,27,28],
[31,24,0,24,24,25,26,34,15,24],
[26,15,27,0,35,24,18,34,27,26],
[42,16,27,16,0,25,34,42,11,27],
[26,26,26,27,26,0,18,34,26,26],
[31,24,25,33,17,33,0,24,17,24],
[23,17,17,17,9,17,27,0,9,17],
[42,24,36,24,40,25,34,42,0,35],
[34,23,27,25,24,25,27,34,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,31,18,21,25,25,22,17,25],
[24,0,24,24,22,31,25,18,21,26],
[20,27,0,27,19,25,19,22,23,23],
[33,27,24,0,22,26,26,27,26,27],
[30,29,32,29,0,30,26,27,24,28],
[26,20,26,25,21,0,26,27,20,24],
[26,26,32,25,25,25,0,25,27,28],
[29,33,29,24,24,24,26,0,19,25],
[34,30,28,25,27,31,24,32,0,31],
[26,25,28,24,23,27,23,26,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,22,20,21,29,24,22,26,27],
[18,0,20,19,17,20,17,19,12,22],
[29,31,0,20,26,26,23,27,26,28],
[31,32,31,0,25,24,27,26,23,33],
[30,34,25,26,0,27,29,30,23,33],
[22,31,25,27,24,0,17,21,22,24],
[27,34,28,24,22,34,0,29,29,33],
[29,32,24,25,21,30,22,0,22,28],
[25,39,25,28,28,29,22,29,0,34],
[24,29,23,18,18,27,18,23,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,18,28,27,26,28,27,27,26],
[26,0,22,19,23,23,23,24,21,25],
[33,29,0,30,29,26,29,23,23,28],
[23,32,21,0,25,24,30,23,22,30],
[24,28,22,26,0,26,28,27,26,29],
[25,28,25,27,25,0,26,27,20,27],
[23,28,22,21,23,25,0,23,20,20],
[24,27,28,28,24,24,28,0,21,31],
[24,30,28,29,25,31,31,30,0,31],
[25,26,23,21,22,24,31,20,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,39,27,25,37,27,37,39,39],
[24,0,26,51,25,37,51,37,39,39],
[12,25,0,25,13,25,39,25,39,39],
[24,0,26,0,25,37,27,37,39,26],
[26,26,38,26,0,25,39,39,39,38],
[14,14,26,14,26,0,14,51,39,26],
[24,0,12,24,12,37,0,37,39,26],
[14,14,26,14,12,0,14,0,39,26],
[12,12,12,12,12,12,12,12,0,12],
[12,12,12,25,13,25,25,25,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,26,21,34,25,20,36,31,27],
[13,0,23,20,27,25,20,30,28,24],
[25,28,0,21,21,22,23,27,25,19],
[30,31,30,0,28,24,26,33,36,30],
[17,24,30,23,0,22,18,25,32,20],
[26,26,29,27,29,0,30,32,28,23],
[31,31,28,25,33,21,0,31,32,30],
[15,21,24,18,26,19,20,0,26,24],
[20,23,26,15,19,23,19,25,0,17],
[24,27,32,21,31,28,21,27,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,18,22,12,26,40,20,13,36],
[33,0,18,23,17,18,37,19,23,23],
[33,33,0,33,26,25,33,25,23,31],
[29,28,18,0,17,18,37,38,18,37],
[39,34,25,34,0,35,34,30,35,24],
[25,33,26,33,16,0,37,29,17,32],
[11,14,18,14,17,14,0,15,9,18],
[31,32,26,13,21,22,36,0,27,26],
[38,28,28,33,16,34,42,24,0,32],
[15,28,20,14,27,19,33,25,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,26,24,28,24,28,22,20,21],
[27,0,24,22,29,25,25,25,23,21],
[25,27,0,25,24,25,26,26,24,26],
[27,29,26,0,32,29,24,24,26,24],
[23,22,27,19,0,23,23,19,22,21],
[27,26,26,22,28,0,23,25,23,24],
[23,26,25,27,28,28,0,21,25,23],
[29,26,25,27,32,26,30,0,23,28],
[31,28,27,25,29,28,26,28,0,24],
[30,30,25,27,30,27,28,23,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,34,26,30,30,27,27,29,25],
[24,0,32,25,27,28,27,28,29,30],
[17,19,0,22,25,23,19,20,23,27],
[25,26,29,0,31,27,26,27,28,24],
[21,24,26,20,0,27,24,20,32,23],
[21,23,28,24,24,0,26,24,28,26],
[24,24,32,25,27,25,0,20,19,20],
[24,23,31,24,31,27,31,0,29,30],
[22,22,28,23,19,23,32,22,0,24],
[26,21,24,27,28,25,31,21,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,33,35,26,35,34,22,27,35],
[30,0,38,40,21,48,40,33,39,48],
[18,13,0,22,22,27,27,19,30,36],
[16,11,29,0,25,29,16,21,21,22],
[25,30,29,26,0,37,26,30,28,29],
[16,3,24,22,14,0,24,11,26,22],
[17,11,24,35,25,27,0,18,30,36],
[29,18,32,30,21,40,33,0,35,30],
[24,12,21,30,23,25,21,16,0,26],
[16,3,15,29,22,29,15,21,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,20,18,24,19,17,17,13,19],
[36,0,19,26,26,19,29,25,17,25],
[31,32,0,25,33,28,25,24,26,28],
[33,25,26,0,33,22,27,27,20,19],
[27,25,18,18,0,22,20,23,28,22],
[32,32,23,29,29,0,24,30,24,28],
[34,22,26,24,31,27,0,28,20,28],
[34,26,27,24,28,21,23,0,23,28],
[38,34,25,31,23,27,31,28,0,34],
[32,26,23,32,29,23,23,23,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,34,27,25,24,37,25,28,31],
[21,0,26,23,27,26,31,28,31,24],
[17,25,0,18,19,20,31,19,27,22],
[24,28,33,0,21,17,23,22,24,26],
[26,24,32,30,0,24,36,15,27,22],
[27,25,31,34,27,0,36,21,27,25],
[14,20,20,28,15,15,0,15,25,18],
[26,23,32,29,36,30,36,0,29,30],
[23,20,24,27,24,24,26,22,0,25],
[20,27,29,25,29,26,33,21,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,26,33,23,18,23,22,27,22],
[20,0,22,35,21,18,18,21,24,20],
[25,29,0,37,34,26,28,21,33,24],
[18,16,14,0,18,11,15,11,22,13],
[28,30,17,33,0,23,30,37,37,26],
[33,33,25,40,28,0,30,25,31,18],
[28,33,23,36,21,21,0,23,29,28],
[29,30,30,40,14,26,28,0,30,26],
[24,27,18,29,14,20,22,21,0,13],
[29,31,27,38,25,33,23,25,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,42,42,28,40,38,37,33,29],
[27,0,31,19,18,32,24,24,21,27],
[9,20,0,16,10,20,14,17,23,15],
[9,32,35,0,24,34,26,33,29,27],
[23,33,41,27,0,25,25,33,32,20],
[11,19,31,17,26,0,24,32,30,18],
[13,27,37,25,26,27,0,27,34,16],
[14,27,34,18,18,19,24,0,34,24],
[18,30,28,22,19,21,17,17,0,20],
[22,24,36,24,31,33,35,27,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,34,24,23,33,29,27,33,29],
[20,0,22,16,18,25,25,19,24,20],
[17,29,0,18,14,25,21,26,26,20],
[27,35,33,0,27,27,32,21,33,24],
[28,33,37,24,0,29,31,26,29,28],
[18,26,26,24,22,0,30,22,26,22],
[22,26,30,19,20,21,0,23,26,23],
[24,32,25,30,25,29,28,0,30,25],
[18,27,25,18,22,25,25,21,0,18],
[22,31,31,27,23,29,28,26,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,19,10,17,18,17,18,16,14],
[28,0,29,23,35,24,30,28,21,20],
[32,22,0,15,29,27,30,30,34,19],
[41,28,36,0,37,37,31,25,38,42],
[34,16,22,14,0,27,16,20,20,27],
[33,27,24,14,24,0,20,29,28,18],
[34,21,21,20,35,31,0,23,27,20],
[33,23,21,26,31,22,28,0,27,23],
[35,30,17,13,31,23,24,24,0,18],
[37,31,32,9,24,33,31,28,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,28,29,25,30,19,31,29,25],
[22,0,28,31,25,28,24,33,32,25],
[23,23,0,22,25,22,21,25,31,22],
[22,20,29,0,23,26,18,26,25,17],
[26,26,26,28,0,28,27,35,30,24],
[21,23,29,25,23,0,22,36,27,18],
[32,27,30,33,24,29,0,34,35,27],
[20,18,26,25,16,15,17,0,26,18],
[22,19,20,26,21,24,16,25,0,20],
[26,26,29,34,27,33,24,33,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,27,36,34,24,41,29,27,29],
[19,0,17,24,29,17,24,29,27,27],
[24,34,0,36,39,29,41,34,39,34],
[15,27,15,0,15,22,31,17,20,15],
[17,22,12,36,0,22,26,17,15,27],
[27,34,22,29,29,0,24,24,34,29],
[10,27,10,20,25,27,0,27,15,25],
[22,22,17,34,34,27,24,0,27,29],
[24,24,12,31,36,17,36,24,0,36],
[22,24,17,36,24,22,26,22,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,32,25,26,22,24,23,29,24],
[26,0,25,24,24,25,21,24,22,19],
[19,26,0,27,25,29,27,25,23,27],
[26,27,24,0,21,22,21,25,27,23],
[25,27,26,30,0,28,28,25,25,27],
[29,26,22,29,23,0,23,28,27,27],
[27,30,24,30,23,28,0,30,30,24],
[28,27,26,26,26,23,21,0,27,27],
[22,29,28,24,26,24,21,24,0,23],
[27,32,24,28,24,24,27,24,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,28,25,17,21,16,21,20,33],
[29,0,27,25,28,21,17,30,25,39],
[23,24,0,22,17,19,27,26,18,33],
[26,26,29,0,23,22,23,31,25,31],
[34,23,34,28,0,29,32,34,30,38],
[30,30,32,29,22,0,19,34,24,39],
[35,34,24,28,19,32,0,30,23,36],
[30,21,25,20,17,17,21,0,19,26],
[31,26,33,26,21,27,28,32,0,35],
[18,12,18,20,13,12,15,25,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,25,29,26,28,18,27,26,24],
[23,0,23,34,27,27,26,23,29,27],
[26,28,0,29,21,26,24,21,29,30],
[22,17,22,0,20,27,17,19,23,19],
[25,24,30,31,0,31,20,25,25,28],
[23,24,25,24,20,0,22,23,24,25],
[33,25,27,34,31,29,0,29,30,29],
[24,28,30,32,26,28,22,0,30,26],
[25,22,22,28,26,27,21,21,0,20],
[27,24,21,32,23,26,22,25,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,24,20,24,23,28,21,23,24],
[22,0,24,24,28,25,31,24,29,21],
[27,27,0,25,29,25,28,25,26,30],
[31,27,26,0,23,21,29,23,18,27],
[27,23,22,28,0,21,32,20,20,23],
[28,26,26,30,30,0,33,25,29,29],
[23,20,23,22,19,18,0,21,19,23],
[30,27,26,28,31,26,30,0,22,27],
[28,22,25,33,31,22,32,29,0,31],
[27,30,21,24,28,22,28,24,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,22,25,29,24,25,23,27],
[26,0,28,26,22,25,23,23,20,26],
[26,23,0,27,28,24,21,24,27,25],
[29,25,24,0,30,31,22,26,26,29],
[26,29,23,21,0,24,24,19,22,25],
[22,26,27,20,27,0,26,26,25,24],
[27,28,30,29,27,25,0,28,28,34],
[26,28,27,25,32,25,23,0,28,25],
[28,31,24,25,29,26,23,23,0,26],
[24,25,26,22,26,27,17,26,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,28,14,36,29,20,24,28],
[27,0,23,29,36,44,21,27,29,28],
[27,28,0,20,29,44,12,28,22,21],
[23,22,31,0,21,51,27,20,24,43],
[37,15,22,30,0,44,20,22,31,27],
[15,7,7,0,7,0,19,15,15,12],
[22,30,39,24,31,32,0,30,39,36],
[31,24,23,31,29,36,21,0,24,28],
[27,22,29,27,20,36,12,27,0,19],
[23,23,30,8,24,39,15,23,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,25,29,26,23,23,26,26],
[25,0,24,22,26,22,26,23,26,25],
[25,27,0,22,25,22,27,23,26,22],
[26,29,29,0,24,24,30,27,26,24],
[22,25,26,27,0,26,25,26,27,28],
[25,29,29,27,25,0,32,28,29,28],
[28,25,24,21,26,19,0,24,27,25],
[28,28,28,24,25,23,27,0,28,27],
[25,25,25,25,24,22,24,23,0,27],
[25,26,29,27,23,23,26,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,31,32,27,26,35,44,29,21],
[18,0,17,22,19,27,23,36,8,21],
[20,34,0,31,23,31,30,31,27,27],
[19,29,20,0,23,22,25,30,17,25],
[24,32,28,28,0,32,27,32,17,31],
[25,24,20,29,19,0,23,39,14,23],
[16,28,21,26,24,28,0,43,17,19],
[7,15,20,21,19,12,8,0,15,12],
[22,43,24,34,34,37,34,36,0,29],
[30,30,24,26,20,28,32,39,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,28,31,32,21,28,31,30,26],
[22,0,22,22,26,20,22,24,24,19],
[23,29,0,25,25,22,24,25,23,21],
[20,29,26,0,23,23,21,22,27,16],
[19,25,26,28,0,21,25,20,26,21],
[30,31,29,28,30,0,31,23,31,24],
[23,29,27,30,26,20,0,27,27,17],
[20,27,26,29,31,28,24,0,31,20],
[21,27,28,24,25,20,24,20,0,20],
[25,32,30,35,30,27,34,31,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,24,20,30,25,23,17,15,27],
[25,0,23,22,40,27,27,22,26,33],
[27,28,0,24,34,37,28,27,20,34],
[31,29,27,0,38,29,28,25,26,27],
[21,11,17,13,0,21,26,11,8,17],
[26,24,14,22,30,0,29,20,12,25],
[28,24,23,23,25,22,0,21,15,25],
[34,29,24,26,40,31,30,0,26,36],
[36,25,31,25,43,39,36,25,0,32],
[24,18,17,24,34,26,26,15,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,21,24,24,16,27,22,33,25],
[27,0,31,24,27,25,26,24,35,25],
[30,20,0,23,23,16,21,22,30,26],
[27,27,28,0,27,29,25,30,30,26],
[27,24,28,24,0,18,21,19,32,27],
[35,26,35,22,33,0,23,29,33,33],
[24,25,30,26,30,28,0,31,31,29],
[29,27,29,21,32,22,20,0,32,25],
[18,16,21,21,19,18,20,19,0,19],
[26,26,25,25,24,18,22,26,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,23,23,24,29,21,30,24,26],
[26,0,33,23,19,25,23,29,24,26],
[28,18,0,24,18,26,26,22,18,21],
[28,28,27,0,23,30,23,28,24,23],
[27,32,33,28,0,28,32,32,33,24],
[22,26,25,21,23,0,22,28,23,23],
[30,28,25,28,19,29,0,30,24,29],
[21,22,29,23,19,23,21,0,23,25],
[27,27,33,27,18,28,27,28,0,28],
[25,25,30,28,27,28,22,26,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,24,27,31,25,25,23,31,31],
[23,0,22,27,20,22,22,25,25,26],
[27,29,0,30,24,29,28,26,28,26],
[24,24,21,0,27,27,27,22,29,27],
[20,31,27,24,0,30,25,25,27,31],
[26,29,22,24,21,0,24,27,27,24],
[26,29,23,24,26,27,0,26,26,22],
[28,26,25,29,26,24,25,0,30,26],
[20,26,23,22,24,24,25,21,0,28],
[20,25,25,24,20,27,29,25,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,20,24,24,26,22,25,23,21],
[22,0,19,27,30,25,23,21,22,22],
[31,32,0,29,27,32,27,23,26,29],
[27,24,22,0,25,31,22,23,20,20],
[27,21,24,26,0,28,21,24,23,20],
[25,26,19,20,23,0,17,22,17,22],
[29,28,24,29,30,34,0,26,21,27],
[26,30,28,28,27,29,25,0,28,29],
[28,29,25,31,28,34,30,23,0,25],
[30,29,22,31,31,29,24,22,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,29,27,33,32,22,16,32,26],
[25,0,39,30,31,34,28,22,33,32],
[22,12,0,26,25,24,16,15,23,26],
[24,21,25,0,36,23,14,17,34,30],
[18,20,26,15,0,21,15,11,33,31],
[19,17,27,28,30,0,24,14,35,28],
[29,23,35,37,36,27,0,30,28,30],
[35,29,36,34,40,37,21,0,33,35],
[19,18,28,17,18,16,23,18,0,27],
[25,19,25,21,20,23,21,16,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,40,30,29,20,40,34,16,31],
[23,0,30,19,27,17,27,30,13,20],
[11,21,0,15,9,9,13,20,17,16],
[21,32,36,0,20,13,31,25,20,26],
[22,24,42,31,0,20,32,29,16,27],
[31,34,42,38,31,0,37,42,30,18],
[11,24,38,20,19,14,0,27,22,27],
[17,21,31,26,22,9,24,0,19,18],
[35,38,34,31,35,21,29,32,0,35],
[20,31,35,25,24,33,24,33,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,24,23,26,30,26,29,25,31],
[24,0,29,25,30,28,26,28,24,28],
[27,22,0,27,28,29,29,36,29,27],
[28,26,24,0,26,25,25,29,28,26],
[25,21,23,25,0,29,28,27,24,26],
[21,23,22,26,22,0,20,25,27,26],
[25,25,22,26,23,31,0,27,29,29],
[22,23,15,22,24,26,24,0,27,24],
[26,27,22,23,27,24,22,24,0,27],
[20,23,24,25,25,25,22,27,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,26,27,23,23,24,25,23,24],
[27,0,29,30,25,29,27,27,26,22],
[25,22,0,24,23,26,19,22,24,18],
[24,21,27,0,25,26,24,25,22,20],
[28,26,28,26,0,29,27,27,21,21],
[28,22,25,25,22,0,22,22,19,22],
[27,24,32,27,24,29,0,31,22,28],
[26,24,29,26,24,29,20,0,20,26],
[28,25,27,29,30,32,29,31,0,27],
[27,29,33,31,30,29,23,25,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,18,23,23,14,14,27,20,23],
[37,0,27,25,28,20,20,31,29,31],
[33,24,0,20,23,12,19,26,19,27],
[28,26,31,0,29,24,24,32,29,31],
[28,23,28,22,0,14,22,29,20,31],
[37,31,39,27,37,0,25,37,28,36],
[37,31,32,27,29,26,0,34,22,29],
[24,20,25,19,22,14,17,0,19,21],
[31,22,32,22,31,23,29,32,0,34],
[28,20,24,20,20,15,22,30,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,31,31,32,25,28,30,30,29],
[25,0,28,29,27,34,22,31,28,28],
[20,23,0,29,26,22,20,29,22,26],
[20,22,22,0,29,20,27,21,24,21],
[19,24,25,22,0,28,20,28,27,25],
[26,17,29,31,23,0,23,27,23,29],
[23,29,31,24,31,28,0,28,27,23],
[21,20,22,30,23,24,23,0,20,20],
[21,23,29,27,24,28,24,31,0,23],
[22,23,25,30,26,22,28,31,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,31,27,21,26,27,25,32,26],
[34,0,32,24,23,28,28,26,37,26],
[20,19,0,23,23,22,24,22,35,28],
[24,27,28,0,21,26,30,25,38,29],
[30,28,28,30,0,24,22,27,35,26],
[25,23,29,25,27,0,27,27,34,33],
[24,23,27,21,29,24,0,27,28,25],
[26,25,29,26,24,24,24,0,35,25],
[19,14,16,13,16,17,23,16,0,16],
[25,25,23,22,25,18,26,26,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,22,30,24,27,35,31,33,33],
[23,0,30,29,28,36,37,33,39,32],
[29,21,0,24,24,26,30,30,28,27],
[21,22,27,0,21,28,30,23,30,26],
[27,23,27,30,0,32,31,27,33,37],
[24,15,25,23,19,0,26,28,29,23],
[16,14,21,21,20,25,0,16,27,23],
[20,18,21,28,24,23,35,0,29,28],
[18,12,23,21,18,22,24,22,0,21],
[18,19,24,25,14,28,28,23,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,27,32,28,24,26,26,28,32],
[26,0,30,29,28,27,23,26,31,36],
[24,21,0,23,22,23,21,19,26,27],
[19,22,28,0,23,21,20,20,23,34],
[23,23,29,28,0,21,26,25,27,31],
[27,24,28,30,30,0,33,25,30,34],
[25,28,30,31,25,18,0,24,32,32],
[25,25,32,31,26,26,27,0,31,36],
[23,20,25,28,24,21,19,20,0,27],
[19,15,24,17,20,17,19,15,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,24,22,22,22,22,23,27,22],
[29,0,24,23,18,22,22,23,29,29],
[27,27,0,21,32,27,26,29,32,16],
[29,28,30,0,23,28,27,29,22,22],
[29,33,19,28,0,27,26,23,27,22],
[29,29,24,23,24,0,22,25,29,29],
[29,29,25,24,25,29,0,36,23,29],
[28,28,22,22,28,26,15,0,22,28],
[24,22,19,29,24,22,28,29,0,23],
[29,22,35,29,29,22,22,23,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,22,34,17,22,20,14,15,17],
[10,0,15,18,8,17,11,6,11,12],
[29,36,0,23,28,26,18,21,25,21],
[17,33,28,0,19,24,21,24,22,19],
[34,43,23,32,0,25,19,18,23,15],
[29,34,25,27,26,0,28,23,17,23],
[31,40,33,30,32,23,0,21,37,30],
[37,45,30,27,33,28,30,0,23,28],
[36,40,26,29,28,34,14,28,0,20],
[34,39,30,32,36,28,21,23,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,25,27,30,26,30,32,27,31],
[25,0,29,26,30,25,27,24,31,31],
[26,22,0,27,29,27,25,25,26,26],
[24,25,24,0,29,29,30,29,27,30],
[21,21,22,22,0,24,23,26,22,27],
[25,26,24,22,27,0,28,24,27,34],
[21,24,26,21,28,23,0,27,29,26],
[19,27,26,22,25,27,24,0,24,27],
[24,20,25,24,29,24,22,27,0,25],
[20,20,25,21,24,17,25,24,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,25,20,32,42,42,30,32,22],
[31,0,27,15,28,32,35,28,34,26],
[26,24,0,21,27,39,32,31,18,36],
[31,36,30,0,30,32,30,25,32,29],
[19,23,24,21,0,33,36,21,31,14],
[9,19,12,19,18,0,17,19,19,21],
[9,16,19,21,15,34,0,24,14,16],
[21,23,20,26,30,32,27,0,22,26],
[19,17,33,19,20,32,37,29,0,24],
[29,25,15,22,37,30,35,25,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,25,32,30,33,31,22,21,32],
[22,0,21,31,21,28,21,25,22,25],
[26,30,0,31,19,28,27,30,17,27],
[19,20,20,0,17,13,24,22,20,24],
[21,30,32,34,0,27,23,28,28,21],
[18,23,23,38,24,0,26,27,19,29],
[20,30,24,27,28,25,0,34,17,26],
[29,26,21,29,23,24,17,0,14,28],
[30,29,34,31,23,32,34,37,0,32],
[19,26,24,27,30,22,25,23,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,34,29,28,25,25,30,28,27],
[19,0,22,27,27,22,26,25,27,25],
[17,29,0,26,25,23,27,30,30,27],
[22,24,25,0,25,20,22,24,31,26],
[23,24,26,26,0,28,22,29,27,25],
[26,29,28,31,23,0,23,30,25,34],
[26,25,24,29,29,28,0,26,30,25],
[21,26,21,27,22,21,25,0,27,24],
[23,24,21,20,24,26,21,24,0,23],
[24,26,24,25,26,17,26,27,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,18,20,26,27,26,20,29,24],
[29,0,22,23,28,32,22,24,25,28],
[33,29,0,24,30,35,28,25,33,28],
[31,28,27,0,32,34,25,28,30,32],
[25,23,21,19,0,28,22,24,23,24],
[24,19,16,17,23,0,20,19,26,26],
[25,29,23,26,29,31,0,23,29,27],
[31,27,26,23,27,32,28,0,31,21],
[22,26,18,21,28,25,22,20,0,19],
[27,23,23,19,27,25,24,30,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,25,24,24,24,23,27,22,22],
[28,0,23,24,28,27,24,27,26,27],
[26,28,0,27,27,29,26,26,28,25],
[27,27,24,0,24,27,27,27,24,22],
[27,23,24,27,0,24,26,28,32,25],
[27,24,22,24,27,0,30,30,27,29],
[28,27,25,24,25,21,0,26,25,26],
[24,24,25,24,23,21,25,0,28,26],
[29,25,23,27,19,24,26,23,0,27],
[29,24,26,29,26,22,25,25,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,21,23,19,19,24,20,15,23],
[32,0,25,34,29,29,32,27,23,31],
[30,26,0,32,24,20,32,27,28,26],
[28,17,19,0,22,26,26,22,20,22],
[32,22,27,29,0,29,32,26,25,35],
[32,22,31,25,22,0,33,21,24,30],
[27,19,19,25,19,18,0,21,24,21],
[31,24,24,29,25,30,30,0,25,27],
[36,28,23,31,26,27,27,26,0,31],
[28,20,25,29,16,21,30,24,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,22,25,29,26,26,26,19],
[26,0,21,25,27,29,26,25,25,23],
[26,30,0,23,26,24,22,27,26,24],
[29,26,28,0,27,30,27,23,30,26],
[26,24,25,24,0,28,26,30,32,29],
[22,22,27,21,23,0,25,23,28,23],
[25,25,29,24,25,26,0,23,33,29],
[25,26,24,28,21,28,28,0,31,26],
[25,26,25,21,19,23,18,20,0,22],
[32,28,27,25,22,28,22,25,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,33,24,22,30,27,24,25,30],
[25,0,28,21,27,27,33,24,31,30],
[18,23,0,14,24,22,18,23,27,28],
[27,30,37,0,33,35,32,23,32,39],
[29,24,27,18,0,27,25,19,26,35],
[21,24,29,16,24,0,23,24,27,28],
[24,18,33,19,26,28,0,28,32,26],
[27,27,28,28,32,27,23,0,31,34],
[26,20,24,19,25,24,19,20,0,28],
[21,21,23,12,16,23,25,17,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,27,19,26,24,12,23,18,12],
[21,0,27,15,20,23,19,11,17,15],
[24,24,0,12,30,23,19,20,15,25],
[32,36,39,0,35,36,30,25,26,26],
[25,31,21,16,0,21,14,21,17,13],
[27,28,28,15,30,0,19,23,18,25],
[39,32,32,21,37,32,0,32,26,26],
[28,40,31,26,30,28,19,0,22,27],
[33,34,36,25,34,33,25,29,0,31],
[39,36,26,25,38,26,25,24,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,29,28,32,28,28,26,27,29],
[26,0,32,30,25,29,28,27,27,27],
[22,19,0,24,21,26,21,29,21,24],
[23,21,27,0,24,23,24,26,22,31],
[19,26,30,27,0,24,27,29,21,27],
[23,22,25,28,27,0,25,26,25,25],
[23,23,30,27,24,26,0,23,23,28],
[25,24,22,25,22,25,28,0,22,29],
[24,24,30,29,30,26,28,29,0,29],
[22,24,27,20,24,26,23,22,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,24,35,36,25,22,25,28,38],
[25,0,29,39,32,34,23,32,34,31],
[27,22,0,29,30,26,21,23,28,27],
[16,12,22,0,21,20,12,18,22,25],
[15,19,21,30,0,21,16,16,23,19],
[26,17,25,31,30,0,20,21,22,30],
[29,28,30,39,35,31,0,26,25,38],
[26,19,28,33,35,30,25,0,33,31],
[23,17,23,29,28,29,26,18,0,22],
[13,20,24,26,32,21,13,20,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,24,21,31,31,31,31,30,35],
[19,0,24,22,27,24,24,28,30,25],
[27,27,0,25,31,24,36,24,23,33],
[30,29,26,0,24,18,28,29,25,32],
[20,24,20,27,0,22,27,23,20,27],
[20,27,27,33,29,0,29,28,31,36],
[20,27,15,23,24,22,0,20,25,20],
[20,23,27,22,28,23,31,0,30,32],
[21,21,28,26,31,20,26,21,0,27],
[16,26,18,19,24,15,31,19,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,23,28,29,25,24,29,27],
[25,0,29,23,28,27,33,28,25,26],
[25,22,0,23,27,19,27,27,23,29],
[28,28,28,0,30,28,33,27,23,32],
[23,23,24,21,0,28,21,23,24,28],
[22,24,32,23,23,0,35,29,23,24],
[26,18,24,18,30,16,0,25,21,27],
[27,23,24,24,28,22,26,0,27,28],
[22,26,28,28,27,28,30,24,0,27],
[24,25,22,19,23,27,24,23,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,20,26,27,23,28,23,23,19],
[35,0,34,28,33,27,35,28,27,25],
[31,17,0,24,25,23,27,28,20,26],
[25,23,27,0,31,23,26,25,22,26],
[24,18,26,20,0,21,28,20,18,22],
[28,24,28,28,30,0,31,27,24,23],
[23,16,24,25,23,20,0,25,21,19],
[28,23,23,26,31,24,26,0,23,25],
[28,24,31,29,33,27,30,28,0,25],
[32,26,25,25,29,28,32,26,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,22,27,32,28,28,23,23,27],
[32,0,20,30,25,33,30,25,28,23],
[29,31,0,30,29,25,30,32,27,27],
[24,21,21,0,27,24,34,26,26,24],
[19,26,22,24,0,29,24,21,19,21],
[23,18,26,27,22,0,27,23,18,19],
[23,21,21,17,27,24,0,26,24,25],
[28,26,19,25,30,28,25,0,28,26],
[28,23,24,25,32,33,27,23,0,25],
[24,28,24,27,30,32,26,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,18,17,27,25,18,25,21,27],
[33,0,22,27,29,35,34,33,33,37],
[33,29,0,40,32,35,22,33,28,31],
[34,24,11,0,31,32,22,27,27,27],
[24,22,19,20,0,29,24,26,28,25],
[26,16,16,19,22,0,21,24,20,20],
[33,17,29,29,27,30,0,28,21,24],
[26,18,18,24,25,27,23,0,25,29],
[30,18,23,24,23,31,30,26,0,25],
[24,14,20,24,26,31,27,22,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,29,26,16,23,29,36,35,27],
[15,0,12,11,19,24,24,24,24,13],
[22,39,0,16,27,32,32,21,26,15],
[25,40,35,0,20,25,28,35,29,31],
[35,32,24,31,0,41,35,30,31,27],
[28,27,19,26,10,0,29,30,29,21],
[22,27,19,23,16,22,0,29,15,25],
[15,27,30,16,21,21,22,0,16,13],
[16,27,25,22,20,22,36,35,0,25],
[24,38,36,20,24,30,26,38,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,27,34,33,28,23,28,28,28],
[22,0,25,28,25,26,20,21,22,22],
[24,26,0,27,29,26,20,23,30,24],
[17,23,24,0,28,25,24,22,31,27],
[18,26,22,23,0,23,23,19,28,23],
[23,25,25,26,28,0,20,23,28,25],
[28,31,31,27,28,31,0,27,33,24],
[23,30,28,29,32,28,24,0,29,24],
[23,29,21,20,23,23,18,22,0,19],
[23,29,27,24,28,26,27,27,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,15,13,20,23,18,20,15,14],
[35,0,24,29,35,26,33,30,31,32],
[36,27,0,23,25,29,27,29,18,24],
[38,22,28,0,26,23,30,24,21,28],
[31,16,26,25,0,24,26,26,18,24],
[28,25,22,28,27,0,30,25,20,24],
[33,18,24,21,25,21,0,28,17,21],
[31,21,22,27,25,26,23,0,24,25],
[36,20,33,30,33,31,34,27,0,31],
[37,19,27,23,27,27,30,26,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,24,19,29,21,25,32,23,27],
[25,0,23,28,22,26,24,33,28,25],
[27,28,0,23,17,23,20,31,22,22],
[32,23,28,0,26,31,30,33,28,32],
[22,29,34,25,0,24,23,29,30,29],
[30,25,28,20,27,0,23,41,26,26],
[26,27,31,21,28,28,0,36,32,35],
[19,18,20,18,22,10,15,0,18,23],
[28,23,29,23,21,25,19,33,0,30],
[24,26,29,19,22,25,16,28,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,31,31,30,31,36,27,24,33],
[23,0,33,31,30,32,28,31,24,29],
[20,18,0,28,18,24,24,18,17,24],
[20,20,23,0,25,28,26,18,22,26],
[21,21,33,26,0,23,23,28,25,33],
[20,19,27,23,28,0,24,28,17,27],
[15,23,27,25,28,27,0,23,19,25],
[24,20,33,33,23,23,28,0,30,23],
[27,27,34,29,26,34,32,21,0,27],
[18,22,27,25,18,24,26,28,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,25,25,23,21,21,26,30,28],
[20,0,28,24,22,22,22,22,26,19],
[26,23,0,27,24,25,21,25,27,22],
[26,27,24,0,28,21,25,24,26,23],
[28,29,27,23,0,21,27,25,28,26],
[30,29,26,30,30,0,25,24,30,27],
[30,29,30,26,24,26,0,32,30,28],
[25,29,26,27,26,27,19,0,30,23],
[21,25,24,25,23,21,21,21,0,24],
[23,32,29,28,25,24,23,28,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,25,27,21,25,31,25,24,26],
[25,0,26,28,24,23,27,22,22,28],
[26,25,0,31,21,28,32,29,28,25],
[24,23,20,0,18,17,26,18,26,16],
[30,27,30,33,0,25,33,32,31,30],
[26,28,23,34,26,0,30,32,27,26],
[20,24,19,25,18,21,0,22,25,24],
[26,29,22,33,19,19,29,0,27,26],
[27,29,23,25,20,24,26,24,0,26],
[25,23,26,35,21,25,27,25,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,22,26,19,17,21,23,22,17],
[24,0,22,31,20,20,22,27,26,15],
[29,29,0,32,22,23,24,34,30,30],
[25,20,19,0,15,18,22,23,29,19],
[32,31,29,36,0,26,28,28,37,23],
[34,31,28,33,25,0,32,31,39,25],
[30,29,27,29,23,19,0,27,29,22],
[28,24,17,28,23,20,24,0,30,21],
[29,25,21,22,14,12,22,21,0,17],
[34,36,21,32,28,26,29,30,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,19,29,29,23,29,26,25,31],
[23,0,25,29,28,26,31,27,28,27],
[32,26,0,31,31,26,24,26,30,28],
[22,22,20,0,27,24,25,20,29,26],
[22,23,20,24,0,23,27,22,30,31],
[28,25,25,27,28,0,27,22,33,23],
[22,20,27,26,24,24,0,23,30,26],
[25,24,25,31,29,29,28,0,33,30],
[26,23,21,22,21,18,21,18,0,26],
[20,24,23,25,20,28,25,21,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,15,26,20,27,21,28,19,21],
[31,0,21,25,21,21,24,25,16,25],
[36,30,0,31,29,31,23,29,28,35],
[25,26,20,0,29,23,19,23,21,24],
[31,30,22,22,0,26,27,25,22,18],
[24,30,20,28,25,0,22,30,25,24],
[30,27,28,32,24,29,0,35,28,27],
[23,26,22,28,26,21,16,0,19,21],
[32,35,23,30,29,26,23,32,0,26],
[30,26,16,27,33,27,24,30,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,0,26,10,27,7,35,17,51],
[41,0,15,43,26,43,33,34,25,41],
[51,36,0,43,19,36,33,44,25,51],
[25,8,8,0,27,27,24,25,17,34],
[41,25,32,24,0,36,24,34,34,41],
[24,8,15,24,15,0,15,17,17,24],
[44,18,18,27,27,36,0,44,27,44],
[16,17,7,26,17,34,7,0,24,51],
[34,26,26,34,17,34,24,27,0,42],
[0,10,0,17,10,27,7,0,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,28,24,24,26,31,24,29,29],
[29,0,28,27,21,28,27,28,22,21],
[23,23,0,31,24,14,24,17,22,17],
[27,24,20,0,21,20,26,22,21,17],
[27,30,27,30,0,21,18,30,26,16],
[25,23,37,31,30,0,22,25,28,25],
[20,24,27,25,33,29,0,32,28,24],
[27,23,34,29,21,26,19,0,26,21],
[22,29,29,30,25,23,23,25,0,21],
[22,30,34,34,35,26,27,30,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,23,23,27,26,19,32,24,30],
[24,0,26,26,25,27,24,34,24,24],
[28,25,0,25,27,32,23,29,27,26],
[28,25,26,0,29,30,26,35,23,27],
[24,26,24,22,0,29,26,34,24,30],
[25,24,19,21,22,0,21,28,22,26],
[32,27,28,25,25,30,0,34,30,32],
[19,17,22,16,17,23,17,0,21,26],
[27,27,24,28,27,29,21,30,0,29],
[21,27,25,24,21,25,19,25,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,24,24,20,22,29,30,23,25],
[22,0,20,24,22,22,27,23,22,23],
[27,31,0,24,25,30,29,28,28,26],
[27,27,27,0,25,25,31,28,30,28],
[31,29,26,26,0,27,27,26,32,25],
[29,29,21,26,24,0,28,25,24,23],
[22,24,22,20,24,23,0,20,27,25],
[21,28,23,23,25,26,31,0,28,29],
[28,29,23,21,19,27,24,23,0,21],
[26,28,25,23,26,28,26,22,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,24,37,20,22,23,36,26,24],
[17,0,19,26,20,18,25,29,21,12],
[27,32,0,34,18,25,24,36,28,26],
[14,25,17,0,17,18,15,26,23,19],
[31,31,33,34,0,19,22,33,31,24],
[29,33,26,33,32,0,25,36,28,24],
[28,26,27,36,29,26,0,34,26,23],
[15,22,15,25,18,15,17,0,18,16],
[25,30,23,28,20,23,25,33,0,19],
[27,39,25,32,27,27,28,35,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,32,23,29,21,20,20,20,30],
[27,0,23,17,28,25,19,21,26,23],
[19,28,0,18,22,20,18,23,17,19],
[28,34,33,0,29,28,22,27,29,30],
[22,23,29,22,0,23,21,19,26,27],
[30,26,31,23,28,0,32,28,21,30],
[31,32,33,29,30,19,0,31,26,24],
[31,30,28,24,32,23,20,0,28,26],
[31,25,34,22,25,30,25,23,0,23],
[21,28,32,21,24,21,27,25,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,26,20,25,19,24,22,21,24],
[38,0,30,26,30,28,31,28,29,23],
[25,21,0,26,26,22,23,21,26,20],
[31,25,25,0,28,26,30,29,27,29],
[26,21,25,23,0,29,25,24,25,22],
[32,23,29,25,22,0,26,31,21,18],
[27,20,28,21,26,25,0,25,24,22],
[29,23,30,22,27,20,26,0,26,22],
[30,22,25,24,26,30,27,25,0,22],
[27,28,31,22,29,33,29,29,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,21,22,25,24,27,26,31,23],
[28,0,22,22,21,27,28,31,29,25],
[30,29,0,20,23,29,27,26,28,22],
[29,29,31,0,26,34,26,27,30,25],
[26,30,28,25,0,33,28,30,35,26],
[27,24,22,17,18,0,23,22,29,20],
[24,23,24,25,23,28,0,22,30,22],
[25,20,25,24,21,29,29,0,28,23],
[20,22,23,21,16,22,21,23,0,24],
[28,26,29,26,25,31,29,28,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,23,20,22,26,26,26,24,26],
[26,0,21,23,26,24,28,27,25,26],
[28,30,0,29,22,28,25,27,25,27],
[31,28,22,0,26,29,29,26,26,31],
[29,25,29,25,0,27,29,26,25,30],
[25,27,23,22,24,0,29,26,27,23],
[25,23,26,22,22,22,0,24,23,28],
[25,24,24,25,25,25,27,0,24,23],
[27,26,26,25,26,24,28,27,0,27],
[25,25,24,20,21,28,23,28,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,35,30,26,14,27,20,24,26],
[12,0,29,19,15,10,17,6,16,18],
[16,22,0,23,15,15,24,18,13,20],
[21,32,28,0,24,23,31,18,23,26],
[25,36,36,27,0,24,25,28,30,37],
[37,41,36,28,27,0,34,22,29,32],
[24,34,27,20,26,17,0,17,19,26],
[31,45,33,33,23,29,34,0,26,28],
[27,35,38,28,21,22,32,25,0,33],
[25,33,31,25,14,19,25,23,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,27,37,23,30,31,35,34,43],
[22,0,17,31,34,25,37,24,32,39],
[24,34,0,36,25,29,33,40,33,38],
[14,20,15,0,18,30,16,26,37,20],
[28,17,26,33,0,21,29,25,33,30],
[21,26,22,21,30,0,22,30,40,28],
[20,14,18,35,22,29,0,33,36,27],
[16,27,11,25,26,21,18,0,22,23],
[17,19,18,14,18,11,15,29,0,14],
[8,12,13,31,21,23,24,28,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,31,22,20,28,26,31,24,24],
[25,0,26,23,22,19,25,32,24,24],
[20,25,0,25,24,25,24,29,22,27],
[29,28,26,0,23,26,27,34,26,32],
[31,29,27,28,0,25,32,36,23,27],
[23,32,26,25,26,0,26,29,26,27],
[25,26,27,24,19,25,0,33,25,23],
[20,19,22,17,15,22,18,0,18,20],
[27,27,29,25,28,25,26,33,0,21],
[27,27,24,19,24,24,28,31,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,24,29,28,27,32,28,27,25],
[26,0,27,30,25,26,26,28,24,28],
[27,24,0,29,23,31,27,29,23,22],
[22,21,22,0,25,24,23,22,23,24],
[23,26,28,26,0,28,30,27,22,22],
[24,25,20,27,23,0,21,26,19,23],
[19,25,24,28,21,30,0,25,25,22],
[23,23,22,29,24,25,26,0,22,25],
[24,27,28,28,29,32,26,29,0,26],
[26,23,29,27,29,28,29,26,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,16,16,21,25,16,27,22,25],
[24,0,29,19,16,32,24,23,20,20],
[35,22,0,20,25,33,28,31,21,16],
[35,32,31,0,16,32,32,22,19,32],
[30,35,26,35,0,32,35,31,18,31],
[26,19,18,19,19,0,22,28,14,15],
[35,27,23,19,16,29,0,22,30,18],
[24,28,20,29,20,23,29,0,25,20],
[29,31,30,32,33,37,21,26,0,30],
[26,31,35,19,20,36,33,31,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,18,21,31,18,29,28,11,18],
[23,0,35,21,28,24,36,28,24,28],
[33,16,0,23,23,22,34,22,29,26],
[30,30,28,0,34,32,37,24,30,34],
[20,23,28,17,0,13,31,24,20,23],
[33,27,29,19,38,0,41,28,24,34],
[22,15,17,14,20,10,0,16,19,15],
[23,23,29,27,27,23,35,0,27,34],
[40,27,22,21,31,27,32,24,0,27],
[33,23,25,17,28,17,36,17,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,24,21,25,25,25,30,22,27],
[23,0,29,23,30,30,28,24,26,22],
[27,22,0,27,26,26,29,26,26,20],
[30,28,24,0,28,28,32,28,28,19],
[26,21,25,23,0,26,25,25,25,20],
[26,21,25,23,25,0,29,27,27,22],
[26,23,22,19,26,22,0,24,23,20],
[21,27,25,23,26,24,27,0,26,25],
[29,25,25,23,26,24,28,25,0,22],
[24,29,31,32,31,29,31,26,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,30,29,24,31,26,29,23,27],
[22,0,18,26,23,25,24,21,24,19],
[21,33,0,25,27,34,25,26,27,21],
[22,25,26,0,22,30,26,25,21,21],
[27,28,24,29,0,28,28,29,32,27],
[20,26,17,21,23,0,16,20,19,19],
[25,27,26,25,23,35,0,23,26,21],
[22,30,25,26,22,31,28,0,22,21],
[28,27,24,30,19,32,25,29,0,25],
[24,32,30,30,24,32,30,30,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,26,17,8,16,8,17,16,17],
[26,0,43,26,17,25,25,34,33,34],
[25,8,0,17,17,33,25,25,25,18],
[34,25,34,0,16,25,34,25,34,25],
[43,34,34,35,0,34,34,17,34,25],
[35,26,18,26,17,0,18,26,26,18],
[43,26,26,17,17,33,0,17,25,17],
[34,17,26,26,34,25,34,0,26,17],
[35,18,26,17,17,25,26,25,0,9],
[34,17,33,26,26,33,34,34,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,29,25,30,29,28,27,27,27],
[30,0,27,31,30,31,30,25,24,33],
[22,24,0,25,30,29,24,28,24,27],
[26,20,26,0,23,26,24,27,23,28],
[21,21,21,28,0,24,25,22,20,27],
[22,20,22,25,27,0,23,26,25,22],
[23,21,27,27,26,28,0,25,23,25],
[24,26,23,24,29,25,26,0,23,25],
[24,27,27,28,31,26,28,28,0,28],
[24,18,24,23,24,29,26,26,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,26,23,28,28,31,26,29,29],
[18,0,20,21,32,22,26,24,21,22],
[25,31,0,27,31,26,29,27,27,26],
[28,30,24,0,25,29,36,29,29,28],
[23,19,20,26,0,26,26,23,21,23],
[23,29,25,22,25,0,26,25,28,24],
[20,25,22,15,25,25,0,25,22,28],
[25,27,24,22,28,26,26,0,25,29],
[22,30,24,22,30,23,29,26,0,25],
[22,29,25,23,28,27,23,22,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,17,28,25,22,22,26,23,24],
[31,0,22,28,27,32,25,26,26,28],
[34,29,0,29,31,32,27,34,25,29],
[23,23,22,0,25,25,22,29,23,29],
[26,24,20,26,0,23,18,27,23,29],
[29,19,19,26,28,0,23,28,21,25],
[29,26,24,29,33,28,0,29,22,28],
[25,25,17,22,24,23,22,0,17,25],
[28,25,26,28,28,30,29,34,0,30],
[27,23,22,22,22,26,23,26,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,28,22,27,24,33,26,31,26],
[19,0,21,20,21,15,19,21,20,20],
[23,30,0,22,30,34,26,30,26,24],
[29,31,29,0,33,31,30,28,31,18],
[24,30,21,18,0,22,20,27,20,26],
[27,36,17,20,29,0,25,28,24,30],
[18,32,25,21,31,26,0,23,27,22],
[25,30,21,23,24,23,28,0,24,29],
[20,31,25,20,31,27,24,27,0,18],
[25,31,27,33,25,21,29,22,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,33,23,22,26,27,20,29,25],
[29,0,34,25,21,25,29,25,32,25],
[18,17,0,21,18,18,20,16,24,19],
[28,26,30,0,28,22,26,21,31,28],
[29,30,33,23,0,27,25,28,31,23],
[25,26,33,29,24,0,28,31,31,25],
[24,22,31,25,26,23,0,27,29,24],
[31,26,35,30,23,20,24,0,31,23],
[22,19,27,20,20,20,22,20,0,26],
[26,26,32,23,28,26,27,28,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,29,25,20,31,28,29,28,32],
[29,0,30,24,24,31,28,28,35,33],
[22,21,0,29,26,19,30,31,29,29],
[26,27,22,0,21,26,27,25,25,28],
[31,27,25,30,0,27,29,27,33,31],
[20,20,32,25,24,0,29,34,28,30],
[23,23,21,24,22,22,0,23,31,25],
[22,23,20,26,24,17,28,0,28,28],
[23,16,22,26,18,23,20,23,0,25],
[19,18,22,23,20,21,26,23,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,30,25,28,21,27,31,26,26],
[26,0,30,28,28,26,32,25,30,29],
[21,21,0,30,27,26,25,25,24,21],
[26,23,21,0,28,26,28,30,27,30],
[23,23,24,23,0,27,28,26,27,28],
[30,25,25,25,24,0,26,25,25,22],
[24,19,26,23,23,25,0,23,27,26],
[20,26,26,21,25,26,28,0,26,26],
[25,21,27,24,24,26,24,25,0,28],
[25,22,30,21,23,29,25,25,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,20,15,17,24,17,19,23,19],
[33,0,24,21,18,24,22,24,32,25],
[31,27,0,25,22,30,23,26,29,25],
[36,30,26,0,28,34,29,27,35,25],
[34,33,29,23,0,25,22,27,29,26],
[27,27,21,17,26,0,19,23,32,25],
[34,29,28,22,29,32,0,31,31,27],
[32,27,25,24,24,28,20,0,25,23],
[28,19,22,16,22,19,20,26,0,25],
[32,26,26,26,25,26,24,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,27,30,27,27,26,25,26,26],
[30,0,23,27,20,24,27,30,25,22],
[24,28,0,29,17,31,27,25,23,22],
[21,24,22,0,15,27,22,22,21,22],
[24,31,34,36,0,30,29,29,25,31],
[24,27,20,24,21,0,27,22,29,27],
[25,24,24,29,22,24,0,23,21,24],
[26,21,26,29,22,29,28,0,29,28],
[25,26,28,30,26,22,30,22,0,27],
[25,29,29,29,20,24,27,23,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,27,19,17,35,28,26,26,24],
[27,0,15,22,27,29,27,19,21,27],
[24,36,0,27,25,34,24,23,25,26],
[32,29,24,0,25,33,29,22,26,33],
[34,24,26,26,0,26,30,21,30,32],
[16,22,17,18,25,0,29,21,19,24],
[23,24,27,22,21,22,0,18,24,23],
[25,32,28,29,30,30,33,0,24,30],
[25,30,26,25,21,32,27,27,0,23],
[27,24,25,18,19,27,28,21,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,26,29,25,32,19,27,25,29],
[29,0,27,26,23,36,24,26,23,26],
[25,24,0,28,31,34,26,28,35,28],
[22,25,23,0,24,28,23,25,26,21],
[26,28,20,27,0,30,21,27,30,24],
[19,15,17,23,21,0,17,22,18,17],
[32,27,25,28,30,34,0,34,28,24],
[24,25,23,26,24,29,17,0,25,26],
[26,28,16,25,21,33,23,26,0,27],
[22,25,23,30,27,34,27,25,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,36,34,39,31,41,24,34,34],
[17,0,29,24,34,19,24,17,27,34],
[15,22,0,22,39,24,20,10,20,34],
[17,27,29,0,27,12,29,15,29,27],
[12,17,12,24,0,14,17,10,22,17],
[20,32,27,39,37,0,32,27,32,34],
[10,27,31,22,34,19,0,10,10,34],
[27,34,41,36,41,24,41,0,46,29],
[17,24,31,22,29,19,41,5,0,29],
[17,17,17,24,34,17,17,22,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,15,17,25,18,19,21,20,27],
[28,0,21,28,31,22,30,21,29,26],
[36,30,0,31,26,31,33,28,29,22],
[34,23,20,0,29,23,24,23,27,21],
[26,20,25,22,0,21,23,22,25,22],
[33,29,20,28,30,0,21,24,21,30],
[32,21,18,27,28,30,0,18,24,23],
[30,30,23,28,29,27,33,0,28,28],
[31,22,22,24,26,30,27,23,0,31],
[24,25,29,30,29,21,28,23,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,24,16,26,22,25,27,27,32],
[24,0,22,21,22,15,23,29,24,27],
[27,29,0,20,28,26,29,29,27,31],
[35,30,31,0,36,25,32,36,34,31],
[25,29,23,15,0,22,30,30,29,29],
[29,36,25,26,29,0,28,31,29,33],
[26,28,22,19,21,23,0,25,24,24],
[24,22,22,15,21,20,26,0,21,27],
[24,27,24,17,22,22,27,30,0,29],
[19,24,20,20,22,18,27,24,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,19,11,20,10,32,19,31,30],
[41,0,30,20,30,41,31,30,41,40],
[32,21,0,11,31,32,32,10,42,41],
[40,31,40,0,31,30,31,19,40,51],
[31,21,20,20,0,41,31,30,20,30],
[41,10,19,21,10,0,32,19,21,30],
[19,20,19,20,20,19,0,19,29,40],
[32,21,41,32,21,32,32,0,32,41],
[20,10,9,11,31,30,22,19,0,30],
[21,11,10,0,21,21,11,10,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,22,25,30,32,15,25,23,15],
[41,0,29,22,20,29,22,22,20,29],
[29,22,0,31,35,39,37,30,23,27],
[26,29,20,0,27,39,22,18,30,29],
[21,31,16,24,0,32,15,20,16,22],
[19,22,12,12,19,0,27,11,22,27],
[36,29,14,29,36,24,0,21,24,29],
[26,29,21,33,31,40,30,0,31,30],
[28,31,28,21,35,29,27,20,0,27],
[36,22,24,22,29,24,22,21,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,24,20,19,22,11,23,22,25],
[30,0,23,26,20,21,21,20,32,25],
[27,28,0,29,25,21,16,20,30,28],
[31,25,22,0,16,21,19,26,26,28],
[32,31,26,35,0,20,29,22,39,28],
[29,30,30,30,31,0,23,20,34,31],
[40,30,35,32,22,28,0,28,40,32],
[28,31,31,25,29,31,23,0,33,32],
[29,19,21,25,12,17,11,18,0,17],
[26,26,23,23,23,20,19,19,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,31,22,29,22,30,28,21],
[24,0,19,26,18,25,19,28,26,27],
[23,32,0,30,27,33,19,29,25,23],
[20,25,21,0,21,23,19,29,28,18],
[29,33,24,30,0,33,29,34,35,29],
[22,26,18,28,18,0,17,22,25,16],
[29,32,32,32,22,34,0,31,31,28],
[21,23,22,22,17,29,20,0,28,18],
[23,25,26,23,16,26,20,23,0,24],
[30,24,28,33,22,35,23,33,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,25,27,22,22,21,27,25,18],
[40,0,35,31,31,29,22,35,33,26],
[26,16,0,25,24,28,21,23,24,25],
[24,20,26,0,22,22,20,26,27,22],
[29,20,27,29,0,23,19,32,25,22],
[29,22,23,29,28,0,23,34,31,26],
[30,29,30,31,32,28,0,32,30,24],
[24,16,28,25,19,17,19,0,19,20],
[26,18,27,24,26,20,21,32,0,22],
[33,25,26,29,29,25,27,31,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,34,22,22,27,33,28,28,24],
[28,0,36,20,23,23,31,25,27,23],
[17,15,0,13,16,16,24,19,21,12],
[29,31,38,0,27,25,28,27,35,30],
[29,28,35,24,0,26,29,28,28,25],
[24,28,35,26,25,0,29,26,30,28],
[18,20,27,23,22,22,0,25,30,23],
[23,26,32,24,23,25,26,0,28,22],
[23,24,30,16,23,21,21,23,0,25],
[27,28,39,21,26,23,28,29,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,22,22,26,21,23,27,22,27],
[25,0,25,23,22,25,26,23,19,28],
[29,26,0,24,21,24,25,30,23,30],
[29,28,27,0,22,18,25,26,20,27],
[25,29,30,29,0,23,26,27,20,30],
[30,26,27,33,28,0,25,30,27,29],
[28,25,26,26,25,26,0,25,20,35],
[24,28,21,25,24,21,26,0,23,24],
[29,32,28,31,31,24,31,28,0,34],
[24,23,21,24,21,22,16,27,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,36,22,29,22,24,36,31,23],
[30,0,36,15,22,22,30,37,38,29],
[15,15,0,22,22,22,22,22,15,14],
[29,36,29,0,7,13,22,22,29,21],
[22,29,29,44,0,29,29,29,29,14],
[29,29,29,38,22,0,22,29,29,29],
[27,21,29,29,22,29,0,20,30,36],
[15,14,29,29,22,22,31,0,31,23],
[20,13,36,22,22,22,21,20,0,13],
[28,22,37,30,37,22,15,28,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,27,31,29,20,23,28,24,29],
[25,0,29,27,28,15,22,23,24,23],
[24,22,0,23,24,19,22,26,20,24],
[20,24,28,0,24,26,25,21,22,24],
[22,23,27,27,0,23,22,25,21,22],
[31,36,32,25,28,0,29,26,27,29],
[28,29,29,26,29,22,0,24,21,30],
[23,28,25,30,26,25,27,0,24,26],
[27,27,31,29,30,24,30,27,0,28],
[22,28,27,27,29,22,21,25,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,24,22,19,27,30,27,22,29],
[29,0,25,23,22,25,30,20,21,24],
[27,26,0,21,22,26,30,26,19,29],
[29,28,30,0,23,28,35,24,27,27],
[32,29,29,28,0,28,35,27,20,29],
[24,26,25,23,23,0,25,32,19,22],
[21,21,21,16,16,26,0,25,20,19],
[24,31,25,27,24,19,26,0,20,25],
[29,30,32,24,31,32,31,31,0,32],
[22,27,22,24,22,29,32,26,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,27,31,24,31,21,18,23,25],
[22,0,19,27,16,26,19,16,19,29],
[24,32,0,28,22,29,24,21,23,23],
[20,24,23,0,22,24,21,19,21,22],
[27,35,29,29,0,31,26,23,19,26],
[20,25,22,27,20,0,19,19,16,24],
[30,32,27,30,25,32,0,27,25,35],
[33,35,30,32,28,32,24,0,28,32],
[28,32,28,30,32,35,26,23,0,28],
[26,22,28,29,25,27,16,19,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,29,32,25,28,23,29,25,23],
[23,0,24,26,25,22,26,26,25,25],
[22,27,0,28,29,26,24,27,25,25],
[19,25,23,0,21,24,20,21,24,23],
[26,26,22,30,0,25,26,25,28,23],
[23,29,25,27,26,0,20,24,23,25],
[28,25,27,31,25,31,0,29,25,28],
[22,25,24,30,26,27,22,0,26,25],
[26,26,26,27,23,28,26,25,0,26],
[28,26,26,28,28,26,23,26,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,29,14,22,20,21,14,14,14],
[37,0,28,36,31,20,29,28,30,37],
[22,23,0,29,16,20,23,7,22,23],
[37,15,22,0,15,20,23,15,15,22],
[29,20,35,36,0,20,29,27,22,36],
[31,31,31,31,31,0,31,22,31,31],
[30,22,28,28,22,20,0,29,21,22],
[37,23,44,36,24,29,22,0,15,38],
[37,21,29,36,29,20,30,36,0,29],
[37,14,28,29,15,20,29,13,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,38,38,26,38,51,38,25,51],
[13,0,25,38,13,38,38,26,38,26],
[13,26,0,38,26,38,38,26,26,39],
[13,13,13,0,13,25,25,0,0,13],
[25,38,25,38,0,25,38,25,25,38],
[13,13,13,26,26,0,13,26,13,13],
[0,13,13,26,13,38,0,13,13,26],
[13,25,25,51,26,25,38,0,25,38],
[26,13,25,51,26,38,38,26,0,26],
[0,25,12,38,13,38,25,13,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,28,23,30,28,25,25,24,27],
[32,0,22,21,30,32,27,21,31,24],
[23,29,0,24,34,25,23,21,31,23],
[28,30,27,0,30,26,30,19,31,20],
[21,21,17,21,0,19,19,27,30,25],
[23,19,26,25,32,0,28,18,29,22],
[26,24,28,21,32,23,0,16,33,23],
[26,30,30,32,24,33,35,0,25,30],
[27,20,20,20,21,22,18,26,0,24],
[24,27,28,31,26,29,28,21,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,20,34,30,25,29,18,29,23],
[22,0,21,23,26,25,18,13,39,15],
[31,30,0,24,21,42,25,27,34,24],
[17,28,27,0,12,28,23,32,32,22],
[21,25,30,39,0,35,32,25,32,28],
[26,26,9,23,16,0,25,25,32,29],
[22,33,26,28,19,26,0,26,37,21],
[33,38,24,19,26,26,25,0,35,33],
[22,12,17,19,19,19,14,16,0,12],
[28,36,27,29,23,22,30,18,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,27,22,28,26,27,28,27,25],
[19,0,19,14,27,26,22,31,26,29],
[24,32,0,30,26,29,25,34,32,33],
[29,37,21,0,29,18,32,30,28,29],
[23,24,25,22,0,19,32,27,27,24],
[25,25,22,33,32,0,34,28,35,35],
[24,29,26,19,19,17,0,25,24,30],
[23,20,17,21,24,23,26,0,29,25],
[24,25,19,23,24,16,27,22,0,16],
[26,22,18,22,27,16,21,26,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,32,20,25,31,20,23,20,24],
[29,0,35,30,28,35,30,28,25,30],
[19,16,0,19,18,25,24,19,17,20],
[31,21,32,0,30,34,26,25,26,25],
[26,23,33,21,0,31,26,27,23,27],
[20,16,26,17,20,0,23,22,19,20],
[31,21,27,25,25,28,0,23,21,28],
[28,23,32,26,24,29,28,0,28,30],
[31,26,34,25,28,32,30,23,0,30],
[27,21,31,26,24,31,23,21,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,26,22,24,24,29,22,29,23],
[17,0,19,11,24,20,21,13,23,18],
[25,32,0,16,29,22,28,17,27,21],
[29,40,35,0,35,29,30,25,30,30],
[27,27,22,16,0,22,25,26,26,18],
[27,31,29,22,29,0,26,27,24,26],
[22,30,23,21,26,25,0,23,23,21],
[29,38,34,26,25,24,28,0,24,25],
[22,28,24,21,25,27,28,27,0,23],
[28,33,30,21,33,25,30,26,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,36,18,30,19,32,30,25,26],
[26,0,34,29,36,25,37,28,27,21],
[15,17,0,19,24,13,34,20,20,17],
[33,22,32,0,29,17,23,32,24,19],
[21,15,27,22,0,18,34,26,26,18],
[32,26,38,34,33,0,33,27,25,22],
[19,14,17,28,17,18,0,22,19,15],
[21,23,31,19,25,24,29,0,22,22],
[26,24,31,27,25,26,32,29,0,24],
[25,30,34,32,33,29,36,29,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,27,32,33,34,26,21,37,30],
[15,0,22,26,17,21,13,17,14,22],
[24,29,0,34,29,33,29,25,29,25],
[19,25,17,0,20,20,23,12,9,17],
[18,34,22,31,0,30,26,21,22,22],
[17,30,18,31,21,0,25,24,23,18],
[25,38,22,28,25,26,0,17,25,26],
[30,34,26,39,30,27,34,0,30,23],
[14,37,22,42,29,28,26,21,0,21],
[21,29,26,34,29,33,25,28,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,27,30,26,22,24,28,27,22],
[26,0,29,28,26,29,25,28,21,27],
[24,22,0,22,22,28,23,26,26,19],
[21,23,29,0,23,28,25,25,24,23],
[25,25,29,28,0,27,24,34,27,26],
[29,22,23,23,24,0,25,28,28,26],
[27,26,28,26,27,26,0,32,25,27],
[23,23,25,26,17,23,19,0,22,23],
[24,30,25,27,24,23,26,29,0,21],
[29,24,32,28,25,25,24,28,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,20,31,33,28,25,29,36,34],
[18,0,19,24,16,21,25,23,28,31],
[31,32,0,32,34,24,30,26,33,32],
[20,27,19,0,24,22,25,23,26,28],
[18,35,17,27,0,21,25,19,31,26],
[23,30,27,29,30,0,29,21,27,32],
[26,26,21,26,26,22,0,19,27,26],
[22,28,25,28,32,30,32,0,27,33],
[15,23,18,25,20,24,24,24,0,25],
[17,20,19,23,25,19,25,18,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,28,27,24,20,11,18,20,26],
[35,0,32,26,24,29,21,24,25,22],
[23,19,0,23,19,16,23,16,19,16],
[24,25,28,0,15,20,18,14,12,22],
[27,27,32,36,0,26,21,25,26,24],
[31,22,35,31,25,0,24,24,23,31],
[40,30,28,33,30,27,0,26,25,25],
[33,27,35,37,26,27,25,0,22,25],
[31,26,32,39,25,28,26,29,0,30],
[25,29,35,29,27,20,26,26,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,25,38,38,51,25,37,38,38],
[13,0,24,24,37,24,24,37,24,24],
[26,27,0,37,38,51,25,26,37,13],
[13,27,14,0,38,51,25,26,27,27],
[13,14,13,13,0,38,27,26,13,0],
[0,27,0,0,13,0,0,26,0,13],
[26,27,26,26,24,51,0,26,26,13],
[14,14,25,25,25,25,25,0,25,14],
[13,27,14,24,38,51,25,26,0,27],
[13,27,38,24,51,38,38,37,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,21,24,27,22,23,19,14,22],
[34,0,21,20,26,19,22,25,21,29],
[30,30,0,22,18,30,30,25,20,21],
[27,31,29,0,18,25,29,30,26,24],
[24,25,33,33,0,20,25,22,16,28],
[29,32,21,26,31,0,30,28,31,25],
[28,29,21,22,26,21,0,21,21,28],
[32,26,26,21,29,23,30,0,28,26],
[37,30,31,25,35,20,30,23,0,31],
[29,22,30,27,23,26,23,25,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,27,20,24,24,32,23,23,25],
[31,0,26,25,36,30,28,31,30,31],
[24,25,0,29,32,25,30,29,24,35],
[31,26,22,0,28,21,27,31,27,28],
[27,15,19,23,0,21,18,23,14,30],
[27,21,26,30,30,0,30,35,20,34],
[19,23,21,24,33,21,0,32,23,30],
[28,20,22,20,28,16,19,0,18,30],
[28,21,27,24,37,31,28,33,0,36],
[26,20,16,23,21,17,21,21,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,22,21,22,16,19,22,20,21],
[34,0,26,23,27,23,26,23,23,26],
[29,25,0,21,31,25,27,23,20,22],
[30,28,30,0,24,27,29,28,25,23],
[29,24,20,27,0,25,28,27,25,21],
[35,28,26,24,26,0,24,29,26,23],
[32,25,24,22,23,27,0,28,22,22],
[29,28,28,23,24,22,23,0,24,22],
[31,28,31,26,26,25,29,27,0,24],
[30,25,29,28,30,28,29,29,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,24,21,23,21,29,29,22,24],
[21,0,25,25,25,22,25,28,27,21],
[27,26,0,25,27,22,31,28,32,27],
[30,26,26,0,32,26,34,29,29,25],
[28,26,24,19,0,22,29,28,30,21],
[30,29,29,25,29,0,29,28,28,27],
[22,26,20,17,22,22,0,26,26,19],
[22,23,23,22,23,23,25,0,24,24],
[29,24,19,22,21,23,25,27,0,23],
[27,30,24,26,30,24,32,27,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,28,32,23,23,29,31,27,22],
[27,0,23,27,28,31,22,36,22,22],
[23,28,0,27,23,31,24,28,18,22],
[19,24,24,0,18,23,15,29,23,18],
[28,23,28,33,0,37,24,38,24,23],
[28,20,20,28,14,0,25,33,14,9],
[22,29,27,36,27,26,0,27,22,26],
[20,15,23,22,13,18,24,0,22,17],
[24,29,33,28,27,37,29,29,0,37],
[29,29,29,33,28,42,25,34,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,27,26,28,29,24,19,26,25],
[22,0,22,25,25,30,26,19,32,25],
[24,29,0,29,30,30,29,16,25,26],
[25,26,22,0,28,27,29,20,27,27],
[23,26,21,23,0,28,28,21,27,26],
[22,21,21,24,23,0,28,18,22,22],
[27,25,22,22,23,23,0,15,20,22],
[32,32,35,31,30,33,36,0,25,29],
[25,19,26,24,24,29,31,26,0,23],
[26,26,25,24,25,29,29,22,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,27,27,36,36,25,29,25,25],
[26,0,19,26,28,29,28,37,33,26],
[24,32,0,24,25,25,24,26,25,33],
[24,25,27,0,36,29,33,44,25,24],
[15,23,26,15,0,18,15,33,25,15],
[15,22,26,22,33,0,15,24,31,22],
[26,23,27,18,36,36,0,37,25,35],
[22,14,25,7,18,27,14,0,16,15],
[26,18,26,26,26,20,26,35,0,33],
[26,25,18,27,36,29,16,36,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,24,23,32,7,22,25,27,23],
[35,0,21,35,28,21,14,14,34,25],
[27,30,0,32,41,21,26,30,18,31],
[28,16,19,0,27,25,21,13,32,22],
[19,23,10,24,0,14,28,32,24,29],
[44,30,30,26,37,0,29,34,30,24],
[29,37,25,30,23,22,0,33,30,20],
[26,37,21,38,19,17,18,0,30,19],
[24,17,33,19,27,21,21,21,0,27],
[28,26,20,29,22,27,31,32,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,32,30,29,27,27,28,21,33],
[29,0,30,28,32,24,34,30,29,30],
[19,21,0,27,27,21,25,23,21,25],
[21,23,24,0,28,24,18,22,19,26],
[22,19,24,23,0,18,23,17,21,29],
[24,27,30,27,33,0,28,27,25,32],
[24,17,26,33,28,23,0,31,26,29],
[23,21,28,29,34,24,20,0,22,29],
[30,22,30,32,30,26,25,29,0,31],
[18,21,26,25,22,19,22,22,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,20,16,25,24,24,22,18,15],
[28,0,21,19,26,26,26,23,22,19],
[31,30,0,24,26,26,29,26,25,24],
[35,32,27,0,25,32,29,26,20,21],
[26,25,25,26,0,31,27,22,26,26],
[27,25,25,19,20,0,23,19,21,20],
[27,25,22,22,24,28,0,18,27,24],
[29,28,25,25,29,32,33,0,29,25],
[33,29,26,31,25,30,24,22,0,30],
[36,32,27,30,25,31,27,26,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,36,31,26,29,26,30,29,24],
[27,0,30,25,28,30,28,30,30,24],
[15,21,0,17,21,22,17,23,17,15],
[20,26,34,0,25,27,17,31,24,29],
[25,23,30,26,0,23,23,23,28,23],
[22,21,29,24,28,0,21,24,30,21],
[25,23,34,34,28,30,0,33,32,24],
[21,21,28,20,28,27,18,0,28,21],
[22,21,34,27,23,21,19,23,0,14],
[27,27,36,22,28,30,27,30,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,32,37,21,32,17,27,17,23],
[30,0,20,31,31,20,22,32,22,16],
[19,31,0,29,24,27,20,37,22,27],
[14,20,22,0,23,21,21,35,17,21],
[30,20,27,28,0,31,12,36,28,27],
[19,31,24,30,20,0,26,27,26,27],
[34,29,31,30,39,25,0,40,26,27],
[24,19,14,16,15,24,11,0,16,18],
[34,29,29,34,23,25,25,35,0,25],
[28,35,24,30,24,24,24,33,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,23,24,23,31,18,19,24],
[26,0,21,24,25,28,31,24,28,29],
[26,30,0,24,29,32,34,22,26,34],
[28,27,27,0,26,32,29,20,22,29],
[27,26,22,25,0,27,31,25,26,30],
[28,23,19,19,24,0,29,21,20,24],
[20,20,17,22,20,22,0,12,16,23],
[33,27,29,31,26,30,39,0,23,32],
[32,23,25,29,25,31,35,28,0,26],
[27,22,17,22,21,27,28,19,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,51,34,17,34,51,51,34,51],
[17,0,51,17,34,34,34,51,17,17],
[0,0,0,0,17,17,0,34,0,0],
[17,34,51,0,17,34,51,51,34,51],
[34,17,34,34,0,17,34,34,34,34],
[17,17,34,17,34,0,17,51,17,17],
[0,17,51,0,17,34,0,34,0,17],
[0,0,17,0,17,0,17,0,0,0],
[17,34,51,17,17,34,51,51,0,34],
[0,34,51,0,17,34,34,51,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,31,25,22,19,25,26,21,21],
[23,0,22,19,25,22,19,16,26,12],
[20,29,0,24,20,23,27,18,21,18],
[26,32,27,0,27,27,28,26,31,17],
[29,26,31,24,0,21,22,25,31,20],
[32,29,28,24,30,0,28,16,31,19],
[26,32,24,23,29,23,0,23,30,18],
[25,35,33,25,26,35,28,0,32,26],
[30,25,30,20,20,20,21,19,0,17],
[30,39,33,34,31,32,33,25,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,21,25,24,19,23,28,24],
[28,0,31,28,27,25,26,31,25,29],
[25,20,0,23,24,21,21,22,22,27],
[30,23,28,0,23,27,26,27,24,31],
[26,24,27,28,0,27,27,27,27,22],
[27,26,30,24,24,0,22,28,29,28],
[32,25,30,25,24,29,0,28,29,27],
[28,20,29,24,24,23,23,0,27,28],
[23,26,29,27,24,22,22,24,0,26],
[27,22,24,20,29,23,24,23,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,26,31,30,28,26,30,24,30],
[26,0,22,26,24,24,28,27,20,26],
[25,29,0,31,29,21,35,30,27,30],
[20,25,20,0,25,21,22,25,17,28],
[21,27,22,26,0,19,27,29,21,27],
[23,27,30,30,32,0,35,32,26,34],
[25,23,16,29,24,16,0,28,20,33],
[21,24,21,26,22,19,23,0,21,25],
[27,31,24,34,30,25,31,30,0,28],
[21,25,21,23,24,17,18,26,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,26,31,25,25,31,30,22,29],
[17,0,19,26,27,22,26,20,20,21],
[25,32,0,31,28,32,32,30,21,32],
[20,25,20,0,21,21,21,25,21,27],
[26,24,23,30,0,24,26,25,28,30],
[26,29,19,30,27,0,29,19,32,30],
[20,25,19,30,25,22,0,19,24,26],
[21,31,21,26,26,32,32,0,34,33],
[29,31,30,30,23,19,27,17,0,25],
[22,30,19,24,21,21,25,18,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,30,30,30,24,30,24,28,26],
[28,0,24,23,30,22,24,30,28,26],
[21,27,0,26,28,26,24,25,26,24],
[21,28,25,0,26,26,25,27,26,26],
[21,21,23,25,0,22,23,21,23,24],
[27,29,25,25,29,0,27,30,27,28],
[21,27,27,26,28,24,0,24,24,25],
[27,21,26,24,30,21,27,0,30,27],
[23,23,25,25,28,24,27,21,0,23],
[25,25,27,25,27,23,26,24,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,16,13,10,24,13,28,15,19],
[41,0,33,25,20,23,20,33,15,33],
[35,18,0,25,24,23,28,34,22,34],
[38,26,26,0,17,24,22,28,15,33],
[41,31,27,34,0,28,20,40,25,35],
[27,28,28,27,23,0,23,34,14,31],
[38,31,23,29,31,28,0,35,26,37],
[23,18,17,23,11,17,16,0,13,28],
[36,36,29,36,26,37,25,38,0,38],
[32,18,17,18,16,20,14,23,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,26,30,29,24,29,35,27,36],
[24,0,18,19,26,17,23,26,20,24],
[25,33,0,27,24,22,24,28,29,25],
[21,32,24,0,33,24,25,28,27,33],
[22,25,27,18,0,23,25,25,24,35],
[27,34,29,27,28,0,23,29,26,31],
[22,28,27,26,26,28,0,28,26,27],
[16,25,23,23,26,22,23,0,27,27],
[24,31,22,24,27,25,25,24,0,25],
[15,27,26,18,16,20,24,24,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,28,28,25,23,33,24,16,26],
[27,0,32,30,33,31,30,24,24,31],
[23,19,0,23,26,19,23,21,21,18],
[23,21,28,0,26,22,24,23,15,22],
[26,18,25,25,0,19,28,17,23,21],
[28,20,32,29,32,0,30,19,26,20],
[18,21,28,27,23,21,0,21,17,22],
[27,27,30,28,34,32,30,0,29,23],
[35,27,30,36,28,25,34,22,0,29],
[25,20,33,29,30,31,29,28,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,26,13,33,17,13,14,33],
[28,0,26,26,27,34,21,18,19,33],
[25,25,0,27,20,34,24,24,24,39],
[25,25,24,0,15,25,19,25,15,35],
[38,24,31,36,0,42,31,23,31,37],
[18,17,17,26,9,0,17,13,13,26],
[34,30,27,32,20,34,0,28,33,43],
[38,33,27,26,28,38,23,0,32,34],
[37,32,27,36,20,38,18,19,0,33],
[18,18,12,16,14,25,8,17,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,31,35,28,29,38,24,31,21],
[20,0,31,32,20,20,28,22,24,30],
[20,20,0,27,17,19,26,14,23,20],
[16,19,24,0,24,20,29,25,25,27],
[23,31,34,27,0,24,36,26,24,31],
[22,31,32,31,27,0,39,31,28,33],
[13,23,25,22,15,12,0,19,18,23],
[27,29,37,26,25,20,32,0,33,34],
[20,27,28,26,27,23,33,18,0,23],
[30,21,31,24,20,18,28,17,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,24,24,36,33,17,18,23,28],
[28,0,34,28,13,33,23,23,19,35],
[27,17,0,20,25,32,12,24,22,29],
[27,23,31,0,25,32,11,21,22,28],
[15,38,26,26,0,27,16,10,11,32],
[18,18,19,19,24,0,12,19,19,23],
[34,28,39,40,35,39,0,16,30,33],
[33,28,27,30,41,32,35,0,34,22],
[28,32,29,29,40,32,21,17,0,33],
[23,16,22,23,19,28,18,29,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,16,17,9,25,14,22,27,26],
[33,0,27,23,18,32,29,33,33,18],
[35,24,0,17,25,21,30,30,29,23],
[34,28,34,0,20,34,38,34,37,31],
[42,33,26,31,0,38,28,22,42,36],
[26,19,30,17,13,0,24,26,37,22],
[37,22,21,13,23,27,0,17,38,24],
[29,18,21,17,29,25,34,0,33,23],
[24,18,22,14,9,14,13,18,0,23],
[25,33,28,20,15,29,27,28,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,18,30,18,22,27,18,18,24],
[26,0,41,23,36,33,30,29,39,27],
[33,10,0,30,17,10,18,28,23,17],
[21,28,21,0,16,27,27,24,25,16],
[33,15,34,35,0,22,20,24,28,26],
[29,18,41,24,29,0,26,29,36,34],
[24,21,33,24,31,25,0,26,31,29],
[33,22,23,27,27,22,25,0,22,24],
[33,12,28,26,23,15,20,29,0,26],
[27,24,34,35,25,17,22,27,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,27,14,26,26,14,39,39,39],
[25,0,13,14,26,26,14,25,27,27],
[24,38,0,26,38,38,14,51,51,51],
[37,37,25,0,51,51,39,37,51,51],
[25,25,13,0,0,26,27,25,27,27],
[25,25,13,0,25,0,13,25,27,27],
[37,37,37,12,24,38,0,37,51,51],
[12,26,0,14,26,26,14,0,39,39],
[12,24,0,0,24,24,0,12,0,12],
[12,24,0,0,24,24,0,12,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,25,16,33,22,22,22,32,28],
[32,0,28,17,31,19,25,21,30,27],
[26,23,0,30,27,29,29,23,32,27],
[35,34,21,0,32,19,23,30,36,32],
[18,20,24,19,0,15,22,26,34,17],
[29,32,22,32,36,0,27,22,38,33],
[29,26,22,28,29,24,0,26,33,31],
[29,30,28,21,25,29,25,0,30,29],
[19,21,19,15,17,13,18,21,0,24],
[23,24,24,19,34,18,20,22,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,34,32,26,34,23,27,31,25],
[22,0,29,29,21,23,22,21,22,27],
[17,22,0,32,27,27,24,20,27,21],
[19,22,19,0,25,24,19,21,26,14],
[25,30,24,26,0,27,20,20,24,21],
[17,28,24,27,24,0,26,21,15,23],
[28,29,27,32,31,25,0,29,30,31],
[24,30,31,30,31,30,22,0,31,29],
[20,29,24,25,27,36,21,20,0,19],
[26,24,30,37,30,28,20,22,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,28,21,15,14,19,22,21,22],
[37,0,43,21,37,21,27,30,28,37],
[23,8,0,23,23,29,27,23,23,30],
[30,30,28,0,22,30,19,22,21,22],
[36,14,28,29,0,35,21,21,19,34],
[37,30,22,21,16,0,21,24,22,31],
[32,24,24,32,30,30,0,22,30,30],
[29,21,28,29,30,27,29,0,20,35],
[30,23,28,30,32,29,21,31,0,21],
[29,14,21,29,17,20,21,16,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,18,27,22,20,18,21,23,27],
[30,0,25,27,26,25,20,26,32,31],
[33,26,0,27,28,30,22,25,30,29],
[24,24,24,0,26,23,19,25,25,26],
[29,25,23,25,0,22,26,24,27,27],
[31,26,21,28,29,0,25,27,28,30],
[33,31,29,32,25,26,0,28,32,29],
[30,25,26,26,27,24,23,0,25,26],
[28,19,21,26,24,23,19,26,0,32],
[24,20,22,25,24,21,22,25,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,29,23,22,28,19,21,16,33],
[26,0,23,29,31,32,21,28,22,29],
[22,28,0,20,24,31,19,26,21,22],
[28,22,31,0,26,28,24,29,30,23],
[29,20,27,25,0,28,24,30,26,27],
[23,19,20,23,23,0,17,24,27,19],
[32,30,32,27,27,34,0,26,22,33],
[30,23,25,22,21,27,25,0,25,25],
[35,29,30,21,25,24,29,26,0,21],
[18,22,29,28,24,32,18,26,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,15,14,13,18,25,20,19,16],
[35,0,15,12,23,26,33,32,20,15],
[36,36,0,25,19,29,38,35,22,22],
[37,39,26,0,37,22,39,32,33,28],
[38,28,32,14,0,18,41,37,25,17],
[33,25,22,29,33,0,35,32,34,18],
[26,18,13,12,10,16,0,27,15,12],
[31,19,16,19,14,19,24,0,23,18],
[32,31,29,18,26,17,36,28,0,27],
[35,36,29,23,34,33,39,33,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,30,30,32,30,21,41,41,41],
[21,0,11,31,31,21,21,31,31,42],
[21,40,0,40,31,29,10,40,40,51],
[21,20,11,0,22,11,11,31,11,11],
[19,20,20,29,0,19,11,29,19,30],
[21,30,22,40,32,0,32,40,30,32],
[30,30,41,40,40,19,0,40,30,51],
[10,20,11,20,22,11,11,0,20,11],
[10,20,11,40,32,21,21,31,0,21],
[10,9,0,40,21,19,0,40,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,32,28,25,32,34,29,30,33],
[19,0,26,34,19,24,22,27,26,27],
[19,25,0,25,32,34,30,32,33,33],
[23,17,26,0,28,36,30,37,26,35],
[26,32,19,23,0,34,32,29,25,34],
[19,27,17,15,17,0,21,22,23,26],
[17,29,21,21,19,30,0,26,27,38],
[22,24,19,14,22,29,25,0,29,25],
[21,25,18,25,26,28,24,22,0,24],
[18,24,18,16,17,25,13,26,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,26,25,22,20,28,26,24,15],
[26,0,19,22,26,22,37,25,22,21],
[25,32,0,26,28,25,32,32,27,27],
[26,29,25,0,34,18,33,33,28,24],
[29,25,23,17,0,20,29,26,24,18],
[31,29,26,33,31,0,39,28,33,17],
[23,14,19,18,22,12,0,29,18,14],
[25,26,19,18,25,23,22,0,25,16],
[27,29,24,23,27,18,33,26,0,19],
[36,30,24,27,33,34,37,35,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,21,17,22,27,20,29,28,20],
[27,0,20,21,23,29,23,39,33,17],
[30,31,0,30,22,31,22,34,33,18],
[34,30,21,0,30,32,30,36,33,28],
[29,28,29,21,0,33,21,27,29,26],
[24,22,20,19,18,0,26,25,27,23],
[31,28,29,21,30,25,0,32,29,25],
[22,12,17,15,24,26,19,0,31,17],
[23,18,18,18,22,24,22,20,0,25],
[31,34,33,23,25,28,26,34,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,25,31,29,25,21,20,25,25],
[28,0,24,30,26,29,22,23,28,27],
[26,27,0,32,30,27,29,24,27,29],
[20,21,19,0,19,22,25,19,19,21],
[22,25,21,32,0,20,26,22,23,20],
[26,22,24,29,31,0,24,26,22,24],
[30,29,22,26,25,27,0,26,23,27],
[31,28,27,32,29,25,25,0,28,31],
[26,23,24,32,28,29,28,23,0,23],
[26,24,22,30,31,27,24,20,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,24,21,22,21,20,27,23,23],
[29,0,27,23,19,22,22,29,22,24],
[27,24,0,23,20,26,19,30,26,21],
[30,28,28,0,22,22,24,32,25,24],
[29,32,31,29,0,22,26,33,28,25],
[30,29,25,29,29,0,25,29,31,30],
[31,29,32,27,25,26,0,31,29,27],
[24,22,21,19,18,22,20,0,21,21],
[28,29,25,26,23,20,22,30,0,26],
[28,27,30,27,26,21,24,30,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,34,51,51,18,51,51,34,34],
[33,0,16,33,33,18,51,33,34,34],
[17,35,0,33,51,35,51,51,51,34],
[0,18,18,0,51,18,34,34,34,34],
[0,18,0,0,0,18,18,34,34,34],
[33,33,16,33,33,0,51,33,34,34],
[0,0,0,17,33,0,0,16,34,34],
[0,18,0,17,17,18,35,0,18,34],
[17,17,0,17,17,17,17,33,0,16],
[17,17,17,17,17,17,17,17,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,20,27,23,27,30,17,19,24],
[26,0,33,20,23,27,39,26,26,28],
[31,18,0,24,17,21,20,19,13,30],
[24,31,27,0,21,20,32,21,16,30],
[28,28,34,30,0,21,29,24,28,33],
[24,24,30,31,30,0,29,18,18,23],
[21,12,31,19,22,22,0,20,24,15],
[34,25,32,30,27,33,31,0,20,31],
[32,25,38,35,23,33,27,31,0,20],
[27,23,21,21,18,28,36,20,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,19,32,27,19,25,28,26,25],
[31,0,19,22,33,21,31,29,26,21],
[32,32,0,23,26,31,31,30,22,21],
[19,29,28,0,26,30,29,28,19,27],
[24,18,25,25,0,24,26,23,29,25],
[32,30,20,21,27,0,25,32,27,31],
[26,20,20,22,25,26,0,24,25,25],
[23,22,21,23,28,19,27,0,24,17],
[25,25,29,32,22,24,26,27,0,24],
[26,30,30,24,26,20,26,34,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,20,20,26,21,20,18,18],
[28,0,23,25,26,27,17,20,18,23],
[25,28,0,31,34,28,24,24,28,30],
[31,26,20,0,21,24,26,26,22,27],
[31,25,17,30,0,27,26,24,22,24],
[25,24,23,27,24,0,22,16,24,21],
[30,34,27,25,25,29,0,28,29,29],
[31,31,27,25,27,35,23,0,25,31],
[33,33,23,29,29,27,22,26,0,27],
[33,28,21,24,27,30,22,20,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,22,27,17,20,16,28,26,34],
[26,0,25,22,17,23,22,21,16,34],
[29,26,0,20,20,30,26,25,25,25],
[24,29,31,0,18,32,25,22,21,29],
[34,34,31,33,0,26,33,26,23,34],
[31,28,21,19,25,0,28,23,19,32],
[35,29,25,26,18,23,0,31,30,30],
[23,30,26,29,25,28,20,0,23,31],
[25,35,26,30,28,32,21,28,0,34],
[17,17,26,22,17,19,21,20,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,39,24,23,23,20,25,34,24],
[31,0,31,24,20,20,27,13,39,30],
[12,20,0,19,20,23,20,25,27,10],
[27,27,32,0,29,31,19,22,27,30],
[28,31,31,22,0,26,26,39,39,29],
[28,31,28,20,25,0,23,21,31,31],
[31,24,31,32,25,28,0,26,34,26],
[26,38,26,29,12,30,25,0,43,21],
[17,12,24,24,12,20,17,8,0,24],
[27,21,41,21,22,20,25,30,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,22,23,30,28,28,27,24,28],
[19,0,12,23,21,19,21,20,21,23],
[29,39,0,29,30,27,25,31,31,25],
[28,28,22,0,26,26,26,27,24,29],
[21,30,21,25,0,23,26,26,26,25],
[23,32,24,25,28,0,31,32,28,29],
[23,30,26,25,25,20,0,26,18,28],
[24,31,20,24,25,19,25,0,21,23],
[27,30,20,27,25,23,33,30,0,23],
[23,28,26,22,26,22,23,28,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,25,28,30,31,34,34,32,31],
[18,0,23,18,23,21,26,34,34,26],
[26,28,0,28,34,30,36,32,28,25],
[23,33,23,0,25,31,33,38,31,31],
[21,28,17,26,0,23,26,35,34,25],
[20,30,21,20,28,0,34,36,35,26],
[17,25,15,18,25,17,0,33,31,23],
[17,17,19,13,16,15,18,0,26,21],
[19,17,23,20,17,16,20,25,0,23],
[20,25,26,20,26,25,28,30,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,25,29,34,31,31,29,28,34],
[23,0,24,27,28,24,26,23,25,34],
[26,27,0,26,31,28,30,23,30,31],
[22,24,25,0,28,30,27,22,26,32],
[17,23,20,23,0,26,27,20,24,31],
[20,27,23,21,25,0,24,26,22,32],
[20,25,21,24,24,27,0,24,25,29],
[22,28,28,29,31,25,27,0,27,29],
[23,26,21,25,27,29,26,24,0,32],
[17,17,20,19,20,19,22,22,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,29,25,22,28,24,31,26,25],
[22,0,26,23,25,27,25,24,30,29],
[22,25,0,20,28,25,27,29,27,28],
[26,28,31,0,30,34,25,32,28,33],
[29,26,23,21,0,25,25,27,31,30],
[23,24,26,17,26,0,21,29,30,32],
[27,26,24,26,26,30,0,28,30,29],
[20,27,22,19,24,22,23,0,23,25],
[25,21,24,23,20,21,21,28,0,27],
[26,22,23,18,21,19,22,26,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,25,33,33,16,33,25,33],
[26,0,26,27,25,34,26,34,35,35],
[26,25,0,25,25,16,24,24,33,33],
[26,24,26,0,33,24,26,32,25,33],
[18,26,26,18,0,26,18,34,18,26],
[18,17,35,27,25,0,26,35,35,33],
[35,25,27,25,33,25,0,33,33,33],
[18,17,27,19,17,16,18,0,35,25],
[26,16,18,26,33,16,18,16,0,25],
[18,16,18,18,25,18,18,26,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,33,25,30,29,29,18,26,30],
[28,0,33,23,26,31,24,26,24,31],
[18,18,0,16,23,18,21,16,16,23],
[26,28,35,0,34,33,26,21,27,29],
[21,25,28,17,0,29,25,15,23,31],
[22,20,33,18,22,0,22,20,25,25],
[22,27,30,25,26,29,0,23,24,29],
[33,25,35,30,36,31,28,0,27,29],
[25,27,35,24,28,26,27,24,0,30],
[21,20,28,22,20,26,22,22,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,23,22,30,26,21,25,21,30],
[30,0,20,19,31,27,28,22,26,33],
[28,31,0,26,37,38,28,23,30,30],
[29,32,25,0,35,24,31,27,28,30],
[21,20,14,16,0,15,23,20,25,26],
[25,24,13,27,36,0,29,16,22,27],
[30,23,23,20,28,22,0,24,27,31],
[26,29,28,24,31,35,27,0,27,31],
[30,25,21,23,26,29,24,24,0,33],
[21,18,21,21,25,24,20,20,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,28,25,27,23,28,22,28,30],
[26,0,23,21,25,24,26,28,24,30],
[23,28,0,21,25,26,30,27,26,27],
[26,30,30,0,26,25,30,24,26,26],
[24,26,26,25,0,27,36,23,24,31],
[28,27,25,26,24,0,27,27,27,27],
[23,25,21,21,15,24,0,19,22,21],
[29,23,24,27,28,24,32,0,28,28],
[23,27,25,25,27,24,29,23,0,32],
[21,21,24,25,20,24,30,23,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,31,30,29,24,30,31,30,31],
[21,0,38,43,36,23,33,33,30,30],
[20,13,0,16,28,15,22,19,14,16],
[21,8,35,0,42,24,30,28,28,31],
[22,15,23,9,0,18,19,22,19,25],
[27,28,36,27,33,0,25,29,32,28],
[21,18,29,21,32,26,0,23,31,29],
[20,18,32,23,29,22,28,0,33,26],
[21,21,37,23,32,19,20,18,0,22],
[20,21,35,20,26,23,22,25,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,18,17,20,31,23,14,25,12],
[23,0,17,6,17,24,19,13,15,11],
[33,34,0,25,26,38,30,28,23,25],
[34,45,26,0,31,39,30,22,32,21],
[31,34,25,20,0,33,28,16,25,22],
[20,27,13,12,18,0,17,18,16,16],
[28,32,21,21,23,34,0,30,28,27],
[37,38,23,29,35,33,21,0,33,25],
[26,36,28,19,26,35,23,18,0,17],
[39,40,26,30,29,35,24,26,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,26,28,32,23,27,26,23,20],
[21,0,23,23,30,23,28,27,22,19],
[25,28,0,27,38,30,32,35,25,22],
[23,28,24,0,36,30,28,29,22,28],
[19,21,13,15,0,22,25,25,14,16],
[28,28,21,21,29,0,30,29,21,19],
[24,23,19,23,26,21,0,27,22,20],
[25,24,16,22,26,22,24,0,21,22],
[28,29,26,29,37,30,29,30,0,23],
[31,32,29,23,35,32,31,29,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,23,26,18,24,21,29,22,26],
[23,0,19,22,14,20,20,18,16,16],
[28,32,0,29,25,27,23,25,29,24],
[25,29,22,0,22,26,27,25,25,22],
[33,37,26,29,0,27,30,30,28,25],
[27,31,24,25,24,0,22,29,20,24],
[30,31,28,24,21,29,0,28,29,25],
[22,33,26,26,21,22,23,0,23,21],
[29,35,22,26,23,31,22,28,0,22],
[25,35,27,29,26,27,26,30,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,29,31,24,33,28,27,26,31],
[27,0,25,32,28,32,30,29,29,27],
[22,26,0,34,26,27,28,30,26,31],
[20,19,17,0,19,17,16,23,15,23],
[27,23,25,32,0,27,31,27,23,27],
[18,19,24,34,24,0,28,28,24,25],
[23,21,23,35,20,23,0,25,21,25],
[24,22,21,28,24,23,26,0,17,30],
[25,22,25,36,28,27,30,34,0,33],
[20,24,20,28,24,26,26,21,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,34,34,32,22,26,24,34,25],
[33,0,32,34,32,24,27,29,30,25],
[17,19,0,27,25,18,23,23,31,21],
[17,17,24,0,25,19,20,27,27,28],
[19,19,26,26,0,19,24,22,31,22],
[29,27,33,32,32,0,24,27,32,27],
[25,24,28,31,27,27,0,24,36,22],
[27,22,28,24,29,24,27,0,33,22],
[17,21,20,24,20,19,15,18,0,22],
[26,26,30,23,29,24,29,29,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,35,22,35,28,30,28,25,21],
[26,0,28,30,31,31,30,27,27,24],
[16,23,0,24,30,30,23,26,24,23],
[29,21,27,0,35,30,21,27,23,25],
[16,20,21,16,0,26,20,27,17,22],
[23,20,21,21,25,0,23,25,21,22],
[21,21,28,30,31,28,0,26,22,22],
[23,24,25,24,24,26,25,0,22,22],
[26,24,27,28,34,30,29,29,0,28],
[30,27,28,26,29,29,29,29,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,23,16,28,20,41,23,23,33],
[33,0,25,33,18,26,26,25,30,34],
[28,26,0,28,21,21,44,15,20,31],
[35,18,23,0,25,20,32,18,15,27],
[23,33,30,26,0,21,34,24,16,32],
[31,25,30,31,30,0,47,19,12,38],
[10,25,7,19,17,4,0,4,8,23],
[28,26,36,33,27,32,47,0,13,39],
[28,21,31,36,35,39,43,38,0,38],
[18,17,20,24,19,13,28,12,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,19,18,28,25,16,20,24,24],
[24,0,17,19,25,31,16,21,27,22],
[32,34,0,27,25,31,26,30,30,22],
[33,32,24,0,33,25,20,28,35,26],
[23,26,26,18,0,22,20,31,29,13],
[26,20,20,26,29,0,19,30,33,24],
[35,35,25,31,31,32,0,33,30,24],
[31,30,21,23,20,21,18,0,28,16],
[27,24,21,16,22,18,21,23,0,15],
[27,29,29,25,38,27,27,35,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,25,22,27,20,30,16,30,22],
[21,0,23,18,27,18,27,12,23,26],
[26,28,0,36,24,19,28,30,22,17],
[29,33,15,0,29,24,23,18,24,25],
[24,24,27,22,0,22,29,22,27,12],
[31,33,32,27,29,0,35,21,34,29],
[21,24,23,28,22,16,0,25,21,21],
[35,39,21,33,29,30,26,0,30,30],
[21,28,29,27,24,17,30,21,0,23],
[29,25,34,26,39,22,30,21,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,33,26,25,25,28,25,24,26],
[14,0,26,24,23,19,24,21,26,17],
[18,25,0,21,18,16,27,18,21,25],
[25,27,30,0,23,18,28,24,22,19],
[26,28,33,28,0,20,24,27,25,25],
[26,32,35,33,31,0,37,22,27,27],
[23,27,24,23,27,14,0,23,19,20],
[26,30,33,27,24,29,28,0,28,24],
[27,25,30,29,26,24,32,23,0,22],
[25,34,26,32,26,24,31,27,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,38,42,32,23,35,28,26],
[12,0,10,23,29,24,25,29,12,16],
[12,41,0,25,25,30,19,26,6,24],
[13,28,26,0,31,32,22,22,13,27],
[9,22,26,20,0,18,22,21,9,18],
[19,27,21,19,33,0,24,22,16,28],
[28,26,32,29,29,27,0,25,30,33],
[16,22,25,29,30,29,26,0,21,26],
[23,39,45,38,42,35,21,30,0,25],
[25,35,27,24,33,23,18,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,25,23,27,25,31,24,31,27],
[30,0,27,26,35,34,31,22,27,31],
[26,24,0,27,28,29,31,33,21,34],
[28,25,24,0,29,29,32,25,29,26],
[24,16,23,22,0,25,28,17,20,22],
[26,17,22,22,26,0,25,16,24,25],
[20,20,20,19,23,26,0,21,20,21],
[27,29,18,26,34,35,30,0,28,28],
[20,24,30,22,31,27,31,23,0,30],
[24,20,17,25,29,26,30,23,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,26,28,27,22,32,25,28,30],
[29,0,24,26,26,24,32,23,27,27],
[25,27,0,25,21,22,33,23,27,23],
[23,25,26,0,25,25,29,27,27,27],
[24,25,30,26,0,23,30,24,26,27],
[29,27,29,26,28,0,34,24,26,33],
[19,19,18,22,21,17,0,23,21,21],
[26,28,28,24,27,27,28,0,26,27],
[23,24,24,24,25,25,30,25,0,25],
[21,24,28,24,24,18,30,24,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,28,30,30,16,15,17,22,20],
[26,0,34,24,33,25,24,25,24,26],
[23,17,0,19,21,13,15,19,19,15],
[21,27,32,0,32,24,20,23,18,21],
[21,18,30,19,0,16,19,23,19,18],
[35,26,38,27,35,0,21,27,28,32],
[36,27,36,31,32,30,0,32,23,28],
[34,26,32,28,28,24,19,0,18,19],
[29,27,32,33,32,23,28,33,0,20],
[31,25,36,30,33,19,23,32,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,27,25,37,33,32,23,19,27],
[16,0,20,26,23,27,23,24,27,26],
[24,31,0,30,21,23,28,33,22,31],
[26,25,21,0,28,26,21,33,24,23],
[14,28,30,23,0,27,29,22,18,27],
[18,24,28,25,24,0,34,22,11,29],
[19,28,23,30,22,17,0,21,15,21],
[28,27,18,18,29,29,30,0,23,17],
[32,24,29,27,33,40,36,28,0,29],
[24,25,20,28,24,22,30,34,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,27,23,37,32,24,29,28,29],
[15,0,17,29,30,22,22,19,20,27],
[24,34,0,28,33,33,26,34,31,34],
[28,22,23,0,33,28,27,31,28,33],
[14,21,18,18,0,25,20,23,30,23],
[19,29,18,23,26,0,17,25,27,26],
[27,29,25,24,31,34,0,37,31,26],
[22,32,17,20,28,26,14,0,29,26],
[23,31,20,23,21,24,20,22,0,27],
[22,24,17,18,28,25,25,25,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,23,14,17,28,19,14,18,24],
[31,0,31,30,35,33,26,24,31,30],
[28,20,0,28,24,31,25,20,33,33],
[37,21,23,0,24,28,19,18,21,30],
[34,16,27,27,0,28,28,22,28,30],
[23,18,20,23,23,0,19,25,25,28],
[32,25,26,32,23,32,0,28,26,27],
[37,27,31,33,29,26,23,0,32,40],
[33,20,18,30,23,26,25,19,0,27],
[27,21,18,21,21,23,24,11,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,23,27,24,19,25,20,24,28],
[26,0,20,39,33,22,26,23,16,36],
[28,31,0,24,23,28,25,20,22,39],
[24,12,27,0,21,19,25,30,14,26],
[27,18,28,30,0,14,24,25,21,27],
[32,29,23,32,37,0,27,24,26,30],
[26,25,26,26,27,24,0,28,28,29],
[31,28,31,21,26,27,23,0,26,28],
[27,35,29,37,30,25,23,25,0,41],
[23,15,12,25,24,21,22,23,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,22,17,28,30,26,25,22,17],
[31,0,23,28,29,28,20,25,26,25],
[29,28,0,31,33,31,22,29,24,22],
[34,23,20,0,29,32,23,24,22,19],
[23,22,18,22,0,30,22,24,16,15],
[21,23,20,19,21,0,23,22,20,18],
[25,31,29,28,29,28,0,24,25,23],
[26,26,22,27,27,29,27,0,17,24],
[29,25,27,29,35,31,26,34,0,28],
[34,26,29,32,36,33,28,27,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,20,22,23,22,26,27,27],
[27,0,25,26,28,27,29,32,29,32],
[27,26,0,22,21,23,29,24,24,34],
[31,25,29,0,26,24,30,23,23,29],
[29,23,30,25,0,18,26,28,25,28],
[28,24,28,27,33,0,26,27,30,30],
[29,22,22,21,25,25,0,27,25,26],
[25,19,27,28,23,24,24,0,25,30],
[24,22,27,28,26,21,26,26,0,30],
[24,19,17,22,23,21,25,21,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,28,22,21,25,25,42,33,33],
[19,0,27,22,16,23,21,34,25,22],
[23,24,0,16,14,19,27,32,27,32],
[29,29,35,0,26,30,23,40,36,33],
[30,35,37,25,0,26,28,41,33,33],
[26,28,32,21,25,0,27,34,29,30],
[26,30,24,28,23,24,0,36,31,25],
[9,17,19,11,10,17,15,0,14,22],
[18,26,24,15,18,22,20,37,0,25],
[18,29,19,18,18,21,26,29,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,17,27,26,19,15,31,27,24],
[28,0,26,24,23,20,20,31,27,24],
[34,25,0,28,29,22,23,33,27,27],
[24,27,23,0,26,18,19,30,26,26],
[25,28,22,25,0,19,23,27,27,25],
[32,31,29,33,32,0,24,29,34,28],
[36,31,28,32,28,27,0,33,30,24],
[20,20,18,21,24,22,18,0,26,21],
[24,24,24,25,24,17,21,25,0,21],
[27,27,24,25,26,23,27,30,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,22,34,30,19,40,38,22,41],
[13,0,28,29,33,23,34,37,28,25],
[29,23,0,32,33,17,33,41,34,27],
[17,22,19,0,25,17,39,42,19,27],
[21,18,18,26,0,26,30,40,21,26],
[32,28,34,34,25,0,44,43,31,28],
[11,17,18,12,21,7,0,30,13,17],
[13,14,10,9,11,8,21,0,5,13],
[29,23,17,32,30,20,38,46,0,27],
[10,26,24,24,25,23,34,38,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,31,30,18,29,22,33,28,23],
[29,0,28,28,22,30,23,32,22,20],
[20,23,0,28,19,30,24,29,23,23],
[21,23,23,0,23,25,20,31,12,25],
[33,29,32,28,0,34,27,35,29,25],
[22,21,21,26,17,0,18,28,21,23],
[29,28,27,31,24,33,0,35,25,29],
[18,19,22,20,16,23,16,0,17,22],
[23,29,28,39,22,30,26,34,0,26],
[28,31,28,26,26,28,22,29,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,32,19,27,20,26,32,25,38],
[26,0,32,20,27,28,26,34,27,27],
[19,19,0,6,25,21,21,34,12,33],
[32,31,45,0,32,33,39,39,24,45],
[24,24,26,19,0,20,19,33,11,32],
[31,23,30,18,31,0,23,45,18,32],
[25,25,30,12,32,28,0,40,18,33],
[19,17,17,12,18,6,11,0,12,20],
[26,24,39,27,40,33,33,39,0,34],
[13,24,18,6,19,19,18,31,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,33,28,25,35,36,27,35,26],
[17,0,24,24,25,28,25,24,33,25],
[18,27,0,21,26,29,24,18,31,24],
[23,27,30,0,29,34,30,25,36,30],
[26,26,25,22,0,37,31,26,36,29],
[16,23,22,17,14,0,19,22,25,24],
[15,26,27,21,20,32,0,22,26,22],
[24,27,33,26,25,29,29,0,33,29],
[16,18,20,15,15,26,25,18,0,19],
[25,26,27,21,22,27,29,22,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,20,30,30,19,30,40,20,31],
[21,0,30,9,20,30,9,19,31,20],
[31,21,0,10,41,31,10,31,32,21],
[21,42,41,0,51,21,30,42,31,22],
[21,31,10,0,0,21,10,10,22,11],
[32,21,20,30,30,0,30,31,30,32],
[21,42,41,21,41,21,0,32,31,22],
[11,32,20,9,41,20,19,0,31,11],
[31,20,19,20,29,21,20,20,0,31],
[20,31,30,29,40,19,29,40,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,28,29,28,31,28,25,31,32],
[18,0,17,21,17,28,20,17,27,23],
[23,34,0,29,19,28,23,27,30,24],
[22,30,22,0,20,27,23,21,25,28],
[23,34,32,31,0,33,25,27,32,27],
[20,23,23,24,18,0,21,18,28,22],
[23,31,28,28,26,30,0,24,33,27],
[26,34,24,30,24,33,27,0,29,25],
[20,24,21,26,19,23,18,22,0,29],
[19,28,27,23,24,29,24,26,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,19,24,23,23,20,23,23,24],
[29,0,22,29,25,29,24,23,22,25],
[32,29,0,28,25,29,27,29,32,26],
[27,22,23,0,26,30,24,24,25,27],
[28,26,26,25,0,29,26,25,29,27],
[28,22,22,21,22,0,23,22,19,25],
[31,27,24,27,25,28,0,24,25,26],
[28,28,22,27,26,29,27,0,23,27],
[28,29,19,26,22,32,26,28,0,29],
[27,26,25,24,24,26,25,24,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,35,26,28,24,24,32,23,30],
[24,0,26,28,22,14,22,31,24,30],
[16,25,0,25,21,19,23,23,21,28],
[25,23,26,0,18,15,20,25,19,30],
[23,29,30,33,0,27,26,33,25,31],
[27,37,32,36,24,0,27,34,24,36],
[27,29,28,31,25,24,0,30,30,30],
[19,20,28,26,18,17,21,0,24,27],
[28,27,30,32,26,27,21,27,0,33],
[21,21,23,21,20,15,21,24,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,21,23,25,12,34,24,24],
[27,0,23,21,20,27,10,28,27,33],
[27,28,0,28,28,28,27,34,16,27],
[30,30,23,0,29,25,11,40,24,30],
[28,31,23,22,0,24,18,40,23,33],
[26,24,23,26,27,0,21,28,39,26],
[39,41,24,40,33,30,0,40,34,34],
[17,23,17,11,11,23,11,0,17,28],
[27,24,35,27,28,12,17,34,0,27],
[27,18,24,21,18,25,17,23,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,30,27,34,34,35,35,30,25],
[19,0,25,13,30,18,17,33,23,10],
[21,26,0,24,21,25,24,29,23,17],
[24,38,27,0,29,27,25,36,23,20],
[17,21,30,22,0,21,18,30,19,25],
[17,33,26,24,30,0,12,27,22,12],
[16,34,27,26,33,39,0,41,23,26],
[16,18,22,15,21,24,10,0,33,21],
[21,28,28,28,32,29,28,18,0,27],
[26,41,34,31,26,39,25,30,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,32,33,18,27,41,28,33,28],
[19,0,23,20,10,24,29,29,25,20],
[19,28,0,24,19,28,28,19,24,33],
[18,31,27,0,31,24,31,28,32,18],
[33,41,32,20,0,24,36,33,32,28],
[24,27,23,27,27,0,32,23,28,29],
[10,22,23,20,15,19,0,14,24,14],
[23,22,32,23,18,28,37,0,23,32],
[18,26,27,19,19,23,27,28,0,23],
[23,31,18,33,23,22,37,19,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,25,22,24,23,28,27,25,23],
[30,0,26,22,28,26,26,24,26,27],
[26,25,0,24,26,24,33,31,32,28],
[29,29,27,0,24,24,35,28,28,26],
[27,23,25,27,0,25,27,34,24,29],
[28,25,27,27,26,0,28,31,21,29],
[23,25,18,16,24,23,0,25,16,26],
[24,27,20,23,17,20,26,0,22,28],
[26,25,19,23,27,30,35,29,0,30],
[28,24,23,25,22,22,25,23,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,27,30,35,26,32,28,30,25],
[20,0,18,28,24,26,24,22,24,30],
[24,33,0,33,33,31,29,25,31,27],
[21,23,18,0,26,24,19,21,19,21],
[16,27,18,25,0,22,23,25,23,13],
[25,25,20,27,29,0,27,20,22,26],
[19,27,22,32,28,24,0,26,29,32],
[23,29,26,30,26,31,25,0,30,30],
[21,27,20,32,28,29,22,21,0,28],
[26,21,24,30,38,25,19,21,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,27,30,29,28,19,23,25],
[23,0,25,31,26,28,28,25,27,28],
[25,26,0,27,27,27,29,26,26,25],
[24,20,24,0,28,24,23,22,22,22],
[21,25,24,23,0,25,23,22,25,19],
[22,23,24,27,26,0,30,22,25,22],
[23,23,22,28,28,21,0,23,27,24],
[32,26,25,29,29,29,28,0,27,27],
[28,24,25,29,26,26,24,24,0,25],
[26,23,26,29,32,29,27,24,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,26,27,17,31,36,34,36,31],
[24,0,27,31,16,28,27,20,31,31],
[25,24,0,20,26,33,41,33,42,27],
[24,20,31,0,15,31,28,28,31,31],
[34,35,25,36,0,36,36,36,38,38],
[20,23,18,20,15,0,32,21,23,28],
[15,24,10,23,15,19,0,23,32,25],
[17,31,18,23,15,30,28,0,32,23],
[15,20,9,20,13,28,19,19,0,27],
[20,20,24,20,13,23,26,28,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,26,23,23,25,20,23,18],
[28,0,25,32,24,25,30,28,28,21],
[25,26,0,30,29,31,24,28,32,17],
[25,19,21,0,18,29,26,26,25,13],
[28,27,22,33,0,35,29,24,29,27],
[28,26,20,22,16,0,20,29,24,18],
[26,21,27,25,22,31,0,22,25,18],
[31,23,23,25,27,22,29,0,25,20],
[28,23,19,26,22,27,26,26,0,19],
[33,30,34,38,24,33,33,31,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,30,33,27,26,24,29,23,28],
[25,0,26,25,28,24,24,23,21,21],
[21,25,0,27,24,26,19,18,26,22],
[18,26,24,0,21,21,20,18,26,23],
[24,23,27,30,0,20,19,24,24,24],
[25,27,25,30,31,0,17,21,24,23],
[27,27,32,31,32,34,0,23,25,30],
[22,28,33,33,27,30,28,0,27,31],
[28,30,25,25,27,27,26,24,0,26],
[23,30,29,28,27,28,21,20,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,29,22,21,30,20,26,30],
[28,0,35,31,34,34,34,24,31,37],
[25,16,0,21,25,18,21,20,25,22],
[22,20,30,0,17,18,31,22,26,24],
[29,17,26,34,0,19,30,28,29,30],
[30,17,33,33,32,0,34,21,34,31],
[21,17,30,20,21,17,0,21,26,23],
[31,27,31,29,23,30,30,0,24,27],
[25,20,26,25,22,17,25,27,0,31],
[21,14,29,27,21,20,28,24,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,21,23,24,26,28,29,23,27],
[30,0,24,29,32,26,34,27,30,32],
[30,27,0,27,23,25,31,28,28,26],
[28,22,24,0,27,29,31,25,23,29],
[27,19,28,24,0,22,25,23,26,30],
[25,25,26,22,29,0,27,28,27,29],
[23,17,20,20,26,24,0,23,20,19],
[22,24,23,26,28,23,28,0,22,27],
[28,21,23,28,25,24,31,29,0,29],
[24,19,25,22,21,22,32,24,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,23,29,27,29,28,23,29,29],
[29,0,23,22,27,30,27,27,26,25],
[28,28,0,23,25,24,27,25,25,24],
[22,29,28,0,27,27,27,27,28,20],
[24,24,26,24,0,24,24,22,25,19],
[22,21,27,24,27,0,22,20,25,22],
[23,24,24,24,27,29,0,21,29,25],
[28,24,26,24,29,31,30,0,27,24],
[22,25,26,23,26,26,22,24,0,23],
[22,26,27,31,32,29,26,27,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,17,24,31,23,30,30,26,24],
[27,0,23,27,36,30,30,27,26,24],
[34,28,0,33,36,42,30,34,23,16],
[27,24,18,0,27,30,35,27,23,13],
[20,15,15,24,0,25,23,29,18,15],
[28,21,9,21,26,0,28,17,19,14],
[21,21,21,16,28,23,0,27,16,8],
[21,24,17,24,22,34,24,0,16,17],
[25,25,28,28,33,32,35,35,0,27],
[27,27,35,38,36,37,43,34,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,33,24,33,20,18,27,31,31],
[37,0,38,36,25,24,18,36,31,38],
[18,13,0,17,24,18,17,18,24,30],
[27,15,34,0,34,27,27,27,33,32],
[18,26,27,17,0,11,19,18,18,32],
[31,27,33,24,40,0,19,26,19,32],
[33,33,34,24,32,32,0,38,38,32],
[24,15,33,24,33,25,13,0,24,32],
[20,20,27,18,33,32,13,27,0,32],
[20,13,21,19,19,19,19,19,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,26,29,34,19,16,29,36,17],
[12,0,16,22,27,18,18,24,25,14],
[25,35,0,22,38,17,21,28,32,21],
[22,29,29,0,37,34,34,34,32,24],
[17,24,13,14,0,19,18,29,34,15],
[32,33,34,17,32,0,36,35,37,30],
[35,33,30,17,33,15,0,39,40,16],
[22,27,23,17,22,16,12,0,37,13],
[15,26,19,19,17,14,11,14,0,7],
[34,37,30,27,36,21,35,38,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,27,18,28,24,23,36,22,23],
[23,0,21,19,29,12,18,24,12,22],
[24,30,0,15,12,14,12,22,7,18],
[33,32,36,0,35,23,21,30,24,32],
[23,22,39,16,0,22,24,21,21,26],
[27,39,37,28,29,0,26,34,24,37],
[28,33,39,30,27,25,0,25,26,30],
[15,27,29,21,30,17,26,0,20,27],
[29,39,44,27,30,27,25,31,0,34],
[28,29,33,19,25,14,21,24,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,29,28,31,30,28,25,38,32],
[25,0,27,28,27,30,32,28,29,27],
[22,24,0,25,29,28,25,21,32,28],
[23,23,26,0,30,27,29,22,28,28],
[20,24,22,21,0,24,22,21,25,19],
[21,21,23,24,27,0,24,26,24,24],
[23,19,26,22,29,27,0,23,24,25],
[26,23,30,29,30,25,28,0,27,29],
[13,22,19,23,26,27,27,24,0,25],
[19,24,23,23,32,27,26,22,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,36,26,40,34,37,22,26,28],
[20,0,9,19,28,18,21,11,31,21],
[15,42,0,25,35,29,31,17,30,21],
[25,32,26,0,34,34,42,21,41,16],
[11,23,16,17,0,18,17,23,32,11],
[17,33,22,17,33,0,22,28,27,22],
[14,30,20,9,34,29,0,16,20,20],
[29,40,34,30,28,23,35,0,34,25],
[25,20,21,10,19,24,31,17,0,16],
[23,30,30,35,40,29,31,26,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,30,30,28,27,24,33,31,29],
[23,0,29,28,27,32,33,32,30,25],
[21,22,0,19,19,23,23,31,30,30],
[21,23,32,0,20,22,24,34,25,26],
[23,24,32,31,0,34,24,34,35,27],
[24,19,28,29,17,0,22,30,23,26],
[27,18,28,27,27,29,0,30,30,29],
[18,19,20,17,17,21,21,0,28,23],
[20,21,21,26,16,28,21,23,0,24],
[22,26,21,25,24,25,22,28,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,25,20,23,22,19,31,26,24],
[32,0,33,31,31,25,27,29,33,25],
[26,18,0,31,29,25,25,28,23,18],
[31,20,20,0,19,16,17,28,29,25],
[28,20,22,32,0,37,23,37,31,24],
[29,26,26,35,14,0,19,29,37,18],
[32,24,26,34,28,32,0,28,34,27],
[20,22,23,23,14,22,23,0,26,20],
[25,18,28,22,20,14,17,25,0,17],
[27,26,33,26,27,33,24,31,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,36,21,13,24,20,19,19,19],
[29,0,29,29,27,22,29,17,17,18],
[15,22,0,16,15,16,11,15,15,14],
[30,22,35,0,19,24,25,18,15,28],
[38,24,36,32,0,30,28,30,26,24],
[27,29,35,27,21,0,29,14,21,25],
[31,22,40,26,23,22,0,17,19,34],
[32,34,36,33,21,37,34,0,21,30],
[32,34,36,36,25,30,32,30,0,34],
[32,33,37,23,27,26,17,21,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,21,34,33,29,28,33,37,36],
[19,0,27,26,28,22,19,27,31,26],
[30,24,0,24,20,21,26,31,30,25],
[17,25,27,0,16,24,15,22,19,21],
[18,23,31,35,0,31,24,30,28,25],
[22,29,30,27,20,0,21,35,28,26],
[23,32,25,36,27,30,0,34,29,27],
[18,24,20,29,21,16,17,0,18,19],
[14,20,21,32,23,23,22,33,0,21],
[15,25,26,30,26,25,24,32,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,35,36,36,20,36,20,51,35],
[15,0,35,31,16,15,31,0,31,15],
[16,16,0,16,16,0,16,16,16,16],
[15,20,35,0,36,20,16,20,31,35],
[15,35,35,15,0,15,15,15,31,35],
[31,36,51,31,36,0,16,36,31,51],
[15,20,35,35,36,35,0,20,31,35],
[31,51,35,31,36,15,31,0,31,51],
[0,20,35,20,20,20,20,20,0,35],
[16,36,35,16,16,0,16,0,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,25,18,27,15,15,17,24,27],
[30,0,29,27,25,27,28,24,30,24],
[26,22,0,20,32,25,23,22,28,24],
[33,24,31,0,29,24,24,28,33,29],
[24,26,19,22,0,20,19,16,23,19],
[36,24,26,27,31,0,30,19,28,28],
[36,23,28,27,32,21,0,19,25,24],
[34,27,29,23,35,32,32,0,29,29],
[27,21,23,18,28,23,26,22,0,31],
[24,27,27,22,32,23,27,22,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,18,29,29,23,25,28,27,27],
[27,0,23,21,21,20,22,23,26,17],
[33,28,0,25,35,30,25,38,34,32],
[22,30,26,0,32,25,26,31,31,30],
[22,30,16,19,0,23,20,23,22,24],
[28,31,21,26,28,0,32,34,25,28],
[26,29,26,25,31,19,0,33,30,30],
[23,28,13,20,28,17,18,0,23,17],
[24,25,17,20,29,26,21,28,0,26],
[24,34,19,21,27,23,21,34,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,22,17,22,14,25,21,21,26],
[23,0,18,17,28,15,23,18,23,27],
[29,33,0,25,31,13,30,20,22,26],
[34,34,26,0,35,27,32,29,30,23],
[29,23,20,16,0,12,25,13,23,21],
[37,36,38,24,39,0,37,30,33,29],
[26,28,21,19,26,14,0,24,21,25],
[30,33,31,22,38,21,27,0,29,27],
[30,28,29,21,28,18,30,22,0,29],
[25,24,25,28,30,22,26,24,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,32,30,39,29,22,40,30,26],
[18,0,22,25,28,23,17,41,21,18],
[19,29,0,21,24,20,15,35,26,18],
[21,26,30,0,25,18,24,39,23,26],
[12,23,27,26,0,15,12,33,20,23],
[22,28,31,33,36,0,28,46,22,36],
[29,34,36,27,39,23,0,38,26,23],
[11,10,16,12,18,5,13,0,13,16],
[21,30,25,28,31,29,25,38,0,31],
[25,33,33,25,28,15,28,35,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,30,24,24,25,25,18,23,29],
[28,0,25,20,25,21,18,17,17,26],
[21,26,0,27,19,14,22,21,23,26],
[27,31,24,0,26,25,22,22,29,27],
[27,26,32,25,0,30,26,25,23,32],
[26,30,37,26,21,0,31,28,26,39],
[26,33,29,29,25,20,0,22,26,32],
[33,34,30,29,26,23,29,0,22,30],
[28,34,28,22,28,25,25,29,0,32],
[22,25,25,24,19,12,19,21,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,19,19,25,24,27,19,23,19],
[31,0,24,28,30,29,30,26,31,28],
[32,27,0,25,30,30,31,23,25,21],
[32,23,26,0,31,33,38,26,29,24],
[26,21,21,20,0,30,27,22,21,21],
[27,22,21,18,21,0,28,24,21,20],
[24,21,20,13,24,23,0,23,20,19],
[32,25,28,25,29,27,28,0,25,24],
[28,20,26,22,30,30,31,26,0,23],
[32,23,30,27,30,31,32,27,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,18,26,14,17,14,21,19,17],
[31,0,22,35,23,25,23,26,35,20],
[33,29,0,36,26,16,27,29,24,24],
[25,16,15,0,18,14,11,16,17,19],
[37,28,25,33,0,24,25,33,33,21],
[34,26,35,37,27,0,31,34,34,20],
[37,28,24,40,26,20,0,33,33,26],
[30,25,22,35,18,17,18,0,28,24],
[32,16,27,34,18,17,18,23,0,25],
[34,31,27,32,30,31,25,27,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,26,29,23,18,20,22,15,17],
[29,0,35,28,32,31,33,22,26,33],
[25,16,0,19,21,14,14,16,23,19],
[22,23,32,0,27,23,25,22,22,28],
[28,19,30,24,0,23,19,24,27,23],
[33,20,37,28,28,0,29,27,29,29],
[31,18,37,26,32,22,0,24,31,29],
[29,29,35,29,27,24,27,0,30,32],
[36,25,28,29,24,22,20,21,0,18],
[34,18,32,23,28,22,22,19,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,33,32,16,31,19,24,34,31],
[27,0,26,23,21,25,26,34,43,38],
[18,25,0,29,13,19,15,19,26,27],
[19,28,22,0,21,25,21,25,27,30],
[35,30,38,30,0,30,23,38,37,38],
[20,26,32,26,21,0,21,33,34,33],
[32,25,36,30,28,30,0,35,41,33],
[27,17,32,26,13,18,16,0,33,25],
[17,8,25,24,14,17,10,18,0,21],
[20,13,24,21,13,18,18,26,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,20,18,40,28,8,10,18,40],
[23,0,10,23,33,23,23,33,23,23],
[31,41,0,31,41,31,31,23,31,31],
[33,28,20,0,51,20,19,22,18,30],
[11,18,10,0,0,10,8,10,18,20],
[23,28,20,31,41,0,19,22,18,31],
[43,28,20,32,43,32,0,32,32,32],
[41,18,28,29,41,29,19,0,19,41],
[33,28,20,33,33,33,19,32,0,33],
[11,28,20,21,31,20,19,10,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,33,26,26,23,25,26,29,27],
[29,0,31,24,20,19,24,32,25,30],
[18,20,0,17,18,17,21,19,19,23],
[25,27,34,0,26,26,26,30,33,28],
[25,31,33,25,0,22,25,31,25,27],
[28,32,34,25,29,0,28,33,28,37],
[26,27,30,25,26,23,0,28,28,29],
[25,19,32,21,20,18,23,0,30,28],
[22,26,32,18,26,23,23,21,0,25],
[24,21,28,23,24,14,22,23,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,21,25,27,27,21,32,25,25],
[25,0,27,23,36,28,25,29,25,32],
[30,24,0,24,35,31,21,32,21,26],
[26,28,27,0,35,30,24,30,28,32],
[24,15,16,16,0,18,21,18,16,26],
[24,23,20,21,33,0,25,30,25,34],
[30,26,30,27,30,26,0,33,22,34],
[19,22,19,21,33,21,18,0,17,23],
[26,26,30,23,35,26,29,34,0,34],
[26,19,25,19,25,17,17,28,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,28,29,26,22,23,31,22,26],
[29,0,29,27,29,27,28,28,25,27],
[23,22,0,27,28,29,22,31,28,30],
[22,24,24,0,27,22,24,24,22,27],
[25,22,23,24,0,20,23,27,26,21],
[29,24,22,29,31,0,22,29,25,26],
[28,23,29,27,28,29,0,30,22,27],
[20,23,20,27,24,22,21,0,26,23],
[29,26,23,29,25,26,29,25,0,27],
[25,24,21,24,30,25,24,28,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,32,29,33,26,25,31,28,22],
[23,0,32,24,34,29,27,28,28,27],
[19,19,0,24,27,20,23,24,28,23],
[22,27,27,0,26,22,22,27,26,25],
[18,17,24,25,0,22,17,20,20,22],
[25,22,31,29,29,0,19,25,25,25],
[26,24,28,29,34,32,0,25,27,29],
[20,23,27,24,31,26,26,0,22,21],
[23,23,23,25,31,26,24,29,0,25],
[29,24,28,26,29,26,22,30,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,35,18,22,15,28,17,33,35],
[41,0,35,25,29,27,35,29,40,45],
[16,16,0,24,16,16,29,18,39,34],
[33,26,27,0,21,21,21,21,39,33],
[29,22,35,30,0,12,18,19,40,29],
[36,24,35,30,39,0,34,17,28,41],
[23,16,22,30,33,17,0,22,40,34],
[34,22,33,30,32,34,29,0,46,29],
[18,11,12,12,11,23,11,5,0,28],
[16,6,17,18,22,10,17,22,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,36,36,29,36,26,27,23,28],
[15,0,28,27,24,30,15,20,16,22],
[15,23,0,26,27,18,22,25,20,18],
[15,24,25,0,20,34,15,22,17,17],
[22,27,24,31,0,18,25,14,27,18],
[15,21,33,17,33,0,10,22,17,19],
[25,36,29,36,26,41,0,35,23,28],
[24,31,26,29,37,29,16,0,29,26],
[28,35,31,34,24,34,28,22,0,20],
[23,29,33,34,33,32,23,25,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,24,27,27,30,31,26,29,29],
[21,0,24,24,31,22,25,26,22,28],
[27,27,0,25,30,31,32,37,35,33],
[24,27,26,0,26,23,25,27,22,25],
[24,20,21,25,0,21,28,21,23,25],
[21,29,20,28,30,0,32,35,28,26],
[20,26,19,26,23,19,0,23,24,16],
[25,25,14,24,30,16,28,0,22,22],
[22,29,16,29,28,23,27,29,0,23],
[22,23,18,26,26,25,35,29,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,25,22,20,24,22,27,19,26],
[30,0,22,27,27,30,24,24,25,27],
[26,29,0,29,27,26,25,21,28,25],
[29,24,22,0,21,25,20,21,23,23],
[31,24,24,30,0,24,20,27,28,23],
[27,21,25,26,27,0,26,25,22,21],
[29,27,26,31,31,25,0,29,25,29],
[24,27,30,30,24,26,22,0,25,27],
[32,26,23,28,23,29,26,26,0,28],
[25,24,26,28,28,30,22,24,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,28,35,37,29,41,39,32,35],
[27,0,25,26,38,25,42,40,27,31],
[23,26,0,23,25,24,33,27,28,27],
[16,25,28,0,21,30,31,24,27,30],
[14,13,26,30,0,16,32,25,22,27],
[22,26,27,21,35,0,40,28,28,31],
[10,9,18,20,19,11,0,24,17,24],
[12,11,24,27,26,23,27,0,23,30],
[19,24,23,24,29,23,34,28,0,27],
[16,20,24,21,24,20,27,21,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,31,24,19,20,25,31,24,24],
[17,0,33,22,11,21,20,26,22,21],
[20,18,0,17,10,18,18,24,22,13],
[27,29,34,0,26,22,26,28,31,26],
[32,40,41,25,0,23,22,24,29,26],
[31,30,33,29,28,0,35,33,22,31],
[26,31,33,25,29,16,0,32,20,24],
[20,25,27,23,27,18,19,0,22,17],
[27,29,29,20,22,29,31,29,0,27],
[27,30,38,25,25,20,27,34,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,22,18,21,23,27,21,28,24],
[22,0,29,25,26,23,20,25,27,23],
[29,22,0,32,28,29,25,27,29,27],
[33,26,19,0,24,25,30,26,33,26],
[30,25,23,27,0,30,31,25,25,23],
[28,28,22,26,21,0,24,26,29,29],
[24,31,26,21,20,27,0,21,24,22],
[30,26,24,25,26,25,30,0,27,31],
[23,24,22,18,26,22,27,24,0,25],
[27,28,24,25,28,22,29,20,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,26,23,28,28,17,19,24,23],
[27,0,21,10,14,17,19,14,18,21],
[25,30,0,18,24,27,20,10,23,32],
[28,41,33,0,34,25,32,32,38,39],
[23,37,27,17,0,17,26,28,30,31],
[23,34,24,26,34,0,24,26,28,29],
[34,32,31,19,25,27,0,30,29,30],
[32,37,41,19,23,25,21,0,31,35],
[27,33,28,13,21,23,22,20,0,35],
[28,30,19,12,20,22,21,16,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,25,33,15,27,14,25,20,25],
[35,0,30,33,20,35,26,27,25,28],
[26,21,0,30,8,24,14,18,21,21],
[18,18,21,0,16,30,14,19,15,21],
[36,31,43,35,0,30,29,31,25,30],
[24,16,27,21,21,0,18,25,16,23],
[37,25,37,37,22,33,0,30,31,31],
[26,24,33,32,20,26,21,0,22,17],
[31,26,30,36,26,35,20,29,0,27],
[26,23,30,30,21,28,20,34,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,22,18,15,30,14,20,29,30],
[22,0,24,21,21,25,17,18,30,31],
[29,27,0,17,27,30,18,16,34,35],
[33,30,34,0,29,28,24,27,35,38],
[36,30,24,22,0,26,24,22,32,32],
[21,26,21,23,25,0,23,22,30,36],
[37,34,33,27,27,28,0,23,34,32],
[31,33,35,24,29,29,28,0,33,41],
[22,21,17,16,19,21,17,18,0,26],
[21,20,16,13,19,15,19,10,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,34,32,29,27,30,26,23,26],
[24,0,27,23,25,23,21,23,19,19],
[17,24,0,24,19,23,24,19,20,19],
[19,28,27,0,23,20,23,25,21,19],
[22,26,32,28,0,24,25,25,27,19],
[24,28,28,31,27,0,33,31,27,22],
[21,30,27,28,26,18,0,28,24,21],
[25,28,32,26,26,20,23,0,26,24],
[28,32,31,30,24,24,27,25,0,25],
[25,32,32,32,32,29,30,27,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,26,32,35,31,25,26,38,26],
[9,0,9,9,9,9,14,9,18,9],
[25,42,0,23,26,34,27,39,27,11],
[19,42,28,0,18,26,22,29,23,19],
[16,42,25,33,0,27,21,33,27,18],
[20,42,17,25,24,0,13,25,22,15],
[26,37,24,29,30,38,0,26,27,24],
[25,42,12,22,18,26,25,0,31,12],
[13,33,24,28,24,29,24,20,0,19],
[25,42,40,32,33,36,27,39,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,22,11,19,23,23,22,20,26],
[23,0,20,25,15,25,27,20,21,24],
[29,31,0,21,27,21,28,24,24,27],
[40,26,30,0,26,19,19,18,24,22],
[32,36,24,25,0,24,24,34,27,31],
[28,26,30,32,27,0,19,30,18,23],
[28,24,23,32,27,32,0,21,27,17],
[29,31,27,33,17,21,30,0,23,21],
[31,30,27,27,24,33,24,28,0,35],
[25,27,24,29,20,28,34,30,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,35,51,51,17,35,51,35,35],
[0,0,18,16,0,0,18,18,35,18],
[16,33,0,16,33,17,35,51,17,0],
[0,35,35,0,17,17,35,35,35,18],
[0,51,18,34,0,17,35,51,35,18],
[34,51,34,34,34,0,35,51,35,18],
[16,33,16,16,16,16,0,51,17,0],
[0,33,0,16,0,0,0,0,17,0],
[16,16,34,16,16,16,34,34,0,0],
[16,33,51,33,33,33,51,51,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,27,29,26,28,22,31,24,23],
[26,0,27,31,33,35,24,32,28,21],
[24,24,0,29,32,33,26,34,29,25],
[22,20,22,0,27,30,23,25,23,15],
[25,18,19,24,0,26,22,28,23,20],
[23,16,18,21,25,0,18,23,21,13],
[29,27,25,28,29,33,0,29,25,28],
[20,19,17,26,23,28,22,0,21,23],
[27,23,22,28,28,30,26,30,0,20],
[28,30,26,36,31,38,23,28,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,24,40,30,30,33,27,27,36],
[22,0,22,33,30,30,21,19,32,26],
[27,29,0,31,24,23,31,28,22,30],
[11,18,20,0,25,22,21,21,21,25],
[21,21,27,26,0,25,30,26,16,32],
[21,21,28,29,26,0,26,24,23,36],
[18,30,20,30,21,25,0,21,25,24],
[24,32,23,30,25,27,30,0,27,30],
[24,19,29,30,35,28,26,24,0,36],
[15,25,21,26,19,15,27,21,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,29,33,38,29,29,38,32,24],
[21,0,23,29,31,28,29,32,26,26],
[22,28,0,30,37,29,35,33,27,33],
[18,22,21,0,27,22,27,23,29,26],
[13,20,14,24,0,25,19,21,23,25],
[22,23,22,29,26,0,30,31,38,24],
[22,22,16,24,32,21,0,36,25,30],
[13,19,18,28,30,20,15,0,25,23],
[19,25,24,22,28,13,26,26,0,23],
[27,25,18,25,26,27,21,28,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,33,34,0,17,16,17,34,17],
[51,0,33,34,17,17,16,17,34,33],
[18,18,0,18,0,17,34,18,34,0],
[17,17,33,0,17,17,33,17,34,17],
[51,34,51,34,0,17,34,35,34,33],
[34,34,34,34,34,0,34,18,34,34],
[35,35,17,18,17,17,0,35,18,17],
[34,34,33,34,16,33,16,0,34,33],
[17,17,17,17,17,17,33,17,0,17],
[34,18,51,34,18,17,34,18,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,24,28,24,24,26,25,25,27],
[26,0,25,33,25,34,29,26,24,19],
[27,26,0,33,25,35,31,23,32,26],
[23,18,18,0,22,25,17,23,19,20],
[27,26,26,29,0,29,27,21,28,27],
[27,17,16,26,22,0,21,17,18,24],
[25,22,20,34,24,30,0,29,25,29],
[26,25,28,28,30,34,22,0,24,30],
[26,27,19,32,23,33,26,27,0,27],
[24,32,25,31,24,27,22,21,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,31,31,21,31,21,11,20,21],
[30,0,31,30,21,30,31,31,30,41],
[20,20,0,20,20,20,10,21,30,20],
[20,21,31,0,21,41,21,21,30,21],
[30,30,31,30,0,20,20,31,30,30],
[20,21,31,10,31,0,31,21,10,31],
[30,20,41,30,31,20,0,21,20,21],
[40,20,30,30,20,30,30,0,30,20],
[31,21,21,21,21,41,31,21,0,21],
[30,10,31,30,21,20,30,31,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,20,20,17,29,12,20,14,17],
[26,0,17,18,19,21,22,31,24,16],
[31,34,0,23,19,24,12,28,14,12],
[31,33,28,0,16,24,21,16,21,26],
[34,32,32,35,0,24,29,27,30,25],
[22,30,27,27,27,0,30,15,25,17],
[39,29,39,30,22,21,0,22,32,12],
[31,20,23,35,24,36,29,0,25,29],
[37,27,37,30,21,26,19,26,0,15],
[34,35,39,25,26,34,39,22,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,28,17,27,30,26,21,22,20],
[21,0,25,21,26,32,25,22,23,32],
[23,26,0,18,18,27,22,26,15,19],
[34,30,33,0,29,30,32,23,26,27],
[24,25,33,22,0,30,31,23,26,30],
[21,19,24,21,21,0,26,18,19,28],
[25,26,29,19,20,25,0,17,22,26],
[30,29,25,28,28,33,34,0,24,27],
[29,28,36,25,25,32,29,27,0,40],
[31,19,32,24,21,23,25,24,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,25,28,32,33,29,29,28,35],
[12,0,20,16,24,15,12,26,18,21],
[26,31,0,22,22,30,21,29,32,34],
[23,35,29,0,26,39,30,29,36,27],
[19,27,29,25,0,25,22,29,30,28],
[18,36,21,12,26,0,14,23,25,31],
[22,39,30,21,29,37,0,30,29,31],
[22,25,22,22,22,28,21,0,21,22],
[23,33,19,15,21,26,22,30,0,32],
[16,30,17,24,23,20,20,29,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,22,28,35,26,36,25,21,30],
[19,0,16,20,31,13,31,20,20,26],
[29,35,0,33,36,24,34,29,25,31],
[23,31,18,0,26,18,31,22,23,28],
[16,20,15,25,0,19,34,20,14,22],
[25,38,27,33,32,0,34,30,27,25],
[15,20,17,20,17,17,0,15,18,19],
[26,31,22,29,31,21,36,0,24,22],
[30,31,26,28,37,24,33,27,0,22],
[21,25,20,23,29,26,32,29,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,28,28,21,30,30,25,31,26],
[28,0,25,26,21,28,27,24,26,31],
[23,26,0,33,25,29,30,28,28,31],
[23,25,18,0,18,28,31,16,23,21],
[30,30,26,33,0,28,32,25,30,26],
[21,23,22,23,23,0,30,24,24,20],
[21,24,21,20,19,21,0,22,24,25],
[26,27,23,35,26,27,29,0,25,25],
[20,25,23,28,21,27,27,26,0,30],
[25,20,20,30,25,31,26,26,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,28,23,35,24,29,27,28,27],
[26,0,33,27,34,25,30,27,29,24],
[23,18,0,18,29,21,17,19,17,28],
[28,24,33,0,39,26,32,27,35,27],
[16,17,22,12,0,19,19,17,14,13],
[27,26,30,25,32,0,25,26,21,29],
[22,21,34,19,32,26,0,28,27,27],
[24,24,32,24,34,25,23,0,25,22],
[23,22,34,16,37,30,24,26,0,24],
[24,27,23,24,38,22,24,29,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,37,24,24,24,12,38,24],
[27,0,12,39,25,24,12,12,26,12],
[27,39,0,27,39,26,14,14,14,26],
[14,12,24,0,24,24,24,12,26,12],
[27,26,12,27,0,12,0,26,14,12],
[27,27,25,27,39,0,13,39,27,13],
[27,39,37,27,51,38,0,26,14,39],
[39,39,37,39,25,12,25,0,26,25],
[13,25,37,25,37,24,37,25,0,25],
[27,39,25,39,39,38,12,26,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,25,30,26,28,24,26,25,33],
[21,0,20,18,19,29,19,22,23,20],
[26,31,0,28,22,23,25,31,27,32],
[21,33,23,0,22,27,29,24,29,24],
[25,32,29,29,0,36,27,33,35,29],
[23,22,28,24,15,0,27,23,26,27],
[27,32,26,22,24,24,0,23,24,28],
[25,29,20,27,18,28,28,0,28,26],
[26,28,24,22,16,25,27,23,0,25],
[18,31,19,27,22,24,23,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,32,23,21,26,21,17,16,16],
[30,0,35,24,27,32,27,15,26,28],
[19,16,0,20,23,21,24,22,12,21],
[28,27,31,0,26,27,31,23,29,19],
[30,24,28,25,0,31,30,29,21,34],
[25,19,30,24,20,0,19,17,17,22],
[30,24,27,20,21,32,0,22,20,25],
[34,36,29,28,22,34,29,0,26,27],
[35,25,39,22,30,34,31,25,0,31],
[35,23,30,32,17,29,26,24,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,25,18,27,24,27,27,21,25],
[27,0,26,17,21,25,21,23,20,15],
[26,25,0,23,26,27,29,28,23,23],
[33,34,28,0,33,28,30,30,26,21],
[24,30,25,18,0,19,22,24,22,16],
[27,26,24,23,32,0,25,28,18,24],
[24,30,22,21,29,26,0,28,20,22],
[24,28,23,21,27,23,23,0,19,24],
[30,31,28,25,29,33,31,32,0,28],
[26,36,28,30,35,27,29,27,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,25,23,13,30,30,34,27,11],
[25,0,23,20,19,27,22,29,27,25],
[26,28,0,21,20,23,32,28,27,25],
[28,31,30,0,23,27,32,30,27,30],
[38,32,31,28,0,31,38,35,38,25],
[21,24,28,24,20,0,22,31,25,16],
[21,29,19,19,13,29,0,23,25,21],
[17,22,23,21,16,20,28,0,26,11],
[24,24,24,24,13,26,26,25,0,20],
[40,26,26,21,26,35,30,40,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,26,20,21,25,37,26,29,25],
[30,0,25,19,28,34,34,25,23,30],
[25,26,0,22,28,30,20,22,36,34],
[31,32,29,0,22,30,30,35,40,44],
[30,23,23,29,0,28,27,24,31,28],
[26,17,21,21,23,0,26,21,33,28],
[14,17,31,21,24,25,0,22,29,25],
[25,26,29,16,27,30,29,0,26,43],
[22,28,15,11,20,18,22,25,0,24],
[26,21,17,7,23,23,26,8,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,24,29,24,22,26,26,26,24],
[28,0,29,37,26,30,33,30,36,24],
[27,22,0,25,22,26,34,32,27,29],
[22,14,26,0,21,17,20,25,20,21],
[27,25,29,30,0,27,27,28,24,21],
[29,21,25,34,24,0,29,24,31,25],
[25,18,17,31,24,22,0,22,27,24],
[25,21,19,26,23,27,29,0,26,18],
[25,15,24,31,27,20,24,25,0,23],
[27,27,22,30,30,26,27,33,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,27,22,24,24,31,23,23,22],
[27,0,21,22,18,24,26,17,26,25],
[24,30,0,21,22,24,30,20,26,25],
[29,29,30,0,27,29,31,26,30,25],
[27,33,29,24,0,23,30,27,30,28],
[27,27,27,22,28,0,34,21,27,27],
[20,25,21,20,21,17,0,19,25,27],
[28,34,31,25,24,30,32,0,30,30],
[28,25,25,21,21,24,26,21,0,28],
[29,26,26,26,23,24,24,21,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,27,25,30,26,26,22,27,26],
[23,0,28,25,26,26,27,22,27,27],
[24,23,0,23,32,25,27,25,27,28],
[26,26,28,0,27,22,27,24,28,24],
[21,25,19,24,0,21,26,18,22,27],
[25,25,26,29,30,0,31,22,29,30],
[25,24,24,24,25,20,0,21,21,22],
[29,29,26,27,33,29,30,0,27,25],
[24,24,24,23,29,22,30,24,0,25],
[25,24,23,27,24,21,29,26,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,27,20,27,27,24,26,28,25],
[28,0,28,26,32,34,30,31,29,25],
[24,23,0,21,25,29,20,21,23,24],
[31,25,30,0,30,35,28,28,31,27],
[24,19,26,21,0,30,25,26,30,26],
[24,17,22,16,21,0,22,16,25,16],
[27,21,31,23,26,29,0,23,32,22],
[25,20,30,23,25,35,28,0,33,24],
[23,22,28,20,21,26,19,18,0,19],
[26,26,27,24,25,35,29,27,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,40,33,26,44,28,40,38,22],
[20,0,25,31,23,31,29,26,29,26],
[11,26,0,26,22,24,32,18,27,20],
[18,20,25,0,13,28,16,21,33,15],
[25,28,29,38,0,37,30,26,28,23],
[7,20,27,23,14,0,23,19,33,24],
[23,22,19,35,21,28,0,23,29,19],
[11,25,33,30,25,32,28,0,33,25],
[13,22,24,18,23,18,22,18,0,15],
[29,25,31,36,28,27,32,26,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,20,23,21,17,26,17,21,17],
[27,0,10,15,16,9,18,13,20,19],
[31,41,0,22,25,23,25,23,32,28],
[28,36,29,0,30,30,34,23,27,25],
[30,35,26,21,0,25,25,18,26,21],
[34,42,28,21,26,0,35,21,26,31],
[25,33,26,17,26,16,0,14,27,26],
[34,38,28,28,33,30,37,0,29,22],
[30,31,19,24,25,25,24,22,0,24],
[34,32,23,26,30,20,25,29,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,28,39,28,30,23,33,27,25],
[26,0,33,37,23,26,29,32,25,23],
[23,18,0,37,26,26,28,30,21,16],
[12,14,14,0,14,24,20,29,16,15],
[23,28,25,37,0,28,25,34,29,31],
[21,25,25,27,23,0,18,30,22,20],
[28,22,23,31,26,33,0,32,18,24],
[18,19,21,22,17,21,19,0,22,17],
[24,26,30,35,22,29,33,29,0,27],
[26,28,35,36,20,31,27,34,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,28,30,27,19,24,23,28,37],
[21,0,14,22,27,13,21,19,21,32],
[23,37,0,27,35,28,33,16,24,26],
[21,29,24,0,27,16,29,18,24,35],
[24,24,16,24,0,10,20,20,15,28],
[32,38,23,35,41,0,27,28,32,33],
[27,30,18,22,31,24,0,23,27,39],
[28,32,35,33,31,23,28,0,28,40],
[23,30,27,27,36,19,24,23,0,40],
[14,19,25,16,23,18,12,11,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,19,15,37,29,31,32,29,30],
[7,0,19,22,29,19,25,11,15,20],
[32,32,0,17,26,32,25,20,37,32],
[36,29,34,0,44,27,33,27,36,20],
[14,22,25,7,0,14,15,7,29,22],
[22,32,19,24,37,0,25,20,37,22],
[20,26,26,18,36,26,0,23,28,20],
[19,40,31,24,44,31,28,0,30,27],
[22,36,14,15,22,14,23,21,0,22],
[21,31,19,31,29,29,31,24,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,16,27,28,19,20,12,29,17],
[29,0,28,29,30,21,28,14,30,21],
[35,23,0,25,24,24,31,15,26,23],
[24,22,26,0,25,17,22,17,29,12],
[23,21,27,26,0,12,26,16,24,22],
[32,30,27,34,39,0,28,26,36,22],
[31,23,20,29,25,23,0,20,32,28],
[39,37,36,34,35,25,31,0,36,32],
[22,21,25,22,27,15,19,15,0,14],
[34,30,28,39,29,29,23,19,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,30,27,33,35,23,32,28,27],
[20,0,28,22,31,32,25,32,22,30],
[21,23,0,25,17,21,15,28,18,16],
[24,29,26,0,29,21,15,28,22,21],
[18,20,34,22,0,27,17,26,17,19],
[16,19,30,30,24,0,16,22,17,15],
[28,26,36,36,34,35,0,36,31,25],
[19,19,23,23,25,29,15,0,19,26],
[23,29,33,29,34,34,20,32,0,24],
[24,21,35,30,32,36,26,25,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,30,24,24,23,18,21,19,25],
[28,0,27,29,24,18,29,28,37,26],
[21,24,0,16,22,24,26,17,27,31],
[27,22,35,0,33,30,19,23,33,24],
[27,27,29,18,0,27,23,13,29,25],
[28,33,27,21,24,0,20,27,32,26],
[33,22,25,32,28,31,0,20,33,31],
[30,23,34,28,38,24,31,0,38,29],
[32,14,24,18,22,19,18,13,0,20],
[26,25,20,27,26,25,20,22,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,23,22,21,22,23,13,23,19],
[32,0,30,26,26,27,28,22,41,23],
[28,21,0,22,24,19,24,24,31,10],
[29,25,29,0,23,19,25,19,25,13],
[30,25,27,28,0,21,30,13,29,29],
[29,24,32,32,30,0,28,26,36,17],
[28,23,27,26,21,23,0,13,27,27],
[38,29,27,32,38,25,38,0,34,33],
[28,10,20,26,22,15,24,17,0,14],
[32,28,41,38,22,34,24,18,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,28,27,35,21,20,23,26,18],
[29,0,26,26,27,19,27,22,23,17],
[23,25,0,21,26,16,14,22,26,15],
[24,25,30,0,28,28,28,19,27,25],
[16,24,25,23,0,17,19,20,18,9],
[30,32,35,23,34,0,17,28,26,23],
[31,24,37,23,32,34,0,30,23,26],
[28,29,29,32,31,23,21,0,33,23],
[25,28,25,24,33,25,28,18,0,15],
[33,34,36,26,42,28,25,28,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,30,26,20,21,25,20,24,19],
[23,0,23,21,14,24,25,24,15,25],
[21,28,0,19,18,21,29,26,20,23],
[25,30,32,0,21,27,32,27,22,25],
[31,37,33,30,0,34,42,30,28,22],
[30,27,30,24,17,0,34,22,24,18],
[26,26,22,19,9,17,0,17,18,18],
[31,27,25,24,21,29,34,0,27,26],
[27,36,31,29,23,27,33,24,0,26],
[32,26,28,26,29,33,33,25,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,29,23,25,26,24,24,29,26],
[26,0,30,23,24,29,28,32,27,26],
[22,21,0,24,22,26,26,23,29,17],
[28,28,27,0,23,27,25,29,28,27],
[26,27,29,28,0,30,34,26,29,21],
[25,22,25,24,21,0,25,25,26,21],
[27,23,25,26,17,26,0,25,28,23],
[27,19,28,22,25,26,26,0,24,18],
[22,24,22,23,22,25,23,27,0,24],
[25,25,34,24,30,30,28,33,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,21,26,22,22,26,17,29,24],
[25,0,22,18,20,19,26,18,27,24],
[30,29,0,27,26,25,30,20,32,28],
[25,33,24,0,26,31,35,26,29,28],
[29,31,25,25,0,25,29,25,32,24],
[29,32,26,20,26,0,37,27,29,26],
[25,25,21,16,22,14,0,16,29,24],
[34,33,31,25,26,24,35,0,32,30],
[22,24,19,22,19,22,22,19,0,25],
[27,27,23,23,27,25,27,21,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,27,19,30,27,22,28,25,18],
[17,0,19,13,26,23,18,20,21,14],
[24,32,0,14,31,26,19,36,28,20],
[32,38,37,0,31,34,27,28,31,21],
[21,25,20,20,0,25,16,19,18,16],
[24,28,25,17,26,0,18,23,21,14],
[29,33,32,24,35,33,0,29,33,24],
[23,31,15,23,32,28,22,0,25,26],
[26,30,23,20,33,30,18,26,0,17],
[33,37,31,30,35,37,27,25,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,22,19,22,29,27,37,31,19],
[21,0,19,23,28,22,18,31,23,12],
[29,32,0,26,29,26,32,34,28,21],
[32,28,25,0,23,32,24,35,32,23],
[29,23,22,28,0,22,30,30,24,11],
[22,29,25,19,29,0,25,34,30,6],
[24,33,19,27,21,26,0,28,21,26],
[14,20,17,16,21,17,23,0,22,15],
[20,28,23,19,27,21,30,29,0,16],
[32,39,30,28,40,45,25,36,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,19,17,21,10,25,27,25,16],
[35,0,23,23,26,24,34,28,30,19],
[32,28,0,25,28,26,35,34,26,26],
[34,28,26,0,31,22,37,29,31,22],
[30,25,23,20,0,21,32,27,27,25],
[41,27,25,29,30,0,39,36,28,30],
[26,17,16,14,19,12,0,23,19,18],
[24,23,17,22,24,15,28,0,22,19],
[26,21,25,20,24,23,32,29,0,18],
[35,32,25,29,26,21,33,32,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,28,27,24,29,26,26,29],
[24,0,25,27,24,23,22,28,28,28],
[23,26,0,25,24,20,23,31,25,32],
[23,24,26,0,23,28,25,27,25,33],
[24,27,27,28,0,25,25,29,24,35],
[27,28,31,23,26,0,25,29,28,29],
[22,29,28,26,26,26,0,28,25,30],
[25,23,20,24,22,22,23,0,22,30],
[25,23,26,26,27,23,26,29,0,34],
[22,23,19,18,16,22,21,21,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,30,29,25,21,31,30,32,34],
[18,0,21,26,17,17,23,30,17,18],
[21,30,0,23,25,23,26,30,25,29],
[22,25,28,0,21,19,33,30,27,29],
[26,34,26,30,0,27,27,32,24,33],
[30,34,28,32,24,0,27,27,34,25],
[20,28,25,18,24,24,0,28,26,23],
[21,21,21,21,19,24,23,0,23,19],
[19,34,26,24,27,17,25,28,0,28],
[17,33,22,22,18,26,28,32,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,25,33,28,27,31,30,29,27],
[22,0,25,28,24,25,25,25,18,24],
[26,26,0,28,24,25,29,28,29,24],
[18,23,23,0,23,20,28,26,20,23],
[23,27,27,28,0,24,26,29,23,21],
[24,26,26,31,27,0,31,26,25,21],
[20,26,22,23,25,20,0,21,23,22],
[21,26,23,25,22,25,30,0,27,25],
[22,33,22,31,28,26,28,24,0,24],
[24,27,27,28,30,30,29,26,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,19,21,29,29,17,20,25,21],
[20,0,10,17,30,21,13,18,26,18],
[32,41,0,28,28,31,20,28,39,26],
[30,34,23,0,31,25,34,23,32,29],
[22,21,23,20,0,14,19,23,21,11],
[22,30,20,26,37,0,23,27,22,27],
[34,38,31,17,32,28,0,35,23,32],
[31,33,23,28,28,24,16,0,24,21],
[26,25,12,19,30,29,28,27,0,28],
[30,33,25,22,40,24,19,30,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,20,20,41,30,20,22,31,20],
[31,0,30,10,21,10,21,11,21,11],
[31,21,0,21,21,21,22,22,32,11],
[31,41,30,0,32,31,11,22,32,22],
[10,30,30,19,0,10,21,22,41,20],
[21,41,30,20,41,0,20,22,31,31],
[31,30,29,40,30,31,0,32,51,20],
[29,40,29,29,29,29,19,0,40,19],
[20,30,19,19,10,20,0,11,0,9],
[31,40,40,29,31,20,31,32,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,33,31,32,24,36,32,36,26],
[21,0,32,27,24,32,31,29,37,23],
[18,19,0,28,33,12,22,20,28,24],
[20,24,23,0,23,24,24,23,25,17],
[19,27,18,28,0,24,22,26,33,20],
[27,19,39,27,27,0,31,31,31,27],
[15,20,29,27,29,20,0,29,30,26],
[19,22,31,28,25,20,22,0,34,23],
[15,14,23,26,18,20,21,17,0,20],
[25,28,27,34,31,24,25,28,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,22,24,30,22,25,26,29,16],
[25,0,21,31,25,22,23,25,24,21],
[29,30,0,33,25,21,28,26,26,21],
[27,20,18,0,26,13,23,25,20,16],
[21,26,26,25,0,22,23,20,28,21],
[29,29,30,38,29,0,20,27,24,29],
[26,28,23,28,28,31,0,23,26,19],
[25,26,25,26,31,24,28,0,28,19],
[22,27,25,31,23,27,25,23,0,26],
[35,30,30,35,30,22,32,32,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,31,32,27,34,31,30,31,26],
[31,0,26,30,29,35,26,26,29,25],
[20,25,0,27,29,36,28,28,26,26],
[19,21,24,0,22,37,24,24,23,19],
[24,22,22,29,0,27,25,26,21,22],
[17,16,15,14,24,0,19,18,19,18],
[20,25,23,27,26,32,0,23,17,24],
[21,25,23,27,25,33,28,0,29,22],
[20,22,25,28,30,32,34,22,0,22],
[25,26,25,32,29,33,27,29,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,24,43,17,19,16,25,26],
[25,0,33,33,43,33,17,33,25,17],
[25,18,0,8,35,25,19,16,25,0],
[27,18,43,0,43,35,19,26,35,27],
[8,8,16,8,0,0,8,16,16,8],
[34,18,26,16,51,0,27,16,35,18],
[32,34,32,32,43,24,0,24,24,16],
[35,18,35,25,35,35,27,0,43,27],
[26,26,26,16,35,16,27,8,0,26],
[25,34,51,24,43,33,35,24,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,29,34,19,20,15,21,23,23],
[25,0,29,29,21,27,23,31,22,24],
[22,22,0,27,18,29,18,29,22,21],
[17,22,24,0,23,19,20,26,25,26],
[32,30,33,28,0,28,28,31,23,27],
[31,24,22,32,23,0,24,31,21,21],
[36,28,33,31,23,27,0,26,29,26],
[30,20,22,25,20,20,25,0,25,15],
[28,29,29,26,28,30,22,26,0,27],
[28,27,30,25,24,30,25,36,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,24,27,19,29,24,31,30,18],
[28,0,27,30,28,26,24,31,33,27],
[27,24,0,27,22,27,18,29,28,25],
[24,21,24,0,19,21,22,24,32,25],
[32,23,29,32,0,33,20,33,35,24],
[22,25,24,30,18,0,18,31,30,21],
[27,27,33,29,31,33,0,31,38,23],
[20,20,22,27,18,20,20,0,26,18],
[21,18,23,19,16,21,13,25,0,18],
[33,24,26,26,27,30,28,33,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,31,12,25,19,30,18,31,25],
[27,0,26,18,26,25,18,25,26,12],
[20,25,0,13,25,20,26,20,27,26],
[39,33,38,0,32,39,24,33,38,26],
[26,25,26,19,0,39,12,26,27,26],
[32,26,31,12,12,0,18,26,25,27],
[21,33,25,27,39,33,0,21,22,14],
[33,26,31,18,25,25,30,0,19,33],
[20,25,24,13,24,26,29,32,0,26],
[26,39,25,25,25,24,37,18,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,32,25,31,30,24,35,30,39],
[20,0,27,27,27,29,24,26,30,23],
[19,24,0,24,21,24,27,29,23,29],
[26,24,27,0,35,33,26,29,25,34],
[20,24,30,16,0,22,22,18,26,21],
[21,22,27,18,29,0,22,18,25,27],
[27,27,24,25,29,29,0,26,31,28],
[16,25,22,22,33,33,25,0,27,29],
[21,21,28,26,25,26,20,24,0,26],
[12,28,22,17,30,24,23,22,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,25,31,35,27,36,29,33,34],
[23,0,27,27,29,30,27,22,28,23],
[26,24,0,25,31,27,33,25,34,25],
[20,24,26,0,28,26,30,24,26,30],
[16,22,20,23,0,22,22,23,30,24],
[24,21,24,25,29,0,28,21,35,29],
[15,24,18,21,29,23,0,20,19,21],
[22,29,26,27,28,30,31,0,35,25],
[18,23,17,25,21,16,32,16,0,21],
[17,28,26,21,27,22,30,26,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,29,28,25,25,26,26,26,25],
[24,0,25,29,27,28,22,24,27,23],
[22,26,0,28,22,22,26,23,26,25],
[23,22,23,0,18,25,23,22,26,23],
[26,24,29,33,0,30,27,25,28,30],
[26,23,29,26,21,0,23,25,26,28],
[25,29,25,28,24,28,0,26,26,30],
[25,27,28,29,26,26,25,0,27,25],
[25,24,25,25,23,25,25,24,0,25],
[26,28,26,28,21,23,21,26,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,20,22,23,24,23,24,22,26],
[31,0,24,32,27,28,27,32,27,33],
[31,27,0,26,25,28,35,29,26,31],
[29,19,25,0,25,26,28,24,26,29],
[28,24,26,26,0,24,32,24,24,29],
[27,23,23,25,27,0,29,24,24,27],
[28,24,16,23,19,22,0,22,19,26],
[27,19,22,27,27,27,29,0,24,32],
[29,24,25,25,27,27,32,27,0,32],
[25,18,20,22,22,24,25,19,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,51,31,31,31,31,17,51,51],
[20,0,37,37,20,20,20,37,37,20],
[0,14,0,17,14,14,0,17,51,14],
[20,14,34,0,14,14,14,20,34,34],
[20,31,37,37,0,34,0,37,51,34],
[20,31,37,37,17,0,17,37,51,37],
[20,31,51,37,51,34,0,37,51,51],
[34,14,34,31,14,14,14,0,51,34],
[0,14,0,17,0,0,0,0,0,0],
[0,31,37,17,17,14,0,17,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,23,23,28,31,27,28,26,27],
[23,0,24,22,28,27,31,37,29,24],
[28,27,0,24,24,36,30,25,26,26],
[28,29,27,0,26,32,30,27,27,22],
[23,23,27,25,0,25,26,27,20,17],
[20,24,15,19,26,0,24,26,18,18],
[24,20,21,21,25,27,0,25,23,21],
[23,14,26,24,24,25,26,0,21,19],
[25,22,25,24,31,33,28,30,0,29],
[24,27,25,29,34,33,30,32,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,26,25,36,33,25,24,26,28],
[11,0,14,25,20,21,14,15,22,10],
[25,37,0,26,31,34,22,26,30,26],
[26,26,25,0,22,31,19,21,21,17],
[15,31,20,29,0,28,22,16,24,27],
[18,30,17,20,23,0,21,19,23,19],
[26,37,29,32,29,30,0,31,21,32],
[27,36,25,30,35,32,20,0,24,25],
[25,29,21,30,27,28,30,27,0,24],
[23,41,25,34,24,32,19,26,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,29,22,22,22,30,23,15,30],
[30,0,37,22,22,30,30,37,30,30],
[22,14,0,22,22,29,30,29,29,30],
[29,29,29,0,29,29,29,36,22,36],
[29,29,29,22,0,29,29,36,22,29],
[29,21,22,22,22,0,44,29,37,30],
[21,21,21,22,22,7,0,28,21,14],
[28,14,22,15,15,22,23,0,15,30],
[36,21,22,29,29,14,30,36,0,22],
[21,21,21,15,22,21,37,21,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,15,27,20,22,15,7,27,20],
[31,0,19,17,39,31,32,31,39,24],
[36,32,0,37,44,36,37,31,39,24],
[24,34,14,0,39,31,25,19,39,24],
[31,12,7,12,0,12,19,0,14,12],
[29,20,15,20,39,0,32,7,27,17],
[36,19,14,26,32,19,0,14,41,24],
[44,20,20,32,51,44,37,0,44,39],
[24,12,12,12,37,24,10,7,0,19],
[31,27,27,27,39,34,27,12,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,28,28,31,18,23,21,22,26],
[23,0,25,18,32,18,23,16,24,19],
[23,26,0,15,32,22,18,18,18,17],
[23,33,36,0,31,28,18,25,26,15],
[20,19,19,20,0,18,8,11,15,15],
[33,33,29,23,33,0,18,18,22,22],
[28,28,33,33,43,33,0,22,28,16],
[30,35,33,26,40,33,29,0,28,22],
[29,27,33,25,36,29,23,23,0,22],
[25,32,34,36,36,29,35,29,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,35,26,18,29,32,31,15,29],
[23,0,39,29,30,35,37,37,32,37],
[16,12,0,24,15,23,31,20,21,26],
[25,22,27,0,24,26,42,33,27,38],
[33,21,36,27,0,34,31,30,15,27],
[22,16,28,25,17,0,20,26,25,26],
[19,14,20,9,20,31,0,18,20,31],
[20,14,31,18,21,25,33,0,32,37],
[36,19,30,24,36,26,31,19,0,26],
[22,14,25,13,24,25,20,14,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,27,32,19,28,26,29,36,27],
[25,0,27,31,30,24,25,24,31,30],
[24,24,0,38,25,25,19,25,31,24],
[19,20,13,0,26,18,25,24,19,21],
[32,21,26,25,0,20,24,32,27,31],
[23,27,26,33,31,0,32,23,25,24],
[25,26,32,26,27,19,0,29,28,24],
[22,27,26,27,19,28,22,0,28,31],
[15,20,20,32,24,26,23,23,0,29],
[24,21,27,30,20,27,27,20,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,11,11,23,0,37,14,23,25],
[40,0,26,51,23,26,40,40,37,39],
[40,25,0,37,37,14,51,40,37,39],
[40,0,14,0,12,0,26,40,26,14],
[28,28,14,39,0,14,28,28,37,28],
[51,25,37,51,37,0,37,51,37,25],
[14,11,0,25,23,14,0,28,23,11],
[37,11,11,11,23,0,23,0,23,11],
[28,14,14,25,14,14,28,28,0,28],
[26,12,12,37,23,26,40,40,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,24,27,22,16,25,18,16,21],
[30,0,30,28,37,29,25,22,27,27],
[27,21,0,20,20,21,25,18,16,20],
[24,23,31,0,25,21,24,28,26,25],
[29,14,31,26,0,24,22,18,13,26],
[35,22,30,30,27,0,20,14,20,16],
[26,26,26,27,29,31,0,27,22,34],
[33,29,33,23,33,37,24,0,24,25],
[35,24,35,25,38,31,29,27,0,22],
[30,24,31,26,25,35,17,26,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,17,18,9,26,9,18,26,9],
[25,0,26,18,18,34,25,34,34,26],
[34,25,0,25,35,43,34,43,25,34],
[33,33,26,0,26,42,33,42,33,25],
[42,33,16,25,0,51,33,34,25,25],
[25,17,8,9,0,0,25,25,25,8],
[42,26,17,18,18,26,0,17,34,9],
[33,17,8,9,17,26,34,0,25,16],
[25,17,26,18,26,26,17,26,0,18],
[42,25,17,26,26,43,42,35,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,39,29,25,24,22,29,30,24],
[15,0,21,17,16,10,12,17,15,17],
[12,30,0,19,14,13,15,13,22,17],
[22,34,32,0,20,26,20,24,26,20],
[26,35,37,31,0,23,22,25,29,27],
[27,41,38,25,28,0,30,28,29,30],
[29,39,36,31,29,21,0,35,32,30],
[22,34,38,27,26,23,16,0,25,24],
[21,36,29,25,22,22,19,26,0,22],
[27,34,34,31,24,21,21,27,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,30,29,33,28,28,27,21,28],
[20,0,31,29,36,26,24,32,25,30],
[21,20,0,24,26,20,19,21,25,23],
[22,22,27,0,29,26,24,27,26,26],
[18,15,25,22,0,22,24,27,22,25],
[23,25,31,25,29,0,18,25,23,27],
[23,27,32,27,27,33,0,37,25,30],
[24,19,30,24,24,26,14,0,22,29],
[30,26,26,25,29,28,26,29,0,31],
[23,21,28,25,26,24,21,22,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,27,26,35,25,32,35,34,32],
[29,0,25,29,36,26,26,29,32,28],
[24,26,0,29,27,22,27,27,33,21],
[25,22,22,0,31,24,30,27,31,24],
[16,15,24,20,0,17,26,24,28,20],
[26,25,29,27,34,0,29,31,32,27],
[19,25,24,21,25,22,0,28,28,25],
[16,22,24,24,27,20,23,0,28,20],
[17,19,18,20,23,19,23,23,0,22],
[19,23,30,27,31,24,26,31,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,22,19,16,24,25,25,30,24],
[28,0,19,25,26,25,21,18,27,16],
[29,32,0,30,21,28,29,27,29,30],
[32,26,21,0,31,26,26,26,31,17],
[35,25,30,20,0,26,29,27,31,23],
[27,26,23,25,25,0,31,28,24,28],
[26,30,22,25,22,20,0,22,24,27],
[26,33,24,25,24,23,29,0,29,25],
[21,24,22,20,20,27,27,22,0,27],
[27,35,21,34,28,23,24,26,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,30,30,26,31,25,30,26,27],
[22,0,28,19,14,18,13,15,18,26],
[21,23,0,22,24,23,20,14,15,19],
[21,32,29,0,21,27,26,27,17,27],
[25,37,27,30,0,24,26,28,18,29],
[20,33,28,24,27,0,17,28,26,28],
[26,38,31,25,25,34,0,26,22,26],
[21,36,37,24,23,23,25,0,19,32],
[25,33,36,34,33,25,29,32,0,29],
[24,25,32,24,22,23,25,19,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,21,23,23,14,17,22,26,17],
[36,0,20,30,31,18,20,28,33,28],
[30,31,0,27,28,23,21,32,30,24],
[28,21,24,0,22,22,23,12,27,16],
[28,20,23,29,0,21,23,26,29,24],
[37,33,28,29,30,0,30,31,29,24],
[34,31,30,28,28,21,0,26,32,30],
[29,23,19,39,25,20,25,0,29,23],
[25,18,21,24,22,22,19,22,0,21],
[34,23,27,35,27,27,21,28,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,27,23,23,31,26,28,25],
[27,0,29,28,23,27,31,24,32,30],
[27,22,0,24,21,18,27,29,26,17],
[24,23,27,0,28,22,31,24,30,24],
[28,28,30,23,0,24,31,26,30,27],
[28,24,33,29,27,0,34,27,28,26],
[20,20,24,20,20,17,0,28,26,17],
[25,27,22,27,25,24,23,0,34,26],
[23,19,25,21,21,23,25,17,0,17],
[26,21,34,27,24,25,34,25,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,31,27,26,28,30,30,23,33],
[27,0,29,29,29,29,25,28,28,38],
[20,22,0,25,23,28,23,24,21,32],
[24,22,26,0,23,23,19,26,24,25],
[25,22,28,28,0,31,22,23,25,30],
[23,22,23,28,20,0,20,23,22,31],
[21,26,28,32,29,31,0,24,21,34],
[21,23,27,25,28,28,27,0,25,26],
[28,23,30,27,26,29,30,26,0,32],
[18,13,19,26,21,20,17,25,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,25,21,35,37,24,25,35,32],
[30,0,21,26,31,31,31,30,30,31],
[26,30,0,23,33,27,24,31,29,32],
[30,25,28,0,40,35,31,35,31,34],
[16,20,18,11,0,21,20,23,22,25],
[14,20,24,16,30,0,26,17,30,22],
[27,20,27,20,31,25,0,24,33,29],
[26,21,20,16,28,34,27,0,32,30],
[16,21,22,20,29,21,18,19,0,20],
[19,20,19,17,26,29,22,21,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,39,25,44,43,31,32,32,37],
[15,0,21,27,15,38,31,27,14,34],
[12,30,0,18,17,29,31,32,25,30],
[26,24,33,0,26,31,38,33,32,46],
[7,36,34,25,0,36,31,32,27,26],
[8,13,22,20,15,0,20,21,20,26],
[20,20,20,13,20,31,0,21,14,20],
[19,24,19,18,19,30,30,0,19,19],
[19,37,26,19,24,31,37,32,0,31],
[14,17,21,5,25,25,31,32,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,31,17,21,32,29,24,32,29],
[20,0,25,17,19,30,29,22,25,22],
[20,26,0,14,26,30,30,19,25,29],
[34,34,37,0,31,36,31,23,32,33],
[30,32,25,20,0,32,31,28,28,36],
[19,21,21,15,19,0,23,18,26,26],
[22,22,21,20,20,28,0,21,26,29],
[27,29,32,28,23,33,30,0,30,29],
[19,26,26,19,23,25,25,21,0,26],
[22,29,22,18,15,25,22,22,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,26,26,25,23,25,30,27,21],
[24,0,27,29,26,27,24,29,28,26],
[25,24,0,29,19,29,23,27,27,24],
[25,22,22,0,21,24,17,24,23,18],
[26,25,32,30,0,32,27,30,28,27],
[28,24,22,27,19,0,24,26,27,27],
[26,27,28,34,24,27,0,33,31,25],
[21,22,24,27,21,25,18,0,28,22],
[24,23,24,28,23,24,20,23,0,21],
[30,25,27,33,24,24,26,29,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,30,23,27,25,32,19,22,28],
[25,0,24,25,28,32,31,27,32,27],
[21,27,0,28,24,24,34,25,23,30],
[28,26,23,0,24,25,29,28,27,26],
[24,23,27,27,0,24,28,21,22,22],
[26,19,27,26,27,0,28,26,28,27],
[19,20,17,22,23,23,0,20,23,22],
[32,24,26,23,30,25,31,0,24,24],
[29,19,28,24,29,23,28,27,0,27],
[23,24,21,25,29,24,29,27,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,27,25,27,27,26,26,29,24],
[28,0,25,29,30,27,31,32,30,30],
[24,26,0,23,25,23,28,24,26,32],
[26,22,28,0,29,26,24,28,30,25],
[24,21,26,22,0,23,29,31,22,29],
[24,24,28,25,28,0,33,30,31,33],
[25,20,23,27,22,18,0,23,27,25],
[25,19,27,23,20,21,28,0,28,26],
[22,21,25,21,29,20,24,23,0,28],
[27,21,19,26,22,18,26,25,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,25,28,32,31,33,33,31,34],
[31,0,30,25,32,29,32,29,37,30],
[26,21,0,32,31,27,32,29,24,27],
[23,26,19,0,34,25,32,29,29,27],
[19,19,20,17,0,20,27,24,22,25],
[20,22,24,26,31,0,31,25,24,24],
[18,19,19,19,24,20,0,22,21,23],
[18,22,22,22,27,26,29,0,21,27],
[20,14,27,22,29,27,30,30,0,29],
[17,21,24,24,26,27,28,24,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,29,28,20,19,24,18,20,14],
[21,0,26,20,19,22,23,24,20,18],
[22,25,0,23,29,26,35,28,24,22],
[23,31,28,0,29,23,28,25,22,15],
[31,32,22,22,0,34,27,27,27,26],
[32,29,25,28,17,0,29,20,29,18],
[27,28,16,23,24,22,0,19,22,14],
[33,27,23,26,24,31,32,0,25,24],
[31,31,27,29,24,22,29,26,0,16],
[37,33,29,36,25,33,37,27,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,26,24,22,20,21,28,22,20],
[33,0,28,30,30,23,30,24,27,21],
[25,23,0,30,29,24,32,27,25,20],
[27,21,21,0,24,20,28,21,17,26],
[29,21,22,27,0,16,29,24,25,23],
[31,28,27,31,35,0,26,33,29,24],
[30,21,19,23,22,25,0,28,21,24],
[23,27,24,30,27,18,23,0,24,20],
[29,24,26,34,26,22,30,27,0,23],
[31,30,31,25,28,27,27,31,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,22,28,18,19,18,20,35,39],
[25,0,35,33,18,30,29,20,33,32],
[29,16,0,25,23,24,23,25,25,17],
[23,18,26,0,18,19,11,25,24,26],
[33,33,28,33,0,25,29,27,40,32],
[32,21,27,32,26,0,33,34,32,27],
[33,22,28,40,22,18,0,28,40,32],
[31,31,26,26,24,17,23,0,37,25],
[16,18,26,27,11,19,11,14,0,19],
[12,19,34,25,19,24,19,26,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,29,35,34,29,24,40,23,29],
[27,0,28,17,33,33,30,28,21,33],
[22,23,0,28,33,23,35,33,29,22],
[16,34,23,0,33,29,24,38,29,28],
[17,18,18,18,0,17,24,30,17,29],
[22,18,28,22,34,0,25,28,22,33],
[27,21,16,27,27,26,0,38,27,27],
[11,23,18,13,21,23,13,0,23,23],
[28,30,22,22,34,29,24,28,0,27],
[22,18,29,23,22,18,24,28,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,30,24,31,30,26,32,30,26],
[27,0,30,30,28,23,31,27,30,35],
[21,21,0,16,23,28,13,32,37,32],
[27,21,35,0,27,27,27,28,32,35],
[20,23,28,24,0,33,23,28,38,29],
[21,28,23,24,18,0,26,24,32,22],
[25,20,38,24,28,25,0,35,34,25],
[19,24,19,23,23,27,16,0,26,23],
[21,21,14,19,13,19,17,25,0,25],
[25,16,19,16,22,29,26,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,19,25,26,22,26,22,19,19],
[29,0,28,27,23,23,27,27,23,21],
[32,23,0,26,27,30,30,29,29,24],
[26,24,25,0,22,25,23,23,25,21],
[25,28,24,29,0,28,28,25,22,25],
[29,28,21,26,23,0,27,22,23,20],
[25,24,21,28,23,24,0,21,21,21],
[29,24,22,28,26,29,30,0,23,24],
[32,28,22,26,29,28,30,28,0,29],
[32,30,27,30,26,31,30,27,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,22,26,33,22,27,28,26,28],
[20,0,17,18,15,10,20,16,17,10],
[29,34,0,22,27,28,33,26,25,28],
[25,33,29,0,27,19,32,31,22,26],
[18,36,24,24,0,23,27,27,22,22],
[29,41,23,32,28,0,28,19,21,37],
[24,31,18,19,24,23,0,15,10,24],
[23,35,25,20,24,32,36,0,33,28],
[25,34,26,29,29,30,41,18,0,38],
[23,41,23,25,29,14,27,23,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,26,35,22,22,21,22,21,15],
[19,0,28,19,18,25,21,24,14,25],
[25,23,0,20,14,16,21,11,26,25],
[16,32,31,0,9,26,20,16,21,26],
[29,33,37,42,0,26,22,31,26,30],
[29,26,35,25,25,0,21,24,26,24],
[30,30,30,31,29,30,0,25,21,19],
[29,27,40,35,20,27,26,0,21,30],
[30,37,25,30,25,25,30,30,0,26],
[36,26,26,25,21,27,32,21,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,25,32,29,26,22,28,21],
[25,0,19,26,28,29,24,22,27,23],
[25,32,0,29,34,34,25,27,33,25],
[26,25,22,0,28,28,23,21,28,23],
[19,23,17,23,0,29,22,15,29,18],
[22,22,17,23,22,0,21,17,28,23],
[25,27,26,28,29,30,0,25,28,22],
[29,29,24,30,36,34,26,0,33,26],
[23,24,18,23,22,23,23,18,0,19],
[30,28,26,28,33,28,29,25,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,29,21,33,26,26,19,35,17],
[22,0,23,16,33,21,20,23,30,14],
[22,28,0,16,30,23,19,19,32,22],
[30,35,35,0,30,35,19,38,38,28],
[18,18,21,21,0,26,23,20,26,13],
[25,30,28,16,25,0,22,17,33,11],
[25,31,32,32,28,29,0,26,34,25],
[32,28,32,13,31,34,25,0,34,27],
[16,21,19,13,25,18,17,17,0,17],
[34,37,29,23,38,40,26,24,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,28,20,30,28,23,22,28,28],
[15,0,28,20,23,30,23,30,15,28],
[23,23,0,28,30,30,31,30,23,36],
[31,31,23,0,30,30,23,30,23,36],
[21,28,21,21,0,12,23,19,20,28],
[23,21,21,21,39,0,23,30,23,44],
[28,28,20,28,28,28,0,28,13,21],
[29,21,21,21,32,21,23,0,36,36],
[23,36,28,28,31,28,38,15,0,21],
[23,23,15,15,23,7,30,15,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,28,35,33,31,33,26,34,21],
[23,0,30,36,33,35,32,29,31,31],
[23,21,0,36,31,30,33,29,26,28],
[16,15,15,0,24,15,24,20,30,20],
[18,18,20,27,0,20,21,23,23,23],
[20,16,21,36,31,0,20,25,29,26],
[18,19,18,27,30,31,0,16,23,24],
[25,22,22,31,28,26,35,0,24,27],
[17,20,25,21,28,22,28,27,0,20],
[30,20,23,31,28,25,27,24,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,26,14,23,24,21,18,22],
[25,0,17,16,9,20,26,14,23,20],
[25,34,0,21,19,25,31,23,32,35],
[25,35,30,0,30,25,29,29,29,28],
[37,42,32,21,0,26,33,25,36,30],
[28,31,26,26,25,0,32,28,34,34],
[27,25,20,22,18,19,0,25,26,26],
[30,37,28,22,26,23,26,0,30,40],
[33,28,19,22,15,17,25,21,0,19],
[29,31,16,23,21,17,25,11,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,13,14,19,12,19,14,15,21],
[43,0,28,22,27,27,27,22,27,36],
[38,23,0,30,22,36,38,38,31,46],
[37,29,21,0,13,29,21,24,44,21],
[32,24,29,38,0,29,36,32,39,32],
[39,24,15,22,22,0,23,22,23,23],
[32,24,13,30,15,28,0,23,23,16],
[37,29,13,27,19,29,28,0,28,29],
[36,24,20,7,12,28,28,23,0,28],
[30,15,5,30,19,28,35,22,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,23,21,28,21,28,30,21,37],
[37,0,37,21,35,28,37,30,35,44],
[28,14,0,21,28,28,28,23,28,35],
[30,30,30,0,21,37,30,23,28,37],
[23,16,23,30,0,23,23,16,16,30],
[30,23,23,14,28,0,23,23,14,37],
[23,14,23,21,28,28,0,23,28,37],
[21,21,28,28,35,28,28,0,21,28],
[30,16,23,23,35,37,23,30,0,37],
[14,7,16,14,21,14,14,23,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,31,31,30,27,29,30,38,25],
[24,0,27,28,25,24,18,36,25,23],
[20,24,0,24,25,21,22,22,20,21],
[20,23,27,0,27,27,25,27,28,17],
[21,26,26,24,0,26,28,21,30,17],
[24,27,30,24,25,0,21,32,25,25],
[22,33,29,26,23,30,0,32,30,19],
[21,15,29,24,30,19,19,0,17,12],
[13,26,31,23,21,26,21,34,0,28],
[26,28,30,34,34,26,32,39,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,13,19,22,23,22,20,21,21],
[31,0,26,27,22,23,19,24,21,28],
[38,25,0,21,28,16,21,26,18,26],
[32,24,30,0,21,28,25,23,17,25],
[29,29,23,30,0,23,24,24,31,29],
[28,28,35,23,28,0,28,24,25,22],
[29,32,30,26,27,23,0,25,27,34],
[31,27,25,28,27,27,26,0,30,26],
[30,30,33,34,20,26,24,21,0,21],
[30,23,25,26,22,29,17,25,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,24,18,22,32,22,22,31,19],
[32,0,26,20,26,27,21,30,23,29],
[27,25,0,24,26,33,24,33,28,21],
[33,31,27,0,25,30,27,40,31,24],
[29,25,25,26,0,30,24,35,27,31],
[19,24,18,21,21,0,19,29,22,21],
[29,30,27,24,27,32,0,35,35,24],
[29,21,18,11,16,22,16,0,19,20],
[20,28,23,20,24,29,16,32,0,18],
[32,22,30,27,20,30,27,31,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,25,16,23,25,22,23,28,18],
[27,0,17,15,23,30,23,29,20,21],
[26,34,0,20,34,33,37,32,23,39],
[35,36,31,0,35,29,25,31,22,26],
[28,28,17,16,0,27,27,20,22,25],
[26,21,18,22,24,0,27,19,23,22],
[29,28,14,26,24,24,0,22,28,19],
[28,22,19,20,31,32,29,0,24,27],
[23,31,28,29,29,28,23,27,0,20],
[33,30,12,25,26,29,32,24,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,18,33,33,42,34,33,25,42],
[27,0,27,42,34,33,43,17,25,34],
[33,24,0,33,51,42,34,24,33,33],
[18,9,18,0,18,24,34,17,9,18],
[18,17,0,33,0,24,25,8,16,16],
[9,18,9,27,27,0,25,26,9,18],
[17,8,17,17,26,26,0,17,8,26],
[18,34,27,34,43,25,34,0,25,25],
[26,26,18,42,35,42,43,26,0,26],
[9,17,18,33,35,33,25,26,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,26,28,27,23,24,30,28,26],
[30,0,28,30,32,29,25,31,33,30],
[25,23,0,29,25,28,24,29,27,27],
[23,21,22,0,20,25,25,24,27,24],
[24,19,26,31,0,24,27,33,30,33],
[28,22,23,26,27,0,22,28,31,27],
[27,26,27,26,24,29,0,26,28,27],
[21,20,22,27,18,23,25,0,28,27],
[23,18,24,24,21,20,23,23,0,24],
[25,21,24,27,18,24,24,24,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,25,29,30,25,27,27,36,25],
[19,0,25,26,24,23,26,22,23,20],
[26,26,0,27,23,26,25,21,24,26],
[22,25,24,0,30,29,25,23,30,23],
[21,27,28,21,0,21,26,22,21,25],
[26,28,25,22,30,0,28,23,30,21],
[24,25,26,26,25,23,0,21,25,20],
[24,29,30,28,29,28,30,0,30,24],
[15,28,27,21,30,21,26,21,0,18],
[26,31,25,28,26,30,31,27,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,36,32,32,25,28,28,33,28],
[17,0,23,23,21,20,21,18,21,19],
[15,28,0,24,23,24,21,22,30,26],
[19,28,27,0,23,23,23,21,29,23],
[19,30,28,28,0,20,27,19,28,25],
[26,31,27,28,31,0,25,24,28,26],
[23,30,30,28,24,26,0,23,28,25],
[23,33,29,30,32,27,28,0,32,28],
[18,30,21,22,23,23,23,19,0,15],
[23,32,25,28,26,25,26,23,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,26,26,25,26,22,22,27,27],
[29,0,24,27,31,27,26,29,26,33],
[25,27,0,22,30,29,27,25,26,28],
[25,24,29,0,25,27,20,23,24,31],
[26,20,21,26,0,26,25,27,24,30],
[25,24,22,24,25,0,23,22,23,29],
[29,25,24,31,26,28,0,19,24,30],
[29,22,26,28,24,29,32,0,23,28],
[24,25,25,27,27,28,27,28,0,36],
[24,18,23,20,21,22,21,23,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,21,19,32,25,32,18,26,30],
[20,0,20,19,28,23,30,19,23,24],
[30,31,0,13,29,21,24,17,21,23],
[32,32,38,0,31,35,31,22,34,29],
[19,23,22,20,0,20,30,20,25,20],
[26,28,30,16,31,0,38,20,27,29],
[19,21,27,20,21,13,0,19,28,26],
[33,32,34,29,31,31,32,0,35,22],
[25,28,30,17,26,24,23,16,0,23],
[21,27,28,22,31,22,25,29,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,22,24,32,27,27,30,25,29],
[27,0,31,24,31,34,30,33,32,28],
[29,20,0,20,28,34,31,30,22,27],
[27,27,31,0,30,26,25,32,27,30],
[19,20,23,21,0,28,21,26,17,21],
[24,17,17,25,23,0,19,26,22,25],
[24,21,20,26,30,32,0,26,24,23],
[21,18,21,19,25,25,25,0,20,28],
[26,19,29,24,34,29,27,31,0,27],
[22,23,24,21,30,26,28,23,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,18,22,10,18,21,17,17,12],
[26,0,16,23,17,22,23,28,25,16],
[33,35,0,29,22,24,26,39,31,22],
[29,28,22,0,22,20,29,30,20,19],
[41,34,29,29,0,22,40,41,31,28],
[33,29,27,31,29,0,27,37,19,21],
[30,28,25,22,11,24,0,33,23,16],
[34,23,12,21,10,14,18,0,18,13],
[34,26,20,31,20,32,28,33,0,23],
[39,35,29,32,23,30,35,38,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,25,17,33,28,24,23,22,21],
[30,0,19,21,30,28,19,31,20,26],
[26,32,0,21,32,32,22,27,26,27],
[34,30,30,0,33,37,24,30,24,28],
[18,21,19,18,0,26,13,19,17,25],
[23,23,19,14,25,0,16,19,19,21],
[27,32,29,27,38,35,0,33,24,34],
[28,20,24,21,32,32,18,0,24,22],
[29,31,25,27,34,32,27,27,0,26],
[30,25,24,23,26,30,17,29,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,34,29,30,24,22,28,36,34],
[23,0,30,41,40,31,27,37,31,34],
[17,21,0,26,22,21,20,27,34,27],
[22,10,25,0,25,22,19,29,32,28],
[21,11,29,26,0,15,16,26,31,23],
[27,20,30,29,36,0,22,32,33,29],
[29,24,31,32,35,29,0,31,38,31],
[23,14,24,22,25,19,20,0,30,29],
[15,20,17,19,20,18,13,21,0,30],
[17,17,24,23,28,22,20,22,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,18,21,22,16,18,32,22,20],
[34,0,30,29,24,26,22,32,23,23],
[33,21,0,17,20,17,22,28,24,23],
[30,22,34,0,27,26,27,38,22,29],
[29,27,31,24,0,30,29,34,27,23],
[35,25,34,25,21,0,28,31,30,27],
[33,29,29,24,22,23,0,32,28,28],
[19,19,23,13,17,20,19,0,14,25],
[29,28,27,29,24,21,23,37,0,23],
[31,28,28,22,28,24,23,26,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,28,21,23,36,14,25,25,18],
[29,0,24,15,24,35,24,21,22,15],
[23,27,0,26,17,36,29,23,34,24],
[30,36,25,0,27,34,33,30,23,30],
[28,27,34,24,0,45,28,31,31,29],
[15,16,15,17,6,0,9,22,20,20],
[37,27,22,18,23,42,0,29,25,23],
[26,30,28,21,20,29,22,0,17,14],
[26,29,17,28,20,31,26,34,0,29],
[33,36,27,21,22,31,28,37,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,28,28,29,29,21,27,25,17],
[28,0,31,27,24,26,23,29,21,26],
[23,20,0,24,23,29,21,21,18,23],
[23,24,27,0,26,32,18,25,19,19],
[22,27,28,25,0,30,23,24,20,25],
[22,25,22,19,21,0,17,24,23,22],
[30,28,30,33,28,34,0,25,24,24],
[24,22,30,26,27,27,26,0,24,21],
[26,30,33,32,31,28,27,27,0,24],
[34,25,28,32,26,29,27,30,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,41,41,41,29,20,41,23,30],
[19,0,51,30,28,29,19,51,31,40],
[10,0,0,21,19,29,19,23,12,19],
[10,21,30,0,19,30,30,21,21,19],
[10,23,32,32,0,20,20,23,23,31],
[22,22,22,21,31,0,22,33,22,31],
[31,32,32,21,31,29,0,32,12,40],
[10,0,28,30,28,18,19,0,22,19],
[28,20,39,30,28,29,39,29,0,28],
[21,11,32,32,20,20,11,32,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,34,34,16,34,51,34,34,51],
[18,0,34,34,34,34,18,18,34,34],
[17,17,0,18,17,35,35,35,18,35],
[17,17,33,0,33,17,17,35,18,17],
[35,17,34,18,0,35,35,18,18,35],
[17,17,16,34,16,0,35,18,34,33],
[0,33,16,34,16,16,0,18,34,16],
[17,33,16,16,33,33,33,0,34,33],
[17,17,33,33,33,17,17,17,0,33],
[0,17,16,34,16,18,35,18,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,32,22,26,33,20,31,31,23],
[20,0,24,22,20,33,16,35,22,23],
[19,27,0,24,18,31,18,33,27,25],
[29,29,27,0,33,21,25,23,27,29],
[25,31,33,18,0,27,25,27,17,19],
[18,18,20,30,24,0,28,43,30,28],
[31,35,33,26,26,23,0,33,37,25],
[20,16,18,28,24,8,18,0,20,28],
[20,29,24,24,34,21,14,31,0,29],
[28,28,26,22,32,23,26,23,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,31,27,30,27,28,24,30,32],
[20,0,19,23,24,25,20,18,25,21],
[20,32,0,30,27,32,26,28,26,29],
[24,28,21,0,23,28,27,21,24,30],
[21,27,24,28,0,29,23,24,26,25],
[24,26,19,23,22,0,26,23,29,23],
[23,31,25,24,28,25,0,23,25,29],
[27,33,23,30,27,28,28,0,27,29],
[21,26,25,27,25,22,26,24,0,27],
[19,30,22,21,26,28,22,22,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,27,24,30,27,27,21,36,28],
[26,0,21,17,24,19,26,29,28,27],
[24,30,0,26,29,23,25,24,32,28],
[27,34,25,0,26,24,31,26,29,24],
[21,27,22,25,0,20,20,21,24,26],
[24,32,28,27,31,0,27,28,28,30],
[24,25,26,20,31,24,0,24,33,32],
[30,22,27,25,30,23,27,0,30,32],
[15,23,19,22,27,23,18,21,0,24],
[23,24,23,27,25,21,19,19,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,23,16,22,20,15,20,22,24],
[33,0,25,22,27,22,24,24,23,31],
[28,26,0,22,24,16,23,22,27,26],
[35,29,29,0,28,24,24,22,29,31],
[29,24,27,23,0,22,24,22,26,32],
[31,29,35,27,29,0,27,22,32,32],
[36,27,28,27,27,24,0,29,34,36],
[31,27,29,29,29,29,22,0,33,32],
[29,28,24,22,25,19,17,18,0,34],
[27,20,25,20,19,19,15,19,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,22,27,17,19,19,24,22],
[25,0,21,21,21,29,21,16,17,29],
[25,30,0,24,25,24,23,12,28,24],
[29,30,27,0,28,24,19,26,26,31],
[24,30,26,23,0,23,23,23,18,34],
[34,22,27,27,28,0,27,23,28,23],
[32,30,28,32,28,24,0,25,29,28],
[32,35,39,25,28,28,26,0,30,40],
[27,34,23,25,33,23,22,21,0,28],
[29,22,27,20,17,28,23,11,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,24,20,19,31,22,30,17,23],
[33,0,29,30,32,29,37,34,24,24],
[27,22,0,22,24,27,21,36,14,18],
[31,21,29,0,22,24,38,24,19,22],
[32,19,27,29,0,19,32,27,24,23],
[20,22,24,27,32,0,35,24,27,23],
[29,14,30,13,19,16,0,25,11,21],
[21,17,15,27,24,27,26,0,20,14],
[34,27,37,32,27,24,40,31,0,30],
[28,27,33,29,28,28,30,37,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,24,11,23,23,16,27,31,22],
[32,0,26,19,28,30,21,34,34,28],
[27,25,0,22,30,23,27,33,31,28],
[40,32,29,0,31,24,32,41,35,30],
[28,23,21,20,0,22,22,32,26,26],
[28,21,28,27,29,0,22,29,25,26],
[35,30,24,19,29,29,0,32,32,27],
[24,17,18,10,19,22,19,0,22,19],
[20,17,20,16,25,26,19,29,0,19],
[29,23,23,21,25,25,24,32,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,30,27,29,31,29,26,28,26],
[27,0,32,25,30,35,32,31,24,27],
[21,19,0,29,24,25,26,26,29,25],
[24,26,22,0,25,26,24,29,26,27],
[22,21,27,26,0,26,27,27,25,27],
[20,16,26,25,25,0,24,31,23,29],
[22,19,25,27,24,27,0,26,27,28],
[25,20,25,22,24,20,25,0,21,25],
[23,27,22,25,26,28,24,30,0,29],
[25,24,26,24,24,22,23,26,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,25,30,24,37,37,27,36,31],
[28,0,21,29,20,25,38,24,26,28],
[26,30,0,27,26,22,38,26,33,32],
[21,22,24,0,31,27,32,26,31,26],
[27,31,25,20,0,30,32,29,31,28],
[14,26,29,24,21,0,34,20,29,23],
[14,13,13,19,19,17,0,11,23,22],
[24,27,25,25,22,31,40,0,29,27],
[15,25,18,20,20,22,28,22,0,26],
[20,23,19,25,23,28,29,24,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,28,35,43,44,36,22,43,43],
[15,0,7,15,22,23,30,7,23,22],
[23,44,0,30,30,23,31,22,30,23],
[16,36,21,0,29,37,44,30,36,29],
[8,29,21,22,0,36,22,7,28,36],
[7,28,28,14,15,0,22,14,27,22],
[15,21,20,7,29,29,0,14,20,29],
[29,44,29,21,44,37,37,0,29,29],
[8,28,21,15,23,24,31,22,0,23],
[8,29,28,22,15,29,22,22,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,26,23,27,28,27,27,22],
[27,0,27,25,29,28,28,28,27,25],
[27,24,0,29,27,31,31,29,26,27],
[25,26,22,0,26,27,30,29,29,23],
[28,22,24,25,0,29,26,29,26,17],
[24,23,20,24,22,0,28,24,25,20],
[23,23,20,21,25,23,0,23,28,22],
[24,23,22,22,22,27,28,0,22,19],
[24,24,25,22,25,26,23,29,0,24],
[29,26,24,28,34,31,29,32,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,21,21,30,21,30,11,10,30],
[30,0,0,20,30,21,30,0,20,19],
[30,51,0,42,30,42,40,22,29,41],
[30,31,9,0,20,41,30,31,19,9],
[21,21,21,31,0,21,32,11,20,30],
[30,30,9,10,30,0,40,20,29,19],
[21,21,11,21,19,11,0,11,10,30],
[40,51,29,20,40,31,40,0,29,29],
[41,31,22,32,31,22,41,22,0,31],
[21,32,10,42,21,32,21,22,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,23,27,20,24,26,27,27],
[25,0,23,20,24,24,22,20,28,22],
[25,28,0,24,21,24,25,28,28,26],
[28,31,27,0,25,21,24,29,35,29],
[24,27,30,26,0,26,23,29,28,25],
[31,27,27,30,25,0,28,26,29,31],
[27,29,26,27,28,23,0,27,37,26],
[25,31,23,22,22,25,24,0,30,28],
[24,23,23,16,23,22,14,21,0,22],
[24,29,25,22,26,20,25,23,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,22,21,17,18,20,29,21,20],
[29,0,24,29,23,19,25,30,23,26],
[29,27,0,30,27,26,25,25,23,29],
[30,22,21,0,24,20,23,27,21,19],
[34,28,24,27,0,24,25,24,19,25],
[33,32,25,31,27,0,27,25,29,30],
[31,26,26,28,26,24,0,30,20,26],
[22,21,26,24,27,26,21,0,25,22],
[30,28,28,30,32,22,31,26,0,29],
[31,25,22,32,26,21,25,29,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,32,23,18,19,24,23,32,15],
[30,0,24,20,19,16,14,28,19,33],
[19,27,0,19,9,9,20,28,25,18],
[28,31,32,0,24,20,24,37,28,22],
[33,32,42,27,0,29,29,38,25,23],
[32,35,42,31,22,0,24,42,37,31],
[27,37,31,27,22,27,0,35,26,27],
[28,23,23,14,13,9,16,0,15,18],
[19,32,26,23,26,14,25,36,0,19],
[36,18,33,29,28,20,24,33,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,16,28,19,14,25,16,20,22],
[36,0,29,24,28,29,35,27,29,32],
[35,22,0,25,26,26,35,29,30,32],
[23,27,26,0,19,23,26,24,21,26],
[32,23,25,32,0,27,34,29,26,32],
[37,22,25,28,24,0,29,22,24,29],
[26,16,16,25,17,22,0,20,12,29],
[35,24,22,27,22,29,31,0,22,32],
[31,22,21,30,25,27,39,29,0,30],
[29,19,19,25,19,22,22,19,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,26,25,24,20,24,30,18,26],
[26,0,21,23,22,23,27,26,22,32],
[25,30,0,24,23,29,24,29,27,29],
[26,28,27,0,21,21,24,28,24,32],
[27,29,28,30,0,25,30,35,24,32],
[31,28,22,30,26,0,26,30,23,27],
[27,24,27,27,21,25,0,28,28,27],
[21,25,22,23,16,21,23,0,23,26],
[33,29,24,27,27,28,23,28,0,31],
[25,19,22,19,19,24,24,25,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,23,28,26,20,33,32,25,27],
[27,0,34,46,34,17,33,31,30,20],
[28,17,0,25,33,25,30,29,17,24],
[23,5,26,0,27,17,29,21,14,15],
[25,17,18,24,0,22,21,23,26,23],
[31,34,26,34,29,0,29,29,28,19],
[18,18,21,22,30,22,0,22,28,20],
[19,20,22,30,28,22,29,0,24,25],
[26,21,34,37,25,23,23,27,0,19],
[24,31,27,36,28,32,31,26,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,51,34,51,18,51,17,51,51],
[17,0,17,34,51,35,51,17,33,51],
[0,34,0,34,34,18,51,17,16,51],
[17,17,17,0,33,35,51,17,33,51],
[0,0,17,18,0,18,51,17,16,51],
[33,16,33,16,33,0,33,33,33,51],
[0,0,0,0,0,18,0,0,16,35],
[34,34,34,34,34,18,51,0,34,51],
[0,18,35,18,35,18,35,17,0,35],
[0,0,0,0,0,0,16,0,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,15,17,15,23,20,11,25,17],
[29,0,25,21,25,26,23,26,22,22],
[36,26,0,36,24,25,32,26,37,25],
[34,30,15,0,13,19,20,11,29,17],
[36,26,27,38,0,33,37,28,37,19],
[28,25,26,32,18,0,23,23,29,20],
[31,28,19,31,14,28,0,24,29,17],
[40,25,25,40,23,28,27,0,36,31],
[26,29,14,22,14,22,22,15,0,14],
[34,29,26,34,32,31,34,20,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,29,28,28,21,23,21,24,26],
[30,0,25,31,25,25,24,21,20,26],
[22,26,0,33,24,25,19,27,28,28],
[23,20,18,0,26,19,20,18,25,20],
[23,26,27,25,0,23,23,19,21,22],
[30,26,26,32,28,0,26,24,23,25],
[28,27,32,31,28,25,0,21,27,23],
[30,30,24,33,32,27,30,0,27,26],
[27,31,23,26,30,28,24,24,0,27],
[25,25,23,31,29,26,28,25,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,31,27,25,31,26,23,26,31],
[23,0,30,25,23,28,20,23,27,28],
[20,21,0,26,21,29,22,21,27,24],
[24,26,25,0,22,28,24,20,30,25],
[26,28,30,29,0,33,24,25,33,31],
[20,23,22,23,18,0,19,17,23,23],
[25,31,29,27,27,32,0,28,34,32],
[28,28,30,31,26,34,23,0,30,32],
[25,24,24,21,18,28,17,21,0,26],
[20,23,27,26,20,28,19,19,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,23,23,17,20,20,23,20,19],
[25,0,18,20,17,27,23,25,26,17],
[28,33,0,32,26,30,27,27,34,24],
[28,31,19,0,24,29,26,31,32,19],
[34,34,25,27,0,35,28,35,33,26],
[31,24,21,22,16,0,23,30,36,18],
[31,28,24,25,23,28,0,30,30,25],
[28,26,24,20,16,21,21,0,26,17],
[31,25,17,19,18,15,21,25,0,17],
[32,34,27,32,25,33,26,34,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,27,21,26,27,28,25,27,27],
[26,0,28,23,24,21,28,27,26,28],
[24,23,0,22,21,17,25,25,28,27],
[30,28,29,0,26,24,27,27,28,23],
[25,27,30,25,0,25,27,27,29,30],
[24,30,34,27,26,0,24,29,25,34],
[23,23,26,24,24,27,0,23,26,24],
[26,24,26,24,24,22,28,0,28,28],
[24,25,23,23,22,26,25,23,0,27],
[24,23,24,28,21,17,27,23,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,28,25,23,20,25,25,20,22],
[27,0,28,23,16,23,29,30,25,22],
[23,23,0,21,17,15,18,29,24,21],
[26,28,30,0,25,23,29,32,29,23],
[28,35,34,26,0,28,31,31,33,24],
[31,28,36,28,23,0,30,29,28,25],
[26,22,33,22,20,21,0,27,28,21],
[26,21,22,19,20,22,24,0,21,23],
[31,26,27,22,18,23,23,30,0,27],
[29,29,30,28,27,26,30,28,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,25,26,28,21,25,25,27,27],
[28,0,28,24,23,20,24,27,21,22],
[26,23,0,27,30,22,26,21,27,27],
[25,27,24,0,23,17,23,28,23,22],
[23,28,21,28,0,18,20,27,25,23],
[30,31,29,34,33,0,31,33,33,21],
[26,27,25,28,31,20,0,32,31,23],
[26,24,30,23,24,18,19,0,31,20],
[24,30,24,28,26,18,20,20,0,18],
[24,29,24,29,28,30,28,31,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,29,28,22,26,21,23,24,28],
[23,0,21,34,26,28,22,24,27,24],
[22,30,0,23,22,27,24,24,28,28],
[23,17,28,0,26,29,19,26,26,24],
[29,25,29,25,0,25,22,19,25,25],
[25,23,24,22,26,0,19,22,25,23],
[30,29,27,32,29,32,0,26,28,20],
[28,27,27,25,32,29,25,0,29,29],
[27,24,23,25,26,26,23,22,0,24],
[23,27,23,27,26,28,31,22,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,29,32,33,20,29,21,30,25],
[24,0,23,28,27,23,26,22,32,26],
[22,28,0,24,23,13,21,19,21,20],
[19,23,27,0,21,15,26,27,27,19],
[18,24,28,30,0,16,21,18,27,22],
[31,28,38,36,35,0,33,31,33,25],
[22,25,30,25,30,18,0,28,29,20],
[30,29,32,24,33,20,23,0,30,25],
[21,19,30,24,24,18,22,21,0,19],
[26,25,31,32,29,26,31,26,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,24,26,24,28,31,16,26,23],
[25,0,24,29,26,30,22,21,24,14],
[27,27,0,30,26,27,26,28,24,24],
[25,22,21,0,21,30,17,17,19,20],
[27,25,25,30,0,17,24,21,18,22],
[23,21,24,21,34,0,23,16,23,19],
[20,29,25,34,27,28,0,14,31,31],
[35,30,23,34,30,35,37,0,27,30],
[25,27,27,32,33,28,20,24,0,24],
[28,37,27,31,29,32,20,21,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,31,29,23,22,21,26,27,28],
[30,0,29,29,23,24,23,29,26,30],
[20,22,0,22,23,19,19,20,23,25],
[22,22,29,0,23,23,20,19,19,24],
[28,28,28,28,0,26,26,24,27,26],
[29,27,32,28,25,0,24,26,27,25],
[30,28,32,31,25,27,0,28,29,30],
[25,22,31,32,27,25,23,0,25,29],
[24,25,28,32,24,24,22,26,0,30],
[23,21,26,27,25,26,21,22,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,21,21,18,23,19,22,21,20],
[28,0,25,25,26,26,26,29,24,24],
[30,26,0,25,24,27,21,27,21,21],
[30,26,26,0,26,30,26,30,26,24],
[33,25,27,25,0,28,30,33,25,28],
[28,25,24,21,23,0,25,25,20,23],
[32,25,30,25,21,26,0,26,22,28],
[29,22,24,21,18,26,25,0,25,23],
[30,27,30,25,26,31,29,26,0,27],
[31,27,30,27,23,28,23,28,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,25,28,27,27,31,32,26],
[27,0,22,26,28,30,25,28,30,31],
[27,29,0,25,25,33,28,28,32,31],
[26,25,26,0,25,22,25,24,31,36],
[23,23,26,26,0,26,20,26,26,29],
[24,21,18,29,25,0,25,28,29,38],
[24,26,23,26,31,26,0,30,24,33],
[20,23,23,27,25,23,21,0,31,33],
[19,21,19,20,25,22,27,20,0,25],
[25,20,20,15,22,13,18,18,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,16,20,19,15,21,15,23,28],
[34,0,23,31,31,29,31,26,32,28],
[35,28,0,33,30,30,35,24,32,24],
[31,20,18,0,31,22,30,22,29,22],
[32,20,21,20,0,22,26,22,28,28],
[36,22,21,29,29,0,27,23,32,32],
[30,20,16,21,25,24,0,19,28,21],
[36,25,27,29,29,28,32,0,32,32],
[28,19,19,22,23,19,23,19,0,25],
[23,23,27,29,23,19,30,19,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,26,17,34,26,17,18,26],
[25,0,35,43,34,43,35,26,27,43],
[25,16,0,34,25,34,26,17,26,17],
[25,8,17,0,17,17,35,17,0,17],
[34,17,26,34,0,25,26,17,17,17],
[17,8,17,34,26,0,35,8,0,34],
[25,16,25,16,25,16,0,16,8,33],
[34,25,34,34,34,43,35,0,9,35],
[33,24,25,51,34,51,43,42,0,42],
[25,8,34,34,34,17,18,16,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,24,34,36,35,25,23,24],
[23,0,28,23,28,25,34,20,28,21],
[25,23,0,34,27,32,32,24,31,35],
[27,28,17,0,26,32,30,21,27,28],
[17,23,24,25,0,31,34,21,20,21],
[15,26,19,19,20,0,28,20,17,23],
[16,17,19,21,17,23,0,17,19,20],
[26,31,27,30,30,31,34,0,30,25],
[28,23,20,24,31,34,32,21,0,25],
[27,30,16,23,30,28,31,26,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,33,20,19,26,39,27,26,26],
[19,0,27,20,13,32,46,27,33,27],
[18,24,0,17,31,26,30,18,30,18],
[31,31,34,0,38,39,38,25,26,38],
[32,38,20,13,0,39,33,19,26,32],
[25,19,25,12,12,0,32,13,25,19],
[12,5,21,13,18,19,0,5,7,12],
[24,24,33,26,32,38,46,0,25,26],
[25,18,21,25,25,26,44,26,0,32],
[25,24,33,13,19,32,39,25,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,34,44,34,18,34,27,27,18],
[24,0,24,27,25,14,17,14,16,42],
[17,27,0,19,25,17,10,9,26,25],
[7,24,32,0,15,7,14,7,16,25],
[17,26,26,36,0,17,36,26,26,35],
[33,37,34,44,34,0,36,19,37,37],
[17,34,41,37,15,15,0,26,34,25],
[24,37,42,44,25,32,25,0,44,35],
[24,35,25,35,25,14,17,7,0,42],
[33,9,26,26,16,14,26,16,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,17,16,19,16,19,23,18,26],
[36,0,26,30,21,21,27,26,29,26],
[34,25,0,26,30,24,26,21,28,22],
[35,21,25,0,25,33,31,29,24,29],
[32,30,21,26,0,32,32,26,26,29],
[35,30,27,18,19,0,24,23,21,24],
[32,24,25,20,19,27,0,17,25,27],
[28,25,30,22,25,28,34,0,21,23],
[33,22,23,27,25,30,26,30,0,25],
[25,25,29,22,22,27,24,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,27,30,26,22,26,21,22,29],
[22,0,23,20,29,26,17,18,29,26],
[24,28,0,29,35,27,23,26,23,31],
[21,31,22,0,23,22,27,21,20,24],
[25,22,16,28,0,21,21,17,22,25],
[29,25,24,29,30,0,24,20,27,26],
[25,34,28,24,30,27,0,22,24,32],
[30,33,25,30,34,31,29,0,31,30],
[29,22,28,31,29,24,27,20,0,31],
[22,25,20,27,26,25,19,21,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,24,20,25,33,19,27,20,23],
[14,0,11,11,12,24,16,12,3,19],
[27,40,0,24,29,29,29,20,24,36],
[31,40,27,0,15,40,27,32,31,30],
[26,39,22,36,0,39,26,31,32,27],
[18,27,22,11,12,0,19,21,7,17],
[32,35,22,24,25,32,0,39,28,15],
[24,39,31,19,20,30,12,0,29,27],
[31,48,27,20,19,44,23,22,0,31],
[28,32,15,21,24,34,36,24,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,28,27,21,23,32,24,25,27],
[17,0,17,20,20,19,27,16,27,19],
[23,34,0,27,27,33,32,30,28,23],
[24,31,24,0,27,26,36,25,26,22],
[30,31,24,24,0,29,34,26,33,27],
[28,32,18,25,22,0,28,28,26,19],
[19,24,19,15,17,23,0,23,21,19],
[27,35,21,26,25,23,28,0,31,22],
[26,24,23,25,18,25,30,20,0,20],
[24,32,28,29,24,32,32,29,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,32,20,25,24,27,32,32,27],
[18,0,32,32,17,29,24,37,37,11],
[19,19,0,20,18,30,25,38,44,25],
[31,19,31,0,18,25,18,38,44,20],
[26,34,33,33,0,32,12,33,33,40],
[27,22,21,26,19,0,26,33,31,28],
[24,27,26,33,39,25,0,33,26,33],
[19,14,13,13,18,18,18,0,23,20],
[19,14,7,7,18,20,25,28,0,13],
[24,40,26,31,11,23,18,31,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,28,28,29,24,29,21,34],
[24,0,26,32,29,29,30,24,22,33],
[23,25,0,30,26,33,24,27,26,27],
[23,19,21,0,25,27,25,23,21,25],
[23,22,25,26,0,19,29,20,18,26],
[22,22,18,24,32,0,23,26,18,24],
[27,21,27,26,22,28,0,23,28,21],
[22,27,24,28,31,25,28,0,25,27],
[30,29,25,30,33,33,23,26,0,33],
[17,18,24,26,25,27,30,24,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,24,36,24,30,24,21,22,30],
[21,0,23,26,30,36,31,33,28,21],
[27,28,0,12,30,25,31,28,28,18],
[15,25,39,0,18,22,31,22,31,30],
[27,21,21,33,0,27,22,21,19,25],
[21,15,26,29,24,0,25,28,22,21],
[27,20,20,20,29,26,0,20,19,12],
[30,18,23,29,30,23,31,0,28,21],
[29,23,23,20,32,29,32,23,0,29],
[21,30,33,21,26,30,39,30,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,44,22,31,24,32,39,28,28],
[32,0,43,27,33,51,31,39,15,20],
[7,8,0,22,15,19,24,28,15,23],
[29,24,29,0,17,43,25,37,19,37],
[20,18,36,34,0,31,24,34,22,32],
[27,0,32,8,20,0,20,20,15,20],
[19,20,27,26,27,31,0,27,14,27],
[12,12,23,14,17,31,24,0,12,12],
[23,36,36,32,29,36,37,39,0,45],
[23,31,28,14,19,31,24,39,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,23,36,0,20,20,29,32,23],
[31,0,22,42,22,35,22,35,38,29],
[28,29,0,35,28,26,19,26,35,26],
[15,9,16,0,9,13,15,22,16,9],
[51,29,23,42,0,35,26,35,44,35],
[31,16,25,38,16,0,15,31,25,25],
[31,29,32,36,25,36,0,29,38,38],
[22,16,25,29,16,20,22,0,32,31],
[19,13,16,35,7,26,13,19,0,28],
[28,22,25,42,16,26,13,20,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,28,19,29,23,26,23,31,22],
[21,0,24,20,25,26,20,19,25,24],
[23,27,0,24,26,21,27,16,23,24],
[32,31,27,0,23,29,26,21,30,20],
[22,26,25,28,0,24,22,13,29,24],
[28,25,30,22,27,0,24,29,32,29],
[25,31,24,25,29,27,0,23,23,26],
[28,32,35,30,38,22,28,0,32,26],
[20,26,28,21,22,19,28,19,0,20],
[29,27,27,31,27,22,25,25,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,27,31,25,26,25,33,34,29],
[21,0,24,22,22,22,24,29,23,22],
[24,27,0,26,23,24,25,28,21,26],
[20,29,25,0,28,22,27,31,28,29],
[26,29,28,23,0,32,28,31,27,29],
[25,29,27,29,19,0,30,27,27,21],
[26,27,26,24,23,21,0,25,25,23],
[18,22,23,20,20,24,26,0,23,19],
[17,28,30,23,24,24,26,28,0,28],
[22,29,25,22,22,30,28,32,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,26,32,34,27,28,33,23,25],
[18,0,20,24,23,19,23,27,18,16],
[25,31,0,30,28,27,26,34,26,23],
[19,27,21,0,31,20,25,21,20,20],
[17,28,23,20,0,16,18,24,25,22],
[24,32,24,31,35,0,29,28,28,22],
[23,28,25,26,33,22,0,27,26,21],
[18,24,17,30,27,23,24,0,21,20],
[28,33,25,31,26,23,25,30,0,29],
[26,35,28,31,29,29,30,31,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,20,26,31,27,32,23,20,29],
[27,0,31,27,27,31,27,27,20,31],
[31,20,0,27,31,25,27,24,27,31],
[25,24,24,0,25,21,26,14,21,30],
[20,24,20,26,0,28,24,21,20,27],
[24,20,26,30,23,0,28,21,20,24],
[19,24,24,25,27,23,0,19,17,25],
[28,24,27,37,30,30,32,0,25,36],
[31,31,24,30,31,31,34,26,0,29],
[22,20,20,21,24,27,26,15,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,38,36,36,32,27,23,32,20],
[24,0,30,32,23,23,27,20,23,26],
[13,21,0,30,21,27,25,17,20,11],
[15,19,21,0,19,27,23,23,25,13],
[15,28,30,32,0,30,25,22,31,15],
[19,28,24,24,21,0,27,20,24,19],
[24,24,26,28,26,24,0,20,23,15],
[28,31,34,28,29,31,31,0,27,12],
[19,28,31,26,20,27,28,24,0,23],
[31,25,40,38,36,32,36,39,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,29,18,31,23,26,29,28,26],
[24,0,24,24,38,32,30,36,24,23],
[22,27,0,20,35,26,26,27,19,15],
[33,27,31,0,41,25,30,33,30,29],
[20,13,16,10,0,20,19,19,17,16],
[28,19,25,26,31,0,36,28,30,21],
[25,21,25,21,32,15,0,25,21,21],
[22,15,24,18,32,23,26,0,25,23],
[23,27,32,21,34,21,30,26,0,22],
[25,28,36,22,35,30,30,28,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,19,19,26,28,24,22,16,28],
[27,0,21,24,33,27,27,26,19,28],
[32,30,0,24,40,25,28,29,26,30],
[32,27,27,0,33,26,31,26,24,30],
[25,18,11,18,0,20,16,21,14,21],
[23,24,26,25,31,0,23,21,25,28],
[27,24,23,20,35,28,0,27,25,28],
[29,25,22,25,30,30,24,0,23,28],
[35,32,25,27,37,26,26,28,0,30],
[23,23,21,21,30,23,23,23,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,22,27,24,23,23,22,23,25],
[29,0,24,26,24,26,25,29,27,26],
[29,27,0,29,23,26,27,29,27,28],
[24,25,22,0,21,21,24,20,24,26],
[27,27,28,30,0,25,28,26,28,28],
[28,25,25,30,26,0,30,26,26,29],
[28,26,24,27,23,21,0,28,28,30],
[29,22,22,31,25,25,23,0,26,27],
[28,24,24,27,23,25,23,25,0,20],
[26,25,23,25,23,22,21,24,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,13,12,19,20,12,27,9,34],
[32,0,12,25,26,22,24,38,26,46],
[38,39,0,36,34,37,25,44,32,51],
[39,26,15,0,29,25,19,35,27,43],
[32,25,17,22,0,29,22,38,24,42],
[31,29,14,26,22,0,17,33,20,33],
[39,27,26,32,29,34,0,41,17,42],
[24,13,7,16,13,18,10,0,11,25],
[42,25,19,24,27,31,34,40,0,51],
[17,5,0,8,9,18,9,26,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,33,24,33,30,32,36,28,36],
[23,0,27,30,27,21,25,30,27,30],
[18,24,0,22,21,23,14,28,23,26],
[27,21,29,0,31,28,24,26,28,32],
[18,24,30,20,0,23,28,29,23,23],
[21,30,28,23,28,0,28,34,29,34],
[19,26,37,27,23,23,0,34,25,30],
[15,21,23,25,22,17,17,0,17,19],
[23,24,28,23,28,22,26,34,0,36],
[15,21,25,19,28,17,21,32,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,30,23,23,30,30,37,23,44],
[21,0,28,21,21,28,21,28,7,35],
[21,23,0,37,37,37,30,30,30,37],
[28,30,14,0,23,35,28,30,23,37],
[28,30,14,28,0,28,21,28,14,28],
[21,23,14,16,23,0,30,30,30,30],
[21,30,21,23,30,21,0,37,23,44],
[14,23,21,21,23,21,14,0,14,30],
[28,44,21,28,37,21,28,37,0,37],
[7,16,14,14,23,21,7,21,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,23,21,29,26,27,28,26,20],
[15,0,20,18,23,17,19,19,18,24],
[28,31,0,27,27,23,28,26,28,27],
[30,33,24,0,33,23,25,33,25,28],
[22,28,24,18,0,20,21,21,28,18],
[25,34,28,28,31,0,23,30,29,28],
[24,32,23,26,30,28,0,25,19,26],
[23,32,25,18,30,21,26,0,25,21],
[25,33,23,26,23,22,32,26,0,28],
[31,27,24,23,33,23,25,30,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,28,28,27,21,33,25,38,34],
[23,0,27,21,28,24,24,21,37,24],
[23,24,0,27,29,22,26,19,33,32],
[23,30,24,0,23,27,19,26,34,20],
[24,23,22,28,0,22,29,23,29,25],
[30,27,29,24,29,0,20,29,38,32],
[18,27,25,32,22,31,0,18,38,34],
[26,30,32,25,28,22,33,0,35,33],
[13,14,18,17,22,13,13,16,0,13],
[17,27,19,31,26,19,17,18,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,36,32,20,40,22,30,29,21],
[23,0,32,25,32,33,16,26,20,18],
[15,19,0,22,17,35,18,26,14,17],
[19,26,29,0,26,26,18,19,14,19],
[31,19,34,25,0,31,15,23,29,26],
[11,18,16,25,20,0,17,21,17,9],
[29,35,33,33,36,34,0,30,22,31],
[21,25,25,32,28,30,21,0,24,13],
[22,31,37,37,22,34,29,27,0,21],
[30,33,34,32,25,42,20,38,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,27,28,23,34,29,23,27,28],
[20,0,16,23,21,20,20,21,22,20],
[24,35,0,31,28,29,26,26,22,22],
[23,28,20,0,28,27,30,25,27,25],
[28,30,23,23,0,30,28,23,28,25],
[17,31,22,24,21,0,24,20,25,20],
[22,31,25,21,23,27,0,24,23,20],
[28,30,25,26,28,31,27,0,27,26],
[24,29,29,24,23,26,28,24,0,22],
[23,31,29,26,26,31,31,25,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,31,20,27,27,25,24,26,28],
[23,0,22,15,18,24,26,26,21,19],
[20,29,0,27,17,25,30,24,27,23],
[31,36,24,0,26,31,31,28,29,29],
[24,33,34,25,0,29,25,31,37,29],
[24,27,26,20,22,0,27,26,26,25],
[26,25,21,20,26,24,0,28,26,27],
[27,25,27,23,20,25,23,0,30,22],
[25,30,24,22,14,25,25,21,0,22],
[23,32,28,22,22,26,24,29,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,38,26,25,51,26,25,12,38],
[26,0,25,26,0,38,26,13,25,26],
[13,26,0,26,0,13,39,26,13,26],
[25,25,25,0,25,25,13,25,25,25],
[26,51,51,26,0,51,39,26,25,39],
[0,13,38,26,0,0,26,13,12,26],
[25,25,12,38,12,25,0,38,25,25],
[26,38,25,26,25,38,13,0,38,26],
[39,26,38,26,26,39,26,13,0,26],
[13,25,25,26,12,25,26,25,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,32,33,24,26,27,21,28,25],
[22,0,34,23,24,29,24,23,21,28],
[19,17,0,20,13,14,17,19,20,17],
[18,28,31,0,24,22,21,26,24,24],
[27,27,38,27,0,27,24,25,26,31],
[25,22,37,29,24,0,27,22,25,31],
[24,27,34,30,27,24,0,22,30,27],
[30,28,32,25,26,29,29,0,30,23],
[23,30,31,27,25,26,21,21,0,27],
[26,23,34,27,20,20,24,28,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,25,24,29,31,23,28,39,30],
[33,0,26,22,29,25,31,24,35,30],
[26,25,0,23,28,26,26,20,35,25],
[27,29,28,0,21,30,31,20,35,26],
[22,22,23,30,0,30,26,24,30,29],
[20,26,25,21,21,0,26,19,26,25],
[28,20,25,20,25,25,0,24,33,20],
[23,27,31,31,27,32,27,0,35,26],
[12,16,16,16,21,25,18,16,0,22],
[21,21,26,25,22,26,31,25,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,22,22,14,36,30,15,29,23],
[29,0,15,7,15,14,15,22,22,15],
[29,36,0,36,36,21,22,29,44,22],
[29,44,15,0,22,29,30,15,22,23],
[37,36,15,29,0,22,23,37,29,30],
[15,37,30,22,29,0,23,15,30,30],
[21,36,29,21,28,28,0,22,36,36],
[36,29,22,36,14,36,29,0,36,22],
[22,29,7,29,22,21,15,15,0,15],
[28,36,29,28,21,21,15,29,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,17,22,25,22,25,28,21,23],
[33,0,34,23,23,23,26,36,26,29],
[34,17,0,24,20,18,21,34,19,31],
[29,28,27,0,18,25,22,28,22,18],
[26,28,31,33,0,35,31,34,25,28],
[29,28,33,26,16,0,22,36,28,26],
[26,25,30,29,20,29,0,39,21,34],
[23,15,17,23,17,15,12,0,13,18],
[30,25,32,29,26,23,30,38,0,26],
[28,22,20,33,23,25,17,33,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,25,23,25,28,19,23,32,26],
[23,0,18,24,24,20,22,25,29,24],
[26,33,0,29,24,30,26,32,29,28],
[28,27,22,0,23,27,25,25,31,28],
[26,27,27,28,0,24,28,31,35,27],
[23,31,21,24,27,0,20,24,26,26],
[32,29,25,26,23,31,0,25,37,27],
[28,26,19,26,20,27,26,0,30,30],
[19,22,22,20,16,25,14,21,0,24],
[25,27,23,23,24,25,24,21,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,28,26,26,23,25,24,23,30],
[17,0,26,14,19,27,22,20,17,22],
[23,25,0,20,30,26,17,26,22,30],
[25,37,31,0,25,26,29,31,19,26],
[25,32,21,26,0,25,21,26,25,27],
[28,24,25,25,26,0,22,26,31,24],
[26,29,34,22,30,29,0,30,27,28],
[27,31,25,20,25,25,21,0,28,19],
[28,34,29,32,26,20,24,23,0,27],
[21,29,21,25,24,27,23,32,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,28,19,26,29,20,30,22,24],
[17,0,28,21,20,24,20,29,23,16],
[23,23,0,25,28,23,26,28,19,12],
[32,30,26,0,24,30,22,29,26,25],
[25,31,23,27,0,27,32,38,31,26],
[22,27,28,21,24,0,17,20,10,17],
[31,31,25,29,19,34,0,23,26,25],
[21,22,23,22,13,31,28,0,17,22],
[29,28,32,25,20,41,25,34,0,15],
[27,35,39,26,25,34,26,29,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,22,19,17,23,30,31,25,34],
[19,0,28,26,23,17,26,31,23,29],
[29,23,0,22,20,17,24,25,28,31],
[32,25,29,0,26,23,28,22,30,32],
[34,28,31,25,0,26,28,34,33,27],
[28,34,34,28,25,0,27,29,25,26],
[21,25,27,23,23,24,0,26,27,24],
[20,20,26,29,17,22,25,0,33,28],
[26,28,23,21,18,26,24,18,0,33],
[17,22,20,19,24,25,27,23,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,17,21,20,19,22,23,19,35],
[24,0,20,22,20,23,25,24,15,26],
[34,31,0,31,18,17,22,28,34,39],
[30,29,20,0,27,17,26,22,17,38],
[31,31,33,24,0,19,30,17,30,33],
[32,28,34,34,32,0,30,21,32,36],
[29,26,29,25,21,21,0,26,21,31],
[28,27,23,29,34,30,25,0,18,37],
[32,36,17,34,21,19,30,33,0,29],
[16,25,12,13,18,15,20,14,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,37,32,38,35,28,25,21,27],
[17,0,34,26,26,35,26,27,24,27],
[14,17,0,17,21,19,18,19,19,19],
[19,25,34,0,33,27,27,28,19,25],
[13,25,30,18,0,27,20,25,19,20],
[16,16,32,24,24,0,16,22,14,11],
[23,25,33,24,31,35,0,24,26,27],
[26,24,32,23,26,29,27,0,19,25],
[30,27,32,32,32,37,25,32,0,22],
[24,24,32,26,31,40,24,26,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,23,27,27,17,31,26,25,23],
[28,0,27,26,24,22,27,27,28,27],
[28,24,0,31,23,26,32,31,28,25],
[24,25,20,0,23,28,31,26,26,29],
[24,27,28,28,0,26,29,22,26,29],
[34,29,25,23,25,0,27,28,36,29],
[20,24,19,20,22,24,0,27,24,30],
[25,24,20,25,29,23,24,0,26,27],
[26,23,23,25,25,15,27,25,0,23],
[28,24,26,22,22,22,21,24,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,27,26,30,35,23,34,32,26],
[15,0,20,10,22,21,10,19,24,22],
[24,31,0,33,32,30,28,37,39,33],
[25,41,18,0,31,26,30,28,36,29],
[21,29,19,20,0,38,27,27,29,22],
[16,30,21,25,13,0,23,28,30,18],
[28,41,23,21,24,28,0,30,23,24],
[17,32,14,23,24,23,21,0,28,22],
[19,27,12,15,22,21,28,23,0,10],
[25,29,18,22,29,33,27,29,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,28,35,24,29,24,35,28],
[24,0,26,26,35,17,24,26,44,38],
[24,25,0,22,31,19,18,22,32,23],
[23,25,29,0,30,17,15,19,43,24],
[16,16,20,21,0,22,13,10,32,24],
[27,34,32,34,29,0,18,17,41,30],
[22,27,33,36,38,33,0,31,43,36],
[27,25,29,32,41,34,20,0,37,37],
[16,7,19,8,19,10,8,14,0,16],
[23,13,28,27,27,21,15,14,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,19,23,21,13,23,18,20,24],
[31,0,27,25,32,25,29,23,32,26],
[32,24,0,37,29,26,32,28,30,28],
[28,26,14,0,18,22,26,18,21,20],
[30,19,22,33,0,21,30,21,27,34],
[38,26,25,29,30,0,30,30,26,28],
[28,22,19,25,21,21,0,25,20,20],
[33,28,23,33,30,21,26,0,31,28],
[31,19,21,30,24,25,31,20,0,27],
[27,25,23,31,17,23,31,23,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,21,20,31,24,29,17,26,20],
[25,0,25,30,34,28,29,29,28,28],
[30,26,0,30,30,32,31,25,26,26],
[31,21,21,0,22,20,25,25,28,22],
[20,17,21,29,0,26,22,26,25,19],
[27,23,19,31,25,0,25,28,30,19],
[22,22,20,26,29,26,0,30,26,14],
[34,22,26,26,25,23,21,0,27,22],
[25,23,25,23,26,21,25,24,0,22],
[31,23,25,29,32,32,37,29,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,17,32,31,18,27,20,22,27],
[20,0,20,26,28,18,28,18,23,17],
[34,31,0,36,32,26,38,27,37,23],
[19,25,15,0,21,17,27,22,22,25],
[20,23,19,30,0,20,30,22,28,23],
[33,33,25,34,31,0,34,27,28,31],
[24,23,13,24,21,17,0,15,20,16],
[31,33,24,29,29,24,36,0,26,28],
[29,28,14,29,23,23,31,25,0,25],
[24,34,28,26,28,20,35,23,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,24,17,26,25,19,20,24,20],
[25,0,21,20,29,23,25,22,27,21],
[27,30,0,24,27,23,24,24,23,24],
[34,31,27,0,31,27,27,24,28,28],
[25,22,24,20,0,22,20,22,26,22],
[26,28,28,24,29,0,21,20,24,23],
[32,26,27,24,31,30,0,24,29,30],
[31,29,27,27,29,31,27,0,24,29],
[27,24,28,23,25,27,22,27,0,26],
[31,30,27,23,29,28,21,22,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,24,29,29,27,27,30,30],
[25,0,27,22,27,29,27,29,31,25],
[25,24,0,29,30,23,31,23,30,25],
[27,29,22,0,26,27,27,23,30,26],
[22,24,21,25,0,26,29,25,31,26],
[22,22,28,24,25,0,27,26,31,26],
[24,24,20,24,22,24,0,23,30,21],
[24,22,28,28,26,25,28,0,31,26],
[21,20,21,21,20,20,21,20,0,16],
[21,26,26,25,25,25,30,25,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,17,18,17,20,24,21,27,22],
[30,0,25,31,23,27,28,23,27,23],
[34,26,0,27,25,32,29,29,30,32],
[33,20,24,0,20,28,27,27,28,28],
[34,28,26,31,0,28,33,31,24,30],
[31,24,19,23,23,0,30,24,30,25],
[27,23,22,24,18,21,0,23,21,20],
[30,28,22,24,20,27,28,0,29,30],
[24,24,21,23,27,21,30,22,0,21],
[29,28,19,23,21,26,31,21,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,24,31,28,33,31,27,31,33],
[26,0,26,21,25,24,22,25,26,25],
[27,25,0,21,30,32,25,30,29,28],
[20,30,30,0,25,36,29,29,33,32],
[23,26,21,26,0,29,26,26,25,30],
[18,27,19,15,22,0,23,23,25,24],
[20,29,26,22,25,28,0,24,27,28],
[24,26,21,22,25,28,27,0,25,26],
[20,25,22,18,26,26,24,26,0,25],
[18,26,23,19,21,27,23,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,29,28,34,32,31,25,30,27],
[20,0,18,16,25,22,33,23,21,25],
[22,33,0,19,31,28,32,21,25,23],
[23,35,32,0,33,32,31,25,32,28],
[17,26,20,18,0,26,26,19,22,22],
[19,29,23,19,25,0,26,21,19,18],
[20,18,19,20,25,25,0,26,24,21],
[26,28,30,26,32,30,25,0,27,31],
[21,30,26,19,29,32,27,24,0,23],
[24,26,28,23,29,33,30,20,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,15,17,11,20,17,18,37,18],
[35,0,28,15,28,25,17,29,39,23],
[36,23,0,20,32,19,20,32,36,29],
[34,36,31,0,36,28,32,37,42,23],
[40,23,19,15,0,22,30,19,39,30],
[31,26,32,23,29,0,24,29,36,19],
[34,34,31,19,21,27,0,21,39,18],
[33,22,19,14,32,22,30,0,44,35],
[14,12,15,9,12,15,12,7,0,14],
[33,28,22,28,21,32,33,16,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,19,14,19,13,28,32,23,22],
[39,0,27,29,31,24,29,41,25,27],
[32,24,0,25,29,19,36,43,33,26],
[37,22,26,0,31,29,35,40,25,26],
[32,20,22,20,0,22,24,29,27,17],
[38,27,32,22,29,0,29,42,25,25],
[23,22,15,16,27,22,0,28,19,24],
[19,10,8,11,22,9,23,0,16,18],
[28,26,18,26,24,26,32,35,0,11],
[29,24,25,25,34,26,27,33,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,29,29,28,33,31,43,31,25],
[22,0,28,34,26,32,32,44,28,22],
[22,23,0,26,26,24,28,33,19,21],
[22,17,25,0,21,29,26,32,20,17],
[23,25,25,30,0,22,22,40,31,32],
[18,19,27,22,29,0,26,40,26,24],
[20,19,23,25,29,25,0,34,29,24],
[8,7,18,19,11,11,17,0,16,18],
[20,23,32,31,20,25,22,35,0,24],
[26,29,30,34,19,27,27,33,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,29,31,28,22,27,27,26,27],
[27,0,25,31,26,26,24,25,27,30],
[22,26,0,28,30,26,28,32,26,31],
[20,20,23,0,22,20,23,28,26,29],
[23,25,21,29,0,25,22,28,26,30],
[29,25,25,31,26,0,30,31,31,28],
[24,27,23,28,29,21,0,26,27,29],
[24,26,19,23,23,20,25,0,29,28],
[25,24,25,25,25,20,24,22,0,24],
[24,21,20,22,21,23,22,23,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,23,26,26,20,27,22,27,20],
[18,0,14,20,18,17,23,22,16,15],
[28,37,0,22,25,27,23,26,28,28],
[25,31,29,0,23,25,25,28,27,22],
[25,33,26,28,0,23,23,26,28,23],
[31,34,24,26,28,0,25,27,23,27],
[24,28,28,26,28,26,0,19,25,21],
[29,29,25,23,25,24,32,0,27,20],
[24,35,23,24,23,28,26,24,0,20],
[31,36,23,29,28,24,30,31,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,34,24,33,26,26,25,30,28],
[24,0,33,26,35,23,27,26,30,28],
[17,18,0,12,18,19,13,12,27,17],
[27,25,39,0,32,30,33,32,29,33],
[18,16,33,19,0,21,24,24,27,24],
[25,28,32,21,30,0,29,24,31,27],
[25,24,38,18,27,22,0,27,31,27],
[26,25,39,19,27,27,24,0,27,28],
[21,21,24,22,24,20,20,24,0,21],
[23,23,34,18,27,24,24,23,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,26,17,18,28,28,18,27,26],
[21,0,26,20,17,19,23,15,24,17],
[25,25,0,27,22,23,24,17,28,24],
[34,31,24,0,23,33,28,26,29,37],
[33,34,29,28,0,30,27,20,28,29],
[23,32,28,18,21,0,24,21,21,19],
[23,28,27,23,24,27,0,21,24,23],
[33,36,34,25,31,30,30,0,29,24],
[24,27,23,22,23,30,27,22,0,26],
[25,34,27,14,22,32,28,27,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,22,26,28,17,18,37,17,23],
[24,0,30,31,34,16,21,30,25,27],
[29,21,0,23,23,28,29,36,25,31],
[25,20,28,0,25,24,18,33,23,28],
[23,17,28,26,0,24,26,25,24,24],
[34,35,23,27,27,0,27,38,24,31],
[33,30,22,33,25,24,0,34,26,28],
[14,21,15,18,26,13,17,0,22,25],
[34,26,26,28,27,27,25,29,0,30],
[28,24,20,23,27,20,23,26,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,21,17,25,25,13,15,20,23],
[36,0,37,29,30,30,22,22,35,28],
[30,14,0,30,32,29,19,22,33,30],
[34,22,21,0,34,31,23,30,31,28],
[26,21,19,17,0,22,15,15,22,24],
[26,21,22,20,29,0,18,22,29,22],
[38,29,32,28,36,33,0,23,35,26],
[36,29,29,21,36,29,28,0,33,33],
[31,16,18,20,29,22,16,18,0,26],
[28,23,21,23,27,29,25,18,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,22,22,22,25,27,20,19,20],
[22,0,28,21,21,24,28,22,26,21],
[29,23,0,21,26,28,31,23,24,24],
[29,30,30,0,25,30,30,25,26,22],
[29,30,25,26,0,29,32,31,25,23],
[26,27,23,21,22,0,26,22,23,20],
[24,23,20,21,19,25,0,17,17,16],
[31,29,28,26,20,29,34,0,25,26],
[32,25,27,25,26,28,34,26,0,23],
[31,30,27,29,28,31,35,25,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,27,22,24,24,21,23,27,22],
[23,0,30,24,27,28,21,29,25,26],
[24,21,0,17,24,26,22,28,22,22],
[29,27,34,0,26,35,26,31,27,22],
[27,24,27,25,0,31,21,30,25,29],
[27,23,25,16,20,0,20,28,26,21],
[30,30,29,25,30,31,0,36,29,29],
[28,22,23,20,21,23,15,0,20,24],
[24,26,29,24,26,25,22,31,0,29],
[29,25,29,29,22,30,22,27,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,22,18,18,14,25,29,28,18],
[36,0,28,21,31,24,27,27,32,34],
[29,23,0,29,19,33,43,24,31,38],
[33,30,22,0,27,11,29,20,25,24],
[33,20,32,24,0,18,32,25,32,35],
[37,27,18,40,33,0,39,24,25,20],
[26,24,8,22,19,12,0,20,17,20],
[22,24,27,31,26,27,31,0,20,20],
[23,19,20,26,19,26,34,31,0,25],
[33,17,13,27,16,31,31,31,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,34,26,29,34,25,31,28,26],
[26,0,25,20,26,33,26,24,34,29],
[17,26,0,26,20,37,21,30,25,33],
[25,31,25,0,26,31,23,28,28,28],
[22,25,31,25,0,38,23,28,31,26],
[17,18,14,20,13,0,16,23,20,18],
[26,25,30,28,28,35,0,26,36,30],
[20,27,21,23,23,28,25,0,29,21],
[23,17,26,23,20,31,15,22,0,25],
[25,22,18,23,25,33,21,30,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,21,20,22,26,26,23,25,23],
[33,0,33,24,34,32,24,29,30,28],
[30,18,0,33,34,27,25,27,29,32],
[31,27,18,0,25,29,23,22,27,21],
[29,17,17,26,0,22,25,25,19,26],
[25,19,24,22,29,0,23,24,27,21],
[25,27,26,28,26,28,0,26,27,29],
[28,22,24,29,26,27,25,0,27,23],
[26,21,22,24,32,24,24,24,0,23],
[28,23,19,30,25,30,22,28,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,22,31,26,26,26,21,18,26],
[33,0,24,33,29,24,23,29,23,30],
[29,27,0,36,29,26,25,21,28,30],
[20,18,15,0,18,16,18,17,16,25],
[25,22,22,33,0,20,22,22,19,28],
[25,27,25,35,31,0,25,21,22,29],
[25,28,26,33,29,26,0,22,20,26],
[30,22,30,34,29,30,29,0,26,28],
[33,28,23,35,32,29,31,25,0,30],
[25,21,21,26,23,22,25,23,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,37,28,25,24,29,21,21,26],
[30,0,39,25,26,20,29,23,20,25],
[14,12,0,31,20,15,15,9,14,14],
[23,26,20,0,23,24,16,23,22,27],
[26,25,31,28,0,22,18,27,22,22],
[27,31,36,27,29,0,28,20,27,24],
[22,22,36,35,33,23,0,25,23,27],
[30,28,42,28,24,31,26,0,26,32],
[30,31,37,29,29,24,28,25,0,33],
[25,26,37,24,29,27,24,19,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,35,28,24,22,31,24,22,20],
[31,0,27,28,28,32,23,22,38,33],
[16,24,0,21,30,30,28,32,27,26],
[23,23,30,0,30,26,38,21,29,26],
[27,23,21,21,0,21,25,29,23,27],
[29,19,21,25,30,0,29,25,23,25],
[20,28,23,13,26,22,0,19,23,30],
[27,29,19,30,22,26,32,0,30,38],
[29,13,24,22,28,28,28,21,0,23],
[31,18,25,25,24,26,21,13,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,23,30,29,27,26,28,28,31],
[22,0,23,30,24,21,23,23,30,23],
[28,28,0,28,31,20,25,24,27,27],
[21,21,23,0,23,17,21,18,19,27],
[22,27,20,28,0,20,26,24,25,27],
[24,30,31,34,31,0,31,28,30,33],
[25,28,26,30,25,20,0,22,26,24],
[23,28,27,33,27,23,29,0,30,27],
[23,21,24,32,26,21,25,21,0,26],
[20,28,24,24,24,18,27,24,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,15,19,22,22,21,19,21,16],
[17,0,16,10,20,20,13,16,20,7],
[36,35,0,29,29,25,28,26,28,28],
[32,41,22,0,21,27,27,32,35,28],
[29,31,22,30,0,28,24,26,22,30],
[29,31,26,24,23,0,25,29,30,26],
[30,38,23,24,27,26,0,26,22,36],
[32,35,25,19,25,22,25,0,19,28],
[30,31,23,16,29,21,29,32,0,25],
[35,44,23,23,21,25,15,23,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,15,20,20,25,25,17,12,27],
[25,0,19,21,24,25,24,17,20,28],
[36,32,0,25,29,35,29,27,29,33],
[31,30,26,0,24,28,26,40,23,34],
[31,27,22,27,0,25,25,23,23,33],
[26,26,16,23,26,0,20,23,13,29],
[26,27,22,25,26,31,0,30,27,26],
[34,34,24,11,28,28,21,0,17,34],
[39,31,22,28,28,38,24,34,0,33],
[24,23,18,17,18,22,25,17,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,33,24,27,24,26,27,22,22],
[28,0,25,26,28,28,32,30,21,20],
[18,26,0,22,24,24,26,31,23,22],
[27,25,29,0,27,25,28,23,21,25],
[24,23,27,24,0,26,32,30,20,27],
[27,23,27,26,25,0,36,25,20,28],
[25,19,25,23,19,15,0,28,21,20],
[24,21,20,28,21,26,23,0,23,21],
[29,30,28,30,31,31,30,28,0,24],
[29,31,29,26,24,23,31,30,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,39,39,14,25,26,26,12,26],
[25,0,13,25,13,37,25,25,25,13],
[12,38,0,37,12,24,12,12,12,14],
[12,26,14,0,0,24,26,12,12,14],
[37,38,39,51,0,37,26,24,24,26],
[26,14,27,27,14,0,26,14,26,14],
[25,26,39,25,25,25,0,12,12,26],
[25,26,39,39,27,37,39,0,24,26],
[39,26,39,39,27,25,39,27,0,26],
[25,38,37,37,25,37,25,25,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,24,21,19,17,23,19,17,20],
[36,0,31,31,30,28,32,22,31,25],
[27,20,0,25,18,23,22,15,26,16],
[30,20,26,0,26,17,25,20,28,17],
[32,21,33,25,0,25,31,29,25,27],
[34,23,28,34,26,0,30,24,31,26],
[28,19,29,26,20,21,0,19,26,18],
[32,29,36,31,22,27,32,0,30,27],
[34,20,25,23,26,20,25,21,0,21],
[31,26,35,34,24,25,33,24,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,23,27,28,30,30,25,20,22],
[24,0,23,26,27,28,24,28,27,27],
[28,28,0,28,30,27,25,26,32,25],
[24,25,23,0,30,27,27,22,24,22],
[23,24,21,21,0,24,23,22,25,19],
[21,23,24,24,27,0,17,20,19,23],
[21,27,26,24,28,34,0,32,27,23],
[26,23,25,29,29,31,19,0,26,25],
[31,24,19,27,26,32,24,25,0,23],
[29,24,26,29,32,28,28,26,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,20,23,24,27,25,33,22,24],
[17,0,20,27,18,35,13,19,22,17],
[31,31,0,31,20,36,27,40,25,17],
[28,24,20,0,16,34,31,34,16,21],
[27,33,31,35,0,43,30,27,20,25],
[24,16,15,17,8,0,22,25,13,16],
[26,38,24,20,21,29,0,27,24,33],
[18,32,11,17,24,26,24,0,24,16],
[29,29,26,35,31,38,27,27,0,24],
[27,34,34,30,26,35,18,35,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,45,28,33,29,31,17,32,38],
[33,0,35,36,29,21,33,25,29,30],
[6,16,0,24,16,23,26,10,22,19],
[23,15,27,0,21,16,22,9,23,25],
[18,22,35,30,0,22,33,17,28,21],
[22,30,28,35,29,0,25,21,27,31],
[20,18,25,29,18,26,0,21,25,26],
[34,26,41,42,34,30,30,0,25,32],
[19,22,29,28,23,24,26,26,0,28],
[13,21,32,26,30,20,25,19,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,23,27,32,26,23,23,30,26],
[24,0,27,31,24,29,31,19,33,26],
[28,24,0,29,24,25,21,23,25,21],
[24,20,22,0,23,23,20,21,18,24],
[19,27,27,28,0,26,24,28,22,28],
[25,22,26,28,25,0,23,28,23,28],
[28,20,30,31,27,28,0,25,23,30],
[28,32,28,30,23,23,26,0,27,33],
[21,18,26,33,29,28,28,24,0,24],
[25,25,30,27,23,23,21,18,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,25,32,36,28,27,31,31,28],
[20,0,27,30,35,18,22,24,26,23],
[26,24,0,30,31,26,23,30,28,25],
[19,21,21,0,33,24,24,22,22,18],
[15,16,20,18,0,17,11,24,24,17],
[23,33,25,27,34,0,26,31,29,27],
[24,29,28,27,40,25,0,28,29,23],
[20,27,21,29,27,20,23,0,34,26],
[20,25,23,29,27,22,22,17,0,21],
[23,28,26,33,34,24,28,25,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,18,18,17,17,17,27,27,24],
[34,0,19,26,14,27,18,24,29,24],
[33,32,0,44,23,24,27,38,39,39],
[33,25,7,0,25,20,22,28,35,29],
[34,37,28,26,0,25,14,26,26,26],
[34,24,27,31,26,0,19,25,26,31],
[34,33,24,29,37,32,0,46,41,37],
[24,27,13,23,25,26,5,0,32,31],
[24,22,12,16,25,25,10,19,0,30],
[27,27,12,22,25,20,14,20,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,28,18,21,24,28,31,24,30],
[27,0,28,28,27,32,31,32,23,25],
[23,23,0,15,16,18,31,18,20,20],
[33,23,36,0,25,28,30,27,29,35],
[30,24,35,26,0,30,27,31,25,35],
[27,19,33,23,21,0,26,22,23,27],
[23,20,20,21,24,25,0,22,19,22],
[20,19,33,24,20,29,29,0,22,26],
[27,28,31,22,26,28,32,29,0,29],
[21,26,31,16,16,24,29,25,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,23,35,29,19,21,20,25,33],
[20,0,21,28,17,14,22,18,23,24],
[28,30,0,32,20,19,25,29,20,26],
[16,23,19,0,17,18,19,21,17,23],
[22,34,31,34,0,22,27,24,29,29],
[32,37,32,33,29,0,24,26,29,32],
[30,29,26,32,24,27,0,24,24,24],
[31,33,22,30,27,25,27,0,25,29],
[26,28,31,34,22,22,27,26,0,30],
[18,27,25,28,22,19,27,22,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,32,29,32,28,27,23,30,32],
[27,0,33,30,27,24,28,27,26,30],
[19,18,0,23,24,24,25,20,18,26],
[22,21,28,0,22,22,28,22,21,27],
[19,24,27,29,0,21,24,14,21,28],
[23,27,27,29,30,0,30,19,25,28],
[24,23,26,23,27,21,0,21,22,27],
[28,24,31,29,37,32,30,0,30,30],
[21,25,33,30,30,26,29,21,0,32],
[19,21,25,24,23,23,24,21,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,24,21,23,28,24,24,27,29],
[29,0,23,25,25,30,24,31,30,30],
[27,28,0,26,20,19,22,23,25,24],
[30,26,25,0,29,29,32,28,28,35],
[28,26,31,22,0,31,25,28,31,33],
[23,21,32,22,20,0,23,28,27,33],
[27,27,29,19,26,28,0,29,25,28],
[27,20,28,23,23,23,22,0,25,29],
[24,21,26,23,20,24,26,26,0,26],
[22,21,27,16,18,18,23,22,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,23,26,26,27,37,25,23,22],
[28,0,33,26,30,27,33,32,20,26],
[28,18,0,29,33,32,30,30,21,24],
[25,25,22,0,26,28,31,25,22,25],
[25,21,18,25,0,27,27,25,23,26],
[24,24,19,23,24,0,27,27,21,27],
[14,18,21,20,24,24,0,21,14,17],
[26,19,21,26,26,24,30,0,24,19],
[28,31,30,29,28,30,37,27,0,21],
[29,25,27,26,25,24,34,32,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,23,26,19,22,12,35,22,8],
[17,0,26,27,18,18,13,39,14,17],
[28,25,0,26,18,22,17,38,26,24],
[25,24,25,0,12,16,24,42,22,16],
[32,33,33,39,0,30,24,42,31,28],
[29,33,29,35,21,0,25,46,17,19],
[39,38,34,27,27,26,0,42,18,33],
[16,12,13,9,9,5,9,0,8,8],
[29,37,25,29,20,34,33,43,0,20],
[43,34,27,35,23,32,18,43,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,21,22,24,26,24,23,21,23],
[26,0,20,22,27,22,23,25,23,25],
[30,31,0,30,27,29,30,31,23,34],
[29,29,21,0,30,27,29,22,26,26],
[27,24,24,21,0,27,27,28,23,29],
[25,29,22,24,24,0,26,27,24,25],
[27,28,21,22,24,25,0,25,24,22],
[28,26,20,29,23,24,26,0,23,25],
[30,28,28,25,28,27,27,28,0,29],
[28,26,17,25,22,26,29,26,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,25,20,24,23,21,20,17,19],
[30,0,30,26,21,24,20,21,19,27],
[26,21,0,19,18,20,16,15,14,19],
[31,25,32,0,26,30,26,28,20,26],
[27,30,33,25,0,26,21,23,24,20],
[28,27,31,21,25,0,21,24,21,23],
[30,31,35,25,30,30,0,24,21,27],
[31,30,36,23,28,27,27,0,26,29],
[34,32,37,31,27,30,30,25,0,28],
[32,24,32,25,31,28,24,22,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,32,27,29,25,23,28,41,29],
[25,0,25,21,26,27,24,30,37,22],
[19,26,0,21,27,25,23,27,34,19],
[24,30,30,0,36,26,33,32,38,27],
[22,25,24,15,0,27,24,24,29,23],
[26,24,26,25,24,0,24,23,29,26],
[28,27,28,18,27,27,0,31,36,28],
[23,21,24,19,27,28,20,0,32,23],
[10,14,17,13,22,22,15,19,0,18],
[22,29,32,24,28,25,23,28,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,29,25,23,18,23,29,28,32],
[26,0,30,28,19,20,24,27,25,30],
[22,21,0,21,17,18,22,29,20,25],
[26,23,30,0,22,22,26,22,23,25],
[28,32,34,29,0,28,25,34,30,36],
[33,31,33,29,23,0,32,28,32,32],
[28,27,29,25,26,19,0,27,27,34],
[22,24,22,29,17,23,24,0,24,31],
[23,26,31,28,21,19,24,27,0,25],
[19,21,26,26,15,19,17,20,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,29,30,32,28,29,27,24,25],
[26,0,27,23,30,33,34,27,26,21],
[22,24,0,24,29,33,27,27,26,28],
[21,28,27,0,31,32,29,25,25,20],
[19,21,22,20,0,31,26,20,19,22],
[23,18,18,19,20,0,22,21,18,20],
[22,17,24,22,25,29,0,21,23,21],
[24,24,24,26,31,30,30,0,25,27],
[27,25,25,26,32,33,28,26,0,26],
[26,30,23,31,29,31,30,24,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,28,28,32,28,30,24,35,26],
[18,0,24,31,21,17,14,23,25,24],
[23,27,0,38,31,27,22,27,33,19],
[23,20,13,0,18,18,11,19,25,16],
[19,30,20,33,0,18,16,24,28,22],
[23,34,24,33,33,0,24,22,27,26],
[21,37,29,40,35,27,0,29,31,27],
[27,28,24,32,27,29,22,0,32,18],
[16,26,18,26,23,24,20,19,0,20],
[25,27,32,35,29,25,24,33,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,25,25,44,44,31,45,37],
[26,0,25,39,32,25,31,38,32,25],
[26,26,0,32,25,39,32,25,39,25],
[26,12,19,0,25,31,25,32,32,31],
[26,19,26,26,0,26,26,26,39,19],
[7,26,12,20,25,0,18,31,32,19],
[7,20,19,26,25,33,0,25,33,26],
[20,13,26,19,25,20,26,0,39,13],
[6,19,12,19,12,19,18,12,0,25],
[14,26,26,20,32,32,25,38,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,21,20,20,21,35,27,29,29],
[16,0,23,22,16,23,16,29,15,29],
[30,28,0,14,20,29,38,21,14,29],
[31,29,37,0,29,31,45,29,15,37],
[31,35,31,22,0,23,31,29,23,37],
[30,28,22,20,28,0,36,20,28,35],
[16,35,13,6,20,15,0,19,21,21],
[24,22,30,22,22,31,32,0,16,29],
[22,36,37,36,28,23,30,35,0,37],
[22,22,22,14,14,16,30,22,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,26,28,25,27,34,33,24,24],
[19,0,27,26,24,25,32,26,26,25],
[25,24,0,24,18,18,30,27,22,21],
[23,25,27,0,25,22,32,27,22,25],
[26,27,33,26,0,25,32,30,32,33],
[24,26,33,29,26,0,33,30,27,22],
[17,19,21,19,19,18,0,24,22,16],
[18,25,24,24,21,21,27,0,22,20],
[27,25,29,29,19,24,29,29,0,28],
[27,26,30,26,18,29,35,31,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,32,33,35,26,24,24,21,23],
[27,0,27,31,26,32,18,24,32,31],
[19,24,0,25,29,21,26,18,14,16],
[18,20,26,0,32,23,25,28,23,19],
[16,25,22,19,0,21,23,12,22,19],
[25,19,30,28,30,0,28,25,25,27],
[27,33,25,26,28,23,0,19,34,29],
[27,27,33,23,39,26,32,0,28,25],
[30,19,37,28,29,26,17,23,0,29],
[28,20,35,32,32,24,22,26,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,27,26,27,21,25,26,28,19],
[25,0,25,29,27,23,20,16,19,25],
[24,26,0,23,29,25,23,26,24,28],
[25,22,28,0,30,27,22,28,22,24],
[24,24,22,21,0,27,26,23,25,20],
[30,28,26,24,24,0,18,23,28,30],
[26,31,28,29,25,33,0,32,29,28],
[25,35,25,23,28,28,19,0,20,26],
[23,32,27,29,26,23,22,31,0,26],
[32,26,23,27,31,21,23,25,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,24,22,24,35,23,26,30,30],
[22,0,31,35,28,34,24,35,28,34],
[27,20,0,17,26,28,18,23,18,31],
[29,16,34,0,24,37,21,29,31,33],
[27,23,25,27,0,31,26,27,22,22],
[16,17,23,14,20,0,20,25,19,22],
[28,27,33,30,25,31,0,24,20,34],
[25,16,28,22,24,26,27,0,24,28],
[21,23,33,20,29,32,31,27,0,29],
[21,17,20,18,29,29,17,23,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,25,29,28,28,23,33,22,26],
[25,0,28,25,27,26,24,29,24,28],
[26,23,0,26,22,27,24,23,23,28],
[22,26,25,0,23,28,23,28,26,26],
[23,24,29,28,0,29,24,29,25,26],
[23,25,24,23,22,0,21,22,18,25],
[28,27,27,28,27,30,0,24,29,26],
[18,22,28,23,22,29,27,0,22,24],
[29,27,28,25,26,33,22,29,0,31],
[25,23,23,25,25,26,25,27,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,19,25,29,28,22,26,21,25],
[23,0,26,30,28,23,27,28,22,23],
[32,25,0,28,26,29,19,32,23,26],
[26,21,23,0,19,23,32,20,10,18],
[22,23,25,32,0,26,20,30,22,28],
[23,28,22,28,25,0,25,28,26,26],
[29,24,32,19,31,26,0,26,21,20],
[25,23,19,31,21,23,25,0,22,17],
[30,29,28,41,29,25,30,29,0,26],
[26,28,25,33,23,25,31,34,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,16,24,23,28,23,20,26,27],
[27,0,25,27,21,29,26,16,28,27],
[35,26,0,29,25,31,24,25,27,31],
[27,24,22,0,25,23,31,28,24,27],
[28,30,26,26,0,28,28,19,26,27],
[23,22,20,28,23,0,31,26,26,26],
[28,25,27,20,23,20,0,24,25,22],
[31,35,26,23,32,25,27,0,28,34],
[25,23,24,27,25,25,26,23,0,30],
[24,24,20,24,24,25,29,17,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,17,22,24,13,25,24,24,20],
[26,0,18,28,18,23,24,24,26,23],
[34,33,0,28,30,26,25,33,24,26],
[29,23,23,0,19,22,25,26,23,26],
[27,33,21,32,0,20,33,32,31,34],
[38,28,25,29,31,0,30,29,28,32],
[26,27,26,26,18,21,0,25,24,22],
[27,27,18,25,19,22,26,0,21,22],
[27,25,27,28,20,23,27,30,0,24],
[31,28,25,25,17,19,29,29,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,24,28,28,25,23,26,23,28],
[29,0,27,27,30,30,21,23,28,31],
[27,24,0,27,29,25,21,25,26,29],
[23,24,24,0,23,21,18,18,23,28],
[23,21,22,28,0,25,22,24,28,26],
[26,21,26,30,26,0,23,24,30,29],
[28,30,30,33,29,28,0,25,30,32],
[25,28,26,33,27,27,26,0,29,27],
[28,23,25,28,23,21,21,22,0,26],
[23,20,22,23,25,22,19,24,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,30,21,20,22,32,20,29,18],
[29,0,28,25,23,22,39,29,21,32],
[21,23,0,29,29,21,35,22,26,27],
[30,26,22,0,19,22,37,24,34,33],
[31,28,22,32,0,26,37,31,30,32],
[29,29,30,29,25,0,38,26,29,27],
[19,12,16,14,14,13,0,18,16,18],
[31,22,29,27,20,25,33,0,24,25],
[22,30,25,17,21,22,35,27,0,22],
[33,19,24,18,19,24,33,26,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,30,26,30,26,20,28,26,21],
[22,0,32,23,28,28,21,29,29,22],
[21,19,0,23,22,23,17,27,21,26],
[25,28,28,0,29,29,27,27,27,26],
[21,23,29,22,0,20,18,26,25,22],
[25,23,28,22,31,0,25,32,32,26],
[31,30,34,24,33,26,0,29,31,30],
[23,22,24,24,25,19,22,0,25,24],
[25,22,30,24,26,19,20,26,0,25],
[30,29,25,25,29,25,21,27,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,0,35,35,18,17,35,16,35],
[16,0,0,16,35,0,16,18,16,18],
[51,51,0,51,35,34,33,51,16,51],
[16,35,0,0,35,18,16,18,16,18],
[16,16,16,16,0,16,16,16,16,16],
[33,51,17,33,35,0,33,51,33,51],
[34,35,18,35,35,18,0,18,34,18],
[16,33,0,33,35,0,33,0,16,16],
[35,35,35,35,35,18,17,35,0,35],
[16,33,0,33,35,0,33,35,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,26,23,19,26,21,28,23,19],
[27,0,29,34,17,23,28,35,23,25],
[25,22,0,29,24,25,20,24,25,20],
[28,17,22,0,25,21,24,20,22,21],
[32,34,27,26,0,24,34,28,28,30],
[25,28,26,30,27,0,28,35,33,24],
[30,23,31,27,17,23,0,23,32,25],
[23,16,27,31,23,16,28,0,22,20],
[28,28,26,29,23,18,19,29,0,23],
[32,26,31,30,21,27,26,31,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,23,25,26,22,19,23,31,30],
[32,0,20,20,27,26,31,24,29,31],
[28,31,0,26,25,26,31,25,38,32],
[26,31,25,0,26,20,24,21,39,25],
[25,24,26,25,0,20,20,15,31,24],
[29,25,25,31,31,0,34,30,35,34],
[32,20,20,27,31,17,0,22,27,24],
[28,27,26,30,36,21,29,0,39,28],
[20,22,13,12,20,16,24,12,0,25],
[21,20,19,26,27,17,27,23,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,12,11,22,9,21,18,21,18],
[42,0,22,23,25,20,40,24,33,29],
[39,29,0,27,32,28,29,24,34,34],
[40,28,24,0,33,34,34,26,41,29],
[29,26,19,18,0,26,28,22,22,35],
[42,31,23,17,25,0,29,28,29,34],
[30,11,22,17,23,22,0,24,26,24],
[33,27,27,25,29,23,27,0,30,27],
[30,18,17,10,29,22,25,21,0,19],
[33,22,17,22,16,17,27,24,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,25,38,18,26,32,25,25,38],
[25,0,32,25,25,13,51,32,31,38],
[26,19,0,26,26,13,19,39,25,32],
[13,26,25,0,12,20,26,19,19,33],
[33,26,25,39,0,26,26,26,38,39],
[25,38,38,31,25,0,38,32,31,45],
[19,0,32,25,25,13,0,32,25,26],
[26,19,12,32,25,19,19,0,24,32],
[26,20,26,32,13,20,26,27,0,33],
[13,13,19,18,12,6,25,19,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,30,24,35,25,26,30,28,26],
[25,0,28,25,30,27,23,31,26,27],
[21,23,0,23,27,21,18,31,23,30],
[27,26,28,0,33,25,27,29,24,26],
[16,21,24,18,0,24,18,26,20,26],
[26,24,30,26,27,0,23,28,28,29],
[25,28,33,24,33,28,0,35,30,30],
[21,20,20,22,25,23,16,0,22,24],
[23,25,28,27,31,23,21,29,0,28],
[25,24,21,25,25,22,21,27,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,27,17,35,26,27,18,25,16],
[51,0,34,24,42,33,42,25,33,24],
[24,17,0,24,33,33,42,24,15,33],
[34,27,27,0,18,18,43,34,25,34],
[16,9,18,33,0,26,34,25,7,16],
[25,18,18,33,25,0,34,34,16,25],
[24,9,9,8,17,17,0,7,16,24],
[33,26,27,17,26,17,44,0,33,24],
[26,18,36,26,44,35,35,18,0,33],
[35,27,18,17,35,26,27,27,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,15,21,24,23,26,29,29,29],
[31,0,16,12,25,19,22,29,19,22],
[36,35,0,22,26,22,22,21,25,25],
[30,39,29,0,20,29,26,33,28,24],
[27,26,25,31,0,22,20,23,28,13],
[28,32,29,22,29,0,31,30,32,27],
[25,29,29,25,31,20,0,27,31,20],
[22,22,30,18,28,21,24,0,36,20],
[22,32,26,23,23,19,20,15,0,27],
[22,29,26,27,38,24,31,31,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,27,30,34,34,27,32,23,32],
[20,0,29,24,26,31,18,26,24,28],
[24,22,0,27,30,31,23,30,25,31],
[21,27,24,0,24,35,23,32,24,27],
[17,25,21,27,0,30,21,27,26,24],
[17,20,20,16,21,0,17,22,20,26],
[24,33,28,28,30,34,0,30,27,32],
[19,25,21,19,24,29,21,0,25,25],
[28,27,26,27,25,31,24,26,0,28],
[19,23,20,24,27,25,19,26,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,23,19,21,21,23,26,22,22],
[25,0,20,23,22,18,28,22,25,28],
[28,31,0,27,22,27,27,26,25,20],
[32,28,24,0,26,23,27,26,30,28],
[30,29,29,25,0,25,26,29,31,26],
[30,33,24,28,26,0,28,34,27,21],
[28,23,24,24,25,23,0,28,25,20],
[25,29,25,25,22,17,23,0,28,23],
[29,26,26,21,20,24,26,23,0,23],
[29,23,31,23,25,30,31,28,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,21,24,17,21,21,23,28,21],
[30,0,23,31,23,25,25,29,30,25],
[30,28,0,33,16,20,24,29,29,24],
[27,20,18,0,14,19,24,20,25,20],
[34,28,35,37,0,32,27,24,34,22],
[30,26,31,32,19,0,30,24,31,23],
[30,26,27,27,24,21,0,27,33,26],
[28,22,22,31,27,27,24,0,29,29],
[23,21,22,26,17,20,18,22,0,20],
[30,26,27,31,29,28,25,22,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,29,32,32,33,27,25,32,32],
[26,0,37,29,39,35,20,18,31,35],
[22,14,0,17,26,23,26,15,24,24],
[19,22,34,0,29,32,26,20,26,26],
[19,12,25,22,0,21,14,14,26,21],
[18,16,28,19,30,0,24,16,26,26],
[24,31,25,25,37,27,0,27,29,32],
[26,33,36,31,37,35,24,0,29,26],
[19,20,27,25,25,25,22,22,0,25],
[19,16,27,25,30,25,19,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,26,27,27,27,18,24,24,20],
[27,0,31,29,32,30,28,30,25,24],
[25,20,0,30,26,29,20,28,20,25],
[24,22,21,0,22,22,19,23,20,21],
[24,19,25,29,0,28,18,30,25,28],
[24,21,22,29,23,0,24,23,22,21],
[33,23,31,32,33,27,0,31,30,26],
[27,21,23,28,21,28,20,0,21,23],
[27,26,31,31,26,29,21,30,0,25],
[31,27,26,30,23,30,25,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,20,30,51,30,40,41,41,31],
[31,0,30,31,41,21,51,41,41,31],
[31,21,0,41,31,21,51,41,41,11],
[21,20,10,0,41,21,20,31,41,11],
[0,10,20,10,0,10,30,31,10,21],
[21,30,30,30,41,0,30,31,41,41],
[11,0,0,31,21,21,0,21,31,11],
[10,10,10,20,20,20,30,0,20,21],
[10,10,10,10,41,10,20,31,0,21],
[20,20,40,40,30,10,40,30,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,22,22,16,14,21,13,22],
[27,0,25,33,29,24,23,27,18,31],
[27,26,0,35,25,29,25,26,24,28],
[29,18,16,0,23,21,15,24,13,26],
[29,22,26,28,0,26,25,19,28,32],
[35,27,22,30,25,0,22,27,21,27],
[37,28,26,36,26,29,0,30,23,35],
[30,24,25,27,32,24,21,0,21,28],
[38,33,27,38,23,30,28,30,0,28],
[29,20,23,25,19,24,16,23,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,33,29,22,22,26,33,34,25],
[18,0,38,17,21,14,18,22,21,10],
[18,13,0,19,13,14,19,20,19,15],
[22,34,32,0,32,25,19,26,27,27],
[29,30,38,19,0,18,23,32,30,23],
[29,37,37,26,33,0,18,35,33,34],
[25,33,32,32,28,33,0,32,29,27],
[18,29,31,25,19,16,19,0,24,21],
[17,30,32,24,21,18,22,27,0,26],
[26,41,36,24,28,17,24,30,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,17,33,33,33,33,33,17,33],
[0,0,0,16,16,0,16,16,0,16],
[34,51,0,51,34,33,34,34,34,16],
[18,35,0,0,16,17,0,16,18,16],
[18,35,17,35,0,17,18,35,35,17],
[18,51,18,34,34,0,34,34,18,34],
[18,35,17,51,33,17,0,51,35,33],
[18,35,17,35,16,17,0,0,18,0],
[34,51,17,33,16,33,16,33,0,33],
[18,35,35,35,34,17,18,51,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,27,28,26,28,33,26,27,22],
[21,0,17,17,19,22,28,20,23,14],
[24,34,0,21,25,23,31,30,28,17],
[23,34,30,0,30,25,27,35,28,28],
[25,32,26,21,0,28,31,27,30,23],
[23,29,28,26,23,0,29,28,27,24],
[18,23,20,24,20,22,0,24,23,16],
[25,31,21,16,24,23,27,0,22,19],
[24,28,23,23,21,24,28,29,0,18],
[29,37,34,23,28,27,35,32,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,28,25,23,35,30,25,26,27],
[25,0,26,22,15,30,24,25,21,25],
[23,25,0,23,23,29,28,22,28,23],
[26,29,28,0,27,36,32,28,24,26],
[28,36,28,24,0,34,32,27,27,31],
[16,21,22,15,17,0,25,23,18,23],
[21,27,23,19,19,26,0,17,22,26],
[26,26,29,23,24,28,34,0,29,28],
[25,30,23,27,24,33,29,22,0,26],
[24,26,28,25,20,28,25,23,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,23,25,25,25,32,26,32,26],
[17,0,21,20,23,18,19,15,22,23],
[28,30,0,23,21,28,27,20,24,27],
[26,31,28,0,30,22,31,29,30,28],
[26,28,30,21,0,24,25,24,28,27],
[26,33,23,29,27,0,28,29,27,25],
[19,32,24,20,26,23,0,23,19,18],
[25,36,31,22,27,22,28,0,26,22],
[19,29,27,21,23,24,32,25,0,16],
[25,28,24,23,24,26,33,29,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,29,25,26,29,34,27,25,28],
[27,0,34,24,22,30,32,24,27,24],
[22,17,0,21,26,24,29,23,25,27],
[26,27,30,0,25,25,36,29,26,23],
[25,29,25,26,0,22,26,22,26,21],
[22,21,27,26,29,0,29,23,22,27],
[17,19,22,15,25,22,0,17,22,23],
[24,27,28,22,29,28,34,0,29,29],
[26,24,26,25,25,29,29,22,0,24],
[23,27,24,28,30,24,28,22,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,23,32,28,30,22,24,29,23],
[22,0,26,26,29,31,20,22,24,26],
[28,25,0,21,29,29,17,24,24,29],
[19,25,30,0,27,28,24,28,22,31],
[23,22,22,24,0,26,20,20,26,20],
[21,20,22,23,25,0,20,25,26,18],
[29,31,34,27,31,31,0,32,25,30],
[27,29,27,23,31,26,19,0,27,21],
[22,27,27,29,25,25,26,24,0,19],
[28,25,22,20,31,33,21,30,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,21,19,27,19,20,21,25,26],
[25,0,21,22,22,22,28,26,25,30],
[30,30,0,29,28,24,27,24,24,27],
[32,29,22,0,30,28,28,27,27,27],
[24,29,23,21,0,25,25,22,26,28],
[32,29,27,23,26,0,32,35,26,25],
[31,23,24,23,26,19,0,26,22,29],
[30,25,27,24,29,16,25,0,22,23],
[26,26,27,24,25,25,29,29,0,26],
[25,21,24,24,23,26,22,28,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,25,22,19,21,14,17,22,25],
[39,0,32,29,26,24,28,30,28,32],
[26,19,0,18,28,22,14,22,16,23],
[29,22,33,0,30,28,27,32,19,31],
[32,25,23,21,0,20,17,24,21,31],
[30,27,29,23,31,0,18,24,22,32],
[37,23,37,24,34,33,0,32,32,27],
[34,21,29,19,27,27,19,0,16,35],
[29,23,35,32,30,29,19,35,0,27],
[26,19,28,20,20,19,24,16,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,27,28,33,27,23,28,28,32],
[27,0,21,24,24,23,25,23,23,27],
[24,30,0,30,30,32,31,25,29,28],
[23,27,21,0,27,31,30,25,27,27],
[18,27,21,24,0,22,22,30,26,21],
[24,28,19,20,29,0,29,24,29,29],
[28,26,20,21,29,22,0,21,22,29],
[23,28,26,26,21,27,30,0,28,27],
[23,28,22,24,25,22,29,23,0,22],
[19,24,23,24,30,22,22,24,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,23,23,22,22,30,24,26,25],
[21,0,17,22,23,20,25,21,25,19],
[28,34,0,25,28,26,27,28,31,22],
[28,29,26,0,23,24,31,33,27,26],
[29,28,23,28,0,25,28,29,28,29],
[29,31,25,27,26,0,32,29,28,26],
[21,26,24,20,23,19,0,21,25,23],
[27,30,23,18,22,22,30,0,28,23],
[25,26,20,24,23,23,26,23,0,21],
[26,32,29,25,22,25,28,28,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,37,25,22,16,29,38,20,23],
[30,0,36,27,26,25,26,45,24,18],
[14,15,0,16,20,18,28,32,24,21],
[26,24,35,0,20,31,31,38,38,28],
[29,25,31,31,0,22,35,36,21,14],
[35,26,33,20,29,0,32,41,36,26],
[22,25,23,20,16,19,0,32,19,19],
[13,6,19,13,15,10,19,0,7,10],
[31,27,27,13,30,15,32,44,0,24],
[28,33,30,23,37,25,32,41,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,17,23,32,19,18,24,26,22],
[27,0,27,32,39,24,24,30,19,25],
[34,24,0,34,41,30,28,28,25,28],
[28,19,17,0,31,25,21,27,23,26],
[19,12,10,20,0,10,13,17,19,16],
[32,27,21,26,41,0,24,26,24,33],
[33,27,23,30,38,27,0,29,28,25],
[27,21,23,24,34,25,22,0,20,24],
[25,32,26,28,32,27,23,31,0,18],
[29,26,23,25,35,18,26,27,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,37,32,29,20,30,33,22,27],
[11,0,26,19,22,15,23,24,12,18],
[14,25,0,21,23,18,18,22,20,25],
[19,32,30,0,28,27,28,28,20,26],
[22,29,28,23,0,24,24,23,18,30],
[31,36,33,24,27,0,30,32,26,27],
[21,28,33,23,27,21,0,26,16,27],
[18,27,29,23,28,19,25,0,19,27],
[29,39,31,31,33,25,35,32,0,28],
[24,33,26,25,21,24,24,24,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,14,16,18,17,25,21,17,15],
[34,0,24,30,26,18,30,30,23,21],
[37,27,0,28,30,24,33,24,22,22],
[35,21,23,0,24,25,29,23,25,27],
[33,25,21,27,0,22,33,28,25,25],
[34,33,27,26,29,0,28,32,29,21],
[26,21,18,22,18,23,0,26,17,23],
[30,21,27,28,23,19,25,0,26,20],
[34,28,29,26,26,22,34,25,0,22],
[36,30,29,24,26,30,28,31,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,16,15,17,29,16,25,28,27],
[22,0,25,20,23,24,20,30,31,31],
[35,26,0,22,34,24,27,33,32,32],
[36,31,29,0,26,26,19,28,29,30],
[34,28,17,25,0,25,27,24,31,31],
[22,27,27,25,26,0,18,25,31,31],
[35,31,24,32,24,33,0,24,31,24],
[26,21,18,23,27,26,27,0,20,27],
[23,20,19,22,20,20,20,31,0,32],
[24,20,19,21,20,20,27,24,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,23,21,32,27,30,29,26,25],
[27,0,23,19,29,26,31,30,25,22],
[28,28,0,20,24,20,25,31,26,25],
[30,32,31,0,35,28,36,34,31,25],
[19,22,27,16,0,17,21,27,28,21],
[24,25,31,23,34,0,37,30,30,30],
[21,20,26,15,30,14,0,24,22,23],
[22,21,20,17,24,21,27,0,21,19],
[25,26,25,20,23,21,29,30,0,23],
[26,29,26,26,30,21,28,32,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,22,23,23,22,23,27,22],
[27,0,30,24,27,29,25,26,25,27],
[27,21,0,22,22,22,21,27,25,26],
[29,27,29,0,28,28,24,29,28,28],
[28,24,29,23,0,27,28,27,28,29],
[28,22,29,23,24,0,25,27,26,24],
[29,26,30,27,23,26,0,28,30,30],
[28,25,24,22,24,24,23,0,26,27],
[24,26,26,23,23,25,21,25,0,24],
[29,24,25,23,22,27,21,24,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,21,26,19,22,12,19,12,13],
[32,0,27,31,26,26,29,24,22,25],
[30,24,0,36,25,30,26,22,22,20],
[25,20,15,0,19,23,19,25,23,20],
[32,25,26,32,0,34,24,27,23,22],
[29,25,21,28,17,0,25,24,19,31],
[39,22,25,32,27,26,0,26,27,27],
[32,27,29,26,24,27,25,0,26,23],
[39,29,29,28,28,32,24,25,0,28],
[38,26,31,31,29,20,24,28,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,17,17,16,33,17,17,0,16],
[51,0,35,17,16,51,33,33,35,33],
[34,16,0,16,16,34,16,16,16,16],
[34,34,35,0,16,34,33,16,34,16],
[35,35,35,35,0,51,17,35,35,35],
[18,0,17,17,0,0,17,17,0,0],
[34,18,35,18,34,34,0,18,18,34],
[34,18,35,35,16,34,33,0,18,16],
[51,16,35,17,16,51,33,33,0,16],
[35,18,35,35,16,51,17,35,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,31,30,33,25,23,17,39,28],
[25,0,38,24,29,30,11,10,20,12],
[20,13,0,20,22,15,16,18,23,13],
[21,27,31,0,27,27,32,30,21,14],
[18,22,29,24,0,22,17,11,18,16],
[26,21,36,24,29,0,17,11,29,22],
[28,40,35,19,34,34,0,30,32,18],
[34,41,33,21,40,40,21,0,35,18],
[12,31,28,30,33,22,19,16,0,14],
[23,39,38,37,35,29,33,33,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,30,24,28,26,25,30,23,20],
[24,0,30,27,32,31,26,30,28,28],
[21,21,0,23,23,27,22,22,23,25],
[27,24,28,0,23,28,24,24,26,20],
[23,19,28,28,0,31,27,30,25,26],
[25,20,24,23,20,0,20,21,23,21],
[26,25,29,27,24,31,0,28,22,24],
[21,21,29,27,21,30,23,0,25,22],
[28,23,28,25,26,28,29,26,0,23],
[31,23,26,31,25,30,27,29,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,19,24,22,17,25,26,25,20],
[24,0,18,30,25,24,31,24,23,24],
[32,33,0,33,29,26,33,25,27,24],
[27,21,18,0,25,23,23,27,25,23],
[29,26,22,26,0,27,30,28,27,24],
[34,27,25,28,24,0,25,27,21,25],
[26,20,18,28,21,26,0,24,24,21],
[25,27,26,24,23,24,27,0,28,25],
[26,28,24,26,24,30,27,23,0,28],
[31,27,27,28,27,26,30,26,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,23,23,31,29,31,26,19,23],
[29,0,29,24,30,35,39,24,26,35],
[28,22,0,23,25,22,33,21,20,31],
[28,27,28,0,33,26,29,31,20,31],
[20,21,26,18,0,18,29,16,19,32],
[22,16,29,25,33,0,25,22,21,26],
[20,12,18,22,22,26,0,27,19,22],
[25,27,30,20,35,29,24,0,25,24],
[32,25,31,31,32,30,32,26,0,32],
[28,16,20,20,19,25,29,27,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,25,22,20,25,31,26,24,20],
[23,0,22,24,24,21,29,23,23,27],
[26,29,0,20,26,23,26,24,24,24],
[29,27,31,0,22,25,28,24,26,22],
[31,27,25,29,0,22,34,22,28,25],
[26,30,28,26,29,0,30,25,24,21],
[20,22,25,23,17,21,0,16,23,23],
[25,28,27,27,29,26,35,0,32,25],
[27,28,27,25,23,27,28,19,0,20],
[31,24,27,29,26,30,28,26,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,18,18,18,33,18,18,18,15],
[51,0,18,18,36,51,18,18,33,15],
[33,33,0,36,18,51,18,36,15,33],
[33,33,15,0,33,33,18,33,15,15],
[33,15,33,18,0,33,18,18,33,15],
[18,0,0,18,18,0,18,18,0,0],
[33,33,33,33,33,33,0,33,33,15],
[33,33,15,18,33,33,18,0,15,15],
[33,18,36,36,18,51,18,36,0,33],
[36,36,18,36,36,51,36,36,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,25,35,30,27,26,26,29,24],
[21,0,29,21,21,17,18,20,26,22],
[26,22,0,26,23,29,21,30,31,23],
[16,30,25,0,23,19,18,22,21,24],
[21,30,28,28,0,28,26,26,29,24],
[24,34,22,32,23,0,21,29,29,31],
[25,33,30,33,25,30,0,24,28,25],
[25,31,21,29,25,22,27,0,24,24],
[22,25,20,30,22,22,23,27,0,23],
[27,29,28,27,27,20,26,27,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,24,20,36,40,19,31,32,35],
[35,0,23,35,35,40,25,26,40,29],
[27,28,0,26,38,36,31,22,33,31],
[31,16,25,0,21,35,31,20,27,30],
[15,16,13,30,0,24,20,15,26,24],
[11,11,15,16,27,0,15,26,27,16],
[32,26,20,20,31,36,0,22,31,36],
[20,25,29,31,36,25,29,0,42,19],
[19,11,18,24,25,24,20,9,0,23],
[16,22,20,21,27,35,15,32,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,29,27,28,29,24,25,32,26],
[24,0,25,21,25,26,26,22,25,26],
[22,26,0,23,26,21,23,17,27,23],
[24,30,28,0,26,23,26,24,27,25],
[23,26,25,25,0,24,24,22,24,25],
[22,25,30,28,27,0,25,22,29,23],
[27,25,28,25,27,26,0,21,27,22],
[26,29,34,27,29,29,30,0,30,24],
[19,26,24,24,27,22,24,21,0,24],
[25,25,28,26,26,28,29,27,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,16,22,27,23,25,17,31,26],
[27,0,21,26,25,27,26,22,29,24],
[35,30,0,29,25,31,26,32,35,28],
[29,25,22,0,32,21,24,23,35,25],
[24,26,26,19,0,24,24,24,31,28],
[28,24,20,30,27,0,24,26,30,28],
[26,25,25,27,27,27,0,23,29,26],
[34,29,19,28,27,25,28,0,31,31],
[20,22,16,16,20,21,22,20,0,25],
[25,27,23,26,23,23,25,20,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,25,28,22,24,29,22,21,21],
[32,0,25,33,30,27,30,29,33,31],
[26,26,0,31,26,25,30,26,26,25],
[23,18,20,0,16,22,24,21,20,19],
[29,21,25,35,0,33,28,25,24,26],
[27,24,26,29,18,0,27,22,23,24],
[22,21,21,27,23,24,0,19,23,16],
[29,22,25,30,26,29,32,0,24,24],
[30,18,25,31,27,28,28,27,0,24],
[30,20,26,32,25,27,35,27,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,26,30,23,15,23,23,18],
[25,0,27,36,29,20,27,26,29,26],
[25,24,0,35,26,23,15,30,23,27],
[25,15,16,0,15,12,12,19,17,21],
[21,22,25,36,0,18,13,23,28,20],
[28,31,28,39,33,0,18,28,32,30],
[36,24,36,39,38,33,0,33,33,29],
[28,25,21,32,28,23,18,0,26,34],
[28,22,28,34,23,19,18,25,0,26],
[33,25,24,30,31,21,22,17,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,29,30,33,28,29,18,24,16],
[21,0,32,29,29,28,31,31,20,28],
[22,19,0,25,26,25,31,23,11,14],
[21,22,26,0,18,28,28,24,17,12],
[18,22,25,33,0,29,30,20,17,15],
[23,23,26,23,22,0,29,29,14,19],
[22,20,20,23,21,22,0,23,20,17],
[33,20,28,27,31,22,28,0,21,18],
[27,31,40,34,34,37,31,30,0,21],
[35,23,37,39,36,32,34,33,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,28,23,27,22,25,26,24,26],
[30,0,29,22,29,22,25,26,28,32],
[23,22,0,23,29,30,26,28,26,28],
[28,29,28,0,36,24,20,33,25,31],
[24,22,22,15,0,19,20,25,23,25],
[29,29,21,27,32,0,26,33,27,30],
[26,26,25,31,31,25,0,28,27,33],
[25,25,23,18,26,18,23,0,19,21],
[27,23,25,26,28,24,24,32,0,31],
[25,19,23,20,26,21,18,30,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,29,24,32,38,30,27,35,28],
[24,0,21,32,25,26,24,14,25,24],
[22,30,0,24,26,27,29,22,26,23],
[27,19,27,0,30,30,31,22,33,24],
[19,26,25,21,0,24,35,27,26,28],
[13,25,24,21,27,0,29,16,25,17],
[21,27,22,20,16,22,0,22,24,17],
[24,37,29,29,24,35,29,0,34,27],
[16,26,25,18,25,26,27,17,0,24],
[23,27,28,27,23,34,34,24,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,26,22,23,18,25,24,26,29],
[24,0,24,19,18,21,23,27,26,29],
[25,27,0,19,21,21,22,26,30,28],
[29,32,32,0,25,26,23,28,31,32],
[28,33,30,26,0,21,27,30,30,32],
[33,30,30,25,30,0,31,30,31,27],
[26,28,29,28,24,20,0,27,28,27],
[27,24,25,23,21,21,24,0,27,29],
[25,25,21,20,21,20,23,24,0,22],
[22,22,23,19,19,24,24,22,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,0,18,34,18,35,18,18,18],
[33,0,17,17,16,0,17,17,0,0],
[51,34,0,18,34,18,35,51,18,34],
[33,34,33,0,16,16,33,51,0,34],
[17,35,17,35,0,18,35,35,35,18],
[33,51,33,35,33,0,51,51,17,34],
[16,34,16,18,16,0,0,34,0,34],
[33,34,0,0,16,0,17,0,0,34],
[33,51,33,51,16,34,51,51,0,34],
[33,51,17,17,33,17,17,17,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,22,22,22,29,32,26,22],
[27,0,28,26,22,23,23,30,27,27],
[27,23,0,25,23,21,22,30,23,27],
[29,25,26,0,26,26,21,32,27,29],
[29,29,28,25,0,25,27,30,29,30],
[29,28,30,25,26,0,31,26,26,27],
[22,28,29,30,24,20,0,32,30,29],
[19,21,21,19,21,25,19,0,23,25],
[25,24,28,24,22,25,21,28,0,27],
[29,24,24,22,21,24,22,26,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,29,27,31,32,28,26,24,19],
[25,0,32,22,27,28,30,34,23,22],
[22,19,0,23,23,22,22,21,26,19],
[24,29,28,0,23,26,26,26,17,21],
[20,24,28,28,0,24,28,22,21,22],
[19,23,29,25,27,0,32,21,20,21],
[23,21,29,25,23,19,0,19,15,14],
[25,17,30,25,29,30,32,0,24,14],
[27,28,25,34,30,31,36,27,0,34],
[32,29,32,30,29,30,37,37,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,29,30,23,33,30,28,36,23],
[29,0,27,34,21,36,29,25,37,29],
[22,24,0,26,29,21,22,27,29,22],
[21,17,25,0,16,22,25,25,28,15],
[28,30,22,35,0,32,22,30,36,27],
[18,15,30,29,19,0,32,22,31,19],
[21,22,29,26,29,19,0,19,36,17],
[23,26,24,26,21,29,32,0,26,24],
[15,14,22,23,15,20,15,25,0,15],
[28,22,29,36,24,32,34,27,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,28,27,30,23,32,36,28,31],
[23,0,21,27,28,21,28,28,22,23],
[23,30,0,29,28,26,31,37,25,27],
[24,24,22,0,27,24,28,29,25,23],
[21,23,23,24,0,16,26,26,26,22],
[28,30,25,27,35,0,35,34,26,27],
[19,23,20,23,25,16,0,27,24,24],
[15,23,14,22,25,17,24,0,20,19],
[23,29,26,26,25,25,27,31,0,26],
[20,28,24,28,29,24,27,32,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,23,25,31,25,31,28,28,29],
[22,0,14,27,26,14,24,19,21,25],
[28,37,0,34,31,34,32,15,23,19],
[26,24,17,0,31,12,32,13,19,24],
[20,25,20,20,0,14,24,20,14,22],
[26,37,17,39,37,0,35,16,23,30],
[20,27,19,19,27,16,0,13,15,21],
[23,32,36,38,31,35,38,0,31,33],
[23,30,28,32,37,28,36,20,0,27],
[22,26,32,27,29,21,30,18,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,27,33,23,23,35,34,34,30],
[19,0,24,19,19,23,16,17,24,18],
[24,27,0,29,19,25,18,27,23,22],
[18,32,22,0,23,30,29,25,33,21],
[28,32,32,28,0,30,28,26,24,22],
[28,28,26,21,21,0,23,32,31,23],
[16,35,33,22,23,28,0,31,35,18],
[17,34,24,26,25,19,20,0,19,15],
[17,27,28,18,27,20,16,32,0,16],
[21,33,29,30,29,28,33,36,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,29,26,29,27,23,26,27],
[27,0,26,33,27,25,31,27,27,31],
[27,25,0,31,23,26,24,26,25,25],
[22,18,20,0,26,23,21,25,28,23],
[25,24,28,25,0,27,28,22,26,24],
[22,26,25,28,24,0,23,24,25,22],
[24,20,27,30,23,28,0,22,27,30],
[28,24,25,26,29,27,29,0,31,31],
[25,24,26,23,25,26,24,20,0,24],
[24,20,26,28,27,29,21,20,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,22,27,23,27,20,30,23,28],
[19,0,21,26,22,23,20,26,22,21],
[29,30,0,26,26,25,26,30,26,29],
[24,25,25,0,28,26,21,25,23,23],
[28,29,25,23,0,26,30,27,28,28],
[24,28,26,25,25,0,22,27,25,26],
[31,31,25,30,21,29,0,33,25,27],
[21,25,21,26,24,24,18,0,22,26],
[28,29,25,28,23,26,26,29,0,26],
[23,30,22,28,23,25,24,25,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,19,22,31,31,15,31,33,23],
[20,0,18,31,16,25,27,24,31,23],
[32,33,0,28,23,27,27,33,24,27],
[29,20,23,0,18,28,26,29,35,26],
[20,35,28,33,0,30,32,45,33,26],
[20,26,24,23,21,0,20,30,39,22],
[36,24,24,25,19,31,0,32,35,21],
[20,27,18,22,6,21,19,0,23,12],
[18,20,27,16,18,12,16,28,0,25],
[28,28,24,25,25,29,30,39,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,30,31,27,29,31,28,25,33],
[23,0,32,34,31,27,32,28,28,27],
[21,19,0,26,23,26,29,25,24,27],
[20,17,25,0,24,25,26,26,22,25],
[24,20,28,27,0,26,26,23,24,21],
[22,24,25,26,25,0,26,21,21,28],
[20,19,22,25,25,25,0,24,20,22],
[23,23,26,25,28,30,27,0,26,26],
[26,23,27,29,27,30,31,25,0,28],
[18,24,24,26,30,23,29,25,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,33,30,23,26,29,23,25,21],
[23,0,25,33,21,29,35,23,22,24],
[18,26,0,24,22,19,22,20,22,16],
[21,18,27,0,21,21,28,18,15,13],
[28,30,29,30,0,29,28,20,25,24],
[25,22,32,30,22,0,32,28,28,14],
[22,16,29,23,23,19,0,17,21,14],
[28,28,31,33,31,23,34,0,26,27],
[26,29,29,36,26,23,30,25,0,21],
[30,27,35,38,27,37,37,24,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,26,29,33,25,27,28,27,35],
[21,0,17,24,26,29,25,22,23,25],
[25,34,0,27,24,28,30,29,27,32],
[22,27,24,0,22,30,23,22,26,28],
[18,25,27,29,0,19,23,27,26,24],
[26,22,23,21,32,0,26,26,26,24],
[24,26,21,28,28,25,0,23,24,26],
[23,29,22,29,24,25,28,0,22,30],
[24,28,24,25,25,25,27,29,0,27],
[16,26,19,23,27,27,25,21,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,28,23,19,16,14,24,22,18],
[31,0,26,21,19,20,19,26,21,18],
[23,25,0,18,24,21,24,22,12,19],
[28,30,33,0,25,17,25,25,24,25],
[32,32,27,26,0,27,31,22,24,24],
[35,31,30,34,24,0,27,36,25,34],
[37,32,27,26,20,24,0,30,25,29],
[27,25,29,26,29,15,21,0,25,25],
[29,30,39,27,27,26,26,26,0,25],
[33,33,32,26,27,17,22,26,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,29,25,26,24,24,24,22,26],
[25,0,31,23,24,25,31,29,25,30],
[22,20,0,20,23,16,21,29,18,26],
[26,28,31,0,24,23,26,26,26,24],
[25,27,28,27,0,28,24,29,29,28],
[27,26,35,28,23,0,23,30,23,29],
[27,20,30,25,27,28,0,31,22,27],
[27,22,22,25,22,21,20,0,23,20],
[29,26,33,25,22,28,29,28,0,26],
[25,21,25,27,23,22,24,31,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,21,23,15,13,8,19,15,19],
[43,0,42,30,31,31,30,23,31,34],
[30,9,0,25,14,17,15,14,15,22],
[28,21,26,0,24,21,21,21,17,14],
[36,20,37,27,0,26,29,19,24,30],
[38,20,34,30,25,0,28,21,25,30],
[43,21,36,30,22,23,0,24,17,31],
[32,28,37,30,32,30,27,0,24,35],
[36,20,36,34,27,26,34,27,0,34],
[32,17,29,37,21,21,20,16,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,28,29,26,25,21,26,27,24],
[23,0,28,28,32,34,25,27,30,23],
[23,23,0,24,21,23,18,26,26,23],
[22,23,27,0,25,23,26,23,19,18],
[25,19,30,26,0,25,27,32,29,23],
[26,17,28,28,26,0,21,29,25,25],
[30,26,33,25,24,30,0,31,33,28],
[25,24,25,28,19,22,20,0,23,21],
[24,21,25,32,22,26,18,28,0,23],
[27,28,28,33,28,26,23,30,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,29,29,26,35,30,35,24,31],
[31,0,26,36,31,30,26,34,24,29],
[22,25,0,26,26,28,24,30,24,25],
[22,15,25,0,22,28,25,32,22,23],
[25,20,25,29,0,35,24,35,26,22],
[16,21,23,23,16,0,19,28,24,21],
[21,25,27,26,27,32,0,36,25,28],
[16,17,21,19,16,23,15,0,19,21],
[27,27,27,29,25,27,26,32,0,27],
[20,22,26,28,29,30,23,30,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,24,26,28,26,27,30,30,29],
[28,0,28,30,20,30,27,28,35,26],
[27,23,0,29,21,22,26,28,27,24],
[25,21,22,0,25,23,26,25,29,24],
[23,31,30,26,0,25,34,32,33,27],
[25,21,29,28,26,0,29,32,31,30],
[24,24,25,25,17,22,0,27,31,25],
[21,23,23,26,19,19,24,0,24,23],
[21,16,24,22,18,20,20,27,0,20],
[22,25,27,27,24,21,26,28,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,19,22,22,20,21,23,27,22],
[33,0,24,29,27,23,25,26,29,24],
[32,27,0,27,25,23,29,25,33,25],
[29,22,24,0,25,19,27,27,30,25],
[29,24,26,26,0,26,28,27,26,24],
[31,28,28,32,25,0,28,26,33,27],
[30,26,22,24,23,23,0,21,30,22],
[28,25,26,24,24,25,30,0,25,24],
[24,22,18,21,25,18,21,26,0,20],
[29,27,26,26,27,24,29,27,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,5,18,23,33,28,24,23,22],
[23,0,28,23,23,30,28,29,23,32],
[46,23,0,35,29,36,38,36,38,41],
[33,28,16,0,29,33,33,21,25,23],
[28,28,22,22,0,31,41,28,27,25],
[18,21,15,18,20,0,15,19,28,19],
[23,23,13,18,10,36,0,19,22,25],
[27,22,15,30,23,32,32,0,24,22],
[28,28,13,26,24,23,29,27,0,23],
[29,19,10,28,26,32,26,29,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,25,28,28,21,32,23,27,26],
[16,0,25,30,19,28,27,35,31,18],
[26,26,0,24,26,25,32,30,20,28],
[23,21,27,0,25,12,33,30,13,19],
[23,32,25,26,0,23,37,33,32,18],
[30,23,26,39,28,0,32,43,42,29],
[19,24,19,18,14,19,0,30,21,25],
[28,16,21,21,18,8,21,0,22,19],
[24,20,31,38,19,9,30,29,0,23],
[25,33,23,32,33,22,26,32,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,30,41,40,30,29,30,9,40],
[21,0,41,51,41,41,40,21,30,40],
[21,10,0,51,41,42,40,21,30,31],
[10,0,0,0,30,0,29,0,9,20],
[11,10,10,21,0,10,29,10,9,20],
[21,10,9,51,41,0,29,0,19,20],
[22,11,11,22,22,22,0,11,11,21],
[21,30,30,51,41,51,40,0,30,40],
[42,21,21,42,42,32,40,21,0,31],
[11,11,20,31,31,31,30,11,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,33,33,20,27,22,22,29,31],
[27,0,37,35,25,33,35,32,32,32],
[18,14,0,27,21,26,21,23,18,18],
[18,16,24,0,24,31,23,27,17,19],
[31,26,30,27,0,29,32,27,22,26],
[24,18,25,20,22,0,25,21,19,29],
[29,16,30,28,19,26,0,23,21,30],
[29,19,28,24,24,30,28,0,17,23],
[22,19,33,34,29,32,30,34,0,22],
[20,19,33,32,25,22,21,28,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,30,32,33,31,34,28,22,28],
[24,0,25,34,17,37,27,30,24,27],
[21,26,0,29,28,24,38,25,20,18],
[19,17,22,0,21,23,24,19,14,15],
[18,34,23,30,0,31,27,28,26,21],
[20,14,27,28,20,0,25,24,22,16],
[17,24,13,27,24,26,0,29,15,14],
[23,21,26,32,23,27,22,0,19,23],
[29,27,31,37,25,29,36,32,0,25],
[23,24,33,36,30,35,37,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,32,28,29,25,29,35,34],
[25,0,23,27,27,27,22,26,32,23],
[25,28,0,34,27,33,31,29,33,32],
[19,24,17,0,24,19,19,27,32,27],
[23,24,24,27,0,22,17,28,32,31],
[22,24,18,32,29,0,16,28,34,26],
[26,29,20,32,34,35,0,27,31,28],
[22,25,22,24,23,23,24,0,31,32],
[16,19,18,19,19,17,20,20,0,25],
[17,28,19,24,20,25,23,19,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,20,28,32,14,26,21,20,20],
[26,0,23,29,26,22,26,30,28,21],
[31,28,0,27,29,30,29,28,23,23],
[23,22,24,0,34,11,28,22,14,15],
[19,25,22,17,0,14,21,21,17,19],
[37,29,21,40,37,0,35,33,28,25],
[25,25,22,23,30,16,0,26,21,23],
[30,21,23,29,30,18,25,0,24,27],
[31,23,28,37,34,23,30,27,0,27],
[31,30,28,36,32,26,28,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,33,31,28,23,31,26,21,27],
[26,0,28,23,26,25,31,22,28,24],
[18,23,0,22,21,21,31,20,21,19],
[20,28,29,0,24,24,28,21,23,25],
[23,25,30,27,0,21,30,21,21,27],
[28,26,30,27,30,0,33,24,23,28],
[20,20,20,23,21,18,0,20,22,21],
[25,29,31,30,30,27,31,0,24,30],
[30,23,30,28,30,28,29,27,0,30],
[24,27,32,26,24,23,30,21,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,38,13,13,13,25,26,38,26],
[39,0,38,26,39,13,51,39,38,26],
[13,13,0,13,26,26,13,13,13,26],
[38,25,38,0,38,38,38,38,51,51],
[38,12,25,13,0,13,25,26,25,25],
[38,38,25,13,38,0,38,38,38,51],
[26,0,38,13,26,13,0,13,13,26],
[25,12,38,13,25,13,38,0,25,38],
[13,13,38,0,26,13,38,26,0,26],
[25,25,25,0,26,0,25,13,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,23,20,18,19,19,16,23,26],
[32,0,21,16,17,21,25,24,13,35],
[28,30,0,25,22,18,31,29,22,37],
[31,35,26,0,30,26,25,30,22,37],
[33,34,29,21,0,23,31,30,33,44],
[32,30,33,25,28,0,27,25,21,36],
[32,26,20,26,20,24,0,29,17,30],
[35,27,22,21,21,26,22,0,21,39],
[28,38,29,29,18,30,34,30,0,45],
[25,16,14,14,7,15,21,12,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,17,13,24,24,24,24,32,19],
[22,0,9,17,19,18,9,13,24,5],
[34,42,0,28,29,34,20,28,29,19],
[38,34,23,0,28,29,24,20,29,19],
[27,32,22,23,0,23,13,23,24,28],
[27,33,17,22,28,0,17,23,24,18],
[27,42,31,27,38,34,0,33,37,24],
[27,38,23,31,28,28,18,0,33,24],
[19,27,22,22,27,27,14,18,0,19],
[32,46,32,32,23,33,27,27,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,30,19,22,20,23,15,16,23],
[31,0,33,24,22,22,22,14,27,28],
[21,18,0,18,22,23,17,18,20,18],
[32,27,33,0,27,32,35,22,24,23],
[29,29,29,24,0,26,23,20,18,22],
[31,29,28,19,25,0,23,22,27,27],
[28,29,34,16,28,28,0,20,19,24],
[36,37,33,29,31,29,31,0,23,35],
[35,24,31,27,33,24,32,28,0,26],
[28,23,33,28,29,24,27,16,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,22,19,23,19,29,20,30,21],
[27,0,23,23,16,26,20,23,20,24],
[29,28,0,26,19,22,31,26,25,25],
[32,28,25,0,25,26,29,23,31,25],
[28,35,32,26,0,26,28,33,24,31],
[32,25,29,25,25,0,27,27,30,27],
[22,31,20,22,23,24,0,20,24,24],
[31,28,25,28,18,24,31,0,27,30],
[21,31,26,20,27,21,27,24,0,26],
[30,27,26,26,20,24,27,21,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,21,30,29,28,29,27,31,33],
[28,0,28,25,27,30,29,27,29,29],
[30,23,0,29,31,29,28,30,30,32],
[21,26,22,0,25,25,26,27,26,32],
[22,24,20,26,0,25,29,28,27,27],
[23,21,22,26,26,0,25,23,26,29],
[22,22,23,25,22,26,0,26,27,29],
[24,24,21,24,23,28,25,0,28,31],
[20,22,21,25,24,25,24,23,0,24],
[18,22,19,19,24,22,22,20,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,24,20,24,23,23,20,12,24],
[32,0,29,28,28,26,26,24,22,35],
[27,22,0,22,20,23,24,19,19,28],
[31,23,29,0,22,28,28,22,24,22],
[27,23,31,29,0,22,24,22,17,32],
[28,25,28,23,29,0,26,23,17,28],
[28,25,27,23,27,25,0,23,26,31],
[31,27,32,29,29,28,28,0,22,32],
[39,29,32,27,34,34,25,29,0,34],
[27,16,23,29,19,23,20,19,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,13,28,14,25,13,20,20,20],
[26,0,27,14,13,19,21,21,34,7],
[38,24,0,38,31,24,30,45,37,31],
[23,37,13,0,24,11,18,18,25,26],
[37,38,20,27,0,19,20,19,39,27],
[26,32,27,40,32,0,19,46,34,26],
[38,30,21,33,31,32,0,39,39,25],
[31,30,6,33,32,5,12,0,25,19],
[31,17,14,26,12,17,12,26,0,12],
[31,44,20,25,24,25,26,32,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,31,26,28,35,20,28,25,32],
[27,0,27,34,22,26,23,30,29,34],
[20,24,0,30,26,31,19,21,27,26],
[25,17,21,0,21,26,17,19,21,24],
[23,29,25,30,0,25,23,29,25,31],
[16,25,20,25,26,0,19,22,19,31],
[31,28,32,34,28,32,0,24,28,34],
[23,21,30,32,22,29,27,0,27,25],
[26,22,24,30,26,32,23,24,0,30],
[19,17,25,27,20,20,17,26,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,23,26,34,28,27,28,26,28],
[31,0,32,30,31,29,30,24,26,29],
[28,19,0,27,28,30,27,26,25,31],
[25,21,24,0,26,26,25,24,27,22],
[17,20,23,25,0,28,26,19,22,16],
[23,22,21,25,23,0,26,17,25,19],
[24,21,24,26,25,25,0,22,22,23],
[23,27,25,27,32,34,29,0,24,26],
[25,25,26,24,29,26,29,27,0,29],
[23,22,20,29,35,32,28,25,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,30,30,31,29,31,26,27,26],
[30,0,33,26,25,23,26,34,31,22],
[21,18,0,20,26,20,21,28,20,19],
[21,25,31,0,24,33,28,33,24,21],
[20,26,25,27,0,23,28,28,30,17],
[22,28,31,18,28,0,25,30,30,21],
[20,25,30,23,23,26,0,24,29,22],
[25,17,23,18,23,21,27,0,22,19],
[24,20,31,27,21,21,22,29,0,28],
[25,29,32,30,34,30,29,32,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,22,23,23,22,31,24,24,25],
[18,0,14,16,20,19,23,21,21,20],
[29,37,0,24,25,26,31,29,25,30],
[28,35,27,0,28,32,34,30,24,31],
[28,31,26,23,0,35,33,30,19,25],
[29,32,25,19,16,0,32,32,24,28],
[20,28,20,17,18,19,0,28,25,30],
[27,30,22,21,21,19,23,0,27,25],
[27,30,26,27,32,27,26,24,0,28],
[26,31,21,20,26,23,21,26,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,28,13,25,33,29,37,8,33],
[17,0,19,18,29,24,25,25,17,29],
[23,32,0,18,23,30,29,37,18,33],
[38,33,33,0,24,43,38,36,36,33],
[26,22,28,27,0,27,33,34,22,32],
[18,27,21,8,24,0,22,32,18,26],
[22,26,22,13,18,29,0,32,22,29],
[14,26,14,15,17,19,19,0,12,19],
[43,34,33,15,29,33,29,39,0,38],
[18,22,18,18,19,25,22,32,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,12,18,7,14,17,17,14,17],
[44,0,30,30,26,12,17,31,33,40],
[39,21,0,31,21,16,21,23,26,40],
[33,21,20,0,24,12,20,24,24,30],
[44,25,30,27,0,14,17,35,23,40],
[37,39,35,39,37,0,25,34,28,38],
[34,34,30,31,34,26,0,32,25,30],
[34,20,28,27,16,17,19,0,30,25],
[37,18,25,27,28,23,26,21,0,32],
[34,11,11,21,11,13,21,26,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,19,19,17,29,14,20,17,19],
[27,0,19,22,18,27,12,18,18,21],
[32,32,0,28,25,29,26,24,22,23],
[32,29,23,0,18,27,18,26,24,21],
[34,33,26,33,0,34,26,30,21,24],
[22,24,22,24,17,0,18,21,25,15],
[37,39,25,33,25,33,0,37,31,26],
[31,33,27,25,21,30,14,0,23,21],
[34,33,29,27,30,26,20,28,0,24],
[32,30,28,30,27,36,25,30,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,39,29,33,35,20,23,23,19],
[22,0,29,29,33,31,28,33,23,35],
[12,22,0,23,16,29,26,16,17,12],
[22,22,28,0,32,34,26,16,28,24],
[18,18,35,19,0,31,16,12,29,19],
[16,20,22,17,20,0,16,8,16,16],
[31,23,25,25,35,35,0,29,29,31],
[28,18,35,35,39,43,22,0,41,31],
[28,28,34,23,22,35,22,10,0,18],
[32,16,39,27,32,35,20,20,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,19,12,30,28,25,31,17],
[24,0,26,29,25,21,27,17,23,14],
[24,25,0,21,17,26,28,15,27,18],
[32,22,30,0,28,25,19,22,23,26],
[39,26,34,23,0,30,28,31,31,19],
[21,30,25,26,21,0,35,20,32,19],
[23,24,23,32,23,16,0,24,24,28],
[26,34,36,29,20,31,27,0,27,17],
[20,28,24,28,20,19,27,24,0,21],
[34,37,33,25,32,32,23,34,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,22,27,28,28,27,25,30,27],
[28,0,28,24,26,24,25,23,29,26],
[29,23,0,29,27,28,34,30,34,26],
[24,27,22,0,27,28,29,24,32,29],
[23,25,24,24,0,28,24,21,28,24],
[23,27,23,23,23,0,28,20,26,27],
[24,26,17,22,27,23,0,20,25,25],
[26,28,21,27,30,31,31,0,29,25],
[21,22,17,19,23,25,26,22,0,24],
[24,25,25,22,27,24,26,26,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,25,33,23,25,29,37,26,27],
[21,0,20,32,18,32,27,27,17,28],
[26,31,0,29,25,25,27,32,22,28],
[18,19,22,0,22,28,29,30,18,31],
[28,33,26,29,0,27,29,36,21,28],
[26,19,26,23,24,0,25,30,18,26],
[22,24,24,22,22,26,0,21,16,21],
[14,24,19,21,15,21,30,0,17,19],
[25,34,29,33,30,33,35,34,0,29],
[24,23,23,20,23,25,30,32,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,27,26,31,30,28,27,28,26],
[28,0,28,27,24,29,28,30,26,29],
[24,23,0,24,26,28,23,24,26,21],
[25,24,27,0,27,30,29,23,30,22],
[20,27,25,24,0,23,26,22,29,24],
[21,22,23,21,28,0,30,21,28,22],
[23,23,28,22,25,21,0,22,33,24],
[24,21,27,28,29,30,29,0,23,21],
[23,25,25,21,22,23,18,28,0,19],
[25,22,30,29,27,29,27,30,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,22,26,21,35,29,19,27,28],
[31,0,24,24,15,30,25,27,27,31],
[29,27,0,24,23,39,29,23,29,31],
[25,27,27,0,21,39,31,25,30,32],
[30,36,28,30,0,37,34,25,40,27],
[16,21,12,12,14,0,22,21,26,14],
[22,26,22,20,17,29,0,18,20,30],
[32,24,28,26,26,30,33,0,28,26],
[24,24,22,21,11,25,31,23,0,25],
[23,20,20,19,24,37,21,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,30,27,17,15,15,26,16,22],
[31,0,30,25,13,19,20,18,22,18],
[21,21,0,24,18,23,26,30,19,22],
[24,26,27,0,28,18,28,34,22,30],
[34,38,33,23,0,37,27,33,31,28],
[36,32,28,33,14,0,29,41,29,23],
[36,31,25,23,24,22,0,32,27,32],
[25,33,21,17,18,10,19,0,14,23],
[35,29,32,29,20,22,24,37,0,28],
[29,33,29,21,23,28,19,28,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,39,14,26,28,28,28,26,28],
[23,0,25,25,37,12,28,26,12,14],
[12,26,0,14,12,26,28,40,12,14],
[37,26,37,0,12,26,26,26,12,26],
[25,14,39,39,0,14,28,28,14,28],
[23,39,25,25,37,0,39,40,23,39],
[23,23,23,25,23,12,0,12,23,12],
[23,25,11,25,23,11,39,0,23,11],
[25,39,39,39,37,28,28,28,0,28],
[23,37,37,25,23,12,39,40,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,24,24,23,27,27,27,32,31],
[23,0,33,30,26,31,34,22,31,24],
[27,18,0,22,17,27,26,24,30,29],
[27,21,29,0,25,24,28,18,29,28],
[28,25,34,26,0,36,35,25,36,32],
[24,20,24,27,15,0,38,27,27,24],
[24,17,25,23,16,13,0,14,25,22],
[24,29,27,33,26,24,37,0,34,29],
[19,20,21,22,15,24,26,17,0,23],
[20,27,22,23,19,27,29,22,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,17,20,31,22,20,14,21,22],
[34,0,31,28,38,29,19,26,18,24],
[34,20,0,17,24,24,13,22,24,29],
[31,23,34,0,35,33,26,28,32,33],
[20,13,27,16,0,23,17,19,17,26],
[29,22,27,18,28,0,20,23,21,22],
[31,32,38,25,34,31,0,27,27,27],
[37,25,29,23,32,28,24,0,15,25],
[30,33,27,19,34,30,24,36,0,30],
[29,27,22,18,25,29,24,26,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,30,26,26,30,24,28,22,27],
[21,0,21,21,25,25,20,26,25,21],
[21,30,0,18,26,23,21,31,27,24],
[25,30,33,0,33,29,25,33,29,28],
[25,26,25,18,0,20,22,29,23,20],
[21,26,28,22,31,0,19,29,23,19],
[27,31,30,26,29,32,0,29,25,26],
[23,25,20,18,22,22,22,0,19,15],
[29,26,24,22,28,28,26,32,0,24],
[24,30,27,23,31,32,25,36,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,20,19,11,19,11,40,29,51],
[21,0,32,20,22,21,11,30,30,41],
[31,19,0,19,32,29,21,40,29,40],
[32,31,32,0,22,32,22,42,51,41],
[40,29,19,29,0,29,30,29,29,40],
[32,30,22,19,22,0,11,41,30,41],
[40,40,30,29,21,40,0,40,29,40],
[11,21,11,9,22,10,11,0,19,31],
[22,21,22,0,22,21,22,32,0,22],
[0,10,11,10,11,10,11,20,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,17,19,17,23,25,18,14,26],
[32,0,20,27,32,29,34,21,24,32],
[34,31,0,21,31,34,37,31,32,37],
[32,24,30,0,26,27,36,28,29,34],
[34,19,20,25,0,27,29,20,22,35],
[28,22,17,24,24,0,24,23,19,25],
[26,17,14,15,22,27,0,23,16,21],
[33,30,20,23,31,28,28,0,30,36],
[37,27,19,22,29,32,35,21,0,26],
[25,19,14,17,16,26,30,15,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,25,30,29,30,31,24,30,25],
[23,0,23,27,23,23,29,25,26,25],
[26,28,0,32,27,22,27,21,31,26],
[21,24,19,0,25,25,27,26,23,24],
[22,28,24,26,0,26,30,21,28,24],
[21,28,29,26,25,0,30,26,28,26],
[20,22,24,24,21,21,0,22,25,27],
[27,26,30,25,30,25,29,0,32,31],
[21,25,20,28,23,23,26,19,0,30],
[26,26,25,27,27,25,24,20,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,28,33,26,31,25,24,27,32],
[22,0,25,20,22,29,26,19,22,21],
[23,26,0,24,22,28,24,25,25,23],
[18,31,27,0,30,29,26,21,25,21],
[25,29,29,21,0,26,24,23,25,24],
[20,22,23,22,25,0,19,20,23,17],
[26,25,27,25,27,32,0,24,23,21],
[27,32,26,30,28,31,27,0,26,24],
[24,29,26,26,26,28,28,25,0,23],
[19,30,28,30,27,34,30,27,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,24,24,30,29,28,25,22,25],
[25,0,25,20,37,29,29,26,20,26],
[27,26,0,23,33,25,23,24,25,24],
[27,31,28,0,40,33,35,32,25,34],
[21,14,18,11,0,22,16,17,19,18],
[22,22,26,18,29,0,24,21,23,27],
[23,22,28,16,35,27,0,30,25,28],
[26,25,27,19,34,30,21,0,26,24],
[29,31,26,26,32,28,26,25,0,24],
[26,25,27,17,33,24,23,27,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,27,28,30,20,28,18,19,31],
[11,0,14,14,16,15,18,10,14,13],
[24,37,0,21,25,21,27,23,23,21],
[23,37,30,0,11,19,26,15,19,21],
[21,35,26,40,0,22,28,22,26,24],
[31,36,30,32,29,0,31,23,32,38],
[23,33,24,25,23,20,0,17,23,26],
[33,41,28,36,29,28,34,0,24,28],
[32,37,28,32,25,19,28,27,0,24],
[20,38,30,30,27,13,25,23,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,24,26,24,22,30,29,28],
[24,0,27,23,23,26,30,31,25,28],
[23,24,0,25,24,21,28,28,25,26],
[27,28,26,0,27,27,26,36,25,28],
[25,28,27,24,0,17,23,31,32,28],
[27,25,30,24,34,0,25,29,29,30],
[29,21,23,25,28,26,0,29,26,28],
[21,20,23,15,20,22,22,0,20,19],
[22,26,26,26,19,22,25,31,0,28],
[23,23,25,23,23,21,23,32,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,23,27,28,24,29,27,24,28],
[30,0,21,31,25,27,29,29,28,30],
[28,30,0,34,27,27,31,30,25,31],
[24,20,17,0,22,23,22,18,25,24],
[23,26,24,29,0,22,27,22,24,25],
[27,24,24,28,29,0,29,27,28,28],
[22,22,20,29,24,22,0,24,25,23],
[24,22,21,33,29,24,27,0,27,30],
[27,23,26,26,27,23,26,24,0,28],
[23,21,20,27,26,23,28,21,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,17,17,17,17,23,19,11,7],
[33,0,34,28,28,22,34,23,23,29],
[34,17,0,24,18,16,18,29,19,12],
[34,23,27,0,17,27,29,17,11,17],
[34,23,33,34,0,20,28,29,33,23],
[34,29,35,24,31,0,36,23,19,13],
[28,17,33,22,23,15,0,17,12,12],
[32,28,22,34,22,28,34,0,22,22],
[40,28,32,40,18,32,39,29,0,22],
[44,22,39,34,28,38,39,29,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,27,15,8,17,10,23,22,19],
[23,0,15,12,9,15,12,17,10,21],
[24,36,0,14,20,16,8,29,17,19],
[36,39,37,0,23,36,20,30,25,25],
[43,42,31,28,0,31,17,36,28,34],
[34,36,35,15,20,0,16,34,21,22],
[41,39,43,31,34,35,0,41,24,29],
[28,34,22,21,15,17,10,0,22,22],
[29,41,34,26,23,30,27,29,0,26],
[32,30,32,26,17,29,22,29,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,27,27,34,20,27,25,27,26],
[21,0,23,23,36,21,22,32,24,24],
[24,28,0,24,32,14,21,18,26,18],
[24,28,27,0,31,25,25,27,32,20],
[17,15,19,20,0,19,13,16,19,13],
[31,30,37,26,32,0,28,24,31,32],
[24,29,30,26,38,23,0,17,23,22],
[26,19,33,24,35,27,34,0,29,23],
[24,27,25,19,32,20,28,22,0,23],
[25,27,33,31,38,19,29,28,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,29,29,30,29,26,25,27,32],
[24,0,25,29,25,25,20,24,29,29],
[22,26,0,19,25,29,22,26,28,26],
[22,22,32,0,24,33,25,23,27,27],
[21,26,26,27,0,28,25,27,29,29],
[22,26,22,18,23,0,20,26,28,29],
[25,31,29,26,26,31,0,27,32,33],
[26,27,25,28,24,25,24,0,29,29],
[24,22,23,24,22,23,19,22,0,27],
[19,22,25,24,22,22,18,22,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,21,29,27,24,24,26,26,29],
[24,0,25,27,26,30,29,24,27,31],
[30,26,0,30,31,25,25,31,24,32],
[22,24,21,0,28,25,29,29,27,34],
[24,25,20,23,0,23,21,25,23,30],
[27,21,26,26,28,0,27,28,26,34],
[27,22,26,22,30,24,0,28,23,26],
[25,27,20,22,26,23,23,0,28,27],
[25,24,27,24,28,25,28,23,0,25],
[22,20,19,17,21,17,25,24,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,33,33,41,33,32,41,32,16],
[26,0,33,43,33,33,24,35,24,16],
[18,18,0,34,24,17,8,35,16,8],
[18,8,17,0,33,25,8,25,16,16],
[10,18,27,18,0,27,8,27,8,8],
[18,18,34,26,24,0,8,18,16,16],
[19,27,43,43,43,43,0,43,25,16],
[10,16,16,26,24,33,8,0,8,8],
[19,27,35,35,43,35,26,43,0,26],
[35,35,43,35,43,35,35,43,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,27,29,25,24,19,26,36,28],
[27,0,29,24,27,27,25,30,32,30],
[24,22,0,29,31,27,24,24,30,27],
[22,27,22,0,27,25,23,25,31,27],
[26,24,20,24,0,28,23,26,29,23],
[27,24,24,26,23,0,23,23,31,28],
[32,26,27,28,28,28,0,25,32,26],
[25,21,27,26,25,28,26,0,32,28],
[15,19,21,20,22,20,19,19,0,22],
[23,21,24,24,28,23,25,23,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,19,27,33,30,27,28,24,27],
[23,0,25,23,27,32,24,29,26,26],
[32,26,0,29,35,29,25,34,29,22],
[24,28,22,0,25,31,17,29,19,27],
[18,24,16,26,0,22,20,29,20,20],
[21,19,22,20,29,0,19,28,16,22],
[24,27,26,34,31,32,0,29,30,27],
[23,22,17,22,22,23,22,0,22,18],
[27,25,22,32,31,35,21,29,0,26],
[24,25,29,24,31,29,24,33,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,27,23,23,24,19,17,21,26],
[26,0,24,29,24,28,26,24,19,28],
[24,27,0,17,23,24,29,24,26,26],
[28,22,34,0,29,33,26,29,27,29],
[28,27,28,22,0,22,26,22,24,29],
[27,23,27,18,29,0,22,18,21,34],
[32,25,22,25,25,29,0,27,21,26],
[34,27,27,22,29,33,24,0,25,27],
[30,32,25,24,27,30,30,26,0,30],
[25,23,25,22,22,17,25,24,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 51, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_10_51.csv", index=False, header=False)
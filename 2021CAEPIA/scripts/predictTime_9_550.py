
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,300,269,267,253,269,296,278,284],
[250,0,244,276,252,260,273,283,245],
[281,306,0,316,274,287,301,323,287],
[283,274,234,0,255,284,290,273,265],
[297,298,276,295,0,275,304,298,287],
[281,290,263,266,275,0,291,287,269],
[254,277,249,260,246,259,0,274,254],
[272,267,227,277,252,263,276,0,247],
[266,305,263,285,263,281,296,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,342,253,316,330,285,306,285,266],
[208,0,237,272,287,247,295,272,251],
[297,313,0,319,327,310,269,295,273],
[234,278,231,0,238,249,223,248,272],
[220,263,223,312,0,228,240,248,248],
[265,303,240,301,322,0,261,312,245],
[244,255,281,327,310,289,0,285,309],
[265,278,255,302,302,238,265,0,240],
[284,299,277,278,302,305,241,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,264,304,262,264,311,296,288],
[272,0,244,262,242,221,261,242,245],
[286,306,0,303,265,281,325,311,286],
[246,288,247,0,249,229,319,265,246],
[288,308,285,301,0,253,332,302,289],
[286,329,269,321,297,0,324,308,289],
[239,289,225,231,218,226,0,254,278],
[254,308,239,285,248,242,296,0,257],
[262,305,264,304,261,261,272,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,301,277,269,258,271,287,228],
[270,0,270,256,267,252,258,250,237],
[249,280,0,263,248,254,260,268,247],
[273,294,287,0,281,288,243,272,244],
[281,283,302,269,0,273,274,278,251],
[292,298,296,262,277,0,286,276,276],
[279,292,290,307,276,264,0,300,272],
[263,300,282,278,272,274,250,0,263],
[322,313,303,306,299,274,278,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,255,295,258,284,245,260,289],
[253,0,253,270,265,256,272,273,270],
[295,297,0,291,295,281,275,282,305],
[255,280,259,0,265,274,250,276,283],
[292,285,255,285,0,277,257,262,280],
[266,294,269,276,273,0,264,271,286],
[305,278,275,300,293,286,0,279,266],
[290,277,268,274,288,279,271,0,290],
[261,280,245,267,270,264,284,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,201,294,272,278,301,358,299],
[293,0,254,226,299,287,264,326,253],
[349,296,0,268,368,314,320,394,308],
[256,324,282,0,296,311,234,359,335],
[278,251,182,254,0,230,256,313,267],
[272,263,236,239,320,0,241,325,298],
[249,286,230,316,294,309,0,361,290],
[192,224,156,191,237,225,189,0,208],
[251,297,242,215,283,252,260,342,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,264,307,274,270,298,267,269],
[269,0,259,268,264,256,293,262,259],
[286,291,0,275,295,268,292,277,296],
[243,282,275,0,263,271,298,283,253],
[276,286,255,287,0,254,285,261,261],
[280,294,282,279,296,0,282,267,286],
[252,257,258,252,265,268,0,273,274],
[283,288,273,267,289,283,277,0,257],
[281,291,254,297,289,264,276,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,276,270,286,286,274,279,268],
[270,0,288,277,279,278,276,290,282],
[274,262,0,284,266,278,278,271,256],
[280,273,266,0,278,280,270,282,277],
[264,271,284,272,0,267,288,274,281],
[264,272,272,270,283,0,270,275,261],
[276,274,272,280,262,280,0,288,286],
[271,260,279,268,276,275,262,0,272],
[282,268,294,273,269,289,264,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,142,240,326,251,351,335,317],
[305,0,308,197,309,250,348,408,309],
[408,242,0,321,375,405,236,469,411],
[310,353,229,0,306,219,317,405,224],
[224,241,175,244,0,158,318,265,250],
[299,300,145,331,392,0,356,308,288],
[199,202,314,233,232,194,0,320,239],
[215,142,81,145,285,242,230,0,179],
[233,241,139,326,300,262,311,371,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,293,286,266,279,283,281,269],
[279,0,286,292,277,285,297,292,270],
[257,264,0,258,254,270,280,253,250],
[264,258,292,0,256,262,274,255,264],
[284,273,296,294,0,285,293,271,295],
[271,265,280,288,265,0,282,258,261],
[267,253,270,276,257,268,0,243,258],
[269,258,297,295,279,292,307,0,274],
[281,280,300,286,255,289,292,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,299,294,278,266,294,251,297],
[273,0,277,309,267,279,294,276,282],
[251,273,0,281,245,259,267,255,247],
[256,241,269,0,261,253,264,259,258],
[272,283,305,289,0,293,291,275,304],
[284,271,291,297,257,0,305,277,296],
[256,256,283,286,259,245,0,243,268],
[299,274,295,291,275,273,307,0,298],
[253,268,303,292,246,254,282,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,310,306,299,268,309,305,293],
[262,0,277,274,309,260,303,290,288],
[240,273,0,251,241,255,283,297,263],
[244,276,299,0,290,271,304,304,295],
[251,241,309,260,0,275,289,293,278],
[282,290,295,279,275,0,321,269,327],
[241,247,267,246,261,229,0,290,270],
[245,260,253,246,257,281,260,0,270],
[257,262,287,255,272,223,280,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,281,269,263,283,308,252,293],
[312,0,259,260,277,264,306,268,293],
[269,291,0,284,266,279,286,271,277],
[281,290,266,0,267,276,308,279,267],
[287,273,284,283,0,269,293,279,288],
[267,286,271,274,281,0,334,294,289],
[242,244,264,242,257,216,0,254,252],
[298,282,279,271,271,256,296,0,289],
[257,257,273,283,262,261,298,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,259,282,267,297,280,295,265],
[269,0,256,250,249,282,254,283,252],
[291,294,0,279,270,326,283,284,297],
[268,300,271,0,267,292,252,267,271],
[283,301,280,283,0,278,274,261,278],
[253,268,224,258,272,0,265,276,252],
[270,296,267,298,276,285,0,294,299],
[255,267,266,283,289,274,256,0,273],
[285,298,253,279,272,298,251,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,261,260,274,281,269,261,278],
[288,0,271,283,287,310,287,279,289],
[289,279,0,271,289,311,285,283,291],
[290,267,279,0,283,300,276,267,263],
[276,263,261,267,0,294,277,276,276],
[269,240,239,250,256,0,249,245,261],
[281,263,265,274,273,301,0,268,256],
[289,271,267,283,274,305,282,0,278],
[272,261,259,287,274,289,294,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,285,262,280,281,273,273,286],
[264,0,268,268,278,264,238,247,257],
[265,282,0,252,283,256,266,248,280],
[288,282,298,0,282,293,287,268,314],
[270,272,267,268,0,282,275,263,286],
[269,286,294,257,268,0,265,257,278],
[277,312,284,263,275,285,0,279,284],
[277,303,302,282,287,293,271,0,297],
[264,293,270,236,264,272,266,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,248,265,263,268,267,267,261],
[279,0,257,299,292,280,291,282,274],
[302,293,0,302,274,286,294,288,286],
[285,251,248,0,242,273,279,265,261],
[287,258,276,308,0,272,277,298,279],
[282,270,264,277,278,0,258,275,256],
[283,259,256,271,273,292,0,269,249],
[283,268,262,285,252,275,281,0,264],
[289,276,264,289,271,294,301,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,274,263,278,270,278,269,264],
[289,0,287,279,278,274,288,286,262],
[276,263,0,263,278,271,284,267,278],
[287,271,287,0,274,268,284,284,271],
[272,272,272,276,0,256,262,257,263],
[280,276,279,282,294,0,281,268,276],
[272,262,266,266,288,269,0,263,260],
[281,264,283,266,293,282,287,0,274],
[286,288,272,279,287,274,290,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,253,269,244,269,266,283,270],
[281,0,266,269,272,286,271,284,279],
[297,284,0,274,266,265,286,284,280],
[281,281,276,0,271,269,247,300,288],
[306,278,284,279,0,274,274,311,307],
[281,264,285,281,276,0,270,305,271],
[284,279,264,303,276,280,0,284,291],
[267,266,266,250,239,245,266,0,272],
[280,271,270,262,243,279,259,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,265,306,294,299,293,289,264],
[250,0,255,295,276,276,292,288,260],
[285,295,0,299,266,286,315,294,262],
[244,255,251,0,259,279,286,292,254],
[256,274,284,291,0,289,290,287,293],
[251,274,264,271,261,0,279,282,266],
[257,258,235,264,260,271,0,267,253],
[261,262,256,258,263,268,283,0,269],
[286,290,288,296,257,284,297,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,273,282,268,266,270,275,263],
[301,0,263,286,264,290,278,224,250],
[277,287,0,280,286,271,287,265,257],
[268,264,270,0,285,293,288,280,260],
[282,286,264,265,0,285,280,255,264],
[284,260,279,257,265,0,271,266,281],
[280,272,263,262,270,279,0,251,278],
[275,326,285,270,295,284,299,0,271],
[287,300,293,290,286,269,272,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,222,260,290,250,242,275,275],
[319,0,241,283,305,238,260,316,317],
[328,309,0,306,301,289,268,311,316],
[290,267,244,0,287,260,239,294,295],
[260,245,249,263,0,213,229,239,299],
[300,312,261,290,337,0,310,299,308],
[308,290,282,311,321,240,0,300,271],
[275,234,239,256,311,251,250,0,338],
[275,233,234,255,251,242,279,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,278,275,274,276,269,297,273],
[281,0,278,246,272,268,271,257,279],
[272,272,0,253,279,272,275,260,275],
[275,304,297,0,280,300,268,281,304],
[276,278,271,270,0,275,282,283,289],
[274,282,278,250,275,0,271,279,271],
[281,279,275,282,268,279,0,285,281],
[253,293,290,269,267,271,265,0,285],
[277,271,275,246,261,279,269,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,271,251,278,324,191,232,226],
[241,0,181,212,206,249,177,184,175],
[279,369,0,309,329,405,257,297,292],
[299,338,241,0,265,363,296,270,259],
[272,344,221,285,0,337,215,204,258],
[226,301,145,187,213,0,176,136,211],
[359,373,293,254,335,374,0,292,275],
[318,366,253,280,346,414,258,0,255],
[324,375,258,291,292,339,275,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,291,294,265,283,268,288,288],
[258,0,292,283,245,284,262,270,271],
[259,258,0,266,247,259,247,272,277],
[256,267,284,0,239,258,269,275,278],
[285,305,303,311,0,276,271,301,304],
[267,266,291,292,274,0,275,287,277],
[282,288,303,281,279,275,0,305,297],
[262,280,278,275,249,263,245,0,269],
[262,279,273,272,246,273,253,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,273,231,251,263,253,208,312],
[304,0,287,272,312,320,294,281,344],
[277,263,0,255,234,267,256,270,320],
[319,278,295,0,294,318,260,287,295],
[299,238,316,256,0,265,243,231,289],
[287,230,283,232,285,0,263,224,277],
[297,256,294,290,307,287,0,249,281],
[342,269,280,263,319,326,301,0,333],
[238,206,230,255,261,273,269,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,302,262,295,276,263,281,282],
[278,0,284,245,299,284,265,271,304],
[248,266,0,271,302,263,258,271,289],
[288,305,279,0,302,285,284,270,275],
[255,251,248,248,0,257,231,220,248],
[274,266,287,265,293,0,263,269,304],
[287,285,292,266,319,287,0,289,288],
[269,279,279,280,330,281,261,0,285],
[268,246,261,275,302,246,262,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,278,297,312,293,314,304,248],
[245,0,230,246,270,242,272,244,223],
[272,320,0,312,323,304,313,320,275],
[253,304,238,0,316,300,291,283,269],
[238,280,227,234,0,265,264,269,216],
[257,308,246,250,285,0,285,279,245],
[236,278,237,259,286,265,0,247,217],
[246,306,230,267,281,271,303,0,256],
[302,327,275,281,334,305,333,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,293,287,269,268,277,257,256],
[296,0,265,261,293,275,258,244,254],
[257,285,0,255,287,260,254,264,265],
[263,289,295,0,307,274,287,276,284],
[281,257,263,243,0,256,249,252,256],
[282,275,290,276,294,0,279,288,262],
[273,292,296,263,301,271,0,288,272],
[293,306,286,274,298,262,262,0,268],
[294,296,285,266,294,288,278,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,268,297,262,297,297,264,274],
[300,0,281,273,268,307,293,282,274],
[282,269,0,291,269,292,273,257,258],
[253,277,259,0,244,284,277,249,246],
[288,282,281,306,0,313,275,288,296],
[253,243,258,266,237,0,271,257,256],
[253,257,277,273,275,279,0,278,284],
[286,268,293,301,262,293,272,0,271],
[276,276,292,304,254,294,266,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,336,293,281,319,358,265,332],
[252,0,298,275,263,314,260,222,277],
[214,252,0,213,255,292,256,196,275],
[257,275,337,0,274,329,281,262,289],
[269,287,295,276,0,319,316,280,292],
[231,236,258,221,231,0,285,209,236],
[192,290,294,269,234,265,0,259,268],
[285,328,354,288,270,341,291,0,322],
[218,273,275,261,258,314,282,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,264,254,271,262,239,261,268],
[289,0,271,280,311,292,277,284,279],
[286,279,0,270,273,275,261,262,280],
[296,270,280,0,278,284,255,258,278],
[279,239,277,272,0,269,250,260,276],
[288,258,275,266,281,0,222,242,262],
[311,273,289,295,300,328,0,282,307],
[289,266,288,292,290,308,268,0,296],
[282,271,270,272,274,288,243,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,272,277,228,248,286,237,246],
[282,0,295,303,293,269,277,259,247],
[278,255,0,258,279,278,273,238,241],
[273,247,292,0,240,270,275,259,240],
[322,257,271,310,0,304,306,245,224],
[302,281,272,280,246,0,266,275,231],
[264,273,277,275,244,284,0,229,247],
[313,291,312,291,305,275,321,0,283],
[304,303,309,310,326,319,303,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,273,317,319,314,302,292,332],
[284,0,304,300,273,242,308,256,328],
[277,246,0,209,265,237,295,286,303],
[233,250,341,0,310,231,296,309,282],
[231,277,285,240,0,234,271,280,263],
[236,308,313,319,316,0,310,295,337],
[248,242,255,254,279,240,0,269,264],
[258,294,264,241,270,255,281,0,282],
[218,222,247,268,287,213,286,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,288,280,288,280,262,282,294],
[260,0,277,273,290,267,262,262,279],
[262,273,0,263,260,259,268,253,278],
[270,277,287,0,256,267,258,250,279],
[262,260,290,294,0,268,271,262,297],
[270,283,291,283,282,0,273,272,309],
[288,288,282,292,279,277,0,262,307],
[268,288,297,300,288,278,288,0,307],
[256,271,272,271,253,241,243,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,294,273,283,296,271,282,270],
[278,0,281,284,291,266,265,305,274],
[256,269,0,259,290,240,271,277,249],
[277,266,291,0,297,279,275,276,267],
[267,259,260,253,0,268,259,271,255],
[254,284,310,271,282,0,258,284,284],
[279,285,279,275,291,292,0,305,278],
[268,245,273,274,279,266,245,0,254],
[280,276,301,283,295,266,272,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,308,302,291,282,297,298,259],
[277,0,294,303,304,269,282,338,248],
[242,256,0,269,281,241,281,327,247],
[248,247,281,0,266,234,282,294,248],
[259,246,269,284,0,253,283,296,275],
[268,281,309,316,297,0,268,322,268],
[253,268,269,268,267,282,0,296,258],
[252,212,223,256,254,228,254,0,246],
[291,302,303,302,275,282,292,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,241,276,325,284,224,257,294],
[275,0,275,293,316,263,291,280,308],
[309,275,0,278,320,299,274,352,280],
[274,257,272,0,349,253,274,308,287],
[225,234,230,201,0,183,224,275,238],
[266,287,251,297,367,0,268,317,295],
[326,259,276,276,326,282,0,294,281],
[293,270,198,242,275,233,256,0,238],
[256,242,270,263,312,255,269,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,289,264,283,276,271,287,270],
[278,0,271,258,271,274,264,279,266],
[261,279,0,255,267,263,257,266,257],
[286,292,295,0,289,282,271,299,281],
[267,279,283,261,0,280,256,273,260],
[274,276,287,268,270,0,267,268,253],
[279,286,293,279,294,283,0,299,275],
[263,271,284,251,277,282,251,0,262],
[280,284,293,269,290,297,275,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,273,310,303,298,292,343,287],
[246,0,233,285,192,264,221,255,241],
[277,317,0,299,290,287,229,314,292],
[240,265,251,0,215,289,197,344,311],
[247,358,260,335,0,307,243,320,339],
[252,286,263,261,243,0,187,290,279],
[258,329,321,353,307,363,0,360,312],
[207,295,236,206,230,260,190,0,228],
[263,309,258,239,211,271,238,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,280,279,265,289,280,293,273],
[261,0,278,272,291,267,257,283,275],
[270,272,0,289,243,261,281,252,261],
[271,278,261,0,245,261,275,268,276],
[285,259,307,305,0,277,291,297,304],
[261,283,289,289,273,0,297,281,295],
[270,293,269,275,259,253,0,283,285],
[257,267,298,282,253,269,267,0,260],
[277,275,289,274,246,255,265,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,257,281,265,269,275,247,255],
[261,0,274,274,293,264,276,269,279],
[293,276,0,278,288,255,276,287,262],
[269,276,272,0,282,273,269,263,284],
[285,257,262,268,0,266,280,270,265],
[281,286,295,277,284,0,275,281,276],
[275,274,274,281,270,275,0,263,256],
[303,281,263,287,280,269,287,0,266],
[295,271,288,266,285,274,294,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,276,262,240,269,275,255,248],
[280,0,276,229,287,276,291,270,267],
[274,274,0,269,294,296,275,266,276],
[288,321,281,0,289,281,307,248,270],
[310,263,256,261,0,262,275,254,259],
[281,274,254,269,288,0,310,272,269],
[275,259,275,243,275,240,0,283,260],
[295,280,284,302,296,278,267,0,277],
[302,283,274,280,291,281,290,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,257,279,269,280,271,257,275],
[281,0,283,297,271,285,262,283,270],
[293,267,0,281,256,269,275,260,270],
[271,253,269,0,253,266,272,256,268],
[281,279,294,297,0,283,292,270,276],
[270,265,281,284,267,0,278,271,276],
[279,288,275,278,258,272,0,258,276],
[293,267,290,294,280,279,292,0,286],
[275,280,280,282,274,274,274,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,242,282,290,288,278,259,256],
[276,0,274,254,283,285,272,273,268],
[308,276,0,270,293,302,299,277,291],
[268,296,280,0,301,292,281,291,268],
[260,267,257,249,0,275,261,252,255],
[262,265,248,258,275,0,271,268,267],
[272,278,251,269,289,279,0,266,283],
[291,277,273,259,298,282,284,0,264],
[294,282,259,282,295,283,267,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,283,281,274,279,276,265,276],
[292,0,267,292,286,281,273,269,280],
[267,283,0,288,272,271,254,285,284],
[269,258,262,0,265,259,263,269,280],
[276,264,278,285,0,261,282,270,269],
[271,269,279,291,289,0,282,258,263],
[274,277,296,287,268,268,0,279,278],
[285,281,265,281,280,292,271,0,283],
[274,270,266,270,281,287,272,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,267,285,272,274,270,285,270],
[242,0,237,265,245,257,232,267,262],
[283,313,0,282,273,275,268,300,272],
[265,285,268,0,261,265,254,273,266],
[278,305,277,289,0,277,277,287,264],
[276,293,275,285,273,0,284,287,280],
[280,318,282,296,273,266,0,273,285],
[265,283,250,277,263,263,277,0,263],
[280,288,278,284,286,270,265,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,251,258,270,287,280,276,265],
[282,0,264,281,271,292,268,290,296],
[299,286,0,298,284,299,267,285,299],
[292,269,252,0,280,277,266,284,274],
[280,279,266,270,0,273,254,278,279],
[263,258,251,273,277,0,316,277,280],
[270,282,283,284,296,234,0,272,276],
[274,260,265,266,272,273,278,0,276],
[285,254,251,276,271,270,274,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,269,289,266,272,293,267,299],
[292,0,288,284,278,294,295,254,293],
[281,262,0,283,279,274,281,267,284],
[261,266,267,0,288,275,287,251,278],
[284,272,271,262,0,282,267,281,297],
[278,256,276,275,268,0,267,274,269],
[257,255,269,263,283,283,0,249,278],
[283,296,283,299,269,276,301,0,299],
[251,257,266,272,253,281,272,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,305,294,284,310,275,299,273],
[267,0,284,265,270,295,256,288,266],
[245,266,0,279,282,292,269,270,266],
[256,285,271,0,281,283,250,270,277],
[266,280,268,269,0,286,274,276,264],
[240,255,258,267,264,0,250,280,247],
[275,294,281,300,276,300,0,290,295],
[251,262,280,280,274,270,260,0,265],
[277,284,284,273,286,303,255,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,274,273,282,284,280,284,285],
[262,0,281,269,248,272,277,285,260],
[276,269,0,283,267,288,284,286,278],
[277,281,267,0,263,278,288,262,283],
[268,302,283,287,0,302,302,291,296],
[266,278,262,272,248,0,285,285,271],
[270,273,266,262,248,265,0,269,258],
[266,265,264,288,259,265,281,0,270],
[265,290,272,267,254,279,292,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,271,263,256,256,322,376,282],
[253,0,217,327,228,232,335,380,373],
[279,333,0,286,275,297,396,326,270],
[287,223,264,0,219,256,313,310,260],
[294,322,275,331,0,314,380,402,344],
[294,318,253,294,236,0,327,395,341],
[228,215,154,237,170,223,0,313,265],
[174,170,224,240,148,155,237,0,199],
[268,177,280,290,206,209,285,351,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,239,279,286,281,225,314,252],
[278,0,310,318,314,273,264,299,271],
[311,240,0,260,233,289,255,285,294],
[271,232,290,0,267,294,221,240,256],
[264,236,317,283,0,303,255,311,259],
[269,277,261,256,247,0,288,315,294],
[325,286,295,329,295,262,0,322,297],
[236,251,265,310,239,235,228,0,267],
[298,279,256,294,291,256,253,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,277,275,271,259,256,296,263],
[285,0,266,284,268,276,281,293,277],
[273,284,0,288,264,277,272,277,294],
[275,266,262,0,269,249,263,254,281],
[279,282,286,281,0,258,298,297,282],
[291,274,273,301,292,0,299,289,299],
[294,269,278,287,252,251,0,302,281],
[254,257,273,296,253,261,248,0,274],
[287,273,256,269,268,251,269,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,269,281,286,269,284,305,280],
[269,0,281,281,273,262,284,287,258],
[281,269,0,298,289,279,281,286,253],
[269,269,252,0,258,273,268,292,265],
[264,277,261,292,0,265,291,288,253],
[281,288,271,277,285,0,280,296,257],
[266,266,269,282,259,270,0,291,258],
[245,263,264,258,262,254,259,0,239],
[270,292,297,285,297,293,292,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,341,271,300,309,305,300,291,343],
[209,0,166,332,256,164,268,246,265],
[279,384,0,304,231,364,257,283,292],
[250,218,246,0,270,250,274,219,238],
[241,294,319,280,0,330,342,276,397],
[245,386,186,300,220,0,288,261,286],
[250,282,293,276,208,262,0,223,282],
[259,304,267,331,274,289,327,0,302],
[207,285,258,312,153,264,268,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,271,265,296,277,280,273,258],
[287,0,273,282,308,285,283,280,282],
[279,277,0,271,306,278,282,281,276],
[285,268,279,0,305,272,273,272,274],
[254,242,244,245,0,255,241,263,238],
[273,265,272,278,295,0,284,276,282],
[270,267,268,277,309,266,0,278,261],
[277,270,269,278,287,274,272,0,268],
[292,268,274,276,312,268,289,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,267,250,276,256,264,282,252],
[282,0,285,264,260,262,280,289,266],
[283,265,0,274,282,273,285,291,286],
[300,286,276,0,267,269,277,295,278],
[274,290,268,283,0,273,277,292,268],
[294,288,277,281,277,0,290,299,265],
[286,270,265,273,273,260,0,290,273],
[268,261,259,255,258,251,260,0,251],
[298,284,264,272,282,285,277,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,272,259,281,250,279,257,268],
[284,0,267,259,270,249,285,277,291],
[278,283,0,272,302,266,280,277,274],
[291,291,278,0,279,273,294,279,270],
[269,280,248,271,0,269,271,252,258],
[300,301,284,277,281,0,297,271,284],
[271,265,270,256,279,253,0,255,275],
[293,273,273,271,298,279,295,0,277],
[282,259,276,280,292,266,275,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,307,290,306,286,295,263,320],
[262,0,247,296,292,298,268,275,284],
[243,303,0,292,299,281,297,250,289],
[260,254,258,0,268,269,283,277,292],
[244,258,251,282,0,257,249,270,277],
[264,252,269,281,293,0,244,235,288],
[255,282,253,267,301,306,0,221,286],
[287,275,300,273,280,315,329,0,295],
[230,266,261,258,273,262,264,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,286,263,267,304,282,289,277],
[250,0,276,259,258,281,267,260,261],
[264,274,0,235,261,277,265,274,272],
[287,291,315,0,275,297,281,293,281],
[283,292,289,275,0,295,269,280,275],
[246,269,273,253,255,0,263,261,251],
[268,283,285,269,281,287,0,284,276],
[261,290,276,257,270,289,266,0,266],
[273,289,278,269,275,299,274,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,251,230,252,269,244,288,246],
[298,0,273,282,299,326,253,289,276],
[299,277,0,263,284,267,282,329,276],
[320,268,287,0,250,323,301,320,271],
[298,251,266,300,0,252,275,315,250],
[281,224,283,227,298,0,254,294,208],
[306,297,268,249,275,296,0,276,249],
[262,261,221,230,235,256,274,0,245],
[304,274,274,279,300,342,301,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,259,263,283,301,247,277,265],
[297,0,289,301,282,306,262,277,252],
[291,261,0,290,277,301,292,270,269],
[287,249,260,0,290,286,241,267,264],
[267,268,273,260,0,273,246,269,248],
[249,244,249,264,277,0,269,238,255],
[303,288,258,309,304,281,0,308,290],
[273,273,280,283,281,312,242,0,243],
[285,298,281,286,302,295,260,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,136,307,231,283,478,224,146],
[403,0,221,283,147,343,403,199,137],
[414,329,0,294,158,270,427,210,73],
[243,267,256,0,413,328,255,466,266],
[319,403,392,137,0,441,332,332,319],
[267,207,280,222,109,0,280,162,14],
[72,147,123,295,218,270,0,271,133],
[326,351,340,84,218,388,279,0,144],
[404,413,477,284,231,536,417,406,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,260,269,277,291,270,243,297],
[258,0,301,301,232,261,315,253,277],
[290,249,0,271,255,255,266,287,262],
[281,249,279,0,223,290,246,314,297],
[273,318,295,327,0,257,290,340,270],
[259,289,295,260,293,0,262,240,262],
[280,235,284,304,260,288,0,300,247],
[307,297,263,236,210,310,250,0,291],
[253,273,288,253,280,288,303,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,289,277,302,299,265,256,275],
[259,0,269,263,290,260,258,275,292],
[261,281,0,255,276,292,263,245,261],
[273,287,295,0,278,306,269,262,273],
[248,260,274,272,0,244,247,225,226],
[251,290,258,244,306,0,304,274,264],
[285,292,287,281,303,246,0,270,249],
[294,275,305,288,325,276,280,0,283],
[275,258,289,277,324,286,301,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,334,163,310,450,194,163,473],
[364,0,364,364,264,426,287,287,426],
[216,186,0,77,310,263,286,163,426],
[387,186,473,0,310,310,333,426,473],
[240,286,240,240,0,426,147,163,503],
[100,124,287,240,124,0,23,163,379],
[356,263,264,217,403,527,0,217,356],
[387,263,387,124,387,387,333,0,410],
[77,124,124,77,47,171,194,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,246,249,295,276,266,285,251],
[311,0,261,267,295,254,284,261,262],
[304,289,0,295,309,289,300,289,262],
[301,283,255,0,274,286,264,271,257],
[255,255,241,276,0,259,268,248,240],
[274,296,261,264,291,0,271,289,250],
[284,266,250,286,282,279,0,273,271],
[265,289,261,279,302,261,277,0,282],
[299,288,288,293,310,300,279,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,269,268,277,287,276,273,282],
[279,0,270,265,291,304,269,271,286],
[281,280,0,279,284,295,282,282,274],
[282,285,271,0,284,298,279,259,267],
[273,259,266,266,0,267,260,247,262],
[263,246,255,252,283,0,277,260,259],
[274,281,268,271,290,273,0,267,273],
[277,279,268,291,303,290,283,0,290],
[268,264,276,283,288,291,277,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,271,261,303,266,262,273,263],
[275,0,264,264,311,268,270,280,262],
[279,286,0,262,307,275,272,290,261],
[289,286,288,0,304,276,282,275,284],
[247,239,243,246,0,243,255,258,269],
[284,282,275,274,307,0,268,289,290],
[288,280,278,268,295,282,0,289,293],
[277,270,260,275,292,261,261,0,258],
[287,288,289,266,281,260,257,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,332,260,254,342,269,298,253,276],
[218,0,200,225,271,257,282,190,245],
[290,350,0,274,338,257,269,276,241],
[296,325,276,0,337,264,268,236,263],
[208,279,212,213,0,284,195,221,186],
[281,293,293,286,266,0,286,277,225],
[252,268,281,282,355,264,0,250,256],
[297,360,274,314,329,273,300,0,275],
[274,305,309,287,364,325,294,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,252,273,271,279,281,265,260],
[264,0,255,266,259,267,261,253,251],
[298,295,0,275,277,277,267,269,269],
[277,284,275,0,260,270,275,263,264],
[279,291,273,290,0,272,283,262,280],
[271,283,273,280,278,0,269,262,264],
[269,289,283,275,267,281,0,263,282],
[285,297,281,287,288,288,287,0,273],
[290,299,281,286,270,286,268,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,362,283,276,273,268,285,260,274],
[188,0,213,217,234,252,208,217,239],
[267,337,0,257,291,304,257,251,255],
[274,333,293,0,313,312,307,251,284],
[277,316,259,237,0,283,267,253,252],
[282,298,246,238,267,0,258,223,238],
[265,342,293,243,283,292,0,276,262],
[290,333,299,299,297,327,274,0,281],
[276,311,295,266,298,312,288,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,290,267,270,259,268,259,270],
[285,0,307,290,282,279,255,266,284],
[260,243,0,264,270,268,255,261,264],
[283,260,286,0,275,277,266,270,274],
[280,268,280,275,0,276,258,249,280],
[291,271,282,273,274,0,282,279,281],
[282,295,295,284,292,268,0,268,284],
[291,284,289,280,301,271,282,0,285],
[280,266,286,276,270,269,266,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,289,247,273,254,231,213,263],
[266,0,241,220,271,294,199,277,267],
[261,309,0,276,252,245,259,257,286],
[303,330,274,0,320,296,278,328,271],
[277,279,298,230,0,268,299,265,331],
[296,256,305,254,282,0,237,278,269],
[319,351,291,272,251,313,0,328,307],
[337,273,293,222,285,272,222,0,291],
[287,283,264,279,219,281,243,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,274,297,286,277,261,294,273],
[261,0,262,290,303,255,254,287,271],
[276,288,0,274,313,279,270,298,272],
[253,260,276,0,282,266,261,257,251],
[264,247,237,268,0,250,245,259,261],
[273,295,271,284,300,0,291,298,284],
[289,296,280,289,305,259,0,311,292],
[256,263,252,293,291,252,239,0,264],
[277,279,278,299,289,266,258,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,330,272,325,348,294,354,322,317],
[220,0,208,280,343,244,280,290,262],
[278,342,0,298,286,302,340,279,262],
[225,270,252,0,291,238,279,269,244],
[202,207,264,259,0,236,190,134,252],
[256,306,248,312,314,0,305,336,260],
[196,270,210,271,360,245,0,220,289],
[228,260,271,281,416,214,330,0,314],
[233,288,288,306,298,290,261,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,280,293,278,282,260,269,275],
[284,0,264,287,248,244,266,266,286],
[270,286,0,279,267,272,271,293,276],
[257,263,271,0,287,249,238,282,249],
[272,302,283,263,0,256,273,277,288],
[268,306,278,301,294,0,272,288,291],
[290,284,279,312,277,278,0,293,266],
[281,284,257,268,273,262,257,0,266],
[275,264,274,301,262,259,284,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,263,278,267,272,276,269,283],
[268,0,266,265,281,249,259,248,285],
[287,284,0,273,264,269,277,256,276],
[272,285,277,0,266,267,274,274,282],
[283,269,286,284,0,263,274,258,293],
[278,301,281,283,287,0,269,267,287],
[274,291,273,276,276,281,0,256,286],
[281,302,294,276,292,283,294,0,273],
[267,265,274,268,257,263,264,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,329,291,323,255,369,332,346,410],
[221,0,369,369,302,349,332,308,375],
[259,181,0,290,254,326,283,275,260],
[227,181,260,0,276,252,247,230,343],
[295,248,296,274,0,270,299,299,333],
[181,201,224,298,280,0,249,303,340],
[218,218,267,303,251,301,0,242,337],
[204,242,275,320,251,247,308,0,364],
[140,175,290,207,217,210,213,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,281,306,292,277,277,252,299],
[280,0,276,295,308,286,293,269,263],
[269,274,0,303,324,271,268,256,287],
[244,255,247,0,300,262,269,234,257],
[258,242,226,250,0,250,302,244,258],
[273,264,279,288,300,0,293,257,298],
[273,257,282,281,248,257,0,230,284],
[298,281,294,316,306,293,320,0,266],
[251,287,263,293,292,252,266,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,295,263,294,276,256,270,251],
[297,0,273,265,283,263,246,286,284],
[255,277,0,290,285,269,273,261,278],
[287,285,260,0,288,279,240,268,284],
[256,267,265,262,0,247,255,290,267],
[274,287,281,271,303,0,246,289,285],
[294,304,277,310,295,304,0,277,273],
[280,264,289,282,260,261,273,0,283],
[299,266,272,266,283,265,277,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,262,271,244,267,253,278,242],
[304,0,283,253,252,278,275,279,223],
[288,267,0,264,273,279,254,281,261],
[279,297,286,0,256,267,250,296,236],
[306,298,277,294,0,298,268,312,288],
[283,272,271,283,252,0,243,267,260],
[297,275,296,300,282,307,0,302,265],
[272,271,269,254,238,283,248,0,233],
[308,327,289,314,262,290,285,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,275,276,275,280,281,293,265],
[259,0,265,275,256,275,272,271,270],
[275,285,0,271,276,277,279,282,260],
[274,275,279,0,274,287,286,290,276],
[275,294,274,276,0,289,280,291,287],
[270,275,273,263,261,0,280,282,268],
[269,278,271,264,270,270,0,279,274],
[257,279,268,260,259,268,271,0,255],
[285,280,290,274,263,282,276,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,272,263,276,274,264,278,276],
[297,0,279,259,281,291,284,284,274],
[278,271,0,280,289,289,271,283,272],
[287,291,270,0,291,313,289,297,268],
[274,269,261,259,0,280,251,268,266],
[276,259,261,237,270,0,274,278,266],
[286,266,279,261,299,276,0,279,265],
[272,266,267,253,282,272,271,0,259],
[274,276,278,282,284,284,285,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,255,270,276,297,270,259,253],
[274,0,263,271,282,278,282,276,260],
[295,287,0,275,289,299,293,295,282],
[280,279,275,0,269,296,283,276,261],
[274,268,261,281,0,295,270,286,297],
[253,272,251,254,255,0,263,255,232],
[280,268,257,267,280,287,0,285,248],
[291,274,255,274,264,295,265,0,276],
[297,290,268,289,253,318,302,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,293,273,266,287,285,289,287],
[276,0,288,278,283,285,278,282,271],
[257,262,0,296,251,276,260,278,261],
[277,272,254,0,265,295,267,292,260],
[284,267,299,285,0,303,287,277,279],
[263,265,274,255,247,0,280,274,260],
[265,272,290,283,263,270,0,290,282],
[261,268,272,258,273,276,260,0,263],
[263,279,289,290,271,290,268,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,243,306,320,310,305,286,311],
[234,0,233,317,249,271,286,297,285],
[307,317,0,267,330,328,351,291,353],
[244,233,283,0,301,294,296,255,266],
[230,301,220,249,0,297,275,297,276],
[240,279,222,256,253,0,275,281,273],
[245,264,199,254,275,275,0,230,267],
[264,253,259,295,253,269,320,0,277],
[239,265,197,284,274,277,283,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,295,290,272,285,295,306,285],
[265,0,272,268,260,267,271,269,259],
[255,278,0,244,274,259,260,289,259],
[260,282,306,0,260,267,286,286,266],
[278,290,276,290,0,289,274,315,265],
[265,283,291,283,261,0,280,293,262],
[255,279,290,264,276,270,0,279,276],
[244,281,261,264,235,257,271,0,253],
[265,291,291,284,285,288,274,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,255,284,269,272,275,249,227],
[290,0,273,282,278,288,292,273,266],
[295,277,0,292,252,310,293,272,250],
[266,268,258,0,258,269,276,272,271],
[281,272,298,292,0,277,284,280,283],
[278,262,240,281,273,0,272,251,249],
[275,258,257,274,266,278,0,248,250],
[301,277,278,278,270,299,302,0,278],
[323,284,300,279,267,301,300,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,259,276,278,278,300,306,294],
[245,0,291,230,245,200,285,331,318],
[291,259,0,312,312,260,314,303,309],
[274,320,238,0,282,263,328,318,291],
[272,305,238,268,0,248,311,293,279],
[272,350,290,287,302,0,345,318,289],
[250,265,236,222,239,205,0,221,303],
[244,219,247,232,257,232,329,0,286],
[256,232,241,259,271,261,247,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,264,267,239,263,256,251,255],
[307,0,288,314,302,274,264,259,280],
[286,262,0,286,276,263,273,276,278],
[283,236,264,0,276,271,265,258,272],
[311,248,274,274,0,252,251,259,271],
[287,276,287,279,298,0,281,264,292],
[294,286,277,285,299,269,0,269,293],
[299,291,274,292,291,286,281,0,286],
[295,270,272,278,279,258,257,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,282,277,268,294,284,289,298],
[260,0,285,261,275,287,250,279,286],
[268,265,0,276,279,278,268,280,258],
[273,289,274,0,268,297,273,268,294],
[282,275,271,282,0,278,263,277,280],
[256,263,272,253,272,0,251,272,283],
[266,300,282,277,287,299,0,282,310],
[261,271,270,282,273,278,268,0,300],
[252,264,292,256,270,267,240,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,273,286,243,229,264,248,245],
[264,0,247,290,261,270,268,298,294],
[277,303,0,309,280,260,308,282,314],
[264,260,241,0,239,247,255,223,225],
[307,289,270,311,0,291,299,262,312],
[321,280,290,303,259,0,286,258,320],
[286,282,242,295,251,264,0,242,257],
[302,252,268,327,288,292,308,0,312],
[305,256,236,325,238,230,293,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,277,294,266,286,265,266,271],
[257,0,286,276,248,292,262,255,266],
[273,264,0,280,256,270,260,261,257],
[256,274,270,0,275,274,275,262,285],
[284,302,294,275,0,292,296,277,267],
[264,258,280,276,258,0,266,274,275],
[285,288,290,275,254,284,0,267,290],
[284,295,289,288,273,276,283,0,279],
[279,284,293,265,283,275,260,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,289,284,277,277,276,269,269],
[284,0,275,291,294,284,301,292,285],
[261,275,0,272,269,273,279,255,251],
[266,259,278,0,286,284,266,259,275],
[273,256,281,264,0,276,288,293,274],
[273,266,277,266,274,0,278,266,263],
[274,249,271,284,262,272,0,266,260],
[281,258,295,291,257,284,284,0,263],
[281,265,299,275,276,287,290,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,277,286,286,292,264,259,272],
[246,0,244,278,276,256,251,246,261],
[273,306,0,272,293,293,289,266,278],
[264,272,278,0,284,297,288,260,254],
[264,274,257,266,0,273,254,268,265],
[258,294,257,253,277,0,281,245,270],
[286,299,261,262,296,269,0,275,260],
[291,304,284,290,282,305,275,0,278],
[278,289,272,296,285,280,290,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,279,262,275,257,296,275,288],
[286,0,277,272,267,284,286,261,274],
[271,273,0,280,287,273,300,263,264],
[288,278,270,0,277,285,283,261,286],
[275,283,263,273,0,280,280,258,268],
[293,266,277,265,270,0,285,263,261],
[254,264,250,267,270,265,0,246,260],
[275,289,287,289,292,287,304,0,285],
[262,276,286,264,282,289,290,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,299,271,283,257,257,276,276],
[261,0,272,284,281,258,259,245,257],
[251,278,0,265,252,249,237,266,265],
[279,266,285,0,270,270,288,281,271],
[267,269,298,280,0,279,281,278,294],
[293,292,301,280,271,0,255,304,270],
[293,291,313,262,269,295,0,286,287],
[274,305,284,269,272,246,264,0,262],
[274,293,285,279,256,280,263,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,252,296,275,340,243,269,295],
[264,0,277,277,246,311,237,242,275],
[298,273,0,271,291,293,285,276,245],
[254,273,279,0,265,313,242,263,290],
[275,304,259,285,0,345,244,244,305],
[210,239,257,237,205,0,221,206,255],
[307,313,265,308,306,329,0,270,317],
[281,308,274,287,306,344,280,0,311],
[255,275,305,260,245,295,233,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,288,275,272,277,277,280,271],
[270,0,281,274,265,263,283,280,280],
[262,269,0,261,269,259,281,276,272],
[275,276,289,0,254,269,280,287,286],
[278,285,281,296,0,271,300,294,290],
[273,287,291,281,279,0,271,287,280],
[273,267,269,270,250,279,0,283,273],
[270,270,274,263,256,263,267,0,265],
[279,270,278,264,260,270,277,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,331,198,283,269,230,307,186,215],
[219,0,160,282,281,128,261,175,232],
[352,390,0,296,379,263,319,287,292],
[267,268,254,0,331,195,339,233,240],
[281,269,171,219,0,197,293,185,326],
[320,422,287,355,353,0,373,272,307],
[243,289,231,211,257,177,0,246,205],
[364,375,263,317,365,278,304,0,297],
[335,318,258,310,224,243,345,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,240,291,249,278,267,270,255],
[308,0,263,320,280,277,262,292,296],
[310,287,0,314,272,300,259,291,293],
[259,230,236,0,243,265,257,251,258],
[301,270,278,307,0,296,275,283,299],
[272,273,250,285,254,0,278,286,267],
[283,288,291,293,275,272,0,295,299],
[280,258,259,299,267,264,255,0,258],
[295,254,257,292,251,283,251,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,274,303,278,287,283,284,276],
[228,0,262,272,252,261,237,260,275],
[276,288,0,286,264,272,267,277,275],
[247,278,264,0,272,258,283,271,271],
[272,298,286,278,0,271,285,283,297],
[263,289,278,292,279,0,288,287,266],
[267,313,283,267,265,262,0,303,276],
[266,290,273,279,267,263,247,0,255],
[274,275,275,279,253,284,274,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,276,279,282,292,264,288,278],
[272,0,271,271,276,292,283,264,267],
[274,279,0,305,285,300,262,271,280],
[271,279,245,0,271,278,249,269,266],
[268,274,265,279,0,280,284,274,284],
[258,258,250,272,270,0,275,267,283],
[286,267,288,301,266,275,0,281,283],
[262,286,279,281,276,283,269,0,279],
[272,283,270,284,266,267,267,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,291,292,259,278,279,275,289],
[254,0,284,272,272,265,268,258,264],
[259,266,0,274,263,263,273,249,270],
[258,278,276,0,273,281,278,258,265],
[291,278,287,277,0,271,294,261,274],
[272,285,287,269,279,0,289,262,278],
[271,282,277,272,256,261,0,270,259],
[275,292,301,292,289,288,280,0,276],
[261,286,280,285,276,272,291,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,270,266,255,268,262,256,266],
[293,0,281,282,274,270,291,258,288],
[280,269,0,269,276,265,275,282,266],
[284,268,281,0,274,275,283,280,288],
[295,276,274,276,0,265,280,265,268],
[282,280,285,275,285,0,279,282,299],
[288,259,275,267,270,271,0,267,286],
[294,292,268,270,285,268,283,0,274],
[284,262,284,262,282,251,264,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,273,280,274,278,241,269,286],
[283,0,262,280,276,256,260,251,297],
[277,288,0,280,303,269,280,283,272],
[270,270,270,0,275,285,269,277,298],
[276,274,247,275,0,297,257,258,307],
[272,294,281,265,253,0,252,261,265],
[309,290,270,281,293,298,0,244,303],
[281,299,267,273,292,289,306,0,267],
[264,253,278,252,243,285,247,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,261,272,251,246,284,245,247],
[288,0,246,266,243,242,260,241,233],
[289,304,0,286,302,272,295,282,274],
[278,284,264,0,250,263,290,262,290],
[299,307,248,300,0,289,285,253,267],
[304,308,278,287,261,0,295,251,275],
[266,290,255,260,265,255,0,241,243],
[305,309,268,288,297,299,309,0,298],
[303,317,276,260,283,275,307,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,275,266,238,244,214,275,169],
[332,0,310,310,325,301,259,255,279],
[275,240,0,266,230,210,198,251,233],
[284,240,284,0,253,250,201,246,257],
[312,225,320,297,0,296,241,250,220],
[306,249,340,300,254,0,227,275,238],
[336,291,352,349,309,323,0,273,287],
[275,295,299,304,300,275,277,0,280],
[381,271,317,293,330,312,263,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,326,289,264,241,254,296,240],
[270,0,286,293,305,264,260,236,249],
[224,264,0,237,322,269,242,253,237],
[261,257,313,0,296,252,263,273,258],
[286,245,228,254,0,267,244,242,275],
[309,286,281,298,283,0,284,264,251],
[296,290,308,287,306,266,0,283,288],
[254,314,297,277,308,286,267,0,275],
[310,301,313,292,275,299,262,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,291,275,266,278,271,287,290],
[289,0,289,281,264,293,288,274,280],
[259,261,0,257,254,266,291,269,265],
[275,269,293,0,266,257,267,282,277],
[284,286,296,284,0,282,276,287,275],
[272,257,284,293,268,0,274,282,271],
[279,262,259,283,274,276,0,279,281],
[263,276,281,268,263,268,271,0,274],
[260,270,285,273,275,279,269,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,287,270,258,324,289,281,271],
[245,0,322,303,277,273,297,250,264],
[263,228,0,312,265,296,263,246,221],
[280,247,238,0,240,285,279,265,270],
[292,273,285,310,0,302,291,287,305],
[226,277,254,265,248,0,279,297,255],
[261,253,287,271,259,271,0,251,240],
[269,300,304,285,263,253,299,0,273],
[279,286,329,280,245,295,310,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,297,295,293,293,287,273,308],
[281,0,292,295,279,296,276,275,291],
[253,258,0,258,266,277,266,272,282],
[255,255,292,0,270,274,253,268,273],
[257,271,284,280,0,281,264,257,286],
[257,254,273,276,269,0,259,280,279],
[263,274,284,297,286,291,0,289,297],
[277,275,278,282,293,270,261,0,280],
[242,259,268,277,264,271,253,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,258,274,240,254,259,242,251],
[281,0,278,281,255,254,275,256,280],
[292,272,0,275,242,261,256,261,264],
[276,269,275,0,247,230,261,248,258],
[310,295,308,303,0,288,292,256,274],
[296,296,289,320,262,0,280,280,282],
[291,275,294,289,258,270,0,275,263],
[308,294,289,302,294,270,275,0,279],
[299,270,286,292,276,268,287,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,297,328,266,242,312,292,345],
[262,0,291,324,290,266,303,269,313],
[253,259,0,300,277,285,284,288,319],
[222,226,250,0,247,209,235,230,254],
[284,260,273,303,0,273,286,303,286],
[308,284,265,341,277,0,301,278,343],
[238,247,266,315,264,249,0,263,275],
[258,281,262,320,247,272,287,0,305],
[205,237,231,296,264,207,275,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,285,249,276,258,301,251,251],
[289,0,276,269,280,238,317,250,251],
[265,274,0,265,296,241,316,259,256],
[301,281,285,0,313,270,322,258,260],
[274,270,254,237,0,242,331,230,264],
[292,312,309,280,308,0,350,285,270],
[249,233,234,228,219,200,0,207,226],
[299,300,291,292,320,265,343,0,289],
[299,299,294,290,286,280,324,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,247,262,269,269,234,286,259],
[321,0,261,291,287,285,283,294,301],
[303,289,0,293,268,283,273,285,273],
[288,259,257,0,248,285,237,290,267],
[281,263,282,302,0,276,268,285,277],
[281,265,267,265,274,0,251,285,264],
[316,267,277,313,282,299,0,297,285],
[264,256,265,260,265,265,253,0,266],
[291,249,277,283,273,286,265,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,267,281,247,266,276,284,284],
[258,0,254,268,280,255,253,260,268],
[283,296,0,274,255,276,255,280,296],
[269,282,276,0,320,268,278,296,326],
[303,270,295,230,0,262,269,248,305],
[284,295,274,282,288,0,262,285,317],
[274,297,295,272,281,288,0,317,316],
[266,290,270,254,302,265,233,0,299],
[266,282,254,224,245,233,234,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,305,253,298,248,266,257,233],
[260,0,282,301,305,266,280,279,288],
[245,268,0,294,301,276,256,264,263],
[297,249,256,0,299,266,271,248,276],
[252,245,249,251,0,239,271,247,232],
[302,284,274,284,311,0,297,265,281],
[284,270,294,279,279,253,0,275,241],
[293,271,286,302,303,285,275,0,281],
[317,262,287,274,318,269,309,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,252,254,217,226,275,243,259],
[308,0,311,313,281,245,319,287,326],
[298,239,0,283,257,247,257,258,271],
[296,237,267,0,272,225,256,258,282],
[333,269,293,278,0,280,283,271,311],
[324,305,303,325,270,0,304,307,315],
[275,231,293,294,267,246,0,252,301],
[307,263,292,292,279,243,298,0,300],
[291,224,279,268,239,235,249,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,284,277,293,284,287,273,303],
[253,0,253,267,286,268,272,263,292],
[266,297,0,284,306,271,273,259,287],
[273,283,266,0,287,279,256,266,283],
[257,264,244,263,0,254,249,285,282],
[266,282,279,271,296,0,269,263,288],
[263,278,277,294,301,281,0,267,286],
[277,287,291,284,265,287,283,0,291],
[247,258,263,267,268,262,264,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,275,289,252,272,259,288,271],
[252,0,259,287,262,269,245,262,274],
[275,291,0,286,279,286,256,278,295],
[261,263,264,0,252,273,261,269,275],
[298,288,271,298,0,303,275,290,298],
[278,281,264,277,247,0,265,292,275],
[291,305,294,289,275,285,0,297,305],
[262,288,272,281,260,258,253,0,283],
[279,276,255,275,252,275,245,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,278,260,292,278,271,266,285],
[280,0,271,278,317,286,297,276,300],
[272,279,0,267,313,287,277,284,305],
[290,272,283,0,300,283,281,285,295],
[258,233,237,250,0,250,244,249,265],
[272,264,263,267,300,0,286,272,273],
[279,253,273,269,306,264,0,263,305],
[284,274,266,265,301,278,287,0,288],
[265,250,245,255,285,277,245,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,254,286,296,275,307,277,292],
[253,0,285,292,258,281,273,292,316],
[296,265,0,308,261,273,314,285,287],
[264,258,242,0,248,267,271,276,274],
[254,292,289,302,0,297,311,265,309],
[275,269,277,283,253,0,300,253,281],
[243,277,236,279,239,250,0,284,252],
[273,258,265,274,285,297,266,0,291],
[258,234,263,276,241,269,298,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,276,267,241,265,269,256,287],
[281,0,308,315,270,286,279,273,293],
[274,242,0,265,263,250,264,238,278],
[283,235,285,0,260,259,272,266,259],
[309,280,287,290,0,284,296,275,293],
[285,264,300,291,266,0,290,245,274],
[281,271,286,278,254,260,0,265,275],
[294,277,312,284,275,305,285,0,295],
[263,257,272,291,257,276,275,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,340,248,336,259,302,279,284],
[272,0,290,268,306,196,292,269,290],
[210,260,0,256,323,215,274,233,263],
[302,282,294,0,339,222,296,271,320],
[214,244,227,211,0,228,213,206,245],
[291,354,335,328,322,0,308,273,326],
[248,258,276,254,337,242,0,215,282],
[271,281,317,279,344,277,335,0,306],
[266,260,287,230,305,224,268,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,288,277,261,274,273,271,284],
[299,0,291,309,291,296,285,275,296],
[262,259,0,287,268,264,265,274,281],
[273,241,263,0,260,266,265,246,261],
[289,259,282,290,0,273,281,276,276],
[276,254,286,284,277,0,267,274,270],
[277,265,285,285,269,283,0,265,292],
[279,275,276,304,274,276,285,0,275],
[266,254,269,289,274,280,258,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,271,284,266,282,269,287,279],
[295,0,269,300,287,280,291,288,254],
[279,281,0,303,287,312,283,302,264],
[266,250,247,0,263,270,272,286,254],
[284,263,263,287,0,295,289,290,263],
[268,270,238,280,255,0,273,280,260],
[281,259,267,278,261,277,0,292,270],
[263,262,248,264,260,270,258,0,234],
[271,296,286,296,287,290,280,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,282,290,264,291,275,282,279],
[262,0,273,278,259,284,290,277,290],
[268,277,0,281,277,286,271,274,307],
[260,272,269,0,252,269,268,254,293],
[286,291,273,298,0,292,280,271,291],
[259,266,264,281,258,0,259,245,273],
[275,260,279,282,270,291,0,256,256],
[268,273,276,296,279,305,294,0,290],
[271,260,243,257,259,277,294,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,275,277,274,273,284,286,281],
[269,0,274,266,262,261,282,266,246],
[275,276,0,267,261,273,284,288,262],
[273,284,283,0,273,269,292,296,272],
[276,288,289,277,0,252,296,297,270],
[277,289,277,281,298,0,274,290,275],
[266,268,266,258,254,276,0,280,261],
[264,284,262,254,253,260,270,0,255],
[269,304,288,278,280,275,289,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,266,283,278,282,273,257,263],
[284,0,262,269,264,287,262,261,276],
[284,288,0,279,283,277,272,265,271],
[267,281,271,0,266,270,266,264,273],
[272,286,267,284,0,271,272,274,272],
[268,263,273,280,279,0,274,287,285],
[277,288,278,284,278,276,0,283,273],
[293,289,285,286,276,263,267,0,286],
[287,274,279,277,278,265,277,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,270,289,286,265,262,282,270],
[283,0,295,287,303,273,279,291,282],
[280,255,0,288,292,275,266,271,255],
[261,263,262,0,297,263,256,259,263],
[264,247,258,253,0,258,248,248,253],
[285,277,275,287,292,0,286,293,280],
[288,271,284,294,302,264,0,269,277],
[268,259,279,291,302,257,281,0,271],
[280,268,295,287,297,270,273,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,292,306,280,265,285,268,296],
[253,0,266,271,265,266,260,259,278],
[258,284,0,279,277,275,271,286,289],
[244,279,271,0,269,277,273,234,264],
[270,285,273,281,0,272,283,254,297],
[285,284,275,273,278,0,270,265,291],
[265,290,279,277,267,280,0,257,267],
[282,291,264,316,296,285,293,0,300],
[254,272,261,286,253,259,283,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,265,256,277,282,279,294,295],
[280,0,287,287,275,293,293,288,314],
[285,263,0,243,271,285,259,302,284],
[294,263,307,0,286,288,286,304,314],
[273,275,279,264,0,281,249,323,306],
[268,257,265,262,269,0,268,309,288],
[271,257,291,264,301,282,0,333,298],
[256,262,248,246,227,241,217,0,284],
[255,236,266,236,244,262,252,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,263,274,237,304,285,270,259],
[229,0,219,231,201,237,225,230,219],
[287,331,0,277,268,267,277,261,233],
[276,319,273,0,263,329,231,276,231],
[313,349,282,287,0,304,231,266,268],
[246,313,283,221,246,0,246,264,248],
[265,325,273,319,319,304,0,270,302],
[280,320,289,274,284,286,280,0,226],
[291,331,317,319,282,302,248,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,298,297,321,333,247,299,345],
[236,0,287,304,333,321,306,228,273],
[252,263,0,288,287,259,264,246,307],
[253,246,262,0,272,272,238,247,265],
[229,217,263,278,0,287,251,198,252],
[217,229,291,278,263,0,234,221,252],
[303,244,286,312,299,316,0,287,275],
[251,322,304,303,352,329,263,0,286],
[205,277,243,285,298,298,275,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,251,280,277,258,263,250,250],
[304,0,284,276,311,277,312,262,288],
[299,266,0,279,290,272,286,289,260],
[270,274,271,0,300,285,295,263,264],
[273,239,260,250,0,252,277,263,258],
[292,273,278,265,298,0,324,266,289],
[287,238,264,255,273,226,0,250,265],
[300,288,261,287,287,284,300,0,290],
[300,262,290,286,292,261,285,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,272,272,267,271,280,258,262],
[272,0,252,266,268,276,284,278,273],
[278,298,0,282,278,295,273,276,279],
[278,284,268,0,271,296,269,282,263],
[283,282,272,279,0,288,282,275,279],
[279,274,255,254,262,0,266,247,274],
[270,266,277,281,268,284,0,279,276],
[292,272,274,268,275,303,271,0,264],
[288,277,271,287,271,276,274,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,264,281,275,279,261,270,277],
[295,0,276,275,268,278,269,263,289],
[286,274,0,288,279,297,272,279,281],
[269,275,262,0,276,289,259,257,280],
[275,282,271,274,0,278,266,259,265],
[271,272,253,261,272,0,265,270,250],
[289,281,278,291,284,285,0,254,275],
[280,287,271,293,291,280,296,0,288],
[273,261,269,270,285,300,275,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,250,265,287,303,293,300,259],
[273,0,275,295,296,298,305,301,288],
[300,275,0,318,294,297,297,315,254],
[285,255,232,0,256,265,258,285,284],
[263,254,256,294,0,281,264,315,247],
[247,252,253,285,269,0,263,295,263],
[257,245,253,292,286,287,0,299,251],
[250,249,235,265,235,255,251,0,234],
[291,262,296,266,303,287,299,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,269,270,285,280,284,292,272],
[300,0,277,270,288,299,296,294,284],
[281,273,0,277,289,305,285,279,287],
[280,280,273,0,278,310,263,287,287],
[265,262,261,272,0,286,285,289,282],
[270,251,245,240,264,0,253,284,258],
[266,254,265,287,265,297,0,287,268],
[258,256,271,263,261,266,263,0,260],
[278,266,263,263,268,292,282,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,279,275,263,287,278,302,283],
[275,0,279,265,267,272,253,271,272],
[271,271,0,270,270,279,269,278,266],
[275,285,280,0,261,305,288,288,280],
[287,283,280,289,0,292,275,294,277],
[263,278,271,245,258,0,250,270,258],
[272,297,281,262,275,300,0,292,280],
[248,279,272,262,256,280,258,0,256],
[267,278,284,270,273,292,270,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,263,255,274,261,279,250,273],
[262,0,291,265,279,288,300,276,290],
[287,259,0,267,294,293,290,269,287],
[295,285,283,0,286,296,274,303,281],
[276,271,256,264,0,273,277,274,263],
[289,262,257,254,277,0,277,259,263],
[271,250,260,276,273,273,0,281,276],
[300,274,281,247,276,291,269,0,284],
[277,260,263,269,287,287,274,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,252,266,273,269,263,244,265],
[300,0,292,287,296,300,311,247,248],
[298,258,0,271,271,294,274,286,277],
[284,263,279,0,275,272,295,258,266],
[277,254,279,275,0,291,273,240,252],
[281,250,256,278,259,0,266,270,254],
[287,239,276,255,277,284,0,228,251],
[306,303,264,292,310,280,322,0,263],
[285,302,273,284,298,296,299,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,261,280,272,266,307,260,277],
[258,0,249,279,251,258,279,263,258],
[289,301,0,287,295,268,273,279,287],
[270,271,263,0,271,264,292,267,260],
[278,299,255,279,0,251,260,235,257],
[284,292,282,286,299,0,295,245,292],
[243,271,277,258,290,255,0,248,294],
[290,287,271,283,315,305,302,0,286],
[273,292,263,290,293,258,256,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,290,282,233,251,284,244,260],
[270,0,272,263,270,246,254,261,266],
[260,278,0,282,283,235,257,259,259],
[268,287,268,0,270,267,233,278,236],
[317,280,267,280,0,257,286,276,273],
[299,304,315,283,293,0,258,294,278],
[266,296,293,317,264,292,0,288,255],
[306,289,291,272,274,256,262,0,270],
[290,284,291,314,277,272,295,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,274,274,276,286,275,291,282],
[269,0,264,276,270,281,261,262,269],
[276,286,0,265,272,272,269,271,282],
[276,274,285,0,287,289,263,276,288],
[274,280,278,263,0,295,256,294,278],
[264,269,278,261,255,0,260,268,271],
[275,289,281,287,294,290,0,287,277],
[259,288,279,274,256,282,263,0,268],
[268,281,268,262,272,279,273,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,278,268,275,262,299,301,294],
[261,0,279,276,276,285,289,285,273],
[272,271,0,259,275,269,289,273,259],
[282,274,291,0,289,286,285,272,266],
[275,274,275,261,0,268,276,282,280],
[288,265,281,264,282,0,274,277,267],
[251,261,261,265,274,276,0,270,276],
[249,265,277,278,268,273,280,0,255],
[256,277,291,284,270,283,274,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,265,264,258,266,279,264,271],
[283,0,287,268,273,271,274,257,263],
[285,263,0,275,266,291,279,290,266],
[286,282,275,0,253,274,272,277,254],
[292,277,284,297,0,294,307,285,266],
[284,279,259,276,256,0,273,268,262],
[271,276,271,278,243,277,0,270,258],
[286,293,260,273,265,282,280,0,276],
[279,287,284,296,284,288,292,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,303,276,322,273,294,298,293],
[267,0,287,288,294,298,283,317,278],
[247,263,0,268,264,279,249,273,267],
[274,262,282,0,290,303,267,280,273],
[228,256,286,260,0,272,261,277,261],
[277,252,271,247,278,0,269,286,273],
[256,267,301,283,289,281,0,292,296],
[252,233,277,270,273,264,258,0,240],
[257,272,283,277,289,277,254,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,266,276,263,251,258,253,270],
[290,0,285,273,290,280,287,302,269],
[284,265,0,268,278,274,285,278,266],
[274,277,282,0,278,281,276,297,267],
[287,260,272,272,0,273,272,272,271],
[299,270,276,269,277,0,278,283,284],
[292,263,265,274,278,272,0,280,264],
[297,248,272,253,278,267,270,0,257],
[280,281,284,283,279,266,286,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,269,266,280,296,254,301,284],
[257,0,263,260,270,271,236,283,267],
[281,287,0,282,268,289,275,272,288],
[284,290,268,0,281,297,265,269,276],
[270,280,282,269,0,291,282,280,295],
[254,279,261,253,259,0,263,280,263],
[296,314,275,285,268,287,0,297,278],
[249,267,278,281,270,270,253,0,278],
[266,283,262,274,255,287,272,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,288,281,269,283,269,286,281],
[273,0,237,252,250,270,270,260,281],
[262,313,0,287,281,294,281,253,285],
[269,298,263,0,267,277,306,265,295],
[281,300,269,283,0,269,273,271,298],
[267,280,256,273,281,0,276,272,286],
[281,280,269,244,277,274,0,258,287],
[264,290,297,285,279,278,292,0,300],
[269,269,265,255,252,264,263,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,237,274,256,277,266,282,283],
[273,0,248,285,276,251,286,277,277],
[313,302,0,287,261,314,273,300,299],
[276,265,263,0,254,279,249,285,292],
[294,274,289,296,0,293,280,289,303],
[273,299,236,271,257,0,251,274,270],
[284,264,277,301,270,299,0,290,284],
[268,273,250,265,261,276,260,0,306],
[267,273,251,258,247,280,266,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,263,242,265,269,284,266,263],
[282,0,262,258,247,296,262,302,285],
[287,288,0,238,281,249,285,287,238],
[308,292,312,0,293,315,273,294,294],
[285,303,269,257,0,308,250,272,273],
[281,254,301,235,242,0,246,238,259],
[266,288,265,277,300,304,0,286,255],
[284,248,263,256,278,312,264,0,266],
[287,265,312,256,277,291,295,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,295,410,208,262,284,268,319],
[294,0,265,390,274,286,330,297,291],
[255,285,0,424,304,291,325,335,301],
[140,160,126,0,216,164,174,216,176],
[342,276,246,334,0,263,295,248,334],
[288,264,259,386,287,0,259,299,288],
[266,220,225,376,255,291,0,219,322],
[282,253,215,334,302,251,331,0,343],
[231,259,249,374,216,262,228,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,317,311,305,275,291,313,291],
[229,0,268,284,271,224,244,307,282],
[233,282,0,306,251,227,238,250,264],
[239,266,244,0,251,235,233,240,246],
[245,279,299,299,0,248,288,270,294],
[275,326,323,315,302,0,288,293,305],
[259,306,312,317,262,262,0,316,285],
[237,243,300,310,280,257,234,0,289],
[259,268,286,304,256,245,265,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,259,292,271,269,287,277,281],
[272,0,258,288,251,275,283,271,297],
[291,292,0,287,259,283,294,302,302],
[258,262,263,0,272,266,271,281,281],
[279,299,291,278,0,274,299,273,300],
[281,275,267,284,276,0,291,277,301],
[263,267,256,279,251,259,0,260,281],
[273,279,248,269,277,273,290,0,298],
[269,253,248,269,250,249,269,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,283,294,274,271,271,293,257],
[278,0,304,293,298,277,271,289,257],
[267,246,0,297,267,274,274,278,273],
[256,257,253,0,263,272,250,264,254],
[276,252,283,287,0,282,260,280,260],
[279,273,276,278,268,0,277,277,255],
[279,279,276,300,290,273,0,311,276],
[257,261,272,286,270,273,239,0,265],
[293,293,277,296,290,295,274,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,253,260,285,276,251,222,266],
[279,0,310,268,292,269,289,233,279],
[297,240,0,295,285,258,294,266,270],
[290,282,255,0,270,270,267,241,270],
[265,258,265,280,0,238,270,252,257],
[274,281,292,280,312,0,276,265,304],
[299,261,256,283,280,274,0,278,282],
[328,317,284,309,298,285,272,0,287],
[284,271,280,280,293,246,268,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,272,265,273,282,278,287,271],
[278,0,274,273,270,276,294,303,279],
[278,276,0,272,282,270,285,302,263],
[285,277,278,0,272,266,284,284,256],
[277,280,268,278,0,260,274,286,279],
[268,274,280,284,290,0,285,290,279],
[272,256,265,266,276,265,0,287,267],
[263,247,248,266,264,260,263,0,273],
[279,271,287,294,271,271,283,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,268,253,253,282,283,275,245],
[284,0,289,267,283,300,304,284,267],
[282,261,0,244,261,263,286,284,259],
[297,283,306,0,289,293,268,290,282],
[297,267,289,261,0,292,275,284,260],
[268,250,287,257,258,0,270,282,255],
[267,246,264,282,275,280,0,304,263],
[275,266,266,260,266,268,246,0,254],
[305,283,291,268,290,295,287,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,308,276,296,322,303,300,287],
[278,0,324,334,325,288,342,299,269],
[242,226,0,264,300,265,307,270,248],
[274,216,286,0,241,272,288,266,257],
[254,225,250,309,0,288,282,252,253],
[228,262,285,278,262,0,272,254,262],
[247,208,243,262,268,278,0,262,253],
[250,251,280,284,298,296,288,0,277],
[263,281,302,293,297,288,297,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,293,267,268,270,291,303,294],
[272,0,294,282,282,277,287,304,295],
[257,256,0,264,252,261,268,267,281],
[283,268,286,0,289,268,272,295,290],
[282,268,298,261,0,260,280,313,296],
[280,273,289,282,290,0,278,303,286],
[259,263,282,278,270,272,0,273,279],
[247,246,283,255,237,247,277,0,271],
[256,255,269,260,254,264,271,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,289,306,280,285,308,285,274],
[299,0,327,315,261,271,295,265,292],
[261,223,0,258,244,247,237,282,251],
[244,235,292,0,247,256,266,275,258],
[270,289,306,303,0,305,288,307,302],
[265,279,303,294,245,0,283,274,300],
[242,255,313,284,262,267,0,279,300],
[265,285,268,275,243,276,271,0,242],
[276,258,299,292,248,250,250,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,368,223,372,396,281,449,346],
[101,0,315,215,364,305,254,285,405],
[182,235,0,188,325,208,199,294,313],
[327,335,362,0,335,280,223,326,263],
[178,186,225,215,0,159,193,209,346],
[154,245,342,270,391,0,171,330,324],
[269,296,351,327,357,379,0,327,400],
[101,265,256,224,341,220,223,0,322],
[204,145,237,287,204,226,150,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,284,256,264,284,273,256,322],
[246,0,273,213,244,259,228,227,271],
[266,277,0,232,280,253,243,242,273],
[294,337,318,0,302,276,275,284,316],
[286,306,270,248,0,285,255,263,279],
[266,291,297,274,265,0,234,265,301],
[277,322,307,275,295,316,0,265,333],
[294,323,308,266,287,285,285,0,291],
[228,279,277,234,271,249,217,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,266,278,256,254,289,285,282],
[284,0,276,298,261,276,273,293,269],
[284,274,0,293,293,270,279,276,276],
[272,252,257,0,246,263,267,270,242],
[294,289,257,304,0,289,275,285,273],
[296,274,280,287,261,0,288,263,265],
[261,277,271,283,275,262,0,274,244],
[265,257,274,280,265,287,276,0,257],
[268,281,274,308,277,285,306,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,227,173,282,397,351,363,329],
[298,0,372,298,372,444,279,478,220],
[323,178,0,251,245,360,314,398,292],
[377,252,299,0,282,308,351,299,292],
[268,178,305,268,0,377,351,305,398],
[153,106,190,242,173,0,242,326,326],
[199,271,236,199,199,308,0,342,372],
[187,72,152,251,245,224,208,0,208],
[221,330,258,258,152,224,178,342,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,221,257,261,263,234,318,260],
[258,0,276,268,292,263,256,295,253],
[329,274,0,271,290,291,261,322,288],
[293,282,279,0,279,254,254,299,253],
[289,258,260,271,0,274,267,305,246],
[287,287,259,296,276,0,246,314,240],
[316,294,289,296,283,304,0,317,246],
[232,255,228,251,245,236,233,0,260],
[290,297,262,297,304,310,304,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,250,263,264,248,284,275,265],
[292,0,248,275,276,260,300,303,269],
[300,302,0,273,292,290,305,287,285],
[287,275,277,0,296,274,281,301,293],
[286,274,258,254,0,259,297,280,296],
[302,290,260,276,291,0,323,302,294],
[266,250,245,269,253,227,0,275,278],
[275,247,263,249,270,248,275,0,274],
[285,281,265,257,254,256,272,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,283,279,278,270,269,299,269],
[278,0,272,268,265,262,244,266,264],
[267,278,0,261,256,249,264,278,257],
[271,282,289,0,272,275,269,282,272],
[272,285,294,278,0,285,296,285,275],
[280,288,301,275,265,0,283,280,283],
[281,306,286,281,254,267,0,293,271],
[251,284,272,268,265,270,257,0,254],
[281,286,293,278,275,267,279,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,261,263,252,257,272,253,271],
[285,0,253,276,254,278,268,264,264],
[289,297,0,290,284,283,299,262,278],
[287,274,260,0,265,274,279,276,279],
[298,296,266,285,0,272,268,261,258],
[293,272,267,276,278,0,276,286,272],
[278,282,251,271,282,274,0,274,265],
[297,286,288,274,289,264,276,0,282],
[279,286,272,271,292,278,285,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,294,291,274,289,282,295,280],
[271,0,296,293,272,285,282,295,271],
[256,254,0,273,263,262,262,269,248],
[259,257,277,0,257,260,253,264,256],
[276,278,287,293,0,286,284,295,273],
[261,265,288,290,264,0,275,278,274],
[268,268,288,297,266,275,0,297,273],
[255,255,281,286,255,272,253,0,249],
[270,279,302,294,277,276,277,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,267,277,278,275,282,298,282],
[276,0,275,285,287,268,282,302,279],
[283,275,0,278,275,268,275,288,287],
[273,265,272,0,278,269,278,299,277],
[272,263,275,272,0,275,285,300,282],
[275,282,282,281,275,0,276,312,278],
[268,268,275,272,265,274,0,304,288],
[252,248,262,251,250,238,246,0,259],
[268,271,263,273,268,272,262,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,251,287,311,290,291,305,288],
[238,0,241,268,267,273,258,237,253],
[299,309,0,290,303,267,296,291,296],
[263,282,260,0,274,296,296,283,304],
[239,283,247,276,0,267,295,313,292],
[260,277,283,254,283,0,273,267,250],
[259,292,254,254,255,277,0,267,266],
[245,313,259,267,237,283,283,0,313],
[262,297,254,246,258,300,284,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,250,284,263,276,275,268,254],
[272,0,275,275,267,264,306,264,264],
[300,275,0,308,269,285,288,299,267],
[266,275,242,0,249,294,271,257,267],
[287,283,281,301,0,282,297,276,270],
[274,286,265,256,268,0,281,265,280],
[275,244,262,279,253,269,0,246,254],
[282,286,251,293,274,285,304,0,275],
[296,286,283,283,280,270,296,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,298,297,282,262,294,284,281],
[259,0,280,299,272,267,282,278,283],
[252,270,0,287,244,250,256,247,244],
[253,251,263,0,257,259,257,243,254],
[268,278,306,293,0,286,290,288,269],
[288,283,300,291,264,0,285,268,275],
[256,268,294,293,260,265,0,282,275],
[266,272,303,307,262,282,268,0,293],
[269,267,306,296,281,275,275,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,296,290,274,279,263,272,301],
[268,0,296,308,278,280,270,279,290],
[254,254,0,256,242,247,246,265,266],
[260,242,294,0,255,276,272,257,291],
[276,272,308,295,0,269,274,282,284],
[271,270,303,274,281,0,291,262,284],
[287,280,304,278,276,259,0,273,291],
[278,271,285,293,268,288,277,0,288],
[249,260,284,259,266,266,259,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,266,269,277,293,277,268,274],
[279,0,286,273,279,286,275,293,278],
[284,264,0,272,293,283,271,280,282],
[281,277,278,0,273,277,261,288,277],
[273,271,257,277,0,278,272,277,267],
[257,264,267,273,272,0,273,266,269],
[273,275,279,289,278,277,0,268,280],
[282,257,270,262,273,284,282,0,270],
[276,272,268,273,283,281,270,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,268,277,266,287,288,273,274],
[276,0,267,283,277,275,295,288,286],
[282,283,0,278,273,273,286,274,292],
[273,267,272,0,279,274,296,267,270],
[284,273,277,271,0,268,291,258,295],
[263,275,277,276,282,0,290,273,271],
[262,255,264,254,259,260,0,250,261],
[277,262,276,283,292,277,300,0,286],
[276,264,258,280,255,279,289,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,297,306,285,256,242,301,346],
[245,0,310,276,305,230,235,244,324],
[253,240,0,226,277,193,223,264,305],
[244,274,324,0,285,280,272,276,338],
[265,245,273,265,0,215,211,271,327],
[294,320,357,270,335,0,310,320,374],
[308,315,327,278,339,240,0,277,365],
[249,306,286,274,279,230,273,0,337],
[204,226,245,212,223,176,185,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,276,292,283,272,256,292,269],
[253,0,274,288,269,288,259,273,267],
[274,276,0,256,257,261,262,261,254],
[258,262,294,0,254,293,261,281,273],
[267,281,293,296,0,295,271,278,265],
[278,262,289,257,255,0,247,275,257],
[294,291,288,289,279,303,0,297,271],
[258,277,289,269,272,275,253,0,287],
[281,283,296,277,285,293,279,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,309,302,282,317,305,273,293],
[255,0,308,270,240,275,243,290,255],
[241,242,0,278,256,264,268,260,271],
[248,280,272,0,251,273,276,263,280],
[268,310,294,299,0,290,301,278,282],
[233,275,286,277,260,0,273,255,279],
[245,307,282,274,249,277,0,274,253],
[277,260,290,287,272,295,276,0,303],
[257,295,279,270,268,271,297,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,282,286,229,263,276,266,283],
[244,0,221,246,228,286,236,235,260],
[268,329,0,256,276,301,277,241,319],
[264,304,294,0,247,288,307,244,253],
[321,322,274,303,0,318,299,318,298],
[287,264,249,262,232,0,269,258,251],
[274,314,273,243,251,281,0,294,296],
[284,315,309,306,232,292,256,0,285],
[267,290,231,297,252,299,254,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,266,257,284,297,258,269,283],
[282,0,256,283,300,276,257,280,282],
[284,294,0,282,290,259,278,291,291],
[293,267,268,0,289,266,270,297,289],
[266,250,260,261,0,250,260,297,267],
[253,274,291,284,300,0,246,311,293],
[292,293,272,280,290,304,0,314,301],
[281,270,259,253,253,239,236,0,268],
[267,268,259,261,283,257,249,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,274,258,269,270,265,281,284],
[277,0,268,268,270,280,263,279,282],
[276,282,0,255,271,270,259,266,278],
[292,282,295,0,299,281,275,281,300],
[281,280,279,251,0,276,266,268,285],
[280,270,280,269,274,0,261,286,269],
[285,287,291,275,284,289,0,295,300],
[269,271,284,269,282,264,255,0,270],
[266,268,272,250,265,281,250,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,249,258,254,274,237,249,287],
[298,0,298,298,296,275,271,252,292],
[301,252,0,229,289,266,248,242,287],
[292,252,321,0,289,256,255,269,308],
[296,254,261,261,0,231,253,227,275],
[276,275,284,294,319,0,261,273,314],
[313,279,302,295,297,289,0,270,295],
[301,298,308,281,323,277,280,0,271],
[263,258,263,242,275,236,255,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,268,260,256,269,266,255,245],
[283,0,261,249,270,257,270,291,259],
[282,289,0,298,286,260,295,286,258],
[290,301,252,0,270,271,274,283,260],
[294,280,264,280,0,271,280,288,251],
[281,293,290,279,279,0,290,301,253],
[284,280,255,276,270,260,0,288,275],
[295,259,264,267,262,249,262,0,256],
[305,291,292,290,299,297,275,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,214,235,262,234,232,253,238],
[328,0,339,317,244,271,333,357,325],
[336,211,0,270,256,270,256,281,252],
[315,233,280,0,226,258,302,332,306],
[288,306,294,324,0,293,292,335,274],
[316,279,280,292,257,0,278,317,294],
[318,217,294,248,258,272,0,303,301],
[297,193,269,218,215,233,247,0,257],
[312,225,298,244,276,256,249,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,303,285,269,268,284,273,271],
[284,0,280,320,272,278,294,277,259],
[247,270,0,272,230,244,274,249,279],
[265,230,278,0,292,274,270,278,236],
[281,278,320,258,0,288,303,276,261],
[282,272,306,276,262,0,300,278,264],
[266,256,276,280,247,250,0,260,264],
[277,273,301,272,274,272,290,0,271],
[279,291,271,314,289,286,286,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,280,275,287,305,296,294,290],
[259,0,247,264,265,251,277,264,278],
[270,303,0,279,280,267,296,284,284],
[275,286,271,0,279,272,279,299,273],
[263,285,270,271,0,267,281,282,257],
[245,299,283,278,283,0,290,284,267],
[254,273,254,271,269,260,0,283,269],
[256,286,266,251,268,266,267,0,263],
[260,272,266,277,293,283,281,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,271,276,276,262,287,296,279],
[278,0,277,293,285,285,290,288,263],
[279,273,0,279,268,283,290,300,287],
[274,257,271,0,276,280,287,284,274],
[274,265,282,274,0,260,291,293,272],
[288,265,267,270,290,0,289,287,280],
[263,260,260,263,259,261,0,288,260],
[254,262,250,266,257,263,262,0,266],
[271,287,263,276,278,270,290,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,277,290,286,262,266,264,268],
[269,0,283,280,267,275,268,285,268],
[273,267,0,277,267,260,265,277,261],
[260,270,273,0,281,272,261,257,269],
[264,283,283,269,0,275,276,280,273],
[288,275,290,278,275,0,286,294,284],
[284,282,285,289,274,264,0,286,275],
[286,265,273,293,270,256,264,0,276],
[282,282,289,281,277,266,275,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,288,301,251,273,285,273,288],
[289,0,286,291,277,284,285,267,279],
[262,264,0,288,252,280,297,274,271],
[249,259,262,0,243,257,273,252,271],
[299,273,298,307,0,285,299,288,283],
[277,266,270,293,265,0,283,283,290],
[265,265,253,277,251,267,0,261,252],
[277,283,276,298,262,267,289,0,268],
[262,271,279,279,267,260,298,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,288,296,271,296,297,287,276],
[279,0,263,288,254,294,287,279,272],
[262,287,0,305,270,285,287,292,281],
[254,262,245,0,264,274,264,269,274],
[279,296,280,286,0,315,274,287,298],
[254,256,265,276,235,0,257,285,264],
[253,263,263,286,276,293,0,279,288],
[263,271,258,281,263,265,271,0,269],
[274,278,269,276,252,286,262,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,232,243,242,265,296,254,289],
[240,0,240,220,247,251,217,249,196],
[318,310,0,290,275,312,272,313,277],
[307,330,260,0,336,314,289,322,286],
[308,303,275,214,0,281,283,269,280],
[285,299,238,236,269,0,265,255,248],
[254,333,278,261,267,285,0,291,283],
[296,301,237,228,281,295,259,0,252],
[261,354,273,264,270,302,267,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,266,249,257,273,247,258,287],
[286,0,275,276,284,277,270,282,296],
[284,275,0,271,271,265,260,273,282],
[301,274,279,0,271,285,281,289,294],
[293,266,279,279,0,280,268,270,292],
[277,273,285,265,270,0,243,275,280],
[303,280,290,269,282,307,0,279,293],
[292,268,277,261,280,275,271,0,285],
[263,254,268,256,258,270,257,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,212,292,305,319,350,272,282],
[284,0,232,294,196,245,222,252,282],
[338,318,0,300,237,313,338,248,298],
[258,256,250,0,237,242,288,248,238],
[245,354,313,313,0,267,315,278,272],
[231,305,237,308,283,0,283,249,224],
[200,328,212,262,235,267,0,219,233],
[278,298,302,302,272,301,331,0,288],
[268,268,252,312,278,326,317,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,224,223,236,282,286,261,251],
[323,0,311,251,275,315,289,311,273],
[326,239,0,279,334,331,279,244,305],
[327,299,271,0,283,320,320,256,270],
[314,275,216,267,0,380,280,244,337],
[268,235,219,230,170,0,227,194,202],
[264,261,271,230,270,323,0,241,279],
[289,239,306,294,306,356,309,0,307],
[299,277,245,280,213,348,271,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,279,283,300,293,280,270,272],
[259,0,254,268,325,262,272,263,276],
[271,296,0,271,310,304,245,277,286],
[267,282,279,0,321,288,275,296,272],
[250,225,240,229,0,245,241,250,237],
[257,288,246,262,305,0,248,273,256],
[270,278,305,275,309,302,0,267,277],
[280,287,273,254,300,277,283,0,249],
[278,274,264,278,313,294,273,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,286,295,290,296,284,270,308],
[244,0,274,275,259,265,259,254,279],
[264,276,0,279,275,268,262,244,271],
[255,275,271,0,267,278,254,251,279],
[260,291,275,283,0,267,263,256,288],
[254,285,282,272,283,0,249,267,291],
[266,291,288,296,287,301,0,275,305],
[280,296,306,299,294,283,275,0,295],
[242,271,279,271,262,259,245,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,280,291,282,271,291,276,290],
[263,0,249,267,258,259,253,257,279],
[270,301,0,276,297,260,278,280,283],
[259,283,274,0,281,268,261,254,280],
[268,292,253,269,0,262,260,265,274],
[279,291,290,282,288,0,275,279,293],
[259,297,272,289,290,275,0,267,289],
[274,293,270,296,285,271,283,0,299],
[260,271,267,270,276,257,261,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,265,283,294,269,272,269,260],
[281,0,268,272,277,268,261,262,264],
[285,282,0,284,283,284,284,265,274],
[267,278,266,0,291,265,252,266,273],
[256,273,267,259,0,260,241,270,256],
[281,282,266,285,290,0,275,273,264],
[278,289,266,298,309,275,0,262,280],
[281,288,285,284,280,277,288,0,273],
[290,286,276,277,294,286,270,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,282,292,258,275,263,280,285],
[273,0,273,257,277,271,248,270,293],
[268,277,0,280,277,266,275,255,295],
[258,293,270,0,282,280,259,297,286],
[292,273,273,268,0,277,273,300,275],
[275,279,284,270,273,0,266,287,289],
[287,302,275,291,277,284,0,289,277],
[270,280,295,253,250,263,261,0,260],
[265,257,255,264,275,261,273,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,255,286,253,258,290,303,264],
[281,0,251,293,281,267,293,313,285],
[295,299,0,306,292,267,291,317,285],
[264,257,244,0,270,262,276,302,259],
[297,269,258,280,0,277,303,327,266],
[292,283,283,288,273,0,300,334,264],
[260,257,259,274,247,250,0,308,253],
[247,237,233,248,223,216,242,0,220],
[286,265,265,291,284,286,297,330,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,329,299,276,309,275,294,257],
[230,0,224,196,219,218,229,229,266],
[221,326,0,301,298,297,268,284,238],
[251,354,249,0,242,224,215,271,223],
[274,331,252,308,0,262,288,252,275],
[241,332,253,326,288,0,256,296,289],
[275,321,282,335,262,294,0,295,305],
[256,321,266,279,298,254,255,0,250],
[293,284,312,327,275,261,245,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,401,271,292,283,245,230,312],
[240,0,231,198,258,300,187,190,236],
[149,319,0,182,197,189,260,221,257],
[279,352,368,0,307,342,292,233,255],
[258,292,353,243,0,280,222,244,356],
[267,250,361,208,270,0,204,201,227],
[305,363,290,258,328,346,0,284,239],
[320,360,329,317,306,349,266,0,287],
[238,314,293,295,194,323,311,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,277,279,284,281,288,295,286],
[279,0,267,268,278,267,285,277,267],
[273,283,0,282,255,277,281,290,264],
[271,282,268,0,255,274,277,273,261],
[266,272,295,295,0,278,267,293,296],
[269,283,273,276,272,0,289,274,282],
[262,265,269,273,283,261,0,265,276],
[255,273,260,277,257,276,285,0,267],
[264,283,286,289,254,268,274,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,289,290,275,285,292,285,279],
[242,0,275,271,263,265,273,270,259],
[261,275,0,271,273,276,276,258,266],
[260,279,279,0,263,268,271,247,267],
[275,287,277,287,0,298,276,271,282],
[265,285,274,282,252,0,294,278,258],
[258,277,274,279,274,256,0,274,270],
[265,280,292,303,279,272,276,0,276],
[271,291,284,283,268,292,280,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,284,237,253,266,255,258,248],
[290,0,280,271,290,295,275,284,275],
[266,270,0,272,287,262,245,269,268],
[313,279,278,0,319,306,276,316,271],
[297,260,263,231,0,285,245,269,253],
[284,255,288,244,265,0,266,263,238],
[295,275,305,274,305,284,0,281,283],
[292,266,281,234,281,287,269,0,258],
[302,275,282,279,297,312,267,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,278,234,272,247,246,255,234],
[281,0,261,233,276,243,233,264,211],
[272,289,0,240,277,253,252,284,238],
[316,317,310,0,311,293,278,294,264],
[278,274,273,239,0,288,248,268,276],
[303,307,297,257,262,0,270,247,247],
[304,317,298,272,302,280,0,281,258],
[295,286,266,256,282,303,269,0,243],
[316,339,312,286,274,303,292,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,287,282,273,277,290,316,286],
[283,0,276,232,236,277,278,285,256],
[263,274,0,267,265,270,272,301,249],
[268,318,283,0,279,304,302,305,280],
[277,314,285,271,0,300,288,292,279],
[273,273,280,246,250,0,268,280,276],
[260,272,278,248,262,282,0,286,266],
[234,265,249,245,258,270,264,0,253],
[264,294,301,270,271,274,284,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,307,283,281,252,299,284,291],
[282,0,266,267,271,264,307,243,281],
[243,284,0,281,308,268,291,273,283],
[267,283,269,0,268,247,312,249,288],
[269,279,242,282,0,258,281,260,300],
[298,286,282,303,292,0,316,257,266],
[251,243,259,238,269,234,0,229,245],
[266,307,277,301,290,293,321,0,305],
[259,269,267,262,250,284,305,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,270,261,255,280,252,247,241],
[280,0,266,266,268,262,251,255,252],
[280,284,0,281,274,275,277,274,267],
[289,284,269,0,285,297,278,272,285],
[295,282,276,265,0,285,269,262,278],
[270,288,275,253,265,0,266,266,254],
[298,299,273,272,281,284,0,274,273],
[303,295,276,278,288,284,276,0,266],
[309,298,283,265,272,296,277,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,217,293,282,266,214,310,265],
[298,0,298,296,330,187,311,328,288],
[333,252,0,347,308,260,312,289,295],
[257,254,203,0,331,281,242,288,273],
[268,220,242,219,0,259,259,228,228],
[284,363,290,269,291,0,279,287,290],
[336,239,238,308,291,271,0,257,293],
[240,222,261,262,322,263,293,0,264],
[285,262,255,277,322,260,257,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,288,263,288,283,277,277,282],
[275,0,274,276,290,289,266,278,274],
[262,276,0,262,273,294,269,269,286],
[287,274,288,0,273,291,265,259,274],
[262,260,277,277,0,287,266,259,281],
[267,261,256,259,263,0,265,257,267],
[273,284,281,285,284,285,0,275,272],
[273,272,281,291,291,293,275,0,278],
[268,276,264,276,269,283,278,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,281,277,195,226,231,271,212],
[309,0,269,295,244,240,248,310,244],
[269,281,0,302,266,292,302,354,229],
[273,255,248,0,208,209,274,341,219],
[355,306,284,342,0,284,309,347,257],
[324,310,258,341,266,0,266,336,264],
[319,302,248,276,241,284,0,331,293],
[279,240,196,209,203,214,219,0,182],
[338,306,321,331,293,286,257,368,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,279,283,296,274,288,273,282],
[270,0,262,296,274,266,273,260,266],
[271,288,0,321,287,274,288,301,297],
[267,254,229,0,243,243,246,243,255],
[254,276,263,307,0,262,266,291,275],
[276,284,276,307,288,0,286,275,292],
[262,277,262,304,284,264,0,249,269],
[277,290,249,307,259,275,301,0,271],
[268,284,253,295,275,258,281,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,279,266,272,269,294,278,271],
[281,0,280,262,270,269,273,267,262],
[271,270,0,273,261,284,301,265,284],
[284,288,277,0,276,286,287,285,267],
[278,280,289,274,0,278,291,276,252],
[281,281,266,264,272,0,298,276,276],
[256,277,249,263,259,252,0,256,257],
[272,283,285,265,274,274,294,0,249],
[279,288,266,283,298,274,293,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,289,248,283,281,282,266,297],
[269,0,262,266,275,260,272,247,286],
[261,288,0,231,279,270,252,264,261],
[302,284,319,0,295,284,287,274,276],
[267,275,271,255,0,279,265,244,295],
[269,290,280,266,271,0,277,275,285],
[268,278,298,263,285,273,0,273,296],
[284,303,286,276,306,275,277,0,298],
[253,264,289,274,255,265,254,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,314,298,383,363,314,273,313],
[227,0,308,253,331,278,294,311,297],
[236,242,0,241,253,262,242,295,276],
[252,297,309,0,377,321,274,324,286],
[167,219,297,173,0,211,267,266,271],
[187,272,288,229,339,0,308,286,267],
[236,256,308,276,283,242,0,280,280],
[277,239,255,226,284,264,270,0,235],
[237,253,274,264,279,283,270,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,269,284,246,295,271,276,264],
[262,0,297,275,285,266,259,256,262],
[281,253,0,292,256,319,260,296,270],
[266,275,258,0,255,289,271,291,267],
[304,265,294,295,0,300,280,274,269],
[255,284,231,261,250,0,240,244,245],
[279,291,290,279,270,310,0,271,275],
[274,294,254,259,276,306,279,0,236],
[286,288,280,283,281,305,275,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,273,296,284,276,295,275,258],
[286,0,272,289,262,295,280,264,256],
[277,278,0,277,274,280,298,273,276],
[254,261,273,0,273,281,264,262,268],
[266,288,276,277,0,270,285,266,266],
[274,255,270,269,280,0,280,264,281],
[255,270,252,286,265,270,0,272,265],
[275,286,277,288,284,286,278,0,266],
[292,294,274,282,284,269,285,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,294,278,252,279,278,270,267],
[289,0,275,292,285,272,297,288,264],
[256,275,0,277,260,262,266,273,266],
[272,258,273,0,234,259,259,260,249],
[298,265,290,316,0,283,292,279,263],
[271,278,288,291,267,0,279,286,276],
[272,253,284,291,258,271,0,264,275],
[280,262,277,290,271,264,286,0,296],
[283,286,284,301,287,274,275,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,268,259,274,274,274,260,278],
[277,0,281,263,266,259,280,261,266],
[282,269,0,264,271,270,272,264,267],
[291,287,286,0,274,292,297,282,292],
[276,284,279,276,0,284,277,270,279],
[276,291,280,258,266,0,287,276,285],
[276,270,278,253,273,263,0,268,267],
[290,289,286,268,280,274,282,0,292],
[272,284,283,258,271,265,283,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,283,270,305,281,256,287,291],
[259,0,275,270,299,276,280,269,285],
[267,275,0,279,285,262,274,275,287],
[280,280,271,0,290,277,279,302,273],
[245,251,265,260,0,260,254,269,278],
[269,274,288,273,290,0,267,279,288],
[294,270,276,271,296,283,0,282,287],
[263,281,275,248,281,271,268,0,265],
[259,265,263,277,272,262,263,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,304,277,263,262,281,282,302],
[275,0,277,295,252,270,284,258,295],
[246,273,0,269,284,263,251,257,291],
[273,255,281,0,275,241,255,263,286],
[287,298,266,275,0,282,271,287,297],
[288,280,287,309,268,0,280,282,291],
[269,266,299,295,279,270,0,274,281],
[268,292,293,287,263,268,276,0,293],
[248,255,259,264,253,259,269,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,285,273,251,277,248,261,261],
[302,0,303,307,280,266,278,290,269],
[265,247,0,256,275,254,232,272,236],
[277,243,294,0,241,272,253,267,254],
[299,270,275,309,0,289,239,270,270],
[273,284,296,278,261,0,268,277,268],
[302,272,318,297,311,282,0,293,286],
[289,260,278,283,280,273,257,0,260],
[289,281,314,296,280,282,264,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,275,313,285,276,269,272,262],
[262,0,266,281,292,266,271,301,262],
[275,284,0,275,262,283,262,326,258],
[237,269,275,0,262,244,283,303,288],
[265,258,288,288,0,250,264,321,281],
[274,284,267,306,300,0,274,334,268],
[281,279,288,267,286,276,0,296,286],
[278,249,224,247,229,216,254,0,244],
[288,288,292,262,269,282,264,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,291,285,265,268,297,274,302],
[280,0,301,277,262,281,297,272,287],
[259,249,0,279,274,255,281,266,273],
[265,273,271,0,253,248,272,265,272],
[285,288,276,297,0,288,304,267,293],
[282,269,295,302,262,0,293,278,290],
[253,253,269,278,246,257,0,243,260],
[276,278,284,285,283,272,307,0,293],
[248,263,277,278,257,260,290,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,252,244,218,271,259,271,261],
[291,0,276,239,258,294,265,293,221],
[298,274,0,265,279,291,300,297,279],
[306,311,285,0,266,270,294,316,250],
[332,292,271,284,0,299,284,308,280],
[279,256,259,280,251,0,277,253,227],
[291,285,250,256,266,273,0,272,239],
[279,257,253,234,242,297,278,0,259],
[289,329,271,300,270,323,311,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,267,268,263,271,275,277,260],
[294,0,259,271,275,279,276,276,263],
[283,291,0,275,281,265,290,268,270],
[282,279,275,0,272,275,292,279,266],
[287,275,269,278,0,267,268,266,268],
[279,271,285,275,283,0,272,280,259],
[275,274,260,258,282,278,0,282,259],
[273,274,282,271,284,270,268,0,275],
[290,287,280,284,282,291,291,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,268,293,285,297,271,264,284],
[267,0,266,290,287,299,297,278,290],
[282,284,0,272,280,287,271,288,286],
[257,260,278,0,290,296,270,268,280],
[265,263,270,260,0,287,262,269,268],
[253,251,263,254,263,0,263,273,257],
[279,253,279,280,288,287,0,276,271],
[286,272,262,282,281,277,274,0,269],
[266,260,264,270,282,293,279,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,237,193,343,260,329,313,297],
[323,0,258,290,408,275,281,238,274],
[313,292,0,228,298,301,349,288,280],
[357,260,322,0,333,226,388,237,334],
[207,142,252,217,0,165,237,180,163],
[290,275,249,324,385,0,367,258,353],
[221,269,201,162,313,183,0,224,192],
[237,312,262,313,370,292,326,0,268],
[253,276,270,216,387,197,358,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,282,275,267,275,293,297,269],
[274,0,280,320,260,277,272,275,281],
[268,270,0,280,305,260,291,326,272],
[275,230,270,0,258,255,290,255,255],
[283,290,245,292,0,290,323,282,286],
[275,273,290,295,260,0,294,273,301],
[257,278,259,260,227,256,0,265,263],
[253,275,224,295,268,277,285,0,283],
[281,269,278,295,264,249,287,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,290,261,243,263,270,253,275],
[277,0,284,280,265,250,246,258,251],
[260,266,0,252,263,229,266,245,250],
[289,270,298,0,261,262,283,294,277],
[307,285,287,289,0,272,251,266,271],
[287,300,321,288,278,0,262,259,260],
[280,304,284,267,299,288,0,266,279],
[297,292,305,256,284,291,284,0,277],
[275,299,300,273,279,290,271,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,279,265,275,269,260,280,260],
[272,0,274,254,253,261,252,271,280],
[271,276,0,269,263,266,274,267,269],
[285,296,281,0,269,289,286,280,293],
[275,297,287,281,0,278,283,286,296],
[281,289,284,261,272,0,279,284,294],
[290,298,276,264,267,271,0,286,271],
[270,279,283,270,264,266,264,0,286],
[290,270,281,257,254,256,279,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,279,285,259,273,289,255,254],
[283,0,297,288,243,281,282,308,308],
[271,253,0,284,228,258,249,273,268],
[265,262,266,0,250,229,254,264,259],
[291,307,322,300,0,254,297,291,300],
[277,269,292,321,296,0,302,288,277],
[261,268,301,296,253,248,0,252,249],
[295,242,277,286,259,262,298,0,247],
[296,242,282,291,250,273,301,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,283,278,271,250,261,260,269],
[294,0,276,290,269,258,277,250,279],
[267,274,0,271,279,258,279,285,274],
[272,260,279,0,273,264,276,279,267],
[279,281,271,277,0,262,290,253,261],
[300,292,292,286,288,0,292,280,254],
[289,273,271,274,260,258,0,266,262],
[290,300,265,271,297,270,284,0,287],
[281,271,276,283,289,296,288,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,295,303,262,320,292,290,279],
[250,0,288,278,210,283,270,282,240],
[255,262,0,263,272,269,274,274,258],
[247,272,287,0,237,268,293,295,245],
[288,340,278,313,0,320,270,297,302],
[230,267,281,282,230,0,237,282,273],
[258,280,276,257,280,313,0,311,282],
[260,268,276,255,253,268,239,0,233],
[271,310,292,305,248,277,268,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,284,280,276,275,279,257,289],
[290,0,287,279,254,272,290,269,275],
[266,263,0,263,255,261,290,254,269],
[270,271,287,0,269,255,304,276,310],
[274,296,295,281,0,258,299,270,294],
[275,278,289,295,292,0,290,270,300],
[271,260,260,246,251,260,0,226,294],
[293,281,296,274,280,280,324,0,304],
[261,275,281,240,256,250,256,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,287,300,274,294,266,287,247],
[275,0,291,258,262,271,251,262,253],
[263,259,0,271,278,296,247,271,264],
[250,292,279,0,252,286,258,271,243],
[276,288,272,298,0,289,279,279,280],
[256,279,254,264,261,0,265,253,250],
[284,299,303,292,271,285,0,295,276],
[263,288,279,279,271,297,255,0,240],
[303,297,286,307,270,300,274,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,271,279,280,274,279,288,280],
[250,0,259,281,252,258,255,275,247],
[279,291,0,286,283,275,269,281,261],
[271,269,264,0,268,275,270,273,271],
[270,298,267,282,0,258,266,281,258],
[276,292,275,275,292,0,272,294,273],
[271,295,281,280,284,278,0,284,269],
[262,275,269,277,269,256,266,0,270],
[270,303,289,279,292,277,281,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,281,283,300,271,272,304,277],
[262,0,294,295,290,275,279,282,278],
[269,256,0,264,272,249,270,271,265],
[267,255,286,0,277,276,281,273,264],
[250,260,278,273,0,260,268,273,265],
[279,275,301,274,290,0,274,298,271],
[278,271,280,269,282,276,0,272,278],
[246,268,279,277,277,252,278,0,261],
[273,272,285,286,285,279,272,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,192,262,209,245,275,178,230],
[268,0,202,181,229,266,266,282,186],
[358,348,0,253,240,413,275,265,158],
[288,369,297,0,302,261,283,239,301],
[341,321,310,248,0,344,222,282,230],
[305,284,137,289,206,0,256,254,187],
[275,284,275,267,328,294,0,153,232],
[372,268,285,311,268,296,397,0,302],
[320,364,392,249,320,363,318,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,279,278,278,286,283,264,285],
[252,0,255,278,250,269,275,280,274],
[271,295,0,276,254,277,276,255,280],
[272,272,274,0,263,282,280,273,285],
[272,300,296,287,0,278,272,282,278],
[264,281,273,268,272,0,274,279,279],
[267,275,274,270,278,276,0,284,287],
[286,270,295,277,268,271,266,0,277],
[265,276,270,265,272,271,263,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,303,277,273,284,283,283,275],
[249,0,311,273,265,295,290,253,295],
[247,239,0,265,252,279,264,252,260],
[273,277,285,0,294,269,277,257,287],
[277,285,298,256,0,302,263,256,281],
[266,255,271,281,248,0,285,268,265],
[267,260,286,273,287,265,0,242,275],
[267,297,298,293,294,282,308,0,295],
[275,255,290,263,269,285,275,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,218,308,270,223,272,228,230],
[323,0,245,288,268,268,243,268,278],
[332,305,0,360,340,299,263,280,284],
[242,262,190,0,236,227,213,221,226],
[280,282,210,314,0,244,236,212,237],
[327,282,251,323,306,0,286,268,297],
[278,307,287,337,314,264,0,265,277],
[322,282,270,329,338,282,285,0,282],
[320,272,266,324,313,253,273,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,297,268,261,282,267,298,272],
[273,0,314,302,250,271,275,279,253],
[253,236,0,280,253,235,229,281,259],
[282,248,270,0,268,259,242,267,291],
[289,300,297,282,0,281,287,260,275],
[268,279,315,291,269,0,272,281,288],
[283,275,321,308,263,278,0,303,292],
[252,271,269,283,290,269,247,0,283],
[278,297,291,259,275,262,258,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,290,288,281,273,285,288,297],
[273,0,283,290,280,286,273,268,288],
[260,267,0,296,282,298,290,281,294],
[262,260,254,0,257,263,271,269,272],
[269,270,268,293,0,281,284,278,278],
[277,264,252,287,269,0,268,239,262],
[265,277,260,279,266,282,0,282,274],
[262,282,269,281,272,311,268,0,271],
[253,262,256,278,272,288,276,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,247,263,266,264,261,261,269],
[314,0,281,264,298,286,279,271,294],
[303,269,0,266,282,295,292,278,283],
[287,286,284,0,269,287,269,276,302],
[284,252,268,281,0,292,285,254,291],
[286,264,255,263,258,0,250,243,260],
[289,271,258,281,265,300,0,264,300],
[289,279,272,274,296,307,286,0,312],
[281,256,267,248,259,290,250,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,348,295,278,367,325,276,305],
[277,0,293,310,260,304,308,265,294],
[202,257,0,268,265,318,308,240,317],
[255,240,282,0,248,332,276,242,244],
[272,290,285,302,0,359,357,272,308],
[183,246,232,218,191,0,242,175,245],
[225,242,242,274,193,308,0,224,278],
[274,285,310,308,278,375,326,0,333],
[245,256,233,306,242,305,272,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,255,271,306,312,309,231,277],
[225,0,311,340,287,276,267,264,320],
[295,239,0,270,298,346,311,359,375],
[279,210,280,0,335,284,298,311,317],
[244,263,252,215,0,248,265,290,265],
[238,274,204,266,302,0,302,203,254],
[241,283,239,252,285,248,0,211,243],
[319,286,191,239,260,347,339,0,289],
[273,230,175,233,285,296,307,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,287,283,306,300,279,327,332],
[302,0,279,257,280,244,268,310,297],
[263,271,0,313,325,306,276,315,315],
[267,293,237,0,284,274,259,330,298],
[244,270,225,266,0,265,229,311,283],
[250,306,244,276,285,0,233,281,273],
[271,282,274,291,321,317,0,310,336],
[223,240,235,220,239,269,240,0,253],
[218,253,235,252,267,277,214,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,272,266,277,271,281,275,297],
[255,0,286,281,265,294,262,295,275],
[278,264,0,299,279,296,268,290,291],
[284,269,251,0,253,295,269,256,271],
[273,285,271,297,0,314,241,290,249],
[279,256,254,255,236,0,233,250,274],
[269,288,282,281,309,317,0,300,280],
[275,255,260,294,260,300,250,0,275],
[253,275,259,279,301,276,270,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,274,270,271,276,283,261,263],
[270,0,260,269,246,256,270,255,250],
[276,290,0,287,277,262,284,272,261],
[280,281,263,0,291,276,291,276,261],
[279,304,273,259,0,284,287,285,270],
[274,294,288,274,266,0,285,274,266],
[267,280,266,259,263,265,0,263,260],
[289,295,278,274,265,276,287,0,280],
[287,300,289,289,280,284,290,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,295,271,267,265,265,303,257],
[308,0,312,283,275,306,286,303,278],
[255,238,0,265,259,262,235,269,258],
[279,267,285,0,268,279,284,290,269],
[283,275,291,282,0,284,262,297,262],
[285,244,288,271,266,0,274,296,273],
[285,264,315,266,288,276,0,296,285],
[247,247,281,260,253,254,254,0,262],
[293,272,292,281,288,277,265,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,248,240,270,217,248,248,241],
[294,0,234,270,225,234,219,270,265],
[302,316,0,257,272,292,292,299,282],
[310,280,293,0,293,312,265,299,316],
[280,325,278,257,0,268,286,329,275],
[333,316,258,238,282,0,270,279,284],
[302,331,258,285,264,280,0,312,284],
[302,280,251,251,221,271,238,0,281],
[309,285,268,234,275,266,266,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,259,285,223,281,275,261,261],
[282,0,278,281,247,250,288,240,263],
[291,272,0,287,236,274,264,234,233],
[265,269,263,0,244,255,303,251,253],
[327,303,314,306,0,282,330,296,258],
[269,300,276,295,268,0,289,239,283],
[275,262,286,247,220,261,0,254,249],
[289,310,316,299,254,311,296,0,284],
[289,287,317,297,292,267,301,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,267,268,296,285,278,280,275],
[264,0,266,276,272,279,280,283,270],
[283,284,0,270,303,292,280,300,281],
[282,274,280,0,287,290,282,287,287],
[254,278,247,263,0,271,269,267,267],
[265,271,258,260,279,0,266,278,277],
[272,270,270,268,281,284,0,280,273],
[270,267,250,263,283,272,270,0,256],
[275,280,269,263,283,273,277,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,279,277,333,235,296,227,243],
[255,0,259,267,302,222,276,275,290],
[271,291,0,309,290,244,293,265,230],
[273,283,241,0,296,207,289,244,240],
[217,248,260,254,0,207,289,253,228],
[315,328,306,343,343,0,298,273,259],
[254,274,257,261,261,252,0,214,234],
[323,275,285,306,297,277,336,0,240],
[307,260,320,310,322,291,316,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,282,283,268,275,277,289,241],
[247,0,243,264,250,245,270,243,238],
[268,307,0,284,270,285,284,272,264],
[267,286,266,0,266,262,268,283,244],
[282,300,280,284,0,257,271,264,237],
[275,305,265,288,293,0,299,297,287],
[273,280,266,282,279,251,0,256,265],
[261,307,278,267,286,253,294,0,263],
[309,312,286,306,313,263,285,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,249,266,268,272,264,279,282],
[263,0,277,279,263,286,281,273,277],
[301,273,0,273,283,293,272,278,296],
[284,271,277,0,278,280,266,276,282],
[282,287,267,272,0,282,270,276,289],
[278,264,257,270,268,0,261,268,288],
[286,269,278,284,280,289,0,277,289],
[271,277,272,274,274,282,273,0,290],
[268,273,254,268,261,262,261,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,266,265,273,247,267,271,252],
[296,0,271,309,296,267,306,331,301],
[284,279,0,275,277,283,294,283,287],
[285,241,275,0,273,251,261,259,237],
[277,254,273,277,0,269,299,295,272],
[303,283,267,299,281,0,309,301,257],
[283,244,256,289,251,241,0,262,240],
[279,219,267,291,255,249,288,0,213],
[298,249,263,313,278,293,310,337,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,240,258,243,284,255,235,258],
[277,0,209,249,232,310,290,254,256],
[310,341,0,310,275,307,348,282,263],
[292,301,240,0,263,250,280,264,284],
[307,318,275,287,0,289,312,282,267],
[266,240,243,300,261,0,259,286,248],
[295,260,202,270,238,291,0,239,264],
[315,296,268,286,268,264,311,0,220],
[292,294,287,266,283,302,286,330,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,275,291,299,280,276,269,275],
[248,0,233,263,296,280,261,250,271],
[275,317,0,299,300,290,280,285,294],
[259,287,251,0,297,273,257,270,280],
[251,254,250,253,0,262,235,254,266],
[270,270,260,277,288,0,259,279,268],
[274,289,270,293,315,291,0,284,294],
[281,300,265,280,296,271,266,0,285],
[275,279,256,270,284,282,256,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,251,252,282,265,286,268,290],
[294,0,299,279,271,258,279,318,265],
[299,251,0,272,264,263,283,283,264],
[298,271,278,0,280,270,283,265,310],
[268,279,286,270,0,291,307,306,270],
[285,292,287,280,259,0,298,277,262],
[264,271,267,267,243,252,0,265,255],
[282,232,267,285,244,273,285,0,258],
[260,285,286,240,280,288,295,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,290,293,286,281,275,270,257],
[272,0,290,279,291,261,283,276,291],
[260,260,0,280,263,274,262,248,262],
[257,271,270,0,285,274,272,285,275],
[264,259,287,265,0,274,277,253,282],
[269,289,276,276,276,0,284,277,276],
[275,267,288,278,273,266,0,274,280],
[280,274,302,265,297,273,276,0,283],
[293,259,288,275,268,274,270,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,267,259,263,262,268,268,266],
[273,0,260,249,275,263,266,272,263],
[283,290,0,275,291,286,288,278,276],
[291,301,275,0,285,285,280,275,279],
[287,275,259,265,0,257,274,266,265],
[288,287,264,265,293,0,286,262,264],
[282,284,262,270,276,264,0,275,263],
[282,278,272,275,284,288,275,0,261],
[284,287,274,271,285,286,287,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,266,285,274,281,273,290,276],
[291,0,263,289,287,273,284,306,280],
[284,287,0,282,285,279,275,286,285],
[265,261,268,0,275,276,280,290,277],
[276,263,265,275,0,280,263,273,272],
[269,277,271,274,270,0,260,282,280],
[277,266,275,270,287,290,0,291,285],
[260,244,264,260,277,268,259,0,267],
[274,270,265,273,278,270,265,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,239,334,195,241,240,240,247],
[264,0,238,299,284,251,253,261,266],
[311,312,0,428,276,271,308,307,260],
[216,251,122,0,208,239,183,155,167],
[355,266,274,342,0,256,252,303,289],
[309,299,279,311,294,0,262,274,248],
[310,297,242,367,298,288,0,234,235],
[310,289,243,395,247,276,316,0,301],
[303,284,290,383,261,302,315,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,288,283,289,280,267,285,286],
[275,0,272,271,275,280,254,274,268],
[262,278,0,263,263,268,262,274,276],
[267,279,287,0,282,269,261,274,271],
[261,275,287,268,0,269,270,284,282],
[270,270,282,281,281,0,279,274,278],
[283,296,288,289,280,271,0,276,274],
[265,276,276,276,266,276,274,0,269],
[264,282,274,279,268,272,276,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,273,271,282,274,297,272,256],
[288,0,269,287,283,271,279,276,267],
[277,281,0,287,280,282,294,273,285],
[279,263,263,0,275,251,283,254,269],
[268,267,270,275,0,268,279,270,264],
[276,279,268,299,282,0,288,270,287],
[253,271,256,267,271,262,0,258,258],
[278,274,277,296,280,280,292,0,270],
[294,283,265,281,286,263,292,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,271,276,280,259,277,282,277],
[288,0,273,275,267,267,261,273,273],
[279,277,0,249,274,271,260,268,276],
[274,275,301,0,282,287,275,263,308],
[270,283,276,268,0,274,252,275,269],
[291,283,279,263,276,0,259,286,284],
[273,289,290,275,298,291,0,287,304],
[268,277,282,287,275,264,263,0,267],
[273,277,274,242,281,266,246,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,283,262,274,270,268,249,267],
[260,0,285,266,268,266,264,274,265],
[267,265,0,277,265,248,252,259,246],
[288,284,273,0,270,277,284,266,276],
[276,282,285,280,0,280,272,263,286],
[280,284,302,273,270,0,257,288,265],
[282,286,298,266,278,293,0,265,260],
[301,276,291,284,287,262,285,0,264],
[283,285,304,274,264,285,290,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,266,276,295,286,294,271,300],
[251,0,279,251,290,274,296,271,293],
[284,271,0,266,297,291,297,288,300],
[274,299,284,0,300,291,301,279,290],
[255,260,253,250,0,259,291,258,293],
[264,276,259,259,291,0,288,289,290],
[256,254,253,249,259,262,0,268,290],
[279,279,262,271,292,261,282,0,283],
[250,257,250,260,257,260,260,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,283,269,294,274,278,273,311],
[272,0,269,282,292,276,285,273,299],
[267,281,0,291,296,276,285,274,299],
[281,268,259,0,273,278,298,264,284],
[256,258,254,277,0,257,267,256,282],
[276,274,274,272,293,0,297,277,297],
[272,265,265,252,283,253,0,261,268],
[277,277,276,286,294,273,289,0,277],
[239,251,251,266,268,253,282,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,259,235,272,280,229,243,244],
[277,0,276,282,230,252,231,239,263],
[291,274,0,252,247,270,231,235,295],
[315,268,298,0,301,293,269,278,309],
[278,320,303,249,0,318,279,253,280],
[270,298,280,257,232,0,253,253,247],
[321,319,319,281,271,297,0,285,276],
[307,311,315,272,297,297,265,0,300],
[306,287,255,241,270,303,274,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,251,243,273,274,268,256,279],
[290,0,256,250,274,275,270,271,295],
[299,294,0,275,282,275,300,279,286],
[307,300,275,0,292,299,305,268,295],
[277,276,268,258,0,257,292,246,279],
[276,275,275,251,293,0,280,269,279],
[282,280,250,245,258,270,0,247,271],
[294,279,271,282,304,281,303,0,310],
[271,255,264,255,271,271,279,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,292,282,272,297,292,275,282],
[264,0,281,272,265,297,242,260,278],
[258,269,0,274,266,294,272,259,261],
[268,278,276,0,280,305,266,258,261],
[278,285,284,270,0,307,270,264,264],
[253,253,256,245,243,0,260,228,248],
[258,308,278,284,280,290,0,268,265],
[275,290,291,292,286,322,282,0,295],
[268,272,289,289,286,302,285,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,297,297,278,292,209,280,254],
[273,0,266,249,278,255,283,249,289],
[253,284,0,303,338,281,241,265,219],
[253,301,247,0,312,240,196,245,217],
[272,272,212,238,0,261,262,274,241],
[258,295,269,310,289,0,296,293,238],
[341,267,309,354,288,254,0,277,300],
[270,301,285,305,276,257,273,0,251],
[296,261,331,333,309,312,250,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,276,292,274,278,286,265,284],
[282,0,274,282,279,287,262,257,287],
[274,276,0,277,272,278,273,276,283],
[258,268,273,0,266,267,259,252,267],
[276,271,278,284,0,283,282,267,283],
[272,263,272,283,267,0,267,271,286],
[264,288,277,291,268,283,0,268,292],
[285,293,274,298,283,279,282,0,294],
[266,263,267,283,267,264,258,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,244,272,272,287,242,271,235],
[300,0,296,332,326,314,290,282,274],
[306,254,0,300,297,309,270,266,271],
[278,218,250,0,242,288,247,255,230],
[278,224,253,308,0,270,278,247,277],
[263,236,241,262,280,0,285,264,272],
[308,260,280,303,272,265,0,251,284],
[279,268,284,295,303,286,299,0,268],
[315,276,279,320,273,278,266,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,276,267,259,285,269,255,287],
[258,0,252,272,253,267,244,252,251],
[274,298,0,283,283,286,283,258,296],
[283,278,267,0,257,271,250,254,250],
[291,297,267,293,0,276,276,263,266],
[265,283,264,279,274,0,260,241,276],
[281,306,267,300,274,290,0,281,270],
[295,298,292,296,287,309,269,0,286],
[263,299,254,300,284,274,280,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,249,266,282,279,265,277,269],
[299,0,282,284,291,286,297,273,288],
[301,268,0,278,289,288,285,276,291],
[284,266,272,0,263,289,273,283,275],
[268,259,261,287,0,285,274,281,287],
[271,264,262,261,265,0,271,265,269],
[285,253,265,277,276,279,0,263,279],
[273,277,274,267,269,285,287,0,276],
[281,262,259,275,263,281,271,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,277,287,271,272,271,296,273],
[275,0,280,282,270,271,284,267,286],
[273,270,0,282,265,272,285,283,264],
[263,268,268,0,262,264,272,264,272],
[279,280,285,288,0,272,300,281,268],
[278,279,278,286,278,0,279,281,274],
[279,266,265,278,250,271,0,269,261],
[254,283,267,286,269,269,281,0,265],
[277,264,286,278,282,276,289,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,255,269,276,253,290,270,262],
[282,0,253,272,274,273,281,287,269],
[295,297,0,288,278,277,272,283,269],
[281,278,262,0,269,263,292,259,275],
[274,276,272,281,0,277,290,282,279],
[297,277,273,287,273,0,286,297,271],
[260,269,278,258,260,264,0,276,258],
[280,263,267,291,268,253,274,0,248],
[288,281,281,275,271,279,292,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,288,316,274,302,294,294,362],
[241,0,255,287,253,282,264,242,273],
[262,295,0,265,286,290,259,297,294],
[234,263,285,0,269,311,316,299,331],
[276,297,264,281,0,305,308,265,318],
[248,268,260,239,245,0,281,260,261],
[256,286,291,234,242,269,0,277,307],
[256,308,253,251,285,290,273,0,355],
[188,277,256,219,232,289,243,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,287,279,284,277,291,284,270],
[281,0,269,274,301,303,291,292,291],
[263,281,0,266,271,280,284,283,276],
[271,276,284,0,279,282,284,292,280],
[266,249,279,271,0,262,272,280,279],
[273,247,270,268,288,0,264,270,267],
[259,259,266,266,278,286,0,291,286],
[266,258,267,258,270,280,259,0,263],
[280,259,274,270,271,283,264,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,261,272,270,294,260,327,282],
[273,0,237,267,236,299,268,274,257],
[289,313,0,289,300,284,273,306,261],
[278,283,261,0,269,315,282,320,270],
[280,314,250,281,0,314,282,336,264],
[256,251,266,235,236,0,283,276,263],
[290,282,277,268,268,267,0,299,272],
[223,276,244,230,214,274,251,0,229],
[268,293,289,280,286,287,278,321,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,229,346,270,357,369,284,300],
[305,0,292,374,317,359,370,316,243],
[321,258,0,279,203,315,307,274,226],
[204,176,271,0,149,265,251,292,145],
[280,233,347,401,0,445,271,374,259],
[193,191,235,285,105,0,235,309,207],
[181,180,243,299,279,315,0,338,336],
[266,234,276,258,176,241,212,0,198],
[250,307,324,405,291,343,214,352,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,260,253,278,265,262,269,302],
[303,0,273,272,294,280,290,304,308],
[290,277,0,269,314,289,304,313,315],
[297,278,281,0,282,269,293,299,319],
[272,256,236,268,0,265,261,276,280],
[285,270,261,281,285,0,281,290,294],
[288,260,246,257,289,269,0,300,299],
[281,246,237,251,274,260,250,0,280],
[248,242,235,231,270,256,251,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,323,282,292,302,274,311,306],
[274,0,306,287,295,328,292,293,280],
[227,244,0,277,263,285,266,262,279],
[268,263,273,0,247,283,259,268,290],
[258,255,287,303,0,270,254,272,281],
[248,222,265,267,280,0,241,285,270],
[276,258,284,291,296,309,0,292,325],
[239,257,288,282,278,265,258,0,296],
[244,270,271,260,269,280,225,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,261,262,270,268,273,264,269],
[286,0,253,257,286,265,271,260,266],
[289,297,0,280,289,292,284,277,275],
[288,293,270,0,294,282,278,283,272],
[280,264,261,256,0,281,266,267,278],
[282,285,258,268,269,0,268,264,267],
[277,279,266,272,284,282,0,270,273],
[286,290,273,267,283,286,280,0,270],
[281,284,275,278,272,283,277,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,272,249,297,267,277,285,258],
[252,0,266,220,257,269,227,242,223],
[278,284,0,292,259,292,282,297,275],
[301,330,258,0,294,292,310,312,296],
[253,293,291,256,0,281,260,291,253],
[283,281,258,258,269,0,275,273,265],
[273,323,268,240,290,275,0,297,265],
[265,308,253,238,259,277,253,0,288],
[292,327,275,254,297,285,285,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,259,272,268,274,270,281,273],
[293,0,279,274,286,289,284,269,269],
[291,271,0,287,284,277,282,290,291],
[278,276,263,0,277,276,274,272,286],
[282,264,266,273,0,279,269,272,276],
[276,261,273,274,271,0,274,269,277],
[280,266,268,276,281,276,0,293,278],
[269,281,260,278,278,281,257,0,278],
[277,281,259,264,274,273,272,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,261,257,288,295,274,282,247],
[318,0,311,242,327,338,344,322,292],
[289,239,0,236,232,297,287,297,250],
[293,308,314,0,300,324,292,292,262],
[262,223,318,250,0,257,274,259,282],
[255,212,253,226,293,0,270,305,256],
[276,206,263,258,276,280,0,268,250],
[268,228,253,258,291,245,282,0,286],
[303,258,300,288,268,294,300,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,259,255,287,275,282,234,298],
[299,0,297,248,284,261,279,251,300],
[291,253,0,280,291,270,276,261,299],
[295,302,270,0,286,248,314,248,294],
[263,266,259,264,0,291,295,232,270],
[275,289,280,302,259,0,311,300,285],
[268,271,274,236,255,239,0,252,308],
[316,299,289,302,318,250,298,0,285],
[252,250,251,256,280,265,242,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,268,313,329,312,327,310,355],
[230,0,236,236,229,261,237,294,271],
[282,314,0,297,275,275,319,292,318],
[237,314,253,0,274,278,307,294,302],
[221,321,275,276,0,314,295,256,274],
[238,289,275,272,236,0,307,324,287],
[223,313,231,243,255,243,0,256,252],
[240,256,258,256,294,226,294,0,247],
[195,279,232,248,276,263,298,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,289,296,278,272,284,297,278],
[257,0,284,280,256,262,276,288,272],
[261,266,0,285,265,257,253,263,256],
[254,270,265,0,271,247,273,276,261],
[272,294,285,279,0,258,270,276,268],
[278,288,293,303,292,0,302,288,275],
[266,274,297,277,280,248,0,272,278],
[253,262,287,274,274,262,278,0,255],
[272,278,294,289,282,275,272,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,235,248,235,255,246,261,213],
[310,0,288,284,232,290,254,274,262],
[315,262,0,272,269,285,273,286,277],
[302,266,278,0,268,304,309,258,290],
[315,318,281,282,0,307,266,286,281],
[295,260,265,246,243,0,245,276,233],
[304,296,277,241,284,305,0,259,265],
[289,276,264,292,264,274,291,0,260],
[337,288,273,260,269,317,285,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,269,258,261,251,262,263,274],
[269,0,242,234,242,231,243,265,243],
[281,308,0,275,257,261,254,277,283],
[292,316,275,0,279,276,267,276,276],
[289,308,293,271,0,271,285,293,256],
[299,319,289,274,279,0,277,289,282],
[288,307,296,283,265,273,0,291,274],
[287,285,273,274,257,261,259,0,288],
[276,307,267,274,294,268,276,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,305,279,304,281,291,273,288],
[250,0,264,222,273,246,262,241,269],
[245,286,0,229,259,265,232,248,276],
[271,328,321,0,310,308,277,283,313],
[246,277,291,240,0,271,252,250,284],
[269,304,285,242,279,0,267,246,292],
[259,288,318,273,298,283,0,266,264],
[277,309,302,267,300,304,284,0,291],
[262,281,274,237,266,258,286,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,248,234,324,307,282,266,273],
[263,0,269,253,320,320,247,261,263],
[302,281,0,298,309,329,305,302,269],
[316,297,252,0,330,316,303,252,276],
[226,230,241,220,0,315,243,216,215],
[243,230,221,234,235,0,210,226,216],
[268,303,245,247,307,340,0,272,307],
[284,289,248,298,334,324,278,0,231],
[277,287,281,274,335,334,243,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,272,234,240,282,253,256,220],
[337,0,313,257,302,323,300,275,281],
[278,237,0,253,265,326,297,270,278],
[316,293,297,0,291,342,275,244,257],
[310,248,285,259,0,315,300,284,288],
[268,227,224,208,235,0,263,225,201],
[297,250,253,275,250,287,0,245,254],
[294,275,280,306,266,325,305,0,266],
[330,269,272,293,262,349,296,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,289,298,286,290,280,289,269],
[253,0,250,270,264,263,252,267,251],
[261,300,0,288,284,297,276,293,269],
[252,280,262,0,274,281,257,279,247],
[264,286,266,276,0,283,263,260,252],
[260,287,253,269,267,0,247,252,245],
[270,298,274,293,287,303,0,288,275],
[261,283,257,271,290,298,262,0,259],
[281,299,281,303,298,305,275,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,273,282,267,282,252,283,293],
[275,0,283,268,272,286,272,275,280],
[277,267,0,261,287,267,252,263,276],
[268,282,289,0,287,289,276,278,279],
[283,278,263,263,0,266,270,278,288],
[268,264,283,261,284,0,270,274,280],
[298,278,298,274,280,280,0,281,286],
[267,275,287,272,272,276,269,0,282],
[257,270,274,271,262,270,264,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,284,274,279,287,293,286,283],
[251,0,272,253,257,274,300,278,275],
[266,278,0,255,245,243,269,265,257],
[276,297,295,0,282,284,301,307,274],
[271,293,305,268,0,287,289,286,275],
[263,276,307,266,263,0,289,268,276],
[257,250,281,249,261,261,0,257,275],
[264,272,285,243,264,282,293,0,270],
[267,275,293,276,275,274,275,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,260,273,263,276,263,282,283],
[274,0,281,267,274,289,247,282,266],
[290,269,0,254,261,286,253,290,264],
[277,283,296,0,265,309,277,302,292],
[287,276,289,285,0,293,266,292,274],
[274,261,264,241,257,0,262,288,267],
[287,303,297,273,284,288,0,307,289],
[268,268,260,248,258,262,243,0,263],
[267,284,286,258,276,283,261,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,272,261,269,241,259,271,268],
[300,0,306,292,281,273,274,274,263],
[278,244,0,281,266,251,263,247,271],
[289,258,269,0,250,246,262,268,287],
[281,269,284,300,0,297,271,269,282],
[309,277,299,304,253,0,284,284,283],
[291,276,287,288,279,266,0,278,284],
[279,276,303,282,281,266,272,0,288],
[282,287,279,263,268,267,266,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,266,294,284,276,279,277,250],
[264,0,267,275,301,269,269,252,259],
[284,283,0,299,282,267,274,255,268],
[256,275,251,0,254,236,238,211,232],
[266,249,268,296,0,256,230,258,278],
[274,281,283,314,294,0,247,261,263],
[271,281,276,312,320,303,0,252,249],
[273,298,295,339,292,289,298,0,273],
[300,291,282,318,272,287,301,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,272,280,278,280,297,263,283],
[271,0,280,267,275,263,276,278,284],
[278,270,0,267,276,265,282,277,272],
[270,283,283,0,275,286,294,280,285],
[272,275,274,275,0,275,278,277,291],
[270,287,285,264,275,0,290,272,277],
[253,274,268,256,272,260,0,255,265],
[287,272,273,270,273,278,295,0,293],
[267,266,278,265,259,273,285,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,278,248,266,257,233,258,272],
[292,0,267,260,257,265,265,256,277],
[272,283,0,288,285,264,247,257,276],
[302,290,262,0,287,269,286,270,279],
[284,293,265,263,0,285,265,266,276],
[293,285,286,281,265,0,273,285,313],
[317,285,303,264,285,277,0,291,306],
[292,294,293,280,284,265,259,0,284],
[278,273,274,271,274,237,244,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,323,303,299,309,247,302,282],
[274,0,291,312,310,298,273,290,295],
[227,259,0,294,279,246,244,282,267],
[247,238,256,0,241,255,251,251,224],
[251,240,271,309,0,262,260,275,279],
[241,252,304,295,288,0,251,291,266],
[303,277,306,299,290,299,0,274,286],
[248,260,268,299,275,259,276,0,276],
[268,255,283,326,271,284,264,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,274,266,286,280,268,278,279],
[277,0,282,276,285,276,278,270,289],
[276,268,0,254,286,271,259,266,263],
[284,274,296,0,288,291,282,286,282],
[264,265,264,262,0,287,269,259,293],
[270,274,279,259,263,0,269,252,282],
[282,272,291,268,281,281,0,284,270],
[272,280,284,264,291,298,266,0,287],
[271,261,287,268,257,268,280,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,274,273,276,284,263,292,269],
[288,0,287,276,270,287,293,290,286],
[276,263,0,267,271,283,278,272,268],
[277,274,283,0,283,291,280,297,281],
[274,280,279,267,0,277,289,292,270],
[266,263,267,259,273,0,264,284,253],
[287,257,272,270,261,286,0,286,278],
[258,260,278,253,258,266,264,0,272],
[281,264,282,269,280,297,272,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,298,304,271,303,335,244,318],
[255,0,311,235,285,271,311,283,248],
[252,239,0,278,245,245,290,254,264],
[246,315,272,0,285,303,305,274,245],
[279,265,305,265,0,290,314,257,247],
[247,279,305,247,260,0,291,255,232],
[215,239,260,245,236,259,0,236,238],
[306,267,296,276,293,295,314,0,284],
[232,302,286,305,303,318,312,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,306,275,291,250,299,311,270],
[246,0,252,289,258,256,256,269,244],
[244,298,0,244,265,229,251,255,239],
[275,261,306,0,279,269,291,293,270],
[259,292,285,271,0,279,277,307,251],
[300,294,321,281,271,0,293,305,279],
[251,294,299,259,273,257,0,264,260],
[239,281,295,257,243,245,286,0,254],
[280,306,311,280,299,271,290,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,220,319,240,307,303,236,277],
[285,0,222,300,237,295,264,231,265],
[330,328,0,329,272,336,272,270,290],
[231,250,221,0,233,276,260,255,259],
[310,313,278,317,0,367,306,315,272],
[243,255,214,274,183,0,238,246,228],
[247,286,278,290,244,312,0,277,250],
[314,319,280,295,235,304,273,0,250],
[273,285,260,291,278,322,300,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,276,267,262,282,266,288,262],
[271,0,287,285,281,266,271,268,277],
[274,263,0,273,275,271,255,282,268],
[283,265,277,0,277,261,264,274,281],
[288,269,275,273,0,265,264,281,257],
[268,284,279,289,285,0,283,287,274],
[284,279,295,286,286,267,0,303,277],
[262,282,268,276,269,263,247,0,272],
[288,273,282,269,293,276,273,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,313,254,318,340,269,268,185],
[131,0,209,258,260,327,154,181,164],
[237,341,0,251,269,348,250,265,98],
[296,292,299,0,219,285,331,312,130],
[232,290,281,331,0,403,181,180,142],
[210,223,202,265,147,0,111,77,191],
[281,396,300,219,369,439,0,347,222],
[282,369,285,238,370,473,203,0,306],
[365,386,452,420,408,359,328,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,280,280,292,294,249,278,286],
[244,0,262,248,249,252,239,243,275],
[270,288,0,272,281,272,272,250,283],
[270,302,278,0,291,287,278,271,295],
[258,301,269,259,0,296,253,257,297],
[256,298,278,263,254,0,240,254,281],
[301,311,278,272,297,310,0,301,298],
[272,307,300,279,293,296,249,0,289],
[264,275,267,255,253,269,252,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,262,252,268,279,278,262,267],
[284,0,259,265,269,278,260,268,274],
[288,291,0,285,288,279,275,291,284],
[298,285,265,0,298,281,277,283,270],
[282,281,262,252,0,268,246,277,269],
[271,272,271,269,282,0,277,280,279],
[272,290,275,273,304,273,0,293,282],
[288,282,259,267,273,270,257,0,278],
[283,276,266,280,281,271,268,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,291,289,280,261,285,282,307],
[295,0,307,301,305,277,269,303,304],
[259,243,0,270,278,257,247,265,288],
[261,249,280,0,263,262,267,277,281],
[270,245,272,287,0,235,267,260,272],
[289,273,293,288,315,0,294,301,305],
[265,281,303,283,283,256,0,267,297],
[268,247,285,273,290,249,283,0,278],
[243,246,262,269,278,245,253,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,263,304,277,256,262,297,280],
[302,0,301,295,306,276,273,312,285],
[287,249,0,276,279,240,263,282,235],
[246,255,274,0,266,208,242,251,257],
[273,244,271,284,0,246,244,264,256],
[294,274,310,342,304,0,275,312,283],
[288,277,287,308,306,275,0,315,261],
[253,238,268,299,286,238,235,0,270],
[270,265,315,293,294,267,289,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,271,279,262,254,268,269,293],
[298,0,276,294,264,286,259,281,289],
[279,274,0,271,264,258,278,282,273],
[271,256,279,0,244,260,247,266,271],
[288,286,286,306,0,265,268,285,287],
[296,264,292,290,285,0,281,304,284],
[282,291,272,303,282,269,0,296,285],
[281,269,268,284,265,246,254,0,275],
[257,261,277,279,263,266,265,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,289,299,299,287,286,299,270],
[257,0,271,259,280,254,276,270,266],
[261,279,0,275,296,278,284,293,268],
[251,291,275,0,298,273,264,294,284],
[251,270,254,252,0,266,257,261,239],
[263,296,272,277,284,0,276,276,260],
[264,274,266,286,293,274,0,304,257],
[251,280,257,256,289,274,246,0,272],
[280,284,282,266,311,290,293,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,250,227,269,263,268,255,273],
[281,0,275,260,291,269,284,269,286],
[300,275,0,266,295,291,279,282,285],
[323,290,284,0,301,283,282,271,304],
[281,259,255,249,0,244,263,241,283],
[287,281,259,267,306,0,274,279,284],
[282,266,271,268,287,276,0,257,289],
[295,281,268,279,309,271,293,0,299],
[277,264,265,246,267,266,261,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,284,281,272,284,272,259,276],
[260,0,282,274,256,263,266,274,279],
[266,268,0,272,263,271,266,258,274],
[269,276,278,0,280,274,279,264,284],
[278,294,287,270,0,275,281,287,297],
[266,287,279,276,275,0,280,267,284],
[278,284,284,271,269,270,0,275,280],
[291,276,292,286,263,283,275,0,284],
[274,271,276,266,253,266,270,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,285,318,283,282,293,294,268],
[260,0,276,286,244,277,289,282,263],
[265,274,0,305,270,286,290,280,274],
[232,264,245,0,250,266,261,270,244],
[267,306,280,300,0,295,291,288,268],
[268,273,264,284,255,0,279,277,275],
[257,261,260,289,259,271,0,265,243],
[256,268,270,280,262,273,285,0,269],
[282,287,276,306,282,275,307,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,309,279,275,279,279,318,285],
[261,0,281,290,259,306,265,316,285],
[241,269,0,293,262,255,250,290,253],
[271,260,257,0,270,245,262,292,282],
[275,291,288,280,0,293,276,274,295],
[271,244,295,305,257,0,265,321,280],
[271,285,300,288,274,285,0,299,287],
[232,234,260,258,276,229,251,0,263],
[265,265,297,268,255,270,263,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,266,278,268,258,275,273,274],
[293,0,268,270,290,284,275,272,296],
[284,282,0,278,277,260,274,262,272],
[272,280,272,0,282,267,270,259,295],
[282,260,273,268,0,283,281,278,286],
[292,266,290,283,267,0,287,252,288],
[275,275,276,280,269,263,0,281,272],
[277,278,288,291,272,298,269,0,287],
[276,254,278,255,264,262,278,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,280,296,280,274,286,279,272],
[277,0,269,304,279,282,278,273,278],
[270,281,0,306,283,284,288,275,281],
[254,246,244,0,271,259,261,267,250],
[270,271,267,279,0,273,267,284,269],
[276,268,266,291,277,0,271,270,280],
[264,272,262,289,283,279,0,288,271],
[271,277,275,283,266,280,262,0,265],
[278,272,269,300,281,270,279,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,397,220,413,202,190,335,315],
[389,0,433,353,413,264,353,413,413],
[153,117,0,280,215,202,250,193,60],
[330,197,270,0,392,202,294,273,237],
[137,137,335,158,0,44,270,273,182],
[348,286,348,348,506,0,226,229,351],
[360,197,300,256,280,324,0,360,182],
[215,137,357,277,277,321,190,0,239],
[235,137,490,313,368,199,368,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,272,264,254,250,273,274,298],
[287,0,274,264,279,275,280,290,313],
[278,276,0,286,258,261,276,312,317],
[286,286,264,0,243,255,248,299,291],
[296,271,292,307,0,272,275,308,308],
[300,275,289,295,278,0,308,299,329],
[277,270,274,302,275,242,0,290,294],
[276,260,238,251,242,251,260,0,286],
[252,237,233,259,242,221,256,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,286,285,268,269,255,278,275],
[291,0,296,291,280,274,269,274,285],
[264,254,0,266,285,271,261,263,273],
[265,259,284,0,284,266,272,267,272],
[282,270,265,266,0,267,272,267,269],
[281,276,279,284,283,0,271,266,270],
[295,281,289,278,278,279,0,269,269],
[272,276,287,283,283,284,281,0,277],
[275,265,277,278,281,280,281,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,284,265,269,273,266,288,284],
[275,0,292,277,284,287,290,287,287],
[266,258,0,269,272,273,287,272,307],
[285,273,281,0,275,275,270,275,294],
[281,266,278,275,0,275,273,270,278],
[277,263,277,275,275,0,257,268,293],
[284,260,263,280,277,293,0,277,292],
[262,263,278,275,280,282,273,0,275],
[266,263,243,256,272,257,258,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,264,296,275,237,269,273,263],
[307,0,271,313,284,257,280,299,301],
[286,279,0,301,302,241,268,290,270],
[254,237,249,0,239,203,240,261,260],
[275,266,248,311,0,241,251,262,247],
[313,293,309,347,309,0,293,301,274],
[281,270,282,310,299,257,0,281,264],
[277,251,260,289,288,249,269,0,280],
[287,249,280,290,303,276,286,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,281,271,277,298,277,257,281],
[268,0,250,268,283,290,265,281,287],
[269,300,0,274,284,298,274,274,287],
[279,282,276,0,301,286,271,274,304],
[273,267,266,249,0,293,273,273,280],
[252,260,252,264,257,0,253,255,274],
[273,285,276,279,277,297,0,268,289],
[293,269,276,276,277,295,282,0,283],
[269,263,263,246,270,276,261,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,337,334,287,356,262,368,341],
[239,0,259,239,265,291,251,249,273],
[213,291,0,249,261,219,234,236,310],
[216,311,301,0,256,300,278,262,306],
[263,285,289,294,0,316,222,275,315],
[194,259,331,250,234,0,232,253,284],
[288,299,316,272,328,318,0,302,317],
[182,301,314,288,275,297,248,0,273],
[209,277,240,244,235,266,233,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,262,269,299,282,266,276,281],
[256,0,268,274,280,265,260,269,275],
[288,282,0,281,291,302,288,295,260],
[281,276,269,0,308,285,294,275,299],
[251,270,259,242,0,267,282,263,258],
[268,285,248,265,283,0,282,262,271],
[284,290,262,256,268,268,0,261,265],
[274,281,255,275,287,288,289,0,279],
[269,275,290,251,292,279,285,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,273,245,268,301,265,289,294],
[280,0,286,235,266,268,216,277,299],
[277,264,0,294,295,280,262,280,315],
[305,315,256,0,312,275,289,298,345],
[282,284,255,238,0,297,234,292,323],
[249,282,270,275,253,0,241,273,346],
[285,334,288,261,316,309,0,312,359],
[261,273,270,252,258,277,238,0,357],
[256,251,235,205,227,204,191,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,268,251,289,254,259,261,239],
[293,0,259,262,286,260,263,257,219],
[282,291,0,282,290,268,252,269,281],
[299,288,268,0,285,275,267,265,272],
[261,264,260,265,0,231,258,266,256],
[296,290,282,275,319,0,268,296,276],
[291,287,298,283,292,282,0,277,255],
[289,293,281,285,284,254,273,0,261],
[311,331,269,278,294,274,295,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,306,274,274,277,274,282,285],
[250,0,266,264,286,249,263,251,286],
[244,284,0,267,271,254,239,255,285],
[276,286,283,0,287,272,274,259,299],
[276,264,279,263,0,278,265,263,284],
[273,301,296,278,272,0,266,283,303],
[276,287,311,276,285,284,0,267,294],
[268,299,295,291,287,267,283,0,296],
[265,264,265,251,266,247,256,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,221,235,264,265,238,268,224,287],
[329,0,301,337,319,277,310,274,302],
[315,249,0,299,306,276,277,238,302],
[286,213,251,0,308,221,266,230,314],
[285,231,244,242,0,249,256,231,300],
[312,273,274,329,301,0,319,284,312],
[282,240,273,284,294,231,0,237,338],
[326,276,312,320,319,266,313,0,329],
[263,248,248,236,250,238,212,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,294,267,289,302,274,309,292],
[236,0,275,258,274,263,278,285,275],
[256,275,0,263,262,293,275,291,262],
[283,292,287,0,265,292,282,292,286],
[261,276,288,285,0,302,265,289,274],
[248,287,257,258,248,0,254,290,244],
[276,272,275,268,285,296,0,300,273],
[241,265,259,258,261,260,250,0,256],
[258,275,288,264,276,306,277,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,236,296,299,261,302,259,271],
[290,0,270,261,280,284,301,275,263],
[314,280,0,292,286,267,273,257,298],
[254,289,258,0,255,259,262,198,259],
[251,270,264,295,0,270,311,253,233],
[289,266,283,291,280,0,309,256,287],
[248,249,277,288,239,241,0,236,221],
[291,275,293,352,297,294,314,0,250],
[279,287,252,291,317,263,329,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,262,261,247,264,276,283,277],
[273,0,269,268,248,261,278,276,283],
[288,281,0,273,267,260,259,278,284],
[289,282,277,0,277,268,269,279,287],
[303,302,283,273,0,295,278,303,296],
[286,289,290,282,255,0,277,295,300],
[274,272,291,281,272,273,0,264,303],
[267,274,272,271,247,255,286,0,292],
[273,267,266,263,254,250,247,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,303,303,307,342,288,285,251],
[256,0,294,274,288,353,317,318,331],
[247,256,0,324,308,295,279,223,268],
[247,276,226,0,290,256,296,264,250],
[243,262,242,260,0,311,286,252,248],
[208,197,255,294,239,0,220,232,221],
[262,233,271,254,264,330,0,265,233],
[265,232,327,286,298,318,285,0,229],
[299,219,282,300,302,329,317,321,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,281,284,261,277,289,282,289],
[277,0,275,273,271,251,291,270,270],
[269,275,0,292,281,278,314,261,282],
[266,277,258,0,266,283,302,281,298],
[289,279,269,284,0,289,303,297,288],
[273,299,272,267,261,0,302,291,292],
[261,259,236,248,247,248,0,246,258],
[268,280,289,269,253,259,304,0,293],
[261,280,268,252,262,258,292,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,244,222,247,227,218,253,246],
[298,0,251,279,257,272,247,267,261],
[306,299,0,288,279,273,258,254,273],
[328,271,262,0,261,285,254,265,274],
[303,293,271,289,0,314,267,285,293],
[323,278,277,265,236,0,270,257,269],
[332,303,292,296,283,280,0,278,270],
[297,283,296,285,265,293,272,0,249],
[304,289,277,276,257,281,280,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,286,255,287,250,262,269,249],
[283,0,297,294,301,263,282,269,286],
[264,253,0,266,302,263,266,265,272],
[295,256,284,0,317,280,296,290,291],
[263,249,248,233,0,263,264,246,270],
[300,287,287,270,287,0,287,281,281],
[288,268,284,254,286,263,0,279,262],
[281,281,285,260,304,269,271,0,259],
[301,264,278,259,280,269,288,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,271,287,257,282,275,282,272],
[255,0,254,266,262,266,263,273,272],
[279,296,0,275,268,273,293,290,271],
[263,284,275,0,276,280,290,281,266],
[293,288,282,274,0,276,285,287,276],
[268,284,277,270,274,0,281,278,281],
[275,287,257,260,265,269,0,271,267],
[268,277,260,269,263,272,279,0,270],
[278,278,279,284,274,269,283,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,305,279,291,293,260,292,295],
[273,0,277,250,267,269,262,270,263],
[245,273,0,243,256,280,246,266,255],
[271,300,307,0,275,307,277,292,270],
[259,283,294,275,0,292,269,287,271],
[257,281,270,243,258,0,248,265,259],
[290,288,304,273,281,302,0,282,284],
[258,280,284,258,263,285,268,0,265],
[255,287,295,280,279,291,266,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,292,276,244,270,274,260,245],
[283,0,265,262,285,293,267,264,266],
[258,285,0,270,245,269,294,269,246],
[274,288,280,0,239,289,277,296,266],
[306,265,305,311,0,292,290,274,295],
[280,257,281,261,258,0,296,284,269],
[276,283,256,273,260,254,0,249,281],
[290,286,281,254,276,266,301,0,287],
[305,284,304,284,255,281,269,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,281,257,293,271,265,261,277],
[291,0,285,292,282,276,288,267,280],
[269,265,0,281,305,266,290,267,254],
[293,258,269,0,294,261,259,255,249],
[257,268,245,256,0,267,254,257,261],
[279,274,284,289,283,0,274,275,251],
[285,262,260,291,296,276,0,294,269],
[289,283,283,295,293,275,256,0,287],
[273,270,296,301,289,299,281,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,265,271,278,302,286,290,294],
[291,0,280,262,279,287,251,296,266],
[285,270,0,264,266,272,255,286,290],
[279,288,286,0,281,292,247,296,289],
[272,271,284,269,0,276,256,269,276],
[248,263,278,258,274,0,238,285,251],
[264,299,295,303,294,312,0,299,281],
[260,254,264,254,281,265,251,0,244],
[256,284,260,261,274,299,269,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,187,337,289,324,405,226,295],
[253,0,277,239,302,318,284,213,278],
[363,273,0,347,276,340,353,276,295],
[213,311,203,0,267,288,248,229,255],
[261,248,274,283,0,316,327,218,228],
[226,232,210,262,234,0,236,223,277],
[145,266,197,302,223,314,0,301,239],
[324,337,274,321,332,327,249,0,306],
[255,272,255,295,322,273,311,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,266,261,266,272,274,281,266],
[283,0,290,272,264,288,280,290,268],
[284,260,0,289,247,269,285,280,266],
[289,278,261,0,274,291,268,295,260],
[284,286,303,276,0,294,297,273,281],
[278,262,281,259,256,0,273,282,255],
[276,270,265,282,253,277,0,295,269],
[269,260,270,255,277,268,255,0,256],
[284,282,284,290,269,295,281,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,302,303,330,270,296,336,289],
[273,0,261,291,271,283,255,313,333],
[248,289,0,240,295,285,326,246,325],
[247,259,310,0,310,296,301,282,324],
[220,279,255,240,0,294,291,307,282],
[280,267,265,254,256,0,312,290,391],
[254,295,224,249,259,238,0,262,253],
[214,237,304,268,243,260,288,0,337],
[261,217,225,226,268,159,297,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,255,293,287,302,263,263,281],
[283,0,277,292,289,303,275,279,264],
[295,273,0,279,303,302,277,280,280],
[257,258,271,0,296,297,274,270,279],
[263,261,247,254,0,284,274,259,266],
[248,247,248,253,266,0,251,246,258],
[287,275,273,276,276,299,0,265,276],
[287,271,270,280,291,304,285,0,288],
[269,286,270,271,284,292,274,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,284,275,274,277,291,293,308],
[260,0,267,289,258,268,257,268,284],
[266,283,0,270,283,287,283,289,310],
[275,261,280,0,267,270,287,268,302],
[276,292,267,283,0,287,291,287,286],
[273,282,263,280,263,0,280,281,282],
[259,293,267,263,259,270,0,263,290],
[257,282,261,282,263,269,287,0,283],
[242,266,240,248,264,268,260,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,237,259,273,278,235,252,285],
[269,0,243,238,253,274,259,254,268],
[313,307,0,295,297,302,282,263,290],
[291,312,255,0,285,312,262,283,277],
[277,297,253,265,0,273,257,241,277],
[272,276,248,238,277,0,272,262,254],
[315,291,268,288,293,278,0,287,302],
[298,296,287,267,309,288,263,0,295],
[265,282,260,273,273,296,248,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,263,284,286,289,275,290,284],
[273,0,277,301,294,294,258,280,285],
[287,273,0,285,265,281,284,305,292],
[266,249,265,0,275,289,245,258,280],
[264,256,285,275,0,273,242,283,279],
[261,256,269,261,277,0,252,279,296],
[275,292,266,305,308,298,0,288,280],
[260,270,245,292,267,271,262,0,275],
[266,265,258,270,271,254,270,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,270,277,288,295,286,280,287],
[258,0,264,249,272,275,291,265,272],
[280,286,0,261,280,305,280,271,275],
[273,301,289,0,286,287,282,295,294],
[262,278,270,264,0,284,281,268,282],
[255,275,245,263,266,0,261,268,286],
[264,259,270,268,269,289,0,254,274],
[270,285,279,255,282,282,296,0,270],
[263,278,275,256,268,264,276,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,306,267,310,281,307,349,263],
[276,0,275,304,269,293,285,312,285],
[244,275,0,302,264,254,306,305,259],
[283,246,248,0,264,271,275,294,240],
[240,281,286,286,0,258,292,324,264],
[269,257,296,279,292,0,296,333,274],
[243,265,244,275,258,254,0,334,241],
[201,238,245,256,226,217,216,0,207],
[287,265,291,310,286,276,309,343,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,248,259,254,261,269,257,253],
[279,0,266,277,274,271,268,270,258],
[302,284,0,282,278,268,268,274,270],
[291,273,268,0,279,270,271,274,269],
[296,276,272,271,0,277,278,280,274],
[289,279,282,280,273,0,259,273,269],
[281,282,282,279,272,291,0,264,283],
[293,280,276,276,270,277,286,0,281],
[297,292,280,281,276,281,267,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,277,293,281,288,262,280,263],
[246,0,263,267,264,257,270,244,249],
[273,287,0,281,283,314,296,272,290],
[257,283,269,0,267,292,298,279,278],
[269,286,267,283,0,280,257,237,284],
[262,293,236,258,270,0,261,258,246],
[288,280,254,252,293,289,0,273,272],
[270,306,278,271,313,292,277,0,272],
[287,301,260,272,266,304,278,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,260,293,270,289,268,292,273],
[267,0,271,270,276,281,259,268,269],
[290,279,0,297,269,296,281,294,276],
[257,280,253,0,261,268,266,275,266],
[280,274,281,289,0,290,272,286,265],
[261,269,254,282,260,0,262,269,253],
[282,291,269,284,278,288,0,289,272],
[258,282,256,275,264,281,261,0,259],
[277,281,274,284,285,297,278,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,272,261,271,249,275,250,248],
[300,0,287,283,295,271,294,280,272],
[278,263,0,272,273,277,275,267,256],
[289,267,278,0,266,258,275,252,261],
[279,255,277,284,0,267,277,261,250],
[301,279,273,292,283,0,291,251,294],
[275,256,275,275,273,259,0,251,266],
[300,270,283,298,289,299,299,0,275],
[302,278,294,289,300,256,284,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,266,301,290,285,262,289,291],
[278,0,274,273,270,287,278,298,273],
[284,276,0,283,284,289,273,289,293],
[249,277,267,0,261,270,269,261,267],
[260,280,266,289,0,262,279,270,266],
[265,263,261,280,288,0,265,253,269],
[288,272,277,281,271,285,0,297,278],
[261,252,261,289,280,297,253,0,269],
[259,277,257,283,284,281,272,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,288,286,268,293,273,274,277],
[262,0,267,285,261,265,272,276,272],
[262,283,0,279,278,296,283,279,295],
[264,265,271,0,285,276,241,263,290],
[282,289,272,265,0,288,279,257,282],
[257,285,254,274,262,0,261,256,278],
[277,278,267,309,271,289,0,261,293],
[276,274,271,287,293,294,289,0,291],
[273,278,255,260,268,272,257,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,258,280,349,254,287,267,246],
[274,0,295,231,271,269,326,247,232],
[292,255,0,182,298,296,281,293,288],
[270,319,368,0,347,309,329,303,293],
[201,279,252,203,0,280,321,270,214],
[296,281,254,241,270,0,288,246,282],
[263,224,269,221,229,262,0,204,235],
[283,303,257,247,280,304,346,0,265],
[304,318,262,257,336,268,315,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,285,280,259,262,258,263,258],
[288,0,288,298,244,273,255,255,245],
[265,262,0,286,243,266,265,284,256],
[270,252,264,0,234,254,246,250,241],
[291,306,307,316,0,289,265,273,277],
[288,277,284,296,261,0,264,290,274],
[292,295,285,304,285,286,0,268,266],
[287,295,266,300,277,260,282,0,270],
[292,305,294,309,273,276,284,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,275,269,264,270,261,261,280],
[283,0,280,267,275,274,260,273,260],
[275,270,0,269,271,268,269,265,264],
[281,283,281,0,281,278,278,291,272],
[286,275,279,269,0,274,271,291,273],
[280,276,282,272,276,0,266,279,276],
[289,290,281,272,279,284,0,277,259],
[289,277,285,259,259,271,273,0,258],
[270,290,286,278,277,274,291,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,291,291,341,300,317,271,355],
[236,0,288,280,279,267,255,301,332],
[259,262,0,250,264,283,271,244,262],
[259,270,300,0,291,300,289,289,324],
[209,271,286,259,0,303,309,257,332],
[250,283,267,250,247,0,313,250,309],
[233,295,279,261,241,237,0,285,267],
[279,249,306,261,293,300,265,0,301],
[195,218,288,226,218,241,283,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,269,280,265,263,257,268,279],
[295,0,293,272,267,264,273,284,278],
[281,257,0,274,258,268,248,271,268],
[270,278,276,0,264,269,251,280,271],
[285,283,292,286,0,290,281,270,291],
[287,286,282,281,260,0,263,272,282],
[293,277,302,299,269,287,0,294,295],
[282,266,279,270,280,278,256,0,287],
[271,272,282,279,259,268,255,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,280,266,268,245,242,269,259],
[275,0,290,294,294,291,281,270,290],
[270,260,0,296,281,267,273,260,263],
[284,256,254,0,262,254,240,257,258],
[282,256,269,288,0,253,273,268,272],
[305,259,283,296,297,0,273,284,288],
[308,269,277,310,277,277,0,274,277],
[281,280,290,293,282,266,276,0,257],
[291,260,287,292,278,262,273,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,242,255,292,242,312,251,274],
[276,0,269,295,283,267,325,268,275],
[308,281,0,255,272,256,334,279,292],
[295,255,295,0,326,266,323,270,319],
[258,267,278,224,0,282,301,250,278],
[308,283,294,284,268,0,292,277,315],
[238,225,216,227,249,258,0,224,239],
[299,282,271,280,300,273,326,0,303],
[276,275,258,231,272,235,311,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,308,287,277,277,293,287,265],
[259,0,277,286,279,267,273,289,274],
[242,273,0,265,257,284,281,264,251],
[263,264,285,0,259,260,263,265,259],
[273,271,293,291,0,270,258,279,276],
[273,283,266,290,280,0,294,283,312],
[257,277,269,287,292,256,0,253,280],
[263,261,286,285,271,267,297,0,291],
[285,276,299,291,274,238,270,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,276,266,256,282,341,299,278],
[263,0,319,257,256,304,296,283,291],
[274,231,0,276,202,295,321,271,250],
[284,293,274,0,272,320,339,299,290],
[294,294,348,278,0,292,342,304,262],
[268,246,255,230,258,0,295,243,230],
[209,254,229,211,208,255,0,220,221],
[251,267,279,251,246,307,330,0,244],
[272,259,300,260,288,320,329,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,287,301,274,294,260,286,274],
[266,0,276,300,264,267,272,274,269],
[263,274,0,286,260,280,247,255,260],
[249,250,264,0,261,253,261,238,258],
[276,286,290,289,0,296,268,270,280],
[256,283,270,297,254,0,247,262,251],
[290,278,303,289,282,303,0,277,272],
[264,276,295,312,280,288,273,0,276],
[276,281,290,292,270,299,278,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,258,299,295,268,276,286,271],
[303,0,275,319,299,317,293,313,299],
[292,275,0,312,316,283,306,270,296],
[251,231,238,0,291,276,281,259,268],
[255,251,234,259,0,287,251,268,267],
[282,233,267,274,263,0,280,262,254],
[274,257,244,269,299,270,0,273,284],
[264,237,280,291,282,288,277,0,258],
[279,251,254,282,283,296,266,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,349,242,346,400,508,346,400,332],
[201,0,272,214,214,306,213,214,333],
[308,278,0,308,270,362,333,270,333],
[204,336,242,0,457,546,295,512,336],
[150,336,280,93,0,413,333,499,282],
[42,244,188,4,137,0,244,244,282],
[204,337,217,255,217,306,0,217,444],
[150,336,280,38,51,306,333,0,282],
[218,217,217,214,268,268,106,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,286,282,264,259,292,267,277],
[286,0,289,265,253,275,303,275,284],
[264,261,0,273,266,268,287,263,268],
[268,285,277,0,271,275,290,273,253],
[286,297,284,279,0,269,319,288,287],
[291,275,282,275,281,0,321,275,295],
[258,247,263,260,231,229,0,245,242],
[283,275,287,277,262,275,305,0,272],
[273,266,282,297,263,255,308,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,284,294,282,302,274,277,296],
[283,0,276,282,267,298,268,289,294],
[266,274,0,272,268,278,276,269,292],
[256,268,278,0,269,287,276,281,287],
[268,283,282,281,0,320,303,290,301],
[248,252,272,263,230,0,240,256,266],
[276,282,274,274,247,310,0,268,283],
[273,261,281,269,260,294,282,0,283],
[254,256,258,263,249,284,267,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,273,299,283,252,269,295,270],
[279,0,277,276,269,245,258,259,259],
[277,273,0,266,278,260,292,280,272],
[251,274,284,0,264,273,255,279,259],
[267,281,272,286,0,267,243,271,260],
[298,305,290,277,283,0,270,274,276],
[281,292,258,295,307,280,0,260,261],
[255,291,270,271,279,276,290,0,255],
[280,291,278,291,290,274,289,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,316,300,322,315,348,255,306],
[281,0,256,245,293,276,289,271,275],
[234,294,0,291,292,287,297,312,244],
[250,305,259,0,300,304,331,333,250],
[228,257,258,250,0,273,281,263,261],
[235,274,263,246,277,0,288,236,258],
[202,261,253,219,269,262,0,229,239],
[295,279,238,217,287,314,321,0,287],
[244,275,306,300,289,292,311,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,302,297,298,275,304,299,295],
[269,0,268,285,262,277,290,298,256],
[248,282,0,266,259,269,268,268,278],
[253,265,284,0,274,271,297,274,286],
[252,288,291,276,0,284,288,294,280],
[275,273,281,279,266,0,272,290,281],
[246,260,282,253,262,278,0,262,276],
[251,252,282,276,256,260,288,0,275],
[255,294,272,264,270,269,274,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,275,254,251,267,257,256,276],
[280,0,273,276,281,282,275,290,297],
[275,277,0,265,271,257,260,271,283],
[296,274,285,0,287,275,281,273,280],
[299,269,279,263,0,276,271,288,274],
[283,268,293,275,274,0,266,266,271],
[293,275,290,269,279,284,0,282,288],
[294,260,279,277,262,284,268,0,281],
[274,253,267,270,276,279,262,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,273,251,261,262,267,263,263],
[291,0,288,265,254,290,272,275,284],
[277,262,0,258,260,278,259,277,286],
[299,285,292,0,288,283,262,299,279],
[289,296,290,262,0,296,271,291,283],
[288,260,272,267,254,0,276,280,265],
[283,278,291,288,279,274,0,283,275],
[287,275,273,251,259,270,267,0,262],
[287,266,264,271,267,285,275,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,253,271,276,286,268,253,289],
[296,0,276,284,289,281,258,265,268],
[297,274,0,294,290,298,284,269,280],
[279,266,256,0,280,283,267,252,273],
[274,261,260,270,0,268,263,243,265],
[264,269,252,267,282,0,248,252,263],
[282,292,266,283,287,302,0,268,278],
[297,285,281,298,307,298,282,0,274],
[261,282,270,277,285,287,272,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,278,221,248,270,272,265,273],
[284,0,289,292,299,310,293,275,246],
[272,261,0,237,275,277,276,260,259],
[329,258,313,0,332,322,310,293,298],
[302,251,275,218,0,275,250,256,254],
[280,240,273,228,275,0,281,253,270],
[278,257,274,240,300,269,0,238,274],
[285,275,290,257,294,297,312,0,278],
[277,304,291,252,296,280,276,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,268,275,273,255,278,262,272],
[281,0,264,260,262,267,268,278,268],
[282,286,0,255,276,255,287,281,269],
[275,290,295,0,278,269,283,288,287],
[277,288,274,272,0,278,276,282,288],
[295,283,295,281,272,0,288,292,268],
[272,282,263,267,274,262,0,281,261],
[288,272,269,262,268,258,269,0,274],
[278,282,281,263,262,282,289,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,274,277,289,268,271,263,275],
[266,0,285,270,277,260,257,278,264],
[276,265,0,262,278,262,268,276,265],
[273,280,288,0,275,279,263,272,294],
[261,273,272,275,0,275,258,280,261],
[282,290,288,271,275,0,267,285,272],
[279,293,282,287,292,283,0,276,267],
[287,272,274,278,270,265,274,0,281],
[275,286,285,256,289,278,283,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,283,317,254,374,337,218,324],
[250,0,244,282,275,270,266,259,328],
[267,306,0,295,245,317,273,349,385],
[233,268,255,0,290,317,317,223,306],
[296,275,305,260,0,281,286,261,328],
[176,280,233,233,269,0,197,230,294],
[213,284,277,233,264,353,0,268,295],
[332,291,201,327,289,320,282,0,341],
[226,222,165,244,222,256,255,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,329,315,301,278,269,331,278],
[257,0,320,314,288,266,276,318,282],
[221,230,0,299,268,225,245,263,242],
[235,236,251,0,266,239,235,280,267],
[249,262,282,284,0,262,245,274,231],
[272,284,325,311,288,0,273,318,273],
[281,274,305,315,305,277,0,303,275],
[219,232,287,270,276,232,247,0,249],
[272,268,308,283,319,277,275,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,292,252,281,272,280,272,283],
[257,0,254,255,247,255,275,245,264],
[258,296,0,247,272,254,275,249,259],
[298,295,303,0,278,272,302,273,287],
[269,303,278,272,0,266,298,251,267],
[278,295,296,278,284,0,293,279,272],
[270,275,275,248,252,257,0,254,272],
[278,305,301,277,299,271,296,0,295],
[267,286,291,263,283,278,278,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,258,289,283,287,279,278,279],
[298,0,278,295,287,295,306,281,274],
[292,272,0,293,284,288,296,309,311],
[261,255,257,0,268,278,263,288,258],
[267,263,266,282,0,289,276,298,268],
[263,255,262,272,261,0,253,300,258],
[271,244,254,287,274,297,0,294,248],
[272,269,241,262,252,250,256,0,258],
[271,276,239,292,282,292,302,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,223,221,254,227,209,198,192],
[336,0,329,263,305,282,290,283,289],
[327,221,0,232,265,298,264,261,206],
[329,287,318,0,265,316,305,275,234],
[296,245,285,285,0,282,270,244,240],
[323,268,252,234,268,0,283,247,255],
[341,260,286,245,280,267,0,249,283],
[352,267,289,275,306,303,301,0,238],
[358,261,344,316,310,295,267,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,230,261,277,298,260,240,311],
[240,0,293,276,278,267,313,243,280],
[320,257,0,335,327,297,361,281,259],
[289,274,215,0,221,263,339,263,261],
[273,272,223,329,0,241,318,221,275],
[252,283,253,287,309,0,340,228,306],
[290,237,189,211,232,210,0,231,191],
[310,307,269,287,329,322,319,0,311],
[239,270,291,289,275,244,359,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,275,295,299,288,289,311,280],
[263,0,277,275,267,273,260,291,256],
[275,273,0,302,293,279,296,295,266],
[255,275,248,0,257,269,279,290,284],
[251,283,257,293,0,270,259,276,272],
[262,277,271,281,280,0,281,294,269],
[261,290,254,271,291,269,0,285,261],
[239,259,255,260,274,256,265,0,273],
[270,294,284,266,278,281,289,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,291,278,296,276,270,280,278],
[275,0,274,266,298,275,275,293,269],
[259,276,0,274,280,275,269,286,264],
[272,284,276,0,279,270,269,283,263],
[254,252,270,271,0,262,258,289,263],
[274,275,275,280,288,0,269,287,265],
[280,275,281,281,292,281,0,299,277],
[270,257,264,267,261,263,251,0,255],
[272,281,286,287,287,285,273,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,278,301,290,272,284,282,318],
[256,0,276,278,284,305,265,294,312],
[272,274,0,298,284,268,265,304,310],
[249,272,252,0,274,251,276,289,303],
[260,266,266,276,0,296,266,255,287],
[278,245,282,299,254,0,268,315,325],
[266,285,285,274,284,282,0,312,304],
[268,256,246,261,295,235,238,0,265],
[232,238,240,247,263,225,246,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,244,303,292,261,243,185,252],
[246,0,297,272,328,326,200,200,306],
[306,253,0,313,223,268,281,312,250],
[247,278,237,0,221,244,177,215,196],
[258,222,327,329,0,256,268,219,284],
[289,224,282,306,294,0,202,241,236],
[307,350,269,373,282,348,0,319,263],
[365,350,238,335,331,309,231,0,287],
[298,244,300,354,266,314,287,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,282,321,283,321,288,262,294],
[265,0,276,277,298,277,271,280,291],
[268,274,0,248,259,275,308,247,288],
[229,273,302,0,272,273,281,246,289],
[267,252,291,278,0,254,278,301,308],
[229,273,275,277,296,0,276,257,277],
[262,279,242,269,272,274,0,228,284],
[288,270,303,304,249,293,322,0,231],
[256,259,262,261,242,273,266,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,287,263,291,269,268,282,294],
[265,0,260,269,287,268,270,277,278],
[263,290,0,260,298,277,276,279,276],
[287,281,290,0,300,275,286,290,300],
[259,263,252,250,0,264,273,269,269],
[281,282,273,275,286,0,288,276,275],
[282,280,274,264,277,262,0,266,295],
[268,273,271,260,281,274,284,0,274],
[256,272,274,250,281,275,255,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,330,331,295,285,284,364,274,319],
[220,0,230,263,251,231,256,239,250],
[219,320,0,260,276,255,278,275,286],
[255,287,290,0,256,295,287,237,293],
[265,299,274,294,0,288,302,249,293],
[266,319,295,255,262,0,321,254,297],
[186,294,272,263,248,229,0,278,280],
[276,311,275,313,301,296,272,0,294],
[231,300,264,257,257,253,270,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,296,278,273,279,267,279,260],
[286,0,299,291,275,297,258,279,292],
[254,251,0,276,271,282,264,279,264],
[272,259,274,0,297,292,262,294,274],
[277,275,279,253,0,266,274,276,261],
[271,253,268,258,284,0,259,273,249],
[283,292,286,288,276,291,0,293,263],
[271,271,271,256,274,277,257,0,249],
[290,258,286,276,289,301,287,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,303,266,263,296,257,225,272],
[247,0,238,239,219,232,262,273,236],
[247,312,0,249,259,276,269,281,311],
[284,311,301,0,289,265,291,300,291],
[287,331,291,261,0,287,276,264,284],
[254,318,274,285,263,0,287,266,273],
[293,288,281,259,274,263,0,291,298],
[325,277,269,250,286,284,259,0,278],
[278,314,239,259,266,277,252,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,238,242,245,303,241,269,298],
[260,0,282,265,295,309,210,294,290],
[312,268,0,250,294,329,285,288,295],
[308,285,300,0,293,320,242,261,293],
[305,255,256,257,0,313,204,238,287],
[247,241,221,230,237,0,208,236,267],
[309,340,265,308,346,342,0,312,327],
[281,256,262,289,312,314,238,0,288],
[252,260,255,257,263,283,223,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,314,268,289,263,270,287,290],
[265,0,305,261,287,290,274,283,276],
[236,245,0,244,252,227,252,275,252],
[282,289,306,0,282,289,262,297,277],
[261,263,298,268,0,263,268,270,269],
[287,260,323,261,287,0,264,304,264],
[280,276,298,288,282,286,0,289,267],
[263,267,275,253,280,246,261,0,267],
[260,274,298,273,281,286,283,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,261,268,263,273,257,270,280],
[269,0,260,260,266,278,265,282,262],
[289,290,0,279,282,280,271,266,273],
[282,290,271,0,283,278,268,280,272],
[287,284,268,267,0,269,268,270,260],
[277,272,270,272,281,0,261,272,272],
[293,285,279,282,282,289,0,261,278],
[280,268,284,270,280,278,289,0,271],
[270,288,277,278,290,278,272,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,262,283,269,250,280,296,275],
[277,0,291,283,293,271,293,290,300],
[288,259,0,290,275,254,287,280,269],
[267,267,260,0,265,276,274,290,254],
[281,257,275,285,0,272,280,284,282],
[300,279,296,274,278,0,300,296,294],
[270,257,263,276,270,250,0,283,252],
[254,260,270,260,266,254,267,0,266],
[275,250,281,296,268,256,298,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,283,287,269,276,287,276,264],
[262,0,274,302,269,285,281,276,267],
[267,276,0,280,268,277,293,276,285],
[263,248,270,0,275,257,261,261,239],
[281,281,282,275,0,285,286,278,248],
[274,265,273,293,265,0,265,274,272],
[263,269,257,289,264,285,0,264,272],
[274,274,274,289,272,276,286,0,267],
[286,283,265,311,302,278,278,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,122,116,311,201,163,159,210],
[353,0,358,170,287,382,174,281,264],
[428,192,0,187,321,407,255,257,328],
[434,380,363,0,315,379,389,256,324],
[239,263,229,235,0,258,238,258,354],
[349,168,143,171,292,0,221,165,284],
[387,376,295,161,312,329,0,312,250],
[391,269,293,294,292,385,238,0,319],
[340,286,222,226,196,266,300,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,261,245,265,283,270,264,299],
[282,0,271,249,252,301,256,270,284],
[289,279,0,261,267,303,277,281,291],
[305,301,289,0,275,303,283,318,301],
[285,298,283,275,0,327,282,292,294],
[267,249,247,247,223,0,242,277,291],
[280,294,273,267,268,308,0,296,299],
[286,280,269,232,258,273,254,0,265],
[251,266,259,249,256,259,251,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,259,279,273,278,272,267,312],
[253,0,260,248,261,275,268,246,278],
[291,290,0,286,289,297,297,267,297],
[271,302,264,0,281,274,259,266,286],
[277,289,261,269,0,284,261,272,284],
[272,275,253,276,266,0,297,273,281],
[278,282,253,291,289,253,0,279,281],
[283,304,283,284,278,277,271,0,300],
[238,272,253,264,266,269,269,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,270,277,286,265,278,304,247],
[295,0,294,278,299,289,274,307,240],
[280,256,0,278,265,255,270,261,219],
[273,272,272,0,311,269,265,283,233],
[264,251,285,239,0,237,264,285,249],
[285,261,295,281,313,0,269,312,262],
[272,276,280,285,286,281,0,305,276],
[246,243,289,267,265,238,245,0,230],
[303,310,331,317,301,288,274,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,275,266,260,246,236,282,253],
[318,0,307,306,295,276,272,308,296],
[275,243,0,268,274,257,242,285,281],
[284,244,282,0,258,251,250,272,264],
[290,255,276,292,0,274,265,288,276],
[304,274,293,299,276,0,281,301,302],
[314,278,308,300,285,269,0,312,294],
[268,242,265,278,262,249,238,0,265],
[297,254,269,286,274,248,256,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,262,291,258,261,266,295,257],
[285,0,308,302,290,288,270,292,283],
[288,242,0,280,281,259,292,284,252],
[259,248,270,0,253,277,254,265,243],
[292,260,269,297,0,259,267,301,277],
[289,262,291,273,291,0,268,302,289],
[284,280,258,296,283,282,0,297,278],
[255,258,266,285,249,248,253,0,266],
[293,267,298,307,273,261,272,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,292,283,296,333,272,273,279],
[271,0,298,268,307,283,271,276,268],
[258,252,0,259,272,261,258,251,265],
[267,282,291,0,325,296,290,288,275],
[254,243,278,225,0,268,253,246,267],
[217,267,289,254,282,0,269,252,268],
[278,279,292,260,297,281,0,253,281],
[277,274,299,262,304,298,297,0,285],
[271,282,285,275,283,282,269,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,253,261,267,277,253,297,256],
[305,0,276,280,279,287,261,309,293],
[297,274,0,272,284,285,291,299,295],
[289,270,278,0,290,282,272,300,292],
[283,271,266,260,0,276,272,292,268],
[273,263,265,268,274,0,265,303,286],
[297,289,259,278,278,285,0,310,280],
[253,241,251,250,258,247,240,0,244],
[294,257,255,258,282,264,270,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,314,269,289,253,286,257,289],
[293,0,296,268,263,248,271,267,263],
[236,254,0,244,287,255,249,243,252],
[281,282,306,0,293,264,263,266,274],
[261,287,263,257,0,268,286,282,295],
[297,302,295,286,282,0,285,281,265],
[264,279,301,287,264,265,0,302,300],
[293,283,307,284,268,269,248,0,281],
[261,287,298,276,255,285,250,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,285,276,270,291,305,292,290],
[252,0,266,283,259,283,284,291,279],
[265,284,0,280,284,295,303,286,299],
[274,267,270,0,269,283,306,297,301],
[280,291,266,281,0,295,282,297,289],
[259,267,255,267,255,0,298,274,282],
[245,266,247,244,268,252,0,263,259],
[258,259,264,253,253,276,287,0,257],
[260,271,251,249,261,268,291,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,244,238,248,276,253,278,261],
[305,0,266,267,290,291,278,288,263],
[306,284,0,285,273,316,279,286,288],
[312,283,265,0,277,309,302,294,273],
[302,260,277,273,0,299,288,293,266],
[274,259,234,241,251,0,255,266,253],
[297,272,271,248,262,295,0,295,281],
[272,262,264,256,257,284,255,0,256],
[289,287,262,277,284,297,269,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,283,286,274,290,295,286,285],
[286,0,269,277,283,295,272,285,266],
[267,281,0,286,283,267,292,263,289],
[264,273,264,0,277,254,271,260,276],
[276,267,267,273,0,288,286,277,271],
[260,255,283,296,262,0,280,260,259],
[255,278,258,279,264,270,0,266,266],
[264,265,287,290,273,290,284,0,268],
[265,284,261,274,279,291,284,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,292,308,291,278,298,273,280],
[240,0,250,256,293,247,263,279,263],
[258,300,0,282,302,280,293,290,282],
[242,294,268,0,283,280,285,279,255],
[259,257,248,267,0,252,252,262,259],
[272,303,270,270,298,0,271,267,274],
[252,287,257,265,298,279,0,283,270],
[277,271,260,271,288,283,267,0,256],
[270,287,268,295,291,276,280,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,258,282,264,293,265,266,278],
[279,0,263,282,286,290,265,278,274],
[292,287,0,279,283,292,289,287,274],
[268,268,271,0,257,264,257,255,266],
[286,264,267,293,0,279,279,288,290],
[257,260,258,286,271,0,281,260,267],
[285,285,261,293,271,269,0,282,265],
[284,272,263,295,262,290,268,0,299],
[272,276,276,284,260,283,285,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,253,285,277,274,267,275,283],
[275,0,286,286,290,304,278,285,302],
[297,264,0,276,280,290,271,293,287],
[265,264,274,0,276,274,254,276,281],
[273,260,270,274,0,289,272,274,281],
[276,246,260,276,261,0,248,274,268],
[283,272,279,296,278,302,0,274,280],
[275,265,257,274,276,276,276,0,288],
[267,248,263,269,269,282,270,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,292,295,283,273,290,269,283],
[270,0,284,276,295,264,276,292,286],
[258,266,0,257,276,252,264,255,273],
[255,274,293,0,292,264,262,257,273],
[267,255,274,258,0,247,271,276,277],
[277,286,298,286,303,0,278,271,284],
[260,274,286,288,279,272,0,255,272],
[281,258,295,293,274,279,295,0,272],
[267,264,277,277,273,266,278,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,276,275,303,259,294,263,261],
[266,0,283,278,304,284,298,286,266],
[274,267,0,284,288,292,281,264,267],
[275,272,266,0,281,259,263,263,280],
[247,246,262,269,0,259,281,238,254],
[291,266,258,291,291,0,293,271,262],
[256,252,269,287,269,257,0,262,258],
[287,264,286,287,312,279,288,0,261],
[289,284,283,270,296,288,292,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,257,295,321,203,262,287,236],
[236,0,248,264,305,256,215,257,259],
[293,302,0,317,325,278,264,307,263],
[255,286,233,0,279,235,235,291,269],
[229,245,225,271,0,196,241,286,280],
[347,294,272,315,354,0,292,261,257],
[288,335,286,315,309,258,0,303,302],
[263,293,243,259,264,289,247,0,282],
[314,291,287,281,270,293,248,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,298,278,282,286,305,296,275],
[260,0,280,273,274,260,284,264,249],
[252,270,0,278,257,297,288,274,254],
[272,277,272,0,269,291,274,267,262],
[268,276,293,281,0,286,282,269,275],
[264,290,253,259,264,0,271,263,254],
[245,266,262,276,268,279,0,264,248],
[254,286,276,283,281,287,286,0,274],
[275,301,296,288,275,296,302,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,291,285,288,320,269,274,261],
[280,0,280,260,269,314,282,288,295],
[259,270,0,278,285,297,278,286,273],
[265,290,272,0,288,300,274,270,276],
[262,281,265,262,0,296,254,262,268],
[230,236,253,250,254,0,249,245,259],
[281,268,272,276,296,301,0,273,283],
[276,262,264,280,288,305,277,0,291],
[289,255,277,274,282,291,267,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,290,271,290,231,280,272,265],
[259,0,286,286,270,235,269,242,239],
[260,264,0,284,254,245,283,241,278],
[279,264,266,0,278,256,268,259,276],
[260,280,296,272,0,250,278,266,256],
[319,315,305,294,300,0,308,270,292],
[270,281,267,282,272,242,0,257,283],
[278,308,309,291,284,280,293,0,275],
[285,311,272,274,294,258,267,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,275,268,266,284,268,274,280],
[282,0,265,266,254,278,274,279,257],
[275,285,0,248,262,294,264,286,276],
[282,284,302,0,281,270,280,282,283],
[284,296,288,269,0,297,297,292,283],
[266,272,256,280,253,0,267,264,265],
[282,276,286,270,253,283,0,286,258],
[276,271,264,268,258,286,264,0,269],
[270,293,274,267,267,285,292,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,246,225,295,265,296,271,276],
[268,0,287,259,298,333,283,264,284],
[304,263,0,301,319,323,281,300,307],
[325,291,249,0,315,280,316,316,321],
[255,252,231,235,0,282,244,240,236],
[285,217,227,270,268,0,285,257,262],
[254,267,269,234,306,265,0,255,302],
[279,286,250,234,310,293,295,0,274],
[274,266,243,229,314,288,248,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,274,271,276,296,307,278,316],
[256,0,275,269,258,261,297,259,278],
[276,275,0,265,280,254,283,268,282],
[279,281,285,0,272,287,315,255,290],
[274,292,270,278,0,275,296,266,277],
[254,289,296,263,275,0,293,272,278],
[243,253,267,235,254,257,0,251,253],
[272,291,282,295,284,278,299,0,312],
[234,272,268,260,273,272,297,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,281,295,277,263,267,270,289],
[272,0,269,269,260,273,276,280,276],
[269,281,0,267,279,277,269,276,278],
[255,281,283,0,260,273,264,266,273],
[273,290,271,290,0,266,279,292,272],
[287,277,273,277,284,0,280,289,273],
[283,274,281,286,271,270,0,280,281],
[280,270,274,284,258,261,270,0,273],
[261,274,272,277,278,277,269,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,263,289,276,265,275,271,271],
[257,0,260,269,261,261,265,267,268],
[287,290,0,287,277,271,273,283,278],
[261,281,263,0,275,260,262,265,264],
[274,289,273,275,0,258,266,273,275],
[285,289,279,290,292,0,266,274,277],
[275,285,277,288,284,284,0,283,289],
[279,283,267,285,277,276,267,0,272],
[279,282,272,286,275,273,261,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,252,234,250,252,248,238,308],
[303,0,265,274,296,280,271,284,327],
[298,285,0,269,295,265,267,258,308],
[316,276,281,0,317,273,281,290,327],
[300,254,255,233,0,240,292,231,297],
[298,270,285,277,310,0,270,301,324],
[302,279,283,269,258,280,0,259,317],
[312,266,292,260,319,249,291,0,349],
[242,223,242,223,253,226,233,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,267,288,277,289,287,280,246],
[271,0,288,309,262,290,278,264,250],
[283,262,0,288,252,278,272,284,245],
[262,241,262,0,223,263,263,278,198],
[273,288,298,327,0,289,295,272,290],
[261,260,272,287,261,0,295,276,248],
[263,272,278,287,255,255,0,259,268],
[270,286,266,272,278,274,291,0,247],
[304,300,305,352,260,302,282,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,255,249,303,327,253,222,249],
[295,0,256,255,254,339,280,259,310],
[295,294,0,261,276,345,240,189,293],
[301,295,289,0,320,262,301,234,255],
[247,296,274,230,0,288,228,165,265],
[223,211,205,288,262,0,213,192,225],
[297,270,310,249,322,337,0,277,307],
[328,291,361,316,385,358,273,0,339],
[301,240,257,295,285,325,243,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,288,285,270,287,269,292,291],
[255,0,257,277,256,263,266,268,247],
[262,293,0,290,271,272,265,294,281],
[265,273,260,0,266,264,261,286,251],
[280,294,279,284,0,280,275,287,283],
[263,287,278,286,270,0,273,265,253],
[281,284,285,289,275,277,0,293,275],
[258,282,256,264,263,285,257,0,267],
[259,303,269,299,267,297,275,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,278,290,273,282,263,259,246],
[285,0,256,273,282,273,273,285,261],
[272,294,0,275,262,283,298,234,263],
[260,277,275,0,288,282,263,245,244],
[277,268,288,262,0,296,279,255,281],
[268,277,267,268,254,0,270,269,225],
[287,277,252,287,271,280,0,247,249],
[291,265,316,305,295,281,303,0,258],
[304,289,287,306,269,325,301,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,266,304,275,261,269,308,296],
[281,0,269,302,289,283,284,299,285],
[284,281,0,319,273,272,286,302,290],
[246,248,231,0,259,255,247,275,261],
[275,261,277,291,0,270,264,279,268],
[289,267,278,295,280,0,281,301,292],
[281,266,264,303,286,269,0,281,276],
[242,251,248,275,271,249,269,0,268],
[254,265,260,289,282,258,274,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,284,286,282,292,275,271,275],
[269,0,270,282,265,250,264,265,275],
[266,280,0,279,260,270,271,273,262],
[264,268,271,0,280,252,272,260,265],
[268,285,290,270,0,263,279,266,270],
[258,300,280,298,287,0,276,283,261],
[275,286,279,278,271,274,0,274,269],
[279,285,277,290,284,267,276,0,266],
[275,275,288,285,280,289,281,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,267,284,258,266,271,266,275],
[252,0,258,271,253,232,254,245,244],
[283,292,0,279,255,263,281,275,284],
[266,279,271,0,264,260,266,274,262],
[292,297,295,286,0,275,289,275,278],
[284,318,287,290,275,0,276,278,278],
[279,296,269,284,261,274,0,279,294],
[284,305,275,276,275,272,271,0,290],
[275,306,266,288,272,272,256,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,270,275,271,276,269,277,267],
[277,0,264,266,250,263,278,277,250],
[280,286,0,284,267,285,282,283,270],
[275,284,266,0,270,269,281,264,255],
[279,300,283,280,0,284,277,276,267],
[274,287,265,281,266,0,285,271,279],
[281,272,268,269,273,265,0,267,261],
[273,273,267,286,274,279,283,0,278],
[283,300,280,295,283,271,289,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,303,301,285,289,280,266,296],
[248,0,269,260,269,262,261,251,254],
[247,281,0,271,274,265,255,269,258],
[249,290,279,0,288,276,267,270,282],
[265,281,276,262,0,274,280,269,279],
[261,288,285,274,276,0,280,282,277],
[270,289,295,283,270,270,0,270,287],
[284,299,281,280,281,268,280,0,273],
[254,296,292,268,271,273,263,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,284,273,285,295,269,275,286],
[237,0,282,251,260,266,267,259,272],
[266,268,0,262,264,267,272,257,266],
[277,299,288,0,268,291,281,254,286],
[265,290,286,282,0,287,289,259,272],
[255,284,283,259,263,0,278,251,265],
[281,283,278,269,261,272,0,255,284],
[275,291,293,296,291,299,295,0,291],
[264,278,284,264,278,285,266,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,275,298,281,270,248,267,271],
[297,0,251,299,298,283,295,309,258],
[275,299,0,277,346,259,284,316,266],
[252,251,273,0,312,278,275,271,284],
[269,252,204,238,0,198,270,301,245],
[280,267,291,272,352,0,311,326,307],
[302,255,266,275,280,239,0,299,276],
[283,241,234,279,249,224,251,0,268],
[279,292,284,266,305,243,274,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,261,263,261,264,254,260,268],
[300,0,279,286,285,296,277,272,280],
[289,271,0,271,267,280,265,290,270],
[287,264,279,0,258,288,279,274,276],
[289,265,283,292,0,298,273,290,280],
[286,254,270,262,252,0,252,268,274],
[296,273,285,271,277,298,0,283,297],
[290,278,260,276,260,282,267,0,284],
[282,270,280,274,270,276,253,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,272,299,285,256,300,301,265],
[267,0,268,258,254,278,289,300,259],
[278,282,0,280,270,261,271,249,250],
[251,292,270,0,260,213,280,277,241],
[265,296,280,290,0,257,313,316,275],
[294,272,289,337,293,0,314,311,257],
[250,261,279,270,237,236,0,253,212],
[249,250,301,273,234,239,297,0,266],
[285,291,300,309,275,293,338,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,279,275,270,276,293,261,262],
[295,0,273,272,285,287,303,283,277],
[271,277,0,281,287,278,297,288,280],
[275,278,269,0,270,266,275,277,275],
[280,265,263,280,0,282,281,272,262],
[274,263,272,284,268,0,278,264,260],
[257,247,253,275,269,272,0,262,264],
[289,267,262,273,278,286,288,0,263],
[288,273,270,275,288,290,286,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,264,274,273,285,282,286,285],
[280,0,283,282,296,281,267,292,287],
[286,267,0,279,269,280,281,293,284],
[276,268,271,0,286,283,265,272,267],
[277,254,281,264,0,278,261,289,257],
[265,269,270,267,272,0,260,287,264],
[268,283,269,285,289,290,0,304,278],
[264,258,257,278,261,263,246,0,263],
[265,263,266,283,293,286,272,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,260,270,282,273,265,256,259],
[288,0,271,293,292,292,276,286,297],
[290,279,0,273,283,280,275,284,287],
[280,257,277,0,289,274,274,268,279],
[268,258,267,261,0,274,261,280,266],
[277,258,270,276,276,0,273,269,274],
[285,274,275,276,289,277,0,290,296],
[294,264,266,282,270,281,260,0,286],
[291,253,263,271,284,276,254,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,287,305,292,293,281,274,266],
[272,0,274,259,288,272,267,261,252],
[263,276,0,270,257,261,283,289,263],
[245,291,280,0,271,294,273,272,267],
[258,262,293,279,0,302,274,277,281],
[257,278,289,256,248,0,272,263,259],
[269,283,267,277,276,278,0,273,250],
[276,289,261,278,273,287,277,0,261],
[284,298,287,283,269,291,300,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,240,272,248,270,275,249,258],
[294,0,278,301,280,272,292,287,292],
[310,272,0,286,301,289,303,288,300],
[278,249,264,0,268,273,270,278,275],
[302,270,249,282,0,275,275,266,280],
[280,278,261,277,275,0,272,270,280],
[275,258,247,280,275,278,0,257,263],
[301,263,262,272,284,280,293,0,275],
[292,258,250,275,270,270,287,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,281,285,270,272,284,260,272],
[270,0,273,269,265,257,272,264,278],
[269,277,0,280,255,278,281,255,252],
[265,281,270,0,259,262,280,263,256],
[280,285,295,291,0,274,274,270,277],
[278,293,272,288,276,0,291,265,270],
[266,278,269,270,276,259,0,259,282],
[290,286,295,287,280,285,291,0,274],
[278,272,298,294,273,280,268,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,250,307,246,260,277,282,255],
[250,0,267,270,259,257,269,255,243],
[300,283,0,307,260,247,305,273,286],
[243,280,243,0,236,249,259,266,239],
[304,291,290,314,0,271,306,306,288],
[290,293,303,301,279,0,284,291,254],
[273,281,245,291,244,266,0,279,273],
[268,295,277,284,244,259,271,0,276],
[295,307,264,311,262,296,277,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,292,289,279,278,285,273,271],
[273,0,273,262,253,271,261,285,283],
[258,277,0,258,260,281,266,275,261],
[261,288,292,0,267,292,269,284,278],
[271,297,290,283,0,299,269,297,299],
[272,279,269,258,251,0,261,269,282],
[265,289,284,281,281,289,0,292,294],
[277,265,275,266,253,281,258,0,251],
[279,267,289,272,251,268,256,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,299,289,297,287,283,286,274],
[264,0,267,269,268,277,289,275,253],
[251,283,0,278,283,273,271,283,262],
[261,281,272,0,266,267,280,273,252],
[253,282,267,284,0,262,286,262,276],
[263,273,277,283,288,0,270,259,252],
[267,261,279,270,264,280,0,269,268],
[264,275,267,277,288,291,281,0,266],
[276,297,288,298,274,298,282,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,276,284,260,308,283,269,262],
[284,0,256,299,283,290,271,251,260],
[274,294,0,293,286,285,296,294,261],
[266,251,257,0,243,266,269,258,269],
[290,267,264,307,0,283,273,285,279],
[242,260,265,284,267,0,266,270,266],
[267,279,254,281,277,284,0,275,280],
[281,299,256,292,265,280,275,0,290],
[288,290,289,281,271,284,270,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,294,263,280,297,287,271,277],
[266,0,291,260,273,296,293,288,264],
[256,259,0,261,268,287,280,275,261],
[287,290,289,0,293,304,307,300,275],
[270,277,282,257,0,282,292,274,265],
[253,254,263,246,268,0,281,253,233],
[263,257,270,243,258,269,0,260,239],
[279,262,275,250,276,297,290,0,267],
[273,286,289,275,285,317,311,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,286,266,260,272,263,275,274],
[279,0,261,273,290,277,270,277,286],
[264,289,0,267,274,273,269,269,280],
[284,277,283,0,263,261,270,278,288],
[290,260,276,287,0,275,278,286,287],
[278,273,277,289,275,0,261,283,292],
[287,280,281,280,272,289,0,284,284],
[275,273,281,272,264,267,266,0,270],
[276,264,270,262,263,258,266,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,285,289,287,304,297,283,271],
[271,0,280,274,277,284,278,266,263],
[265,270,0,282,272,284,292,269,263],
[261,276,268,0,267,281,291,253,272],
[263,273,278,283,0,283,287,258,279],
[246,266,266,269,267,0,279,256,266],
[253,272,258,259,263,271,0,251,251],
[267,284,281,297,292,294,299,0,268],
[279,287,287,278,271,284,299,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,236,135,186,268,263,162,237],
[248,0,206,243,164,226,209,277,190],
[314,344,0,311,255,314,271,303,297],
[415,307,239,0,194,297,276,319,284],
[364,386,295,356,0,309,351,288,273],
[282,324,236,253,241,0,298,189,209],
[287,341,279,274,199,252,0,196,245],
[388,273,247,231,262,361,354,0,226],
[313,360,253,266,277,341,305,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,283,281,288,298,271,293,312],
[253,0,267,248,273,279,276,293,289],
[267,283,0,270,293,280,284,283,278],
[269,302,280,0,284,284,280,296,297],
[262,277,257,266,0,281,280,285,270],
[252,271,270,266,269,0,264,269,280],
[279,274,266,270,270,286,0,282,276],
[257,257,267,254,265,281,268,0,277],
[238,261,272,253,280,270,274,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,263,309,281,286,281,294,297],
[267,0,235,273,276,259,263,285,293],
[287,315,0,308,295,301,256,291,285],
[241,277,242,0,298,284,268,290,273],
[269,274,255,252,0,264,261,252,259],
[264,291,249,266,286,0,260,299,288],
[269,287,294,282,289,290,0,274,278],
[256,265,259,260,298,251,276,0,278],
[253,257,265,277,291,262,272,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,264,238,254,294,263,239,253],
[290,0,295,276,273,326,282,274,289],
[286,255,0,260,278,299,287,264,272],
[312,274,290,0,272,305,246,268,275],
[296,277,272,278,0,302,280,283,303],
[256,224,251,245,248,0,250,223,248],
[287,268,263,304,270,300,0,283,302],
[311,276,286,282,267,327,267,0,297],
[297,261,278,275,247,302,248,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,242,239,277,258,278,286,269],
[274,0,271,224,306,288,282,284,265],
[308,279,0,275,283,329,297,293,240],
[311,326,275,0,295,289,325,290,313],
[273,244,267,255,0,224,263,262,251],
[292,262,221,261,326,0,290,338,245],
[272,268,253,225,287,260,0,283,290],
[264,266,257,260,288,212,267,0,267],
[281,285,310,237,299,305,260,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,283,300,287,288,287,272,294],
[267,0,257,300,283,290,290,271,287],
[267,293,0,305,283,305,279,281,303],
[250,250,245,0,293,293,274,287,277],
[263,267,267,257,0,268,273,268,272],
[262,260,245,257,282,0,251,269,270],
[263,260,271,276,277,299,0,271,276],
[278,279,269,263,282,281,279,0,288],
[256,263,247,273,278,280,274,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,271,289,275,281,263,270,275],
[263,0,285,277,274,262,274,259,284],
[279,265,0,309,252,223,283,254,289],
[261,273,241,0,262,221,252,238,252],
[275,276,298,288,0,269,283,274,307],
[269,288,327,329,281,0,293,277,303],
[287,276,267,298,267,257,0,261,293],
[280,291,296,312,276,273,289,0,290],
[275,266,261,298,243,247,257,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,282,312,299,306,269,318,281],
[271,0,280,273,276,290,257,281,299],
[268,270,0,272,281,286,262,280,276],
[238,277,278,0,279,309,297,321,286],
[251,274,269,271,0,311,244,284,263],
[244,260,264,241,239,0,242,266,274],
[281,293,288,253,306,308,0,299,305],
[232,269,270,229,266,284,251,0,265],
[269,251,274,264,287,276,245,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,269,268,268,276,240,278,254],
[283,0,278,265,271,314,271,274,268],
[281,272,0,269,264,283,264,278,266],
[282,285,281,0,269,287,278,273,266],
[282,279,286,281,0,286,275,264,277],
[274,236,267,263,264,0,262,262,242],
[310,279,286,272,275,288,0,286,275],
[272,276,272,277,286,288,264,0,265],
[296,282,284,284,273,308,275,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,274,279,280,283,293,276,284],
[258,0,284,271,277,276,268,263,288],
[276,266,0,281,254,265,231,269,271],
[271,279,269,0,264,257,259,266,283],
[270,273,296,286,0,256,263,261,299],
[267,274,285,293,294,0,296,324,290],
[257,282,319,291,287,254,0,310,306],
[274,287,281,284,289,226,240,0,290],
[266,262,279,267,251,260,244,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,289,274,303,274,275,277,291],
[255,0,293,278,274,279,279,275,275],
[261,257,0,272,275,259,262,284,281],
[276,272,278,0,299,285,280,269,281],
[247,276,275,251,0,262,254,263,271],
[276,271,291,265,288,0,270,263,288],
[275,271,288,270,296,280,0,260,283],
[273,275,266,281,287,287,290,0,299],
[259,275,269,269,279,262,267,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,265,253,247,244,262,274,256],
[285,0,291,256,262,267,277,280,253],
[285,259,0,242,252,249,268,263,248],
[297,294,308,0,278,274,293,297,284],
[303,288,298,272,0,305,281,298,277],
[306,283,301,276,245,0,289,294,281],
[288,273,282,257,269,261,0,260,280],
[276,270,287,253,252,256,290,0,262],
[294,297,302,266,273,269,270,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,263,286,249,266,266,246,248],
[291,0,272,276,252,256,284,242,262],
[287,278,0,286,270,259,284,256,253],
[264,274,264,0,259,279,275,250,247],
[301,298,280,291,0,283,298,275,267],
[284,294,291,271,267,0,276,271,275],
[284,266,266,275,252,274,0,263,257],
[304,308,294,300,275,279,287,0,259],
[302,288,297,303,283,275,293,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,249,271,268,249,239,295,266],
[274,0,266,250,234,261,283,284,254],
[301,284,0,296,277,303,278,327,272],
[279,300,254,0,250,286,270,273,268],
[282,316,273,300,0,306,261,274,272],
[301,289,247,264,244,0,287,310,256],
[311,267,272,280,289,263,0,313,276],
[255,266,223,277,276,240,237,0,245],
[284,296,278,282,278,294,274,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,357,270,318,294,334,320,240],
[295,0,279,303,308,344,339,277,242],
[193,271,0,283,229,232,255,228,234],
[280,247,267,0,338,331,324,257,276],
[232,242,321,212,0,277,301,164,162],
[256,206,318,219,273,0,207,225,209],
[216,211,295,226,249,343,0,262,225],
[230,273,322,293,386,325,288,0,230],
[310,308,316,274,388,341,325,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,274,291,271,275,295,286,298],
[282,0,284,297,272,264,277,271,287],
[276,266,0,286,278,274,287,268,263],
[259,253,264,0,248,246,255,283,271],
[279,278,272,302,0,286,274,282,287],
[275,286,276,304,264,0,291,291,287],
[255,273,263,295,276,259,0,279,281],
[264,279,282,267,268,259,271,0,294],
[252,263,287,279,263,263,269,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,270,287,273,275,275,261,250],
[292,0,281,278,284,291,265,270,275],
[280,269,0,279,256,265,266,267,262],
[263,272,271,0,270,273,280,272,268],
[277,266,294,280,0,273,286,265,247],
[275,259,285,277,277,0,287,293,270],
[275,285,284,270,264,263,0,266,250],
[289,280,283,278,285,257,284,0,256],
[300,275,288,282,303,280,300,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,255,297,290,287,256,274,270],
[283,0,261,278,301,301,290,302,286],
[295,289,0,304,311,291,262,274,271],
[253,272,246,0,262,252,263,274,249],
[260,249,239,288,0,273,256,258,259],
[263,249,259,298,277,0,250,274,277],
[294,260,288,287,294,300,0,286,265],
[276,248,276,276,292,276,264,0,283],
[280,264,279,301,291,273,285,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,238,279,225,266,232,195,203],
[307,0,235,240,259,276,205,248,223],
[312,315,0,300,298,282,247,312,303],
[271,310,250,0,303,299,246,294,287],
[325,291,252,247,0,265,239,248,245],
[284,274,268,251,285,0,203,212,252],
[318,345,303,304,311,347,0,239,314],
[355,302,238,256,302,338,311,0,238],
[347,327,247,263,305,298,236,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,269,300,300,266,280,255,273],
[302,0,281,312,292,285,302,254,302],
[281,269,0,271,298,288,270,269,299],
[250,238,279,0,252,270,242,255,278],
[250,258,252,298,0,280,269,232,264],
[284,265,262,280,270,0,302,281,304],
[270,248,280,308,281,248,0,258,294],
[295,296,281,295,318,269,292,0,281],
[277,248,251,272,286,246,256,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,345,236,205,231,250,281,258],
[225,0,333,289,246,231,346,215,254],
[205,217,0,252,201,189,256,251,217],
[314,261,298,0,260,295,312,233,299],
[345,304,349,290,0,210,325,294,314],
[319,319,361,255,340,0,303,300,308],
[300,204,294,238,225,247,0,249,234],
[269,335,299,317,256,250,301,0,275],
[292,296,333,251,236,242,316,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,265,249,258,223,257,244,236],
[332,0,313,300,286,329,295,246,259],
[285,237,0,269,276,305,314,317,295],
[301,250,281,0,237,270,274,253,252],
[292,264,274,313,0,312,313,241,269],
[327,221,245,280,238,0,251,254,222],
[293,255,236,276,237,299,0,281,281],
[306,304,233,297,309,296,269,0,226],
[314,291,255,298,281,328,269,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,273,270,275,265,278,261,267],
[284,0,296,269,291,282,287,272,274],
[277,254,0,258,257,261,277,262,259],
[280,281,292,0,274,274,292,259,286],
[275,259,293,276,0,266,281,261,274],
[285,268,289,276,284,0,280,270,273],
[272,263,273,258,269,270,0,258,269],
[289,278,288,291,289,280,292,0,274],
[283,276,291,264,276,277,281,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,272,282,286,278,285,297,271],
[258,0,245,273,270,276,270,280,249],
[278,305,0,273,265,276,274,277,268],
[268,277,277,0,264,268,262,281,274],
[264,280,285,286,0,268,272,290,278],
[272,274,274,282,282,0,279,283,260],
[265,280,276,288,278,271,0,276,282],
[253,270,273,269,260,267,274,0,253],
[279,301,282,276,272,290,268,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,270,267,268,281,279,247,249],
[279,0,279,265,271,296,265,260,257],
[280,271,0,251,275,300,277,273,275],
[283,285,299,0,281,279,285,275,263],
[282,279,275,269,0,293,272,264,266],
[269,254,250,271,257,0,270,233,250],
[271,285,273,265,278,280,0,261,248],
[303,290,277,275,286,317,289,0,284],
[301,293,275,287,284,300,302,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,297,269,273,280,279,260,258],
[257,0,266,270,264,242,238,243,250],
[253,284,0,269,282,266,259,275,253],
[281,280,281,0,296,266,264,248,263],
[277,286,268,254,0,258,265,249,255],
[270,308,284,284,292,0,283,268,275],
[271,312,291,286,285,267,0,261,262],
[290,307,275,302,301,282,289,0,280],
[292,300,297,287,295,275,288,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,353,280,281,316,269,269,264],
[301,0,291,243,288,296,249,224,257],
[197,259,0,291,251,290,242,250,211],
[270,307,259,0,294,304,242,274,279],
[269,262,299,256,0,308,345,228,211],
[234,254,260,246,242,0,261,283,213],
[281,301,308,308,205,289,0,237,227],
[281,326,300,276,322,267,313,0,250],
[286,293,339,271,339,337,323,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,267,266,253,260,264,271,267],
[276,0,275,257,280,261,255,280,257],
[283,275,0,285,243,265,269,267,261],
[284,293,265,0,276,277,279,308,275],
[297,270,307,274,0,267,272,289,266],
[290,289,285,273,283,0,274,284,255],
[286,295,281,271,278,276,0,293,262],
[279,270,283,242,261,266,257,0,253],
[283,293,289,275,284,295,288,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,258,351,232,314,318,298,285],
[256,0,250,183,185,211,252,159,244],
[292,300,0,323,283,224,362,222,319],
[199,367,227,0,199,280,356,259,310],
[318,365,267,351,0,401,379,268,312],
[236,339,326,270,149,0,322,307,297],
[232,298,188,194,171,228,0,285,261],
[252,391,328,291,282,243,265,0,354],
[265,306,231,240,238,253,289,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,282,363,251,329,420,255,371],
[339,0,317,255,267,288,414,308,353],
[268,233,0,286,210,255,226,128,273],
[187,295,264,0,298,246,326,180,182],
[299,283,340,252,0,221,372,159,213],
[221,262,295,304,329,0,273,192,220],
[130,136,324,224,178,277,0,182,206],
[295,242,422,370,391,358,368,0,356],
[179,197,277,368,337,330,344,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,263,268,272,276,286,291,266],
[278,0,276,274,270,291,272,307,257],
[287,274,0,316,292,309,294,321,277],
[282,276,234,0,241,285,263,270,229],
[278,280,258,309,0,300,317,314,298],
[274,259,241,265,250,0,259,295,290],
[264,278,256,287,233,291,0,264,278],
[259,243,229,280,236,255,286,0,290],
[284,293,273,321,252,260,272,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,243,200,206,205,223,262,302],
[282,0,206,212,225,276,273,233,296],
[307,344,0,276,278,287,189,256,282],
[350,338,274,0,319,326,325,306,334],
[344,325,272,231,0,231,324,270,283],
[345,274,263,224,319,0,314,295,342],
[327,277,361,225,226,236,0,332,345],
[288,317,294,244,280,255,218,0,247],
[248,254,268,216,267,208,205,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,265,275,274,283,269,268,264],
[287,0,277,292,288,289,286,272,284],
[285,273,0,301,306,276,283,269,265],
[275,258,249,0,256,263,252,260,268],
[276,262,244,294,0,284,264,274,251],
[267,261,274,287,266,0,249,280,257],
[281,264,267,298,286,301,0,287,291],
[282,278,281,290,276,270,263,0,271],
[286,266,285,282,299,293,259,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,262,270,254,268,255,267,265],
[279,0,275,277,281,269,281,257,273],
[288,275,0,264,275,271,268,269,276],
[280,273,286,0,267,277,258,270,266],
[296,269,275,283,0,268,274,271,281],
[282,281,279,273,282,0,280,273,270],
[295,269,282,292,276,270,0,273,281],
[283,293,281,280,279,277,277,0,274],
[285,277,274,284,269,280,269,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,312,262,291,269,295,278,300],
[287,0,296,271,297,285,293,309,303],
[238,254,0,257,258,268,249,260,262],
[288,279,293,0,280,293,295,291,272],
[259,253,292,270,0,259,276,299,270],
[281,265,282,257,291,0,281,288,284],
[255,257,301,255,274,269,0,273,283],
[272,241,290,259,251,262,277,0,290],
[250,247,288,278,280,266,267,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,236,262,269,269,248,268,278],
[277,0,262,306,284,291,256,266,245],
[314,288,0,287,299,296,258,281,292],
[288,244,263,0,258,262,248,268,269],
[281,266,251,292,0,286,274,275,264],
[281,259,254,288,264,0,258,266,250],
[302,294,292,302,276,292,0,263,279],
[282,284,269,282,275,284,287,0,284],
[272,305,258,281,286,300,271,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,283,264,274,270,261,272,277],
[279,0,282,267,259,274,256,252,263],
[267,268,0,253,286,264,259,265,277],
[286,283,297,0,314,274,304,276,268],
[276,291,264,236,0,260,263,253,257],
[280,276,286,276,290,0,271,262,286],
[289,294,291,246,287,279,0,244,281],
[278,298,285,274,297,288,306,0,290],
[273,287,273,282,293,264,269,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,287,331,280,297,256,381,287],
[227,0,256,282,287,267,310,286,223],
[263,294,0,292,237,260,260,329,280],
[219,268,258,0,276,248,269,320,271],
[270,263,313,274,0,256,227,337,249],
[253,283,290,302,294,0,286,355,336],
[294,240,290,281,323,264,0,340,280],
[169,264,221,230,213,195,210,0,242],
[263,327,270,279,301,214,270,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,267,263,259,249,315,247,306],
[246,0,221,263,250,202,285,272,273],
[283,329,0,305,292,201,345,257,319],
[287,287,245,0,289,249,291,270,287],
[291,300,258,261,0,276,312,323,365],
[301,348,349,301,274,0,348,299,383],
[235,265,205,259,238,202,0,217,309],
[303,278,293,280,227,251,333,0,301],
[244,277,231,263,185,167,241,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,248,262,270,278,279,240,272],
[276,0,263,242,265,272,284,257,269],
[302,287,0,249,273,270,272,247,277],
[288,308,301,0,271,292,298,265,284],
[280,285,277,279,0,285,284,258,278],
[272,278,280,258,265,0,280,266,265],
[271,266,278,252,266,270,0,260,243],
[310,293,303,285,292,284,290,0,270],
[278,281,273,266,272,285,307,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,291,287,274,266,269,253,280],
[260,0,278,285,274,264,283,277,281],
[259,272,0,278,254,258,256,270,276],
[263,265,272,0,280,279,256,246,274],
[276,276,296,270,0,271,274,256,278],
[284,286,292,271,279,0,277,269,290],
[281,267,294,294,276,273,0,268,281],
[297,273,280,304,294,281,282,0,270],
[270,269,274,276,272,260,269,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,259,256,263,291,258,269,268],
[275,0,271,269,274,286,274,285,267],
[291,279,0,273,284,285,262,289,266],
[294,281,277,0,266,286,281,283,286],
[287,276,266,284,0,293,271,286,277],
[259,264,265,264,257,0,254,266,271],
[292,276,288,269,279,296,0,286,297],
[281,265,261,267,264,284,264,0,272],
[282,283,284,264,273,279,253,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,295,270,289,281,259,276,263],
[258,0,278,301,276,280,267,268,278],
[255,272,0,285,280,273,251,271,264],
[280,249,265,0,270,273,254,275,240],
[261,274,270,280,0,275,264,270,289],
[269,270,277,277,275,0,247,238,272],
[291,283,299,296,286,303,0,290,274],
[274,282,279,275,280,312,260,0,266],
[287,272,286,310,261,278,276,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,280,268,277,294,271,282,299],
[273,0,275,294,289,286,278,282,302],
[270,275,0,247,268,279,274,278,284],
[282,256,303,0,278,283,280,267,304],
[273,261,282,272,0,288,277,250,294],
[256,264,271,267,262,0,271,252,276],
[279,272,276,270,273,279,0,279,290],
[268,268,272,283,300,298,271,0,299],
[251,248,266,246,256,274,260,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,269,293,299,282,266,258,282],
[261,0,282,276,325,289,289,287,276],
[281,268,0,321,320,290,298,303,266],
[257,274,229,0,297,243,272,277,256],
[251,225,230,253,0,243,284,275,265],
[268,261,260,307,307,0,274,319,274],
[284,261,252,278,266,276,0,298,263],
[292,263,247,273,275,231,252,0,248],
[268,274,284,294,285,276,287,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,300,276,275,276,284,283,316],
[252,0,261,289,268,239,264,289,278],
[250,289,0,276,238,248,258,284,287],
[274,261,274,0,265,251,280,262,302],
[275,282,312,285,0,270,272,288,294],
[274,311,302,299,280,0,288,283,299],
[266,286,292,270,278,262,0,275,303],
[267,261,266,288,262,267,275,0,302],
[234,272,263,248,256,251,247,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,271,279,299,287,285,286,263],
[283,0,283,285,289,272,283,291,275],
[279,267,0,275,271,285,269,284,269],
[271,265,275,0,269,265,277,287,248],
[251,261,279,281,0,265,269,293,267],
[263,278,265,285,285,0,269,292,269],
[265,267,281,273,281,281,0,299,271],
[264,259,266,263,257,258,251,0,247],
[287,275,281,302,283,281,279,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,269,295,292,290,274,292,292],
[283,0,268,275,289,292,275,276,280],
[281,282,0,274,277,295,282,287,266],
[255,275,276,0,288,269,270,260,278],
[258,261,273,262,0,265,256,257,252],
[260,258,255,281,285,0,268,276,268],
[276,275,268,280,294,282,0,281,275],
[258,274,263,290,293,274,269,0,278],
[258,270,284,272,298,282,275,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,307,292,281,296,292,274,295],
[251,0,281,266,293,288,288,277,247],
[243,269,0,275,267,269,273,257,231],
[258,284,275,0,265,291,259,274,253],
[269,257,283,285,0,300,286,272,251],
[254,262,281,259,250,0,263,269,250],
[258,262,277,291,264,287,0,271,255],
[276,273,293,276,278,281,279,0,270],
[255,303,319,297,299,300,295,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,271,295,295,291,268,309,276],
[264,0,277,296,275,263,273,283,273],
[279,273,0,303,294,282,268,292,263],
[255,254,247,0,252,262,261,255,268],
[255,275,256,298,0,258,274,282,253],
[259,287,268,288,292,0,255,282,281],
[282,277,282,289,276,295,0,283,258],
[241,267,258,295,268,268,267,0,263],
[274,277,287,282,297,269,292,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,246,280,248,254,238,253,252],
[302,0,283,286,302,286,286,283,267],
[304,267,0,292,286,281,285,291,289],
[270,264,258,0,286,270,250,260,283],
[302,248,264,264,0,287,293,260,283],
[296,264,269,280,263,0,277,277,275],
[312,264,265,300,257,273,0,268,264],
[297,267,259,290,290,273,282,0,262],
[298,283,261,267,267,275,286,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,258,251,263,271,270,295,265],
[295,0,285,270,291,270,292,306,303],
[292,265,0,294,308,266,294,285,302],
[299,280,256,0,285,288,271,314,298],
[287,259,242,265,0,234,268,274,286],
[279,280,284,262,316,0,291,300,307],
[280,258,256,279,282,259,0,282,261],
[255,244,265,236,276,250,268,0,267],
[285,247,248,252,264,243,289,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,272,273,286,243,282,291,287],
[273,0,252,293,261,253,270,284,276],
[278,298,0,291,274,252,270,305,279],
[277,257,259,0,255,241,254,280,251],
[264,289,276,295,0,266,296,292,283],
[307,297,298,309,284,0,276,321,271],
[268,280,280,296,254,274,0,285,263],
[259,266,245,270,258,229,265,0,268],
[263,274,271,299,267,279,287,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,221,299,216,239,253,273,235],
[312,0,325,266,281,295,293,274,239],
[329,225,0,295,243,292,283,293,265],
[251,284,255,0,222,241,266,255,265],
[334,269,307,328,0,285,295,284,265],
[311,255,258,309,265,0,287,251,281],
[297,257,267,284,255,263,0,217,269],
[277,276,257,295,266,299,333,0,275],
[315,311,285,285,285,269,281,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,298,295,290,287,284,268,270],
[255,0,270,260,273,263,275,233,251],
[252,280,0,257,266,264,262,270,251],
[255,290,293,0,287,270,278,276,264],
[260,277,284,263,0,254,259,269,251],
[263,287,286,280,296,0,283,272,268],
[266,275,288,272,291,267,0,268,264],
[282,317,280,274,281,278,282,0,279],
[280,299,299,286,299,282,286,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,261,273,275,309,253,282,267],
[279,0,256,275,284,260,275,270,268],
[289,294,0,264,286,308,258,274,268],
[277,275,286,0,272,290,307,320,285],
[275,266,264,278,0,282,261,284,250],
[241,290,242,260,268,0,265,268,244],
[297,275,292,243,289,285,0,284,262],
[268,280,276,230,266,282,266,0,217],
[283,282,282,265,300,306,288,333,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,251,273,271,281,270,259,268],
[273,0,260,295,277,290,264,251,280],
[299,290,0,288,269,291,279,276,285],
[277,255,262,0,275,294,259,262,275],
[279,273,281,275,0,291,260,266,275],
[269,260,259,256,259,0,246,243,241],
[280,286,271,291,290,304,0,279,290],
[291,299,274,288,284,307,271,0,278],
[282,270,265,275,275,309,260,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,265,293,257,267,271,258,272],
[300,0,280,282,273,288,284,263,279],
[285,270,0,314,296,327,299,279,303],
[257,268,236,0,266,282,228,270,280],
[293,277,254,284,0,266,291,273,280],
[283,262,223,268,284,0,264,256,276],
[279,266,251,322,259,286,0,276,285],
[292,287,271,280,277,294,274,0,286],
[278,271,247,270,270,274,265,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,235,256,245,273,272,252,256],
[285,0,261,269,263,271,280,274,271],
[315,289,0,275,289,285,284,295,285],
[294,281,275,0,265,276,283,284,267],
[305,287,261,285,0,300,291,289,283],
[277,279,265,274,250,0,276,274,263],
[278,270,266,267,259,274,0,266,261],
[298,276,255,266,261,276,284,0,278],
[294,279,265,283,267,287,289,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,272,251,228,255,265,269,237],
[289,0,296,266,279,298,285,292,263],
[278,254,0,253,271,260,266,299,250],
[299,284,297,0,261,304,276,298,297],
[322,271,279,289,0,287,296,307,270],
[295,252,290,246,263,0,277,281,241],
[285,265,284,274,254,273,0,273,269],
[281,258,251,252,243,269,277,0,234],
[313,287,300,253,280,309,281,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,283,264,263,252,239,291,267],
[237,0,257,244,234,254,223,240,265],
[267,293,0,279,292,267,247,275,280],
[286,306,271,0,280,282,266,291,276],
[287,316,258,270,0,251,257,275,271],
[298,296,283,268,299,0,276,296,278],
[311,327,303,284,293,274,0,290,264],
[259,310,275,259,275,254,260,0,246],
[283,285,270,274,279,272,286,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,248,296,267,287,284,285,258],
[229,0,287,296,286,327,277,317,293],
[302,263,0,279,262,308,248,309,256],
[254,254,271,0,254,333,225,279,286],
[283,264,288,296,0,296,233,301,217],
[263,223,242,217,254,0,155,247,224],
[266,273,302,325,317,395,0,368,326],
[265,233,241,271,249,303,182,0,210],
[292,257,294,264,333,326,224,340,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,266,296,305,282,270,279,275],
[260,0,258,285,292,268,268,295,272],
[284,292,0,279,302,282,278,284,274],
[254,265,271,0,283,273,266,271,245],
[245,258,248,267,0,271,262,270,237],
[268,282,268,277,279,0,277,283,254],
[280,282,272,284,288,273,0,269,268],
[271,255,266,279,280,267,281,0,255],
[275,278,276,305,313,296,282,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,292,299,277,293,296,291,263],
[269,0,293,287,282,265,302,294,285],
[258,257,0,274,265,271,280,278,260],
[251,263,276,0,268,267,271,254,254],
[273,268,285,282,0,285,292,287,270],
[257,285,279,283,265,0,284,274,264],
[254,248,270,279,258,266,0,261,255],
[259,256,272,296,263,276,289,0,253],
[287,265,290,296,280,286,295,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,300,250,292,281,276,300,320],
[238,0,304,244,213,250,268,200,255],
[250,246,0,244,215,280,279,258,303],
[300,306,306,0,274,228,277,294,304],
[258,337,335,276,0,230,305,293,307],
[269,300,270,322,320,0,299,316,373],
[274,282,271,273,245,251,0,312,297],
[250,350,292,256,257,234,238,0,331],
[230,295,247,246,243,177,253,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,266,281,261,256,265,256,271],
[287,0,257,272,286,253,278,259,278],
[284,293,0,257,258,287,284,289,293],
[269,278,293,0,261,256,282,275,282],
[289,264,292,289,0,283,280,279,284],
[294,297,263,294,267,0,271,270,276],
[285,272,266,268,270,279,0,262,273],
[294,291,261,275,271,280,288,0,279],
[279,272,257,268,266,274,277,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,284,302,299,277,284,299,275],
[241,0,261,272,282,250,260,268,238],
[266,289,0,269,285,273,259,284,265],
[248,278,281,0,297,266,279,273,269],
[251,268,265,253,0,255,288,259,241],
[273,300,277,284,295,0,298,313,293],
[266,290,291,271,262,252,0,284,268],
[251,282,266,277,291,237,266,0,247],
[275,312,285,281,309,257,282,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,275,262,291,266,284,297,295],
[266,0,275,276,284,295,278,271,299],
[275,275,0,287,282,268,267,292,292],
[288,274,263,0,289,284,270,309,308],
[259,266,268,261,0,268,269,294,299],
[284,255,282,266,282,0,267,288,280],
[266,272,283,280,281,283,0,295,294],
[253,279,258,241,256,262,255,0,289],
[255,251,258,242,251,270,256,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,281,272,268,304,280,271,266],
[277,0,269,268,253,306,257,295,271],
[269,281,0,270,272,284,273,287,281],
[278,282,280,0,268,296,280,292,279],
[282,297,278,282,0,309,270,306,274],
[246,244,266,254,241,0,253,270,258],
[270,293,277,270,280,297,0,288,287],
[279,255,263,258,244,280,262,0,261],
[284,279,269,271,276,292,263,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,314,282,310,287,269,267,285],
[288,0,284,289,303,281,298,273,284],
[236,266,0,277,270,264,271,267,260],
[268,261,273,0,291,270,283,265,272],
[240,247,280,259,0,258,241,267,266],
[263,269,286,280,292,0,295,278,267],
[281,252,279,267,309,255,0,277,301],
[283,277,283,285,283,272,273,0,273],
[265,266,290,278,284,283,249,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,246,287,229,311,212,266,331],
[319,0,317,330,284,302,249,320,283],
[304,233,0,281,257,329,376,303,264],
[263,220,269,0,194,236,237,243,276],
[321,266,293,356,0,318,278,229,333],
[239,248,221,314,232,0,307,294,301],
[338,301,174,313,272,243,0,307,263],
[284,230,247,307,321,256,243,0,324],
[219,267,286,274,217,249,287,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,260,251,263,260,257,284,268],
[300,0,285,288,267,282,277,282,294],
[290,265,0,280,258,273,276,289,285],
[299,262,270,0,263,284,267,276,266],
[287,283,292,287,0,288,272,286,292],
[290,268,277,266,262,0,266,261,275],
[293,273,274,283,278,284,0,278,285],
[266,268,261,274,264,289,272,0,285],
[282,256,265,284,258,275,265,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,274,268,263,279,257,291,282],
[280,0,281,277,278,288,263,289,275],
[276,269,0,271,278,286,268,281,299],
[282,273,279,0,282,284,276,299,289],
[287,272,272,268,0,301,261,275,297],
[271,262,264,266,249,0,263,275,271],
[293,287,282,274,289,287,0,285,301],
[259,261,269,251,275,275,265,0,285],
[268,275,251,261,253,279,249,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,315,236,270,251,296,267,265],
[281,0,307,281,240,261,250,251,266],
[235,243,0,255,275,268,260,232,229],
[314,269,295,0,260,290,295,262,283],
[280,310,275,290,0,256,281,244,286],
[299,289,282,260,294,0,327,300,277],
[254,300,290,255,269,223,0,261,268],
[283,299,318,288,306,250,289,0,297],
[285,284,321,267,264,273,282,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,256,277,300,275,236,278,266],
[281,0,276,275,292,274,249,279,281],
[294,274,0,280,313,285,267,269,270],
[273,275,270,0,304,266,265,265,253],
[250,258,237,246,0,258,250,279,260],
[275,276,265,284,292,0,258,253,264],
[314,301,283,285,300,292,0,262,254],
[272,271,281,285,271,297,288,0,283],
[284,269,280,297,290,286,296,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,337,318,303,328,272,275,310,291],
[213,0,277,250,257,232,226,228,281],
[232,273,0,271,281,248,217,260,277],
[247,300,279,0,286,264,259,279,304],
[222,293,269,264,0,245,254,233,267],
[278,318,302,286,305,0,260,281,283],
[275,324,333,291,296,290,0,272,282],
[240,322,290,271,317,269,278,0,301],
[259,269,273,246,283,267,268,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,324,273,260,282,284,243,271],
[285,0,342,237,236,255,280,266,265],
[226,208,0,228,242,204,253,253,221],
[277,313,322,0,240,265,237,285,276],
[290,314,308,310,0,284,302,299,270],
[268,295,346,285,266,0,290,299,275],
[266,270,297,313,248,260,0,270,252],
[307,284,297,265,251,251,280,0,299],
[279,285,329,274,280,275,298,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,300,275,278,282,285,272,265],
[270,0,284,270,264,272,262,253,272],
[250,266,0,267,254,244,271,235,246],
[275,280,283,0,282,279,298,294,279],
[272,286,296,268,0,282,284,316,279],
[268,278,306,271,268,0,291,290,283],
[265,288,279,252,266,259,0,263,275],
[278,297,315,256,234,260,287,0,260],
[285,278,304,271,271,267,275,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,267,245,264,269,259,263,271],
[313,0,295,259,296,264,292,298,283],
[283,255,0,296,293,288,325,289,291],
[305,291,254,0,300,257,317,301,261],
[286,254,257,250,0,270,302,263,241],
[281,286,262,293,280,0,296,268,241],
[291,258,225,233,248,254,0,242,251],
[287,252,261,249,287,282,308,0,260],
[279,267,259,289,309,309,299,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,311,280,279,271,252,302,283],
[241,0,236,262,246,218,245,272,269],
[239,314,0,275,256,267,246,275,257],
[270,288,275,0,228,276,262,263,278],
[271,304,294,322,0,251,281,271,284],
[279,332,283,274,299,0,277,290,272],
[298,305,304,288,269,273,0,299,275],
[248,278,275,287,279,260,251,0,247],
[267,281,293,272,266,278,275,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,285,268,282,275,269,279,284],
[269,0,286,276,276,267,270,277,284],
[265,264,0,265,268,260,256,264,257],
[282,274,285,0,275,274,260,273,274],
[268,274,282,275,0,273,265,280,261],
[275,283,290,276,277,0,272,277,270],
[281,280,294,290,285,278,0,286,275],
[271,273,286,277,270,273,264,0,255],
[266,266,293,276,289,280,275,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,223,326,454,307,359,308,195],
[242,0,164,245,261,259,153,169,243],
[327,386,0,308,264,351,309,260,322],
[224,305,242,0,259,359,341,259,293],
[96,289,286,291,0,240,196,206,226],
[243,291,199,191,310,0,274,140,221],
[191,397,241,209,354,276,0,115,332],
[242,381,290,291,344,410,435,0,381],
[355,307,228,257,324,329,218,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,244,279,286,289,279,299,287],
[261,0,244,257,263,251,250,265,261],
[306,306,0,294,297,299,270,283,287],
[271,293,256,0,279,292,262,271,280],
[264,287,253,271,0,272,233,262,258],
[261,299,251,258,278,0,241,273,268],
[271,300,280,288,317,309,0,270,295],
[251,285,267,279,288,277,280,0,275],
[263,289,263,270,292,282,255,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,261,227,262,238,229,284,215],
[314,0,308,272,309,276,263,300,293],
[289,242,0,291,280,259,266,311,265],
[323,278,259,0,314,274,278,292,272],
[288,241,270,236,0,240,252,282,272],
[312,274,291,276,310,0,265,298,261],
[321,287,284,272,298,285,0,302,303],
[266,250,239,258,268,252,248,0,247],
[335,257,285,278,278,289,247,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,278,293,257,258,267,241,273],
[291,0,266,295,264,279,301,271,278],
[272,284,0,281,277,233,281,264,258],
[257,255,269,0,270,251,293,255,254],
[293,286,273,280,0,274,284,286,275],
[292,271,317,299,276,0,297,261,261],
[283,249,269,257,266,253,0,245,264],
[309,279,286,295,264,289,305,0,260],
[277,272,292,296,275,289,286,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,267,258,271,256,256,268,262],
[285,0,277,265,284,269,265,267,275],
[283,273,0,268,269,274,264,269,273],
[292,285,282,0,296,283,268,269,279],
[279,266,281,254,0,256,260,263,247],
[294,281,276,267,294,0,274,268,262],
[294,285,286,282,290,276,0,261,270],
[282,283,281,281,287,282,289,0,264],
[288,275,277,271,303,288,280,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,294,295,289,310,270,283,311],
[267,0,296,277,251,295,263,276,285],
[256,254,0,284,236,244,238,254,263],
[255,273,266,0,244,275,248,241,260],
[261,299,314,306,0,304,280,289,312],
[240,255,306,275,246,0,263,255,289],
[280,287,312,302,270,287,0,285,303],
[267,274,296,309,261,295,265,0,288],
[239,265,287,290,238,261,247,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,256,252,257,242,273,281,274],
[292,0,283,274,302,260,267,276,285],
[294,267,0,274,311,297,264,306,283],
[298,276,276,0,289,275,262,262,289],
[293,248,239,261,0,294,255,273,265],
[308,290,253,275,256,0,256,275,265],
[277,283,286,288,295,294,0,282,264],
[269,274,244,288,277,275,268,0,271],
[276,265,267,261,285,285,286,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,273,267,278,279,278,277,269],
[267,0,263,260,274,283,276,279,259],
[277,287,0,252,267,280,275,260,254],
[283,290,298,0,296,289,286,269,280],
[272,276,283,254,0,288,275,271,255],
[271,267,270,261,262,0,260,264,262],
[272,274,275,264,275,290,0,263,266],
[273,271,290,281,279,286,287,0,270],
[281,291,296,270,295,288,284,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,259,261,279,279,270,278,273],
[273,0,272,273,290,308,270,283,288],
[291,278,0,278,287,297,268,301,310],
[289,277,272,0,282,294,269,281,282],
[271,260,263,268,0,290,270,283,278],
[271,242,253,256,260,0,258,268,277],
[280,280,282,281,280,292,0,292,273],
[272,267,249,269,267,282,258,0,262],
[277,262,240,268,272,273,277,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,295,276,269,276,271,275,297],
[275,0,300,278,279,275,279,281,282],
[255,250,0,254,270,252,262,262,261],
[274,272,296,0,278,275,269,260,282],
[281,271,280,272,0,273,251,269,286],
[274,275,298,275,277,0,259,281,291],
[279,271,288,281,299,291,0,273,288],
[275,269,288,290,281,269,277,0,283],
[253,268,289,268,264,259,262,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,195,268,279,310,352,340,243],
[235,0,120,233,195,203,296,187,124],
[355,430,0,211,389,304,293,169,134],
[282,317,339,0,358,284,379,275,241],
[271,355,161,192,0,286,359,214,186],
[240,347,246,266,264,0,298,239,145],
[198,254,257,171,191,252,0,295,304],
[210,363,381,275,336,311,255,0,254],
[307,426,416,309,364,405,246,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,298,253,252,244,218,245,251],
[283,0,288,264,274,268,270,254,248],
[252,262,0,284,285,252,251,268,280],
[297,286,266,0,271,262,256,255,286],
[298,276,265,279,0,267,263,272,280],
[306,282,298,288,283,0,267,266,272],
[332,280,299,294,287,283,0,273,285],
[305,296,282,295,278,284,277,0,275],
[299,302,270,264,270,278,265,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,298,278,254,262,252,260,249],
[303,0,273,286,252,258,276,285,245],
[252,277,0,290,267,273,256,270,249],
[272,264,260,0,259,252,287,264,264],
[296,298,283,291,0,302,274,295,270],
[288,292,277,298,248,0,279,286,278],
[298,274,294,263,276,271,0,280,293],
[290,265,280,286,255,264,270,0,261],
[301,305,301,286,280,272,257,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,263,260,287,295,278,257,274],
[276,0,254,285,293,276,292,290,262],
[287,296,0,285,297,286,271,279,279],
[290,265,265,0,281,270,278,273,266],
[263,257,253,269,0,269,284,274,262],
[255,274,264,280,281,0,292,288,282],
[272,258,279,272,266,258,0,269,269],
[293,260,271,277,276,262,281,0,264],
[276,288,271,284,288,268,281,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,256,274,261,287,224,289,237],
[287,0,263,274,289,274,255,254,231],
[294,287,0,292,310,337,291,304,275],
[276,276,258,0,320,275,215,298,257],
[289,261,240,230,0,285,216,281,253],
[263,276,213,275,265,0,220,276,242],
[326,295,259,335,334,330,0,352,284],
[261,296,246,252,269,274,198,0,244],
[313,319,275,293,297,308,266,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,273,264,265,284,267,281,273],
[284,0,273,264,277,265,270,269,264],
[277,277,0,281,256,253,263,259,266],
[286,286,269,0,278,274,281,277,280],
[285,273,294,272,0,269,264,262,255],
[266,285,297,276,281,0,274,266,261],
[283,280,287,269,286,276,0,270,272],
[269,281,291,273,288,284,280,0,286],
[277,286,284,270,295,289,278,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,286,303,288,262,277,277,277],
[260,0,255,268,278,258,270,258,272],
[264,295,0,302,295,282,311,280,268],
[247,282,248,0,271,269,278,276,265],
[262,272,255,279,0,254,279,280,268],
[288,292,268,281,296,0,281,269,281],
[273,280,239,272,271,269,0,264,268],
[273,292,270,274,270,281,286,0,280],
[273,278,282,285,282,269,282,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,221,252,223,229,247,237,272],
[302,0,275,250,284,261,316,315,299],
[329,275,0,306,291,285,304,296,308],
[298,300,244,0,309,326,322,309,293],
[327,266,259,241,0,276,307,272,292],
[321,289,265,224,274,0,294,260,273],
[303,234,246,228,243,256,0,275,302],
[313,235,254,241,278,290,275,0,291],
[278,251,242,257,258,277,248,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,292,293,279,312,285,290,271],
[271,0,278,279,272,315,272,280,281],
[258,272,0,268,289,300,262,271,250],
[257,271,282,0,290,303,270,275,250],
[271,278,261,260,0,280,270,268,239],
[238,235,250,247,270,0,275,250,261],
[265,278,288,280,280,275,0,247,258],
[260,270,279,275,282,300,303,0,279],
[279,269,300,300,311,289,292,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,255,260,252,242,258,270,291],
[292,0,264,288,263,268,296,290,291],
[295,286,0,268,282,261,285,271,299],
[290,262,282,0,269,267,298,283,288],
[298,287,268,281,0,264,291,279,292],
[308,282,289,283,286,0,296,275,295],
[292,254,265,252,259,254,0,257,278],
[280,260,279,267,271,275,293,0,285],
[259,259,251,262,258,255,272,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,307,307,288,304,270,277,285],
[246,0,281,284,274,297,279,273,276],
[243,269,0,268,267,273,261,272,272],
[243,266,282,0,272,285,267,272,256],
[262,276,283,278,0,290,266,289,269],
[246,253,277,265,260,0,260,250,279],
[280,271,289,283,284,290,0,274,283],
[273,277,278,278,261,300,276,0,271],
[265,274,278,294,281,271,267,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,316,336,266,276,317,304,285],
[242,0,276,293,266,282,297,283,263],
[234,274,0,282,218,261,298,268,242],
[214,257,268,0,242,223,261,285,222],
[284,284,332,308,0,279,290,292,275],
[274,268,289,327,271,0,294,288,281],
[233,253,252,289,260,256,0,289,238],
[246,267,282,265,258,262,261,0,241],
[265,287,308,328,275,269,312,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,280,277,288,280,263,288,282],
[282,0,294,294,283,286,274,305,288],
[270,256,0,279,253,273,276,291,291],
[273,256,271,0,258,254,273,276,270],
[262,267,297,292,0,276,295,306,286],
[270,264,277,296,274,0,290,295,298],
[287,276,274,277,255,260,0,292,288],
[262,245,259,274,244,255,258,0,268],
[268,262,259,280,264,252,262,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,291,257,285,273,283,286,274],
[236,0,231,268,239,220,255,271,242],
[259,319,0,261,259,249,273,275,266],
[293,282,289,0,267,249,301,282,257],
[265,311,291,283,0,282,303,286,289],
[277,330,301,301,268,0,283,278,291],
[267,295,277,249,247,267,0,272,303],
[264,279,275,268,264,272,278,0,269],
[276,308,284,293,261,259,247,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,299,271,273,290,283,271,257],
[260,0,287,267,245,277,270,256,264],
[251,263,0,251,254,274,275,258,255],
[279,283,299,0,279,279,294,264,293],
[277,305,296,271,0,281,290,288,283],
[260,273,276,271,269,0,267,265,266],
[267,280,275,256,260,283,0,266,259],
[279,294,292,286,262,285,284,0,287],
[293,286,295,257,267,284,291,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,295,304,287,310,323,267,296],
[284,0,252,258,317,271,269,259,329],
[255,298,0,305,261,280,268,308,328],
[246,292,245,0,237,262,190,216,319],
[263,233,289,313,0,279,198,278,266],
[240,279,270,288,271,0,228,249,335],
[227,281,282,360,352,322,0,247,349],
[283,291,242,334,272,301,303,0,344],
[254,221,222,231,284,215,201,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,268,282,299,299,293,292,296],
[264,0,278,274,279,273,277,261,285],
[282,272,0,279,298,289,291,261,274],
[268,276,271,0,304,287,268,268,273],
[251,271,252,246,0,265,262,259,253],
[251,277,261,263,285,0,264,266,255],
[257,273,259,282,288,286,0,265,276],
[258,289,289,282,291,284,285,0,304],
[254,265,276,277,297,295,274,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,268,266,268,273,264,256,281],
[296,0,268,275,270,268,280,270,277],
[282,282,0,273,283,268,289,284,276],
[284,275,277,0,275,281,290,295,269],
[282,280,267,275,0,262,287,275,279],
[277,282,282,269,288,0,295,286,275],
[286,270,261,260,263,255,0,275,258],
[294,280,266,255,275,264,275,0,253],
[269,273,274,281,271,275,292,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,297,293,309,280,284,294,274],
[252,0,266,274,274,281,272,278,282],
[253,284,0,276,274,266,268,281,266],
[257,276,274,0,273,256,252,285,262],
[241,276,276,277,0,261,260,273,261],
[270,269,284,294,289,0,272,289,284],
[266,278,282,298,290,278,0,284,263],
[256,272,269,265,277,261,266,0,274],
[276,268,284,288,289,266,287,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,247,272,240,276,238,214,273],
[274,0,259,292,265,278,299,275,257],
[303,291,0,333,281,276,260,256,320],
[278,258,217,0,218,268,233,183,246],
[310,285,269,332,0,316,280,282,301],
[274,272,274,282,234,0,239,237,313],
[312,251,290,317,270,311,0,299,308],
[336,275,294,367,268,313,251,0,296],
[277,293,230,304,249,237,242,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,248,281,361,331,333,278,357],
[249,0,287,233,425,298,331,267,264],
[302,263,0,204,320,295,287,270,343],
[269,317,346,0,284,273,243,328,285],
[189,125,230,266,0,197,188,165,227],
[219,252,255,277,353,0,249,308,286],
[217,219,263,307,362,301,0,233,287],
[272,283,280,222,385,242,317,0,355],
[193,286,207,265,323,264,263,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,292,261,270,263,262,280,296],
[286,0,285,277,284,289,263,274,305],
[258,265,0,254,262,273,254,267,271],
[289,273,296,0,295,290,297,296,304],
[280,266,288,255,0,283,275,275,277],
[287,261,277,260,267,0,268,264,276],
[288,287,296,253,275,282,0,283,295],
[270,276,283,254,275,286,267,0,270],
[254,245,279,246,273,274,255,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,267,262,290,268,271,295,270],
[281,0,278,271,290,269,271,289,273],
[283,272,0,271,270,278,267,281,272],
[288,279,279,0,285,286,290,272,277],
[260,260,280,265,0,287,279,264,270],
[282,281,272,264,263,0,273,276,272],
[279,279,283,260,271,277,0,280,263],
[255,261,269,278,286,274,270,0,259],
[280,277,278,273,280,278,287,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,294,267,315,279,284,247,288],
[238,0,271,214,255,250,234,245,228],
[256,279,0,251,284,252,256,221,238],
[283,336,299,0,325,301,271,291,292],
[235,295,266,225,0,262,253,247,236],
[271,300,298,249,288,0,272,264,255],
[266,316,294,279,297,278,0,276,274],
[303,305,329,259,303,286,274,0,249],
[262,322,312,258,314,295,276,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,226,294,272,224,299,307,216],
[297,0,227,312,270,248,311,329,256],
[324,323,0,319,315,295,336,329,249],
[256,238,231,0,269,193,292,315,282],
[278,280,235,281,0,251,285,336,242],
[326,302,255,357,299,0,382,341,308],
[251,239,214,258,265,168,0,286,202],
[243,221,221,235,214,209,264,0,226],
[334,294,301,268,308,242,348,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,247,230,282,247,245,248,263],
[286,0,250,248,298,238,270,272,268],
[303,300,0,288,320,268,277,312,303],
[320,302,262,0,309,262,266,278,295],
[268,252,230,241,0,233,250,254,271],
[303,312,282,288,317,0,271,314,296],
[305,280,273,284,300,279,0,294,296],
[302,278,238,272,296,236,256,0,285],
[287,282,247,255,279,254,254,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,236,257,250,286,260,272,275],
[274,0,220,280,273,231,263,258,263],
[314,330,0,311,279,266,313,327,317],
[293,270,239,0,247,269,311,266,289],
[300,277,271,303,0,262,284,262,281],
[264,319,284,281,288,0,298,298,288],
[290,287,237,239,266,252,0,282,289],
[278,292,223,284,288,252,268,0,274],
[275,287,233,261,269,262,261,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,297,230,295,263,306,274,260],
[270,0,304,266,272,333,288,281,283],
[253,246,0,227,264,257,265,254,242],
[320,284,323,0,306,326,328,271,296],
[255,278,286,244,0,282,277,257,263],
[287,217,293,224,268,0,262,252,294],
[244,262,285,222,273,288,0,287,270],
[276,269,296,279,293,298,263,0,287],
[290,267,308,254,287,256,280,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,276,274,292,298,279,262,285],
[299,0,279,268,279,292,296,272,283],
[274,271,0,289,277,271,298,267,294],
[276,282,261,0,278,286,289,275,276],
[258,271,273,272,0,282,287,262,285],
[252,258,279,264,268,0,289,266,269],
[271,254,252,261,263,261,0,242,272],
[288,278,283,275,288,284,308,0,303],
[265,267,256,274,265,281,278,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,271,242,247,263,244,266,237],
[290,0,261,288,292,282,264,285,241],
[279,289,0,281,250,265,246,253,277],
[308,262,269,0,244,280,246,261,248],
[303,258,300,306,0,314,276,264,306],
[287,268,285,270,236,0,234,254,269],
[306,286,304,304,274,316,0,294,312],
[284,265,297,289,286,296,256,0,295],
[313,309,273,302,244,281,238,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,254,262,288,238,265,263,246],
[276,0,243,252,277,247,247,244,248],
[296,307,0,273,296,285,299,283,271],
[288,298,277,0,292,265,290,282,270],
[262,273,254,258,0,251,261,271,238],
[312,303,265,285,299,0,295,295,277],
[285,303,251,260,289,255,0,281,259],
[287,306,267,268,279,255,269,0,267],
[304,302,279,280,312,273,291,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,284,312,292,275,304,292,279],
[253,0,281,280,267,246,263,250,235],
[266,269,0,268,277,253,301,277,254],
[238,270,282,0,295,255,265,294,253],
[258,283,273,255,0,243,302,266,247],
[275,304,297,295,307,0,305,316,275],
[246,287,249,285,248,245,0,244,250],
[258,300,273,256,284,234,306,0,245],
[271,315,296,297,303,275,300,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,288,292,263,277,274,295,282],
[270,0,270,270,259,285,261,286,249],
[262,280,0,275,282,280,259,282,252],
[258,280,275,0,259,267,254,278,273],
[287,291,268,291,0,274,271,301,273],
[273,265,270,283,276,0,276,288,246],
[276,289,291,296,279,274,0,292,269],
[255,264,268,272,249,262,258,0,273],
[268,301,298,277,277,304,281,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,248,266,240,282,232,275,253],
[288,0,328,256,279,252,295,232,269],
[302,222,0,253,224,284,293,277,252],
[284,294,297,0,256,277,297,253,260],
[310,271,326,294,0,320,307,242,283],
[268,298,266,273,230,0,248,240,267],
[318,255,257,253,243,302,0,246,228],
[275,318,273,297,308,310,304,0,322],
[297,281,298,290,267,283,322,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,267,275,279,245,267,279,256],
[289,0,281,280,285,283,248,292,268],
[283,269,0,299,283,255,268,302,292],
[275,270,251,0,269,260,267,274,253],
[271,265,267,281,0,267,275,268,247],
[305,267,295,290,283,0,274,280,261],
[283,302,282,283,275,276,0,283,278],
[271,258,248,276,282,270,267,0,234],
[294,282,258,297,303,289,272,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,273,317,266,240,263,264,287],
[315,0,281,291,254,269,260,255,247],
[277,269,0,288,248,260,218,247,246],
[233,259,262,0,218,243,272,240,232],
[284,296,302,332,0,266,273,295,300],
[310,281,290,307,284,0,284,264,309],
[287,290,332,278,277,266,0,284,262],
[286,295,303,310,255,286,266,0,342],
[263,303,304,318,250,241,288,208,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,347,320,308,293,275,311,327],
[244,0,311,276,272,285,226,285,246],
[203,239,0,246,216,218,239,246,226],
[230,274,304,0,271,260,248,252,242],
[242,278,334,279,0,253,262,232,241],
[257,265,332,290,297,0,307,316,291],
[275,324,311,302,288,243,0,336,269],
[239,265,304,298,318,234,214,0,241],
[223,304,324,308,309,259,281,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,285,270,283,284,271,260,285],
[281,0,276,286,276,275,279,268,286],
[265,274,0,274,280,268,261,253,301],
[280,264,276,0,294,257,248,277,264],
[267,274,270,256,0,247,243,258,271],
[266,275,282,293,303,0,281,271,285],
[279,271,289,302,307,269,0,299,290],
[290,282,297,273,292,279,251,0,289],
[265,264,249,286,279,265,260,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,270,263,284,325,285,297,256],
[273,0,320,318,327,275,296,289,312],
[280,230,0,287,303,303,293,292,308],
[287,232,263,0,282,319,256,279,274],
[266,223,247,268,0,259,260,256,279],
[225,275,247,231,291,0,255,234,240],
[265,254,257,294,290,295,0,251,275],
[253,261,258,271,294,316,299,0,250],
[294,238,242,276,271,310,275,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,270,269,270,285,250,263,270],
[264,0,267,277,268,271,256,260,274],
[280,283,0,257,276,275,267,274,271],
[281,273,293,0,276,279,263,278,281],
[280,282,274,274,0,262,261,280,278],
[265,279,275,271,288,0,264,276,271],
[300,294,283,287,289,286,0,285,274],
[287,290,276,272,270,274,265,0,269],
[280,276,279,269,272,279,276,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,257,270,236,241,238,194,236],
[300,0,234,272,270,309,252,241,248],
[293,316,0,281,240,304,247,298,267],
[280,278,269,0,284,281,231,268,264],
[314,280,310,266,0,268,243,254,252],
[309,241,246,269,282,0,236,285,276],
[312,298,303,319,307,314,0,273,258],
[356,309,252,282,296,265,277,0,284],
[314,302,283,286,298,274,292,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,286,274,281,263,265,283,278],
[270,0,262,279,276,275,276,283,279],
[264,288,0,276,288,273,274,276,285],
[276,271,274,0,280,267,271,267,275],
[269,274,262,270,0,263,270,269,272],
[287,275,277,283,287,0,285,276,271],
[285,274,276,279,280,265,0,273,271],
[267,267,274,283,281,274,277,0,274],
[272,271,265,275,278,279,279,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,268,276,270,286,276,268,268],
[268,0,271,279,281,292,288,271,272],
[282,279,0,279,270,287,270,275,295],
[274,271,271,0,279,282,266,264,267],
[280,269,280,271,0,267,276,270,284],
[264,258,263,268,283,0,285,282,275],
[274,262,280,284,274,265,0,259,259],
[282,279,275,286,280,268,291,0,283],
[282,278,255,283,266,275,291,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,300,314,288,283,246,278,292],
[283,0,296,352,332,293,265,290,307],
[250,254,0,323,306,296,263,246,268],
[236,198,227,0,255,265,228,213,255],
[262,218,244,295,0,274,253,236,286],
[267,257,254,285,276,0,236,278,291],
[304,285,287,322,297,314,0,262,320],
[272,260,304,337,314,272,288,0,265],
[258,243,282,295,264,259,230,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,252,258,288,281,294,248,242],
[248,0,242,250,274,258,240,282,233],
[298,308,0,268,294,328,274,309,283],
[292,300,282,0,307,282,271,283,266],
[262,276,256,243,0,263,239,264,264],
[269,292,222,268,287,0,277,260,263],
[256,310,276,279,311,273,0,277,276],
[302,268,241,267,286,290,273,0,285],
[308,317,267,284,286,287,274,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,298,279,301,269,282,282,287],
[286,0,299,274,289,287,285,291,295],
[252,251,0,237,261,239,248,266,263],
[271,276,313,0,300,286,282,287,279],
[249,261,289,250,0,254,261,266,258],
[281,263,311,264,296,0,279,296,288],
[268,265,302,268,289,271,0,292,293],
[268,259,284,263,284,254,258,0,290],
[263,255,287,271,292,262,257,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,269,287,261,272,260,262,289],
[268,0,248,274,238,267,258,239,263],
[281,302,0,287,279,277,285,264,289],
[263,276,263,0,248,259,270,262,265],
[289,312,271,302,0,268,284,269,286],
[278,283,273,291,282,0,288,278,288],
[290,292,265,280,266,262,0,278,265],
[288,311,286,288,281,272,272,0,301],
[261,287,261,285,264,262,285,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,284,294,303,281,305,272,299],
[275,0,265,286,313,282,299,267,292],
[266,285,0,293,305,294,297,283,307],
[256,264,257,0,271,246,282,246,262],
[247,237,245,279,0,241,254,247,274],
[269,268,256,304,309,0,310,267,304],
[245,251,253,268,296,240,0,265,281],
[278,283,267,304,303,283,285,0,320],
[251,258,243,288,276,246,269,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,295,281,276,272,268,271,278],
[259,0,302,270,273,264,259,273,263],
[255,248,0,254,245,259,261,265,256],
[269,280,296,0,299,273,291,287,289],
[274,277,305,251,0,262,258,275,257],
[278,286,291,277,288,0,268,268,264],
[282,291,289,259,292,282,0,266,269],
[279,277,285,263,275,282,284,0,272],
[272,287,294,261,293,286,281,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,324,292,311,301,262,324,341,315],
[226,0,264,268,334,259,277,256,212],
[258,286,0,284,310,267,259,335,264],
[239,282,266,0,283,262,209,252,242],
[249,216,240,267,0,207,222,293,228],
[288,291,283,288,343,0,268,319,352],
[226,273,291,341,328,282,0,286,307],
[209,294,215,298,257,231,264,0,243],
[235,338,286,308,322,198,243,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,273,269,283,286,278,282,284],
[275,0,257,257,262,264,272,267,280],
[277,293,0,273,294,283,286,276,293],
[281,293,277,0,283,271,288,270,281],
[267,288,256,267,0,285,279,263,281],
[264,286,267,279,265,0,283,275,273],
[272,278,264,262,271,267,0,269,263],
[268,283,274,280,287,275,281,0,283],
[266,270,257,269,269,277,287,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,281,307,272,295,271,275,268],
[285,0,308,297,300,288,287,274,278],
[269,242,0,285,266,272,257,257,252],
[243,253,265,0,252,266,262,242,261],
[278,250,284,298,0,296,273,263,280],
[255,262,278,284,254,0,278,260,257],
[279,263,293,288,277,272,0,253,289],
[275,276,293,308,287,290,297,0,279],
[282,272,298,289,270,293,261,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,284,292,291,272,294,284,285],
[260,0,272,291,277,280,280,279,284],
[266,278,0,284,280,282,276,274,271],
[258,259,266,0,266,260,266,265,273],
[259,273,270,284,0,282,266,276,284],
[278,270,268,290,268,0,268,282,271],
[256,270,274,284,284,282,0,286,286],
[266,271,276,285,274,268,264,0,270],
[265,266,279,277,266,279,264,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,373,550,373,375,375,198,373,373],
[177,0,352,550,177,177,177,352,175],
[0,198,0,373,375,375,198,198,373],
[177,0,177,0,177,177,177,0,0],
[175,373,175,373,0,177,0,373,175],
[175,373,175,373,373,0,373,373,175],
[352,373,352,373,550,177,0,373,175],
[177,198,352,550,177,177,177,0,175],
[177,375,177,550,375,375,375,375,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,284,254,263,292,286,257,250],
[291,0,299,288,275,291,323,286,302],
[266,251,0,261,253,291,285,253,261],
[296,262,289,0,287,305,283,272,274],
[287,275,297,263,0,298,298,268,273],
[258,259,259,245,252,0,275,236,262],
[264,227,265,267,252,275,0,256,261],
[293,264,297,278,282,314,294,0,288],
[300,248,289,276,277,288,289,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,335,265,283,274,298,258,304],
[256,0,307,283,253,302,302,275,272],
[215,243,0,257,221,276,239,225,248],
[285,267,293,0,265,289,300,258,269],
[267,297,329,285,0,280,251,248,313],
[276,248,274,261,270,0,259,259,282],
[252,248,311,250,299,291,0,264,281],
[292,275,325,292,302,291,286,0,298],
[246,278,302,281,237,268,269,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,347,244,340,307,241,357,298],
[317,0,250,353,338,277,236,346,242],
[203,300,0,255,365,223,228,326,245],
[306,197,295,0,359,268,226,326,296],
[210,212,185,191,0,226,223,238,194],
[243,273,327,282,324,0,276,354,314],
[309,314,322,324,327,274,0,412,286],
[193,204,224,224,312,196,138,0,203],
[252,308,305,254,356,236,264,347,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,286,273,293,278,306,288,271],
[262,0,267,277,282,289,292,299,274],
[264,283,0,283,302,301,293,294,270],
[277,273,267,0,281,277,289,285,281],
[257,268,248,269,0,277,284,281,257],
[272,261,249,273,273,0,280,293,253],
[244,258,257,261,266,270,0,275,252],
[262,251,256,265,269,257,275,0,264],
[279,276,280,269,293,297,298,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,239,303,247,261,252,261,242],
[301,0,290,295,254,267,282,277,261],
[311,260,0,317,259,263,292,276,266],
[247,255,233,0,248,243,263,257,263],
[303,296,291,302,0,272,279,277,301],
[289,283,287,307,278,0,275,269,297],
[298,268,258,287,271,275,0,264,267],
[289,273,274,293,273,281,286,0,272],
[308,289,284,287,249,253,283,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,264,271,278,274,289,289,264],
[272,0,280,275,266,272,283,282,268],
[286,270,0,279,268,275,282,287,290],
[279,275,271,0,267,251,269,276,264],
[272,284,282,283,0,266,277,274,280],
[276,278,275,299,284,0,280,280,279],
[261,267,268,281,273,270,0,277,270],
[261,268,263,274,276,270,273,0,261],
[286,282,260,286,270,271,280,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,281,271,277,296,273,282,287],
[261,0,255,279,255,284,252,269,267],
[269,295,0,271,263,279,280,292,275],
[279,271,279,0,289,289,284,290,276],
[273,295,287,261,0,273,296,271,285],
[254,266,271,261,277,0,261,250,283],
[277,298,270,266,254,289,0,279,273],
[268,281,258,260,279,300,271,0,277],
[263,283,275,274,265,267,277,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,283,278,282,287,282,281,299],
[296,0,290,294,281,271,281,274,283],
[267,260,0,252,262,261,265,258,266],
[272,256,298,0,278,281,292,294,301],
[268,269,288,272,0,290,290,302,296],
[263,279,289,269,260,0,275,283,289],
[268,269,285,258,260,275,0,276,287],
[269,276,292,256,248,267,274,0,275],
[251,267,284,249,254,261,263,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,283,296,294,271,279,277,283],
[274,0,290,283,285,262,295,280,270],
[267,260,0,285,285,275,291,273,255],
[254,267,265,0,286,269,272,278,260],
[256,265,265,264,0,265,267,259,250],
[279,288,275,281,285,0,285,282,257],
[271,255,259,278,283,265,0,268,269],
[273,270,277,272,291,268,282,0,268],
[267,280,295,290,300,293,281,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,259,232,253,279,293,234,268],
[300,0,275,257,310,318,298,272,314],
[291,275,0,233,226,263,281,239,326],
[318,293,317,0,292,321,304,259,352],
[297,240,324,258,0,325,300,245,292],
[271,232,287,229,225,0,275,287,278],
[257,252,269,246,250,275,0,183,242],
[316,278,311,291,305,263,367,0,315],
[282,236,224,198,258,272,308,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,280,287,288,274,272,285,282],
[284,0,271,285,273,276,273,297,291],
[270,279,0,270,264,266,273,272,275],
[263,265,280,0,245,276,270,278,281],
[262,277,286,305,0,271,272,308,278],
[276,274,284,274,279,0,278,272,286],
[278,277,277,280,278,272,0,289,301],
[265,253,278,272,242,278,261,0,280],
[268,259,275,269,272,264,249,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,297,278,266,259,265,273,312],
[271,0,282,297,273,257,265,262,304],
[253,268,0,278,249,260,264,275,307],
[272,253,272,0,281,256,275,254,269],
[284,277,301,269,0,273,283,258,307],
[291,293,290,294,277,0,270,296,310],
[285,285,286,275,267,280,0,282,302],
[277,288,275,296,292,254,268,0,291],
[238,246,243,281,243,240,248,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,273,301,299,275,285,276,281],
[281,0,282,287,291,273,286,288,281],
[277,268,0,274,286,271,287,284,287],
[249,263,276,0,282,261,276,286,267],
[251,259,264,268,0,269,267,256,265],
[275,277,279,289,281,0,271,278,265],
[265,264,263,274,283,279,0,282,260],
[274,262,266,264,294,272,268,0,281],
[269,269,263,283,285,285,290,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,298,286,268,285,304,277,262],
[271,0,298,264,274,240,268,263,252],
[252,252,0,255,275,264,265,276,265],
[264,286,295,0,263,257,282,269,252],
[282,276,275,287,0,249,293,266,281],
[265,310,286,293,301,0,285,276,287],
[246,282,285,268,257,265,0,252,280],
[273,287,274,281,284,274,298,0,280],
[288,298,285,298,269,263,270,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,270,315,279,269,264,275,276],
[255,0,270,319,275,258,259,257,267],
[280,280,0,311,265,271,252,266,267],
[235,231,239,0,237,231,217,225,233],
[271,275,285,313,0,259,276,261,281],
[281,292,279,319,291,0,263,272,286],
[286,291,298,333,274,287,0,271,289],
[275,293,284,325,289,278,279,0,283],
[274,283,283,317,269,264,261,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,289,284,285,280,274,302,291],
[273,0,275,287,280,277,262,267,285],
[261,275,0,272,283,278,276,280,276],
[266,263,278,0,290,280,263,292,273],
[265,270,267,260,0,262,258,274,272],
[270,273,272,270,288,0,255,280,279],
[276,288,274,287,292,295,0,284,288],
[248,283,270,258,276,270,266,0,274],
[259,265,274,277,278,271,262,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,295,261,281,298,264,282,282],
[265,0,283,256,262,276,258,281,267],
[255,267,0,274,279,264,248,264,274],
[289,294,276,0,287,272,259,305,278],
[269,288,271,263,0,271,242,263,286],
[252,274,286,278,279,0,259,279,283],
[286,292,302,291,308,291,0,285,273],
[268,269,286,245,287,271,265,0,256],
[268,283,276,272,264,267,277,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,259,255,261,297,255,278,256],
[285,0,267,285,301,300,282,308,272],
[291,283,0,277,301,299,272,328,275],
[295,265,273,0,294,293,263,302,253],
[289,249,249,256,0,293,263,283,237],
[253,250,251,257,257,0,243,269,247],
[295,268,278,287,287,307,0,295,278],
[272,242,222,248,267,281,255,0,256],
[294,278,275,297,313,303,272,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,250,373,335,361,187,230,415],
[278,0,261,244,227,309,270,259,401],
[300,289,0,406,210,367,274,313,336],
[177,306,144,0,234,244,221,82,300],
[215,323,340,316,0,367,274,147,370],
[189,241,183,306,183,0,156,129,288],
[363,280,276,329,276,394,0,253,416],
[320,291,237,468,403,421,297,0,419],
[135,149,214,250,180,262,134,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,248,269,261,243,260,248,250],
[295,0,259,275,268,257,276,255,249],
[302,291,0,305,299,267,292,279,263],
[281,275,245,0,271,254,258,264,258],
[289,282,251,279,0,247,286,252,258],
[307,293,283,296,303,0,296,297,275],
[290,274,258,292,264,254,0,255,274],
[302,295,271,286,298,253,295,0,273],
[300,301,287,292,292,275,276,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,283,267,257,291,254,297,262],
[274,0,290,256,268,298,257,296,279],
[267,260,0,270,242,272,242,259,258],
[283,294,280,0,254,280,275,274,264],
[293,282,308,296,0,327,263,279,276],
[259,252,278,270,223,0,254,269,263],
[296,293,308,275,287,296,0,290,277],
[253,254,291,276,271,281,260,0,259],
[288,271,292,286,274,287,273,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,214,252,231,259,230,269,240],
[304,0,258,242,273,264,283,293,253],
[336,292,0,254,249,280,284,278,251],
[298,308,296,0,280,286,253,288,265],
[319,277,301,270,0,283,257,292,262],
[291,286,270,264,267,0,271,294,282],
[320,267,266,297,293,279,0,298,269],
[281,257,272,262,258,256,252,0,244],
[310,297,299,285,288,268,281,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,252,258,258,255,266,259,267],
[297,0,272,275,267,272,287,285,286],
[298,278,0,276,271,289,306,283,288],
[292,275,274,0,266,282,300,291,282],
[292,283,279,284,0,288,300,262,283],
[295,278,261,268,262,0,292,264,285],
[284,263,244,250,250,258,0,264,266],
[291,265,267,259,288,286,286,0,279],
[283,264,262,268,267,265,284,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,287,253,296,288,284,271,302],
[269,0,314,291,303,298,292,298,303],
[263,236,0,246,255,261,264,244,283],
[297,259,304,0,303,290,292,272,294],
[254,247,295,247,0,299,276,268,296],
[262,252,289,260,251,0,283,263,288],
[266,258,286,258,274,267,0,248,268],
[279,252,306,278,282,287,302,0,281],
[248,247,267,256,254,262,282,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,271,264,280,281,289,266,267],
[290,0,267,261,267,286,273,278,281],
[279,283,0,268,278,297,290,280,269],
[286,289,282,0,274,274,296,278,287],
[270,283,272,276,0,278,284,271,281],
[269,264,253,276,272,0,278,268,273],
[261,277,260,254,266,272,0,261,275],
[284,272,270,272,279,282,289,0,274],
[283,269,281,263,269,277,275,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,262,275,267,254,270,267,266],
[274,0,268,285,256,276,265,289,287],
[288,282,0,292,287,276,273,282,289],
[275,265,258,0,284,268,257,272,275],
[283,294,263,266,0,257,277,285,285],
[296,274,274,282,293,0,295,289,293],
[280,285,277,293,273,255,0,284,289],
[283,261,268,278,265,261,266,0,254],
[284,263,261,275,265,257,261,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,281,274,275,293,311,282,298],
[292,0,302,279,274,293,295,269,280],
[269,248,0,274,241,261,257,234,278],
[276,271,276,0,257,296,310,243,289],
[275,276,309,293,0,300,317,273,295],
[257,257,289,254,250,0,284,244,279],
[239,255,293,240,233,266,0,241,273],
[268,281,316,307,277,306,309,0,306],
[252,270,272,261,255,271,277,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,286,256,280,271,267,254,279],
[280,0,288,267,284,282,244,257,274],
[264,262,0,246,260,266,251,264,275],
[294,283,304,0,281,300,276,272,298],
[270,266,290,269,0,292,254,254,280],
[279,268,284,250,258,0,242,267,275],
[283,306,299,274,296,308,0,285,294],
[296,293,286,278,296,283,265,0,286],
[271,276,275,252,270,275,256,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,283,233,338,299,205,296,241],
[297,0,240,303,280,308,290,301,216],
[267,310,0,356,360,319,362,308,266],
[317,247,194,0,348,304,314,271,264],
[212,270,190,202,0,234,229,193,224],
[251,242,231,246,316,0,272,292,272],
[345,260,188,236,321,278,0,327,301],
[254,249,242,279,357,258,223,0,277],
[309,334,284,286,326,278,249,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,255,266,271,283,273,256,269],
[281,0,282,273,274,285,280,281,287],
[295,268,0,268,277,282,264,276,252],
[284,277,282,0,279,284,286,275,291],
[279,276,273,271,0,270,275,272,272],
[267,265,268,266,280,0,279,265,269],
[277,270,286,264,275,271,0,278,284],
[294,269,274,275,278,285,272,0,278],
[281,263,298,259,278,281,266,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,268,272,260,273,296,258,277],
[279,0,271,294,282,296,297,268,279],
[282,279,0,274,249,272,288,268,287],
[278,256,276,0,266,283,284,261,274],
[290,268,301,284,0,290,288,282,284],
[277,254,278,267,260,0,276,236,285],
[254,253,262,266,262,274,0,243,260],
[292,282,282,289,268,314,307,0,287],
[273,271,263,276,266,265,290,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,290,292,293,266,294,343,313],
[268,0,269,270,275,294,284,296,341],
[260,281,0,268,259,285,283,332,305],
[258,280,282,0,285,242,275,292,294],
[257,275,291,265,0,246,273,288,259],
[284,256,265,308,304,0,294,316,335],
[256,266,267,275,277,256,0,322,330],
[207,254,218,258,262,234,228,0,273],
[237,209,245,256,291,215,220,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,346,327,275,338,262,294,246],
[247,0,333,294,290,267,305,334,222],
[204,217,0,284,241,300,255,270,193],
[223,256,266,0,189,235,227,316,257],
[275,260,309,361,0,299,303,327,288],
[212,283,250,315,251,0,289,316,312],
[288,245,295,323,247,261,0,271,246],
[256,216,280,234,223,234,279,0,254],
[304,328,357,293,262,238,304,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,283,278,283,277,286,276,257],
[251,0,276,262,263,273,277,275,240],
[267,274,0,279,278,273,301,275,265],
[272,288,271,0,290,266,279,285,280],
[267,287,272,260,0,281,287,260,268],
[273,277,277,284,269,0,253,273,287],
[264,273,249,271,263,297,0,255,268],
[274,275,275,265,290,277,295,0,280],
[293,310,285,270,282,263,282,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,273,250,280,248,278,289,240],
[289,0,297,290,303,277,299,292,261],
[277,253,0,256,286,270,257,296,253],
[300,260,294,0,304,283,277,291,274],
[270,247,264,246,0,266,270,272,241],
[302,273,280,267,284,0,289,275,278],
[272,251,293,273,280,261,0,276,253],
[261,258,254,259,278,275,274,0,236],
[310,289,297,276,309,272,297,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,299,263,291,274,265,269,279],
[285,0,284,270,288,275,264,279,274],
[251,266,0,254,271,251,258,256,282],
[287,280,296,0,294,264,281,278,282],
[259,262,279,256,0,256,265,265,257],
[276,275,299,286,294,0,254,258,279],
[285,286,292,269,285,296,0,282,276],
[281,271,294,272,285,292,268,0,278],
[271,276,268,268,293,271,274,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,283,284,276,286,292,262,280],
[287,0,275,257,260,264,250,259,266],
[267,275,0,272,262,282,284,267,279],
[266,293,278,0,258,277,258,292,282],
[274,290,288,292,0,285,291,285,288],
[264,286,268,273,265,0,282,278,290],
[258,300,266,292,259,268,0,262,292],
[288,291,283,258,265,272,288,0,282],
[270,284,271,268,262,260,258,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,281,271,244,268,300,312,270],
[282,0,276,286,279,245,310,308,320],
[269,274,0,252,266,262,320,292,261],
[279,264,298,0,259,284,305,294,287],
[306,271,284,291,0,271,322,300,282],
[282,305,288,266,279,0,312,292,275],
[250,240,230,245,228,238,0,262,270],
[238,242,258,256,250,258,288,0,242],
[280,230,289,263,268,275,280,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,268,292,264,294,263,283,281],
[266,0,285,344,284,283,281,273,273],
[282,265,0,312,264,310,267,292,283],
[258,206,238,0,233,279,240,264,261],
[286,266,286,317,0,295,311,287,295],
[256,267,240,271,255,0,257,276,269],
[287,269,283,310,239,293,0,266,273],
[267,277,258,286,263,274,284,0,272],
[269,277,267,289,255,281,277,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,280,268,260,280,246,285,271],
[285,0,314,260,282,288,280,304,283],
[270,236,0,270,265,270,258,270,271],
[282,290,280,0,270,288,270,309,295],
[290,268,285,280,0,290,276,287,285],
[270,262,280,262,260,0,245,268,275],
[304,270,292,280,274,305,0,317,285],
[265,246,280,241,263,282,233,0,263],
[279,267,279,255,265,275,265,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,266,312,251,278,309,258,280],
[271,0,278,251,279,254,283,279,266],
[284,272,0,272,276,279,293,289,307],
[238,299,278,0,244,270,265,272,276],
[299,271,274,306,0,271,315,294,307],
[272,296,271,280,279,0,290,268,297],
[241,267,257,285,235,260,0,263,296],
[292,271,261,278,256,282,287,0,261],
[270,284,243,274,243,253,254,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,279,286,269,284,289,293,283],
[275,0,266,272,252,245,267,253,260],
[271,284,0,280,240,263,259,272,282],
[264,278,270,0,265,272,293,260,290],
[281,298,310,285,0,288,308,272,298],
[266,305,287,278,262,0,286,262,293],
[261,283,291,257,242,264,0,277,275],
[257,297,278,290,278,288,273,0,280],
[267,290,268,260,252,257,275,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,264,280,284,263,280,289,278],
[268,0,268,283,279,252,284,282,271],
[286,282,0,275,269,286,281,294,295],
[270,267,275,0,272,258,289,283,279],
[266,271,281,278,0,277,279,294,273],
[287,298,264,292,273,0,277,298,288],
[270,266,269,261,271,273,0,288,281],
[261,268,256,267,256,252,262,0,276],
[272,279,255,271,277,262,269,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,297,244,266,256,262,249,243],
[278,0,286,273,292,249,259,272,241],
[253,264,0,260,269,232,250,265,230],
[306,277,290,0,283,250,281,275,260],
[284,258,281,267,0,272,261,263,260],
[294,301,318,300,278,0,267,287,289],
[288,291,300,269,289,283,0,263,269],
[301,278,285,275,287,263,287,0,283],
[307,309,320,290,290,261,281,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,262,267,272,255,275,290,270],
[280,0,277,284,269,270,298,308,271],
[288,273,0,284,270,284,295,290,278],
[283,266,266,0,281,263,281,284,270],
[278,281,280,269,0,277,278,288,273],
[295,280,266,287,273,0,304,283,276],
[275,252,255,269,272,246,0,279,268],
[260,242,260,266,262,267,271,0,264],
[280,279,272,280,277,274,282,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,292,261,272,271,255,260,270],
[278,0,286,275,290,271,279,272,278],
[258,264,0,264,254,266,269,265,277],
[289,275,286,0,254,282,287,275,278],
[278,260,296,296,0,288,295,254,302],
[279,279,284,268,262,0,280,268,289],
[295,271,281,263,255,270,0,277,286],
[290,278,285,275,296,282,273,0,301],
[280,272,273,272,248,261,264,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,275,257,261,215,238,229,227],
[316,0,304,299,279,259,266,264,277],
[275,246,0,243,242,239,229,243,251],
[293,251,307,0,218,245,262,263,263],
[289,271,308,332,0,288,272,278,280],
[335,291,311,305,262,0,289,294,315],
[312,284,321,288,278,261,0,270,296],
[321,286,307,287,272,256,280,0,251],
[323,273,299,287,270,235,254,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,268,298,240,277,308,287,289],
[241,0,252,261,226,257,265,235,243],
[282,298,0,262,277,275,281,266,274],
[252,289,288,0,249,252,295,293,261],
[310,324,273,301,0,314,270,276,287],
[273,293,275,298,236,0,291,269,276],
[242,285,269,255,280,259,0,299,279],
[263,315,284,257,274,281,251,0,284],
[261,307,276,289,263,274,271,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,266,276,272,260,294,282,288],
[300,0,274,280,278,287,326,320,301],
[284,276,0,268,265,267,291,298,274],
[274,270,282,0,266,272,302,270,271],
[278,272,285,284,0,269,289,270,286],
[290,263,283,278,281,0,314,274,281],
[256,224,259,248,261,236,0,237,249],
[268,230,252,280,280,276,313,0,270],
[262,249,276,279,264,269,301,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,265,278,303,255,299,296,267],
[261,0,267,258,270,253,308,283,267],
[285,283,0,249,315,271,269,273,270],
[272,292,301,0,294,274,283,291,280],
[247,280,235,256,0,235,272,260,266],
[295,297,279,276,315,0,301,262,258],
[251,242,281,267,278,249,0,253,251],
[254,267,277,259,290,288,297,0,264],
[283,283,280,270,284,292,299,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,250,264,276,294,266,255,267],
[293,0,272,309,282,294,296,288,283],
[300,278,0,288,278,311,300,293,275],
[286,241,262,0,271,289,299,261,284],
[274,268,272,279,0,287,292,282,260],
[256,256,239,261,263,0,248,249,243],
[284,254,250,251,258,302,0,277,268],
[295,262,257,289,268,301,273,0,291],
[283,267,275,266,290,307,282,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,272,259,261,275,314,300,290],
[260,0,252,267,241,266,277,289,244],
[278,298,0,282,265,291,274,285,254],
[291,283,268,0,269,279,291,291,272],
[289,309,285,281,0,273,274,286,275],
[275,284,259,271,277,0,283,292,261],
[236,273,276,259,276,267,0,280,261],
[250,261,265,259,264,258,270,0,243],
[260,306,296,278,275,289,289,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,293,274,286,289,279,261,258],
[253,0,298,266,266,294,302,266,262],
[257,252,0,237,261,270,248,249,265],
[276,284,313,0,281,292,286,292,257],
[264,284,289,269,0,280,289,288,275],
[261,256,280,258,270,0,270,262,247],
[271,248,302,264,261,280,0,254,276],
[289,284,301,258,262,288,296,0,250],
[292,288,285,293,275,303,274,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,294,281,285,284,289,285,270],
[281,0,303,293,295,294,307,270,284],
[256,247,0,256,262,263,262,271,278],
[269,257,294,0,275,265,287,278,284],
[265,255,288,275,0,270,282,274,275],
[266,256,287,285,280,0,293,273,289],
[261,243,288,263,268,257,0,257,273],
[265,280,279,272,276,277,293,0,284],
[280,266,272,266,275,261,277,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,251,284,282,281,270,272,279],
[273,0,259,287,269,286,257,277,270],
[299,291,0,292,290,269,277,290,297],
[266,263,258,0,279,267,275,266,269],
[268,281,260,271,0,253,272,284,275],
[269,264,281,283,297,0,297,282,281],
[280,293,273,275,278,253,0,273,284],
[278,273,260,284,266,268,277,0,283],
[271,280,253,281,275,269,266,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,251,262,261,279,281,255,266],
[292,0,262,254,273,276,298,266,270],
[299,288,0,260,279,267,307,261,275],
[288,296,290,0,273,290,311,265,275],
[289,277,271,277,0,282,288,258,253],
[271,274,283,260,268,0,289,265,256],
[269,252,243,239,262,261,0,235,235],
[295,284,289,285,292,285,315,0,265],
[284,280,275,275,297,294,315,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,274,262,284,293,259,275,262],
[286,0,296,282,285,281,290,265,305],
[276,254,0,279,305,297,266,285,276],
[288,268,271,0,310,271,262,278,260],
[266,265,245,240,0,265,267,258,255],
[257,269,253,279,285,0,283,250,266],
[291,260,284,288,283,267,0,290,275],
[275,285,265,272,292,300,260,0,269],
[288,245,274,290,295,284,275,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,252,260,278,279,256,269,288],
[273,0,278,262,263,260,260,277,300],
[298,272,0,238,288,279,254,281,293],
[290,288,312,0,274,281,284,287,303],
[272,287,262,276,0,266,263,281,310],
[271,290,271,269,284,0,267,264,294],
[294,290,296,266,287,283,0,296,309],
[281,273,269,263,269,286,254,0,311],
[262,250,257,247,240,256,241,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,277,348,282,297,281,336,268],
[352,0,333,402,247,390,299,360,426],
[273,217,0,375,279,257,266,314,290],
[202,148,175,0,189,246,188,300,262],
[268,303,271,361,0,377,320,392,309],
[253,160,293,304,173,0,183,281,267],
[269,251,284,362,230,367,0,315,208],
[214,190,236,250,158,269,235,0,369],
[282,124,260,288,241,283,342,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,273,261,263,299,276,280,269],
[260,0,267,268,267,273,271,266,269],
[277,283,0,274,264,274,260,273,282],
[289,282,276,0,272,286,279,278,277],
[287,283,286,278,0,272,272,276,286],
[251,277,276,264,278,0,269,275,259],
[274,279,290,271,278,281,0,275,276],
[270,284,277,272,274,275,275,0,284],
[281,281,268,273,264,291,274,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,253,200,216,334,220,278,247],
[354,0,290,213,225,252,210,332,266],
[297,260,0,227,316,333,289,343,248],
[350,337,323,0,298,280,227,324,153],
[334,325,234,252,0,311,258,346,303],
[216,298,217,270,239,0,235,265,180],
[330,340,261,323,292,315,0,328,142],
[272,218,207,226,204,285,222,0,239],
[303,284,302,397,247,370,408,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,310,245,277,270,301,302,241],
[293,0,323,265,260,285,303,295,279],
[240,227,0,221,229,232,286,299,245],
[305,285,329,0,261,307,341,310,275],
[273,290,321,289,0,286,342,303,273],
[280,265,318,243,264,0,294,301,266],
[249,247,264,209,208,256,0,267,232],
[248,255,251,240,247,249,283,0,233],
[309,271,305,275,277,284,318,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,282,292,293,300,283,289,333],
[279,0,276,289,284,278,249,277,292],
[268,274,0,256,283,270,251,271,292],
[258,261,294,0,272,275,268,278,316],
[257,266,267,278,0,260,252,269,287],
[250,272,280,275,290,0,273,285,305],
[267,301,299,282,298,277,0,287,310],
[261,273,279,272,281,265,263,0,305],
[217,258,258,234,263,245,240,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,287,268,279,261,289,285,270],
[277,0,318,290,288,259,292,280,277],
[263,232,0,244,273,244,270,236,251],
[282,260,306,0,263,260,297,260,255],
[271,262,277,287,0,267,292,259,248],
[289,291,306,290,283,0,303,271,277],
[261,258,280,253,258,247,0,241,254],
[265,270,314,290,291,279,309,0,263],
[280,273,299,295,302,273,296,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,261,284,260,262,244,263,253],
[279,0,282,287,273,263,266,257,278],
[289,268,0,272,249,268,265,261,267],
[266,263,278,0,252,266,272,251,256],
[290,277,301,298,0,264,280,285,279],
[288,287,282,284,286,0,267,273,274],
[306,284,285,278,270,283,0,264,263],
[287,293,289,299,265,277,286,0,278],
[297,272,283,294,271,276,287,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,289,295,273,279,284,284,322],
[249,0,245,255,275,239,283,269,282],
[261,305,0,265,283,262,278,308,313],
[255,295,285,0,281,282,310,276,325],
[277,275,267,269,0,271,290,291,307],
[271,311,288,268,279,0,315,287,309],
[266,267,272,240,260,235,0,255,291],
[266,281,242,274,259,263,295,0,307],
[228,268,237,225,243,241,259,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,297,291,334,278,265,291,262],
[268,0,273,278,304,283,268,282,255],
[253,277,0,321,286,243,257,283,249],
[259,272,229,0,300,269,260,247,260],
[216,246,264,250,0,258,241,260,223],
[272,267,307,281,292,0,275,294,247],
[285,282,293,290,309,275,0,285,288],
[259,268,267,303,290,256,265,0,279],
[288,295,301,290,327,303,262,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,263,274,230,270,295,303,280],
[279,0,234,259,225,240,300,301,281],
[287,316,0,291,268,330,284,337,259],
[276,291,259,0,284,271,281,285,312],
[320,325,282,266,0,304,331,316,294],
[280,310,220,279,246,0,240,277,303],
[255,250,266,269,219,310,0,322,257],
[247,249,213,265,234,273,228,0,272],
[270,269,291,238,256,247,293,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,343,283,275,318,296,322,302],
[239,0,275,275,251,269,258,281,292],
[207,275,0,251,241,254,251,256,270],
[267,275,299,0,263,299,276,301,292],
[275,299,309,287,0,275,269,288,301],
[232,281,296,251,275,0,256,268,265],
[254,292,299,274,281,294,0,279,269],
[228,269,294,249,262,282,271,0,264],
[248,258,280,258,249,285,281,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,305,345,322,322,261,270,275],
[240,0,207,263,328,286,177,272,197],
[245,343,0,290,328,251,255,252,191],
[205,287,260,0,321,194,224,292,207],
[228,222,222,229,0,201,191,212,228],
[228,264,299,356,349,0,292,313,264],
[289,373,295,326,359,258,0,265,289],
[280,278,298,258,338,237,285,0,277],
[275,353,359,343,322,286,261,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,360,328,308,310,269,277,353],
[263,0,282,251,261,262,282,274,347],
[190,268,0,284,271,248,294,270,304],
[222,299,266,0,239,269,315,223,347],
[242,289,279,311,0,284,328,268,296],
[240,288,302,281,266,0,284,267,329],
[281,268,256,235,222,266,0,281,335],
[273,276,280,327,282,283,269,0,349],
[197,203,246,203,254,221,215,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,271,304,328,313,267,284,305],
[264,0,267,312,288,276,252,276,294],
[279,283,0,311,278,274,281,265,284],
[246,238,239,0,271,249,253,273,249],
[222,262,272,279,0,243,265,289,246],
[237,274,276,301,307,0,272,289,267],
[283,298,269,297,285,278,0,260,255],
[266,274,285,277,261,261,290,0,242],
[245,256,266,301,304,283,295,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,286,279,276,281,285,281,271],
[276,0,293,262,282,287,283,271,281],
[264,257,0,272,273,251,268,268,262],
[271,288,278,0,281,283,288,288,276],
[274,268,277,269,0,285,278,275,272],
[269,263,299,267,265,0,288,274,260],
[265,267,282,262,272,262,0,254,258],
[269,279,282,262,275,276,296,0,281],
[279,269,288,274,278,290,292,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,244,246,448,274,306,302,263],
[292,0,425,332,415,255,317,317,356],
[306,125,0,304,450,280,174,220,165],
[304,218,246,0,354,224,341,279,240],
[102,135,100,196,0,189,208,190,151],
[276,295,270,326,361,0,279,297,305],
[244,233,376,209,342,271,0,312,362],
[248,233,330,271,360,253,238,0,141],
[287,194,385,310,399,245,188,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,244,275,264,256,251,277,254],
[293,0,262,294,282,275,285,277,270],
[306,288,0,304,290,293,278,282,274],
[275,256,246,0,253,255,275,281,266],
[286,268,260,297,0,277,261,287,269],
[294,275,257,295,273,0,279,274,273],
[299,265,272,275,289,271,0,279,263],
[273,273,268,269,263,276,271,0,277],
[296,280,276,284,281,277,287,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,296,279,270,289,288,295,266],
[290,0,291,285,283,272,279,285,286],
[254,259,0,272,271,253,270,295,276],
[271,265,278,0,288,267,265,288,282],
[280,267,279,262,0,279,277,300,273],
[261,278,297,283,271,0,302,287,290],
[262,271,280,285,273,248,0,273,278],
[255,265,255,262,250,263,277,0,263],
[284,264,274,268,277,260,272,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,259,278,282,260,296,286,282],
[261,0,263,265,262,279,293,259,254],
[291,287,0,271,270,278,297,274,258],
[272,285,279,0,267,289,284,286,267],
[268,288,280,283,0,282,289,281,272],
[290,271,272,261,268,0,301,279,275],
[254,257,253,266,261,249,0,273,267],
[264,291,276,264,269,271,277,0,264],
[268,296,292,283,278,275,283,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,274,253,277,306,298,262,262],
[249,0,234,231,245,250,257,239,222],
[276,316,0,276,269,269,279,269,258],
[297,319,274,0,312,300,312,281,280],
[273,305,281,238,0,296,269,250,285],
[244,300,281,250,254,0,286,253,260],
[252,293,271,238,281,264,0,233,259],
[288,311,281,269,300,297,317,0,277],
[288,328,292,270,265,290,291,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,265,257,269,255,259,257,272],
[297,0,275,271,274,278,277,270,274],
[285,275,0,272,264,277,262,266,269],
[293,279,278,0,275,271,273,282,266],
[281,276,286,275,0,291,265,277,282],
[295,272,273,279,259,0,268,268,264],
[291,273,288,277,285,282,0,268,281],
[293,280,284,268,273,282,282,0,273],
[278,276,281,284,268,286,269,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,279,268,308,291,284,273,260],
[285,0,287,265,303,281,278,289,270],
[271,263,0,262,313,277,290,320,280],
[282,285,288,0,304,300,286,322,259],
[242,247,237,246,0,284,278,265,272],
[259,269,273,250,266,0,259,284,270],
[266,272,260,264,272,291,0,282,265],
[277,261,230,228,285,266,268,0,230],
[290,280,270,291,278,280,285,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,257,356,296,296,296,296,295],
[266,0,240,326,272,290,276,249,247],
[293,310,0,299,290,284,273,259,277],
[194,224,251,0,263,267,213,209,221],
[254,278,260,287,0,252,267,213,282],
[254,260,266,283,298,0,303,220,235],
[254,274,277,337,283,247,0,244,227],
[254,301,291,341,337,330,306,0,293],
[255,303,273,329,268,315,323,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,287,288,289,287,265,284,270],
[273,0,278,277,295,273,274,278,273],
[263,272,0,263,289,265,261,264,267],
[262,273,287,0,296,268,282,274,265],
[261,255,261,254,0,240,260,265,263],
[263,277,285,282,310,0,264,292,284],
[285,276,289,268,290,286,0,273,290],
[266,272,286,276,285,258,277,0,274],
[280,277,283,285,287,266,260,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,257,262,273,253,275,270,264],
[291,0,280,259,281,274,297,285,273],
[293,270,0,260,293,271,294,290,268],
[288,291,290,0,298,275,279,272,282],
[277,269,257,252,0,270,275,267,261],
[297,276,279,275,280,0,304,283,283],
[275,253,256,271,275,246,0,277,262],
[280,265,260,278,283,267,273,0,265],
[286,277,282,268,289,267,288,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,302,267,280,270,282,250,233],
[286,0,287,274,278,272,258,298,292],
[248,263,0,252,287,257,251,266,258],
[283,276,298,0,245,269,270,258,268],
[270,272,263,305,0,290,294,264,269],
[280,278,293,281,260,0,266,300,276],
[268,292,299,280,256,284,0,272,274],
[300,252,284,292,286,250,278,0,255],
[317,258,292,282,281,274,276,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,259,269,266,270,260,275,256],
[282,0,253,281,257,276,265,290,291],
[291,297,0,298,272,301,286,294,280],
[281,269,252,0,263,284,266,287,270],
[284,293,278,287,0,293,271,290,295],
[280,274,249,266,257,0,257,282,267],
[290,285,264,284,279,293,0,295,283],
[275,260,256,263,260,268,255,0,268],
[294,259,270,280,255,283,267,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,257,263,262,270,282,275,278],
[275,0,247,287,266,272,258,281,282],
[293,303,0,275,283,275,299,288,289],
[287,263,275,0,259,271,276,294,270],
[288,284,267,291,0,285,288,305,274],
[280,278,275,279,265,0,278,309,276],
[268,292,251,274,262,272,0,286,274],
[275,269,262,256,245,241,264,0,269],
[272,268,261,280,276,274,276,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,290,276,293,269,273,282,278],
[272,0,301,275,298,290,286,285,282],
[260,249,0,244,282,308,265,263,265],
[274,275,306,0,275,300,277,281,309],
[257,252,268,275,0,271,262,277,259],
[281,260,242,250,279,0,263,288,267],
[277,264,285,273,288,287,0,287,291],
[268,265,287,269,273,262,263,0,275],
[272,268,285,241,291,283,259,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,296,286,279,278,263,275,280],
[274,0,276,282,272,267,275,268,274],
[254,274,0,289,279,271,283,281,278],
[264,268,261,0,286,247,296,262,259],
[271,278,271,264,0,268,291,255,260],
[272,283,279,303,282,0,283,262,296],
[287,275,267,254,259,267,0,262,263],
[275,282,269,288,295,288,288,0,289],
[270,276,272,291,290,254,287,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,281,246,245,250,281,261,248],
[254,0,269,242,258,240,278,240,269],
[269,281,0,248,286,253,300,262,266],
[304,308,302,0,285,291,313,273,302],
[305,292,264,265,0,266,300,257,280],
[300,310,297,259,284,0,322,280,295],
[269,272,250,237,250,228,0,249,256],
[289,310,288,277,293,270,301,0,274],
[302,281,284,248,270,255,294,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,181,361,242,250,168,340,159],
[265,0,301,263,230,357,388,302,266],
[369,249,0,319,403,328,303,246,324],
[189,287,231,0,287,295,125,215,90],
[308,320,147,263,0,330,185,188,206],
[300,193,222,255,220,0,208,238,181],
[382,162,247,425,365,342,0,257,278],
[210,248,304,335,362,312,293,0,179],
[391,284,226,460,344,369,272,371,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,290,301,265,283,284,277,312],
[267,0,270,304,283,283,275,275,297],
[260,280,0,272,269,266,276,265,277],
[249,246,278,0,252,256,245,247,293],
[285,267,281,298,0,302,277,269,321],
[267,267,284,294,248,0,278,275,296],
[266,275,274,305,273,272,0,272,293],
[273,275,285,303,281,275,278,0,301],
[238,253,273,257,229,254,257,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,225,204,209,259,295,259,256],
[308,0,259,289,244,290,287,320,219],
[325,291,0,299,247,276,293,348,238],
[346,261,251,0,209,220,234,327,218],
[341,306,303,341,0,225,320,338,278],
[291,260,274,330,325,0,354,302,243],
[255,263,257,316,230,196,0,328,224],
[291,230,202,223,212,248,222,0,231],
[294,331,312,332,272,307,326,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,264,264,253,269,257,266,256],
[298,0,281,285,282,274,284,285,269],
[286,269,0,283,269,251,270,272,244],
[286,265,267,0,275,260,263,269,261],
[297,268,281,275,0,270,260,260,267],
[281,276,299,290,280,0,275,268,275],
[293,266,280,287,290,275,0,263,272],
[284,265,278,281,290,282,287,0,276],
[294,281,306,289,283,275,278,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,261,259,262,290,262,298,251],
[231,0,230,244,279,276,284,277,226],
[289,320,0,258,308,273,267,255,282],
[291,306,292,0,302,235,253,304,288],
[288,271,242,248,0,296,284,286,277],
[260,274,277,315,254,0,308,251,281],
[288,266,283,297,266,242,0,261,250],
[252,273,295,246,264,299,289,0,260],
[299,324,268,262,273,269,300,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,290,290,298,286,256,316,293],
[257,0,280,278,296,270,270,305,300],
[260,270,0,263,294,274,268,291,273],
[260,272,287,0,269,264,261,294,296],
[252,254,256,281,0,249,263,298,274],
[264,280,276,286,301,0,276,302,296],
[294,280,282,289,287,274,0,297,289],
[234,245,259,256,252,248,253,0,268],
[257,250,277,254,276,254,261,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,259,236,301,242,220,273,290],
[297,0,288,252,285,301,266,300,325],
[291,262,0,258,278,289,298,287,302],
[314,298,292,0,321,272,282,275,327],
[249,265,272,229,0,225,236,246,256],
[308,249,261,278,325,0,242,299,286],
[330,284,252,268,314,308,0,302,289],
[277,250,263,275,304,251,248,0,280],
[260,225,248,223,294,264,261,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,306,278,276,273,272,276,273],
[276,0,297,291,287,280,268,304,297],
[244,253,0,271,268,240,254,255,265],
[272,259,279,0,283,271,283,275,281],
[274,263,282,267,0,249,275,276,286],
[277,270,310,279,301,0,274,286,301],
[278,282,296,267,275,276,0,296,279],
[274,246,295,275,274,264,254,0,273],
[277,253,285,269,264,249,271,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,270,282,306,270,279,284,292],
[258,0,266,284,295,264,271,289,273],
[280,284,0,274,294,278,272,296,286],
[268,266,276,0,304,275,286,289,282],
[244,255,256,246,0,243,243,255,243],
[280,286,272,275,307,0,276,295,282],
[271,279,278,264,307,274,0,297,276],
[266,261,254,261,295,255,253,0,278],
[258,277,264,268,307,268,274,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,253,264,275,278,272,274,270],
[276,0,259,279,270,303,299,305,291],
[297,291,0,292,270,295,298,299,294],
[286,271,258,0,270,287,313,286,264],
[275,280,280,280,0,303,279,302,274],
[272,247,255,263,247,0,292,284,267],
[278,251,252,237,271,258,0,293,253],
[276,245,251,264,248,266,257,0,256],
[280,259,256,286,276,283,297,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,231,234,270,272,297,275,243],
[280,0,256,257,272,313,273,297,264],
[319,294,0,283,294,286,306,325,265],
[316,293,267,0,284,307,308,313,279],
[280,278,256,266,0,290,299,306,264],
[278,237,264,243,260,0,288,270,256],
[253,277,244,242,251,262,0,270,246],
[275,253,225,237,244,280,280,0,232],
[307,286,285,271,286,294,304,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,314,307,307,274,264,263,336],
[245,0,270,268,268,260,233,278,300],
[236,280,0,278,264,234,214,275,261],
[243,282,272,0,252,257,221,233,284],
[243,282,286,298,0,222,256,235,303],
[276,290,316,293,328,0,285,261,301],
[286,317,336,329,294,265,0,289,318],
[287,272,275,317,315,289,261,0,304],
[214,250,289,266,247,249,232,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,278,251,280,270,297,279,265],
[258,0,273,259,280,259,291,277,264],
[272,277,0,261,275,263,308,264,263],
[299,291,289,0,298,261,300,298,278],
[270,270,275,252,0,273,287,269,271],
[280,291,287,289,277,0,301,276,267],
[253,259,242,250,263,249,0,251,239],
[271,273,286,252,281,274,299,0,266],
[285,286,287,272,279,283,311,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,285,247,288,266,262,281,276],
[288,0,293,266,262,275,252,260,323],
[265,257,0,265,288,243,233,271,308],
[303,284,285,0,298,284,275,275,293],
[262,288,262,252,0,298,265,280,298],
[284,275,307,266,252,0,278,321,298],
[288,298,317,275,285,272,0,269,333],
[269,290,279,275,270,229,281,0,274],
[274,227,242,257,252,252,217,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,403,356,397,341,438,405,237],
[78,0,355,191,250,119,244,315,106],
[147,195,0,230,188,266,224,203,95],
[194,359,320,0,282,311,230,191,354],
[153,300,362,268,0,221,217,311,238],
[209,431,284,239,329,0,267,299,234],
[112,306,326,320,333,283,0,404,195],
[145,235,347,359,239,251,146,0,252],
[313,444,455,196,312,316,355,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,271,267,249,275,285,260,261],
[269,0,259,261,265,264,277,252,271],
[279,291,0,268,282,290,287,277,261],
[283,289,282,0,287,266,287,286,275],
[301,285,268,263,0,262,294,283,263],
[275,286,260,284,288,0,289,276,279],
[265,273,263,263,256,261,0,273,267],
[290,298,273,264,267,274,277,0,275],
[289,279,289,275,287,271,283,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,284,234,286,311,282,285,264],
[283,0,312,295,289,315,274,336,292],
[266,238,0,244,245,274,285,305,196],
[316,255,306,0,270,282,317,302,257],
[264,261,305,280,0,276,281,299,271],
[239,235,276,268,274,0,254,276,247],
[268,276,265,233,269,296,0,319,243],
[265,214,245,248,251,274,231,0,274],
[286,258,354,293,279,303,307,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,270,278,262,251,277,266,277],
[300,0,280,281,272,275,272,284,278],
[280,270,0,273,267,264,273,263,265],
[272,269,277,0,260,248,259,277,277],
[288,278,283,290,0,272,258,269,283],
[299,275,286,302,278,0,295,283,308],
[273,278,277,291,292,255,0,284,286],
[284,266,287,273,281,267,266,0,290],
[273,272,285,273,267,242,264,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,306,294,261,299,283,274,309],
[274,0,283,276,294,281,265,276,289],
[244,267,0,275,280,280,267,243,284],
[256,274,275,0,278,287,268,250,288],
[289,256,270,272,0,275,277,253,280],
[251,269,270,263,275,0,276,230,286],
[267,285,283,282,273,274,0,255,276],
[276,274,307,300,297,320,295,0,301],
[241,261,266,262,270,264,274,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,289,269,278,311,293,295,294],
[239,0,270,233,258,277,264,265,260],
[261,280,0,244,264,275,269,263,295],
[281,317,306,0,294,286,280,266,304],
[272,292,286,256,0,304,284,279,295],
[239,273,275,264,246,0,273,258,270],
[257,286,281,270,266,277,0,269,264],
[255,285,287,284,271,292,281,0,298],
[256,290,255,246,255,280,286,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,314,287,271,280,268,275,272],
[243,0,309,293,267,265,282,275,249],
[236,241,0,270,251,230,235,262,214],
[263,257,280,0,269,264,249,307,253],
[279,283,299,281,0,258,272,280,277],
[270,285,320,286,292,0,250,281,273],
[282,268,315,301,278,300,0,258,249],
[275,275,288,243,270,269,292,0,246],
[278,301,336,297,273,277,301,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,321,273,261,298,289,299,300],
[275,0,351,310,294,293,310,292,300],
[229,199,0,284,234,237,231,251,237],
[277,240,266,0,233,272,268,268,267],
[289,256,316,317,0,323,308,284,281],
[252,257,313,278,227,0,268,256,244],
[261,240,319,282,242,282,0,273,275],
[251,258,299,282,266,294,277,0,244],
[250,250,313,283,269,306,275,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,302,323,299,240,362,256,296],
[255,0,370,347,262,203,295,233,230],
[248,180,0,250,210,150,310,196,230],
[227,203,300,0,205,218,245,254,198],
[251,288,340,345,0,275,304,278,266],
[310,347,400,332,275,0,338,275,322],
[188,255,240,305,246,212,0,173,243],
[294,317,354,296,272,275,377,0,274],
[254,320,320,352,284,228,307,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,265,259,273,283,277,266,255],
[295,0,259,284,276,300,283,275,272],
[285,291,0,262,266,327,258,279,262],
[291,266,288,0,283,272,276,246,285],
[277,274,284,267,0,294,287,289,284],
[267,250,223,278,256,0,262,255,236],
[273,267,292,274,263,288,0,278,291],
[284,275,271,304,261,295,272,0,275],
[295,278,288,265,266,314,259,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,247,263,245,236,257,263,267],
[315,0,269,271,273,293,285,295,287],
[303,281,0,279,277,275,278,296,293],
[287,279,271,0,262,272,275,305,267],
[305,277,273,288,0,287,292,305,282],
[314,257,275,278,263,0,287,299,284],
[293,265,272,275,258,263,0,296,292],
[287,255,254,245,245,251,254,0,274],
[283,263,257,283,268,266,258,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,268,314,305,363,360,342,289],
[263,0,271,282,287,239,337,305,322],
[282,279,0,281,314,223,279,360,248],
[236,268,269,0,279,199,246,304,263],
[245,263,236,271,0,249,325,339,324],
[187,311,327,351,301,0,330,337,301],
[190,213,271,304,225,220,0,243,248],
[208,245,190,246,211,213,307,0,257],
[261,228,302,287,226,249,302,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,260,242,276,263,251,260,260],
[263,0,262,244,263,262,280,250,265],
[290,288,0,285,280,282,259,318,300],
[308,306,265,0,304,282,275,286,285],
[274,287,270,246,0,290,279,282,289],
[287,288,268,268,260,0,260,283,265],
[299,270,291,275,271,290,0,293,287],
[290,300,232,264,268,267,257,0,279],
[290,285,250,265,261,285,263,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,279,303,306,275,266,275,300],
[259,0,272,268,283,269,294,249,288],
[271,278,0,273,322,264,285,298,296],
[247,282,277,0,267,273,280,273,291],
[244,267,228,283,0,252,266,242,276],
[275,281,286,277,298,0,288,269,302],
[284,256,265,270,284,262,0,277,304],
[275,301,252,277,308,281,273,0,284],
[250,262,254,259,274,248,246,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,263,263,254,302,281,279,270],
[301,0,286,273,298,286,285,293,286],
[287,264,0,256,275,256,279,266,279],
[287,277,294,0,299,272,299,292,278],
[296,252,275,251,0,266,276,283,302],
[248,264,294,278,284,0,280,276,284],
[269,265,271,251,274,270,0,264,278],
[271,257,284,258,267,274,286,0,267],
[280,264,271,272,248,266,272,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,273,288,261,271,286,262,290],
[284,0,269,295,270,291,289,277,289],
[277,281,0,270,277,259,280,271,277],
[262,255,280,0,250,279,262,250,283],
[289,280,273,300,0,267,308,269,300],
[279,259,291,271,283,0,278,257,304],
[264,261,270,288,242,272,0,248,265],
[288,273,279,300,281,293,302,0,279],
[260,261,273,267,250,246,285,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,326,205,271,267,280,260,283,250],
[224,0,252,245,237,248,248,252,246],
[345,298,0,296,283,310,275,288,287],
[279,305,254,0,264,284,238,252,254],
[283,313,267,286,0,284,249,265,256],
[270,302,240,266,266,0,260,312,277],
[290,302,275,312,301,290,0,301,303],
[267,298,262,298,285,238,249,0,269],
[300,304,263,296,294,273,247,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,258,282,262,271,264,260,252],
[292,0,262,280,303,261,284,271,282],
[292,288,0,293,309,279,264,268,280],
[268,270,257,0,267,274,279,266,266],
[288,247,241,283,0,258,262,278,261],
[279,289,271,276,292,0,287,279,272],
[286,266,286,271,288,263,0,289,273],
[290,279,282,284,272,271,261,0,265],
[298,268,270,284,289,278,277,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,263,268,256,247,256,292,262],
[280,0,285,286,267,275,284,294,279],
[287,265,0,265,262,264,264,279,266],
[282,264,285,0,269,278,262,280,274],
[294,283,288,281,0,268,274,307,292],
[303,275,286,272,282,0,291,293,284],
[294,266,286,288,276,259,0,290,289],
[258,256,271,270,243,257,260,0,262],
[288,271,284,276,258,266,261,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,280,283,252,275,271,288,261],
[271,0,282,288,269,283,277,286,270],
[270,268,0,289,259,275,269,284,254],
[267,262,261,0,257,278,251,258,251],
[298,281,291,293,0,281,288,296,274],
[275,267,275,272,269,0,266,278,264],
[279,273,281,299,262,284,0,283,279],
[262,264,266,292,254,272,267,0,253],
[289,280,296,299,276,286,271,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,275,280,272,298,279,287,285],
[271,0,262,299,257,295,276,297,293],
[275,288,0,297,296,310,264,300,295],
[270,251,253,0,263,290,266,268,276],
[278,293,254,287,0,286,269,290,288],
[252,255,240,260,264,0,248,258,265],
[271,274,286,284,281,302,0,313,298],
[263,253,250,282,260,292,237,0,267],
[265,257,255,274,262,285,252,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,262,264,265,273,279,273,278],
[267,0,263,258,269,283,289,260,265],
[288,287,0,286,271,295,296,274,283],
[286,292,264,0,277,305,282,281,279],
[285,281,279,273,0,294,281,291,268],
[277,267,255,245,256,0,269,276,263],
[271,261,254,268,269,281,0,254,265],
[277,290,276,269,259,274,296,0,281],
[272,285,267,271,282,287,285,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,267,259,272,238,254,237,250],
[281,0,279,280,293,274,255,258,286],
[283,271,0,266,282,248,262,263,277],
[291,270,284,0,289,274,263,274,282],
[278,257,268,261,0,272,242,253,254],
[312,276,302,276,278,0,264,264,270],
[296,295,288,287,308,286,0,282,267],
[313,292,287,276,297,286,268,0,290],
[300,264,273,268,296,280,283,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,334,269,297,348,295,347,311,382],
[216,0,185,226,339,243,242,260,269],
[281,365,0,305,383,341,273,370,331],
[253,324,245,0,315,271,288,335,299],
[202,211,167,235,0,241,195,195,214],
[255,307,209,279,309,0,240,246,281],
[203,308,277,262,355,310,0,316,322],
[239,290,180,215,355,304,234,0,284],
[168,281,219,251,336,269,228,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,268,269,284,264,264,274,265],
[278,0,276,277,272,269,257,278,272],
[282,274,0,255,265,270,255,271,250],
[281,273,295,0,291,289,275,277,283],
[266,278,285,259,0,271,268,259,279],
[286,281,280,261,279,0,268,265,270],
[286,293,295,275,282,282,0,283,270],
[276,272,279,273,291,285,267,0,271],
[285,278,300,267,271,280,280,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,292,290,261,269,267,265,242],
[267,0,265,235,242,254,270,238,226],
[258,285,0,254,250,268,245,260,261],
[260,315,296,0,256,272,267,293,277],
[289,308,300,294,0,278,266,313,261],
[281,296,282,278,272,0,271,281,278],
[283,280,305,283,284,279,0,270,286],
[285,312,290,257,237,269,280,0,269],
[308,324,289,273,289,272,264,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,280,275,276,284,275,257,246],
[317,0,295,234,235,275,254,284,329],
[270,255,0,242,290,280,284,262,300],
[275,316,308,0,293,268,256,277,289],
[274,315,260,257,0,291,253,249,320],
[266,275,270,282,259,0,259,287,283],
[275,296,266,294,297,291,0,247,285],
[293,266,288,273,301,263,303,0,302],
[304,221,250,261,230,267,265,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,276,264,264,295,277,269,269],
[285,0,313,263,298,307,302,297,280],
[274,237,0,246,250,287,263,254,263],
[286,287,304,0,272,306,294,296,285],
[286,252,300,278,0,288,286,298,282],
[255,243,263,244,262,0,275,268,258],
[273,248,287,256,264,275,0,267,268],
[281,253,296,254,252,282,283,0,271],
[281,270,287,265,268,292,282,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,286,266,275,315,286,259,320],
[263,0,250,281,264,283,238,253,305],
[264,300,0,265,279,295,269,263,290],
[284,269,285,0,248,253,284,286,275],
[275,286,271,302,0,319,283,264,287],
[235,267,255,297,231,0,275,233,272],
[264,312,281,266,267,275,0,278,301],
[291,297,287,264,286,317,272,0,326],
[230,245,260,275,263,278,249,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,293,288,282,276,266,274,282],
[271,0,278,291,285,279,260,269,257],
[257,272,0,290,255,252,256,269,254],
[262,259,260,0,285,250,266,241,251],
[268,265,295,265,0,274,268,279,270],
[274,271,298,300,276,0,277,264,251],
[284,290,294,284,282,273,0,269,273],
[276,281,281,309,271,286,281,0,275],
[268,293,296,299,280,299,277,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,276,229,261,254,248,285,213],
[293,0,244,242,253,242,267,273,242],
[274,306,0,237,257,261,232,286,254],
[321,308,313,0,289,285,320,303,273],
[289,297,293,261,0,280,295,280,281],
[296,308,289,265,270,0,292,293,229],
[302,283,318,230,255,258,0,285,239],
[265,277,264,247,270,257,265,0,220],
[337,308,296,277,269,321,311,330,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,271,224,266,255,245,254,272],
[327,0,314,275,292,319,295,272,298],
[279,236,0,266,280,268,249,263,281],
[326,275,284,0,318,303,291,297,292],
[284,258,270,232,0,283,282,279,253],
[295,231,282,247,267,0,285,269,290],
[305,255,301,259,268,265,0,277,301],
[296,278,287,253,271,281,273,0,250],
[278,252,269,258,297,260,249,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,256,286,243,284,272,258,305],
[261,0,237,240,231,246,250,271,269],
[294,313,0,270,283,302,284,274,305],
[264,310,280,0,262,284,243,276,308],
[307,319,267,288,0,298,261,262,327],
[266,304,248,266,252,0,256,273,286],
[278,300,266,307,289,294,0,271,318],
[292,279,276,274,288,277,279,0,312],
[245,281,245,242,223,264,232,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,249,263,249,241,260,279,249],
[256,0,260,279,261,240,254,275,256],
[301,290,0,266,265,258,279,267,260],
[287,271,284,0,272,262,276,297,266],
[301,289,285,278,0,281,286,274,289],
[309,310,292,288,269,0,286,285,285],
[290,296,271,274,264,264,0,284,274],
[271,275,283,253,276,265,266,0,274],
[301,294,290,284,261,265,276,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,290,290,270,257,284,275,273],
[258,0,295,282,276,283,301,275,272],
[260,255,0,264,231,244,263,245,263],
[260,268,286,0,270,246,276,260,263],
[280,274,319,280,0,263,278,277,261],
[293,267,306,304,287,0,278,282,282],
[266,249,287,274,272,272,0,278,267],
[275,275,305,290,273,268,272,0,258],
[277,278,287,287,289,268,283,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,135,266,211,203,279,181,247],
[293,0,250,241,314,286,254,265,197],
[415,300,0,300,268,309,376,298,305],
[284,309,250,0,182,228,274,204,202],
[339,236,282,368,0,270,366,229,255],
[347,264,241,322,280,0,371,277,312],
[271,296,174,276,184,179,0,208,148],
[369,285,252,346,321,273,342,0,331],
[303,353,245,348,295,238,402,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,250,265,261,270,261,273,268],
[280,0,265,279,260,280,273,273,277],
[300,285,0,299,269,285,287,282,273],
[285,271,251,0,266,282,273,273,275],
[289,290,281,284,0,296,284,266,284],
[280,270,265,268,254,0,265,265,272],
[289,277,263,277,266,285,0,283,270],
[277,277,268,277,284,285,267,0,282],
[282,273,277,275,266,278,280,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,255,309,248,277,303,273,246],
[233,0,252,274,262,279,287,272,242],
[295,298,0,305,282,292,287,297,272],
[241,276,245,0,260,250,247,250,206],
[302,288,268,290,0,258,265,295,252],
[273,271,258,300,292,0,282,266,257],
[247,263,263,303,285,268,0,284,287],
[277,278,253,300,255,284,266,0,268],
[304,308,278,344,298,293,263,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,287,274,292,264,283,273,283],
[253,0,271,273,260,266,267,255,280],
[263,279,0,257,267,267,271,274,267],
[276,277,293,0,279,261,261,284,275],
[258,290,283,271,0,272,261,260,275],
[286,284,283,289,278,0,289,263,282],
[267,283,279,289,289,261,0,254,281],
[277,295,276,266,290,287,296,0,288],
[267,270,283,275,275,268,269,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,207,355,297,265,305,324,295],
[235,0,291,282,293,314,257,283,275],
[343,259,0,255,328,248,246,365,315],
[195,268,295,0,299,278,231,295,318],
[253,257,222,251,0,186,200,311,318],
[285,236,302,272,364,0,354,370,313],
[245,293,304,319,350,196,0,258,359],
[226,267,185,255,239,180,292,0,284],
[255,275,235,232,232,237,191,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,262,270,270,270,282,279,267],
[278,0,274,285,269,262,282,282,277],
[288,276,0,293,289,268,275,276,279],
[280,265,257,0,282,272,270,267,266],
[280,281,261,268,0,274,273,272,272],
[280,288,282,278,276,0,261,287,263],
[268,268,275,280,277,289,0,260,268],
[271,268,274,283,278,263,290,0,269],
[283,273,271,284,278,287,282,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,263,312,319,287,266,283,307],
[231,0,224,237,265,268,247,223,258],
[287,326,0,291,297,275,263,253,299],
[238,313,259,0,289,256,264,243,315],
[231,285,253,261,0,252,229,250,282],
[263,282,275,294,298,0,277,259,300],
[284,303,287,286,321,273,0,291,302],
[267,327,297,307,300,291,259,0,286],
[243,292,251,235,268,250,248,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,279,261,271,273,283,274,286],
[272,0,299,276,292,275,291,272,280],
[271,251,0,250,273,280,279,268,278],
[289,274,300,0,305,272,288,293,295],
[279,258,277,245,0,274,277,275,279],
[277,275,270,278,276,0,269,284,287],
[267,259,271,262,273,281,0,274,282],
[276,278,282,257,275,266,276,0,282],
[264,270,272,255,271,263,268,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,304,277,255,288,325,295,289],
[252,0,252,261,268,249,232,244,273],
[246,298,0,278,300,324,279,277,287],
[273,289,272,0,259,302,295,311,280],
[295,282,250,291,0,310,320,283,300],
[262,301,226,248,240,0,241,245,258],
[225,318,271,255,230,309,0,249,261],
[255,306,273,239,267,305,301,0,236],
[261,277,263,270,250,292,289,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,296,282,294,264,291,313,281],
[247,0,267,250,252,264,266,266,270],
[254,283,0,256,273,264,277,269,270],
[268,300,294,0,299,277,295,291,282],
[256,298,277,251,0,247,277,279,285],
[286,286,286,273,303,0,287,281,298],
[259,284,273,255,273,263,0,279,265],
[237,284,281,259,271,269,271,0,275],
[269,280,280,268,265,252,285,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,251,256,286,184,241,232,242],
[309,0,257,302,283,221,266,279,271],
[299,293,0,287,326,234,252,293,264],
[294,248,263,0,260,233,248,295,279],
[264,267,224,290,0,220,254,256,261],
[366,329,316,317,330,0,345,330,271],
[309,284,298,302,296,205,0,252,279],
[318,271,257,255,294,220,298,0,231],
[308,279,286,271,289,279,271,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,348,278,216,285,303,260,277,310],
[202,0,216,221,206,324,213,255,266],
[272,334,0,285,298,342,294,331,394],
[334,329,265,0,303,374,307,340,332],
[265,344,252,247,0,350,282,253,325],
[247,226,208,176,200,0,284,269,329],
[290,337,256,243,268,266,0,270,329],
[273,295,219,210,297,281,280,0,341],
[240,284,156,218,225,221,221,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,249,244,265,265,252,228,266],
[289,0,278,271,275,266,240,266,258],
[301,272,0,264,269,284,254,260,255],
[306,279,286,0,270,272,284,272,277],
[285,275,281,280,0,272,250,262,261],
[285,284,266,278,278,0,266,260,280],
[298,310,296,266,300,284,0,282,287],
[322,284,290,278,288,290,268,0,277],
[284,292,295,273,289,270,263,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,304,290,330,237,247,261,277],
[252,0,249,243,251,284,199,271,249],
[246,301,0,203,300,349,287,292,293],
[260,307,347,0,316,326,322,308,325],
[220,299,250,234,0,251,267,349,209],
[313,266,201,224,299,0,305,316,331],
[303,351,263,228,283,245,0,329,288],
[289,279,258,242,201,234,221,0,237],
[273,301,257,225,341,219,262,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,310,258,265,299,279,270,267],
[274,0,276,242,272,271,260,250,272],
[240,274,0,276,246,261,236,260,256],
[292,308,274,0,258,272,277,263,285],
[285,278,304,292,0,296,262,266,284],
[251,279,289,278,254,0,246,249,266],
[271,290,314,273,288,304,0,286,307],
[280,300,290,287,284,301,264,0,289],
[283,278,294,265,266,284,243,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,265,264,262,262,270,255,265],
[303,0,284,290,288,258,274,291,281],
[285,266,0,270,277,270,298,269,260],
[286,260,280,0,282,283,287,281,274],
[288,262,273,268,0,277,302,284,268],
[288,292,280,267,273,0,296,281,290],
[280,276,252,263,248,254,0,266,265],
[295,259,281,269,266,269,284,0,271],
[285,269,290,276,282,260,285,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,266,259,269,273,274,265,243],
[302,0,287,292,282,295,294,296,261],
[284,263,0,256,275,282,273,266,246],
[291,258,294,0,285,280,277,283,278],
[281,268,275,265,0,263,282,243,246],
[277,255,268,270,287,0,285,274,238],
[276,256,277,273,268,265,0,259,239],
[285,254,284,267,307,276,291,0,258],
[307,289,304,272,304,312,311,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,273,278,259,268,258,283,269],
[278,0,272,276,253,271,250,267,259],
[277,278,0,275,256,253,263,285,271],
[272,274,275,0,260,273,239,284,276],
[291,297,294,290,0,286,273,300,276],
[282,279,297,277,264,0,257,276,276],
[292,300,287,311,277,293,0,296,268],
[267,283,265,266,250,274,254,0,266],
[281,291,279,274,274,274,282,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,292,275,276,255,290,282,275],
[268,0,278,265,270,254,261,285,268],
[258,272,0,275,278,271,260,289,263],
[275,285,275,0,290,264,278,288,276],
[274,280,272,260,0,275,280,288,282],
[295,296,279,286,275,0,279,284,277],
[260,289,290,272,270,271,0,281,282],
[268,265,261,262,262,266,269,0,282],
[275,282,287,274,268,273,268,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,280,277,295,281,274,261,291],
[262,0,253,255,263,259,307,274,269],
[270,297,0,288,295,287,290,291,272],
[273,295,262,0,317,257,286,249,293],
[255,287,255,233,0,278,255,247,298],
[269,291,263,293,272,0,291,276,281],
[276,243,260,264,295,259,0,257,270],
[289,276,259,301,303,274,293,0,332],
[259,281,278,257,252,269,280,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,300,350,276,272,255,282,316],
[286,0,314,357,299,323,269,321,347],
[250,236,0,330,255,255,221,343,333],
[200,193,220,0,209,228,177,241,257],
[274,251,295,341,0,332,305,303,297],
[278,227,295,322,218,0,236,290,315],
[295,281,329,373,245,314,0,336,342],
[268,229,207,309,247,260,214,0,268],
[234,203,217,293,253,235,208,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,214,280,254,300,258,251,275],
[308,0,215,255,262,347,334,228,274],
[336,335,0,328,272,367,328,257,317],
[270,295,222,0,262,334,292,213,328],
[296,288,278,288,0,323,259,279,314],
[250,203,183,216,227,0,235,217,255],
[292,216,222,258,291,315,0,270,286],
[299,322,293,337,271,333,280,0,286],
[275,276,233,222,236,295,264,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,263,285,270,280,276,281,278],
[260,0,259,267,244,253,273,259,252],
[287,291,0,289,265,276,277,279,293],
[265,283,261,0,259,271,279,277,271],
[280,306,285,291,0,283,301,286,273],
[270,297,274,279,267,0,272,284,270],
[274,277,273,271,249,278,0,287,283],
[269,291,271,273,264,266,263,0,271],
[272,298,257,279,277,280,267,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,228,261,276,239,252,281,266],
[318,0,265,310,289,256,263,284,299],
[322,285,0,290,292,297,268,305,293],
[289,240,260,0,287,254,260,272,294],
[274,261,258,263,0,240,261,272,285],
[311,294,253,296,310,0,275,307,271],
[298,287,282,290,289,275,0,318,269],
[269,266,245,278,278,243,232,0,285],
[284,251,257,256,265,279,281,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,278,280,257,266,257,265,270],
[260,0,277,274,259,272,271,277,280],
[272,273,0,287,260,272,278,271,272],
[270,276,263,0,277,257,279,276,275],
[293,291,290,273,0,277,266,265,272],
[284,278,278,293,273,0,270,270,287],
[293,279,272,271,284,280,0,263,274],
[285,273,279,274,285,280,287,0,276],
[280,270,278,275,278,263,276,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,267,265,268,261,268,263,289],
[278,0,284,259,265,255,266,281,286],
[283,266,0,275,265,262,283,270,271],
[285,291,275,0,254,277,279,269,273],
[282,285,285,296,0,269,266,271,287],
[289,295,288,273,281,0,281,280,286],
[282,284,267,271,284,269,0,277,295],
[287,269,280,281,279,270,273,0,277],
[261,264,279,277,263,264,255,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,273,262,283,295,264,291,292],
[289,0,293,262,299,294,284,285,297],
[277,257,0,253,266,272,263,268,281],
[288,288,297,0,294,284,264,257,292],
[267,251,284,256,0,289,295,253,296],
[255,256,278,266,261,0,254,265,249],
[286,266,287,286,255,296,0,259,251],
[259,265,282,293,297,285,291,0,298],
[258,253,269,258,254,301,299,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,259,246,248,254,254,251,272],
[293,0,280,269,275,275,266,268,289],
[291,270,0,249,275,270,263,271,302],
[304,281,301,0,285,277,255,282,301],
[302,275,275,265,0,274,268,258,275],
[296,275,280,273,276,0,276,270,285],
[296,284,287,295,282,274,0,284,293],
[299,282,279,268,292,280,266,0,286],
[278,261,248,249,275,265,257,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,276,303,314,287,287,291,261],
[249,0,247,277,252,283,274,283,275],
[274,303,0,295,288,303,289,293,302],
[247,273,255,0,245,268,264,262,260],
[236,298,262,305,0,286,303,286,292],
[263,267,247,282,264,0,258,277,265],
[263,276,261,286,247,292,0,245,270],
[259,267,257,288,264,273,305,0,284],
[289,275,248,290,258,285,280,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,264,280,275,282,266,264,277],
[273,0,278,285,281,285,285,286,293],
[286,272,0,274,297,287,266,277,291],
[270,265,276,0,277,270,277,258,287],
[275,269,253,273,0,255,254,253,271],
[268,265,263,280,295,0,268,278,275],
[284,265,284,273,296,282,0,273,283],
[286,264,273,292,297,272,277,0,292],
[273,257,259,263,279,275,267,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,292,249,240,262,282,245,265],
[335,0,278,287,294,296,291,320,265],
[258,272,0,302,251,250,305,288,271],
[301,263,248,0,242,257,244,247,264],
[310,256,299,308,0,278,317,313,294],
[288,254,300,293,272,0,300,294,283],
[268,259,245,306,233,250,0,262,266],
[305,230,262,303,237,256,288,0,271],
[285,285,279,286,256,267,284,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,301,265,296,300,286,297,295],
[271,0,287,279,275,275,283,258,270],
[249,263,0,260,274,270,270,250,266],
[285,271,290,0,282,284,277,290,284],
[254,275,276,268,0,264,258,269,283],
[250,275,280,266,286,0,270,268,273],
[264,267,280,273,292,280,0,268,268],
[253,292,300,260,281,282,282,0,285],
[255,280,284,266,267,277,282,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,319,283,256,275,265,280,271],
[300,0,288,297,250,265,280,281,273],
[231,262,0,279,252,252,236,260,270],
[267,253,271,0,272,271,259,288,277],
[294,300,298,278,0,290,279,275,294],
[275,285,298,279,260,0,281,261,276],
[285,270,314,291,271,269,0,289,292],
[270,269,290,262,275,289,261,0,274],
[279,277,280,273,256,274,258,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,265,270,290,279,261,292,278],
[318,0,289,287,327,265,279,311,314],
[285,261,0,251,309,251,240,310,285],
[280,263,299,0,321,252,283,303,291],
[260,223,241,229,0,217,226,267,257],
[271,285,299,298,333,0,282,300,290],
[289,271,310,267,324,268,0,318,317],
[258,239,240,247,283,250,232,0,270],
[272,236,265,259,293,260,233,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,280,265,264,287,269,287,280],
[272,0,269,280,289,281,299,287,291],
[270,281,0,268,295,281,294,293,293],
[285,270,282,0,268,263,292,273,298],
[286,261,255,282,0,270,278,260,282],
[263,269,269,287,280,0,285,271,294],
[281,251,256,258,272,265,0,266,274],
[263,263,257,277,290,279,284,0,275],
[270,259,257,252,268,256,276,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,285,311,274,301,291,301,298],
[249,0,264,271,258,258,262,276,251],
[265,286,0,307,272,270,292,294,293],
[239,279,243,0,256,255,265,268,258],
[276,292,278,294,0,270,267,280,269],
[249,292,280,295,280,0,282,299,286],
[259,288,258,285,283,268,0,278,261],
[249,274,256,282,270,251,272,0,270],
[252,299,257,292,281,264,289,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,274,269,255,296,295,283,283],
[255,0,270,260,256,281,276,270,245],
[276,280,0,274,273,291,285,282,286],
[281,290,276,0,268,290,290,276,291],
[295,294,277,282,0,297,291,285,274],
[254,269,259,260,253,0,271,274,271],
[255,274,265,260,259,279,0,262,280],
[267,280,268,274,265,276,288,0,276],
[267,305,264,259,276,279,270,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,260,257,204,297,294,341,280],
[334,0,316,336,298,333,294,354,241],
[290,234,0,327,226,333,289,326,189],
[293,214,223,0,225,291,289,282,192],
[346,252,324,325,0,413,373,411,324],
[253,217,217,259,137,0,238,186,131],
[256,256,261,261,177,312,0,320,184],
[209,196,224,268,139,364,230,0,138],
[270,309,361,358,226,419,366,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,240,247,272,251,237,243,241],
[300,0,275,293,315,286,274,284,267],
[310,275,0,262,315,305,273,275,284],
[303,257,288,0,295,270,299,279,280],
[278,235,235,255,0,257,273,261,252],
[299,264,245,280,293,0,284,274,272],
[313,276,277,251,277,266,0,246,276],
[307,266,275,271,289,276,304,0,290],
[309,283,266,270,298,278,274,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,237,296,242,266,260,278,261],
[280,0,289,293,263,287,263,276,273],
[313,261,0,272,247,272,275,251,303],
[254,257,278,0,251,279,284,253,253],
[308,287,303,299,0,295,271,306,283],
[284,263,278,271,255,0,266,242,262],
[290,287,275,266,279,284,0,266,278],
[272,274,299,297,244,308,284,0,298],
[289,277,247,297,267,288,272,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,262,304,270,273,310,287,318],
[277,0,276,267,252,291,302,274,301],
[288,274,0,287,253,285,297,276,303],
[246,283,263,0,278,279,296,283,295],
[280,298,297,272,0,309,304,291,320],
[277,259,265,271,241,0,290,251,296],
[240,248,253,254,246,260,0,241,273],
[263,276,274,267,259,299,309,0,318],
[232,249,247,255,230,254,277,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,281,296,272,293,288,286,262],
[245,0,285,278,250,281,310,288,280],
[269,265,0,259,268,260,289,239,270],
[254,272,291,0,293,293,285,297,311],
[278,300,282,257,0,334,275,267,277],
[257,269,290,257,216,0,281,276,252],
[262,240,261,265,275,269,0,204,245],
[264,262,311,253,283,274,346,0,272],
[288,270,280,239,273,298,305,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,270,268,276,267,280,271,287],
[268,0,277,274,280,289,267,268,275],
[280,273,0,267,280,281,278,272,297],
[282,276,283,0,289,278,270,273,280],
[274,270,270,261,0,273,263,267,279],
[283,261,269,272,277,0,259,284,281],
[270,283,272,280,287,291,0,252,287],
[279,282,278,277,283,266,298,0,274],
[263,275,253,270,271,269,263,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,328,242,269,364,267,252,295,310],
[222,0,258,276,334,300,273,338,299],
[308,292,0,232,251,290,245,228,223],
[281,274,318,0,289,277,243,325,286],
[186,216,299,261,0,221,247,295,272],
[283,250,260,273,329,0,291,241,305],
[298,277,305,307,303,259,0,329,285],
[255,212,322,225,255,309,221,0,298],
[240,251,327,264,278,245,265,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,272,260,282,334,284,267,245],
[258,0,238,238,254,264,272,253,229],
[278,312,0,280,304,286,283,279,265],
[290,312,270,0,264,286,288,301,271],
[268,296,246,286,0,298,290,289,281],
[216,286,264,264,252,0,288,266,251],
[266,278,267,262,260,262,0,288,246],
[283,297,271,249,261,284,262,0,243],
[305,321,285,279,269,299,304,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,268,301,278,272,366,280,315],
[282,0,253,291,287,283,324,274,293],
[282,297,0,292,314,317,320,297,274],
[249,259,258,0,273,263,312,295,271],
[272,263,236,277,0,244,313,250,296],
[278,267,233,287,306,0,292,258,282],
[184,226,230,238,237,258,0,230,264],
[270,276,253,255,300,292,320,0,327],
[235,257,276,279,254,268,286,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,247,281,259,282,293,272,272],
[311,0,290,297,267,294,296,269,270],
[303,260,0,297,276,297,302,273,290],
[269,253,253,0,253,259,298,264,240],
[291,283,274,297,0,293,299,274,264],
[268,256,253,291,257,0,287,265,280],
[257,254,248,252,251,263,0,262,265],
[278,281,277,286,276,285,288,0,267],
[278,280,260,310,286,270,285,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,281,273,274,266,281,277,269],
[261,0,261,238,268,257,281,270,257],
[269,289,0,259,286,266,275,264,253],
[277,312,291,0,270,278,278,279,276],
[276,282,264,280,0,253,283,257,278],
[284,293,284,272,297,0,292,307,284],
[269,269,275,272,267,258,0,274,275],
[273,280,286,271,293,243,276,0,271],
[281,293,297,274,272,266,275,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,285,307,261,271,291,277,265],
[287,0,250,278,276,263,278,266,272],
[265,300,0,325,268,276,278,282,292],
[243,272,225,0,240,234,257,260,267],
[289,274,282,310,0,268,288,285,309],
[279,287,274,316,282,0,290,277,293],
[259,272,272,293,262,260,0,268,271],
[273,284,268,290,265,273,282,0,271],
[285,278,258,283,241,257,279,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,276,249,264,260,245,237,277],
[300,0,285,263,257,258,277,255,282],
[274,265,0,275,255,252,254,279,265],
[301,287,275,0,245,268,270,278,261],
[286,293,295,305,0,295,247,292,278],
[290,292,298,282,255,0,285,277,275],
[305,273,296,280,303,265,0,271,271],
[313,295,271,272,258,273,279,0,249],
[273,268,285,289,272,275,279,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,293,255,262,269,297,273,235],
[229,0,284,225,234,258,282,274,258],
[257,266,0,266,246,238,278,269,255],
[295,325,284,0,256,278,325,288,303],
[288,316,304,294,0,279,320,283,266],
[281,292,312,272,271,0,313,297,271],
[253,268,272,225,230,237,0,256,235],
[277,276,281,262,267,253,294,0,255],
[315,292,295,247,284,279,315,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,227,236,223,332,239,202,194],
[339,0,281,231,178,208,276,177,191],
[323,269,0,256,276,241,309,268,230],
[314,319,294,0,268,313,288,249,291],
[327,372,274,282,0,356,345,279,255],
[218,342,309,237,194,0,238,189,208],
[311,274,241,262,205,312,0,217,273],
[348,373,282,301,271,361,333,0,247],
[356,359,320,259,295,342,277,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,267,261,230,263,256,256,298],
[273,0,296,257,253,278,273,273,308],
[283,254,0,254,259,262,251,251,298],
[289,293,296,0,277,308,289,274,306],
[320,297,291,273,0,299,263,275,312],
[287,272,288,242,251,0,237,258,289],
[294,277,299,261,287,313,0,286,305],
[294,277,299,276,275,292,264,0,316],
[252,242,252,244,238,261,245,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,260,271,263,225,262,266,245],
[289,0,278,282,271,274,278,290,289],
[290,272,0,279,275,261,261,284,265],
[279,268,271,0,265,265,247,282,274],
[287,279,275,285,0,264,276,285,268],
[325,276,289,285,286,0,265,291,287],
[288,272,289,303,274,285,0,289,286],
[284,260,266,268,265,259,261,0,272],
[305,261,285,276,282,263,264,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,261,284,291,270,260,252,259],
[278,0,277,267,267,258,258,248,272],
[289,273,0,282,281,279,280,277,266],
[266,283,268,0,272,283,262,252,266],
[259,283,269,278,0,280,274,270,272],
[280,292,271,267,270,0,280,281,281],
[290,292,270,288,276,270,0,280,282],
[298,302,273,298,280,269,270,0,276],
[291,278,284,284,278,269,268,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,271,293,253,232,267,273,273],
[278,0,249,259,255,243,250,242,240],
[279,301,0,293,272,278,265,298,292],
[257,291,257,0,267,227,255,259,224],
[297,295,278,283,0,265,266,277,277],
[318,307,272,323,285,0,301,305,302],
[283,300,285,295,284,249,0,281,280],
[277,308,252,291,273,245,269,0,256],
[277,310,258,326,273,248,270,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,262,251,272,274,261,272,267],
[259,0,257,258,262,275,243,255,271],
[288,293,0,290,274,298,268,298,265],
[299,292,260,0,277,304,276,286,262],
[278,288,276,273,0,299,277,280,280],
[276,275,252,246,251,0,240,270,269],
[289,307,282,274,273,310,0,291,283],
[278,295,252,264,270,280,259,0,270],
[283,279,285,288,270,281,267,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,304,308,265,284,287,329,321],
[273,0,281,290,340,241,298,302,299],
[246,269,0,225,296,240,256,269,277],
[242,260,325,0,286,259,262,278,280],
[285,210,254,264,0,284,273,300,293],
[266,309,310,291,266,0,305,324,307],
[263,252,294,288,277,245,0,287,260],
[221,248,281,272,250,226,263,0,278],
[229,251,273,270,257,243,290,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,335,295,273,259,292,259,287],
[263,0,298,258,270,266,301,279,291],
[215,252,0,252,245,217,259,214,254],
[255,292,298,0,288,259,283,246,259],
[277,280,305,262,0,288,273,263,298],
[291,284,333,291,262,0,299,303,304],
[258,249,291,267,277,251,0,270,282],
[291,271,336,304,287,247,280,0,293],
[263,259,296,291,252,246,268,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,285,275,282,281,275,285,263],
[275,0,270,293,279,275,283,273,274],
[265,280,0,276,275,282,277,271,266],
[275,257,274,0,277,281,273,285,279],
[268,271,275,273,0,270,261,265,277],
[269,275,268,269,280,0,276,288,276],
[275,267,273,277,289,274,0,285,267],
[265,277,279,265,285,262,265,0,274],
[287,276,284,271,273,274,283,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,295,264,357,385,550,199,424],
[286,0,396,211,357,357,479,199,199],
[255,154,0,154,172,314,294,140,353],
[286,339,396,0,357,286,479,199,353],
[193,193,378,193,0,353,353,294,353],
[165,193,236,264,197,0,319,140,193],
[0,71,256,71,197,231,0,101,231],
[351,351,410,351,256,410,449,0,323],
[126,351,197,197,197,357,319,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,302,279,266,273,314,236,290],
[293,0,314,274,257,281,229,248,277],
[248,236,0,264,265,281,252,224,205],
[271,276,286,0,238,243,272,267,234],
[284,293,285,312,0,299,290,263,285],
[277,269,269,307,251,0,272,285,284],
[236,321,298,278,260,278,0,231,315],
[314,302,326,283,287,265,319,0,288],
[260,273,345,316,265,266,235,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,280,286,287,282,254,291,279],
[292,0,272,295,313,295,281,294,289],
[270,278,0,263,289,281,279,295,287],
[264,255,287,0,281,264,265,298,260],
[263,237,261,269,0,272,278,292,285],
[268,255,269,286,278,0,272,272,267],
[296,269,271,285,272,278,0,276,270],
[259,256,255,252,258,278,274,0,256],
[271,261,263,290,265,283,280,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,267,292,275,290,262,274,285],
[248,0,262,232,263,260,268,258,260],
[283,288,0,299,284,315,250,271,288],
[258,318,251,0,290,314,279,263,254],
[275,287,266,260,0,255,245,278,262],
[260,290,235,236,295,0,267,288,252],
[288,282,300,271,305,283,0,296,291],
[276,292,279,287,272,262,254,0,265],
[265,290,262,296,288,298,259,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,287,296,315,296,328,335,273],
[261,0,300,309,264,285,328,294,287],
[263,250,0,310,291,277,318,289,262],
[254,241,240,0,267,252,323,302,235],
[235,286,259,283,0,313,358,336,293],
[254,265,273,298,237,0,316,348,282],
[222,222,232,227,192,234,0,271,278],
[215,256,261,248,214,202,279,0,253],
[277,263,288,315,257,268,272,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,377,258,288,266,298,357,296],
[252,0,302,212,304,253,289,332,288],
[173,248,0,230,228,202,211,271,241],
[292,338,320,0,267,325,268,352,302],
[262,246,322,283,0,192,234,310,223],
[284,297,348,225,358,0,299,346,305],
[252,261,339,282,316,251,0,272,277],
[193,218,279,198,240,204,278,0,219],
[254,262,309,248,327,245,273,331,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,263,265,259,249,257,252,255],
[286,0,266,269,255,274,270,252,264],
[287,284,0,254,251,278,268,267,258],
[285,281,296,0,281,265,273,261,275],
[291,295,299,269,0,276,290,293,291],
[301,276,272,285,274,0,270,274,275],
[293,280,282,277,260,280,0,282,267],
[298,298,283,289,257,276,268,0,271],
[295,286,292,275,259,275,283,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,304,269,252,262,288,269,272],
[298,0,319,268,293,276,273,292,281],
[246,231,0,233,254,243,278,247,249],
[281,282,317,0,269,282,266,264,270],
[298,257,296,281,0,270,284,272,307],
[288,274,307,268,280,0,286,284,282],
[262,277,272,284,266,264,0,255,269],
[281,258,303,286,278,266,295,0,288],
[278,269,301,280,243,268,281,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,274,260,258,288,277,272,266],
[268,0,274,264,279,265,281,283,276],
[276,276,0,256,284,301,283,304,251],
[290,286,294,0,271,296,312,291,270],
[292,271,266,279,0,286,297,315,290],
[262,285,249,254,264,0,287,274,264],
[273,269,267,238,253,263,0,265,259],
[278,267,246,259,235,276,285,0,269],
[284,274,299,280,260,286,291,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,268,267,267,269,265,280,271],
[268,0,268,266,261,264,277,283,267],
[282,282,0,279,298,283,295,284,269],
[283,284,271,0,272,273,271,278,264],
[283,289,252,278,0,278,275,276,269],
[281,286,267,277,272,0,279,271,262],
[285,273,255,279,275,271,0,276,269],
[270,267,266,272,274,279,274,0,284],
[279,283,281,286,281,288,281,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,360,166,166,194,194,412,332],
[522,0,332,166,166,194,332,550,332],
[190,218,0,356,218,190,0,218,522],
[384,384,194,0,190,384,194,412,384],
[384,384,332,360,0,194,194,412,332],
[356,356,360,166,356,0,166,356,360],
[356,218,550,356,356,384,0,218,522],
[138,0,332,138,138,194,332,0,332],
[218,218,28,166,218,190,28,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,264,304,295,284,288,280,267],
[259,0,235,297,258,302,271,264,298],
[286,315,0,293,291,282,255,262,265],
[246,253,257,0,261,260,234,234,248],
[255,292,259,289,0,290,279,277,265],
[266,248,268,290,260,0,219,251,229],
[262,279,295,316,271,331,0,289,268],
[270,286,288,316,273,299,261,0,245],
[283,252,285,302,285,321,282,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,287,280,277,278,275,284,285],
[280,0,269,248,270,278,270,276,254],
[263,281,0,274,296,280,271,280,288],
[270,302,276,0,285,274,280,277,281],
[273,280,254,265,0,274,266,263,261],
[272,272,270,276,276,0,279,282,273],
[275,280,279,270,284,271,0,276,272],
[266,274,270,273,287,268,274,0,275],
[265,296,262,269,289,277,278,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,247,275,233,202,290,276,271],
[300,0,283,303,280,238,229,248,262],
[303,267,0,265,283,209,292,242,287],
[275,247,285,0,299,244,289,247,304],
[317,270,267,251,0,257,298,263,332],
[348,312,341,306,293,0,343,254,316],
[260,321,258,261,252,207,0,245,256],
[274,302,308,303,287,296,305,0,247],
[279,288,263,246,218,234,294,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,281,260,266,250,269,241,274],
[284,0,281,285,274,261,269,262,286],
[269,269,0,264,251,244,268,241,268],
[290,265,286,0,259,257,255,249,273],
[284,276,299,291,0,270,275,287,286],
[300,289,306,293,280,0,288,270,305],
[281,281,282,295,275,262,0,266,287],
[309,288,309,301,263,280,284,0,299],
[276,264,282,277,264,245,263,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,288,281,279,293,280,288,297],
[277,0,283,285,273,275,295,287,298],
[262,267,0,274,272,267,275,276,298],
[269,265,276,0,278,278,286,284,293],
[271,277,278,272,0,267,284,283,302],
[257,275,283,272,283,0,283,290,283],
[270,255,275,264,266,267,0,277,279],
[262,263,274,266,267,260,273,0,307],
[253,252,252,257,248,267,271,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,294,252,332,276,283,274,291],
[257,0,309,255,322,256,291,294,298],
[256,241,0,260,340,257,289,288,299],
[298,295,290,0,316,264,251,313,302],
[218,228,210,234,0,243,235,220,252],
[274,294,293,286,307,0,316,284,287],
[267,259,261,299,315,234,0,268,282],
[276,256,262,237,330,266,282,0,287],
[259,252,251,248,298,263,268,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,238,235,221,235,247,270,249],
[359,0,311,288,275,285,317,356,265],
[312,239,0,280,245,283,324,299,281],
[315,262,270,0,264,277,294,322,260],
[329,275,305,286,0,296,306,333,294],
[315,265,267,273,254,0,304,323,270],
[303,233,226,256,244,246,0,290,272],
[280,194,251,228,217,227,260,0,239],
[301,285,269,290,256,280,278,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,279,291,270,280,279,266,281],
[262,0,274,269,269,268,266,259,267],
[271,276,0,275,268,279,278,275,266],
[259,281,275,0,270,262,269,276,266],
[280,281,282,280,0,268,284,290,271],
[270,282,271,288,282,0,275,277,262],
[271,284,272,281,266,275,0,276,277],
[284,291,275,274,260,273,274,0,272],
[269,283,284,284,279,288,273,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,292,267,286,237,215,257,230],
[266,0,232,268,273,263,227,233,242],
[258,318,0,258,248,243,227,262,204],
[283,282,292,0,296,295,244,255,249],
[264,277,302,254,0,268,274,246,246],
[313,287,307,255,282,0,273,262,222],
[335,323,323,306,276,277,0,285,269],
[293,317,288,295,304,288,265,0,291],
[320,308,346,301,304,328,281,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,266,257,289,278,272,273,266],
[273,0,276,274,277,285,276,276,263],
[284,274,0,276,279,278,285,283,266],
[293,276,274,0,299,294,284,278,279],
[261,273,271,251,0,264,266,281,257],
[272,265,272,256,286,0,263,285,263],
[278,274,265,266,284,287,0,271,278],
[277,274,267,272,269,265,279,0,271],
[284,287,284,271,293,287,272,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,286,250,283,279,281,276,279],
[267,0,276,262,284,276,260,288,270],
[264,274,0,249,272,277,252,276,275],
[300,288,301,0,282,298,280,278,273],
[267,266,278,268,0,264,268,269,286],
[271,274,273,252,286,0,264,275,283],
[269,290,298,270,282,286,0,284,281],
[274,262,274,272,281,275,266,0,273],
[271,280,275,277,264,267,269,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,313,276,312,279,284,259,274],
[261,0,283,265,277,269,254,264,275],
[237,267,0,248,269,254,248,265,236],
[274,285,302,0,293,286,272,273,260],
[238,273,281,257,0,262,258,257,243],
[271,281,296,264,288,0,278,264,256],
[266,296,302,278,292,272,0,284,275],
[291,286,285,277,293,286,266,0,288],
[276,275,314,290,307,294,275,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,253,247,264,284,233,260,251],
[283,0,275,257,273,294,263,272,282],
[297,275,0,282,281,293,257,287,275],
[303,293,268,0,285,283,261,272,283],
[286,277,269,265,0,274,251,282,261],
[266,256,257,267,276,0,259,266,264],
[317,287,293,289,299,291,0,300,271],
[290,278,263,278,268,284,250,0,269],
[299,268,275,267,289,286,279,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,282,285,284,271,288,262,263],
[288,0,272,288,277,282,297,276,276],
[268,278,0,282,279,273,285,269,272],
[265,262,268,0,266,259,285,276,269],
[266,273,271,284,0,278,276,273,283],
[279,268,277,291,272,0,286,279,289],
[262,253,265,265,274,264,0,253,263],
[288,274,281,274,277,271,297,0,273],
[287,274,278,281,267,261,287,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,297,282,265,234,271,257,274],
[287,0,317,277,278,243,272,246,274],
[253,233,0,257,251,217,236,254,263],
[268,273,293,0,254,232,256,251,249],
[285,272,299,296,0,252,288,290,274],
[316,307,333,318,298,0,299,271,302],
[279,278,314,294,262,251,0,261,266],
[293,304,296,299,260,279,289,0,300],
[276,276,287,301,276,248,284,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,274,327,334,273,302,241,294],
[239,0,264,325,306,285,281,230,268],
[276,286,0,279,328,267,274,278,290],
[223,225,271,0,270,250,239,245,240],
[216,244,222,280,0,242,207,218,237],
[277,265,283,300,308,0,291,270,287],
[248,269,276,311,343,259,0,250,276],
[309,320,272,305,332,280,300,0,295],
[256,282,260,310,313,263,274,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,278,279,257,274,261,276,272],
[274,0,264,281,259,269,266,246,278],
[272,286,0,265,266,277,265,267,279],
[271,269,285,0,276,304,270,273,274],
[293,291,284,274,0,269,266,283,280],
[276,281,273,246,281,0,258,265,267],
[289,284,285,280,284,292,0,272,281],
[274,304,283,277,267,285,278,0,287],
[278,272,271,276,270,283,269,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,256,275,265,306,284,286,266],
[255,0,266,274,261,275,285,292,255],
[294,284,0,278,290,298,303,312,270],
[275,276,272,0,274,305,304,293,269],
[285,289,260,276,0,308,279,297,277],
[244,275,252,245,242,0,254,264,256],
[266,265,247,246,271,296,0,260,238],
[264,258,238,257,253,286,290,0,271],
[284,295,280,281,273,294,312,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,310,292,299,309,264,316,292],
[282,0,322,299,304,309,300,332,264],
[240,228,0,254,235,256,242,263,241],
[258,251,296,0,283,283,254,317,282],
[251,246,315,267,0,277,268,278,294],
[241,241,294,267,273,0,265,312,286],
[286,250,308,296,282,285,0,278,321],
[234,218,287,233,272,238,272,0,296],
[258,286,309,268,256,264,229,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,281,290,272,277,270,286,286],
[272,0,290,294,284,283,281,293,295],
[269,260,0,270,287,282,276,285,268],
[260,256,280,0,288,261,286,293,272],
[278,266,263,262,0,279,277,283,274],
[273,267,268,289,271,0,284,273,258],
[280,269,274,264,273,266,0,282,270],
[264,257,265,257,267,277,268,0,262],
[264,255,282,278,276,292,280,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,317,273,285,267,260,249,274],
[255,0,277,254,267,269,245,272,273],
[233,273,0,269,265,255,246,251,249],
[277,296,281,0,286,271,279,286,294],
[265,283,285,264,0,256,265,267,266],
[283,281,295,279,294,0,289,279,261],
[290,305,304,271,285,261,0,279,273],
[301,278,299,264,283,271,271,0,274],
[276,277,301,256,284,289,277,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,290,293,273,302,299,283,295],
[251,0,276,274,270,278,279,286,285],
[260,274,0,269,287,284,276,283,294],
[257,276,281,0,268,272,289,282,297],
[277,280,263,282,0,274,272,288,279],
[248,272,266,278,276,0,283,276,282],
[251,271,274,261,278,267,0,276,277],
[267,264,267,268,262,274,274,0,286],
[255,265,256,253,271,268,273,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,233,326,311,259,273,228,291],
[240,0,193,213,245,184,175,253,235],
[317,357,0,265,337,285,330,270,300],
[224,337,285,0,295,200,238,297,253],
[239,305,213,255,0,234,267,211,270],
[291,366,265,350,316,0,317,248,302],
[277,375,220,312,283,233,0,285,270],
[322,297,280,253,339,302,265,0,321],
[259,315,250,297,280,248,280,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,275,307,258,275,276,284,262],
[296,0,297,277,289,297,295,274,299],
[275,253,0,284,273,264,271,274,275],
[243,273,266,0,245,260,254,267,248],
[292,261,277,305,0,286,282,289,281],
[275,253,286,290,264,0,287,271,286],
[274,255,279,296,268,263,0,280,263],
[266,276,276,283,261,279,270,0,275],
[288,251,275,302,269,264,287,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,303,301,278,277,266,302,293],
[298,0,290,317,302,297,265,266,312],
[247,260,0,275,270,250,250,253,261],
[249,233,275,0,239,299,261,272,277],
[272,248,280,311,0,282,253,236,285],
[273,253,300,251,268,0,276,271,255],
[284,285,300,289,297,274,0,277,329],
[248,284,297,278,314,279,273,0,309],
[257,238,289,273,265,295,221,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,288,285,259,281,292,272,302],
[275,0,291,264,273,286,291,261,265],
[262,259,0,269,274,272,283,274,303],
[265,286,281,0,268,277,282,275,273],
[291,277,276,282,0,281,273,295,272],
[269,264,278,273,269,0,292,281,275],
[258,259,267,268,277,258,0,270,275],
[278,289,276,275,255,269,280,0,260],
[248,285,247,277,278,275,275,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,254,279,303,287,270,231,248],
[310,0,280,319,327,311,306,267,275],
[296,270,0,321,329,324,297,297,282],
[271,231,229,0,310,290,254,246,273],
[247,223,221,240,0,278,255,245,240],
[263,239,226,260,272,0,249,220,272],
[280,244,253,296,295,301,0,255,273],
[319,283,253,304,305,330,295,0,282],
[302,275,268,277,310,278,277,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,272,250,276,280,311,258,309],
[264,0,292,287,285,259,320,260,326],
[278,258,0,267,315,258,306,271,248],
[300,263,283,0,293,256,283,245,305],
[274,265,235,257,0,270,281,277,274],
[270,291,292,294,280,0,333,252,320],
[239,230,244,267,269,217,0,220,289],
[292,290,279,305,273,298,330,0,309],
[241,224,302,245,276,230,261,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,288,268,292,275,294,293,275],
[244,0,267,264,279,268,274,289,275],
[262,283,0,279,276,267,272,277,264],
[282,286,271,0,247,285,308,304,280],
[258,271,274,303,0,289,292,289,262],
[275,282,283,265,261,0,289,282,284],
[256,276,278,242,258,261,0,274,287],
[257,261,273,246,261,268,276,0,276],
[275,275,286,270,288,266,263,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,139,143,15,200,143,208,161],
[426,0,254,359,276,239,325,261,276],
[411,296,0,327,342,121,372,306,211],
[407,191,223,0,200,299,264,144,200],
[535,274,208,350,0,200,143,208,245],
[350,311,429,251,350,0,296,380,350],
[407,225,178,286,407,254,0,239,276],
[342,289,244,406,342,170,311,0,135],
[389,274,339,350,305,200,274,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,296,279,280,273,283,284,289],
[245,0,268,270,270,267,257,271,288],
[254,282,0,269,272,261,267,274,307],
[271,280,281,0,289,264,256,290,284],
[270,280,278,261,0,263,269,279,276],
[277,283,289,286,287,0,267,271,291],
[267,293,283,294,281,283,0,302,296],
[266,279,276,260,271,279,248,0,290],
[261,262,243,266,274,259,254,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,263,259,273,265,261,268,257],
[277,0,273,258,251,276,282,284,277],
[287,277,0,281,272,272,281,296,279],
[291,292,269,0,271,300,272,304,277],
[277,299,278,279,0,302,299,284,270],
[285,274,278,250,248,0,278,272,275],
[289,268,269,278,251,272,0,283,272],
[282,266,254,246,266,278,267,0,273],
[293,273,271,273,280,275,278,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,288,320,306,301,276,266,306],
[241,0,256,280,289,263,239,265,285],
[262,294,0,337,329,297,317,286,285],
[230,270,213,0,270,245,274,265,272],
[244,261,221,280,0,303,312,288,255],
[249,287,253,305,247,0,312,263,276],
[274,311,233,276,238,238,0,266,299],
[284,285,264,285,262,287,284,0,331],
[244,265,265,278,295,274,251,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,244,273,231,231,268,258,241],
[322,0,346,296,283,261,361,324,366],
[306,204,0,319,287,257,337,279,287],
[277,254,231,0,248,252,303,272,301],
[319,267,263,302,0,250,292,291,285],
[319,289,293,298,300,0,325,270,316],
[282,189,213,247,258,225,0,253,261],
[292,226,271,278,259,280,297,0,302],
[309,184,263,249,265,234,289,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,271,262,269,264,274,293,277],
[272,0,263,258,243,285,250,276,264],
[279,287,0,253,261,281,259,282,276],
[288,292,297,0,277,293,273,297,283],
[281,307,289,273,0,286,273,273,280],
[286,265,269,257,264,0,270,272,267],
[276,300,291,277,277,280,0,295,266],
[257,274,268,253,277,278,255,0,270],
[273,286,274,267,270,283,284,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,227,200,261,248,251,233,273],
[263,0,307,278,269,266,247,234,326],
[323,243,0,211,250,253,230,260,256],
[350,272,339,0,311,316,285,275,349],
[289,281,300,239,0,285,269,260,326],
[302,284,297,234,265,0,277,257,329],
[299,303,320,265,281,273,0,244,303],
[317,316,290,275,290,293,306,0,335],
[277,224,294,201,224,221,247,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,249,272,274,274,259,272,248],
[274,0,266,267,284,289,277,267,275],
[301,284,0,275,290,299,280,285,272],
[278,283,275,0,270,282,261,267,260],
[276,266,260,280,0,264,267,256,261],
[276,261,251,268,286,0,262,263,246],
[291,273,270,289,283,288,0,264,265],
[278,283,265,283,294,287,286,0,274],
[302,275,278,290,289,304,285,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,275,307,336,282,253,290,314],
[301,0,258,272,280,229,308,274,300],
[275,292,0,279,259,255,295,256,249],
[243,278,271,0,293,216,235,255,232],
[214,270,291,257,0,235,260,283,301],
[268,321,295,334,315,0,318,290,268],
[297,242,255,315,290,232,0,264,292],
[260,276,294,295,267,260,286,0,271],
[236,250,301,318,249,282,258,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,302,336,307,297,285,331,276],
[277,0,304,289,305,290,273,307,287],
[248,246,0,292,266,262,240,272,286],
[214,261,258,0,264,259,233,240,229],
[243,245,284,286,0,270,253,304,271],
[253,260,288,291,280,0,237,303,275],
[265,277,310,317,297,313,0,318,271],
[219,243,278,310,246,247,232,0,251],
[274,263,264,321,279,275,279,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,284,312,296,254,261,280,333],
[246,0,259,317,236,249,296,274,321],
[266,291,0,318,273,248,260,265,284],
[238,233,232,0,212,240,235,237,219],
[254,314,277,338,0,260,274,308,348],
[296,301,302,310,290,0,235,277,322],
[289,254,290,315,276,315,0,280,336],
[270,276,285,313,242,273,270,0,316],
[217,229,266,331,202,228,214,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,279,251,260,270,278,264,247],
[282,0,266,259,275,278,269,294,271],
[271,284,0,287,255,290,287,283,257],
[299,291,263,0,275,297,277,312,272],
[290,275,295,275,0,284,296,311,280],
[280,272,260,253,266,0,278,280,284],
[272,281,263,273,254,272,0,287,291],
[286,256,267,238,239,270,263,0,248],
[303,279,293,278,270,266,259,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,264,232,296,297,277,262,277],
[259,0,259,257,269,281,253,246,258],
[286,291,0,277,274,303,287,276,286],
[318,293,273,0,284,294,303,274,287],
[254,281,276,266,0,274,270,250,269],
[253,269,247,256,276,0,273,262,266],
[273,297,263,247,280,277,0,277,265],
[288,304,274,276,300,288,273,0,279],
[273,292,264,263,281,284,285,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,267,272,268,266,273,286,267],
[279,0,255,271,271,258,265,276,261],
[283,295,0,275,272,266,271,286,284],
[278,279,275,0,279,282,275,274,282],
[282,279,278,271,0,285,284,277,284],
[284,292,284,268,265,0,278,281,273],
[277,285,279,275,266,272,0,287,283],
[264,274,264,276,273,269,263,0,268],
[283,289,266,268,266,277,267,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,329,305,282,304,275,328,331],
[263,0,299,294,301,232,195,265,263],
[221,251,0,245,238,227,199,265,240],
[245,256,305,0,243,296,216,282,275],
[268,249,312,307,0,261,264,290,311],
[246,318,323,254,289,0,237,274,235],
[275,355,351,334,286,313,0,310,311],
[222,285,285,268,260,276,240,0,259],
[219,287,310,275,239,315,239,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,265,318,266,240,237,290,247],
[265,0,239,342,288,260,258,291,288],
[285,311,0,302,280,199,254,282,294],
[232,208,248,0,256,232,233,240,236],
[284,262,270,294,0,286,262,262,236],
[310,290,351,318,264,0,345,304,281],
[313,292,296,317,288,205,0,289,278],
[260,259,268,310,288,246,261,0,213],
[303,262,256,314,314,269,272,337,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,278,277,289,277,287,291,266],
[264,0,278,295,266,277,293,295,261],
[272,272,0,273,283,284,290,289,280],
[273,255,277,0,270,275,289,283,277],
[261,284,267,280,0,276,288,266,257],
[273,273,266,275,274,0,286,274,254],
[263,257,260,261,262,264,0,268,259],
[259,255,261,267,284,276,282,0,268],
[284,289,270,273,293,296,291,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,270,281,243,282,279,264,283],
[303,0,277,287,267,281,268,283,281],
[280,273,0,280,273,288,297,265,269],
[269,263,270,0,264,279,265,255,270],
[307,283,277,286,0,279,272,251,285],
[268,269,262,271,271,0,293,265,276],
[271,282,253,285,278,257,0,285,271],
[286,267,285,295,299,285,265,0,257],
[267,269,281,280,265,274,279,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,302,273,235,299,287,301,256],
[260,0,261,260,235,277,320,216,273],
[248,289,0,287,280,304,325,267,284],
[277,290,263,0,201,270,314,241,286],
[315,315,270,349,0,281,330,293,308],
[251,273,246,280,269,0,320,240,264],
[263,230,225,236,220,230,0,220,261],
[249,334,283,309,257,310,330,0,310],
[294,277,266,264,242,286,289,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,270,265,248,283,219,276,241],
[297,0,294,270,276,285,248,302,240],
[280,256,0,263,294,295,262,289,280],
[285,280,287,0,266,270,256,258,266],
[302,274,256,284,0,264,271,292,259],
[267,265,255,280,286,0,283,277,294],
[331,302,288,294,279,267,0,293,292],
[274,248,261,292,258,273,257,0,258],
[309,310,270,284,291,256,258,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,290,242,277,258,234,272,284],
[276,0,302,299,300,241,260,253,298],
[260,248,0,265,316,239,252,267,282],
[308,251,285,0,306,259,247,272,299],
[273,250,234,244,0,237,253,233,268],
[292,309,311,291,313,0,275,291,299],
[316,290,298,303,297,275,0,299,278],
[278,297,283,278,317,259,251,0,276],
[266,252,268,251,282,251,272,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,291,380,272,282,325,278,325],
[303,0,289,336,307,299,340,266,339],
[259,261,0,281,285,250,336,219,299],
[170,214,269,0,190,231,292,226,282],
[278,243,265,360,0,272,324,216,309],
[268,251,300,319,278,0,291,262,308],
[225,210,214,258,226,259,0,203,303],
[272,284,331,324,334,288,347,0,331],
[225,211,251,268,241,242,247,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,279,285,295,272,294,313,277],
[267,0,280,275,274,260,302,272,257],
[271,270,0,265,277,255,296,286,250],
[265,275,285,0,262,251,282,264,263],
[255,276,273,288,0,261,286,285,250],
[278,290,295,299,289,0,308,308,270],
[256,248,254,268,264,242,0,250,262],
[237,278,264,286,265,242,300,0,263],
[273,293,300,287,300,280,288,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,260,283,268,261,291,304,272],
[256,0,261,238,226,214,245,267,259],
[290,289,0,286,277,274,282,277,281],
[267,312,264,0,287,271,261,300,277],
[282,324,273,263,0,283,281,315,295],
[289,336,276,279,267,0,323,287,314],
[259,305,268,289,269,227,0,302,288],
[246,283,273,250,235,263,248,0,247],
[278,291,269,273,255,236,262,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,274,279,290,279,314,307,269],
[259,0,265,264,277,280,308,249,266],
[276,285,0,271,288,250,284,277,262],
[271,286,279,0,285,279,308,288,296],
[260,273,262,265,0,279,299,266,269],
[271,270,300,271,271,0,293,275,273],
[236,242,266,242,251,257,0,285,265],
[243,301,273,262,284,275,265,0,270],
[281,284,288,254,281,277,285,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,295,247,274,303,295,297,308],
[263,0,266,270,249,281,266,267,285],
[255,284,0,261,237,292,268,268,276],
[303,280,289,0,276,308,308,273,311],
[276,301,313,274,0,306,295,288,309],
[247,269,258,242,244,0,265,257,275],
[255,284,282,242,255,285,0,273,264],
[253,283,282,277,262,293,277,0,293],
[242,265,274,239,241,275,286,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,282,248,251,274,282,243,252],
[296,0,305,266,279,286,273,274,283],
[268,245,0,251,234,268,272,251,256],
[302,284,299,0,256,267,287,263,277],
[299,271,316,294,0,302,288,277,289],
[276,264,282,283,248,0,275,254,277],
[268,277,278,263,262,275,0,253,262],
[307,276,299,287,273,296,297,0,283],
[298,267,294,273,261,273,288,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,253,273,277,252,249,292,263],
[278,0,281,300,291,268,267,303,296],
[297,269,0,271,276,274,255,280,271],
[277,250,279,0,268,286,245,296,255],
[273,259,274,282,0,257,280,269,261],
[298,282,276,264,293,0,283,278,283],
[301,283,295,305,270,267,0,307,281],
[258,247,270,254,281,272,243,0,286],
[287,254,279,295,289,267,269,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,282,270,278,268,279,274,252],
[273,0,276,286,303,272,285,267,281],
[268,274,0,271,287,256,268,278,255],
[280,264,279,0,289,281,274,261,258],
[272,247,263,261,0,266,259,262,251],
[282,278,294,269,284,0,286,283,256],
[271,265,282,276,291,264,0,284,253],
[276,283,272,289,288,267,266,0,274],
[298,269,295,292,299,294,297,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,264,298,270,269,272,255,282],
[308,0,261,284,252,278,279,258,262],
[286,289,0,298,257,277,271,263,264],
[252,266,252,0,251,262,274,277,239],
[280,298,293,299,0,285,275,267,278],
[281,272,273,288,265,0,286,256,264],
[278,271,279,276,275,264,0,253,262],
[295,292,287,273,283,294,297,0,278],
[268,288,286,311,272,286,288,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,242,290,277,285,294,277,262],
[256,0,238,275,233,278,276,308,278],
[308,312,0,319,267,321,315,318,301],
[260,275,231,0,226,307,310,303,254],
[273,317,283,324,0,303,298,323,283],
[265,272,229,243,247,0,269,292,244],
[256,274,235,240,252,281,0,296,279],
[273,242,232,247,227,258,254,0,276],
[288,272,249,296,267,306,271,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,215,270,212,264,228,264,250],
[298,0,248,301,296,347,320,265,284],
[335,302,0,310,238,259,264,289,300],
[280,249,240,0,207,241,226,302,243],
[338,254,312,343,0,341,298,284,306],
[286,203,291,309,209,0,231,264,264],
[322,230,286,324,252,319,0,283,275],
[286,285,261,248,266,286,267,0,281],
[300,266,250,307,244,286,275,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,261,261,249,250,273,238,244],
[293,0,281,271,283,268,290,271,258],
[289,269,0,271,277,269,284,249,269],
[289,279,279,0,259,288,288,275,271],
[301,267,273,291,0,283,275,279,270],
[300,282,281,262,267,0,263,256,262],
[277,260,266,262,275,287,0,252,242],
[312,279,301,275,271,294,298,0,289],
[306,292,281,279,280,288,308,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,258,256,258,299,260,249,252],
[308,0,274,306,279,285,287,310,282],
[292,276,0,300,300,294,290,275,264],
[294,244,250,0,244,272,262,271,243],
[292,271,250,306,0,275,277,274,240],
[251,265,256,278,275,0,254,238,259],
[290,263,260,288,273,296,0,294,260],
[301,240,275,279,276,312,256,0,243],
[298,268,286,307,310,291,290,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,197,217,221,281,260,229,237],
[351,0,262,283,369,322,292,229,333],
[353,288,0,269,335,344,344,351,331],
[333,267,281,0,344,297,246,291,285],
[329,181,215,206,0,331,279,290,268],
[269,228,206,253,219,0,194,191,225],
[290,258,206,304,271,356,0,254,274],
[321,321,199,259,260,359,296,0,249],
[313,217,219,265,282,325,276,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,268,271,266,276,253,292,287],
[271,0,266,259,260,291,274,295,276],
[282,284,0,278,278,278,261,282,278],
[279,291,272,0,271,281,273,288,271],
[284,290,272,279,0,276,263,294,286],
[274,259,272,269,274,0,268,278,291],
[297,276,289,277,287,282,0,292,271],
[258,255,268,262,256,272,258,0,263],
[263,274,272,279,264,259,279,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,254,267,278,273,261,245,239],
[271,0,240,250,252,246,249,241,266],
[296,310,0,299,273,284,279,267,285],
[283,300,251,0,273,260,267,249,260],
[272,298,277,277,0,268,282,263,267],
[277,304,266,290,282,0,280,256,272],
[289,301,271,283,268,270,0,278,279],
[305,309,283,301,287,294,272,0,276],
[311,284,265,290,283,278,271,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,273,274,261,290,252,291,283],
[270,0,336,302,253,308,291,286,282],
[277,214,0,269,224,263,239,242,234],
[276,248,281,0,265,277,262,261,268],
[289,297,326,285,0,301,261,314,278],
[260,242,287,273,249,0,249,283,251],
[298,259,311,288,289,301,0,281,303],
[259,264,308,289,236,267,269,0,301],
[267,268,316,282,272,299,247,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,278,294,242,284,311,276,269],
[302,0,295,236,226,276,270,292,249],
[272,255,0,168,172,187,209,258,227],
[256,314,382,0,329,266,308,310,270],
[308,324,378,221,0,307,372,210,289],
[266,274,363,284,243,0,278,263,221],
[239,280,341,242,178,272,0,262,252],
[274,258,292,240,340,287,288,0,257],
[281,301,323,280,261,329,298,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,277,290,285,274,303,291,293],
[273,0,265,287,283,261,280,274,273],
[273,285,0,279,276,282,287,302,291],
[260,263,271,0,267,261,281,275,274],
[265,267,274,283,0,258,287,287,283],
[276,289,268,289,292,0,297,282,288],
[247,270,263,269,263,253,0,276,278],
[259,276,248,275,263,268,274,0,285],
[257,277,259,276,267,262,272,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,256,266,258,264,278,259,249],
[293,0,273,262,274,282,290,276,272],
[294,277,0,260,264,282,289,279,261],
[284,288,290,0,263,277,296,281,265],
[292,276,286,287,0,288,301,277,264],
[286,268,268,273,262,0,285,265,257],
[272,260,261,254,249,265,0,259,247],
[291,274,271,269,273,285,291,0,275],
[301,278,289,285,286,293,303,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,255,275,286,291,313,302,287],
[287,0,272,272,332,326,302,310,296],
[295,278,0,283,284,293,311,320,260],
[275,278,267,0,288,315,290,302,282],
[264,218,266,262,0,255,256,281,255],
[259,224,257,235,295,0,265,243,225],
[237,248,239,260,294,285,0,292,248],
[248,240,230,248,269,307,258,0,253],
[263,254,290,268,295,325,302,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,312,293,304,310,257,306,304],
[251,0,306,279,268,233,264,290,275],
[238,244,0,279,239,251,259,263,271],
[257,271,271,0,276,264,279,289,261],
[246,282,311,274,0,268,266,295,275],
[240,317,299,286,282,0,250,280,307],
[293,286,291,271,284,300,0,293,293],
[244,260,287,261,255,270,257,0,277],
[246,275,279,289,275,243,257,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,291,284,262,261,272,272,261],
[271,0,282,292,262,261,279,275,270],
[259,268,0,273,256,260,270,272,261],
[266,258,277,0,245,267,260,265,259],
[288,288,294,305,0,273,292,292,282],
[289,289,290,283,277,0,268,283,284],
[278,271,280,290,258,282,0,281,277],
[278,275,278,285,258,267,269,0,275],
[289,280,289,291,268,266,273,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,286,295,291,270,284,258,292],
[276,0,286,293,278,286,289,272,265],
[264,264,0,284,272,275,291,258,274],
[255,257,266,0,265,255,276,249,272],
[259,272,278,285,0,279,283,282,269],
[280,264,275,295,271,0,274,266,274],
[266,261,259,274,267,276,0,258,262],
[292,278,292,301,268,284,292,0,271],
[258,285,276,278,281,276,288,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,302,324,279,351,274,323,297],
[283,0,343,332,250,349,276,302,298],
[248,207,0,290,246,295,238,285,264],
[226,218,260,0,221,295,216,285,261],
[271,300,304,329,0,353,253,276,265],
[199,201,255,255,197,0,192,267,239],
[276,274,312,334,297,358,0,292,318],
[227,248,265,265,274,283,258,0,278],
[253,252,286,289,285,311,232,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,275,261,273,243,254,262,247],
[291,0,280,291,289,269,290,287,274],
[275,270,0,267,273,275,252,282,255],
[289,259,283,0,288,268,255,270,259],
[277,261,277,262,0,253,233,263,237],
[307,281,275,282,297,0,261,272,270],
[296,260,298,295,317,289,0,301,279],
[288,263,268,280,287,278,249,0,256],
[303,276,295,291,313,280,271,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,283,295,289,269,279,299,276],
[257,0,253,273,268,247,261,270,282],
[267,297,0,279,278,281,274,292,268],
[255,277,271,0,290,254,274,286,279],
[261,282,272,260,0,249,287,257,286],
[281,303,269,296,301,0,294,274,278],
[271,289,276,276,263,256,0,272,273],
[251,280,258,264,293,276,278,0,292],
[274,268,282,271,264,272,277,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,295,285,306,295,292,291,258],
[246,0,263,256,235,228,237,234,235],
[255,287,0,288,305,283,290,292,297],
[265,294,262,0,286,279,272,301,284],
[244,315,245,264,0,263,268,271,261],
[255,322,267,271,287,0,260,251,269],
[258,313,260,278,282,290,0,276,269],
[259,316,258,249,279,299,274,0,274],
[292,315,253,266,289,281,281,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,227,303,264,285,301,254,250],
[252,0,269,296,288,274,263,291,267],
[323,281,0,297,313,248,256,308,254],
[247,254,253,0,249,272,240,267,239],
[286,262,237,301,0,242,271,305,297],
[265,276,302,278,308,0,272,305,269],
[249,287,294,310,279,278,0,314,272],
[296,259,242,283,245,245,236,0,246],
[300,283,296,311,253,281,278,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,268,297,273,292,279,286,262],
[253,0,259,263,255,276,249,279,251],
[282,291,0,283,268,289,260,292,282],
[253,287,267,0,256,287,257,278,263],
[277,295,282,294,0,286,273,269,275],
[258,274,261,263,264,0,252,273,263],
[271,301,290,293,277,298,0,291,265],
[264,271,258,272,281,277,259,0,261],
[288,299,268,287,275,287,285,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,267,273,256,283,283,275,275],
[281,0,277,285,252,282,262,263,277],
[283,273,0,270,262,282,246,260,287],
[277,265,280,0,258,294,268,260,298],
[294,298,288,292,0,282,271,287,286],
[267,268,268,256,268,0,266,255,277],
[267,288,304,282,279,284,0,275,290],
[275,287,290,290,263,295,275,0,285],
[275,273,263,252,264,273,260,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,270,274,255,267,267,281,265],
[276,0,274,278,274,263,281,289,267],
[280,276,0,272,263,266,278,286,270],
[276,272,278,0,277,249,280,293,271],
[295,276,287,273,0,292,283,289,284],
[283,287,284,301,258,0,262,294,278],
[283,269,272,270,267,288,0,278,263],
[269,261,264,257,261,256,272,0,267],
[285,283,280,279,266,272,287,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,268,295,264,284,258,282,256],
[275,0,279,285,257,293,269,255,277],
[282,271,0,294,269,290,262,290,278],
[255,265,256,0,247,264,258,256,264],
[286,293,281,303,0,304,262,286,282],
[266,257,260,286,246,0,265,255,267],
[292,281,288,292,288,285,0,283,273],
[268,295,260,294,264,295,267,0,277],
[294,273,272,286,268,283,277,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,266,267,280,265,299,274,281],
[274,0,256,263,255,273,287,281,284],
[284,294,0,295,300,268,315,272,293],
[283,287,255,0,272,268,280,277,291],
[270,295,250,278,0,266,285,259,258],
[285,277,282,282,284,0,316,286,262],
[251,263,235,270,265,234,0,258,252],
[276,269,278,273,291,264,292,0,279],
[269,266,257,259,292,288,298,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,280,262,258,271,294,270,274],
[254,0,277,237,252,272,271,253,287],
[270,273,0,276,269,283,295,276,272],
[288,313,274,0,286,295,278,280,289],
[292,298,281,264,0,292,284,268,268],
[279,278,267,255,258,0,289,255,261],
[256,279,255,272,266,261,0,261,271],
[280,297,274,270,282,295,289,0,280],
[276,263,278,261,282,289,279,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,268,259,314,261,281,294,271],
[258,0,264,247,284,272,264,272,278],
[282,286,0,254,300,269,279,278,265],
[291,303,296,0,336,302,262,307,307],
[236,266,250,214,0,262,227,267,234],
[289,278,281,248,288,0,265,277,304],
[269,286,271,288,323,285,0,302,260],
[256,278,272,243,283,273,248,0,232],
[279,272,285,243,316,246,290,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,153,119,227,141,399,103,70],
[319,0,353,211,292,254,334,71,117],
[397,197,0,231,219,139,332,191,117],
[431,339,319,0,424,266,415,351,190],
[323,258,331,126,0,315,288,213,178],
[409,296,411,284,235,0,328,222,277],
[151,216,218,135,262,222,0,83,65],
[447,479,359,199,337,328,467,0,226],
[480,433,433,360,372,273,485,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,292,293,271,305,266,258,282],
[283,0,281,300,259,288,278,283,277],
[258,269,0,288,263,285,270,268,267],
[257,250,262,0,257,264,248,249,236],
[279,291,287,293,0,295,290,280,273],
[245,262,265,286,255,0,293,275,267],
[284,272,280,302,260,257,0,269,273],
[292,267,282,301,270,275,281,0,277],
[268,273,283,314,277,283,277,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,291,273,242,256,333,268,293],
[269,0,255,237,238,220,276,248,248],
[259,295,0,256,249,254,287,278,261],
[277,313,294,0,301,261,308,262,320],
[308,312,301,249,0,294,299,272,251],
[294,330,296,289,256,0,312,273,270],
[217,274,263,242,251,238,0,256,301],
[282,302,272,288,278,277,294,0,281],
[257,302,289,230,299,280,249,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,252,272,257,284,278,269,261],
[281,0,261,293,274,293,271,278,283],
[298,289,0,281,280,318,304,292,272],
[278,257,269,0,269,292,265,263,258],
[293,276,270,281,0,279,277,288,259],
[266,257,232,258,271,0,274,253,242],
[272,279,246,285,273,276,0,256,273],
[281,272,258,287,262,297,294,0,272],
[289,267,278,292,291,308,277,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,272,287,285,282,285,276,273],
[265,0,263,276,267,270,275,273,268],
[278,287,0,286,285,298,284,272,289],
[263,274,264,0,267,282,272,264,270],
[265,283,265,283,0,277,275,258,276],
[268,280,252,268,273,0,258,245,255],
[265,275,266,278,275,292,0,268,261],
[274,277,278,286,292,305,282,0,288],
[277,282,261,280,274,295,289,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,289,287,281,262,284,283,272],
[270,0,269,271,258,249,261,275,251],
[261,281,0,280,271,271,294,290,279],
[263,279,270,0,265,266,274,270,263],
[269,292,279,285,0,280,284,282,286],
[288,301,279,284,270,0,285,285,274],
[266,289,256,276,266,265,0,266,272],
[267,275,260,280,268,265,284,0,265],
[278,299,271,287,264,276,278,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,290,275,255,278,272,272,280],
[275,0,310,280,276,294,271,272,261],
[260,240,0,271,261,273,267,254,261],
[275,270,279,0,257,296,274,271,267],
[295,274,289,293,0,285,288,282,299],
[272,256,277,254,265,0,266,260,265],
[278,279,283,276,262,284,0,284,276],
[278,278,296,279,268,290,266,0,279],
[270,289,289,283,251,285,274,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,296,294,268,269,258,277,273],
[306,0,294,310,276,262,265,306,284],
[254,256,0,276,272,279,275,286,257],
[256,240,274,0,277,258,239,286,247],
[282,274,278,273,0,276,256,262,275],
[281,288,271,292,274,0,284,273,280],
[292,285,275,311,294,266,0,302,298],
[273,244,264,264,288,277,248,0,261],
[277,266,293,303,275,270,252,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,274,269,280,270,272,298,260],
[270,0,264,258,270,277,259,276,253],
[276,286,0,288,274,290,284,304,278],
[281,292,262,0,291,292,286,305,266],
[270,280,276,259,0,270,263,298,256],
[280,273,260,258,280,0,270,274,256],
[278,291,266,264,287,280,0,310,283],
[252,274,246,245,252,276,240,0,251],
[290,297,272,284,294,294,267,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,292,279,269,314,292,318,278],
[254,0,296,294,291,293,309,307,279],
[258,254,0,269,251,291,276,275,265],
[271,256,281,0,270,297,305,305,276],
[281,259,299,280,0,300,288,297,277],
[236,257,259,253,250,0,282,255,261],
[258,241,274,245,262,268,0,304,268],
[232,243,275,245,253,295,246,0,268],
[272,271,285,274,273,289,282,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,280,266,265,278,279,245,268],
[288,0,283,275,278,286,281,262,284],
[270,267,0,252,279,270,263,269,275],
[284,275,298,0,280,282,284,265,279],
[285,272,271,270,0,278,274,271,266],
[272,264,280,268,272,0,278,263,286],
[271,269,287,266,276,272,0,257,274],
[305,288,281,285,279,287,293,0,275],
[282,266,275,271,284,264,276,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,177,205,198,230,171,206,170],
[285,0,257,220,238,206,260,255,242],
[373,293,0,289,282,306,313,239,304],
[345,330,261,0,296,258,294,221,274],
[352,312,268,254,0,284,331,252,368],
[320,344,244,292,266,0,352,244,307],
[379,290,237,256,219,198,0,241,261],
[344,295,311,329,298,306,309,0,262],
[380,308,246,276,182,243,289,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,288,287,282,321,266,323,281],
[244,0,263,277,291,289,261,290,268],
[262,287,0,280,261,294,254,288,255],
[263,273,270,0,281,303,249,283,266],
[268,259,289,269,0,277,281,269,266],
[229,261,256,247,273,0,241,280,253],
[284,289,296,301,269,309,0,283,300],
[227,260,262,267,281,270,267,0,276],
[269,282,295,284,284,297,250,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,335,292,313,282,278,270,303],
[269,0,352,308,320,321,284,309,317],
[215,198,0,250,239,238,212,253,252],
[258,242,300,0,246,278,236,250,293],
[237,230,311,304,0,294,239,275,271],
[268,229,312,272,256,0,225,267,306],
[272,266,338,314,311,325,0,289,342],
[280,241,297,300,275,283,261,0,295],
[247,233,298,257,279,244,208,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,264,263,259,303,272,269,237],
[273,0,279,275,277,299,254,271,262],
[286,271,0,264,277,289,270,278,269],
[287,275,286,0,283,294,273,277,283],
[291,273,273,267,0,276,271,264,259],
[247,251,261,256,274,0,293,285,257],
[278,296,280,277,279,257,0,270,263],
[281,279,272,273,286,265,280,0,272],
[313,288,281,267,291,293,287,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,269,276,238,235,250,239,285],
[281,0,278,292,263,253,268,290,297],
[281,272,0,263,285,232,276,252,276],
[274,258,287,0,279,279,268,311,278],
[312,287,265,271,0,274,289,290,293],
[315,297,318,271,276,0,312,318,335],
[300,282,274,282,261,238,0,279,272],
[311,260,298,239,260,232,271,0,253],
[265,253,274,272,257,215,278,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,266,281,257,268,278,261,278],
[264,0,237,244,259,270,290,267,237],
[284,313,0,295,285,285,310,287,271],
[269,306,255,0,278,284,288,263,262],
[293,291,265,272,0,294,305,281,269],
[282,280,265,266,256,0,253,260,254],
[272,260,240,262,245,297,0,278,282],
[289,283,263,287,269,290,272,0,282],
[272,313,279,288,281,296,268,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,295,277,263,291,290,278,284],
[279,0,279,257,274,274,266,288,276],
[255,271,0,257,264,268,265,285,274],
[273,293,293,0,255,271,272,277,271],
[287,276,286,295,0,287,257,288,290],
[259,276,282,279,263,0,270,272,270],
[260,284,285,278,293,280,0,275,292],
[272,262,265,273,262,278,275,0,266],
[266,274,276,279,260,280,258,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,266,302,282,279,254,289,266],
[287,0,296,300,280,262,303,300,283],
[284,254,0,284,280,268,268,269,260],
[248,250,266,0,247,254,257,267,243],
[268,270,270,303,0,264,275,286,273],
[271,288,282,296,286,0,272,302,291],
[296,247,282,293,275,278,0,305,274],
[261,250,281,283,264,248,245,0,260],
[284,267,290,307,277,259,276,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,279,285,313,265,331,293,303],
[262,0,263,239,263,239,285,284,253],
[271,287,0,247,281,288,289,251,259],
[265,311,303,0,290,300,316,282,280],
[237,287,269,260,0,249,255,261,280],
[285,311,262,250,301,0,302,273,274],
[219,265,261,234,295,248,0,275,281],
[257,266,299,268,289,277,275,0,281],
[247,297,291,270,270,276,269,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,254,240,304,160,223,265,259],
[312,0,351,288,270,187,255,283,308],
[296,199,0,309,311,157,196,253,232],
[310,262,241,0,208,220,248,241,259],
[246,280,239,342,0,215,311,339,292],
[390,363,393,330,335,0,296,257,256],
[327,295,354,302,239,254,0,309,231],
[285,267,297,309,211,293,241,0,260],
[291,242,318,291,258,294,319,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,293,278,281,297,271,276,334],
[277,0,256,277,285,251,279,303,310],
[257,294,0,293,272,294,271,299,314],
[272,273,257,0,273,296,255,283,298],
[269,265,278,277,0,289,266,283,326],
[253,299,256,254,261,0,243,270,283],
[279,271,279,295,284,307,0,301,311],
[274,247,251,267,267,280,249,0,307],
[216,240,236,252,224,267,239,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,275,239,270,281,307,246,263],
[293,0,278,257,281,272,283,263,254],
[275,272,0,272,250,251,261,274,256],
[311,293,278,0,313,278,315,264,255],
[280,269,300,237,0,267,305,304,223],
[269,278,299,272,283,0,268,287,281],
[243,267,289,235,245,282,0,278,248],
[304,287,276,286,246,263,272,0,234],
[287,296,294,295,327,269,302,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,250,249,246,245,252,263,257],
[303,0,277,280,267,310,294,312,265],
[300,273,0,268,261,283,276,257,254],
[301,270,282,0,277,293,270,281,285],
[304,283,289,273,0,294,287,285,286],
[305,240,267,257,256,0,274,258,260],
[298,256,274,280,263,276,0,268,264],
[287,238,293,269,265,292,282,0,270],
[293,285,296,265,264,290,286,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,264,272,283,264,280,297,253],
[277,0,271,280,290,291,268,292,277],
[286,279,0,276,283,264,299,259,253],
[278,270,274,0,304,289,273,279,265],
[267,260,267,246,0,248,268,260,264],
[286,259,286,261,302,0,282,289,257],
[270,282,251,277,282,268,0,270,269],
[253,258,291,271,290,261,280,0,260],
[297,273,297,285,286,293,281,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,289,302,279,290,267,299,287],
[240,0,285,260,285,302,262,296,299],
[261,265,0,280,273,284,255,281,281],
[248,290,270,0,269,282,254,254,270],
[271,265,277,281,0,288,272,274,296],
[260,248,266,268,262,0,251,273,258],
[283,288,295,296,278,299,0,292,275],
[251,254,269,296,276,277,258,0,260],
[263,251,269,280,254,292,275,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,281,272,333,252,273,209,388],
[324,0,328,273,339,293,345,308,388],
[269,222,0,262,307,245,260,244,362],
[278,277,288,0,333,378,304,253,333],
[217,211,243,217,0,244,237,270,320],
[298,257,305,172,306,0,291,238,403],
[277,205,290,246,313,259,0,188,341],
[341,242,306,297,280,312,362,0,367],
[162,162,188,217,230,147,209,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,299,268,270,280,289,276,277],
[291,0,273,270,276,283,294,268,284],
[251,277,0,259,271,264,291,290,262],
[282,280,291,0,298,280,301,294,265],
[280,274,279,252,0,278,279,279,282],
[270,267,286,270,272,0,284,275,275],
[261,256,259,249,271,266,0,262,261],
[274,282,260,256,271,275,288,0,263],
[273,266,288,285,268,275,289,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,275,280,301,286,270,296,277],
[271,0,274,272,299,273,269,292,263],
[275,276,0,270,283,273,291,279,263],
[270,278,280,0,290,276,282,299,266],
[249,251,267,260,0,262,244,268,253],
[264,277,277,274,288,0,291,287,274],
[280,281,259,268,306,259,0,274,270],
[254,258,271,251,282,263,276,0,267],
[273,287,287,284,297,276,280,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,274,290,280,278,278,285,288],
[255,0,255,274,258,245,251,268,259],
[276,295,0,284,285,270,270,271,270],
[260,276,266,0,267,268,269,265,267],
[270,292,265,283,0,265,271,279,258],
[272,305,280,282,285,0,288,276,292],
[272,299,280,281,279,262,0,278,289],
[265,282,279,285,271,274,272,0,288],
[262,291,280,283,292,258,261,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,251,271,251,271,223,250,251],
[259,0,281,277,234,253,220,229,231],
[299,269,0,335,278,274,281,278,276],
[279,273,215,0,271,229,234,249,216],
[299,316,272,279,0,293,268,242,248],
[279,297,276,321,257,0,249,267,265],
[327,330,269,316,282,301,0,274,288],
[300,321,272,301,308,283,276,0,270],
[299,319,274,334,302,285,262,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,310,263,273,288,268,288,263],
[276,0,293,291,287,311,269,297,271],
[240,257,0,261,267,283,265,269,270],
[287,259,289,0,275,285,245,291,288],
[277,263,283,275,0,264,267,278,266],
[262,239,267,265,286,0,292,266,284],
[282,281,285,305,283,258,0,290,247],
[262,253,281,259,272,284,260,0,258],
[287,279,280,262,284,266,303,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,260,252,247,278,268,268,269],
[275,0,265,287,269,257,299,262,277],
[290,285,0,272,260,269,272,290,265],
[298,263,278,0,280,273,275,281,249],
[303,281,290,270,0,290,281,273,268],
[272,293,281,277,260,0,254,288,261],
[282,251,278,275,269,296,0,282,253],
[282,288,260,269,277,262,268,0,287],
[281,273,285,301,282,289,297,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,287,376,324,295,363,283,331],
[287,0,309,329,344,223,277,241,308],
[263,241,0,327,254,249,306,224,291],
[174,221,223,0,222,170,221,202,202],
[226,206,296,328,0,204,284,243,297],
[255,327,301,380,346,0,344,322,349],
[187,273,244,329,266,206,0,181,226],
[267,309,326,348,307,228,369,0,297],
[219,242,259,348,253,201,324,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,293,262,283,281,282,285,292],
[271,0,307,270,282,290,280,281,292],
[257,243,0,264,257,278,261,253,257],
[288,280,286,0,269,286,258,282,281],
[267,268,293,281,0,281,263,285,280],
[269,260,272,264,269,0,268,272,272],
[268,270,289,292,287,282,0,290,284],
[265,269,297,268,265,278,260,0,281],
[258,258,293,269,270,278,266,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,275,287,266,255,259,265,270],
[279,0,269,285,297,267,278,281,282],
[275,281,0,318,295,269,281,277,280],
[263,265,232,0,276,246,246,237,253],
[284,253,255,274,0,262,243,261,269],
[295,283,281,304,288,0,272,257,274],
[291,272,269,304,307,278,0,271,276],
[285,269,273,313,289,293,279,0,269],
[280,268,270,297,281,276,274,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,306,236,314,288,290,272,317],
[290,0,256,303,332,271,266,299,319],
[244,294,0,235,270,278,197,270,323],
[314,247,315,0,343,288,321,247,357],
[236,218,280,207,0,268,212,295,322],
[262,279,272,262,282,0,261,274,283],
[260,284,353,229,338,289,0,306,368],
[278,251,280,303,255,276,244,0,266],
[233,231,227,193,228,267,182,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,292,278,306,298,278,267,280],
[266,0,278,263,292,285,266,263,284],
[258,272,0,277,292,281,268,274,263],
[272,287,273,0,289,288,274,266,258],
[244,258,258,261,0,274,267,260,256],
[252,265,269,262,276,0,255,258,272],
[272,284,282,276,283,295,0,288,281],
[283,287,276,284,290,292,262,0,293],
[270,266,287,292,294,278,269,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,261,278,251,269,232,261,255],
[343,0,299,307,294,281,269,292,331],
[289,251,0,276,271,304,261,289,298],
[272,243,274,0,279,256,246,241,276],
[299,256,279,271,0,258,258,279,296],
[281,269,246,294,292,0,278,284,249],
[318,281,289,304,292,272,0,269,266],
[289,258,261,309,271,266,281,0,286],
[295,219,252,274,254,301,284,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,242,235,256,262,187,229,200],
[317,0,285,288,296,250,325,251,288],
[308,265,0,258,300,295,237,208,262],
[315,262,292,0,329,283,295,234,259],
[294,254,250,221,0,245,240,290,265],
[288,300,255,267,305,0,236,251,278],
[363,225,313,255,310,314,0,283,287],
[321,299,342,316,260,299,267,0,310],
[350,262,288,291,285,272,263,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,273,278,268,287,261,259,260],
[263,0,276,294,283,281,262,266,260],
[277,274,0,284,281,281,263,260,266],
[272,256,266,0,274,269,258,249,253],
[282,267,269,276,0,274,263,262,258],
[263,269,269,281,276,0,261,265,262],
[289,288,287,292,287,289,0,259,278],
[291,284,290,301,288,285,291,0,272],
[290,290,284,297,292,288,272,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,247,277,266,262,258,254,278],
[251,0,256,268,259,266,263,259,277],
[303,294,0,289,274,278,276,279,287],
[273,282,261,0,264,283,271,274,291],
[284,291,276,286,0,288,274,280,284],
[288,284,272,267,262,0,274,257,276],
[292,287,274,279,276,276,0,276,291],
[296,291,271,276,270,293,274,0,316],
[272,273,263,259,266,274,259,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,256,270,272,261,267,257,260],
[262,0,268,271,275,264,259,267,273],
[294,282,0,287,306,282,274,278,282],
[280,279,263,0,289,260,266,273,276],
[278,275,244,261,0,264,269,276,264],
[289,286,268,290,286,0,275,283,277],
[283,291,276,284,281,275,0,277,282],
[293,283,272,277,274,267,273,0,279],
[290,277,268,274,286,273,268,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,284,275,278,266,273,299,270],
[270,0,297,272,287,265,291,278,287],
[266,253,0,269,266,257,290,271,269],
[275,278,281,0,284,274,265,285,248],
[272,263,284,266,0,261,266,283,258],
[284,285,293,276,289,0,281,275,283],
[277,259,260,285,284,269,0,264,265],
[251,272,279,265,267,275,286,0,269],
[280,263,281,302,292,267,285,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,281,268,272,281,270,265,250],
[286,0,273,286,290,280,264,274,270],
[269,277,0,280,281,266,278,286,263],
[282,264,270,0,282,275,261,279,263],
[278,260,269,268,0,287,256,282,245],
[269,270,284,275,263,0,278,273,242],
[280,286,272,289,294,272,0,273,280],
[285,276,264,271,268,277,277,0,255],
[300,280,287,287,305,308,270,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,271,308,263,252,323,319,258],
[303,0,331,226,252,283,296,318,264],
[279,219,0,246,223,218,289,319,239],
[242,324,304,0,260,232,264,381,230],
[287,298,327,290,0,291,242,324,254],
[298,267,332,318,259,0,307,326,326],
[227,254,261,286,308,243,0,324,254],
[231,232,231,169,226,224,226,0,253],
[292,286,311,320,296,224,296,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,274,277,270,295,271,296,291],
[274,0,278,265,248,282,261,297,298],
[276,272,0,268,257,277,272,296,284],
[273,285,282,0,275,279,276,285,299],
[280,302,293,275,0,298,300,302,303],
[255,268,273,271,252,0,272,295,275],
[279,289,278,274,250,278,0,275,304],
[254,253,254,265,248,255,275,0,279],
[259,252,266,251,247,275,246,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,270,305,263,294,277,294,278],
[242,0,267,247,242,273,241,264,279],
[280,283,0,301,275,282,274,277,259],
[245,303,249,0,220,241,230,268,254],
[287,308,275,330,0,293,276,283,283],
[256,277,268,309,257,0,275,272,258],
[273,309,276,320,274,275,0,282,269],
[256,286,273,282,267,278,268,0,283],
[272,271,291,296,267,292,281,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,271,311,256,225,278,274,271],
[257,0,261,321,245,246,236,243,268],
[279,289,0,328,280,279,251,281,253],
[239,229,222,0,186,194,161,206,218],
[294,305,270,364,0,294,308,261,275],
[325,304,271,356,256,0,261,303,293],
[272,314,299,389,242,289,0,265,304],
[276,307,269,344,289,247,285,0,280],
[279,282,297,332,275,257,246,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,386,314,275,253,359,358,338],
[309,0,328,306,306,241,389,278,284],
[164,222,0,231,222,177,334,242,158],
[236,244,319,0,300,180,280,257,313],
[275,244,328,250,0,265,455,307,319],
[297,309,373,370,285,0,339,334,246],
[191,161,216,270,95,211,0,220,159],
[192,272,308,293,243,216,330,0,250],
[212,266,392,237,231,304,391,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,292,365,390,226,331,326,324],
[239,0,335,309,328,337,298,377,389],
[258,215,0,254,296,274,252,299,315],
[185,241,296,0,243,243,209,238,327],
[160,222,254,307,0,246,307,275,296],
[324,213,276,307,304,0,303,263,338],
[219,252,298,341,243,247,0,312,326],
[224,173,251,312,275,287,238,0,352],
[226,161,235,223,254,212,224,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,287,287,285,292,284,254,290],
[270,0,312,331,318,371,316,287,298],
[263,238,0,317,293,355,316,272,297],
[263,219,233,0,300,271,230,300,259],
[265,232,257,250,0,311,281,267,302],
[258,179,195,279,239,0,240,232,247],
[266,234,234,320,269,310,0,292,291],
[296,263,278,250,283,318,258,0,294],
[260,252,253,291,248,303,259,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,273,280,268,278,284,281,284],
[273,0,251,275,272,276,258,265,263],
[277,299,0,289,285,284,273,278,298],
[270,275,261,0,260,266,275,240,272],
[282,278,265,290,0,295,275,268,278],
[272,274,266,284,255,0,271,256,287],
[266,292,277,275,275,279,0,268,285],
[269,285,272,310,282,294,282,0,281],
[266,287,252,278,272,263,265,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,298,273,284,282,287,276,285],
[275,0,302,284,276,298,291,285,281],
[252,248,0,270,252,268,272,265,275],
[277,266,280,0,265,275,269,262,282],
[266,274,298,285,0,288,285,271,276],
[268,252,282,275,262,0,283,269,272],
[263,259,278,281,265,267,0,265,274],
[274,265,285,288,279,281,285,0,291],
[265,269,275,268,274,278,276,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,271,324,279,249,251,290,267],
[352,0,303,384,249,320,296,337,301],
[279,247,0,300,286,239,303,290,248],
[226,166,250,0,214,192,250,226,220],
[271,301,264,336,0,240,353,341,264],
[301,230,311,358,310,0,306,328,242],
[299,254,247,300,197,244,0,277,283],
[260,213,260,324,209,222,273,0,295],
[283,249,302,330,286,308,267,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,290,260,296,266,264,266,244],
[291,0,296,260,289,292,284,282,257],
[260,254,0,233,286,275,279,254,264],
[290,290,317,0,264,273,299,275,275],
[254,261,264,286,0,261,280,276,267],
[284,258,275,277,289,0,278,279,269],
[286,266,271,251,270,272,0,277,254],
[284,268,296,275,274,271,273,0,254],
[306,293,286,275,283,281,296,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,224,247,237,221,219,239,227],
[321,0,246,310,276,290,278,287,283],
[326,304,0,288,288,283,249,299,240],
[303,240,262,0,251,246,267,278,242],
[313,274,262,299,0,268,263,239,234],
[329,260,267,304,282,0,286,309,257],
[331,272,301,283,287,264,0,250,229],
[311,263,251,272,311,241,300,0,250],
[323,267,310,308,316,293,321,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,269,252,266,266,258,267,264],
[289,0,270,271,262,282,281,294,279],
[281,280,0,278,262,276,261,278,246],
[298,279,272,0,274,289,268,287,258],
[284,288,288,276,0,299,274,286,273],
[284,268,274,261,251,0,263,262,257],
[292,269,289,282,276,287,0,289,278],
[283,256,272,263,264,288,261,0,268],
[286,271,304,292,277,293,272,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,291,299,270,266,257,312,295],
[276,0,267,269,244,248,257,289,283],
[259,283,0,275,259,259,278,297,268],
[251,281,275,0,250,250,264,280,282],
[280,306,291,300,0,261,296,323,308],
[284,302,291,300,289,0,274,319,301],
[293,293,272,286,254,276,0,300,291],
[238,261,253,270,227,231,250,0,260],
[255,267,282,268,242,249,259,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,286,266,274,275,245,261,263],
[266,0,295,269,257,259,269,249,269],
[264,255,0,287,270,269,262,239,243],
[284,281,263,0,290,293,258,262,301],
[276,293,280,260,0,273,259,279,281],
[275,291,281,257,277,0,274,246,284],
[305,281,288,292,291,276,0,281,272],
[289,301,311,288,271,304,269,0,285],
[287,281,307,249,269,266,278,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,339,302,253,278,266,284,261],
[274,0,315,273,279,286,270,304,278],
[211,235,0,230,231,224,299,286,255],
[248,277,320,0,295,287,310,340,263],
[297,271,319,255,0,276,276,373,275],
[272,264,326,263,274,0,326,294,305],
[284,280,251,240,274,224,0,311,219],
[266,246,264,210,177,256,239,0,204],
[289,272,295,287,275,245,331,346,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,294,309,311,277,266,258,283],
[265,0,280,262,266,268,242,251,252],
[256,270,0,244,270,252,250,259,275],
[241,288,306,0,296,268,265,264,276],
[239,284,280,254,0,260,267,258,261],
[273,282,298,282,290,0,283,302,297],
[284,308,300,285,283,267,0,277,304],
[292,299,291,286,292,248,273,0,302],
[267,298,275,274,289,253,246,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,299,281,273,285,299,297,269],
[255,0,278,280,272,267,279,273,263],
[251,272,0,252,261,271,296,262,266],
[269,270,298,0,290,277,284,292,251],
[277,278,289,260,0,283,295,290,274],
[265,283,279,273,267,0,294,259,285],
[251,271,254,266,255,256,0,280,256],
[253,277,288,258,260,291,270,0,259],
[281,287,284,299,276,265,294,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,292,242,284,290,271,247,255],
[293,0,288,252,316,283,281,258,258],
[258,262,0,242,268,290,232,241,259],
[308,298,308,0,308,310,265,244,254],
[266,234,282,242,0,253,272,248,269],
[260,267,260,240,297,0,267,257,256],
[279,269,318,285,278,283,0,251,272],
[303,292,309,306,302,293,299,0,275],
[295,292,291,296,281,294,278,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,293,278,300,266,281,261,287],
[293,0,289,289,290,263,284,278,307],
[257,261,0,263,283,277,264,276,286],
[272,261,287,0,283,252,274,270,288],
[250,260,267,267,0,251,252,259,261],
[284,287,273,298,299,0,270,269,295],
[269,266,286,276,298,280,0,272,296],
[289,272,274,280,291,281,278,0,288],
[263,243,264,262,289,255,254,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,259,247,270,237,262,258,234],
[315,0,299,286,292,273,297,282,279],
[291,251,0,274,287,240,256,298,252],
[303,264,276,0,289,258,259,288,270],
[280,258,263,261,0,249,257,274,237],
[313,277,310,292,301,0,275,297,280],
[288,253,294,291,293,275,0,296,294],
[292,268,252,262,276,253,254,0,244],
[316,271,298,280,313,270,256,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,285,284,270,285,309,293,260],
[273,0,287,285,283,287,275,278,271],
[265,263,0,259,273,273,274,268,283],
[266,265,291,0,252,261,270,270,273],
[280,267,277,298,0,268,286,277,273],
[265,263,277,289,282,0,282,281,277],
[241,275,276,280,264,268,0,266,258],
[257,272,282,280,273,269,284,0,256],
[290,279,267,277,277,273,292,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,285,300,264,245,272,258,296],
[293,0,251,319,272,266,261,257,302],
[265,299,0,304,285,262,270,286,278],
[250,231,246,0,259,232,253,238,240],
[286,278,265,291,0,284,273,307,292],
[305,284,288,318,266,0,280,286,285],
[278,289,280,297,277,270,0,269,269],
[292,293,264,312,243,264,281,0,295],
[254,248,272,310,258,265,281,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,283,291,287,268,288,307,294],
[251,0,277,280,278,252,251,282,280],
[267,273,0,278,283,273,245,268,288],
[259,270,272,0,273,257,255,263,283],
[263,272,267,277,0,273,240,281,289],
[282,298,277,293,277,0,270,286,296],
[262,299,305,295,310,280,0,284,297],
[243,268,282,287,269,264,266,0,297],
[256,270,262,267,261,254,253,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,301,294,307,286,266,270,290],
[252,0,290,288,268,269,262,273,267],
[249,260,0,282,295,254,270,274,301],
[256,262,268,0,272,264,247,234,259],
[243,282,255,278,0,274,260,259,272],
[264,281,296,286,276,0,249,270,274],
[284,288,280,303,290,301,0,268,294],
[280,277,276,316,291,280,282,0,273],
[260,283,249,291,278,276,256,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,255,280,281,256,274,289,287],
[241,0,255,273,285,267,243,240,250],
[295,295,0,278,287,273,266,273,297],
[270,277,272,0,290,235,236,259,294],
[269,265,263,260,0,265,267,252,284],
[294,283,277,315,285,0,318,274,322],
[276,307,284,314,283,232,0,288,308],
[261,310,277,291,298,276,262,0,276],
[263,300,253,256,266,228,242,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,289,285,276,281,292,276,270],
[275,0,281,296,270,282,304,287,284],
[261,269,0,280,258,253,278,269,237],
[265,254,270,0,263,253,276,290,255],
[274,280,292,287,0,282,283,284,277],
[269,268,297,297,268,0,289,290,259],
[258,246,272,274,267,261,0,283,265],
[274,263,281,260,266,260,267,0,269],
[280,266,313,295,273,291,285,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,281,294,305,293,277,272,283],
[292,0,270,285,309,284,257,279,296],
[269,280,0,287,297,296,257,276,277],
[256,265,263,0,282,293,258,279,265],
[245,241,253,268,0,257,225,263,253],
[257,266,254,257,293,0,251,266,288],
[273,293,293,292,325,299,0,281,304],
[278,271,274,271,287,284,269,0,277],
[267,254,273,285,297,262,246,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,367,305,413,386,242,318,292,286],
[183,0,272,297,288,200,207,138,255],
[245,278,0,352,353,207,292,250,191],
[137,253,198,0,240,134,275,185,197],
[164,262,197,310,0,112,182,233,213],
[308,350,343,416,438,0,318,333,244],
[232,343,258,275,368,232,0,180,265],
[258,412,300,365,317,217,370,0,281],
[264,295,359,353,337,306,285,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,289,298,271,284,287,278,289],
[268,0,247,281,282,284,265,282,285],
[261,303,0,293,269,290,285,278,282],
[252,269,257,0,277,278,280,269,280],
[279,268,281,273,0,270,279,289,285],
[266,266,260,272,280,0,264,277,271],
[263,285,265,270,271,286,0,266,293],
[272,268,272,281,261,273,284,0,277],
[261,265,268,270,265,279,257,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,288,331,327,278,338,261,293],
[270,0,287,316,343,285,316,299,311],
[262,263,0,324,303,298,321,245,288],
[219,234,226,0,282,282,288,230,238],
[223,207,247,268,0,244,266,242,242],
[272,265,252,268,306,0,317,264,280],
[212,234,229,262,284,233,0,235,248],
[289,251,305,320,308,286,315,0,275],
[257,239,262,312,308,270,302,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,279,277,249,270,290,256,263],
[258,0,266,271,266,263,277,276,275],
[271,284,0,291,302,279,288,247,263],
[273,279,259,0,248,273,263,262,255],
[301,284,248,302,0,281,296,287,273],
[280,287,271,277,269,0,292,254,282],
[260,273,262,287,254,258,0,259,261],
[294,274,303,288,263,296,291,0,272],
[287,275,287,295,277,268,289,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,282,239,263,276,254,263,268],
[284,0,272,259,300,290,256,286,284],
[268,278,0,251,280,281,253,257,293],
[311,291,299,0,278,318,272,281,292],
[287,250,270,272,0,297,263,254,270],
[274,260,269,232,253,0,223,265,295],
[296,294,297,278,287,327,0,273,306],
[287,264,293,269,296,285,277,0,311],
[282,266,257,258,280,255,244,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,297,271,274,294,281,294,262],
[270,0,291,258,271,285,246,287,281],
[253,259,0,215,256,269,228,248,237],
[279,292,335,0,294,300,266,300,283],
[276,279,294,256,0,291,232,285,283],
[256,265,281,250,259,0,233,259,257],
[269,304,322,284,318,317,0,301,308],
[256,263,302,250,265,291,249,0,252],
[288,269,313,267,267,293,242,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,278,264,260,302,268,263,282],
[305,0,274,314,317,320,314,300,308],
[272,276,0,306,299,311,295,288,287],
[286,236,244,0,290,280,277,267,279],
[290,233,251,260,0,276,285,209,291],
[248,230,239,270,274,0,274,231,270],
[282,236,255,273,265,276,0,200,270],
[287,250,262,283,341,319,350,0,327],
[268,242,263,271,259,280,280,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,256,258,310,380,240,278,341],
[265,0,229,178,204,216,148,181,305],
[294,321,0,244,245,312,226,239,339],
[292,372,306,0,232,381,234,248,321],
[240,346,305,318,0,390,177,286,311],
[170,334,238,169,160,0,182,190,296],
[310,402,324,316,373,368,0,239,435],
[272,369,311,302,264,360,311,0,330],
[209,245,211,229,239,254,115,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,272,264,275,236,233,285,270],
[276,0,275,266,266,234,237,247,258],
[278,275,0,275,261,238,218,271,262],
[286,284,275,0,296,245,292,299,311],
[275,284,289,254,0,234,248,252,263],
[314,316,312,305,316,0,255,324,277],
[317,313,332,258,302,295,0,315,273],
[265,303,279,251,298,226,235,0,247],
[280,292,288,239,287,273,277,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,382,286,233,286,287,278,284,338],
[168,0,175,197,209,203,217,277,216],
[264,375,0,279,265,353,204,326,350],
[317,353,271,0,307,320,326,377,287],
[264,341,285,243,0,254,325,248,338],
[263,347,197,230,296,0,325,366,225],
[272,333,346,224,225,225,0,323,292],
[266,273,224,173,302,184,227,0,269],
[212,334,200,263,212,325,258,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,273,272,276,246,276,296,279],
[260,0,250,261,254,247,266,265,267],
[277,300,0,286,271,279,299,277,280],
[278,289,264,0,276,269,280,285,282],
[274,296,279,274,0,267,265,290,274],
[304,303,271,281,283,0,287,297,290],
[274,284,251,270,285,263,0,264,267],
[254,285,273,265,260,253,286,0,282],
[271,283,270,268,276,260,283,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,302,283,294,297,279,335,269],
[285,0,265,286,241,318,271,299,367],
[248,285,0,251,267,304,282,338,291],
[267,264,299,0,292,314,279,356,372],
[256,309,283,258,0,291,293,331,298],
[253,232,246,236,259,0,210,274,295],
[271,279,268,271,257,340,0,320,302],
[215,251,212,194,219,276,230,0,270],
[281,183,259,178,252,255,248,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,304,270,270,260,291,250,286],
[279,0,280,274,247,282,276,242,268],
[246,270,0,243,261,264,256,248,263],
[280,276,307,0,254,283,297,239,274],
[280,303,289,296,0,269,285,277,283],
[290,268,286,267,281,0,295,251,277],
[259,274,294,253,265,255,0,242,260],
[300,308,302,311,273,299,308,0,290],
[264,282,287,276,267,273,290,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,276,263,266,285,279,257,251],
[289,0,290,293,276,294,267,291,264],
[274,260,0,245,256,284,264,277,249],
[287,257,305,0,256,277,274,291,288],
[284,274,294,294,0,291,266,294,283],
[265,256,266,273,259,0,257,269,261],
[271,283,286,276,284,293,0,300,288],
[293,259,273,259,256,281,250,0,233],
[299,286,301,262,267,289,262,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,272,292,280,302,268,264,286],
[286,0,295,300,273,310,287,278,284],
[278,255,0,293,275,285,266,261,292],
[258,250,257,0,259,275,274,259,257],
[270,277,275,291,0,285,276,282,278],
[248,240,265,275,265,0,272,274,266],
[282,263,284,276,274,278,0,276,272],
[286,272,289,291,268,276,274,0,295],
[264,266,258,293,272,284,278,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,291,267,248,285,273,254,249],
[289,0,296,301,282,289,295,278,255],
[259,254,0,263,249,268,271,251,240],
[283,249,287,0,257,277,280,272,263],
[302,268,301,293,0,282,282,277,270],
[265,261,282,273,268,0,286,237,272],
[277,255,279,270,268,264,0,249,257],
[296,272,299,278,273,313,301,0,292],
[301,295,310,287,280,278,293,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,241,250,266,257,270,277,232],
[284,0,262,281,269,278,265,283,267],
[309,288,0,289,269,254,279,283,240],
[300,269,261,0,303,300,267,283,263],
[284,281,281,247,0,265,262,264,239],
[293,272,296,250,285,0,274,265,263],
[280,285,271,283,288,276,0,284,276],
[273,267,267,267,286,285,266,0,244],
[318,283,310,287,311,287,274,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,249,270,239,251,229,270,257],
[315,0,290,289,263,300,299,288,261],
[301,260,0,274,275,255,268,271,272],
[280,261,276,0,253,266,254,295,255],
[311,287,275,297,0,298,293,253,276],
[299,250,295,284,252,0,264,266,275],
[321,251,282,296,257,286,0,277,271],
[280,262,279,255,297,284,273,0,275],
[293,289,278,295,274,275,279,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,287,268,234,269,270,302,271],
[259,0,265,271,219,209,268,272,252],
[263,285,0,284,238,251,276,276,296],
[282,279,266,0,277,225,286,275,279],
[316,331,312,273,0,310,266,291,331],
[281,341,299,325,240,0,324,288,301],
[280,282,274,264,284,226,0,241,286],
[248,278,274,275,259,262,309,0,274],
[279,298,254,271,219,249,264,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,295,286,288,270,309,294,268],
[296,0,272,279,304,299,283,293,272],
[255,278,0,269,292,260,293,294,274],
[264,271,281,0,303,240,293,281,275],
[262,246,258,247,0,259,274,281,248],
[280,251,290,310,291,0,288,276,272],
[241,267,257,257,276,262,0,274,241],
[256,257,256,269,269,274,276,0,253],
[282,278,276,275,302,278,309,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,237,282,335,247,318,329,281],
[304,0,310,323,332,312,324,265,258],
[313,240,0,319,301,294,334,311,276],
[268,227,231,0,268,246,259,277,195],
[215,218,249,282,0,207,312,232,251],
[303,238,256,304,343,0,332,286,293],
[232,226,216,291,238,218,0,268,244],
[221,285,239,273,318,264,282,0,308],
[269,292,274,355,299,257,306,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,265,284,258,279,243,276,248],
[259,0,269,264,237,277,246,252,250],
[285,281,0,295,298,317,279,301,273],
[266,286,255,0,266,299,248,262,257],
[292,313,252,284,0,308,267,289,291],
[271,273,233,251,242,0,257,241,253],
[307,304,271,302,283,293,0,268,285],
[274,298,249,288,261,309,282,0,239],
[302,300,277,293,259,297,265,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,312,280,243,243,264,325,326],
[286,0,371,326,311,313,325,343,261],
[238,179,0,298,226,236,291,240,254],
[270,224,252,0,256,268,266,291,251],
[307,239,324,294,0,269,293,255,263],
[307,237,314,282,281,0,240,253,300],
[286,225,259,284,257,310,0,245,286],
[225,207,310,259,295,297,305,0,293],
[224,289,296,299,287,250,264,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,258,277,259,277,280,245,250],
[300,0,286,272,279,288,282,265,285],
[292,264,0,259,270,270,276,260,248],
[273,278,291,0,267,263,272,265,269],
[291,271,280,283,0,297,280,271,283],
[273,262,280,287,253,0,276,259,261],
[270,268,274,278,270,274,0,276,270],
[305,285,290,285,279,291,274,0,289],
[300,265,302,281,267,289,280,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,302,274,267,266,271,293,308],
[256,0,293,244,258,261,249,272,294],
[248,257,0,246,260,260,269,296,275],
[276,306,304,0,305,269,306,310,291],
[283,292,290,245,0,275,303,269,289],
[284,289,290,281,275,0,290,291,298],
[279,301,281,244,247,260,0,274,303],
[257,278,254,240,281,259,276,0,287],
[242,256,275,259,261,252,247,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,300,273,279,288,294,272,275],
[286,0,269,294,301,270,299,281,307],
[250,281,0,244,263,235,258,254,254],
[277,256,306,0,297,290,314,272,301],
[271,249,287,253,0,262,293,292,277],
[262,280,315,260,288,0,314,291,292],
[256,251,292,236,257,236,0,257,244],
[278,269,296,278,258,259,293,0,265],
[275,243,296,249,273,258,306,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,267,275,294,270,257,264,268],
[283,0,269,287,278,284,268,270,276],
[283,281,0,279,276,272,271,279,280],
[275,263,271,0,278,281,277,275,268],
[256,272,274,272,0,273,284,273,278],
[280,266,278,269,277,0,266,282,259],
[293,282,279,273,266,284,0,277,262],
[286,280,271,275,277,268,273,0,278],
[282,274,270,282,272,291,288,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,259,281,265,277,294,292,282],
[290,0,272,275,275,271,296,274,281],
[291,278,0,294,277,268,295,301,294],
[269,275,256,0,272,271,272,278,270],
[285,275,273,278,0,254,287,281,281],
[273,279,282,279,296,0,300,311,273],
[256,254,255,278,263,250,0,275,279],
[258,276,249,272,269,239,275,0,257],
[268,269,256,280,269,277,271,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,286,285,289,273,280,286,276],
[252,0,262,253,259,265,273,260,253],
[264,288,0,262,281,267,273,278,280],
[265,297,288,0,289,283,278,272,277],
[261,291,269,261,0,271,277,278,253],
[277,285,283,267,279,0,299,270,291],
[270,277,277,272,273,251,0,260,279],
[264,290,272,278,272,280,290,0,279],
[274,297,270,273,297,259,271,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,274,289,282,281,309,274,272],
[259,0,265,305,238,267,287,272,261],
[276,285,0,297,275,283,299,306,293],
[261,245,253,0,237,259,266,296,261],
[268,312,275,313,0,293,302,303,292],
[269,283,267,291,257,0,267,298,256],
[241,263,251,284,248,283,0,277,252],
[276,278,244,254,247,252,273,0,265],
[278,289,257,289,258,294,298,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,253,261,296,225,250,242,279],
[256,0,222,231,247,213,237,238,222],
[297,328,0,342,330,263,289,275,317],
[289,319,208,0,279,281,252,226,264],
[254,303,220,271,0,248,257,253,275],
[325,337,287,269,302,0,266,317,264],
[300,313,261,298,293,284,0,279,297],
[308,312,275,324,297,233,271,0,297],
[271,328,233,286,275,286,253,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,283,288,281,294,291,275,282],
[271,0,282,267,279,261,259,251,277],
[267,268,0,280,268,272,262,260,276],
[262,283,270,0,273,275,278,233,284],
[269,271,282,277,0,273,261,277,280],
[256,289,278,275,277,0,266,267,286],
[259,291,288,272,289,284,0,256,284],
[275,299,290,317,273,283,294,0,301],
[268,273,274,266,270,264,266,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,299,310,264,286,287,290,313],
[276,0,279,287,260,282,274,280,304],
[251,271,0,262,277,278,260,278,306],
[240,263,288,0,270,274,269,291,306],
[286,290,273,280,0,281,302,290,312],
[264,268,272,276,269,0,280,293,301],
[263,276,290,281,248,270,0,280,316],
[260,270,272,259,260,257,270,0,292],
[237,246,244,244,238,249,234,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,245,265,305,303,252,215,250],
[303,0,267,275,297,315,265,257,259],
[305,283,0,312,275,309,274,272,287],
[285,275,238,0,292,274,257,244,274],
[245,253,275,258,0,248,275,238,263],
[247,235,241,276,302,0,298,224,247],
[298,285,276,293,275,252,0,275,259],
[335,293,278,306,312,326,275,0,302],
[300,291,263,276,287,303,291,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,275,303,273,298,292,278,285],
[245,0,267,276,271,276,267,264,256],
[275,283,0,291,284,289,279,280,282],
[247,274,259,0,267,291,264,256,271],
[277,279,266,283,0,293,266,265,282],
[252,274,261,259,257,0,270,273,259],
[258,283,271,286,284,280,0,281,276],
[272,286,270,294,285,277,269,0,283],
[265,294,268,279,268,291,274,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,293,265,268,251,251,255,263],
[285,0,291,298,280,265,293,296,286],
[257,259,0,250,243,256,265,261,255],
[285,252,300,0,283,260,261,278,270],
[282,270,307,267,0,281,284,290,276],
[299,285,294,290,269,0,279,294,273],
[299,257,285,289,266,271,0,281,277],
[295,254,289,272,260,256,269,0,281],
[287,264,295,280,274,277,273,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,312,265,306,278,296,269,322],
[283,0,294,273,286,283,271,269,307],
[238,256,0,258,243,247,281,262,266],
[285,277,292,0,276,262,280,270,293],
[244,264,307,274,0,260,278,291,289],
[272,267,303,288,290,0,305,295,312],
[254,279,269,270,272,245,0,272,296],
[281,281,288,280,259,255,278,0,290],
[228,243,284,257,261,238,254,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,275,246,285,274,267,283,255],
[287,0,291,276,304,293,263,276,271],
[275,259,0,239,265,262,234,253,254],
[304,274,311,0,285,280,266,282,279],
[265,246,285,265,0,263,259,275,262],
[276,257,288,270,287,0,258,258,275],
[283,287,316,284,291,292,0,300,271],
[267,274,297,268,275,292,250,0,290],
[295,279,296,271,288,275,279,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,276,240,275,241,309,310,276],
[273,0,311,239,311,413,239,377,310],
[274,239,0,274,173,238,240,274,241],
[310,311,276,0,207,376,310,344,276],
[275,239,377,343,0,341,309,308,411],
[309,137,312,174,209,0,206,344,311],
[241,311,310,240,241,344,0,342,274],
[240,173,276,206,242,206,208,0,276],
[274,240,309,274,139,239,276,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,256,267,253,298,262,262,271],
[272,0,256,234,261,291,224,231,270],
[294,294,0,285,315,320,256,273,296],
[283,316,265,0,264,311,276,278,278],
[297,289,235,286,0,295,262,273,272],
[252,259,230,239,255,0,220,238,269],
[288,326,294,274,288,330,0,283,307],
[288,319,277,272,277,312,267,0,260],
[279,280,254,272,278,281,243,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,265,248,253,265,257,267,259],
[289,0,274,267,269,284,262,291,275],
[285,276,0,272,254,273,248,282,274],
[302,283,278,0,263,286,284,302,281],
[297,281,296,287,0,283,291,304,271],
[285,266,277,264,267,0,271,272,283],
[293,288,302,266,259,279,0,283,260],
[283,259,268,248,246,278,267,0,270],
[291,275,276,269,279,267,290,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,278,251,273,263,287,276,285],
[275,0,269,277,274,274,275,306,281],
[272,281,0,270,243,262,255,284,250],
[299,273,280,0,277,295,278,317,296],
[277,276,307,273,0,278,277,273,265],
[287,276,288,255,272,0,272,299,256],
[263,275,295,272,273,278,0,288,284],
[274,244,266,233,277,251,262,0,234],
[265,269,300,254,285,294,266,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,289,321,276,262,253,281,257],
[302,0,259,280,268,264,260,284,251],
[261,291,0,287,269,256,249,264,250],
[229,270,263,0,246,229,244,271,221],
[274,282,281,304,0,252,254,285,251],
[288,286,294,321,298,0,266,299,285],
[297,290,301,306,296,284,0,300,263],
[269,266,286,279,265,251,250,0,283],
[293,299,300,329,299,265,287,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,262,256,278,280,256,277,276],
[287,0,263,280,272,262,265,270,279],
[288,287,0,263,296,277,263,268,285],
[294,270,287,0,280,258,270,272,266],
[272,278,254,270,0,266,261,274,278],
[270,288,273,292,284,0,277,281,289],
[294,285,287,280,289,273,0,292,277],
[273,280,282,278,276,269,258,0,270],
[274,271,265,284,272,261,273,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,266,260,280,266,256,271,267],
[280,0,259,271,287,280,274,278,276],
[284,291,0,281,274,289,264,273,287],
[290,279,269,0,297,271,251,283,277],
[270,263,276,253,0,261,270,262,260],
[284,270,261,279,289,0,245,293,279],
[294,276,286,299,280,305,0,289,274],
[279,272,277,267,288,257,261,0,259],
[283,274,263,273,290,271,276,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,302,234,295,267,264,244,324],
[330,0,347,236,275,298,290,296,320],
[248,203,0,231,261,248,231,276,265],
[316,314,319,0,258,280,265,284,351],
[255,275,289,292,0,241,286,274,362],
[283,252,302,270,309,0,301,327,286],
[286,260,319,285,264,249,0,298,287],
[306,254,274,266,276,223,252,0,277],
[226,230,285,199,188,264,263,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,271,289,286,261,270,256,276],
[247,0,282,296,280,235,272,291,279],
[279,268,0,311,304,255,282,282,262],
[261,254,239,0,270,254,273,261,253],
[264,270,246,280,0,216,262,263,236],
[289,315,295,296,334,0,294,269,274],
[280,278,268,277,288,256,0,248,247],
[294,259,268,289,287,281,302,0,255],
[274,271,288,297,314,276,303,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,308,343,317,287,331,319,301],
[276,0,296,317,269,301,322,295,280],
[242,254,0,273,263,239,273,273,273],
[207,233,277,0,256,238,277,259,255],
[233,281,287,294,0,264,317,270,279],
[263,249,311,312,286,0,251,286,300],
[219,228,277,273,233,299,0,251,282],
[231,255,277,291,280,264,299,0,288],
[249,270,277,295,271,250,268,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,284,304,282,275,288,269,275],
[259,0,268,277,260,253,266,258,265],
[266,282,0,276,275,284,280,268,276],
[246,273,274,0,258,267,263,263,264],
[268,290,275,292,0,271,267,270,280],
[275,297,266,283,279,0,274,256,264],
[262,284,270,287,283,276,0,271,279],
[281,292,282,287,280,294,279,0,272],
[275,285,274,286,270,286,271,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,284,272,278,269,288,279,273],
[279,0,265,275,281,286,305,301,259],
[266,285,0,283,309,275,306,292,271],
[278,275,267,0,286,268,301,287,243],
[272,269,241,264,0,266,289,277,259],
[281,264,275,282,284,0,311,291,280],
[262,245,244,249,261,239,0,268,271],
[271,249,258,263,273,259,282,0,257],
[277,291,279,307,291,270,279,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,248,251,255,276,266,264,261],
[291,0,262,274,270,303,283,271,269],
[302,288,0,274,278,282,283,285,301],
[299,276,276,0,284,294,296,275,274],
[295,280,272,266,0,291,290,284,263],
[274,247,268,256,259,0,277,270,251],
[284,267,267,254,260,273,0,273,255],
[286,279,265,275,266,280,277,0,283],
[289,281,249,276,287,299,295,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,269,278,276,276,270,265,276],
[290,0,292,265,278,277,277,287,289],
[281,258,0,272,288,289,284,263,292],
[272,285,278,0,292,296,282,267,283],
[274,272,262,258,0,267,265,267,282],
[274,273,261,254,283,0,265,254,280],
[280,273,266,268,285,285,0,273,282],
[285,263,287,283,283,296,277,0,285],
[274,261,258,267,268,270,268,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,255,323,287,280,283,284,304],
[287,0,277,284,251,256,249,280,264],
[295,273,0,305,264,270,255,316,282],
[227,266,245,0,250,212,232,251,253],
[263,299,286,300,0,257,262,299,275],
[270,294,280,338,293,0,279,298,258],
[267,301,295,318,288,271,0,286,309],
[266,270,234,299,251,252,264,0,238],
[246,286,268,297,275,292,241,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,272,276,284,279,286,256,280],
[266,0,266,282,273,267,270,277,282],
[278,284,0,274,272,271,284,252,276],
[274,268,276,0,287,270,276,263,276],
[266,277,278,263,0,273,269,259,270],
[271,283,279,280,277,0,285,249,272],
[264,280,266,274,281,265,0,261,274],
[294,273,298,287,291,301,289,0,290],
[270,268,274,274,280,278,276,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,273,269,257,264,250,273,281],
[293,0,278,285,275,284,269,293,282],
[277,272,0,268,257,266,265,285,249],
[281,265,282,0,251,279,261,282,271],
[293,275,293,299,0,276,276,283,271],
[286,266,284,271,274,0,263,278,262],
[300,281,285,289,274,287,0,283,288],
[277,257,265,268,267,272,267,0,268],
[269,268,301,279,279,288,262,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,261,265,293,278,290,276,274],
[272,0,263,275,285,272,282,286,269],
[289,287,0,279,296,286,298,274,292],
[285,275,271,0,297,283,292,286,289],
[257,265,254,253,0,265,265,273,260],
[272,278,264,267,285,0,268,279,282],
[260,268,252,258,285,282,0,277,274],
[274,264,276,264,277,271,273,0,287],
[276,281,258,261,290,268,276,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,260,277,261,294,288,253,277],
[285,0,273,293,308,281,297,273,288],
[290,277,0,268,265,279,284,282,266],
[273,257,282,0,274,265,277,269,265],
[289,242,285,276,0,277,274,259,254],
[256,269,271,285,273,0,267,257,286],
[262,253,266,273,276,283,0,260,267],
[297,277,268,281,291,293,290,0,296],
[273,262,284,285,296,264,283,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,285,297,274,267,282,289,294],
[269,0,272,282,278,279,267,297,291],
[265,278,0,294,276,270,297,298,293],
[253,268,256,0,250,257,265,276,295],
[276,272,274,300,0,289,285,303,294],
[283,271,280,293,261,0,292,290,289],
[268,283,253,285,265,258,0,283,286],
[261,253,252,274,247,260,267,0,274],
[256,259,257,255,256,261,264,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,290,285,293,283,284,270,288],
[273,0,282,283,303,279,277,272,264],
[260,268,0,267,287,256,293,251,261],
[265,267,283,0,305,289,289,275,285],
[257,247,263,245,0,249,271,253,258],
[267,271,294,261,301,0,281,269,282],
[266,273,257,261,279,269,0,277,260],
[280,278,299,275,297,281,273,0,282],
[262,286,289,265,292,268,290,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,260,244,251,268,255,245,262],
[297,0,268,276,276,277,278,277,267],
[290,282,0,271,273,275,273,278,275],
[306,274,279,0,293,289,290,274,290],
[299,274,277,257,0,284,284,263,282],
[282,273,275,261,266,0,265,253,278],
[295,272,277,260,266,285,0,267,275],
[305,273,272,276,287,297,283,0,290],
[288,283,275,260,268,272,275,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,267,271,266,265,268,281,262],
[285,0,273,270,271,287,270,281,287],
[283,277,0,277,276,281,273,281,275],
[279,280,273,0,273,275,275,261,278],
[284,279,274,277,0,279,257,279,269],
[285,263,269,275,271,0,270,282,269],
[282,280,277,275,293,280,0,284,282],
[269,269,269,289,271,268,266,0,276],
[288,263,275,272,281,281,268,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,259,244,276,246,259,271,257],
[290,0,273,259,298,267,261,281,256],
[291,277,0,282,300,232,253,285,272],
[306,291,268,0,308,278,285,258,286],
[274,252,250,242,0,243,241,268,240],
[304,283,318,272,307,0,281,281,293],
[291,289,297,265,309,269,0,281,285],
[279,269,265,292,282,269,269,0,280],
[293,294,278,264,310,257,265,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,362,325,274,294,276,290,366,345],
[188,0,203,184,241,261,238,260,277],
[225,347,0,239,300,245,239,260,276],
[276,366,311,0,313,277,309,240,329],
[256,309,250,237,0,252,287,219,329],
[274,289,305,273,298,0,272,240,367],
[260,312,311,241,263,278,0,296,332],
[184,290,290,310,331,310,254,0,385],
[205,273,274,221,221,183,218,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,277,270,277,280,270,279,269],
[280,0,281,276,276,278,278,262,264],
[273,269,0,268,267,278,268,269,254],
[280,274,282,0,266,284,283,285,267],
[273,274,283,284,0,287,293,291,286],
[270,272,272,266,263,0,264,275,269],
[280,272,282,267,257,286,0,276,260],
[271,288,281,265,259,275,274,0,273],
[281,286,296,283,264,281,290,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,272,338,327,329,315,288,270],
[258,0,262,280,299,328,291,243,281],
[278,288,0,289,311,291,303,260,249],
[212,270,261,0,269,286,251,244,308],
[223,251,239,281,0,320,273,246,272],
[221,222,259,264,230,0,258,221,222],
[235,259,247,299,277,292,0,276,266],
[262,307,290,306,304,329,274,0,263],
[280,269,301,242,278,328,284,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,284,246,261,275,267,266,284],
[286,0,287,278,289,277,267,287,279],
[266,263,0,280,265,268,276,271,267],
[304,272,270,0,269,272,258,260,295],
[289,261,285,281,0,259,292,261,272],
[275,273,282,278,291,0,255,266,275],
[283,283,274,292,258,295,0,273,273],
[284,263,279,290,289,284,277,0,294],
[266,271,283,255,278,275,277,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,269,290,263,248,257,307,272],
[280,0,294,272,269,250,274,303,281],
[281,256,0,282,254,244,237,278,256],
[260,278,268,0,249,266,244,277,260],
[287,281,296,301,0,246,256,302,277],
[302,300,306,284,304,0,275,315,307],
[293,276,313,306,294,275,0,315,280],
[243,247,272,273,248,235,235,0,242],
[278,269,294,290,273,243,270,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,247,264,285,250,273,259,221],
[298,0,264,311,290,289,305,291,282],
[303,286,0,289,292,271,280,294,265],
[286,239,261,0,287,240,287,262,247],
[265,260,258,263,0,253,291,263,249],
[300,261,279,310,297,0,304,272,268],
[277,245,270,263,259,246,0,240,253],
[291,259,256,288,287,278,310,0,257],
[329,268,285,303,301,282,297,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,296,290,250,289,269,273,263],
[249,0,271,269,251,258,257,238,240],
[254,279,0,278,210,261,246,261,255],
[260,281,272,0,218,254,249,239,235],
[300,299,340,332,0,295,308,280,275],
[261,292,289,296,255,0,275,236,267],
[281,293,304,301,242,275,0,257,270],
[277,312,289,311,270,314,293,0,280],
[287,310,295,315,275,283,280,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,265,346,359,313,332,294,271],
[248,0,187,317,324,275,294,215,219],
[285,363,0,391,373,331,353,340,260],
[204,233,159,0,269,196,297,225,160],
[191,226,177,281,0,263,259,213,187],
[237,275,219,354,287,0,250,272,212],
[218,256,197,253,291,300,0,205,196],
[256,335,210,325,337,278,345,0,297],
[279,331,290,390,363,338,354,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,261,259,283,284,257,262,278],
[287,0,284,264,250,276,258,262,272],
[289,266,0,283,266,293,264,279,283],
[291,286,267,0,259,298,285,270,309],
[267,300,284,291,0,293,261,278,274],
[266,274,257,252,257,0,272,265,274],
[293,292,286,265,289,278,0,269,286],
[288,288,271,280,272,285,281,0,293],
[272,278,267,241,276,276,264,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,311,310,270,283,246,244,245],
[265,0,345,265,289,269,239,294,264],
[239,205,0,251,189,238,216,230,200],
[240,285,299,0,268,274,204,243,247],
[280,261,361,282,0,297,314,258,265],
[267,281,312,276,253,0,284,240,296],
[304,311,334,346,236,266,0,265,255],
[306,256,320,307,292,310,285,0,253],
[305,286,350,303,285,254,295,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,355,284,266,275,301,259,260],
[236,0,332,286,235,253,266,293,333],
[195,218,0,233,238,207,224,200,252],
[266,264,317,0,258,234,299,233,293],
[284,315,312,292,0,271,261,282,300],
[275,297,343,316,279,0,314,279,337],
[249,284,326,251,289,236,0,289,305],
[291,257,350,317,268,271,261,0,290],
[290,217,298,257,250,213,245,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,273,258,283,291,286,284,260],
[289,0,271,267,285,290,283,285,278],
[277,279,0,282,300,285,307,298,270],
[292,283,268,0,292,306,295,287,276],
[267,265,250,258,0,278,276,273,257],
[259,260,265,244,272,0,269,282,246],
[264,267,243,255,274,281,0,274,263],
[266,265,252,263,277,268,276,0,253],
[290,272,280,274,293,304,287,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,265,279,298,261,318,288,303],
[239,0,261,272,267,256,252,253,252],
[285,289,0,268,283,289,321,279,295],
[271,278,282,0,256,273,313,277,270],
[252,283,267,294,0,280,342,293,275],
[289,294,261,277,270,0,288,254,294],
[232,298,229,237,208,262,0,281,262],
[262,297,271,273,257,296,269,0,265],
[247,298,255,280,275,256,288,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,306,303,279,260,273,273,291],
[254,0,268,306,260,273,280,255,285],
[244,282,0,269,268,246,247,257,269],
[247,244,281,0,252,253,258,261,254],
[271,290,282,298,0,265,241,258,277],
[290,277,304,297,285,0,281,266,278],
[277,270,303,292,309,269,0,303,285],
[277,295,293,289,292,284,247,0,264],
[259,265,281,296,273,272,265,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,352,251,351,351,301,302,300],
[299,0,400,299,250,400,301,451,351],
[198,150,0,250,248,349,100,302,299],
[299,251,300,0,249,299,201,352,351],
[199,300,302,301,0,400,251,402,351],
[199,150,201,251,150,0,100,251,201],
[249,249,450,349,299,450,0,352,449],
[248,99,248,198,148,299,198,0,248],
[250,199,251,199,199,349,101,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,286,281,282,289,260,268,270],
[274,0,297,280,292,272,270,285,290],
[264,253,0,266,267,285,263,244,282],
[269,270,284,0,273,315,240,267,268],
[268,258,283,277,0,292,273,280,288],
[261,278,265,235,258,0,253,239,240],
[290,280,287,310,277,297,0,255,291],
[282,265,306,283,270,311,295,0,295],
[280,260,268,282,262,310,259,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,245,251,251,243,267,260,238],
[287,0,266,240,263,246,278,259,251],
[305,284,0,290,292,273,308,297,295],
[299,310,260,0,286,283,319,289,257],
[299,287,258,264,0,243,285,283,243],
[307,304,277,267,307,0,324,275,274],
[283,272,242,231,265,226,0,271,250],
[290,291,253,261,267,275,279,0,251],
[312,299,255,293,307,276,300,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,258,268,237,286,255,299,253],
[300,0,279,295,285,272,264,322,281],
[292,271,0,261,281,255,252,295,248],
[282,255,289,0,284,274,249,300,254],
[313,265,269,266,0,306,260,312,259],
[264,278,295,276,244,0,288,291,264],
[295,286,298,301,290,262,0,311,268],
[251,228,255,250,238,259,239,0,242],
[297,269,302,296,291,286,282,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,299,304,287,287,281,269,279],
[291,0,283,304,290,301,262,269,270],
[251,267,0,283,258,283,237,268,255],
[246,246,267,0,257,261,250,261,272],
[263,260,292,293,0,269,268,264,245],
[263,249,267,289,281,0,253,262,253],
[269,288,313,300,282,297,0,282,301],
[281,281,282,289,286,288,268,0,287],
[271,280,295,278,305,297,249,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,217,259,273,272,298,262,252],
[273,0,249,230,247,277,284,271,246],
[333,301,0,274,273,305,309,244,329],
[291,320,276,0,285,331,327,292,274],
[277,303,277,265,0,312,312,311,272],
[278,273,245,219,238,0,252,231,252],
[252,266,241,223,238,298,0,235,273],
[288,279,306,258,239,319,315,0,263],
[298,304,221,276,278,298,277,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,276,289,302,256,312,310,301],
[281,0,285,235,270,260,316,290,298],
[274,265,0,274,265,239,315,263,277],
[261,315,276,0,255,286,342,287,256],
[248,280,285,295,0,259,268,322,261],
[294,290,311,264,291,0,304,302,287],
[238,234,235,208,282,246,0,270,249],
[240,260,287,263,228,248,280,0,293],
[249,252,273,294,289,263,301,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,279,266,281,290,286,266,278],
[277,0,247,267,310,325,287,251,285],
[271,303,0,292,281,294,272,302,319],
[284,283,258,0,285,286,302,282,265],
[269,240,269,265,0,277,276,255,273],
[260,225,256,264,273,0,277,249,243],
[264,263,278,248,274,273,0,278,260],
[284,299,248,268,295,301,272,0,286],
[272,265,231,285,277,307,290,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,292,262,287,283,309,274,280],
[273,0,303,275,285,293,303,299,292],
[258,247,0,256,265,283,310,264,250],
[288,275,294,0,279,306,315,284,299],
[263,265,285,271,0,278,295,272,284],
[267,257,267,244,272,0,298,240,267],
[241,247,240,235,255,252,0,243,258],
[276,251,286,266,278,310,307,0,297],
[270,258,300,251,266,283,292,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,278,266,283,292,276,287,277],
[263,0,283,286,282,285,263,266,258],
[272,267,0,274,268,284,292,275,282],
[284,264,276,0,309,301,304,292,303],
[267,268,282,241,0,290,287,272,275],
[258,265,266,249,260,0,279,276,272],
[274,287,258,246,263,271,0,264,287],
[263,284,275,258,278,274,286,0,264],
[273,292,268,247,275,278,263,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,296,273,281,336,281,244,268],
[236,0,282,260,240,299,229,222,249],
[254,268,0,268,272,312,255,261,255],
[277,290,282,0,291,337,295,278,260],
[269,310,278,259,0,322,258,270,264],
[214,251,238,213,228,0,212,225,198],
[269,321,295,255,292,338,0,272,276],
[306,328,289,272,280,325,278,0,253],
[282,301,295,290,286,352,274,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,278,283,282,262,268,275,261],
[281,0,275,268,282,263,267,255,282],
[272,275,0,274,278,261,270,264,293],
[267,282,276,0,277,246,280,275,287],
[268,268,272,273,0,270,280,258,290],
[288,287,289,304,280,0,297,271,299],
[282,283,280,270,270,253,0,266,268],
[275,295,286,275,292,279,284,0,284],
[289,268,257,263,260,251,282,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,302,286,288,268,286,278,250],
[281,0,277,257,261,280,282,284,264],
[248,273,0,263,261,273,272,264,262],
[264,293,287,0,280,287,288,262,264],
[262,289,289,270,0,284,285,266,258],
[282,270,277,263,266,0,268,268,247],
[264,268,278,262,265,282,0,258,266],
[272,266,286,288,284,282,292,0,280],
[300,286,288,286,292,303,284,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,293,271,290,282,274,312,274],
[263,0,294,284,297,286,294,299,291],
[257,256,0,279,274,293,274,288,271],
[279,266,271,0,265,265,266,287,270],
[260,253,276,285,0,292,274,287,264],
[268,264,257,285,258,0,252,261,259],
[276,256,276,284,276,298,0,294,277],
[238,251,262,263,263,289,256,0,249],
[276,259,279,280,286,291,273,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,283,303,300,318,275,277,273],
[263,0,301,282,304,310,279,271,265],
[267,249,0,297,299,268,257,272,262],
[247,268,253,0,272,256,255,272,243],
[250,246,251,278,0,251,255,273,238],
[232,240,282,294,299,0,261,280,253],
[275,271,293,295,295,289,0,284,283],
[273,279,278,278,277,270,266,0,281],
[277,285,288,307,312,297,267,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,284,252,276,249,271,260,258],
[287,0,297,294,297,265,296,290,277],
[266,253,0,291,277,249,273,252,254],
[298,256,259,0,278,236,277,277,261],
[274,253,273,272,0,258,282,272,268],
[301,285,301,314,292,0,282,275,277],
[279,254,277,273,268,268,0,265,258],
[290,260,298,273,278,275,285,0,267],
[292,273,296,289,282,273,292,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,252,254,257,266,274,259,243],
[282,0,265,307,287,283,281,292,278],
[298,285,0,317,297,304,297,257,281],
[296,243,233,0,281,277,260,272,250],
[293,263,253,269,0,272,282,265,248],
[284,267,246,273,278,0,320,260,252],
[276,269,253,290,268,230,0,249,287],
[291,258,293,278,285,290,301,0,291],
[307,272,269,300,302,298,263,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,332,277,330,387,330,387,166],
[273,0,328,218,327,276,327,441,276],
[218,222,0,164,329,331,327,330,166],
[273,332,386,0,386,332,329,332,276],
[220,223,221,164,0,386,218,385,332],
[163,274,219,218,164,0,219,276,219],
[220,223,223,221,332,331,0,333,277],
[163,109,220,218,165,274,217,0,221],
[384,274,384,274,218,331,273,329,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,285,277,273,281,283,259,298],
[260,0,272,277,258,260,295,260,290],
[265,278,0,290,292,272,275,269,280],
[273,273,260,0,289,252,268,270,266],
[277,292,258,261,0,262,272,259,294],
[269,290,278,298,288,0,290,263,289],
[267,255,275,282,278,260,0,278,269],
[291,290,281,280,291,287,272,0,292],
[252,260,270,284,256,261,281,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,268,277,268,281,275,297,263],
[274,0,281,270,283,285,274,305,257],
[282,269,0,266,269,255,275,304,251],
[273,280,284,0,267,267,269,278,239],
[282,267,281,283,0,281,285,285,275],
[269,265,295,283,269,0,280,319,259],
[275,276,275,281,265,270,0,270,254],
[253,245,246,272,265,231,280,0,239],
[287,293,299,311,275,291,296,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,247,316,295,299,279,268,288],
[271,0,282,306,264,289,299,300,324],
[303,268,0,297,288,286,257,307,294],
[234,244,253,0,275,270,229,276,286],
[255,286,262,275,0,265,258,302,293],
[251,261,264,280,285,0,249,279,309],
[271,251,293,321,292,301,0,275,312],
[282,250,243,274,248,271,275,0,279],
[262,226,256,264,257,241,238,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,277,281,269,280,287,284,307],
[266,0,247,277,272,263,286,292,274],
[273,303,0,294,292,294,305,275,288],
[269,273,256,0,278,265,281,285,275],
[281,278,258,272,0,261,287,283,283],
[270,287,256,285,289,0,296,292,287],
[263,264,245,269,263,254,0,284,266],
[266,258,275,265,267,258,266,0,289],
[243,276,262,275,267,263,284,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,246,284,255,277,267,296,271],
[285,0,286,297,277,286,274,308,286],
[304,264,0,273,265,279,277,302,268],
[266,253,277,0,247,281,275,292,266],
[295,273,285,303,0,311,296,324,298],
[273,264,271,269,239,0,270,291,255],
[283,276,273,275,254,280,0,320,278],
[254,242,248,258,226,259,230,0,240],
[279,264,282,284,252,295,272,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,257,265,274,273,260,289,264],
[273,0,274,267,272,280,286,302,258],
[293,276,0,283,274,285,296,295,277],
[285,283,267,0,278,285,288,294,265],
[276,278,276,272,0,281,287,284,259],
[277,270,265,265,269,0,295,287,263],
[290,264,254,262,263,255,0,277,252],
[261,248,255,256,266,263,273,0,257],
[286,292,273,285,291,287,298,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,279,274,337,286,314,244,287],
[225,0,227,278,288,237,266,239,280],
[271,323,0,290,264,283,301,250,250],
[276,272,260,0,299,259,284,277,288],
[213,262,286,251,0,254,299,246,221],
[264,313,267,291,296,0,335,292,333],
[236,284,249,266,251,215,0,224,261],
[306,311,300,273,304,258,326,0,294],
[263,270,300,262,329,217,289,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,270,287,267,263,260,263,273],
[296,0,279,282,271,259,256,269,259],
[280,271,0,271,263,244,254,257,264],
[263,268,279,0,258,256,263,262,264],
[283,279,287,292,0,267,263,257,278],
[287,291,306,294,283,0,290,267,282],
[290,294,296,287,287,260,0,281,255],
[287,281,293,288,293,283,269,0,284],
[277,291,286,286,272,268,295,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,292,252,262,252,223,253,279],
[275,0,259,274,268,246,239,279,270],
[258,291,0,233,270,237,248,251,268],
[298,276,317,0,268,257,298,256,288],
[288,282,280,282,0,252,273,272,288],
[298,304,313,293,298,0,257,279,296],
[327,311,302,252,277,293,0,275,274],
[297,271,299,294,278,271,275,0,322],
[271,280,282,262,262,254,276,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,252,252,251,276,159,275,321],
[320,0,298,251,296,344,320,362,365],
[298,252,0,390,232,322,254,297,324],
[298,299,160,0,207,277,255,249,321],
[299,254,318,343,0,253,322,341,324],
[274,206,228,273,297,0,251,317,251],
[391,230,296,295,228,299,0,272,319],
[275,188,253,301,209,233,278,0,299],
[229,185,226,229,226,299,231,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,264,283,243,229,242,238,260],
[302,0,274,276,257,272,273,271,269],
[286,276,0,281,266,294,266,254,282],
[267,274,269,0,257,266,266,262,272],
[307,293,284,293,0,290,284,284,263],
[321,278,256,284,260,0,298,272,264],
[308,277,284,284,266,252,0,292,275],
[312,279,296,288,266,278,258,0,265],
[290,281,268,278,287,286,275,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,273,278,244,280,250,257,252],
[300,0,291,298,305,304,297,265,299],
[277,259,0,292,270,283,259,260,292],
[272,252,258,0,243,271,238,261,256],
[306,245,280,307,0,280,282,282,290],
[270,246,267,279,270,0,272,255,286],
[300,253,291,312,268,278,0,293,316],
[293,285,290,289,268,295,257,0,300],
[298,251,258,294,260,264,234,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,272,291,293,316,331,300,309],
[265,0,286,272,281,286,317,237,237],
[278,264,0,263,215,272,280,251,225],
[259,278,287,0,245,305,319,254,283],
[257,269,335,305,0,286,338,240,276],
[234,264,278,245,264,0,304,216,232],
[219,233,270,231,212,246,0,223,254],
[250,313,299,296,310,334,327,0,287],
[241,313,325,267,274,318,296,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,285,278,276,269,264,282,279],
[273,0,271,262,259,265,270,273,282],
[265,279,0,284,267,281,283,274,293],
[272,288,266,0,272,271,266,274,306],
[274,291,283,278,0,268,269,286,291],
[281,285,269,279,282,0,264,289,286],
[286,280,267,284,281,286,0,292,289],
[268,277,276,276,264,261,258,0,275],
[271,268,257,244,259,264,261,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,291,263,237,275,230,217,194],
[298,0,261,288,273,313,217,190,220],
[259,289,0,275,271,286,237,217,229],
[287,262,275,0,252,363,256,253,267],
[313,277,279,298,0,297,239,222,276],
[275,237,264,187,253,0,235,220,217],
[320,333,313,294,311,315,0,280,275],
[333,360,333,297,328,330,270,0,297],
[356,330,321,283,274,333,275,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,327,254,267,290,263,286,271,245],
[223,0,251,246,252,233,206,277,228],
[296,299,0,290,303,248,297,301,218],
[283,304,260,0,244,245,251,317,289],
[260,298,247,306,0,261,275,302,272],
[287,317,302,305,289,0,271,302,277],
[264,344,253,299,275,279,0,295,253],
[279,273,249,233,248,248,255,0,249],
[305,322,332,261,278,273,297,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,296,309,309,302,274,307,295],
[270,0,264,282,254,283,257,293,310],
[254,286,0,261,281,318,286,266,281],
[241,268,289,0,249,289,229,261,255],
[241,296,269,301,0,284,268,258,316],
[248,267,232,261,266,0,264,263,244],
[276,293,264,321,282,286,0,268,305],
[243,257,284,289,292,287,282,0,295],
[255,240,269,295,234,306,245,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,242,251,247,244,276,272,275],
[286,0,269,268,242,259,262,277,286],
[308,281,0,293,286,291,271,311,296],
[299,282,257,0,234,293,290,278,290],
[303,308,264,316,0,287,312,324,327],
[306,291,259,257,263,0,304,286,291],
[274,288,279,260,238,246,0,298,274],
[278,273,239,272,226,264,252,0,264],
[275,264,254,260,223,259,276,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,278,271,272,251,267,257,257],
[285,0,268,264,261,281,255,261,263],
[272,282,0,289,262,282,283,271,271],
[279,286,261,0,277,280,289,264,263],
[278,289,288,273,0,279,263,271,279],
[299,269,268,270,271,0,263,266,288],
[283,295,267,261,287,287,0,272,272],
[293,289,279,286,279,284,278,0,265],
[293,287,279,287,271,262,278,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,262,265,266,274,283,237,258],
[285,0,272,280,259,275,275,252,266],
[288,278,0,274,261,273,258,251,251],
[285,270,276,0,234,272,254,259,257],
[284,291,289,316,0,282,287,255,289],
[276,275,277,278,268,0,272,243,249],
[267,275,292,296,263,278,0,278,279],
[313,298,299,291,295,307,272,0,281],
[292,284,299,293,261,301,271,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,286,242,286,281,264,316,278],
[287,0,246,255,300,269,243,292,272],
[264,304,0,299,294,268,281,305,285],
[308,295,251,0,295,270,256,298,264],
[264,250,256,255,0,254,232,280,282],
[269,281,282,280,296,0,243,283,284],
[286,307,269,294,318,307,0,313,310],
[234,258,245,252,270,267,237,0,246],
[272,278,265,286,268,266,240,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,299,309,308,283,291,274,287],
[237,0,251,253,269,266,258,257,256],
[251,299,0,280,278,268,288,260,284],
[241,297,270,0,284,297,282,274,272],
[242,281,272,266,0,262,253,281,280],
[267,284,282,253,288,0,252,267,285],
[259,292,262,268,297,298,0,262,294],
[276,293,290,276,269,283,288,0,287],
[263,294,266,278,270,265,256,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,267,266,272,280,278,246,296],
[282,0,301,283,322,289,297,274,319],
[283,249,0,281,289,271,281,276,282],
[284,267,269,0,295,291,290,280,285],
[278,228,261,255,0,256,252,268,294],
[270,261,279,259,294,0,278,257,275],
[272,253,269,260,298,272,0,256,291],
[304,276,274,270,282,293,294,0,299],
[254,231,268,265,256,275,259,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,261,293,276,294,281,271,276],
[264,0,280,302,281,289,269,275,296],
[289,270,0,292,296,288,295,269,286],
[257,248,258,0,278,290,267,269,282],
[274,269,254,272,0,275,273,250,265],
[256,261,262,260,275,0,263,248,281],
[269,281,255,283,277,287,0,256,276],
[279,275,281,281,300,302,294,0,286],
[274,254,264,268,285,269,274,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,264,281,275,267,262,260,256],
[278,0,277,277,288,304,295,269,263],
[286,273,0,280,297,283,288,266,264],
[269,273,270,0,281,283,306,287,269],
[275,262,253,269,0,293,277,285,264],
[283,246,267,267,257,0,289,249,242],
[288,255,262,244,273,261,0,259,275],
[290,281,284,263,265,301,291,0,254],
[294,287,286,281,286,308,275,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,287,272,265,304,292,284,271],
[276,0,287,291,297,300,300,285,274],
[263,263,0,264,282,294,300,289,259],
[278,259,286,0,275,281,289,278,283],
[285,253,268,275,0,282,294,276,268],
[246,250,256,269,268,0,279,275,275],
[258,250,250,261,256,271,0,245,258],
[266,265,261,272,274,275,305,0,266],
[279,276,291,267,282,275,292,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,282,297,275,263,289,265,289],
[263,0,282,273,265,272,292,241,274],
[268,268,0,253,244,275,283,241,269],
[253,277,297,0,261,287,292,271,292],
[275,285,306,289,0,286,317,281,266],
[287,278,275,263,264,0,287,266,288],
[261,258,267,258,233,263,0,251,248],
[285,309,309,279,269,284,299,0,305],
[261,276,281,258,284,262,302,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,286,271,278,267,279,256,270],
[290,0,293,277,271,280,287,277,249],
[264,257,0,258,258,256,249,242,242],
[279,273,292,0,298,273,282,286,267],
[272,279,292,252,0,270,287,265,258],
[283,270,294,277,280,0,277,272,265],
[271,263,301,268,263,273,0,294,283],
[294,273,308,264,285,278,256,0,253],
[280,301,308,283,292,285,267,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,258,273,271,268,264,267,262],
[281,0,278,265,278,259,266,264,270],
[292,272,0,285,297,297,293,278,296],
[277,285,265,0,274,275,271,272,269],
[279,272,253,276,0,254,252,270,273],
[282,291,253,275,296,0,278,266,273],
[286,284,257,279,298,272,0,257,267],
[283,286,272,278,280,284,293,0,283],
[288,280,254,281,277,277,283,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,266,294,286,291,275,280,289],
[277,0,280,265,255,277,252,240,288],
[284,270,0,291,255,273,261,262,292],
[256,285,259,0,254,270,261,277,293],
[264,295,295,296,0,293,271,273,294],
[259,273,277,280,257,0,265,261,281],
[275,298,289,289,279,285,0,258,307],
[270,310,288,273,277,289,292,0,308],
[261,262,258,257,256,269,243,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,235,258,266,249,242,250,265],
[310,0,292,285,300,269,262,297,294],
[315,258,0,287,292,299,302,290,267],
[292,265,263,0,308,266,275,291,298],
[284,250,258,242,0,276,250,272,262],
[301,281,251,284,274,0,259,273,262],
[308,288,248,275,300,291,0,266,270],
[300,253,260,259,278,277,284,0,273],
[285,256,283,252,288,288,280,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,288,260,300,300,254,290,306],
[253,0,260,261,273,265,263,274,263],
[262,290,0,284,287,278,269,283,286],
[290,289,266,0,303,289,291,282,293],
[250,277,263,247,0,265,253,267,279],
[250,285,272,261,285,0,259,289,296],
[296,287,281,259,297,291,0,298,284],
[260,276,267,268,283,261,252,0,256],
[244,287,264,257,271,254,266,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,282,293,284,273,280,270,278],
[274,0,261,273,283,271,271,269,269],
[268,289,0,276,284,287,265,280,282],
[257,277,274,0,276,278,266,266,276],
[266,267,266,274,0,269,281,275,264],
[277,279,263,272,281,0,290,282,264],
[270,279,285,284,269,260,0,275,283],
[280,281,270,284,275,268,275,0,271],
[272,281,268,274,286,286,267,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,291,264,290,266,258,275,277],
[277,0,295,296,291,281,267,290,263],
[259,255,0,265,271,242,256,282,237],
[286,254,285,0,278,285,265,269,259],
[260,259,279,272,0,251,256,291,249],
[284,269,308,265,299,0,261,287,267],
[292,283,294,285,294,289,0,283,256],
[275,260,268,281,259,263,267,0,254],
[273,287,313,291,301,283,294,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,259,267,264,282,285,281,269],
[295,0,269,296,280,308,301,284,268],
[291,281,0,281,276,288,266,284,258],
[283,254,269,0,273,284,295,297,285],
[286,270,274,277,0,284,282,283,278],
[268,242,262,266,266,0,275,272,265],
[265,249,284,255,268,275,0,273,256],
[269,266,266,253,267,278,277,0,279],
[281,282,292,265,272,285,294,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,272,286,297,279,300,287,289],
[266,0,259,273,276,287,265,268,266],
[278,291,0,288,273,284,287,284,270],
[264,277,262,0,275,271,265,261,273],
[253,274,277,275,0,285,262,269,265],
[271,263,266,279,265,0,268,266,268],
[250,285,263,285,288,282,0,259,258],
[263,282,266,289,281,284,291,0,290],
[261,284,280,277,285,282,292,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,270,266,291,274,257,281,309],
[249,0,263,229,266,248,242,269,268],
[280,287,0,254,284,258,273,257,301],
[284,321,296,0,318,286,275,328,314],
[259,284,266,232,0,239,274,296,281],
[276,302,292,264,311,0,283,307,296],
[293,308,277,275,276,267,0,291,306],
[269,281,293,222,254,243,259,0,269],
[241,282,249,236,269,254,244,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,285,279,266,265,273,274,271],
[300,0,279,292,293,287,287,274,307],
[265,271,0,287,270,271,256,279,271],
[271,258,263,0,278,269,275,273,270],
[284,257,280,272,0,283,272,284,277],
[285,263,279,281,267,0,273,281,260],
[277,263,294,275,278,277,0,270,261],
[276,276,271,277,266,269,280,0,280],
[279,243,279,280,273,290,289,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,279,299,274,281,281,272,289],
[277,0,269,292,271,280,278,276,267],
[271,281,0,293,278,265,282,272,277],
[251,258,257,0,277,264,271,257,263],
[276,279,272,273,0,275,281,259,267],
[269,270,285,286,275,0,263,268,281],
[269,272,268,279,269,287,0,269,262],
[278,274,278,293,291,282,281,0,288],
[261,283,273,287,283,269,288,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,285,314,258,258,249,270,289],
[286,0,274,289,295,305,314,315,239],
[265,276,0,316,258,265,266,248,252],
[236,261,234,0,224,258,286,215,222],
[292,255,292,326,0,274,343,296,225],
[292,245,285,292,276,0,299,242,250],
[301,236,284,264,207,251,0,249,221],
[280,235,302,335,254,308,301,0,256],
[261,311,298,328,325,300,329,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,280,272,307,298,252,295,286],
[247,0,259,275,291,306,225,286,232],
[270,291,0,317,327,321,282,282,274],
[278,275,233,0,315,328,231,282,263],
[243,259,223,235,0,259,222,253,247],
[252,244,229,222,291,0,260,277,264],
[298,325,268,319,328,290,0,306,296],
[255,264,268,268,297,273,244,0,255],
[264,318,276,287,303,286,254,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,274,291,285,290,281,284,277],
[279,0,298,291,278,292,274,290,265],
[276,252,0,287,294,285,265,279,274],
[259,259,263,0,280,264,270,260,269],
[265,272,256,270,0,298,271,278,270],
[260,258,265,286,252,0,265,271,258],
[269,276,285,280,279,285,0,274,271],
[266,260,271,290,272,279,276,0,273],
[273,285,276,281,280,292,279,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,275,293,257,277,307,291,314],
[268,0,273,293,251,288,292,275,286],
[275,277,0,318,276,305,324,293,338],
[257,257,232,0,250,249,261,241,261],
[293,299,274,300,0,297,299,280,298],
[273,262,245,301,253,0,252,278,271],
[243,258,226,289,251,298,0,265,301],
[259,275,257,309,270,272,285,0,295],
[236,264,212,289,252,279,249,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,308,335,262,314,313,314,269],
[257,0,298,258,297,317,317,285,314],
[242,252,0,262,281,310,269,266,261],
[215,292,288,0,274,326,283,306,292],
[288,253,269,276,0,262,296,309,317],
[236,233,240,224,288,0,292,263,247],
[237,233,281,267,254,258,0,244,301],
[236,265,284,244,241,287,306,0,290],
[281,236,289,258,233,303,249,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,261,287,272,264,263,274,286],
[291,0,283,292,264,293,296,261,283],
[289,267,0,299,285,274,300,268,316],
[263,258,251,0,266,243,271,228,268],
[278,286,265,284,0,280,294,279,273],
[286,257,276,307,270,0,266,244,277],
[287,254,250,279,256,284,0,258,268],
[276,289,282,322,271,306,292,0,290],
[264,267,234,282,277,273,282,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,332,287,242,282,272,325,289,287],
[218,0,240,261,254,259,263,273,248],
[263,310,0,279,266,270,301,287,270],
[308,289,271,0,281,298,293,301,298],
[268,296,284,269,0,286,282,294,281],
[278,291,280,252,264,0,286,267,272],
[225,287,249,257,268,264,0,284,269],
[261,277,263,249,256,283,266,0,262],
[263,302,280,252,269,278,281,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,273,270,284,272,310,298,279],
[238,0,255,248,271,267,291,291,258],
[277,295,0,266,279,281,304,303,283],
[280,302,284,0,295,273,317,308,286],
[266,279,271,255,0,278,278,278,268],
[278,283,269,277,272,0,298,291,275],
[240,259,246,233,272,252,0,282,259],
[252,259,247,242,272,259,268,0,273],
[271,292,267,264,282,275,291,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,274,279,293,297,278,264,292],
[276,0,292,284,299,290,282,280,274],
[276,258,0,268,278,293,273,280,269],
[271,266,282,0,289,284,275,273,265],
[257,251,272,261,0,268,262,258,267],
[253,260,257,266,282,0,265,243,262],
[272,268,277,275,288,285,0,260,270],
[286,270,270,277,292,307,290,0,272],
[258,276,281,285,283,288,280,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,288,289,237,235,417,261,261],
[236,0,238,290,209,261,287,185,263],
[262,312,0,315,209,260,392,287,261],
[261,260,235,0,182,208,233,206,209],
[313,341,341,368,0,340,338,261,339],
[315,289,290,342,210,0,416,183,289],
[133,263,158,317,212,134,0,184,210],
[289,365,263,344,289,367,366,0,395],
[289,287,289,341,211,261,340,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,291,285,299,274,301,294,281],
[255,0,307,245,275,248,279,257,276],
[259,243,0,237,287,284,293,273,282],
[265,305,313,0,296,304,303,293,306],
[251,275,263,254,0,275,266,295,281],
[276,302,266,246,275,0,278,283,282],
[249,271,257,247,284,272,0,281,283],
[256,293,277,257,255,267,269,0,264],
[269,274,268,244,269,268,267,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,262,252,262,262,291,299,242],
[263,0,278,245,289,264,286,273,247],
[288,272,0,230,258,237,299,258,233],
[298,305,320,0,255,296,305,286,278],
[288,261,292,295,0,293,322,284,245],
[288,286,313,254,257,0,308,285,233],
[259,264,251,245,228,242,0,245,208],
[251,277,292,264,266,265,305,0,250],
[308,303,317,272,305,317,342,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,263,232,287,252,257,221,168],
[310,0,335,288,359,291,289,282,244],
[287,215,0,231,273,220,244,218,189],
[318,262,319,0,271,290,244,220,221],
[263,191,277,279,0,278,239,209,235],
[298,259,330,260,272,0,328,303,294],
[293,261,306,306,311,222,0,222,182],
[329,268,332,330,341,247,328,0,258],
[382,306,361,329,315,256,368,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,297,313,242,243,251,257,285],
[300,0,264,283,277,275,255,240,278],
[253,286,0,273,258,255,272,254,281],
[237,267,277,0,250,275,241,261,276],
[308,273,292,300,0,293,283,267,299],
[307,275,295,275,257,0,256,278,283],
[299,295,278,309,267,294,0,258,282],
[293,310,296,289,283,272,292,0,289],
[265,272,269,274,251,267,268,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,250,252,266,239,262,273,280],
[311,0,255,268,287,253,275,274,281],
[300,295,0,254,308,280,315,264,295],
[298,282,296,0,300,275,269,267,297],
[284,263,242,250,0,240,258,263,263],
[311,297,270,275,310,0,315,296,285],
[288,275,235,281,292,235,0,268,278],
[277,276,286,283,287,254,282,0,271],
[270,269,255,253,287,265,272,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,267,326,268,251,273,283,298],
[258,0,281,297,261,295,253,278,273],
[283,269,0,316,279,288,273,275,286],
[224,253,234,0,251,266,258,260,271],
[282,289,271,299,0,262,301,289,327],
[299,255,262,284,288,0,268,272,307],
[277,297,277,292,249,282,0,269,312],
[267,272,275,290,261,278,281,0,296],
[252,277,264,279,223,243,238,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,286,256,286,278,275,266,270],
[278,0,295,276,293,268,293,291,284],
[264,255,0,254,269,277,271,281,260],
[294,274,296,0,292,275,297,288,273],
[264,257,281,258,0,273,278,270,259],
[272,282,273,275,277,0,294,263,253],
[275,257,279,253,272,256,0,288,247],
[284,259,269,262,280,287,262,0,261],
[280,266,290,277,291,297,303,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,269,277,272,272,259,265,274],
[293,0,269,304,292,269,268,276,283],
[281,281,0,290,258,268,257,263,292],
[273,246,260,0,262,277,245,253,263],
[278,258,292,288,0,271,254,260,272],
[278,281,282,273,279,0,269,277,288],
[291,282,293,305,296,281,0,269,306],
[285,274,287,297,290,273,281,0,290],
[276,267,258,287,278,262,244,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,293,299,272,276,284,256,281],
[271,0,297,268,278,250,277,277,247],
[257,253,0,258,229,248,256,238,259],
[251,282,292,0,249,273,268,259,275],
[278,272,321,301,0,304,286,285,298],
[274,300,302,277,246,0,290,279,271],
[266,273,294,282,264,260,0,258,262],
[294,273,312,291,265,271,292,0,278],
[269,303,291,275,252,279,288,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,288,254,302,264,290,302,295],
[262,0,266,246,271,265,277,268,278],
[262,284,0,234,279,279,272,279,264],
[296,304,316,0,273,291,265,266,277],
[248,279,271,277,0,247,259,271,260],
[286,285,271,259,303,0,279,287,277],
[260,273,278,285,291,271,0,280,292],
[248,282,271,284,279,263,270,0,269],
[255,272,286,273,290,273,258,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,281,280,282,280,258,256,293],
[247,0,258,272,262,269,270,273,287],
[269,292,0,273,277,263,260,270,294],
[270,278,277,0,276,280,262,279,298],
[268,288,273,274,0,268,257,264,286],
[270,281,287,270,282,0,281,274,312],
[292,280,290,288,293,269,0,290,290],
[294,277,280,271,286,276,260,0,290],
[257,263,256,252,264,238,260,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,276,254,259,277,265,255,287],
[286,0,259,259,286,271,288,269,285],
[274,291,0,261,246,286,265,284,304],
[296,291,289,0,270,307,296,288,296],
[291,264,304,280,0,304,284,287,289],
[273,279,264,243,246,0,269,279,279],
[285,262,285,254,266,281,0,265,289],
[295,281,266,262,263,271,285,0,300],
[263,265,246,254,261,271,261,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,284,295,289,280,282,265,296],
[285,0,291,261,301,268,269,268,262],
[266,259,0,251,253,259,254,279,265],
[255,289,299,0,301,258,262,290,285],
[261,249,297,249,0,250,257,264,259],
[270,282,291,292,300,0,280,283,285],
[268,281,296,288,293,270,0,291,286],
[285,282,271,260,286,267,259,0,260],
[254,288,285,265,291,265,264,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,188,159,302,275,355,191,245],
[276,0,218,188,219,307,355,245,303],
[362,332,0,275,276,360,383,329,248],
[391,362,275,0,361,306,384,361,358],
[248,331,274,189,0,277,297,274,332],
[275,243,190,244,273,0,327,247,298],
[195,195,167,166,253,223,0,273,279],
[359,305,221,189,276,303,277,0,275],
[305,247,302,192,218,252,271,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,244,278,279,275,283,275,276],
[281,0,250,272,273,282,284,267,267],
[306,300,0,292,294,292,304,268,292],
[272,278,258,0,283,270,278,263,280],
[271,277,256,267,0,266,294,257,270],
[275,268,258,280,284,0,277,269,279],
[267,266,246,272,256,273,0,259,257],
[275,283,282,287,293,281,291,0,285],
[274,283,258,270,280,271,293,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,288,235,275,266,269,261,268],
[287,0,276,283,260,287,308,300,269],
[262,274,0,248,264,251,280,295,263],
[315,267,302,0,284,283,309,316,281],
[275,290,286,266,0,267,273,276,273],
[284,263,299,267,283,0,284,270,285],
[281,242,270,241,277,266,0,284,264],
[289,250,255,234,274,280,266,0,273],
[282,281,287,269,277,265,286,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,245,270,269,271,268,248,286],
[305,0,284,322,318,314,269,277,305],
[305,266,0,313,310,318,277,265,304],
[280,228,237,0,282,274,245,233,249],
[281,232,240,268,0,277,271,229,277],
[279,236,232,276,273,0,249,236,260],
[282,281,273,305,279,301,0,274,295],
[302,273,285,317,321,314,276,0,294],
[264,245,246,301,273,290,255,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,256,293,309,222,294,235,261],
[279,0,301,312,282,237,286,261,280],
[294,249,0,314,305,231,300,286,233],
[257,238,236,0,247,245,270,265,238],
[241,268,245,303,0,251,265,266,236],
[328,313,319,305,299,0,316,273,280],
[256,264,250,280,285,234,0,252,291],
[315,289,264,285,284,277,298,0,304],
[289,270,317,312,314,270,259,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,309,303,271,324,275,302,305],
[260,0,232,261,267,295,210,291,287],
[241,318,0,265,263,326,252,323,279],
[247,289,285,0,275,292,241,312,243],
[279,283,287,275,0,316,290,315,302],
[226,255,224,258,234,0,250,280,264],
[275,340,298,309,260,300,0,316,309],
[248,259,227,238,235,270,234,0,245],
[245,263,271,307,248,286,241,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,286,297,302,310,290,271,263],
[279,0,279,275,307,290,276,276,258],
[264,271,0,270,300,269,278,260,276],
[253,275,280,0,307,272,296,249,244],
[248,243,250,243,0,255,276,272,247],
[240,260,281,278,295,0,257,291,252],
[260,274,272,254,274,293,0,260,266],
[279,274,290,301,278,259,290,0,296],
[287,292,274,306,303,298,284,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,257,262,266,262,243,268,276],
[311,0,271,301,295,285,274,286,295],
[293,279,0,279,286,260,269,300,293],
[288,249,271,0,270,261,259,272,278],
[284,255,264,280,0,274,283,270,286],
[288,265,290,289,276,0,272,288,289],
[307,276,281,291,267,278,0,294,286],
[282,264,250,278,280,262,256,0,270],
[274,255,257,272,264,261,264,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,278,279,315,275,258,298,293],
[280,0,271,265,286,262,261,244,298],
[272,279,0,285,306,262,283,270,271],
[271,285,265,0,287,273,298,303,284],
[235,264,244,263,0,204,263,255,267],
[275,288,288,277,346,0,283,288,293],
[292,289,267,252,287,267,0,272,282],
[252,306,280,247,295,262,278,0,280],
[257,252,279,266,283,257,268,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,279,296,275,306,315,301,308],
[253,0,245,279,278,280,291,275,274],
[271,305,0,305,282,323,307,303,333],
[254,271,245,0,271,265,291,272,277],
[275,272,268,279,0,268,307,290,300],
[244,270,227,285,282,0,277,293,283],
[235,259,243,259,243,273,0,271,281],
[249,275,247,278,260,257,279,0,281],
[242,276,217,273,250,267,269,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,273,273,279,271,272,286,292],
[271,0,266,263,285,289,266,279,304],
[277,284,0,279,276,279,275,277,303],
[277,287,271,0,285,287,288,299,303],
[271,265,274,265,0,268,261,293,309],
[279,261,271,263,282,0,266,278,290],
[278,284,275,262,289,284,0,296,287],
[264,271,273,251,257,272,254,0,285],
[258,246,247,247,241,260,263,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,261,271,271,269,266,264,269],
[281,0,281,289,263,273,276,272,257],
[289,269,0,287,274,285,284,283,275],
[279,261,263,0,269,270,270,283,253],
[279,287,276,281,0,286,282,275,283],
[281,277,265,280,264,0,279,284,256],
[284,274,266,280,268,271,0,257,274],
[286,278,267,267,275,266,293,0,282],
[281,293,275,297,267,294,276,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,279,273,278,284,276,301,261],
[286,0,287,281,283,294,263,292,286],
[271,263,0,267,279,275,275,289,258],
[277,269,283,0,298,306,278,274,276],
[272,267,271,252,0,279,264,262,280],
[266,256,275,244,271,0,257,266,274],
[274,287,275,272,286,293,0,291,270],
[249,258,261,276,288,284,259,0,279],
[289,264,292,274,270,276,280,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,271,279,282,271,271,268,267],
[279,0,275,270,295,278,291,274,280],
[279,275,0,278,289,278,278,284,292],
[271,280,272,0,285,304,270,276,294],
[268,255,261,265,0,269,270,251,264],
[279,272,272,246,281,0,279,254,292],
[279,259,272,280,280,271,0,260,295],
[282,276,266,274,299,296,290,0,287],
[283,270,258,256,286,258,255,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,278,260,271,256,268,253,270],
[281,0,289,264,288,282,283,279,275],
[272,261,0,267,289,257,286,253,268],
[290,286,283,0,296,255,277,265,277],
[279,262,261,254,0,262,275,258,267],
[294,268,293,295,288,0,283,285,287],
[282,267,264,273,275,267,0,261,255],
[297,271,297,285,292,265,289,0,265],
[280,275,282,273,283,263,295,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,284,273,298,297,299,295,282],
[262,0,293,273,290,270,307,293,277],
[266,257,0,300,318,272,275,278,262],
[277,277,250,0,296,268,281,265,270],
[252,260,232,254,0,259,258,255,269],
[253,280,278,282,291,0,273,271,268],
[251,243,275,269,292,277,0,273,259],
[255,257,272,285,295,279,277,0,273],
[268,273,288,280,281,282,291,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,284,255,269,274,281,282,275],
[253,0,266,244,250,264,254,270,253],
[266,284,0,244,285,275,277,278,271],
[295,306,306,0,286,277,265,303,295],
[281,300,265,264,0,284,272,284,272],
[276,286,275,273,266,0,272,276,277],
[269,296,273,285,278,278,0,296,293],
[268,280,272,247,266,274,254,0,270],
[275,297,279,255,278,273,257,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,235,159,392,471,314,155,159],
[316,0,314,159,391,471,472,79,238],
[315,236,0,316,470,550,391,157,316],
[391,391,234,0,391,391,313,234,391],
[158,159,80,159,0,393,314,79,80],
[79,79,0,159,157,0,234,79,80],
[236,78,159,237,236,316,0,78,237],
[395,471,393,316,471,471,472,0,237],
[391,312,234,159,470,470,313,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,283,292,258,264,259,274,280],
[302,0,290,287,285,288,278,269,308],
[267,260,0,273,278,251,275,272,279],
[258,263,277,0,271,272,270,271,256],
[292,265,272,279,0,281,265,290,289],
[286,262,299,278,269,0,262,268,290],
[291,272,275,280,285,288,0,281,278],
[276,281,278,279,260,282,269,0,282],
[270,242,271,294,261,260,272,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,279,271,301,274,272,271,288],
[278,0,274,279,294,276,286,282,292],
[271,276,0,265,306,286,280,279,277],
[279,271,285,0,291,281,275,258,289],
[249,256,244,259,0,284,267,259,266],
[276,274,264,269,266,0,282,274,281],
[278,264,270,275,283,268,0,275,282],
[279,268,271,292,291,276,275,0,281],
[262,258,273,261,284,269,268,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,266,298,237,256,280,253,248],
[278,0,288,287,265,265,277,286,266],
[284,262,0,280,270,272,302,284,268],
[252,263,270,0,271,262,277,267,277],
[313,285,280,279,0,279,264,263,261],
[294,285,278,288,271,0,315,286,270],
[270,273,248,273,286,235,0,258,257],
[297,264,266,283,287,264,292,0,278],
[302,284,282,273,289,280,293,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,270,284,280,263,275,290,265],
[294,0,283,289,277,264,265,319,291],
[280,267,0,264,278,275,285,299,266],
[266,261,286,0,292,281,277,307,272],
[270,273,272,258,0,275,270,291,261],
[287,286,275,269,275,0,279,288,276],
[275,285,265,273,280,271,0,302,264],
[260,231,251,243,259,262,248,0,230],
[285,259,284,278,289,274,286,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,263,256,262,257,267,253,276],
[258,0,289,254,245,262,240,273,297],
[287,261,0,260,262,254,252,270,284],
[294,296,290,0,274,285,278,255,296],
[288,305,288,276,0,280,274,289,301],
[293,288,296,265,270,0,273,270,293],
[283,310,298,272,276,277,0,271,297],
[297,277,280,295,261,280,279,0,291],
[274,253,266,254,249,257,253,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,273,292,266,297,315,270,301],
[267,0,253,288,274,286,279,290,291],
[277,297,0,295,290,267,322,279,276],
[258,262,255,0,245,282,261,250,268],
[284,276,260,305,0,273,300,273,265],
[253,264,283,268,277,0,294,265,277],
[235,271,228,289,250,256,0,262,259],
[280,260,271,300,277,285,288,0,272],
[249,259,274,282,285,273,291,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,259,267,274,263,269,279,264],
[277,0,293,273,277,274,283,280,261],
[291,257,0,275,276,271,279,267,276],
[283,277,275,0,292,271,270,285,273],
[276,273,274,258,0,278,267,265,270],
[287,276,279,279,272,0,288,293,285],
[281,267,271,280,283,262,0,279,268],
[271,270,283,265,285,257,271,0,263],
[286,289,274,277,280,265,282,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,283,273,294,298,280,281,267],
[278,0,278,261,289,291,254,267,265],
[267,272,0,259,278,294,283,279,253],
[277,289,291,0,289,290,281,275,279],
[256,261,272,261,0,278,266,287,252],
[252,259,256,260,272,0,260,264,259],
[270,296,267,269,284,290,0,278,271],
[269,283,271,275,263,286,272,0,254],
[283,285,297,271,298,291,279,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,261,279,281,286,284,280,296],
[259,0,257,250,262,272,269,259,251],
[289,293,0,271,270,291,281,274,284],
[271,300,279,0,258,279,274,270,275],
[269,288,280,292,0,270,269,286,285],
[264,278,259,271,280,0,272,263,271],
[266,281,269,276,281,278,0,275,265],
[270,291,276,280,264,287,275,0,293],
[254,299,266,275,265,279,285,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,309,279,274,326,250,270,236],
[267,0,305,274,262,304,272,266,286],
[241,245,0,277,280,264,249,254,232],
[271,276,273,0,270,292,250,259,285],
[276,288,270,280,0,287,259,282,264],
[224,246,286,258,263,0,254,251,221],
[300,278,301,300,291,296,0,291,273],
[280,284,296,291,268,299,259,0,251],
[314,264,318,265,286,329,277,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,263,250,290,230,354,325,310],
[266,0,317,286,285,273,318,317,322],
[287,233,0,253,240,246,302,257,225],
[300,264,297,0,271,263,367,356,288],
[260,265,310,279,0,244,337,322,236],
[320,277,304,287,306,0,316,320,261],
[196,232,248,183,213,234,0,260,215],
[225,233,293,194,228,230,290,0,244],
[240,228,325,262,314,289,335,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,288,305,279,258,278,265,287],
[268,0,299,300,293,285,281,266,312],
[262,251,0,322,252,240,266,271,299],
[245,250,228,0,240,246,239,245,272],
[271,257,298,310,0,247,290,248,284],
[292,265,310,304,303,0,306,290,298],
[272,269,284,311,260,244,0,279,284],
[285,284,279,305,302,260,271,0,267],
[263,238,251,278,266,252,266,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,256,234,287,269,256,267,247],
[306,0,281,255,272,266,252,290,294],
[294,269,0,253,296,295,282,294,271],
[316,295,297,0,290,294,266,295,294],
[263,278,254,260,0,267,241,265,262],
[281,284,255,256,283,0,273,278,257],
[294,298,268,284,309,277,0,289,269],
[283,260,256,255,285,272,261,0,296],
[303,256,279,256,288,293,281,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,268,266,244,244,252,259,272],
[288,0,287,285,270,265,264,286,267],
[282,263,0,269,269,269,248,249,276],
[284,265,281,0,282,277,256,256,270],
[306,280,281,268,0,281,277,259,280],
[306,285,281,273,269,0,275,278,288],
[298,286,302,294,273,275,0,285,286],
[291,264,301,294,291,272,265,0,279],
[278,283,274,280,270,262,264,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,298,259,296,279,250,289,300],
[274,0,305,297,305,299,282,314,328],
[252,245,0,229,271,263,224,265,280],
[291,253,321,0,303,278,264,293,286],
[254,245,279,247,0,248,245,300,270],
[271,251,287,272,302,0,238,296,283],
[300,268,326,286,305,312,0,276,313],
[261,236,285,257,250,254,274,0,289],
[250,222,270,264,280,267,237,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,304,311,288,280,253,296,255],
[283,0,289,305,261,258,245,295,289],
[246,261,0,280,269,288,275,267,252],
[239,245,270,0,236,272,238,250,244],
[262,289,281,314,0,286,285,295,255],
[270,292,262,278,264,0,269,299,293],
[297,305,275,312,265,281,0,279,287],
[254,255,283,300,255,251,271,0,272],
[295,261,298,306,295,257,263,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,272,243,281,263,285,270,275],
[271,0,273,262,263,268,284,280,269],
[278,277,0,253,278,270,269,259,262],
[307,288,297,0,303,302,308,302,270],
[269,287,272,247,0,268,290,253,272],
[287,282,280,248,282,0,299,271,273],
[265,266,281,242,260,251,0,236,267],
[280,270,291,248,297,279,314,0,278],
[275,281,288,280,278,277,283,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,302,291,348,323,269,295,304],
[283,0,264,278,304,304,268,282,275],
[248,286,0,306,319,290,274,322,317],
[259,272,244,0,317,280,261,307,300],
[202,246,231,233,0,245,242,254,232],
[227,246,260,270,305,0,267,265,262],
[281,282,276,289,308,283,0,287,253],
[255,268,228,243,296,285,263,0,255],
[246,275,233,250,318,288,297,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,279,272,262,264,253,284,251],
[281,0,253,263,269,263,295,279,271],
[271,297,0,275,276,274,275,279,257],
[278,287,275,0,261,274,274,273,277],
[288,281,274,289,0,288,274,272,272],
[286,287,276,276,262,0,268,273,249],
[297,255,275,276,276,282,0,264,248],
[266,271,271,277,278,277,286,0,286],
[299,279,293,273,278,301,302,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,294,289,267,283,283,296,267],
[257,0,278,274,257,247,261,283,249],
[256,272,0,249,268,263,269,277,259],
[261,276,301,0,281,272,266,285,264],
[283,293,282,269,0,282,261,295,275],
[267,303,287,278,268,0,278,313,270],
[267,289,281,284,289,272,0,300,280],
[254,267,273,265,255,237,250,0,242],
[283,301,291,286,275,280,270,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,273,268,288,290,274,280,306],
[281,0,273,289,297,270,270,279,276],
[277,277,0,296,275,304,264,285,301],
[282,261,254,0,265,270,275,270,292],
[262,253,275,285,0,266,262,261,269],
[260,280,246,280,284,0,232,266,285],
[276,280,286,275,288,318,0,283,314],
[270,271,265,280,289,284,267,0,280],
[244,274,249,258,281,265,236,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,241,237,245,259,240,206,227],
[274,0,306,251,346,238,291,301,310],
[309,244,0,272,278,225,342,201,295],
[313,299,278,0,260,209,244,275,295],
[305,204,272,290,0,271,238,217,256],
[291,312,325,341,279,0,274,255,346],
[310,259,208,306,312,276,0,256,312],
[344,249,349,275,333,295,294,0,329],
[323,240,255,255,294,204,238,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,255,259,261,262,271,284,276],
[276,0,262,267,236,262,269,268,279],
[295,288,0,266,270,284,284,296,263],
[291,283,284,0,280,276,277,284,275],
[289,314,280,270,0,285,284,285,284],
[288,288,266,274,265,0,289,274,261],
[279,281,266,273,266,261,0,286,245],
[266,282,254,266,265,276,264,0,269],
[274,271,287,275,266,289,305,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,282,276,266,266,248,271,276],
[280,0,296,275,258,268,287,286,263],
[268,254,0,266,256,276,283,264,256],
[274,275,284,0,270,287,285,281,262],
[284,292,294,280,0,254,272,286,263],
[284,282,274,263,296,0,280,281,271],
[302,263,267,265,278,270,0,278,264],
[279,264,286,269,264,269,272,0,268],
[274,287,294,288,287,279,286,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,280,309,285,309,303,273,277],
[254,0,236,289,260,273,273,262,249],
[270,314,0,317,283,300,295,296,294],
[241,261,233,0,264,293,248,237,246],
[265,290,267,286,0,297,284,268,264],
[241,277,250,257,253,0,295,257,264],
[247,277,255,302,266,255,0,278,265],
[277,288,254,313,282,293,272,0,280],
[273,301,256,304,286,286,285,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,266,269,269,261,293,287,296],
[262,0,253,285,256,257,285,267,273],
[284,297,0,288,263,294,304,279,287],
[281,265,262,0,274,298,307,290,292],
[281,294,287,276,0,270,316,278,277],
[289,293,256,252,280,0,312,279,281],
[257,265,246,243,234,238,0,247,255],
[263,283,271,260,272,271,303,0,281],
[254,277,263,258,273,269,295,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,264,256,293,287,275,292,296],
[255,0,227,255,278,265,242,252,299],
[286,323,0,277,285,288,255,267,299],
[294,295,273,0,289,289,278,276,278],
[257,272,265,261,0,283,264,269,297],
[263,285,262,261,267,0,265,266,273],
[275,308,295,272,286,285,0,285,324],
[258,298,283,274,281,284,265,0,320],
[254,251,251,272,253,277,226,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,326,291,305,305,250,274,280],
[236,0,269,244,239,248,242,267,269],
[224,281,0,277,255,264,250,240,224],
[259,306,273,0,250,267,252,264,269],
[245,311,295,300,0,304,276,309,274],
[245,302,286,283,246,0,250,258,268],
[300,308,300,298,274,300,0,307,276],
[276,283,310,286,241,292,243,0,276],
[270,281,326,281,276,282,274,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,268,258,273,285,276,276,277],
[263,0,262,286,271,276,262,264,283],
[282,288,0,265,285,281,269,276,301],
[292,264,285,0,285,283,265,276,288],
[277,279,265,265,0,269,287,276,268],
[265,274,269,267,281,0,268,269,276],
[274,288,281,285,263,282,0,270,266],
[274,286,274,274,274,281,280,0,281],
[273,267,249,262,282,274,284,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,283,295,254,289,269,278,298],
[268,0,252,283,259,264,274,263,271],
[267,298,0,299,276,290,288,279,309],
[255,267,251,0,256,280,271,266,283],
[296,291,274,294,0,291,303,291,302],
[261,286,260,270,259,0,271,265,270],
[281,276,262,279,247,279,0,270,272],
[272,287,271,284,259,285,280,0,282],
[252,279,241,267,248,280,278,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,276,248,272,277,240,272,282],
[294,0,303,262,289,305,281,296,288],
[274,247,0,270,286,269,272,283,274],
[302,288,280,0,281,289,263,297,297],
[278,261,264,269,0,289,251,262,268],
[273,245,281,261,261,0,258,269,254],
[310,269,278,287,299,292,0,302,303],
[278,254,267,253,288,281,248,0,267],
[268,262,276,253,282,296,247,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,258,262,278,283,263,256,267],
[286,0,268,248,300,270,297,274,291],
[292,282,0,267,308,274,304,289,283],
[288,302,283,0,305,265,287,296,294],
[272,250,242,245,0,248,271,259,259],
[267,280,276,285,302,0,276,291,291],
[287,253,246,263,279,274,0,265,289],
[294,276,261,254,291,259,285,0,273],
[283,259,267,256,291,259,261,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,314,284,309,291,291,272,331],
[260,0,266,220,267,203,247,228,308],
[236,284,0,239,304,222,284,283,326],
[266,330,311,0,352,247,330,293,354],
[241,283,246,198,0,179,283,225,286],
[259,347,328,303,371,0,266,331,350],
[259,303,266,220,267,284,0,266,245],
[278,322,267,257,325,219,284,0,367],
[219,242,224,196,264,200,305,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,266,275,286,278,270,294,265],
[281,0,258,294,288,295,277,278,308],
[284,292,0,300,316,295,265,277,276],
[275,256,250,0,285,280,281,275,283],
[264,262,234,265,0,252,276,246,253],
[272,255,255,270,298,0,280,273,277],
[280,273,285,269,274,270,0,259,269],
[256,272,273,275,304,277,291,0,277],
[285,242,274,267,297,273,281,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,290,273,276,284,272,278,277],
[278,0,290,274,266,294,286,287,278],
[260,260,0,268,276,271,267,272,264],
[277,276,282,0,277,286,288,288,272],
[274,284,274,273,0,311,283,282,287],
[266,256,279,264,239,0,266,269,258],
[278,264,283,262,267,284,0,277,271],
[272,263,278,262,268,281,273,0,273],
[273,272,286,278,263,292,279,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,253,232,261,266,255,257,252],
[291,0,289,276,271,277,266,311,272],
[297,261,0,271,263,269,255,279,244],
[318,274,279,0,276,289,319,294,284],
[289,279,287,274,0,268,287,289,281],
[284,273,281,261,282,0,277,299,271],
[295,284,295,231,263,273,0,276,258],
[293,239,271,256,261,251,274,0,259],
[298,278,306,266,269,279,292,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,253,276,270,266,258,256,264],
[248,0,253,272,275,289,267,270,253],
[297,297,0,281,302,284,269,279,273],
[274,278,269,0,302,276,290,274,265],
[280,275,248,248,0,250,234,253,277],
[284,261,266,274,300,0,255,271,287],
[292,283,281,260,316,295,0,263,273],
[294,280,271,276,297,279,287,0,284],
[286,297,277,285,273,263,277,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,290,284,270,274,267,273,261],
[279,0,277,254,255,264,257,268,273],
[260,273,0,268,262,248,240,276,253],
[266,296,282,0,268,264,294,289,277],
[280,295,288,282,0,267,269,257,270],
[276,286,302,286,283,0,269,283,282],
[283,293,310,256,281,281,0,308,297],
[277,282,274,261,293,267,242,0,280],
[289,277,297,273,280,268,253,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,260,287,275,272,262,261,277],
[285,0,281,274,269,270,267,265,276],
[290,269,0,289,283,283,284,276,275],
[263,276,261,0,259,263,246,268,271],
[275,281,267,291,0,270,251,271,270],
[278,280,267,287,280,0,263,272,269],
[288,283,266,304,299,287,0,285,290],
[289,285,274,282,279,278,265,0,275],
[273,274,275,279,280,281,260,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,232,254,328,249,253,349,280],
[235,0,260,244,332,276,280,317,274],
[318,290,0,282,303,283,264,351,282],
[296,306,268,0,305,300,265,314,297],
[222,218,247,245,0,285,220,276,260],
[301,274,267,250,265,0,253,298,275],
[297,270,286,285,330,297,0,302,324],
[201,233,199,236,274,252,248,0,240],
[270,276,268,253,290,275,226,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,260,271,272,277,273,277,296],
[253,0,267,237,263,256,268,274,284],
[290,283,0,277,270,280,269,314,297],
[279,313,273,0,295,279,287,308,296],
[278,287,280,255,0,267,264,283,293],
[273,294,270,271,283,0,281,289,300],
[277,282,281,263,286,269,0,299,313],
[273,276,236,242,267,261,251,0,287],
[254,266,253,254,257,250,237,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,261,266,267,264,279,290,259],
[286,0,277,278,276,295,308,300,268],
[289,273,0,279,253,270,278,281,275],
[284,272,271,0,271,244,294,297,280],
[283,274,297,279,0,283,296,304,283],
[286,255,280,306,267,0,277,282,278],
[271,242,272,256,254,273,0,278,246],
[260,250,269,253,246,268,272,0,247],
[291,282,275,270,267,272,304,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,272,267,273,273,277,253,275],
[278,0,265,271,279,289,268,263,270],
[278,285,0,272,288,278,277,263,269],
[283,279,278,0,272,261,262,265,272],
[277,271,262,278,0,281,266,246,280],
[277,261,272,289,269,0,263,254,262],
[273,282,273,288,284,287,0,275,281],
[297,287,287,285,304,296,275,0,293],
[275,280,281,278,270,288,269,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,330,255,241,331,284,242,285],
[265,0,269,268,256,325,243,208,294],
[220,281,0,324,219,309,220,253,277],
[295,282,226,0,267,311,342,223,264],
[309,294,331,283,0,254,273,296,280],
[219,225,241,239,296,0,256,221,267],
[266,307,330,208,277,294,0,203,310],
[308,342,297,327,254,329,347,0,327],
[265,256,273,286,270,283,240,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,266,297,259,312,240,274,272],
[282,0,283,271,264,299,251,292,272],
[284,267,0,265,240,318,246,287,255],
[253,279,285,0,263,312,252,287,293],
[291,286,310,287,0,330,275,300,282],
[238,251,232,238,220,0,202,281,245],
[310,299,304,298,275,348,0,280,287],
[276,258,263,263,250,269,270,0,247],
[278,278,295,257,268,305,263,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,335,282,308,326,268,314,313,345],
[215,0,204,236,192,248,249,224,263],
[268,346,0,260,307,277,299,302,367],
[242,314,290,0,288,267,313,211,276],
[224,358,243,262,0,243,263,266,320],
[282,302,273,283,307,0,327,255,332],
[236,301,251,237,287,223,0,294,299],
[237,326,248,339,284,295,256,0,296],
[205,287,183,274,230,218,251,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,309,286,290,269,290,276,286],
[284,0,301,291,304,292,284,270,298],
[241,249,0,262,280,263,265,271,288],
[264,259,288,0,288,291,317,265,315],
[260,246,270,262,0,244,256,241,278],
[281,258,287,259,306,0,276,264,285],
[260,266,285,233,294,274,0,259,283],
[274,280,279,285,309,286,291,0,322],
[264,252,262,235,272,265,267,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,267,256,286,295,254,287,264],
[306,0,275,278,296,320,277,315,279],
[283,275,0,282,285,297,263,295,273],
[294,272,268,0,279,280,255,280,263],
[264,254,265,271,0,284,266,279,246],
[255,230,253,270,266,0,251,273,245],
[296,273,287,295,284,299,0,310,282],
[263,235,255,270,271,277,240,0,254],
[286,271,277,287,304,305,268,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,273,283,264,245,298,266,269],
[303,0,265,273,279,240,276,271,284],
[277,285,0,269,286,268,291,280,287],
[267,277,281,0,276,258,285,252,253],
[286,271,264,274,0,279,267,259,270],
[305,310,282,292,271,0,319,292,287],
[252,274,259,265,283,231,0,234,247],
[284,279,270,298,291,258,316,0,298],
[281,266,263,297,280,263,303,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,212,215,245,255,286,259,267],
[290,0,270,260,286,240,319,306,315],
[338,280,0,264,311,270,282,286,303],
[335,290,286,0,279,276,295,267,292],
[305,264,239,271,0,273,297,286,288],
[295,310,280,274,277,0,325,279,328],
[264,231,268,255,253,225,0,296,279],
[291,244,264,283,264,271,254,0,292],
[283,235,247,258,262,222,271,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,272,278,278,281,277,292,273],
[262,0,264,254,260,274,268,275,261],
[278,286,0,278,274,277,273,291,274],
[272,296,272,0,286,286,272,286,284],
[272,290,276,264,0,291,268,283,280],
[269,276,273,264,259,0,260,286,272],
[273,282,277,278,282,290,0,293,281],
[258,275,259,264,267,264,257,0,272],
[277,289,276,266,270,278,269,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,279,250,254,264,250,263,258],
[277,0,248,248,253,270,251,246,260],
[271,302,0,288,277,277,271,278,279],
[300,302,262,0,274,267,278,273,276],
[296,297,273,276,0,280,277,276,277],
[286,280,273,283,270,0,262,272,280],
[300,299,279,272,273,288,0,265,257],
[287,304,272,277,274,278,285,0,275],
[292,290,271,274,273,270,293,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,258,249,269,275,248,260,268],
[279,0,256,279,248,270,235,253,260],
[292,294,0,254,280,268,273,284,270],
[301,271,296,0,276,290,270,260,298],
[281,302,270,274,0,300,283,266,293],
[275,280,282,260,250,0,263,263,273],
[302,315,277,280,267,287,0,269,293],
[290,297,266,290,284,287,281,0,284],
[282,290,280,252,257,277,257,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,283,282,298,273,280,267,283],
[255,0,266,266,278,258,268,257,247],
[267,284,0,278,300,295,271,285,263],
[268,284,272,0,304,255,272,287,262],
[252,272,250,246,0,255,267,248,271],
[277,292,255,295,295,0,274,277,268],
[270,282,279,278,283,276,0,271,271],
[283,293,265,263,302,273,279,0,282],
[267,303,287,288,279,282,279,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,274,264,273,268,276,256,261],
[298,0,278,272,294,287,257,254,264],
[276,272,0,269,277,284,283,271,268],
[286,278,281,0,280,284,269,277,267],
[277,256,273,270,0,290,261,266,266],
[282,263,266,266,260,0,282,253,263],
[274,293,267,281,289,268,0,265,276],
[294,296,279,273,284,297,285,0,285],
[289,286,282,283,284,287,274,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,256,263,255,258,278,270,280],
[294,0,290,302,285,272,285,281,301],
[294,260,0,290,286,286,277,282,290],
[287,248,260,0,258,273,269,276,290],
[295,265,264,292,0,277,279,281,279],
[292,278,264,277,273,0,276,280,284],
[272,265,273,281,271,274,0,281,272],
[280,269,268,274,269,270,269,0,281],
[270,249,260,260,271,266,278,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,276,280,279,290,294,273,287],
[270,0,265,262,306,273,264,295,257],
[274,285,0,277,297,291,286,280,303],
[270,288,273,0,297,287,269,297,299],
[271,244,253,253,0,253,250,265,284],
[260,277,259,263,297,0,274,270,286],
[256,286,264,281,300,276,0,285,295],
[277,255,270,253,285,280,265,0,291],
[263,293,247,251,266,264,255,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,269,256,275,294,274,292,271],
[276,0,285,290,278,280,267,291,288],
[281,265,0,277,269,291,272,276,263],
[294,260,273,0,270,291,278,266,283],
[275,272,281,280,0,291,279,285,293],
[256,270,259,259,259,0,262,289,264],
[276,283,278,272,271,288,0,282,279],
[258,259,274,284,265,261,268,0,261],
[279,262,287,267,257,286,271,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,251,247,255,267,273,251,264],
[312,0,269,282,295,292,271,266,273],
[299,281,0,272,277,284,286,288,266],
[303,268,278,0,265,280,277,276,283],
[295,255,273,285,0,285,292,260,277],
[283,258,266,270,265,0,276,263,263],
[277,279,264,273,258,274,0,278,256],
[299,284,262,274,290,287,272,0,262],
[286,277,284,267,273,287,294,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,297,308,311,294,275,296,301],
[276,0,276,297,305,283,272,286,305],
[253,274,0,287,294,283,286,275,284],
[242,253,263,0,282,258,244,268,276],
[239,245,256,268,0,264,257,244,277],
[256,267,267,292,286,0,261,270,307],
[275,278,264,306,293,289,0,271,285],
[254,264,275,282,306,280,279,0,315],
[249,245,266,274,273,243,265,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,230,209,190,183,269,221,197],
[375,0,351,264,273,293,306,340,303],
[320,199,0,242,244,237,283,275,211],
[341,286,308,0,309,273,293,320,285],
[360,277,306,241,0,254,326,304,295],
[367,257,313,277,296,0,282,319,263],
[281,244,267,257,224,268,0,245,246],
[329,210,275,230,246,231,305,0,245],
[353,247,339,265,255,287,304,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,261,256,264,267,269,274,254],
[308,0,291,284,273,269,275,299,293],
[289,259,0,301,277,273,287,297,260],
[294,266,249,0,253,248,259,286,265],
[286,277,273,297,0,287,262,301,256],
[283,281,277,302,263,0,284,278,254],
[281,275,263,291,288,266,0,284,260],
[276,251,253,264,249,272,266,0,268],
[296,257,290,285,294,296,290,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,284,277,293,283,279,276,276],
[276,0,275,265,293,282,265,277,275],
[266,275,0,266,305,267,252,278,253],
[273,285,284,0,290,278,272,285,270],
[257,257,245,260,0,268,257,255,242],
[267,268,283,272,282,0,263,270,267],
[271,285,298,278,293,287,0,260,261],
[274,273,272,265,295,280,290,0,280],
[274,275,297,280,308,283,289,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,361,285,302,282,318,313,253,361],
[189,0,232,223,223,266,199,152,281],
[265,318,0,289,300,347,236,202,298],
[248,327,261,0,262,263,231,229,309],
[268,327,250,288,0,268,248,238,252],
[232,284,203,287,282,0,189,262,238],
[237,351,314,319,302,361,0,315,336],
[297,398,348,321,312,288,235,0,287],
[189,269,252,241,298,312,214,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,310,276,272,279,274,267,284],
[271,0,279,268,257,278,260,268,274],
[240,271,0,262,269,250,234,264,258],
[274,282,288,0,262,273,260,285,251],
[278,293,281,288,0,283,267,274,288],
[271,272,300,277,267,0,268,281,280],
[276,290,316,290,283,282,0,297,271],
[283,282,286,265,276,269,253,0,276],
[266,276,292,299,262,270,279,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,274,303,302,302,314,278,308],
[270,0,284,286,286,294,285,284,278],
[276,266,0,292,278,297,289,272,284],
[247,264,258,0,295,290,295,272,264],
[248,264,272,255,0,289,269,277,263],
[248,256,253,260,261,0,264,254,264],
[236,265,261,255,281,286,0,264,276],
[272,266,278,278,273,296,286,0,269],
[242,272,266,286,287,286,274,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,321,330,270,308,308,300,255],
[264,0,270,287,284,289,299,255,284],
[229,280,0,285,278,284,283,261,244],
[220,263,265,0,246,307,297,240,255],
[280,266,272,304,0,323,305,293,280],
[242,261,266,243,227,0,252,237,202],
[242,251,267,253,245,298,0,299,250],
[250,295,289,310,257,313,251,0,237],
[295,266,306,295,270,348,300,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,268,310,278,263,288,285,274],
[242,0,248,281,247,244,280,253,264],
[282,302,0,304,294,275,311,266,278],
[240,269,246,0,236,245,269,260,250],
[272,303,256,314,0,251,302,261,274],
[287,306,275,305,299,0,294,268,269],
[262,270,239,281,248,256,0,252,255],
[265,297,284,290,289,282,298,0,263],
[276,286,272,300,276,281,295,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,210,236,248,265,310,277,231],
[265,0,303,274,282,303,294,307,335],
[340,247,0,276,275,285,278,283,305],
[314,276,274,0,261,344,327,315,306],
[302,268,275,289,0,259,279,251,311],
[285,247,265,206,291,0,322,245,277],
[240,256,272,223,271,228,0,247,284],
[273,243,267,235,299,305,303,0,327],
[319,215,245,244,239,273,266,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,296,284,274,295,280,276,275],
[284,0,275,270,276,295,287,287,284],
[254,275,0,267,258,263,262,272,257],
[266,280,283,0,284,286,253,288,272],
[276,274,292,266,0,292,292,300,269],
[255,255,287,264,258,0,271,290,260],
[270,263,288,297,258,279,0,297,284],
[274,263,278,262,250,260,253,0,281],
[275,266,293,278,281,290,266,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,296,315,326,305,296,350,265],
[259,0,295,293,319,305,290,251,298],
[254,255,0,284,288,318,299,292,300],
[235,257,266,0,277,266,245,267,244],
[224,231,262,273,0,250,251,240,216],
[245,245,232,284,300,0,285,260,236],
[254,260,251,305,299,265,0,272,228],
[200,299,258,283,310,290,278,0,257],
[285,252,250,306,334,314,322,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,286,303,274,289,277,300,281],
[273,0,283,260,267,286,268,299,279],
[264,267,0,295,264,266,244,266,270],
[247,290,255,0,259,276,265,279,249],
[276,283,286,291,0,291,262,284,282],
[261,264,284,274,259,0,271,273,284],
[273,282,306,285,288,279,0,304,306],
[250,251,284,271,266,277,246,0,269],
[269,271,280,301,268,266,244,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,278,278,269,272,259,279,262],
[285,0,281,291,288,275,282,293,274],
[272,269,0,267,281,259,250,259,270],
[272,259,283,0,302,278,257,273,289],
[281,262,269,248,0,246,249,275,253],
[278,275,291,272,304,0,258,274,283],
[291,268,300,293,301,292,0,265,276],
[271,257,291,277,275,276,285,0,273],
[288,276,280,261,297,267,274,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,238,241,265,233,263,220,256],
[337,0,221,313,228,254,285,259,249],
[312,329,0,285,325,258,293,316,313],
[309,237,265,0,239,278,292,276,247],
[285,322,225,311,0,269,307,260,282],
[317,296,292,272,281,0,269,293,275],
[287,265,257,258,243,281,0,296,291],
[330,291,234,274,290,257,254,0,296],
[294,301,237,303,268,275,259,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,262,257,279,296,265,260,268],
[275,0,263,264,292,311,274,287,232],
[288,287,0,267,268,286,260,330,274],
[293,286,283,0,257,295,259,287,288],
[271,258,282,293,0,310,284,274,248],
[254,239,264,255,240,0,234,253,237],
[285,276,290,291,266,316,0,303,252],
[290,263,220,263,276,297,247,0,270],
[282,318,276,262,302,313,298,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,253,281,263,295,269,290,290],
[299,0,269,303,276,298,273,305,305],
[297,281,0,289,264,299,281,305,300],
[269,247,261,0,241,288,263,296,281],
[287,274,286,309,0,308,293,291,310],
[255,252,251,262,242,0,264,288,281],
[281,277,269,287,257,286,0,312,287],
[260,245,245,254,259,262,238,0,265],
[260,245,250,269,240,269,263,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,94,186,186,278,368,276,94],
[364,0,182,0,92,184,272,368,90],
[456,368,0,278,460,460,368,460,186],
[364,550,272,0,182,274,366,368,272],
[364,458,90,368,0,368,366,550,276],
[272,366,90,276,182,0,458,366,90],
[182,278,182,184,184,92,0,368,182],
[274,182,90,182,0,184,182,0,182],
[456,460,364,278,274,460,368,368,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,275,259,273,288,268,273,275],
[278,0,250,247,250,271,251,246,274],
[275,300,0,263,276,281,276,262,285],
[291,303,287,0,276,296,269,288,289],
[277,300,274,274,0,284,305,284,300],
[262,279,269,254,266,0,256,257,270],
[282,299,274,281,245,294,0,283,285],
[277,304,288,262,266,293,267,0,284],
[275,276,265,261,250,280,265,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,291,280,281,285,306,267,274],
[277,0,283,279,275,274,273,257,270],
[259,267,0,280,269,262,270,256,259],
[270,271,270,0,264,270,265,262,277],
[269,275,281,286,0,280,289,276,261],
[265,276,288,280,270,0,277,263,256],
[244,277,280,285,261,273,0,271,257],
[283,293,294,288,274,287,279,0,262],
[276,280,291,273,289,294,293,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,306,285,277,299,293,288,274],
[268,0,290,285,291,307,289,287,282],
[244,260,0,270,273,287,251,298,278],
[265,265,280,0,289,287,264,280,269],
[273,259,277,261,0,253,266,293,256],
[251,243,263,263,297,0,276,278,270],
[257,261,299,286,284,274,0,290,299],
[262,263,252,270,257,272,260,0,276],
[276,268,272,281,294,280,251,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,273,276,275,278,276,282,267],
[272,0,282,266,275,279,267,274,293],
[277,268,0,287,264,267,277,275,273],
[274,284,263,0,270,279,267,280,277],
[275,275,286,280,0,292,275,277,276],
[272,271,283,271,258,0,274,263,277],
[274,283,273,283,275,276,0,263,280],
[268,276,275,270,273,287,287,0,268],
[283,257,277,273,274,273,270,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,262,260,270,248,263,286,264],
[295,0,289,288,270,298,266,308,271],
[288,261,0,290,262,261,272,308,248],
[290,262,260,0,286,255,263,288,252],
[280,280,288,264,0,281,277,268,262],
[302,252,289,295,269,0,284,301,283],
[287,284,278,287,273,266,0,291,276],
[264,242,242,262,282,249,259,0,239],
[286,279,302,298,288,267,274,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,258,302,288,262,260,267,269],
[280,0,273,326,277,286,275,266,285],
[292,277,0,306,282,267,270,284,276],
[248,224,244,0,245,256,233,231,266],
[262,273,268,305,0,279,273,253,294],
[288,264,283,294,271,0,256,274,280],
[290,275,280,317,277,294,0,292,272],
[283,284,266,319,297,276,258,0,285],
[281,265,274,284,256,270,278,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,284,292,277,275,263,276,282],
[286,0,279,293,268,265,278,274,276],
[266,271,0,283,258,265,260,270,266],
[258,257,267,0,258,268,270,269,270],
[273,282,292,292,0,275,276,283,275],
[275,285,285,282,275,0,277,268,269],
[287,272,290,280,274,273,0,274,289],
[274,276,280,281,267,282,276,0,274],
[268,274,284,280,275,281,261,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,246,256,275,276,265,278,258],
[284,0,278,270,297,312,290,268,277],
[304,272,0,284,276,305,290,276,280],
[294,280,266,0,282,299,287,275,268],
[275,253,274,268,0,287,274,258,251],
[274,238,245,251,263,0,240,264,249],
[285,260,260,263,276,310,0,271,261],
[272,282,274,275,292,286,279,0,281],
[292,273,270,282,299,301,289,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,279,261,274,256,273,283,268],
[287,0,275,293,310,281,295,303,286],
[271,275,0,278,265,270,254,310,261],
[289,257,272,0,284,269,272,291,297],
[276,240,285,266,0,254,273,271,276],
[294,269,280,281,296,0,289,281,285],
[277,255,296,278,277,261,0,291,286],
[267,247,240,259,279,269,259,0,263],
[282,264,289,253,274,265,264,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,303,279,286,274,280,268,299],
[287,0,291,265,284,287,287,271,286],
[247,259,0,260,277,276,275,255,258],
[271,285,290,0,283,272,272,273,274],
[264,266,273,267,0,261,265,246,284],
[276,263,274,278,289,0,267,283,275],
[270,263,275,278,285,283,0,284,259],
[282,279,295,277,304,267,266,0,281],
[251,264,292,276,266,275,291,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,297,258,281,244,297,287,269],
[257,0,265,291,280,263,256,277,256],
[253,285,0,284,289,267,268,278,286],
[292,259,266,0,284,289,274,300,294],
[269,270,261,266,0,250,275,274,258],
[306,287,283,261,300,0,300,303,263],
[253,294,282,276,275,250,0,294,304],
[263,273,272,250,276,247,256,0,236],
[281,294,264,256,292,287,246,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,280,271,288,288,272,281,296],
[281,0,283,275,280,288,274,277,291],
[270,267,0,253,290,283,274,273,285],
[279,275,297,0,293,300,269,294,276],
[262,270,260,257,0,284,262,263,280],
[262,262,267,250,266,0,261,254,275],
[278,276,276,281,288,289,0,273,283],
[269,273,277,256,287,296,277,0,274],
[254,259,265,274,270,275,267,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,269,265,290,292,259,283,277],
[270,0,260,276,266,328,277,271,269],
[281,290,0,275,298,304,271,303,292],
[285,274,275,0,284,312,278,312,289],
[260,284,252,266,0,312,283,314,284],
[258,222,246,238,238,0,229,252,248],
[291,273,279,272,267,321,0,289,290],
[267,279,247,238,236,298,261,0,242],
[273,281,258,261,266,302,260,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,275,0,0,275,275,275,275],
[275,0,550,275,275,550,550,550,0],
[275,0,0,275,275,0,275,0,0],
[550,275,275,0,550,275,550,275,275],
[550,275,275,0,0,275,550,275,275],
[275,0,550,275,275,0,550,275,0],
[275,0,275,0,0,0,0,0,0],
[275,0,550,275,275,275,550,0,0],
[275,550,550,275,275,550,550,550,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,272,276,276,287,280,299,273],
[270,0,280,276,273,293,282,271,282],
[278,270,0,285,290,285,287,288,282],
[274,274,265,0,293,281,282,295,271],
[274,277,260,257,0,269,270,274,267],
[263,257,265,269,281,0,270,278,258],
[270,268,263,268,280,280,0,296,263],
[251,279,262,255,276,272,254,0,284],
[277,268,268,279,283,292,287,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,290,275,312,272,277,264,289],
[279,0,300,294,308,271,302,274,287],
[260,250,0,275,304,271,264,279,266],
[275,256,275,0,288,276,298,263,294],
[238,242,246,262,0,261,259,265,256],
[278,279,279,274,289,0,285,270,301],
[273,248,286,252,291,265,0,272,300],
[286,276,271,287,285,280,278,0,291],
[261,263,284,256,294,249,250,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,221,304,256,230,273,255,282,288],
[329,0,353,321,255,269,355,282,263],
[246,197,0,252,263,249,235,307,255],
[294,229,298,0,213,244,240,238,269],
[320,295,287,337,0,297,269,278,286],
[277,281,301,306,253,0,293,299,222],
[295,195,315,310,281,257,0,267,259],
[268,268,243,312,272,251,283,0,261],
[262,287,295,281,264,328,291,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,299,283,281,289,301,270,296],
[262,0,280,291,260,263,260,260,275],
[251,270,0,267,269,284,269,264,283],
[267,259,283,0,272,289,270,266,274],
[269,290,281,278,0,280,266,255,281],
[261,287,266,261,270,0,276,278,279],
[249,290,281,280,284,274,0,269,265],
[280,290,286,284,295,272,281,0,274],
[254,275,267,276,269,271,285,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,280,273,266,268,283,264,252],
[274,0,279,266,259,283,274,266,261],
[270,271,0,275,252,294,293,283,278],
[277,284,275,0,284,287,288,276,280],
[284,291,298,266,0,260,282,268,271],
[282,267,256,263,290,0,286,270,254],
[267,276,257,262,268,264,0,266,274],
[286,284,267,274,282,280,284,0,284],
[298,289,272,270,279,296,276,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,344,341,346,414,209,278,277,274],
[206,0,205,344,346,278,207,209,207],
[209,345,0,277,276,209,210,139,138],
[204,206,273,0,344,206,209,139,136],
[136,204,274,206,0,68,138,277,206],
[341,272,341,344,482,0,275,345,275],
[272,343,340,341,412,275,0,139,272],
[273,341,411,411,273,205,411,0,273],
[276,343,412,414,344,275,278,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,279,272,285,291,288,288,256],
[285,0,269,217,257,282,278,270,224],
[271,281,0,202,263,262,281,245,227],
[278,333,348,0,293,321,348,270,299],
[265,293,287,257,0,287,279,272,236],
[259,268,288,229,263,0,261,263,253],
[262,272,269,202,271,289,0,265,207],
[262,280,305,280,278,287,285,0,285],
[294,326,323,251,314,297,343,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,297,254,273,267,283,293,291],
[296,0,284,287,293,282,293,282,271],
[253,266,0,260,270,268,269,272,277],
[296,263,290,0,280,276,272,300,278],
[277,257,280,270,0,270,270,287,285],
[283,268,282,274,280,0,270,273,281],
[267,257,281,278,280,280,0,273,267],
[257,268,278,250,263,277,277,0,267],
[259,279,273,272,265,269,283,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,276,303,273,252,255,260,287],
[283,0,278,303,295,266,269,281,275],
[274,272,0,298,297,287,282,272,285],
[247,247,252,0,266,255,235,254,270],
[277,255,253,284,0,257,249,250,286],
[298,284,263,295,293,0,239,278,306],
[295,281,268,315,301,311,0,279,303],
[290,269,278,296,300,272,271,0,270],
[263,275,265,280,264,244,247,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,237,277,331,320,271,276,262],
[283,0,271,285,247,327,286,207,255],
[313,279,0,294,296,309,341,243,244],
[273,265,256,0,276,318,320,215,294],
[219,303,254,274,0,231,249,226,247],
[230,223,241,232,319,0,238,229,233],
[279,264,209,230,301,312,0,274,269],
[274,343,307,335,324,321,276,0,302],
[288,295,306,256,303,317,281,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,276,294,279,256,314,274,281],
[267,0,269,276,272,285,298,299,265],
[274,281,0,273,301,268,294,283,273],
[256,274,277,0,281,267,325,279,237],
[271,278,249,269,0,257,298,268,251],
[294,265,282,283,293,0,308,267,290],
[236,252,256,225,252,242,0,259,257],
[276,251,267,271,282,283,291,0,258],
[269,285,277,313,299,260,293,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,286,303,297,289,271,291,253],
[274,0,282,295,279,264,275,262,258],
[264,268,0,301,265,257,283,281,259],
[247,255,249,0,256,255,244,262,272],
[253,271,285,294,0,271,275,268,268],
[261,286,293,295,279,0,270,279,241],
[279,275,267,306,275,280,0,299,280],
[259,288,269,288,282,271,251,0,275],
[297,292,291,278,282,309,270,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,283,284,278,272,283,284,292],
[285,0,295,301,279,274,275,292,281],
[267,255,0,266,263,257,257,276,283],
[266,249,284,0,265,268,266,267,265],
[272,271,287,285,0,286,283,293,289],
[278,276,293,282,264,0,263,293,294],
[267,275,293,284,267,287,0,281,298],
[266,258,274,283,257,257,269,0,268],
[258,269,267,285,261,256,252,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,249,296,279,296,278,306,247],
[236,0,260,263,251,248,249,291,253],
[301,290,0,292,270,302,305,306,299],
[254,287,258,0,268,310,279,278,272],
[271,299,280,282,0,319,283,298,303],
[254,302,248,240,231,0,258,289,258],
[272,301,245,271,267,292,0,312,289],
[244,259,244,272,252,261,238,0,246],
[303,297,251,278,247,292,261,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,298,335,312,314,270,301,295],
[238,0,285,328,262,300,283,278,257],
[252,265,0,317,297,288,289,309,268],
[215,222,233,0,237,256,217,247,224],
[238,288,253,313,0,306,270,299,291],
[236,250,262,294,244,0,256,258,249],
[280,267,261,333,280,294,0,213,266],
[249,272,241,303,251,292,337,0,288],
[255,293,282,326,259,301,284,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,271,274,279,291,261,297,308],
[238,0,232,209,229,246,214,236,266],
[279,318,0,257,271,298,273,277,290],
[276,341,293,0,259,305,295,282,285],
[271,321,279,291,0,266,261,258,271],
[259,304,252,245,284,0,273,280,289],
[289,336,277,255,289,277,0,251,276],
[253,314,273,268,292,270,299,0,290],
[242,284,260,265,279,261,274,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,270,255,360,260,253,279,311],
[272,0,341,186,356,298,292,236,301],
[280,209,0,160,280,245,229,210,289],
[295,364,390,0,389,339,293,270,363],
[190,194,270,161,0,223,184,186,267],
[290,252,305,211,327,0,232,280,300],
[297,258,321,257,366,318,0,259,313],
[271,314,340,280,364,270,291,0,307],
[239,249,261,187,283,250,237,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,279,277,286,252,249,291,286],
[252,0,266,262,274,269,252,278,253],
[271,284,0,253,259,247,246,260,264],
[273,288,297,0,291,291,286,298,305],
[264,276,291,259,0,260,251,265,270],
[298,281,303,259,290,0,271,265,274],
[301,298,304,264,299,279,0,293,290],
[259,272,290,252,285,285,257,0,271],
[264,297,286,245,280,276,260,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,273,281,299,275,299,301,283],
[282,0,292,281,292,261,289,290,286],
[277,258,0,277,288,265,306,294,287],
[269,269,273,0,286,272,276,288,274],
[251,258,262,264,0,275,287,274,269],
[275,289,285,278,275,0,299,292,289],
[251,261,244,274,263,251,0,281,256],
[249,260,256,262,276,258,269,0,274],
[267,264,263,276,281,261,294,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,276,286,305,276,266,267,246],
[269,0,279,284,286,263,261,254,267],
[274,271,0,282,286,275,261,270,256],
[264,266,268,0,279,269,277,269,274],
[245,264,264,271,0,252,253,253,261],
[274,287,275,281,298,0,277,288,279],
[284,289,289,273,297,273,0,280,264],
[283,296,280,281,297,262,270,0,283],
[304,283,294,276,289,271,286,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,273,286,293,298,305,283,314],
[249,0,271,270,268,278,276,275,275],
[277,279,0,307,266,297,290,269,295],
[264,280,243,0,272,287,271,274,271],
[257,282,284,278,0,286,291,291,291],
[252,272,253,263,264,0,288,257,277],
[245,274,260,279,259,262,0,279,276],
[267,275,281,276,259,293,271,0,279],
[236,275,255,279,259,273,274,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,261,286,284,285,276,282,282],
[266,0,258,258,258,269,261,265,282],
[289,292,0,274,284,270,266,302,271],
[264,292,276,0,287,257,264,270,287],
[266,292,266,263,0,267,283,291,265],
[265,281,280,293,283,0,290,288,289],
[274,289,284,286,267,260,0,297,290],
[268,285,248,280,259,262,253,0,281],
[268,268,279,263,285,261,260,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,231,255,226,259,252,215,258],
[303,0,278,294,256,286,272,261,282],
[319,272,0,278,252,253,282,263,312],
[295,256,272,0,248,254,285,281,302],
[324,294,298,302,0,303,309,258,301],
[291,264,297,296,247,0,301,261,274],
[298,278,268,265,241,249,0,225,271],
[335,289,287,269,292,289,325,0,298],
[292,268,238,248,249,276,279,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,278,285,278,259,253,281,268],
[288,0,267,292,300,281,263,288,282],
[272,283,0,301,298,285,280,286,262],
[265,258,249,0,266,248,251,263,250],
[272,250,252,284,0,259,263,262,259],
[291,269,265,302,291,0,278,269,267],
[297,287,270,299,287,272,0,267,281],
[269,262,264,287,288,281,283,0,273],
[282,268,288,300,291,283,269,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,258,249,282,281,272,268,265],
[288,0,294,280,281,264,280,288,262],
[292,256,0,266,277,294,265,287,268],
[301,270,284,0,273,276,262,259,270],
[268,269,273,277,0,263,259,255,264],
[269,286,256,274,287,0,271,272,253],
[278,270,285,288,291,279,0,280,281],
[282,262,263,291,295,278,270,0,268],
[285,288,282,280,286,297,269,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,301,280,289,245,294,285,263],
[263,0,293,295,303,260,311,271,276],
[249,257,0,289,285,261,312,239,244],
[270,255,261,0,293,231,270,231,280],
[261,247,265,257,0,253,281,256,254],
[305,290,289,319,297,0,268,283,289],
[256,239,238,280,269,282,0,231,233],
[265,279,311,319,294,267,319,0,305],
[287,274,306,270,296,261,317,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,267,255,279,267,274,262,285],
[294,0,269,293,293,283,296,273,296],
[283,281,0,266,306,297,279,273,296],
[295,257,284,0,282,282,279,283,290],
[271,257,244,268,0,273,275,262,281],
[283,267,253,268,277,0,271,276,285],
[276,254,271,271,275,279,0,270,280],
[288,277,277,267,288,274,280,0,290],
[265,254,254,260,269,265,270,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,283,262,280,268,267,267,263],
[283,0,303,278,296,273,258,286,276],
[267,247,0,250,263,245,251,268,230],
[288,272,300,0,289,271,271,285,270],
[270,254,287,261,0,257,264,259,258],
[282,277,305,279,293,0,277,274,276],
[283,292,299,279,286,273,0,292,270],
[283,264,282,265,291,276,258,0,255],
[287,274,320,280,292,274,280,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,252,278,264,260,270,270,289],
[276,0,268,256,269,286,259,279,269],
[298,282,0,270,263,275,279,281,281],
[272,294,280,0,275,269,274,283,282],
[286,281,287,275,0,291,274,292,304],
[290,264,275,281,259,0,261,279,288],
[280,291,271,276,276,289,0,283,292],
[280,271,269,267,258,271,267,0,272],
[261,281,269,268,246,262,258,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,249,286,241,267,294,273,273],
[259,0,254,248,218,249,266,238,240],
[301,296,0,304,269,293,294,281,271],
[264,302,246,0,254,277,280,267,269],
[309,332,281,296,0,294,293,266,292],
[283,301,257,273,256,0,284,286,283],
[256,284,256,270,257,266,0,270,237],
[277,312,269,283,284,264,280,0,263],
[277,310,279,281,258,267,313,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,267,278,275,298,300,305,260],
[268,0,250,269,274,265,285,289,278],
[283,300,0,282,287,274,302,289,270],
[272,281,268,0,289,284,286,279,287],
[275,276,263,261,0,281,293,293,285],
[252,285,276,266,269,0,258,289,283],
[250,265,248,264,257,292,0,271,260],
[245,261,261,271,257,261,279,0,263],
[290,272,280,263,265,267,290,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,272,283,276,297,290,298,278],
[275,0,262,292,299,305,298,284,269],
[278,288,0,287,291,297,284,294,266],
[267,258,263,0,284,290,269,297,258],
[274,251,259,266,0,271,263,294,277],
[253,245,253,260,279,0,258,290,231],
[260,252,266,281,287,292,0,291,257],
[252,266,256,253,256,260,259,0,250],
[272,281,284,292,273,319,293,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,272,261,219,250,283,299,256],
[297,0,257,295,259,276,278,291,308],
[278,293,0,324,292,302,263,328,315],
[289,255,226,0,222,264,250,290,284],
[331,291,258,328,0,289,310,310,330],
[300,274,248,286,261,0,261,284,325],
[267,272,287,300,240,289,0,323,284],
[251,259,222,260,240,266,227,0,274],
[294,242,235,266,220,225,266,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,279,296,265,290,291,304,283],
[266,0,264,288,269,277,260,272,258],
[271,286,0,295,285,276,270,284,283],
[254,262,255,0,274,252,259,270,256],
[285,281,265,276,0,280,275,285,273],
[260,273,274,298,270,0,287,269,284],
[259,290,280,291,275,263,0,283,283],
[246,278,266,280,265,281,267,0,267],
[267,292,267,294,277,266,267,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,273,262,295,284,274,276,265],
[279,0,259,272,290,286,284,261,266],
[277,291,0,274,275,279,281,255,256],
[288,278,276,0,287,264,282,275,266],
[255,260,275,263,0,273,281,256,266],
[266,264,271,286,277,0,285,272,264],
[276,266,269,268,269,265,0,251,270],
[274,289,295,275,294,278,299,0,282],
[285,284,294,284,284,286,280,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,293,272,284,263,278,283,276],
[268,0,266,271,279,270,261,276,264],
[257,284,0,279,272,275,273,272,275],
[278,279,271,0,266,265,263,263,278],
[266,271,278,284,0,259,272,259,271],
[287,280,275,285,291,0,276,271,265],
[272,289,277,287,278,274,0,279,279],
[267,274,278,287,291,279,271,0,270],
[274,286,275,272,279,285,271,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,256,284,257,273,276,260,272],
[277,0,272,269,297,268,292,269,256],
[294,278,0,299,282,265,299,306,272],
[266,281,251,0,269,264,249,275,296],
[293,253,268,281,0,299,283,281,269],
[277,282,285,286,251,0,288,270,256],
[274,258,251,301,267,262,0,260,243],
[290,281,244,275,269,280,290,0,257],
[278,294,278,254,281,294,307,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,246,256,240,265,249,246,249],
[274,0,235,252,260,259,265,265,252],
[304,315,0,284,285,271,291,307,280],
[294,298,266,0,274,277,275,297,271],
[310,290,265,276,0,293,277,291,289],
[285,291,279,273,257,0,273,274,255],
[301,285,259,275,273,277,0,278,259],
[304,285,243,253,259,276,272,0,266],
[301,298,270,279,261,295,291,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,270,255,252,270,269,290,259],
[241,0,262,217,224,250,229,245,215],
[280,288,0,231,248,259,253,239,220],
[295,333,319,0,255,271,284,288,263],
[298,326,302,295,0,278,264,304,285],
[280,300,291,279,272,0,286,248,245],
[281,321,297,266,286,264,0,283,272],
[260,305,311,262,246,302,267,0,225],
[291,335,330,287,265,305,278,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,292,266,267,263,260,274,272],
[291,0,273,273,291,273,270,274,284],
[258,277,0,274,287,274,283,255,271],
[284,277,276,0,296,285,287,272,278],
[283,259,263,254,0,268,265,262,242],
[287,277,276,265,282,0,275,273,267],
[290,280,267,263,285,275,0,287,275],
[276,276,295,278,288,277,263,0,269],
[278,266,279,272,308,283,275,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,266,252,265,249,253,261,251],
[281,0,288,303,284,287,271,279,275],
[284,262,0,268,278,252,271,286,259],
[298,247,282,0,288,251,246,281,263],
[285,266,272,262,0,238,254,262,251],
[301,263,298,299,312,0,256,289,264],
[297,279,279,304,296,294,0,293,254],
[289,271,264,269,288,261,257,0,248],
[299,275,291,287,299,286,296,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,229,244,288,244,278,321,269],
[236,0,260,223,255,244,261,278,226],
[321,290,0,231,247,266,300,311,302],
[306,327,319,0,283,275,307,274,308],
[262,295,303,267,0,335,254,282,292],
[306,306,284,275,215,0,306,275,281],
[272,289,250,243,296,244,0,256,258],
[229,272,239,276,268,275,294,0,269],
[281,324,248,242,258,269,292,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,247,331,303,317,226,316,263],
[271,0,216,263,268,231,249,247,212],
[303,334,0,295,318,210,244,242,300],
[219,287,255,0,237,248,178,250,233],
[247,282,232,313,0,264,244,264,246],
[233,319,340,302,286,0,321,301,322],
[324,301,306,372,306,229,0,268,304],
[234,303,308,300,286,249,282,0,322],
[287,338,250,317,304,228,246,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,296,271,270,285,282,276,280],
[249,0,266,261,243,258,256,274,264],
[254,284,0,263,266,270,271,277,262],
[279,289,287,0,279,267,267,287,269],
[280,307,284,271,0,276,293,290,273],
[265,292,280,283,274,0,279,275,283],
[268,294,279,283,257,271,0,307,260],
[274,276,273,263,260,275,243,0,272],
[270,286,288,281,277,267,290,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,284,279,261,286,296,278,252],
[266,0,303,245,269,290,285,273,273],
[266,247,0,248,275,283,280,253,250],
[271,305,302,0,309,286,295,283,280],
[289,281,275,241,0,273,272,270,273],
[264,260,267,264,277,0,280,277,271],
[254,265,270,255,278,270,0,265,270],
[272,277,297,267,280,273,285,0,260],
[298,277,300,270,277,279,280,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,244,272,287,271,237,229,272],
[294,0,298,294,279,273,256,257,262],
[306,252,0,315,310,299,284,278,272],
[278,256,235,0,262,243,244,240,282],
[263,271,240,288,0,259,280,252,274],
[279,277,251,307,291,0,274,279,256],
[313,294,266,306,270,276,0,249,272],
[321,293,272,310,298,271,301,0,284],
[278,288,278,268,276,294,278,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,293,292,302,270,316,298,287],
[284,0,319,271,312,289,294,313,297],
[257,231,0,284,305,253,267,269,282],
[258,279,266,0,295,249,286,265,285],
[248,238,245,255,0,239,257,268,273],
[280,261,297,301,311,0,295,306,300],
[234,256,283,264,293,255,0,256,267],
[252,237,281,285,282,244,294,0,268],
[263,253,268,265,277,250,283,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,328,219,219,273,330,273,274],
[330,0,328,329,328,440,440,273,274],
[222,222,0,274,164,330,385,275,220],
[331,221,276,0,219,276,276,276,220],
[331,222,386,331,0,385,276,221,386],
[277,110,220,274,165,0,331,329,220],
[220,110,165,274,274,219,0,274,220],
[277,277,275,274,329,221,276,0,330],
[276,276,330,330,164,330,330,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,259,279,276,277,286,255,269],
[269,0,277,275,264,258,282,256,248],
[291,273,0,302,264,285,282,274,273],
[271,275,248,0,249,263,284,271,256],
[274,286,286,301,0,295,301,274,273],
[273,292,265,287,255,0,260,255,281],
[264,268,268,266,249,290,0,250,265],
[295,294,276,279,276,295,300,0,275],
[281,302,277,294,277,269,285,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,327,316,302,294,303,283,268],
[264,0,287,291,252,256,266,239,253],
[223,263,0,269,262,225,227,260,242],
[234,259,281,0,244,269,269,258,262],
[248,298,288,306,0,254,270,288,283],
[256,294,325,281,296,0,288,289,257],
[247,284,323,281,280,262,0,244,252],
[267,311,290,292,262,261,306,0,301],
[282,297,308,288,267,293,298,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,282,246,266,268,273,270,257],
[264,0,272,257,262,273,265,275,257],
[268,278,0,275,263,268,270,271,275],
[304,293,275,0,285,270,276,275,268],
[284,288,287,265,0,278,278,285,277],
[282,277,282,280,272,0,273,272,260],
[277,285,280,274,272,277,0,285,283],
[280,275,279,275,265,278,265,0,249],
[293,293,275,282,273,290,267,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,292,251,237,285,267,281,245],
[325,0,306,305,304,319,272,328,287],
[258,244,0,283,272,296,294,286,291],
[299,245,267,0,290,281,286,328,275],
[313,246,278,260,0,262,279,286,270],
[265,231,254,269,288,0,273,308,253],
[283,278,256,264,271,277,0,301,285],
[269,222,264,222,264,242,249,0,281],
[305,263,259,275,280,297,265,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,275,299,277,255,278,383,258],
[296,0,229,171,297,254,337,360,295],
[275,321,0,254,339,299,236,341,256],
[251,379,296,0,317,295,254,404,254],
[273,253,211,233,0,211,296,363,233],
[295,296,251,255,339,0,233,379,295],
[272,213,314,296,254,317,0,359,274],
[167,190,209,146,187,171,191,0,214],
[292,255,294,296,317,255,276,336,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,262,264,259,275,271,277,258],
[274,0,272,246,259,262,267,276,282],
[288,278,0,287,259,286,269,289,269],
[286,304,263,0,283,293,286,294,282],
[291,291,291,267,0,277,261,305,286],
[275,288,264,257,273,0,277,286,273],
[279,283,281,264,289,273,0,282,286],
[273,274,261,256,245,264,268,0,274],
[292,268,281,268,264,277,264,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,278,261,269,308,279,271,275],
[260,0,280,256,280,278,280,275,258],
[272,270,0,253,274,279,273,246,278],
[289,294,297,0,271,298,289,262,286],
[281,270,276,279,0,279,280,253,299],
[242,272,271,252,271,0,251,263,268],
[271,270,277,261,270,299,0,280,283],
[279,275,304,288,297,287,270,0,286],
[275,292,272,264,251,282,267,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,283,285,289,278,272,299,272],
[259,0,273,258,256,240,269,267,248],
[267,277,0,282,262,255,260,284,278],
[265,292,268,0,275,233,261,296,281],
[261,294,288,275,0,243,265,290,271],
[272,310,295,317,307,0,286,292,293],
[278,281,290,289,285,264,0,283,269],
[251,283,266,254,260,258,267,0,245],
[278,302,272,269,279,257,281,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,303,349,350,251,303,322,325],
[276,0,277,251,351,251,277,371,274],
[247,273,0,348,324,176,326,321,249],
[201,299,202,0,249,200,203,298,277],
[200,199,226,301,0,200,178,346,251],
[299,299,374,350,350,0,325,323,274],
[247,273,224,347,372,225,0,346,298],
[228,179,229,252,204,227,204,0,279],
[225,276,301,273,299,276,252,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,267,272,279,305,288,272,278],
[282,0,272,246,318,308,293,273,250],
[283,278,0,291,286,298,278,272,254],
[278,304,259,0,282,287,258,265,268],
[271,232,264,268,0,291,283,252,249],
[245,242,252,263,259,0,250,228,246],
[262,257,272,292,267,300,0,274,255],
[278,277,278,285,298,322,276,0,244],
[272,300,296,282,301,304,295,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,261,283,274,268,293,279,296],
[262,0,280,279,281,292,294,265,274],
[289,270,0,279,280,295,300,275,305],
[267,271,271,0,255,287,283,261,279],
[276,269,270,295,0,273,286,263,298],
[282,258,255,263,277,0,293,282,291],
[257,256,250,267,264,257,0,261,283],
[271,285,275,289,287,268,289,0,285],
[254,276,245,271,252,259,267,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,283,244,249,279,265,282,258],
[284,0,286,252,253,258,291,289,269],
[267,264,0,264,235,264,274,272,256],
[306,298,286,0,262,272,277,288,290],
[301,297,315,288,0,275,311,309,289],
[271,292,286,278,275,0,283,279,272],
[285,259,276,273,239,267,0,291,259],
[268,261,278,262,241,271,259,0,270],
[292,281,294,260,261,278,291,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,265,263,282,221,259,263,223],
[255,0,200,254,230,225,225,251,202],
[285,350,0,243,270,293,281,279,257],
[287,296,307,0,313,243,259,270,311],
[268,320,280,237,0,240,255,279,242],
[329,325,257,307,310,0,349,294,324],
[291,325,269,291,295,201,0,268,202],
[287,299,271,280,271,256,282,0,245],
[327,348,293,239,308,226,348,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,287,243,254,295,266,269,284],
[271,0,284,257,243,304,262,277,250],
[263,266,0,240,248,272,266,257,256],
[307,293,310,0,288,309,274,277,271],
[296,307,302,262,0,292,291,287,304],
[255,246,278,241,258,0,272,264,237],
[284,288,284,276,259,278,0,284,266],
[281,273,293,273,263,286,266,0,281],
[266,300,294,279,246,313,284,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,292,267,282,286,253,275,290],
[294,0,291,308,294,309,283,275,322],
[258,259,0,268,278,286,231,262,264],
[283,242,282,0,279,293,282,266,286],
[268,256,272,271,0,283,254,260,241],
[264,241,264,257,267,0,260,232,249],
[297,267,319,268,296,290,0,289,313],
[275,275,288,284,290,318,261,0,289],
[260,228,286,264,309,301,237,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,270,270,280,255,290,269,280],
[278,0,257,274,272,248,280,279,269],
[280,293,0,273,287,254,290,282,279],
[280,276,277,0,280,250,286,270,277],
[270,278,263,270,0,263,292,272,269],
[295,302,296,300,287,0,304,282,272],
[260,270,260,264,258,246,0,260,270],
[281,271,268,280,278,268,290,0,290],
[270,281,271,273,281,278,280,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,258,454,323,326,291,261,323],
[290,0,419,485,387,356,355,261,387],
[292,131,0,358,227,228,323,293,263],
[96,65,192,0,64,128,163,97,131],
[227,163,323,486,0,357,355,390,292],
[224,194,322,422,193,0,259,262,260],
[259,195,227,387,195,291,0,326,260],
[289,289,257,453,160,288,224,0,258],
[227,163,287,419,258,290,290,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,272,265,261,262,262,265,264],
[294,0,276,268,268,279,270,286,268],
[278,274,0,278,265,271,266,293,272],
[285,282,272,0,291,254,274,287,288],
[289,282,285,259,0,278,284,294,279],
[288,271,279,296,272,0,275,299,284],
[288,280,284,276,266,275,0,300,276],
[285,264,257,263,256,251,250,0,251],
[286,282,278,262,271,266,274,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,315,245,292,290,307,314,294],
[271,0,279,269,288,312,283,270,301],
[235,271,0,244,278,245,251,212,277],
[305,281,306,0,315,303,267,281,324],
[258,262,272,235,0,268,273,241,244],
[260,238,305,247,282,0,277,261,248],
[243,267,299,283,277,273,0,232,234],
[236,280,338,269,309,289,318,0,280],
[256,249,273,226,306,302,316,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,267,275,246,255,257,252,272],
[275,0,296,254,279,252,279,256,271],
[283,254,0,268,249,252,268,298,246],
[275,296,282,0,277,270,270,271,250],
[304,271,301,273,0,266,283,272,252],
[295,298,298,280,284,0,297,271,273],
[293,271,282,280,267,253,0,258,261],
[298,294,252,279,278,279,292,0,277],
[278,279,304,300,298,277,289,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,278,266,260,248,261,266,251],
[293,0,295,303,293,277,265,273,271],
[272,255,0,274,276,279,258,251,266],
[284,247,276,0,276,248,229,259,268],
[290,257,274,274,0,263,248,269,281],
[302,273,271,302,287,0,264,278,255],
[289,285,292,321,302,286,0,296,274],
[284,277,299,291,281,272,254,0,275],
[299,279,284,282,269,295,276,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,327,292,302,282,275,309,278],
[276,0,289,293,270,271,304,287,277],
[223,261,0,274,273,256,284,273,264],
[258,257,276,0,267,232,263,291,261],
[248,280,277,283,0,268,291,277,271],
[268,279,294,318,282,0,295,283,285],
[275,246,266,287,259,255,0,271,270],
[241,263,277,259,273,267,279,0,257],
[272,273,286,289,279,265,280,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,281,284,288,276,270,295,281],
[282,0,272,278,273,308,298,281,298],
[269,278,0,266,255,264,282,254,289],
[266,272,284,0,267,292,273,269,258],
[262,277,295,283,0,283,276,285,285],
[274,242,286,258,267,0,284,284,278],
[280,252,268,277,274,266,0,265,283],
[255,269,296,281,265,266,285,0,282],
[269,252,261,292,265,272,267,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,392,328,324,392,390,359,263],
[257,0,257,325,257,289,324,194,291],
[158,293,0,359,323,257,325,227,227],
[222,225,191,0,228,258,290,196,162],
[226,293,227,322,0,324,259,228,195],
[158,261,293,292,226,0,292,193,228],
[160,226,225,260,291,258,0,227,226],
[191,356,323,354,322,357,323,0,292],
[287,259,323,388,355,322,324,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,282,281,264,243,276,265,267],
[287,0,278,264,257,258,285,265,274],
[268,272,0,282,277,250,274,267,264],
[269,286,268,0,252,249,281,260,257],
[286,293,273,298,0,274,301,292,274],
[307,292,300,301,276,0,291,289,267],
[274,265,276,269,249,259,0,269,257],
[285,285,283,290,258,261,281,0,283],
[283,276,286,293,276,283,293,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,277,272,294,296,272,271,277],
[277,0,268,283,291,297,287,282,280],
[273,282,0,261,283,298,283,280,274],
[278,267,289,0,309,300,269,289,276],
[256,259,267,241,0,278,270,271,257],
[254,253,252,250,272,0,253,270,263],
[278,263,267,281,280,297,0,289,279],
[279,268,270,261,279,280,261,0,272],
[273,270,276,274,293,287,271,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,296,263,299,283,280,276,270],
[258,0,288,261,288,266,307,295,276],
[254,262,0,271,277,265,269,274,257],
[287,289,279,0,289,311,295,284,269],
[251,262,273,261,0,267,296,287,244],
[267,284,285,239,283,0,274,283,295],
[270,243,281,255,254,276,0,271,249],
[274,255,276,266,263,267,279,0,269],
[280,274,293,281,306,255,301,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,258,242,234,242,263,260,272],
[263,0,270,237,246,232,261,248,265],
[292,280,0,257,254,275,259,276,284],
[308,313,293,0,308,280,286,268,307],
[316,304,296,242,0,257,261,278,305],
[308,318,275,270,293,0,299,288,325],
[287,289,291,264,289,251,0,262,302],
[290,302,274,282,272,262,288,0,295],
[278,285,266,243,245,225,248,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,295,264,289,277,281,270,282],
[277,0,277,285,284,277,269,276,276],
[255,273,0,274,277,282,267,265,254],
[286,265,276,0,272,275,282,278,269],
[261,266,273,278,0,255,257,248,250],
[273,273,268,275,295,0,271,262,253],
[269,281,283,268,293,279,0,265,264],
[280,274,285,272,302,288,285,0,267],
[268,274,296,281,300,297,286,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,263,241,291,296,300,298,292],
[263,0,237,213,261,277,267,267,261],
[287,313,0,275,266,296,267,267,282],
[309,337,275,0,318,308,301,340,311],
[259,289,284,232,0,285,273,279,261],
[254,273,254,242,265,0,266,284,290],
[250,283,283,249,277,284,0,274,267],
[252,283,283,210,271,266,276,0,293],
[258,289,268,239,289,260,283,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,280,247,257,277,269,270,281],
[288,0,265,258,277,289,278,277,279],
[270,285,0,252,266,291,274,282,290],
[303,292,298,0,275,302,299,287,311],
[293,273,284,275,0,310,294,279,308],
[273,261,259,248,240,0,265,267,279],
[281,272,276,251,256,285,0,274,295],
[280,273,268,263,271,283,276,0,276],
[269,271,260,239,242,271,255,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,267,281,253,275,285,287,279],
[272,0,276,289,292,271,291,292,301],
[283,274,0,273,280,271,287,298,286],
[269,261,277,0,276,265,283,278,272],
[297,258,270,274,0,269,278,281,285],
[275,279,279,285,281,0,282,289,279],
[265,259,263,267,272,268,0,279,282],
[263,258,252,272,269,261,271,0,282],
[271,249,264,278,265,271,268,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,262,270,264,253,261,275,267],
[271,0,261,263,260,276,262,271,274],
[288,289,0,287,272,284,294,289,302],
[280,287,263,0,288,247,291,276,277],
[286,290,278,262,0,264,273,271,289],
[297,274,266,303,286,0,291,269,303],
[289,288,256,259,277,259,0,265,293],
[275,279,261,274,279,281,285,0,285],
[283,276,248,273,261,247,257,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,264,278,247,286,282,286,257],
[305,0,284,278,303,274,305,305,276],
[286,266,0,290,273,289,302,298,292],
[272,272,260,0,277,269,286,289,263],
[303,247,277,273,0,269,281,277,273],
[264,276,261,281,281,0,279,307,277],
[268,245,248,264,269,271,0,255,272],
[264,245,252,261,273,243,295,0,245],
[293,274,258,287,277,273,278,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,255,264,271,265,290,278,279],
[240,0,244,246,236,238,238,236,232],
[295,306,0,274,280,284,287,300,257],
[286,304,276,0,281,266,285,258,249],
[279,314,270,269,0,262,285,287,281],
[285,312,266,284,288,0,280,287,272],
[260,312,263,265,265,270,0,295,268],
[272,314,250,292,263,263,255,0,264],
[271,318,293,301,269,278,282,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,349,285,310,288,293,319,268],
[282,0,320,279,281,249,280,328,274],
[201,230,0,235,271,231,217,233,263],
[265,271,315,0,277,252,292,308,314],
[240,269,279,273,0,256,262,293,249],
[262,301,319,298,294,0,282,306,326],
[257,270,333,258,288,268,0,304,298],
[231,222,317,242,257,244,246,0,285],
[282,276,287,236,301,224,252,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,267,279,254,261,267,257,272],
[294,0,275,284,270,270,269,286,281],
[283,275,0,282,273,253,271,284,279],
[271,266,268,0,276,267,269,268,260],
[296,280,277,274,0,278,270,286,300],
[289,280,297,283,272,0,278,291,281],
[283,281,279,281,280,272,0,286,289],
[293,264,266,282,264,259,264,0,279],
[278,269,271,290,250,269,261,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,265,271,298,286,291,287,273],
[274,0,264,261,288,285,272,277,275],
[285,286,0,279,290,284,300,270,290],
[279,289,271,0,278,280,296,266,275],
[252,262,260,272,0,252,258,246,266],
[264,265,266,270,298,0,274,278,285],
[259,278,250,254,292,276,0,260,259],
[263,273,280,284,304,272,290,0,297],
[277,275,260,275,284,265,291,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,267,268,291,262,280,272,283],
[265,0,267,252,286,253,256,266,266],
[283,283,0,287,286,267,289,283,255],
[282,298,263,0,295,294,280,290,282],
[259,264,264,255,0,258,262,261,257],
[288,297,283,256,292,0,292,296,263],
[270,294,261,270,288,258,0,271,273],
[278,284,267,260,289,254,279,0,260],
[267,284,295,268,293,287,277,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,287,272,277,291,287,295,300],
[258,0,272,265,291,267,279,274,276],
[263,278,0,269,304,273,273,265,258],
[278,285,281,0,305,311,285,290,270],
[273,259,246,245,0,275,251,264,261],
[259,283,277,239,275,0,266,265,257],
[263,271,277,265,299,284,0,300,284],
[255,276,285,260,286,285,250,0,268],
[250,274,292,280,289,293,266,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,246,262,268,265,278,292,289],
[270,0,236,281,276,285,276,273,286],
[304,314,0,303,294,308,274,307,286],
[288,269,247,0,286,269,289,264,289],
[282,274,256,264,0,275,288,281,273],
[285,265,242,281,275,0,278,273,284],
[272,274,276,261,262,272,0,273,291],
[258,277,243,286,269,277,277,0,294],
[261,264,264,261,277,266,259,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,296,295,273,282,292,272,319],
[279,0,273,281,268,264,287,291,312],
[254,277,0,293,270,281,282,262,296],
[255,269,257,0,267,262,284,255,287],
[277,282,280,283,0,282,275,280,304],
[268,286,269,288,268,0,291,274,297],
[258,263,268,266,275,259,0,269,295],
[278,259,288,295,270,276,281,0,309],
[231,238,254,263,246,253,255,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,245,245,256,253,271,263,255],
[277,0,281,242,256,266,278,283,309],
[305,269,0,280,239,284,293,305,288],
[305,308,270,0,277,291,285,291,314],
[294,294,311,273,0,281,279,272,311],
[297,284,266,259,269,0,270,283,253],
[279,272,257,265,271,280,0,269,263],
[287,267,245,259,278,267,281,0,279],
[295,241,262,236,239,297,287,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,271,255,286,275,256,252,263],
[285,0,288,276,280,283,254,260,274],
[279,262,0,265,252,275,251,250,278],
[295,274,285,0,287,291,261,277,280],
[264,270,298,263,0,266,254,270,261],
[275,267,275,259,284,0,259,255,268],
[294,296,299,289,296,291,0,272,285],
[298,290,300,273,280,295,278,0,286],
[287,276,272,270,289,282,265,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,274,272,283,281,297,259,315],
[279,0,277,277,287,271,279,259,297],
[276,273,0,268,265,267,287,282,294],
[278,273,282,0,269,266,273,295,287],
[267,263,285,281,0,272,284,273,318],
[269,279,283,284,278,0,278,274,308],
[253,271,263,277,266,272,0,259,293],
[291,291,268,255,277,276,291,0,288],
[235,253,256,263,232,242,257,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,229,248,216,270,226,284,285],
[326,0,279,235,223,231,213,269,327],
[321,271,0,236,248,283,285,296,253],
[302,315,314,0,279,284,261,306,331],
[334,327,302,271,0,314,295,339,321],
[280,319,267,266,236,0,240,266,310],
[324,337,265,289,255,310,0,324,307],
[266,281,254,244,211,284,226,0,272],
[265,223,297,219,229,240,243,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,280,264,265,258,271,268,285],
[283,0,270,288,270,276,276,273,278],
[270,280,0,288,273,271,266,278,272],
[286,262,262,0,267,262,274,260,268],
[285,280,277,283,0,270,279,288,282],
[292,274,279,288,280,0,269,278,277],
[279,274,284,276,271,281,0,266,282],
[282,277,272,290,262,272,284,0,286],
[265,272,278,282,268,273,268,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,250,295,246,294,278,267,270],
[291,0,287,292,267,289,293,285,264],
[300,263,0,306,276,292,295,269,278],
[255,258,244,0,266,260,256,280,246],
[304,283,274,284,0,298,292,292,274],
[256,261,258,290,252,0,278,285,253],
[272,257,255,294,258,272,0,279,290],
[283,265,281,270,258,265,271,0,237],
[280,286,272,304,276,297,260,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,293,287,297,267,282,260,281],
[287,0,289,301,294,280,269,280,282],
[257,261,0,261,304,282,269,266,292],
[263,249,289,0,276,280,287,283,253],
[253,256,246,274,0,284,260,256,251],
[283,270,268,270,266,0,260,305,300],
[268,281,281,263,290,290,0,290,269],
[290,270,284,267,294,245,260,0,264],
[269,268,258,297,299,250,281,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,232,258,254,261,259,250,252],
[301,0,280,299,272,291,276,269,288],
[318,270,0,278,277,283,282,258,263],
[292,251,272,0,258,279,274,264,242],
[296,278,273,292,0,293,271,284,273],
[289,259,267,271,257,0,260,267,259],
[291,274,268,276,279,290,0,262,267],
[300,281,292,286,266,283,288,0,276],
[298,262,287,308,277,291,283,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,274,288,271,287,269,289,261],
[280,0,289,300,291,285,270,299,268],
[276,261,0,283,270,285,271,294,278],
[262,250,267,0,253,258,251,285,261],
[279,259,280,297,0,283,269,280,280],
[263,265,265,292,267,0,275,271,276],
[281,280,279,299,281,275,0,304,284],
[261,251,256,265,270,279,246,0,253],
[289,282,272,289,270,274,266,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,270,294,276,282,295,271,283],
[277,0,256,268,284,270,278,262,282],
[280,294,0,284,279,268,282,271,258],
[256,282,266,0,282,260,292,284,255],
[274,266,271,268,0,290,297,265,272],
[268,280,282,290,260,0,295,280,279],
[255,272,268,258,253,255,0,270,255],
[279,288,279,266,285,270,280,0,261],
[267,268,292,295,278,271,295,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,267,286,276,289,254,271,278],
[270,0,291,293,278,298,275,277,284],
[283,259,0,287,283,244,235,258,272],
[264,257,263,0,273,275,249,251,288],
[274,272,267,277,0,285,251,253,302],
[261,252,306,275,265,0,267,241,264],
[296,275,315,301,299,283,0,280,294],
[279,273,292,299,297,309,270,0,267],
[272,266,278,262,248,286,256,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,282,244,257,240,269,303,255],
[312,0,307,305,268,282,297,333,263],
[268,243,0,273,256,258,296,299,287],
[306,245,277,0,257,247,280,298,271],
[293,282,294,293,0,251,276,275,341],
[310,268,292,303,299,0,296,315,277],
[281,253,254,270,274,254,0,297,277],
[247,217,251,252,275,235,253,0,239],
[295,287,263,279,209,273,273,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,336,291,275,304,226,288,316,261],
[214,0,166,260,308,214,231,227,228],
[259,384,0,306,324,261,292,289,244],
[275,290,244,0,306,242,294,244,243],
[246,242,226,244,0,197,230,254,228],
[324,336,289,308,353,0,229,307,278],
[262,319,258,256,320,321,0,291,260],
[234,323,261,306,296,243,259,0,230],
[289,322,306,307,322,272,290,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,275,261,274,272,284,283,279],
[260,0,243,249,248,276,276,258,264],
[275,307,0,280,303,275,301,279,295],
[289,301,270,0,301,294,301,291,311],
[276,302,247,249,0,267,282,276,273],
[278,274,275,256,283,0,284,288,282],
[266,274,249,249,268,266,0,271,270],
[267,292,271,259,274,262,279,0,302],
[271,286,255,239,277,268,280,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,306,267,240,318,279,236,283],
[272,0,309,288,274,306,270,250,326],
[244,241,0,226,227,260,210,213,267],
[283,262,324,0,285,323,282,257,299],
[310,276,323,265,0,334,310,285,312],
[232,244,290,227,216,0,275,244,294],
[271,280,340,268,240,275,0,282,296],
[314,300,337,293,265,306,268,0,296],
[267,224,283,251,238,256,254,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,292,289,275,285,286,288,268],
[270,0,284,274,290,284,298,297,289],
[258,266,0,267,258,291,267,277,266],
[261,276,283,0,262,275,286,288,288],
[275,260,292,288,0,285,277,293,284],
[265,266,259,275,265,0,269,281,275],
[264,252,283,264,273,281,0,271,271],
[262,253,273,262,257,269,279,0,278],
[282,261,284,262,266,275,279,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,271,280,299,273,262,265,293],
[272,0,287,273,286,272,274,269,285],
[279,263,0,275,289,259,265,265,275],
[270,277,275,0,298,283,266,282,279],
[251,264,261,252,0,265,254,249,273],
[277,278,291,267,285,0,263,263,290],
[288,276,285,284,296,287,0,274,280],
[285,281,285,268,301,287,276,0,298],
[257,265,275,271,277,260,270,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,264,265,257,279,253,299,282],
[263,0,282,258,274,313,260,269,275],
[286,268,0,274,253,275,228,286,281],
[285,292,276,0,273,277,267,284,284],
[293,276,297,277,0,289,258,304,270],
[271,237,275,273,261,0,234,259,268],
[297,290,322,283,292,316,0,312,274],
[251,281,264,266,246,291,238,0,270],
[268,275,269,266,280,282,276,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,273,295,250,273,253,253,268],
[269,0,264,300,257,271,269,256,262],
[277,286,0,306,260,284,263,273,280],
[255,250,244,0,240,261,243,234,250],
[300,293,290,310,0,314,288,290,275],
[277,279,266,289,236,0,244,253,267],
[297,281,287,307,262,306,0,284,276],
[297,294,277,316,260,297,266,0,271],
[282,288,270,300,275,283,274,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,270,292,262,286,282,280,275],
[269,0,275,284,268,273,276,265,264],
[280,275,0,289,273,289,285,276,276],
[258,266,261,0,266,276,284,258,252],
[288,282,277,284,0,293,287,270,264],
[264,277,261,274,257,0,271,263,256],
[268,274,265,266,263,279,0,260,260],
[270,285,274,292,280,287,290,0,274],
[275,286,274,298,286,294,290,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,367,324,321,323,278,323,233],
[227,0,230,231,322,186,278,414,233],
[183,320,0,233,367,277,368,368,231],
[226,319,317,0,367,230,322,411,228],
[229,228,183,183,0,323,229,275,183],
[227,364,273,320,227,0,273,366,228],
[272,272,182,228,321,277,0,411,276],
[227,136,182,139,275,184,139,0,91],
[317,317,319,322,367,322,274,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,292,258,275,279,253,261,293],
[270,0,276,279,251,264,262,247,292],
[258,274,0,266,256,260,282,244,277],
[292,271,284,0,270,270,267,255,291],
[275,299,294,280,0,283,282,265,293],
[271,286,290,280,267,0,278,276,298],
[297,288,268,283,268,272,0,271,288],
[289,303,306,295,285,274,279,0,296],
[257,258,273,259,257,252,262,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,271,274,299,303,296,285,270],
[266,0,284,285,279,275,274,246,266],
[279,266,0,279,259,297,281,252,277],
[276,265,271,0,281,284,269,259,275],
[251,271,291,269,0,295,259,258,254],
[247,275,253,266,255,0,252,259,225],
[254,276,269,281,291,298,0,247,266],
[265,304,298,291,292,291,303,0,278],
[280,284,273,275,296,325,284,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,283,257,268,280,264,278,269],
[283,0,283,267,277,274,288,272,281],
[267,267,0,259,272,273,288,253,265],
[293,283,291,0,293,296,267,296,272],
[282,273,278,257,0,290,280,262,269],
[270,276,277,254,260,0,276,257,269],
[286,262,262,283,270,274,0,276,248],
[272,278,297,254,288,293,274,0,274],
[281,269,285,278,281,281,302,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,293,293,295,295,300,296,269],
[287,0,287,306,312,274,313,300,283],
[257,263,0,286,270,261,272,269,264],
[257,244,264,0,278,255,288,271,270],
[255,238,280,272,0,264,275,253,271],
[255,276,289,295,286,0,290,285,277],
[250,237,278,262,275,260,0,268,263],
[254,250,281,279,297,265,282,0,260],
[281,267,286,280,279,273,287,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,264,279,281,282,276,272,291],
[270,0,250,268,273,295,277,276,293],
[286,300,0,298,292,307,274,287,302],
[271,282,252,0,287,295,279,275,294],
[269,277,258,263,0,285,272,276,289],
[268,255,243,255,265,0,267,271,272],
[274,273,276,271,278,283,0,260,293],
[278,274,263,275,274,279,290,0,276],
[259,257,248,256,261,278,257,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,294,215,198,270,255,254,252],
[296,0,315,261,297,352,294,237,313],
[256,235,0,178,156,271,234,274,252],
[335,289,372,0,218,289,271,311,290],
[352,253,394,332,0,347,351,371,290],
[280,198,279,261,203,0,221,258,276],
[295,256,316,279,199,329,0,276,254],
[296,313,276,239,179,292,274,0,214],
[298,237,298,260,260,274,296,336,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,302,281,273,288,277,279,298],
[271,0,271,254,273,299,271,255,293],
[248,279,0,256,265,278,277,278,264],
[269,296,294,0,273,264,278,275,274],
[277,277,285,277,0,312,285,275,288],
[262,251,272,286,238,0,252,275,252],
[273,279,273,272,265,298,0,292,281],
[271,295,272,275,275,275,258,0,277],
[252,257,286,276,262,298,269,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,276,279,291,268,302,284,280],
[248,0,255,255,272,260,265,263,259],
[274,295,0,277,270,263,267,281,263],
[271,295,273,0,259,266,289,270,257],
[259,278,280,291,0,263,257,270,261],
[282,290,287,284,287,0,265,289,276],
[248,285,283,261,293,285,0,261,276],
[266,287,269,280,280,261,289,0,260],
[270,291,287,293,289,274,274,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,415,411,346,278,275,275,274],
[342,0,274,411,342,342,411,342,342],
[135,276,0,344,137,204,273,275,204],
[139,139,206,0,70,139,139,210,70],
[204,208,413,480,0,414,343,275,341],
[272,208,346,411,136,0,275,275,341],
[275,139,277,411,207,275,0,275,274],
[275,208,275,340,275,275,275,0,206],
[276,208,346,480,209,209,276,344,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,274,277,272,284,270,275,277],
[267,0,278,271,266,277,267,268,272],
[276,272,0,265,257,272,290,243,264],
[273,279,285,0,260,277,280,261,279],
[278,284,293,290,0,285,301,271,288],
[266,273,278,273,265,0,284,263,266],
[280,283,260,270,249,266,0,257,280],
[275,282,307,289,279,287,293,0,286],
[273,278,286,271,262,284,270,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,277,260,283,282,266,262,254],
[271,0,260,258,259,274,254,235,258],
[273,290,0,263,275,282,263,243,288],
[290,292,287,0,264,268,250,263,274],
[267,291,275,286,0,269,284,265,275],
[268,276,268,282,281,0,276,260,274],
[284,296,287,300,266,274,0,280,286],
[288,315,307,287,285,290,270,0,285],
[296,292,262,276,275,276,264,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,285,274,274,270,309,311,280],
[262,0,267,272,273,244,310,288,277],
[265,283,0,270,260,266,305,282,276],
[276,278,280,0,271,276,289,304,288],
[276,277,290,279,0,253,287,298,275],
[280,306,284,274,297,0,298,310,278],
[241,240,245,261,263,252,0,286,263],
[239,262,268,246,252,240,264,0,256],
[270,273,274,262,275,272,287,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,221,249,242,235,249,269,260],
[242,0,214,298,242,257,207,237,238],
[329,336,0,306,303,316,241,325,330],
[301,252,244,0,271,286,247,259,222],
[308,308,247,279,0,263,281,269,261],
[315,293,234,264,287,0,261,267,271],
[301,343,309,303,269,289,0,311,255],
[281,313,225,291,281,283,239,0,250],
[290,312,220,328,289,279,295,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,297,284,273,255,276,246,252],
[291,0,305,289,289,284,305,279,265],
[253,245,0,265,268,258,284,245,263],
[266,261,285,0,282,266,286,262,240],
[277,261,282,268,0,260,271,254,239],
[295,266,292,284,290,0,290,280,256],
[274,245,266,264,279,260,0,241,251],
[304,271,305,288,296,270,309,0,275],
[298,285,287,310,311,294,299,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,245,256,288,272,254,296,303],
[279,0,270,241,310,290,296,307,263],
[305,280,0,266,321,281,306,297,305],
[294,309,284,0,278,275,309,335,275],
[262,240,229,272,0,271,253,290,237],
[278,260,269,275,279,0,290,304,266],
[296,254,244,241,297,260,0,316,276],
[254,243,253,215,260,246,234,0,248],
[247,287,245,275,313,284,274,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,274,261,273,277,289,277,272],
[289,0,296,272,277,286,305,285,273],
[276,254,0,266,263,280,289,268,263],
[289,278,284,0,285,275,311,277,275],
[277,273,287,265,0,278,286,283,260],
[273,264,270,275,272,0,291,271,257],
[261,245,261,239,264,259,0,253,258],
[273,265,282,273,267,279,297,0,266],
[278,277,287,275,290,293,292,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,221,224,227,260,254,251,250],
[281,0,222,246,252,277,266,270,247],
[329,328,0,292,278,264,301,299,298],
[326,304,258,0,265,322,280,301,277],
[323,298,272,285,0,286,289,300,287],
[290,273,286,228,264,0,284,270,244],
[296,284,249,270,261,266,0,299,272],
[299,280,251,249,250,280,251,0,264],
[300,303,252,273,263,306,278,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,283,265,281,272,287,277,271],
[292,0,288,293,274,281,281,284,295],
[267,262,0,280,252,265,281,299,275],
[285,257,270,0,266,268,264,287,267],
[269,276,298,284,0,287,282,286,294],
[278,269,285,282,263,0,281,293,281],
[263,269,269,286,268,269,0,270,284],
[273,266,251,263,264,257,280,0,277],
[279,255,275,283,256,269,266,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,267,272,269,283,264,276,281],
[252,0,251,250,257,282,265,245,260],
[283,299,0,286,262,284,279,259,269],
[278,300,264,0,277,298,289,261,293],
[281,293,288,273,0,301,281,269,288],
[267,268,266,252,249,0,270,249,266],
[286,285,271,261,269,280,0,274,254],
[274,305,291,289,281,301,276,0,270],
[269,290,281,257,262,284,296,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,321,299,289,278,296,270,305],
[257,0,262,267,279,286,297,257,282],
[229,288,0,290,279,241,260,268,264],
[251,283,260,0,293,232,273,273,263],
[261,271,271,257,0,259,250,241,286],
[272,264,309,318,291,0,270,279,275],
[254,253,290,277,300,280,0,278,290],
[280,293,282,277,309,271,272,0,314],
[245,268,286,287,264,275,260,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,293,300,268,298,309,307,294],
[263,0,285,285,260,243,296,280,290],
[257,265,0,283,262,270,291,274,270],
[250,265,267,0,271,271,294,275,255],
[282,290,288,279,0,260,306,276,276],
[252,307,280,279,290,0,277,268,273],
[241,254,259,256,244,273,0,260,249],
[243,270,276,275,274,282,290,0,266],
[256,260,280,295,274,277,301,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,249,257,227,248,258,278,247],
[304,0,263,288,268,293,282,317,295],
[301,287,0,261,268,289,281,295,264],
[293,262,289,0,260,269,282,287,274],
[323,282,282,290,0,291,276,291,272],
[302,257,261,281,259,0,280,289,261],
[292,268,269,268,274,270,0,272,267],
[272,233,255,263,259,261,278,0,255],
[303,255,286,276,278,289,283,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,331,291,320,256,277,286,290],
[275,0,301,291,283,278,294,291,299],
[219,249,0,235,250,241,241,276,267],
[259,259,315,0,295,253,316,269,307],
[230,267,300,255,0,238,273,262,257],
[294,272,309,297,312,0,289,311,318],
[273,256,309,234,277,261,0,275,293],
[264,259,274,281,288,239,275,0,278],
[260,251,283,243,293,232,257,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,280,275,277,291,258,291,283],
[291,0,298,274,289,311,278,264,271],
[270,252,0,266,268,290,243,273,259],
[275,276,284,0,268,297,269,254,260],
[273,261,282,282,0,295,274,272,262],
[259,239,260,253,255,0,239,249,250],
[292,272,307,281,276,311,0,283,286],
[259,286,277,296,278,301,267,0,264],
[267,279,291,290,288,300,264,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,247,238,235,268,260,292,240],
[317,0,283,270,281,303,289,287,278],
[303,267,0,262,264,282,272,282,300],
[312,280,288,0,273,303,284,285,287],
[315,269,286,277,0,321,278,310,282],
[282,247,268,247,229,0,261,278,251],
[290,261,278,266,272,289,0,278,281],
[258,263,268,265,240,272,272,0,282],
[310,272,250,263,268,299,269,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,267,267,273,296,276,276,285],
[280,0,263,247,297,302,286,261,299],
[283,287,0,274,310,336,293,262,307],
[283,303,276,0,281,289,279,222,266],
[277,253,240,269,0,292,296,252,314],
[254,248,214,261,258,0,254,248,271],
[274,264,257,271,254,296,0,268,270],
[274,289,288,328,298,302,282,0,268],
[265,251,243,284,236,279,280,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,285,273,289,312,271,253,290],
[273,0,274,274,289,275,261,247,283],
[265,276,0,257,292,259,240,268,284],
[277,276,293,0,300,315,268,293,298],
[261,261,258,250,0,298,263,272,295],
[238,275,291,235,252,0,274,243,271],
[279,289,310,282,287,276,0,269,302],
[297,303,282,257,278,307,281,0,306],
[260,267,266,252,255,279,248,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,255,287,272,263,252,276,240],
[256,0,245,276,242,279,249,280,264],
[295,305,0,270,266,296,270,295,283],
[263,274,280,0,250,253,270,278,292],
[278,308,284,300,0,293,269,298,297],
[287,271,254,297,257,0,276,274,289],
[298,301,280,280,281,274,0,283,288],
[274,270,255,272,252,276,267,0,254],
[310,286,267,258,253,261,262,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,256,267,271,280,265,279,287],
[253,0,262,274,269,247,272,240,258],
[294,288,0,227,288,248,271,263,271],
[283,276,323,0,280,299,295,273,287],
[279,281,262,270,0,286,289,251,304],
[270,303,302,251,264,0,290,253,284],
[285,278,279,255,261,260,0,222,254],
[271,310,287,277,299,297,328,0,303],
[263,292,279,263,246,266,296,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,262,260,300,282,274,281,277],
[266,0,238,253,271,215,233,246,282],
[288,312,0,272,304,297,256,285,297],
[290,297,278,0,311,317,291,255,310],
[250,279,246,239,0,233,261,268,272],
[268,335,253,233,317,0,248,259,283],
[276,317,294,259,289,302,0,252,292],
[269,304,265,295,282,291,298,0,304],
[273,268,253,240,278,267,258,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,280,267,252,258,233,263,276],
[275,0,275,256,265,270,257,268,274],
[270,275,0,265,256,230,249,280,256],
[283,294,285,0,269,257,265,296,261],
[298,285,294,281,0,276,288,270,295],
[292,280,320,293,274,0,280,258,298],
[317,293,301,285,262,270,0,290,290],
[287,282,270,254,280,292,260,0,269],
[274,276,294,289,255,252,260,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,290,288,294,281,293,278,270],
[269,0,284,263,262,251,263,243,270],
[260,266,0,270,268,261,268,250,256],
[262,287,280,0,281,273,272,247,274],
[256,288,282,269,0,262,259,253,265],
[269,299,289,277,288,0,299,268,263],
[257,287,282,278,291,251,0,272,259],
[272,307,300,303,297,282,278,0,282],
[280,280,294,276,285,287,291,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,249,284,274,250,292,270,296],
[286,0,261,292,271,279,268,252,288],
[301,289,0,293,281,292,290,264,327],
[266,258,257,0,269,270,266,247,275],
[276,279,269,281,0,282,288,280,297],
[300,271,258,280,268,0,280,269,302],
[258,282,260,284,262,270,0,248,294],
[280,298,286,303,270,281,302,0,314],
[254,262,223,275,253,248,256,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,281,265,279,283,283,286,289],
[245,0,265,248,245,258,269,250,262],
[269,285,0,248,271,275,300,286,292],
[285,302,302,0,269,277,282,293,291],
[271,305,279,281,0,289,293,281,272],
[267,292,275,273,261,0,286,273,288],
[267,281,250,268,257,264,0,275,282],
[264,300,264,257,269,277,275,0,289],
[261,288,258,259,278,262,268,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,262,288,283,281,271,280,280],
[287,0,259,299,286,274,298,295,274],
[288,291,0,284,287,288,270,268,283],
[262,251,266,0,256,247,254,261,240],
[267,264,263,294,0,277,264,268,278],
[269,276,262,303,273,0,283,285,258],
[279,252,280,296,286,267,0,290,272],
[270,255,282,289,282,265,260,0,261],
[270,276,267,310,272,292,278,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,287,282,276,303,269,245,270],
[282,0,274,263,257,302,263,251,254],
[263,276,0,258,280,287,264,252,259],
[268,287,292,0,276,294,273,279,274],
[274,293,270,274,0,290,259,260,261],
[247,248,263,256,260,0,262,232,242],
[281,287,286,277,291,288,0,279,268],
[305,299,298,271,290,318,271,0,293],
[280,296,291,276,289,308,282,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,263,274,280,257,273,289,264],
[275,0,265,272,279,262,274,287,270],
[287,285,0,292,292,293,283,306,269],
[276,278,258,0,276,274,275,279,265],
[270,271,258,274,0,265,277,283,258],
[293,288,257,276,285,0,277,291,275],
[277,276,267,275,273,273,0,289,277],
[261,263,244,271,267,259,261,0,250],
[286,280,281,285,292,275,273,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,259,332,354,295,296,296,336],
[253,0,198,290,371,331,276,294,255],
[291,352,0,311,311,331,256,274,355],
[218,260,239,0,298,217,259,162,201],
[196,179,239,252,0,272,315,198,258],
[255,219,219,333,278,0,276,237,277],
[254,274,294,291,235,274,0,199,256],
[254,256,276,388,352,313,351,0,352],
[214,295,195,349,292,273,294,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,266,281,274,269,275,280,273],
[276,0,270,278,264,282,269,269,262],
[284,280,0,273,264,280,286,286,276],
[269,272,277,0,267,254,279,289,269],
[276,286,286,283,0,259,294,281,289],
[281,268,270,296,291,0,277,299,266],
[275,281,264,271,256,273,0,286,274],
[270,281,264,261,269,251,264,0,270],
[277,288,274,281,261,284,276,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,269,268,287,279,263,290,268],
[293,0,269,284,270,267,278,308,259],
[281,281,0,292,277,272,280,296,276],
[282,266,258,0,263,277,276,273,252],
[263,280,273,287,0,253,254,267,262],
[271,283,278,273,297,0,274,291,263],
[287,272,270,274,296,276,0,312,266],
[260,242,254,277,283,259,238,0,233],
[282,291,274,298,288,287,284,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,361,264,312,298,288,261,279],
[270,0,307,288,278,274,288,294,277],
[189,243,0,245,220,226,250,215,207],
[286,262,305,0,292,281,274,267,268],
[238,272,330,258,0,278,261,280,253],
[252,276,324,269,272,0,264,256,247],
[262,262,300,276,289,286,0,279,238],
[289,256,335,283,270,294,271,0,272],
[271,273,343,282,297,303,312,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,294,263,257,313,261,311,273],
[302,0,337,277,301,370,259,259,306],
[256,213,0,245,223,247,212,242,244],
[287,273,305,0,241,295,213,290,242],
[293,249,327,309,0,342,213,324,229],
[237,180,303,255,208,0,228,257,226],
[289,291,338,337,337,322,0,336,275],
[239,291,308,260,226,293,214,0,239],
[277,244,306,308,321,324,275,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,285,266,273,267,286,293,295],
[270,0,290,279,288,273,291,263,300],
[265,260,0,269,287,268,266,270,274],
[284,271,281,0,274,281,274,274,284],
[277,262,263,276,0,297,305,278,293],
[283,277,282,269,253,0,287,283,272],
[264,259,284,276,245,263,0,247,273],
[257,287,280,276,272,267,303,0,319],
[255,250,276,266,257,278,277,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,263,293,269,285,285,271,289],
[252,0,269,272,255,278,260,250,280],
[287,281,0,283,262,283,280,276,253],
[257,278,267,0,255,287,270,264,267],
[281,295,288,295,0,295,277,266,272],
[265,272,267,263,255,0,279,257,263],
[265,290,270,280,273,271,0,265,265],
[279,300,274,286,284,293,285,0,285],
[261,270,297,283,278,287,285,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,326,307,286,291,264,275,323],
[244,0,291,286,255,288,270,250,303],
[224,259,0,272,239,266,274,239,283],
[243,264,278,0,241,257,268,247,287],
[264,295,311,309,0,286,300,281,313],
[259,262,284,293,264,0,268,268,297],
[286,280,276,282,250,282,0,233,294],
[275,300,311,303,269,282,317,0,309],
[227,247,267,263,237,253,256,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,280,285,288,264,263,269,297],
[276,0,272,284,279,285,281,279,285],
[270,278,0,286,279,283,281,280,263],
[265,266,264,0,278,263,280,262,278],
[262,271,271,272,0,256,271,282,265],
[286,265,267,287,294,0,285,275,289],
[287,269,269,270,279,265,0,278,283],
[281,271,270,288,268,275,272,0,305],
[253,265,287,272,285,261,267,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,242,273,228,266,251,237,261],
[332,0,291,324,302,281,275,292,281],
[308,259,0,301,273,295,276,285,321],
[277,226,249,0,253,258,206,242,232],
[322,248,277,297,0,271,274,261,265],
[284,269,255,292,279,0,280,247,255],
[299,275,274,344,276,270,0,280,288],
[313,258,265,308,289,303,270,0,294],
[289,269,229,318,285,295,262,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,247,275,275,248,267,247,291],
[290,0,271,263,280,244,274,250,281],
[303,279,0,247,262,251,262,271,291],
[275,287,303,0,299,260,276,268,276],
[275,270,288,251,0,247,307,266,279],
[302,306,299,290,303,0,286,292,261],
[283,276,288,274,243,264,0,266,258],
[303,300,279,282,284,258,284,0,249],
[259,269,259,274,271,289,292,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,266,284,279,250,269,266,279],
[270,0,258,267,278,267,268,247,273],
[284,292,0,285,265,264,272,268,297],
[266,283,265,0,274,259,262,263,273],
[271,272,285,276,0,258,276,276,271],
[300,283,286,291,292,0,281,266,282],
[281,282,278,288,274,269,0,263,287],
[284,303,282,287,274,284,287,0,287],
[271,277,253,277,279,268,263,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,259,253,255,216,249,234,267],
[314,0,282,298,272,266,286,263,297],
[291,268,0,288,257,257,261,286,269],
[297,252,262,0,256,242,260,279,274],
[295,278,293,294,0,280,284,276,271],
[334,284,293,308,270,0,299,295,321],
[301,264,289,290,266,251,0,286,295],
[316,287,264,271,274,255,264,0,289],
[283,253,281,276,279,229,255,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,253,279,258,285,262,254,257],
[290,0,299,296,291,288,306,274,317],
[297,251,0,291,285,283,285,294,272],
[271,254,259,0,246,263,267,278,263],
[292,259,265,304,0,293,285,266,284],
[265,262,267,287,257,0,264,261,239],
[288,244,265,283,265,286,0,272,294],
[296,276,256,272,284,289,278,0,283],
[293,233,278,287,266,311,256,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,329,293,257,301,246,299,256,290],
[221,0,248,247,300,173,251,248,287],
[257,302,0,285,326,239,247,325,303],
[293,303,265,0,327,243,299,312,301],
[249,250,224,223,0,182,228,289,253],
[304,377,311,307,368,0,281,302,264],
[251,299,303,251,322,269,0,264,302],
[294,302,225,238,261,248,286,0,256],
[260,263,247,249,297,286,248,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,299,288,270,301,283,282,287],
[283,0,284,286,270,287,276,276,298],
[251,266,0,274,259,285,257,262,261],
[262,264,276,0,261,293,290,271,278],
[280,280,291,289,0,272,293,288,282],
[249,263,265,257,278,0,255,281,269],
[267,274,293,260,257,295,0,287,266],
[268,274,288,279,262,269,263,0,273],
[263,252,289,272,268,281,284,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,275,275,277,267,288,291,283],
[287,0,280,290,270,292,286,285,289],
[275,270,0,255,258,264,268,261,280],
[275,260,295,0,275,285,271,293,273],
[273,280,292,275,0,295,295,297,283],
[283,258,286,265,255,0,283,280,273],
[262,264,282,279,255,267,0,279,271],
[259,265,289,257,253,270,271,0,281],
[267,261,270,277,267,277,279,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,256,249,316,255,260,301,270],
[290,0,305,250,257,254,271,245,291],
[294,245,0,278,258,207,226,234,287],
[301,300,272,0,269,258,244,268,290],
[234,293,292,281,0,270,297,292,298],
[295,296,343,292,280,0,320,273,346],
[290,279,324,306,253,230,0,289,249],
[249,305,316,282,258,277,261,0,311],
[280,259,263,260,252,204,301,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,277,246,278,260,199,275,278],
[353,0,271,291,273,260,210,272,291],
[273,279,0,261,243,241,260,289,260],
[304,259,289,0,274,275,294,256,240],
[272,277,307,276,0,244,229,288,276],
[290,290,309,275,306,0,262,321,306],
[351,340,290,256,321,288,0,303,320],
[275,278,261,294,262,229,247,0,262],
[272,259,290,310,274,244,230,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,293,296,286,281,290,281,257],
[254,0,278,279,280,263,267,281,277],
[257,272,0,280,267,253,258,275,249],
[254,271,270,0,270,263,265,262,260],
[264,270,283,280,0,253,276,278,265],
[269,287,297,287,297,0,279,277,280],
[260,283,292,285,274,271,0,272,281],
[269,269,275,288,272,273,278,0,267],
[293,273,301,290,285,270,269,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,307,252,266,273,285,317,282],
[282,0,277,256,305,280,286,281,276],
[243,273,0,244,270,247,271,284,267],
[298,294,306,0,296,282,290,310,268],
[284,245,280,254,0,260,273,274,238],
[277,270,303,268,290,0,288,286,274],
[265,264,279,260,277,262,0,277,263],
[233,269,266,240,276,264,273,0,273],
[268,274,283,282,312,276,287,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,261,279,279,270,264,281,278],
[261,0,283,287,286,277,270,267,265],
[289,267,0,288,291,292,286,277,283],
[271,263,262,0,266,268,269,279,274],
[271,264,259,284,0,270,247,278,259],
[280,273,258,282,280,0,274,285,270],
[286,280,264,281,303,276,0,286,256],
[269,283,273,271,272,265,264,0,275],
[272,285,267,276,291,280,294,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,291,276,296,281,259,261,285],
[288,0,274,277,313,299,275,291,297],
[259,276,0,270,303,274,260,257,269],
[274,273,280,0,291,272,259,255,281],
[254,237,247,259,0,275,227,242,263],
[269,251,276,278,275,0,254,261,268],
[291,275,290,291,323,296,0,284,275],
[289,259,293,295,308,289,266,0,278],
[265,253,281,269,287,282,275,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,262,241,251,303,275,293,285],
[263,0,279,259,260,292,276,281,264],
[288,271,0,270,294,294,305,299,293],
[309,291,280,0,294,324,292,294,269],
[299,290,256,256,0,309,302,287,308],
[247,258,256,226,241,0,264,282,265],
[275,274,245,258,248,286,0,301,283],
[257,269,251,256,263,268,249,0,291],
[265,286,257,281,242,285,267,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,277,265,264,279,279,285,255],
[274,0,288,275,275,267,292,277,274],
[273,262,0,277,269,281,276,294,263],
[285,275,273,0,251,275,283,290,265],
[286,275,281,299,0,283,287,284,275],
[271,283,269,275,267,0,288,297,274],
[271,258,274,267,263,262,0,274,279],
[265,273,256,260,266,253,276,0,267],
[295,276,287,285,275,276,271,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,272,281,282,283,280,279,288],
[285,0,293,293,282,259,287,265,286],
[278,257,0,272,274,261,266,266,271],
[269,257,278,0,265,256,273,258,279],
[268,268,276,285,0,261,270,280,278],
[267,291,289,294,289,0,283,283,278],
[270,263,284,277,280,267,0,288,289],
[271,285,284,292,270,267,262,0,281],
[262,264,279,271,272,272,261,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,271,277,273,276,287,290,301],
[286,0,281,287,288,283,295,273,295],
[279,269,0,293,289,285,278,283,293],
[273,263,257,0,279,266,269,288,278],
[277,262,261,271,0,285,266,266,287],
[274,267,265,284,265,0,266,251,283],
[263,255,272,281,284,284,0,262,271],
[260,277,267,262,284,299,288,0,292],
[249,255,257,272,263,267,279,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,273,256,275,246,245,272,282],
[260,0,256,271,268,257,254,280,261],
[277,294,0,284,294,272,267,279,298],
[294,279,266,0,291,268,278,296,276],
[275,282,256,259,0,279,254,272,276],
[304,293,278,282,271,0,263,289,284],
[305,296,283,272,296,287,0,264,311],
[278,270,271,254,278,261,286,0,286],
[268,289,252,274,274,266,239,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,307,306,333,310,304,264,296],
[268,0,284,277,301,295,263,276,283],
[243,266,0,254,289,297,277,251,275],
[244,273,296,0,305,297,292,258,290],
[217,249,261,245,0,262,257,253,242],
[240,255,253,253,288,0,264,251,253],
[246,287,273,258,293,286,0,253,274],
[286,274,299,292,297,299,297,0,280],
[254,267,275,260,308,297,276,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,263,282,254,258,271,271,268],
[280,0,278,269,273,274,282,282,295],
[287,272,0,268,276,279,287,285,285],
[268,281,282,0,273,284,274,279,287],
[296,277,274,277,0,269,281,296,277],
[292,276,271,266,281,0,266,282,249],
[279,268,263,276,269,284,0,281,275],
[279,268,265,271,254,268,269,0,262],
[282,255,265,263,273,301,275,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,313,275,302,280,297,281,300],
[272,0,286,280,292,277,289,285,284],
[237,264,0,258,286,277,273,269,273],
[275,270,292,0,304,297,279,284,269],
[248,258,264,246,0,265,266,270,264],
[270,273,273,253,285,0,259,274,253],
[253,261,277,271,284,291,0,265,264],
[269,265,281,266,280,276,285,0,257],
[250,266,277,281,286,297,286,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,272,273,283,278,284,267,286],
[277,0,286,282,289,282,273,283,287],
[278,264,0,265,288,276,286,262,264],
[277,268,285,0,301,278,264,277,271],
[267,261,262,249,0,267,265,262,261],
[272,268,274,272,283,0,265,272,271],
[266,277,264,286,285,285,0,268,282],
[283,267,288,273,288,278,282,0,284],
[264,263,286,279,289,279,268,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,274,317,294,303,273,291,305],
[263,0,267,295,281,281,276,284,275],
[276,283,0,295,267,283,283,289,280],
[233,255,255,0,259,263,252,262,248],
[256,269,283,291,0,284,291,273,280],
[247,269,267,287,266,0,248,267,256],
[277,274,267,298,259,302,0,275,275],
[259,266,261,288,277,283,275,0,261],
[245,275,270,302,270,294,275,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,283,271,292,280,287,284,271],
[258,0,287,293,294,275,286,278,279],
[267,263,0,262,279,269,253,254,260],
[279,257,288,0,287,279,269,259,271],
[258,256,271,263,0,252,265,269,261],
[270,275,281,271,298,0,262,251,264],
[263,264,297,281,285,288,0,262,281],
[266,272,296,291,281,299,288,0,278],
[279,271,290,279,289,286,269,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,266,280,312,267,265,295,281],
[270,0,241,258,302,265,242,263,264],
[284,309,0,312,320,307,287,295,264],
[270,292,238,0,280,248,241,265,264],
[238,248,230,270,0,236,238,248,227],
[283,285,243,302,314,0,250,301,270],
[285,308,263,309,312,300,0,307,287],
[255,287,255,285,302,249,243,0,263],
[269,286,286,286,323,280,263,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,268,262,271,274,289,274,283],
[261,0,265,241,254,267,281,247,273],
[282,285,0,263,267,259,267,265,288],
[288,309,287,0,275,279,297,294,305],
[279,296,283,275,0,280,293,279,303],
[276,283,291,271,270,0,297,271,288],
[261,269,283,253,257,253,0,246,267],
[276,303,285,256,271,279,304,0,307],
[267,277,262,245,247,262,283,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,269,267,305,269,287,308,264],
[248,0,264,233,279,267,253,262,273],
[281,286,0,256,299,273,281,280,287],
[283,317,294,0,284,283,293,280,253],
[245,271,251,266,0,275,272,259,258],
[281,283,277,267,275,0,275,282,283],
[263,297,269,257,278,275,0,295,299],
[242,288,270,270,291,268,255,0,265],
[286,277,263,297,292,267,251,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,280,304,274,280,270,310,268],
[265,0,276,294,279,261,266,302,287],
[270,274,0,288,302,284,287,319,275],
[246,256,262,0,252,258,252,288,249],
[276,271,248,298,0,269,252,300,266],
[270,289,266,292,281,0,273,286,270],
[280,284,263,298,298,277,0,295,285],
[240,248,231,262,250,264,255,0,245],
[282,263,275,301,284,280,265,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,278,297,315,294,275,273,276],
[257,0,280,299,302,286,274,254,297],
[272,270,0,301,302,273,258,271,274],
[253,251,249,0,260,257,250,258,273],
[235,248,248,290,0,278,256,268,243],
[256,264,277,293,272,0,272,280,287],
[275,276,292,300,294,278,0,280,286],
[277,296,279,292,282,270,270,0,282],
[274,253,276,277,307,263,264,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,285,262,278,287,279,293,295],
[272,0,252,258,289,294,266,255,266],
[265,298,0,276,269,285,262,267,260],
[288,292,274,0,283,265,301,284,275],
[272,261,281,267,0,279,275,308,285],
[263,256,265,285,271,0,275,293,276],
[271,284,288,249,275,275,0,302,273],
[257,295,283,266,242,257,248,0,279],
[255,284,290,275,265,274,277,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,271,296,284,315,282,287,277],
[233,0,253,261,263,271,269,247,245],
[279,297,0,291,272,273,286,267,260],
[254,289,259,0,253,288,253,250,260],
[266,287,278,297,0,293,278,290,266],
[235,279,277,262,257,0,258,234,240],
[268,281,264,297,272,292,0,260,268],
[263,303,283,300,260,316,290,0,268],
[273,305,290,290,284,310,282,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,272,340,280,290,304,276,270],
[250,0,255,297,251,233,269,268,291],
[278,295,0,327,317,299,302,269,307],
[210,253,223,0,247,227,227,256,224],
[270,299,233,303,0,273,258,276,249],
[260,317,251,323,277,0,280,254,240],
[246,281,248,323,292,270,0,263,254],
[274,282,281,294,274,296,287,0,299],
[280,259,243,326,301,310,296,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,269,281,296,263,273,271,276],
[279,0,294,295,292,286,273,272,292],
[281,256,0,268,277,257,277,267,272],
[269,255,282,0,282,263,251,267,271],
[254,258,273,268,0,265,260,255,261],
[287,264,293,287,285,0,273,280,278],
[277,277,273,299,290,277,0,277,279],
[279,278,283,283,295,270,273,0,281],
[274,258,278,279,289,272,271,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,259,272,265,252,277,281,264],
[272,0,280,270,278,249,275,266,271],
[291,270,0,270,291,276,287,291,278],
[278,280,280,0,293,265,279,278,278],
[285,272,259,257,0,242,268,273,262],
[298,301,274,285,308,0,304,290,284],
[273,275,263,271,282,246,0,272,279],
[269,284,259,272,277,260,278,0,272],
[286,279,272,272,288,266,271,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,277,282,270,253,258,268,271],
[299,0,309,300,279,270,292,284,282],
[273,241,0,280,268,299,270,282,254],
[268,250,270,0,276,257,266,277,283],
[280,271,282,274,0,273,272,271,268],
[297,280,251,293,277,0,291,308,287],
[292,258,280,284,278,259,0,282,277],
[282,266,268,273,279,242,268,0,279],
[279,268,296,267,282,263,273,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,250,245,196,291,215,189,163],
[264,0,180,232,236,274,247,177,221],
[300,370,0,272,205,243,256,206,245],
[305,318,278,0,225,330,246,235,277],
[354,314,345,325,0,345,298,284,259],
[259,276,307,220,205,0,235,259,191],
[335,303,294,304,252,315,0,262,276],
[361,373,344,315,266,291,288,0,276],
[387,329,305,273,291,359,274,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,236,241,233,252,266,304,240],
[281,0,227,248,203,263,267,265,205],
[314,323,0,228,259,282,281,285,246],
[309,302,322,0,230,289,233,246,244],
[317,347,291,320,0,272,252,294,296],
[298,287,268,261,278,0,255,310,219],
[284,283,269,317,298,295,0,295,252],
[246,285,265,304,256,240,255,0,228],
[310,345,304,306,254,331,298,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,261,268,264,268,273,270,263],
[278,0,260,265,272,266,274,254,262],
[289,290,0,281,264,275,300,261,279],
[282,285,269,0,279,294,281,257,267],
[286,278,286,271,0,265,283,277,270],
[282,284,275,256,285,0,273,268,270],
[277,276,250,269,267,277,0,254,247],
[280,296,289,293,273,282,296,0,281],
[287,288,271,283,280,280,303,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,285,279,263,261,265,285,289],
[307,0,280,260,270,267,290,265,284],
[265,270,0,291,296,303,254,298,299],
[271,290,259,0,267,260,270,286,285],
[287,280,254,283,0,246,276,291,284],
[289,283,247,290,304,0,272,272,312],
[285,260,296,280,274,278,0,281,288],
[265,285,252,264,259,278,269,0,262],
[261,266,251,265,266,238,262,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,269,285,270,237,263,278,262],
[252,0,257,240,254,248,256,256,235],
[281,293,0,298,291,242,279,282,276],
[265,310,252,0,279,242,267,269,258],
[280,296,259,271,0,263,271,281,273],
[313,302,308,308,287,0,282,268,294],
[287,294,271,283,279,268,0,260,260],
[272,294,268,281,269,282,290,0,258],
[288,315,274,292,277,256,290,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,283,271,248,280,303,270,265],
[294,0,291,284,272,274,306,299,305],
[267,259,0,289,267,286,288,273,291],
[279,266,261,0,279,278,274,292,287],
[302,278,283,271,0,280,287,292,277],
[270,276,264,272,270,0,295,291,266],
[247,244,262,276,263,255,0,260,269],
[280,251,277,258,258,259,290,0,261],
[285,245,259,263,273,284,281,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,247,268,258,259,270,255,234],
[310,0,293,288,295,292,304,279,275],
[303,257,0,270,279,275,278,270,260],
[282,262,280,0,279,286,286,284,279],
[292,255,271,271,0,271,288,266,260],
[291,258,275,264,279,0,285,255,256],
[280,246,272,264,262,265,0,263,249],
[295,271,280,266,284,295,287,0,267],
[316,275,290,271,290,294,301,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,304,285,276,298,252,276,287],
[261,0,286,239,251,289,230,278,297],
[246,264,0,226,295,258,234,252,279],
[265,311,324,0,299,297,280,294,259],
[274,299,255,251,0,301,248,299,272],
[252,261,292,253,249,0,224,263,298],
[298,320,316,270,302,326,0,328,292],
[274,272,298,256,251,287,222,0,236],
[263,253,271,291,278,252,258,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,291,221,308,200,240,299,259],
[275,0,238,268,313,223,243,234,283],
[259,312,0,346,328,214,312,289,320],
[329,282,204,0,266,297,227,277,308],
[242,237,222,284,0,207,250,255,269],
[350,327,336,253,343,0,283,271,291],
[310,307,238,323,300,267,0,268,337],
[251,316,261,273,295,279,282,0,304],
[291,267,230,242,281,259,213,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,297,287,344,302,291,295,265],
[282,0,318,282,355,264,310,293,281],
[253,232,0,268,294,259,258,284,269],
[263,268,282,0,333,257,267,317,294],
[206,195,256,217,0,242,239,239,219],
[248,286,291,293,308,0,276,261,291],
[259,240,292,283,311,274,0,262,246],
[255,257,266,233,311,289,288,0,260],
[285,269,281,256,331,259,304,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,267,267,266,289,259,283,261],
[266,0,272,268,274,265,264,272,251],
[283,278,0,274,276,286,269,283,276],
[283,282,276,0,276,289,276,287,265],
[284,276,274,274,0,279,276,269,266],
[261,285,264,261,271,0,257,298,271],
[291,286,281,274,274,293,0,275,265],
[267,278,267,263,281,252,275,0,268],
[289,299,274,285,284,279,285,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,331,294,368,331,220,221,369,332],
[219,0,255,331,257,220,184,297,256],
[256,295,0,257,147,146,295,259,220],
[182,219,293,0,220,256,257,330,256],
[219,293,403,330,0,328,332,368,329],
[330,330,404,294,222,0,295,296,404],
[329,366,255,293,218,255,0,295,218],
[181,253,291,220,182,254,255,0,217],
[218,294,330,294,221,146,332,333,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,309,262,287,283,278,250,265],
[247,0,271,247,263,267,278,265,244],
[241,279,0,247,233,263,269,229,266],
[288,303,303,0,265,284,287,263,283],
[263,287,317,285,0,282,295,254,289],
[267,283,287,266,268,0,277,276,273],
[272,272,281,263,255,273,0,268,281],
[300,285,321,287,296,274,282,0,263],
[285,306,284,267,261,277,269,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,305,270,289,268,277,287,289],
[257,0,276,276,275,249,253,260,278],
[245,274,0,260,277,235,260,287,269],
[280,274,290,0,283,277,279,284,285],
[261,275,273,267,0,267,267,281,294],
[282,301,315,273,283,0,280,289,296],
[273,297,290,271,283,270,0,274,259],
[263,290,263,266,269,261,276,0,269],
[261,272,281,265,256,254,291,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,330,298,266,296,322,298,310],
[240,0,267,237,253,255,272,263,277],
[220,283,0,264,273,262,292,265,277],
[252,313,286,0,257,259,280,300,286],
[284,297,277,293,0,304,297,253,292],
[254,295,288,291,246,0,284,307,284],
[228,278,258,270,253,266,0,253,267],
[252,287,285,250,297,243,297,0,279],
[240,273,273,264,258,266,283,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,281,264,303,269,285,256,237],
[247,0,250,257,265,250,264,230,261],
[269,300,0,256,293,282,276,268,256],
[286,293,294,0,299,285,309,274,264],
[247,285,257,251,0,246,266,274,255],
[281,300,268,265,304,0,281,285,248],
[265,286,274,241,284,269,0,260,259],
[294,320,282,276,276,265,290,0,282],
[313,289,294,286,295,302,291,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,278,263,269,287,258,252,249],
[279,0,285,256,260,268,268,271,263],
[272,265,0,239,244,253,255,240,270],
[287,294,311,0,259,303,297,275,283],
[281,290,306,291,0,291,272,278,291],
[263,282,297,247,259,0,260,259,261],
[292,282,295,253,278,290,0,270,270],
[298,279,310,275,272,291,280,0,262],
[301,287,280,267,259,289,280,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,275,288,275,268,274,252,261],
[277,0,269,283,273,277,277,257,258],
[275,281,0,284,267,274,272,281,261],
[262,267,266,0,262,269,262,261,251],
[275,277,283,288,0,260,280,270,266],
[282,273,276,281,290,0,284,271,274],
[276,273,278,288,270,266,0,265,253],
[298,293,269,289,280,279,285,0,280],
[289,292,289,299,284,276,297,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,332,234,222,337,279,289,320],
[290,0,289,274,292,325,345,291,332],
[218,261,0,258,166,327,235,246,330],
[316,276,292,0,255,327,269,293,282],
[328,258,384,295,0,351,326,300,318],
[213,225,223,223,199,0,241,226,231],
[271,205,315,281,224,309,0,225,292],
[261,259,304,257,250,324,325,0,303],
[230,218,220,268,232,319,258,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,295,223,256,277,262,284,240],
[312,0,314,269,323,316,351,326,299],
[255,236,0,239,290,296,273,280,280],
[327,281,311,0,324,354,265,311,268],
[294,227,260,226,0,301,279,299,244],
[273,234,254,196,249,0,269,272,242],
[288,199,277,285,271,281,0,258,256],
[266,224,270,239,251,278,292,0,258],
[310,251,270,282,306,308,294,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,278,283,291,272,295,302,295],
[252,0,258,279,253,261,231,262,269],
[272,292,0,284,261,271,261,277,296],
[267,271,266,0,271,259,241,273,272],
[259,297,289,279,0,289,275,295,299],
[278,289,279,291,261,0,257,267,279],
[255,319,289,309,275,293,0,275,284],
[248,288,273,277,255,283,275,0,274],
[255,281,254,278,251,271,266,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,293,301,252,276,259,312,298],
[255,0,262,291,251,267,267,291,300],
[257,288,0,272,276,272,259,281,266],
[249,259,278,0,272,262,251,296,285],
[298,299,274,278,0,308,281,283,308],
[274,283,278,288,242,0,287,304,292],
[291,283,291,299,269,263,0,285,285],
[238,259,269,254,267,246,265,0,283],
[252,250,284,265,242,258,265,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,264,298,277,290,273,271,289],
[322,0,305,301,282,338,275,300,316],
[286,245,0,263,286,292,274,278,293],
[252,249,287,0,268,296,271,265,289],
[273,268,264,282,0,281,268,270,278],
[260,212,258,254,269,0,192,254,270],
[277,275,276,279,282,358,0,289,339],
[279,250,272,285,280,296,261,0,286],
[261,234,257,261,272,280,211,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,275,262,271,257,274,244,251],
[299,0,285,277,280,271,281,261,283],
[275,265,0,264,291,278,297,270,285],
[288,273,286,0,279,281,295,291,288],
[279,270,259,271,0,277,284,253,268],
[293,279,272,269,273,0,289,258,281],
[276,269,253,255,266,261,0,261,268],
[306,289,280,259,297,292,289,0,280],
[299,267,265,262,282,269,282,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,249,269,240,256,251,235,238],
[268,0,267,265,268,279,271,258,237],
[301,283,0,267,274,267,277,276,275],
[281,285,283,0,265,264,291,257,262],
[310,282,276,285,0,294,284,270,290],
[294,271,283,286,256,0,273,258,268],
[299,279,273,259,266,277,0,272,270],
[315,292,274,293,280,292,278,0,289],
[312,313,275,288,260,282,280,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,299,279,272,270,275,267,302],
[269,0,269,278,253,272,263,263,273],
[251,281,0,272,266,278,255,258,287],
[271,272,278,0,257,268,263,272,272],
[278,297,284,293,0,281,274,270,299],
[280,278,272,282,269,0,275,280,286],
[275,287,295,287,276,275,0,284,290],
[283,287,292,278,280,270,266,0,289],
[248,277,263,278,251,264,260,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,279,253,283,260,251,282,255],
[306,0,325,276,293,305,275,302,267],
[271,225,0,281,305,262,286,294,279],
[297,274,269,0,276,256,267,286,260],
[267,257,245,274,0,282,276,290,253],
[290,245,288,294,268,0,272,302,271],
[299,275,264,283,274,278,0,294,275],
[268,248,256,264,260,248,256,0,261],
[295,283,271,290,297,279,275,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,328,333,273,314,371,303,278],
[231,0,256,267,261,225,265,252,207],
[222,294,0,337,283,288,335,288,292],
[217,283,213,0,230,270,303,272,261],
[277,289,267,320,0,270,330,267,264],
[236,325,262,280,280,0,298,260,283],
[179,285,215,247,220,252,0,228,270],
[247,298,262,278,283,290,322,0,291],
[272,343,258,289,286,267,280,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,278,295,255,272,262,277,284],
[279,0,290,291,289,284,286,271,302],
[272,260,0,286,279,276,262,273,273],
[255,259,264,0,255,269,264,262,280],
[295,261,271,295,0,275,272,263,274],
[278,266,274,281,275,0,270,273,289],
[288,264,288,286,278,280,0,270,283],
[273,279,277,288,287,277,280,0,284],
[266,248,277,270,276,261,267,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,267,265,284,294,285,315,290],
[280,0,287,255,261,268,276,321,272],
[283,263,0,276,263,251,289,308,251],
[285,295,274,0,282,248,267,306,250],
[266,289,287,268,0,288,285,325,278],
[256,282,299,302,262,0,296,324,288],
[265,274,261,283,265,254,0,330,259],
[235,229,242,244,225,226,220,0,256],
[260,278,299,300,272,262,291,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,292,271,268,278,275,287,259],
[285,0,288,265,285,291,271,277,277],
[258,262,0,258,267,286,276,274,274],
[279,285,292,0,260,274,279,274,267],
[282,265,283,290,0,270,265,267,269],
[272,259,264,276,280,0,273,279,273],
[275,279,274,271,285,277,0,294,253],
[263,273,276,276,283,271,256,0,266],
[291,273,276,283,281,277,297,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,310,258,314,307,263,317,320],
[242,0,272,262,279,282,286,277,257],
[240,278,0,263,261,283,271,267,283],
[292,288,287,0,271,299,276,298,265],
[236,271,289,279,0,342,281,314,272],
[243,268,267,251,208,0,250,251,246],
[287,264,279,274,269,300,0,309,287],
[233,273,283,252,236,299,241,0,294],
[230,293,267,285,278,304,263,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,297,265,278,280,259,281,284],
[271,0,271,288,273,292,262,269,315],
[253,279,0,262,252,270,258,256,281],
[285,262,288,0,248,258,252,267,288],
[272,277,298,302,0,301,279,274,303],
[270,258,280,292,249,0,241,245,271],
[291,288,292,298,271,309,0,273,314],
[269,281,294,283,276,305,277,0,291],
[266,235,269,262,247,279,236,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,242,254,226,274,258,259,209],
[234,0,230,202,248,239,250,215,231],
[308,320,0,264,267,280,287,267,268],
[296,348,286,0,302,265,303,286,289],
[324,302,283,248,0,269,247,285,276],
[276,311,270,285,281,0,266,265,267],
[292,300,263,247,303,284,0,256,242],
[291,335,283,264,265,285,294,0,264],
[341,319,282,261,274,283,308,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,252,295,209,265,285,313,338],
[228,0,242,229,251,244,262,237,291],
[298,308,0,295,281,256,274,268,318],
[255,321,255,0,223,276,305,301,302],
[341,299,269,327,0,299,320,274,322],
[285,306,294,274,251,0,287,320,323],
[265,288,276,245,230,263,0,249,328],
[237,313,282,249,276,230,301,0,313],
[212,259,232,248,228,227,222,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,234,247,266,214,244,268,251],
[327,0,282,272,267,254,282,278,262],
[316,268,0,264,283,263,286,289,295],
[303,278,286,0,301,275,317,290,270],
[284,283,267,249,0,273,273,238,270],
[336,296,287,275,277,0,272,287,281],
[306,268,264,233,277,278,0,246,242],
[282,272,261,260,312,263,304,0,263],
[299,288,255,280,280,269,308,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,294,267,294,266,286,292,291],
[253,0,273,283,246,249,284,242,256],
[256,277,0,277,277,251,305,256,293],
[283,267,273,0,253,274,267,245,269],
[256,304,273,297,0,281,272,291,261],
[284,301,299,276,269,0,308,290,307],
[264,266,245,283,278,242,0,268,283],
[258,308,294,305,259,260,282,0,289],
[259,294,257,281,289,243,267,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,295,297,287,275,287,284,294],
[258,0,288,274,262,248,270,285,290],
[255,262,0,255,253,260,279,272,295],
[253,276,295,0,272,284,284,279,280],
[263,288,297,278,0,279,303,294,304],
[275,302,290,266,271,0,299,279,310],
[263,280,271,266,247,251,0,256,290],
[266,265,278,271,256,271,294,0,285],
[256,260,255,270,246,240,260,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,266,238,271,277,266,265,264],
[298,0,264,257,255,247,265,275,251],
[284,286,0,255,292,251,283,265,276],
[312,293,295,0,289,270,290,287,284],
[279,295,258,261,0,246,283,269,270],
[273,303,299,280,304,0,291,266,262],
[284,285,267,260,267,259,0,286,262],
[285,275,285,263,281,284,264,0,283],
[286,299,274,266,280,288,288,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,278,275,270,279,285,281,291],
[261,0,282,257,267,299,278,262,264],
[272,268,0,261,252,256,261,263,276],
[275,293,289,0,283,299,284,279,283],
[280,283,298,267,0,287,276,280,290],
[271,251,294,251,263,0,262,263,285],
[265,272,289,266,274,288,0,267,278],
[269,288,287,271,270,287,283,0,291],
[259,286,274,267,260,265,272,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,269,253,263,250,272,270,280],
[254,0,260,271,267,248,265,271,255],
[281,290,0,275,249,256,293,281,260],
[297,279,275,0,281,265,274,296,257],
[287,283,301,269,0,290,285,271,259],
[300,302,294,285,260,0,292,301,280],
[278,285,257,276,265,258,0,269,275],
[280,279,269,254,279,249,281,0,267],
[270,295,290,293,291,270,275,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,296,278,271,291,277,290,274],
[252,0,277,271,274,267,271,276,255],
[254,273,0,274,266,281,263,265,252],
[272,279,276,0,278,283,275,269,277],
[279,276,284,272,0,271,271,273,261],
[259,283,269,267,279,0,276,275,274],
[273,279,287,275,279,274,0,264,270],
[260,274,285,281,277,275,286,0,260],
[276,295,298,273,289,276,280,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,287,292,278,287,278,265,267],
[281,0,293,282,276,273,285,266,257],
[263,257,0,257,282,257,276,247,258],
[258,268,293,0,278,270,264,277,265],
[272,274,268,272,0,270,283,256,271],
[263,277,293,280,280,0,281,263,274],
[272,265,274,286,267,269,0,250,261],
[285,284,303,273,294,287,300,0,297],
[283,293,292,285,279,276,289,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,266,281,229,254,286,275,268],
[281,0,252,279,248,262,267,256,259],
[284,298,0,268,268,297,288,290,286],
[269,271,282,0,265,299,286,286,262],
[321,302,282,285,0,274,276,278,279],
[296,288,253,251,276,0,284,265,275],
[264,283,262,264,274,266,0,284,269],
[275,294,260,264,272,285,266,0,265],
[282,291,264,288,271,275,281,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,275,259,261,273,280,258,268],
[297,0,283,279,270,283,297,285,290],
[275,267,0,265,269,277,303,277,262],
[291,271,285,0,279,278,285,281,281],
[289,280,281,271,0,283,303,286,288],
[277,267,273,272,267,0,294,296,285],
[270,253,247,265,247,256,0,265,252],
[292,265,273,269,264,254,285,0,274],
[282,260,288,269,262,265,298,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,235,295,258,245,292,278,258],
[323,0,271,308,255,277,220,260,239],
[315,279,0,312,276,226,258,208,204],
[255,242,238,0,188,208,222,208,237],
[292,295,274,362,0,245,296,261,274],
[305,273,324,342,305,0,291,289,288],
[258,330,292,328,254,259,0,229,292],
[272,290,342,342,289,261,321,0,338],
[292,311,346,313,276,262,258,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,291,277,292,291,293,267,277],
[276,0,283,277,290,284,291,275,291],
[259,267,0,274,271,271,267,273,276],
[273,273,276,0,288,285,287,272,282],
[258,260,279,262,0,277,288,259,284],
[259,266,279,265,273,0,284,249,275],
[257,259,283,263,262,266,0,258,275],
[283,275,277,278,291,301,292,0,283],
[273,259,274,268,266,275,275,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,289,297,322,288,298,271,275],
[253,0,296,298,315,306,278,264,284],
[261,254,0,285,267,232,229,251,267],
[253,252,265,0,276,285,273,248,267],
[228,235,283,274,0,297,253,259,269],
[262,244,318,265,253,0,274,262,265],
[252,272,321,277,297,276,0,259,282],
[279,286,299,302,291,288,291,0,269],
[275,266,283,283,281,285,268,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,270,271,275,252,246,254,291],
[261,0,257,276,276,262,267,268,280],
[280,293,0,273,290,282,283,274,290],
[279,274,277,0,266,257,251,280,304],
[275,274,260,284,0,239,257,264,276],
[298,288,268,293,311,0,297,285,298],
[304,283,267,299,293,253,0,261,288],
[296,282,276,270,286,265,289,0,282],
[259,270,260,246,274,252,262,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,295,291,285,294,303,316,322],
[277,0,265,312,224,291,278,301,305],
[255,285,0,269,263,276,286,306,302],
[259,238,281,0,229,258,283,291,265],
[265,326,287,321,0,296,288,347,310],
[256,259,274,292,254,0,296,293,278],
[247,272,264,267,262,254,0,289,288],
[234,249,244,259,203,257,261,0,273],
[228,245,248,285,240,272,262,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,261,290,241,237,244,259,274],
[306,0,298,312,243,270,277,291,271],
[289,252,0,298,274,283,270,285,302],
[260,238,252,0,234,247,226,250,259],
[309,307,276,316,0,282,263,290,292],
[313,280,267,303,268,0,252,269,284],
[306,273,280,324,287,298,0,272,309],
[291,259,265,300,260,281,278,0,279],
[276,279,248,291,258,266,241,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,284,295,263,271,268,296,288],
[275,0,261,277,267,277,267,288,266],
[266,289,0,294,270,274,275,295,274],
[255,273,256,0,272,265,273,282,272],
[287,283,280,278,0,280,266,272,275],
[279,273,276,285,270,0,271,298,286],
[282,283,275,277,284,279,0,292,277],
[254,262,255,268,278,252,258,0,260],
[262,284,276,278,275,264,273,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,253,281,268,255,276,258,268],
[286,0,240,298,273,241,270,271,279],
[297,310,0,299,278,275,277,315,300],
[269,252,251,0,268,242,261,287,286],
[282,277,272,282,0,261,281,255,285],
[295,309,275,308,289,0,277,300,313],
[274,280,273,289,269,273,0,308,268],
[292,279,235,263,295,250,242,0,268],
[282,271,250,264,265,237,282,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,305,283,238,279,256,286,249],
[291,0,296,279,271,281,278,301,298],
[245,254,0,266,230,244,223,267,264],
[267,271,284,0,253,271,251,303,281],
[312,279,320,297,0,256,246,295,244],
[271,269,306,279,294,0,247,293,266],
[294,272,327,299,304,303,0,275,292],
[264,249,283,247,255,257,275,0,260],
[301,252,286,269,306,284,258,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,280,289,259,269,263,282,278],
[298,0,292,307,270,294,285,290,294],
[270,258,0,296,260,268,268,293,262],
[261,243,254,0,245,254,270,264,271],
[291,280,290,305,0,261,278,294,291],
[281,256,282,296,289,0,274,285,280],
[287,265,282,280,272,276,0,286,276],
[268,260,257,286,256,265,264,0,282],
[272,256,288,279,259,270,274,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,278,307,264,328,303,307,286],
[237,0,238,282,265,276,273,245,265],
[272,312,0,276,265,320,290,276,291],
[243,268,274,0,252,281,292,250,276],
[286,285,285,298,0,327,288,264,279],
[222,274,230,269,223,0,287,258,251],
[247,277,260,258,262,263,0,268,243],
[243,305,274,300,286,292,282,0,300],
[264,285,259,274,271,299,307,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,268,269,267,260,275,273,273],
[276,0,269,269,269,277,285,275,279],
[282,281,0,276,287,272,290,291,262],
[281,281,274,0,276,270,292,265,266],
[283,281,263,274,0,293,291,281,266],
[290,273,278,280,257,0,283,273,278],
[275,265,260,258,259,267,0,275,267],
[277,275,259,285,269,277,275,0,292],
[277,271,288,284,284,272,283,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,321,289,275,252,255,259,252],
[262,0,291,306,265,275,291,243,298],
[229,259,0,307,244,280,287,212,239],
[261,244,243,0,233,219,248,242,216],
[275,285,306,317,0,240,285,277,277],
[298,275,270,331,310,0,313,243,283],
[295,259,263,302,265,237,0,241,278],
[291,307,338,308,273,307,309,0,290],
[298,252,311,334,273,267,272,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,272,285,298,302,286,291,279],
[278,0,282,277,293,281,278,278,274],
[278,268,0,284,279,290,305,282,263],
[265,273,266,0,276,273,261,263,264],
[252,257,271,274,0,284,271,257,247],
[248,269,260,277,266,0,272,258,254],
[264,272,245,289,279,278,0,263,272],
[259,272,268,287,293,292,287,0,261],
[271,276,287,286,303,296,278,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,294,299,272,334,321,286,279],
[239,0,263,269,268,275,283,282,264],
[256,287,0,272,269,276,285,257,271],
[251,281,278,0,264,269,286,248,286],
[278,282,281,286,0,300,306,274,273],
[216,275,274,281,250,0,299,258,264],
[229,267,265,264,244,251,0,254,231],
[264,268,293,302,276,292,296,0,297],
[271,286,279,264,277,286,319,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,254,263,273,268,287,281,293],
[269,0,254,252,267,251,266,264,271],
[296,296,0,274,280,283,317,287,284],
[287,298,276,0,264,285,295,271,279],
[277,283,270,286,0,275,297,259,287],
[282,299,267,265,275,0,292,285,284],
[263,284,233,255,253,258,0,259,255],
[269,286,263,279,291,265,291,0,278],
[257,279,266,271,263,266,295,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,301,281,267,285,299,273,289],
[276,0,286,299,276,277,287,268,263],
[249,264,0,285,275,278,286,266,265],
[269,251,265,0,253,264,273,280,270],
[283,274,275,297,0,287,290,280,268],
[265,273,272,286,263,0,279,271,277],
[251,263,264,277,260,271,0,251,268],
[277,282,284,270,270,279,299,0,283],
[261,287,285,280,282,273,282,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,550,550,366,550,550,367,367,183],
[0,0,183,0,0,184,184,0,183],
[0,367,0,183,367,367,367,367,183],
[184,550,367,0,184,367,184,184,367],
[0,550,183,366,0,550,184,183,183],
[0,366,183,183,0,0,0,0,183],
[183,366,183,366,366,550,0,183,183],
[183,550,183,366,367,550,367,0,183],
[367,367,367,183,367,367,367,367,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,268,271,281,264,283,296,272],
[285,0,259,317,268,265,264,305,301],
[282,291,0,296,245,249,290,324,264],
[279,233,254,0,256,256,246,316,273],
[269,282,305,294,0,286,301,312,300],
[286,285,301,294,264,0,264,303,280],
[267,286,260,304,249,286,0,322,274],
[254,245,226,234,238,247,228,0,234],
[278,249,286,277,250,270,276,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,239,238,204,340,272,343,239],
[346,0,207,238,240,236,342,274,346],
[311,343,0,341,203,238,342,309,274],
[312,312,209,0,344,310,313,276,347],
[346,310,347,206,0,309,277,379,309],
[210,314,312,240,241,0,313,344,312],
[278,208,208,237,273,237,0,308,242],
[207,276,241,274,171,206,242,0,274],
[311,204,276,203,241,238,308,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,275,292,296,284,268,320,288],
[265,0,257,278,290,322,265,307,275],
[275,293,0,292,316,310,280,295,313],
[258,272,258,0,292,314,271,298,251],
[254,260,234,258,0,270,257,284,236],
[266,228,240,236,280,0,217,276,255],
[282,285,270,279,293,333,0,287,294],
[230,243,255,252,266,274,263,0,257],
[262,275,237,299,314,295,256,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,255,300,275,248,274,272,256],
[304,0,272,314,293,291,304,274,280],
[295,278,0,311,281,270,286,252,266],
[250,236,239,0,257,253,235,259,249],
[275,257,269,293,0,270,269,267,270],
[302,259,280,297,280,0,280,274,278],
[276,246,264,315,281,270,0,264,276],
[278,276,298,291,283,276,286,0,266],
[294,270,284,301,280,272,274,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,261,272,257,265,270,241,268],
[277,0,264,277,264,277,285,270,253],
[289,286,0,260,269,284,289,275,266],
[278,273,290,0,273,286,299,245,270],
[293,286,281,277,0,287,298,260,270],
[285,273,266,264,263,0,296,253,275],
[280,265,261,251,252,254,0,246,265],
[309,280,275,305,290,297,304,0,284],
[282,297,284,280,280,275,285,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,267,290,302,277,282,274,283],
[278,0,262,287,283,265,265,268,280],
[283,288,0,287,307,275,271,284,290],
[260,263,263,0,280,264,264,270,263],
[248,267,243,270,0,257,276,264,271],
[273,285,275,286,293,0,280,277,279],
[268,285,279,286,274,270,0,284,267],
[276,282,266,280,286,273,266,0,267],
[267,270,260,287,279,271,283,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,271,300,296,287,313,272,273],
[259,0,257,252,252,248,288,278,258],
[279,293,0,255,267,265,289,283,279],
[250,298,295,0,264,293,292,301,245],
[254,298,283,286,0,311,252,281,252],
[263,302,285,257,239,0,243,263,274],
[237,262,261,258,298,307,0,283,270],
[278,272,267,249,269,287,267,0,268],
[277,292,271,305,298,276,280,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,278,252,271,272,254,259,267],
[270,0,232,254,257,266,243,245,281],
[272,318,0,250,281,294,292,271,301],
[298,296,300,0,282,271,285,263,278],
[279,293,269,268,0,254,261,245,280],
[278,284,256,279,296,0,262,263,274],
[296,307,258,265,289,288,0,285,284],
[291,305,279,287,305,287,265,0,266],
[283,269,249,272,270,276,266,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,261,271,257,270,276,268,278],
[289,0,276,265,274,279,262,261,274],
[289,274,0,262,249,282,277,255,279],
[279,285,288,0,275,276,277,253,282],
[293,276,301,275,0,296,269,275,290],
[280,271,268,274,254,0,259,257,272],
[274,288,273,273,281,291,0,268,283],
[282,289,295,297,275,293,282,0,294],
[272,276,271,268,260,278,267,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,284,265,261,286,280,280,254],
[299,0,286,283,286,301,294,268,286],
[266,264,0,259,271,281,276,261,272],
[285,267,291,0,290,281,275,266,272],
[289,264,279,260,0,280,290,273,263],
[264,249,269,269,270,0,275,260,254],
[270,256,274,275,260,275,0,249,260],
[270,282,289,284,277,290,301,0,265],
[296,264,278,278,287,296,290,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,272,254,296,295,272,274,284],
[283,0,272,280,289,295,271,270,263],
[278,278,0,273,286,275,273,258,275],
[296,270,277,0,301,314,291,278,286],
[254,261,264,249,0,274,253,255,247],
[255,255,275,236,276,0,257,247,272],
[278,279,277,259,297,293,0,273,269],
[276,280,292,272,295,303,277,0,284],
[266,287,275,264,303,278,281,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,264,271,265,265,275,258,261],
[287,0,287,284,295,289,298,277,269],
[286,263,0,284,278,284,274,273,274],
[279,266,266,0,281,277,295,270,265],
[285,255,272,269,0,274,289,257,263],
[285,261,266,273,276,0,294,276,273],
[275,252,276,255,261,256,0,251,251],
[292,273,277,280,293,274,299,0,302],
[289,281,276,285,287,277,299,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,242,240,213,284,275,245,253],
[259,0,266,245,215,295,239,228,243],
[308,284,0,276,213,338,278,221,314],
[310,305,274,0,295,356,354,289,351],
[337,335,337,255,0,340,346,314,335],
[266,255,212,194,210,0,276,191,251],
[275,311,272,196,204,274,0,266,270],
[305,322,329,261,236,359,284,0,267],
[297,307,236,199,215,299,280,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,248,165,215,204,254,189,205],
[271,0,265,197,230,192,255,210,268],
[302,285,0,212,239,216,252,231,247],
[385,353,338,0,245,273,301,277,262],
[335,320,311,305,0,275,278,292,260],
[346,358,334,277,275,0,315,306,278],
[296,295,298,249,272,235,0,295,288],
[361,340,319,273,258,244,255,0,269],
[345,282,303,288,290,272,262,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,299,302,298,285,262,275,271],
[271,0,269,281,286,265,280,239,291],
[251,281,0,270,245,271,253,239,246],
[248,269,280,0,251,259,258,221,280],
[252,264,305,299,0,269,275,265,275],
[265,285,279,291,281,0,307,263,283],
[288,270,297,292,275,243,0,252,292],
[275,311,311,329,285,287,298,0,303],
[279,259,304,270,275,267,258,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,299,284,292,316,281,313,270],
[239,0,290,253,264,265,203,266,230],
[251,260,0,251,266,273,225,240,245],
[266,297,299,0,267,292,243,265,274],
[258,286,284,283,0,302,234,260,264],
[234,285,277,258,248,0,255,252,264],
[269,347,325,307,316,295,0,317,286],
[237,284,310,285,290,298,233,0,269],
[280,320,305,276,286,286,264,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,275,269,276,286,290,274,294],
[262,0,250,270,258,254,257,243,274],
[275,300,0,283,286,269,309,281,288],
[281,280,267,0,274,270,288,272,305],
[274,292,264,276,0,280,283,278,286],
[264,296,281,280,270,0,275,279,290],
[260,293,241,262,267,275,0,261,279],
[276,307,269,278,272,271,289,0,287],
[256,276,262,245,264,260,271,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,258,280,271,277,269,298,271],
[292,0,288,281,302,273,279,285,280],
[292,262,0,292,287,261,254,280,286],
[270,269,258,0,291,262,269,269,287],
[279,248,263,259,0,259,252,285,264],
[273,277,289,288,291,0,277,288,277],
[281,271,296,281,298,273,0,287,287],
[252,265,270,281,265,262,263,0,265],
[279,270,264,263,286,273,263,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,327,276,273,227,236,256,253],
[278,0,291,215,281,218,199,231,249],
[223,259,0,272,265,209,226,250,224],
[274,335,278,0,258,273,250,269,296],
[277,269,285,292,0,237,237,295,307],
[323,332,341,277,313,0,272,281,288],
[314,351,324,300,313,278,0,279,269],
[294,319,300,281,255,269,271,0,300],
[297,301,326,254,243,262,281,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,299,271,291,271,270,273,286],
[254,0,270,239,257,294,256,253,263],
[251,280,0,263,253,294,263,255,264],
[279,311,287,0,296,283,272,276,295],
[259,293,297,254,0,301,274,277,292],
[279,256,256,267,249,0,262,250,259],
[280,294,287,278,276,288,0,287,268],
[277,297,295,274,273,300,263,0,287],
[264,287,286,255,258,291,282,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,282,279,284,248,260,264,300],
[265,0,291,253,282,280,268,247,261],
[268,259,0,240,257,262,274,251,281],
[271,297,310,0,292,286,273,284,307],
[266,268,293,258,0,252,244,252,261],
[302,270,288,264,298,0,268,272,300],
[290,282,276,277,306,282,0,258,288],
[286,303,299,266,298,278,292,0,295],
[250,289,269,243,289,250,262,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,267,277,287,274,283,272,267],
[280,0,272,274,283,266,265,259,267],
[283,278,0,280,280,278,272,286,285],
[273,276,270,0,280,266,273,274,267],
[263,267,270,270,0,258,278,263,262],
[276,284,272,284,292,0,310,270,271],
[267,285,278,277,272,240,0,279,279],
[278,291,264,276,287,280,271,0,271],
[283,283,265,283,288,279,271,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,187,247,229,168,210,190,245],
[396,0,300,265,419,283,358,397,357],
[363,250,0,246,345,268,343,285,322],
[303,285,304,0,287,247,284,263,283],
[321,131,205,263,0,209,207,206,186],
[382,267,282,303,341,0,304,342,376],
[340,192,207,266,343,246,0,299,244],
[360,153,265,287,344,208,251,0,283],
[305,193,228,267,364,174,306,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,266,288,272,303,292,254,302],
[264,0,277,266,289,269,302,249,254],
[284,273,0,274,288,270,308,246,267],
[262,284,276,0,303,266,273,270,306],
[278,261,262,247,0,224,301,223,253],
[247,281,280,284,326,0,291,284,313],
[258,248,242,277,249,259,0,243,273],
[296,301,304,280,327,266,307,0,287],
[248,296,283,244,297,237,277,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,275,285,302,272,274,302,287],
[254,0,266,275,273,253,258,283,268],
[275,284,0,286,283,270,274,270,289],
[265,275,264,0,263,275,277,291,283],
[248,277,267,287,0,267,267,276,271],
[278,297,280,275,283,0,289,277,290],
[276,292,276,273,283,261,0,289,268],
[248,267,280,259,274,273,261,0,269],
[263,282,261,267,279,260,282,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,280,284,246,313,297,267,286],
[281,0,280,272,301,327,314,268,302],
[270,270,0,281,262,305,310,258,298],
[266,278,269,0,259,325,328,276,289],
[304,249,288,291,0,325,317,299,298],
[237,223,245,225,225,0,246,219,229],
[253,236,240,222,233,304,0,228,257],
[283,282,292,274,251,331,322,0,336],
[264,248,252,261,252,321,293,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,284,280,284,293,287,268,278],
[264,0,276,260,289,281,270,261,259],
[266,274,0,248,265,268,261,251,259],
[270,290,302,0,296,291,285,295,281],
[266,261,285,254,0,254,259,261,243],
[257,269,282,259,296,0,287,264,266],
[263,280,289,265,291,263,0,270,266],
[282,289,299,255,289,286,280,0,269],
[272,291,291,269,307,284,284,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,267,254,262,288,267,260,247],
[310,0,265,283,280,272,311,288,294],
[283,285,0,262,285,286,276,276,282],
[296,267,288,0,249,284,285,262,289],
[288,270,265,301,0,298,277,254,300],
[262,278,264,266,252,0,264,269,301],
[283,239,274,265,273,286,0,247,281],
[290,262,274,288,296,281,303,0,294],
[303,256,268,261,250,249,269,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,286,276,271,276,272,303,285],
[284,0,273,268,278,261,276,267,261],
[264,277,0,266,277,278,282,278,269],
[274,282,284,0,296,279,278,298,286],
[279,272,273,254,0,259,270,278,260],
[274,289,272,271,291,0,272,287,282],
[278,274,268,272,280,278,0,290,292],
[247,283,272,252,272,263,260,0,244],
[265,289,281,264,290,268,258,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,287,280,296,260,291,298,280],
[256,0,280,261,268,269,274,280,278],
[263,270,0,273,273,271,288,265,264],
[270,289,277,0,283,275,286,281,258],
[254,282,277,267,0,283,290,273,280],
[290,281,279,275,267,0,281,268,283],
[259,276,262,264,260,269,0,276,257],
[252,270,285,269,277,282,274,0,255],
[270,272,286,292,270,267,293,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,317,267,298,291,332,290,295],
[243,0,312,282,305,334,326,259,322],
[233,238,0,262,261,247,272,252,281],
[283,268,288,0,299,295,317,261,293],
[252,245,289,251,0,279,315,252,285],
[259,216,303,255,271,0,297,253,252],
[218,224,278,233,235,253,0,241,229],
[260,291,298,289,298,297,309,0,314],
[255,228,269,257,265,298,321,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,296,262,303,243,268,304,247],
[275,0,297,315,329,268,305,344,283],
[254,253,0,266,287,282,292,283,247],
[288,235,284,0,278,276,283,317,263],
[247,221,263,272,0,244,263,301,258],
[307,282,268,274,306,0,271,329,278],
[282,245,258,267,287,279,0,291,223],
[246,206,267,233,249,221,259,0,229],
[303,267,303,287,292,272,327,321,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,292,273,270,270,272,267,259],
[268,0,246,225,276,249,263,290,249],
[258,304,0,279,314,319,312,336,276],
[277,325,271,0,314,290,276,294,260],
[280,274,236,236,0,261,277,263,252],
[280,301,231,260,289,0,268,256,235],
[278,287,238,274,273,282,0,298,271],
[283,260,214,256,287,294,252,0,240],
[291,301,274,290,298,315,279,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,274,263,298,321,258,248,286],
[299,0,286,290,327,352,269,286,301],
[276,264,0,275,295,280,264,261,283],
[287,260,275,0,303,312,280,258,287],
[252,223,255,247,0,275,227,206,244],
[229,198,270,238,275,0,210,229,271],
[292,281,286,270,323,340,0,286,290],
[302,264,289,292,344,321,264,0,277],
[264,249,267,263,306,279,260,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,255,270,233,287,248,252,295],
[270,0,257,266,245,271,254,249,266],
[295,293,0,256,275,281,276,274,284],
[280,284,294,0,285,285,261,271,287],
[317,305,275,265,0,312,288,282,288],
[263,279,269,265,238,0,234,255,264],
[302,296,274,289,262,316,0,286,308],
[298,301,276,279,268,295,264,0,268],
[255,284,266,263,262,286,242,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,245,269,327,308,309,330,335],
[319,0,243,223,321,383,221,326,328],
[305,307,0,308,303,362,242,329,331],
[281,327,242,0,346,326,264,304,334],
[223,229,247,204,0,286,203,306,293],
[242,167,188,224,264,0,184,228,269],
[241,329,308,286,347,366,0,349,352],
[220,224,221,246,244,322,201,0,248],
[215,222,219,216,257,281,198,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,270,258,266,279,268,266,293],
[276,0,289,260,257,286,254,253,271],
[280,261,0,262,298,257,263,277,282],
[292,290,288,0,261,259,288,287,292],
[284,293,252,289,0,292,288,282,293],
[271,264,293,291,258,0,277,262,277],
[282,296,287,262,262,273,0,278,295],
[284,297,273,263,268,288,272,0,284],
[257,279,268,258,257,273,255,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,360,299,261,252,278,292,284],
[243,0,313,289,263,244,235,256,248],
[190,237,0,243,230,204,221,222,209],
[251,261,307,0,290,251,278,298,283],
[289,287,320,260,0,279,267,273,249],
[298,306,346,299,271,0,253,273,238],
[272,315,329,272,283,297,0,252,244],
[258,294,328,252,277,277,298,0,301],
[266,302,341,267,301,312,306,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,264,259,276,265,279,278,260],
[275,0,271,271,286,256,268,276,279],
[286,279,0,262,290,264,288,273,274],
[291,279,288,0,293,272,299,267,286],
[274,264,260,257,0,252,257,264,294],
[285,294,286,278,298,0,288,275,286],
[271,282,262,251,293,262,0,270,275],
[272,274,277,283,286,275,280,0,291],
[290,271,276,264,256,264,275,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,290,207,211,228,204,236,212],
[277,0,256,230,243,279,249,276,273],
[260,294,0,174,224,267,229,230,261],
[343,320,376,0,300,331,249,308,319],
[339,307,326,250,0,266,285,245,266],
[322,271,283,219,284,0,223,260,231],
[346,301,321,301,265,327,0,247,268],
[314,274,320,242,305,290,303,0,293],
[338,277,289,231,284,319,282,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,271,260,279,252,279,269,278],
[275,0,267,249,275,269,274,268,277],
[279,283,0,268,288,285,291,279,304],
[290,301,282,0,284,277,304,275,291],
[271,275,262,266,0,257,285,271,281],
[298,281,265,273,293,0,295,291,285],
[271,276,259,246,265,255,0,264,279],
[281,282,271,275,279,259,286,0,280],
[272,273,246,259,269,265,271,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,262,281,287,275,291,305,259],
[280,0,270,263,264,265,286,275,249],
[288,280,0,263,285,252,284,281,268],
[269,287,287,0,285,276,291,277,267],
[263,286,265,265,0,263,275,260,251],
[275,285,298,274,287,0,302,287,279],
[259,264,266,259,275,248,0,263,250],
[245,275,269,273,290,263,287,0,253],
[291,301,282,283,299,271,300,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,263,275,282,269,251,266,263],
[283,0,292,289,284,277,275,294,270],
[287,258,0,282,297,273,272,277,256],
[275,261,268,0,287,262,263,295,268],
[268,266,253,263,0,248,260,272,250],
[281,273,277,288,302,0,263,289,266],
[299,275,278,287,290,287,0,289,287],
[284,256,273,255,278,261,261,0,254],
[287,280,294,282,300,284,263,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,267,295,251,262,251,238,265],
[288,0,290,274,277,271,320,260,315],
[283,260,0,251,274,235,262,264,268],
[255,276,299,0,266,279,297,252,278],
[299,273,276,284,0,265,283,292,314],
[288,279,315,271,285,0,311,331,310],
[299,230,288,253,267,239,0,255,308],
[312,290,286,298,258,219,295,0,315],
[285,235,282,272,236,240,242,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,278,294,274,237,265,298,263],
[320,0,300,298,319,316,296,315,274],
[272,250,0,254,283,267,264,294,275],
[256,252,296,0,279,242,275,301,278],
[276,231,267,271,0,283,257,298,287],
[313,234,283,308,267,0,286,288,289],
[285,254,286,275,293,264,0,307,266],
[252,235,256,249,252,262,243,0,231],
[287,276,275,272,263,261,284,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,252,266,265,271,260,258,265],
[290,0,250,280,277,265,287,283,260],
[298,300,0,302,261,299,297,262,263],
[284,270,248,0,259,296,236,252,264],
[285,273,289,291,0,290,260,262,278],
[279,285,251,254,260,0,275,265,275],
[290,263,253,314,290,275,0,265,281],
[292,267,288,298,288,285,285,0,292],
[285,290,287,286,272,275,269,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,287,300,308,255,255,271,299],
[252,0,256,263,291,268,262,258,255],
[263,294,0,294,291,257,273,272,283],
[250,287,256,0,307,259,266,264,271],
[242,259,259,243,0,227,228,238,278],
[295,282,293,291,323,0,302,254,308],
[295,288,277,284,322,248,0,297,279],
[279,292,278,286,312,296,253,0,298],
[251,295,267,279,272,242,271,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,276,283,283,259,259,284,284],
[258,0,261,269,277,257,287,289,263],
[274,289,0,304,279,290,274,325,275],
[267,281,246,0,277,255,257,273,281],
[267,273,271,273,0,269,273,279,273],
[291,293,260,295,281,0,287,294,299],
[291,263,276,293,277,263,0,302,292],
[266,261,225,277,271,256,248,0,275],
[266,287,275,269,277,251,258,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,265,280,246,269,257,247,257],
[286,0,287,281,260,277,280,263,285],
[285,263,0,278,237,256,266,254,269],
[270,269,272,0,248,251,246,254,269],
[304,290,313,302,0,295,268,279,289],
[281,273,294,299,255,0,280,271,283],
[293,270,284,304,282,270,0,264,278],
[303,287,296,296,271,279,286,0,301],
[293,265,281,281,261,267,272,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,242,223,226,236,237,263,218],
[318,0,284,244,253,276,269,308,264],
[308,266,0,258,288,277,298,282,267],
[327,306,292,0,316,287,292,293,275],
[324,297,262,234,0,281,297,308,259],
[314,274,273,263,269,0,280,294,267],
[313,281,252,258,253,270,0,295,270],
[287,242,268,257,242,256,255,0,239],
[332,286,283,275,291,283,280,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,273,265,271,292,282,280,274],
[249,0,259,278,276,294,294,266,273],
[277,291,0,260,273,283,290,274,281],
[285,272,290,0,288,285,277,300,289],
[279,274,277,262,0,274,282,275,257],
[258,256,267,265,276,0,264,262,248],
[268,256,260,273,268,286,0,288,259],
[270,284,276,250,275,288,262,0,259],
[276,277,269,261,293,302,291,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,252,217,265,242,239,280,264],
[309,0,269,286,320,291,273,289,329],
[298,281,0,289,309,283,273,308,317],
[333,264,261,0,335,307,254,305,321],
[285,230,241,215,0,267,202,239,232],
[308,259,267,243,283,0,279,295,286],
[311,277,277,296,348,271,0,330,311],
[270,261,242,245,311,255,220,0,284],
[286,221,233,229,318,264,239,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,294,293,267,299,272,264,299],
[298,0,299,296,290,320,259,265,306],
[256,251,0,246,246,302,263,238,265],
[257,254,304,0,250,308,282,293,304],
[283,260,304,300,0,303,289,263,298],
[251,230,248,242,247,0,254,234,267],
[278,291,287,268,261,296,0,250,272],
[286,285,312,257,287,316,300,0,310],
[251,244,285,246,252,283,278,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,265,287,275,268,275,249,283],
[278,0,284,278,280,275,269,273,300],
[285,266,0,275,274,261,276,272,288],
[263,272,275,0,283,270,270,281,289],
[275,270,276,267,0,271,271,259,286],
[282,275,289,280,279,0,264,272,290],
[275,281,274,280,279,286,0,269,296],
[301,277,278,269,291,278,281,0,280],
[267,250,262,261,264,260,254,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,277,279,273,294,293,304,278],
[281,0,268,284,293,271,306,305,312],
[273,282,0,277,267,266,291,284,302],
[271,266,273,0,270,283,288,303,304],
[277,257,283,280,0,284,302,311,312],
[256,279,284,267,266,0,276,300,291],
[257,244,259,262,248,274,0,278,288],
[246,245,266,247,239,250,272,0,277],
[272,238,248,246,238,259,262,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,274,283,277,294,284,285,280],
[279,0,282,270,264,281,276,275,283],
[276,268,0,283,267,289,307,279,283],
[267,280,267,0,265,283,271,260,270],
[273,286,283,285,0,303,293,258,281],
[256,269,261,267,247,0,266,273,271],
[266,274,243,279,257,284,0,262,268],
[265,275,271,290,292,277,288,0,275],
[270,267,267,280,269,279,282,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,316,292,291,303,340,294,255],
[312,0,252,319,257,280,326,254,257],
[234,298,0,308,229,290,312,219,265],
[258,231,242,0,255,257,296,271,256],
[259,293,321,295,0,294,352,251,261],
[247,270,260,293,256,0,362,300,260],
[210,224,238,254,198,188,0,239,186],
[256,296,331,279,299,250,311,0,302],
[295,293,285,294,289,290,364,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,291,266,254,320,294,257,249],
[309,0,284,263,259,279,289,246,275],
[259,266,0,196,256,248,249,242,237],
[284,287,354,0,281,318,275,314,291],
[296,291,294,269,0,273,270,274,237],
[230,271,302,232,277,0,314,265,222],
[256,261,301,275,280,236,0,281,257],
[293,304,308,236,276,285,269,0,260],
[301,275,313,259,313,328,293,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,274,278,290,276,281,265,289],
[269,0,258,257,288,273,281,261,274],
[276,292,0,271,279,289,275,286,283],
[272,293,279,0,295,280,299,284,289],
[260,262,271,255,0,262,271,262,268],
[274,277,261,270,288,0,273,279,270],
[269,269,275,251,279,277,0,270,268],
[285,289,264,266,288,271,280,0,283],
[261,276,267,261,282,280,282,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,270,300,276,264,271,274,287],
[299,0,241,268,272,258,282,253,277],
[280,309,0,301,271,279,282,277,294],
[250,282,249,0,288,265,268,258,272],
[274,278,279,262,0,275,281,281,312],
[286,292,271,285,275,0,271,284,283],
[279,268,268,282,269,279,0,278,274],
[276,297,273,292,269,266,272,0,268],
[263,273,256,278,238,267,276,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,295,287,266,286,260,277,269],
[263,0,271,281,279,278,253,274,256],
[255,279,0,261,275,262,257,245,276],
[263,269,289,0,285,278,259,281,276],
[284,271,275,265,0,281,271,259,275],
[264,272,288,272,269,0,258,261,265],
[290,297,293,291,279,292,0,278,272],
[273,276,305,269,291,289,272,0,272],
[281,294,274,274,275,285,278,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,278,274,257,256,248,252,260],
[301,0,286,294,275,278,278,285,297],
[272,264,0,268,262,263,281,258,281],
[276,256,282,0,263,270,272,268,284],
[293,275,288,287,0,262,280,262,270],
[294,272,287,280,288,0,286,268,271],
[302,272,269,278,270,264,0,289,290],
[298,265,292,282,288,282,261,0,277],
[290,253,269,266,280,279,260,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,288,280,290,277,286,272,267],
[270,0,274,270,276,272,267,259,279],
[262,276,0,269,284,275,263,291,276],
[270,280,281,0,272,281,271,294,278],
[260,274,266,278,0,251,258,251,262],
[273,278,275,269,299,0,289,283,297],
[264,283,287,279,292,261,0,291,275],
[278,291,259,256,299,267,259,0,284],
[283,271,274,272,288,253,275,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,290,289,285,273,295,289,265],
[269,0,309,289,300,274,298,282,295],
[260,241,0,260,274,248,273,282,241],
[261,261,290,0,258,253,262,272,282],
[265,250,276,292,0,275,272,287,270],
[277,276,302,297,275,0,279,303,280],
[255,252,277,288,278,271,0,272,273],
[261,268,268,278,263,247,278,0,260],
[285,255,309,268,280,270,277,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,266,281,288,264,274,273,249],
[291,0,300,312,320,286,271,290,281],
[284,250,0,286,270,260,282,294,262],
[269,238,264,0,288,260,270,286,252],
[262,230,280,262,0,254,269,262,269],
[286,264,290,290,296,0,292,303,270],
[276,279,268,280,281,258,0,304,244],
[277,260,256,264,288,247,246,0,249],
[301,269,288,298,281,280,306,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,242,247,252,240,247,258,259],
[286,0,285,271,274,252,256,280,264],
[308,265,0,253,259,268,257,261,260],
[303,279,297,0,285,267,286,296,271],
[298,276,291,265,0,289,264,291,290],
[310,298,282,283,261,0,278,269,278],
[303,294,293,264,286,272,0,282,280],
[292,270,289,254,259,281,268,0,270],
[291,286,290,279,260,272,270,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,257,240,303,282,269,273,271],
[243,0,270,246,291,257,265,271,227],
[293,280,0,266,306,257,219,271,272],
[310,304,284,0,352,288,338,289,269],
[247,259,244,198,0,221,252,247,245],
[268,293,293,262,329,0,284,310,259],
[281,285,331,212,298,266,0,305,295],
[277,279,279,261,303,240,245,0,248],
[279,323,278,281,305,291,255,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,284,286,282,278,285,272,275],
[281,0,256,279,283,266,268,261,273],
[266,294,0,290,281,265,268,287,289],
[264,271,260,0,282,240,271,266,274],
[268,267,269,268,0,250,262,269,281],
[272,284,285,310,300,0,302,300,304],
[265,282,282,279,288,248,0,290,278],
[278,289,263,284,281,250,260,0,266],
[275,277,261,276,269,246,272,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,276,0,136,0,274,414,273],
[414,0,276,276,139,139,277,414,276],
[274,274,0,138,274,138,274,138,411],
[550,274,412,0,275,275,274,550,412],
[414,411,276,275,0,0,275,414,273],
[550,411,412,275,550,0,411,414,273],
[276,273,276,276,275,139,0,414,412],
[136,136,412,0,136,136,136,0,273],
[277,274,139,138,277,277,138,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,268,258,256,256,281,281,297],
[268,0,265,263,259,240,265,256,261],
[282,285,0,282,271,276,282,296,271],
[292,287,268,0,271,264,260,279,277],
[294,291,279,279,0,281,272,282,277],
[294,310,274,286,269,0,279,299,298],
[269,285,268,290,278,271,0,289,283],
[269,294,254,271,268,251,261,0,273],
[253,289,279,273,273,252,267,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,298,278,274,271,300,290,298],
[255,0,263,276,276,279,277,292,287],
[252,287,0,304,287,272,281,309,292],
[272,274,246,0,253,253,296,298,319],
[276,274,263,297,0,272,286,300,298],
[279,271,278,297,278,0,301,306,303],
[250,273,269,254,264,249,0,301,276],
[260,258,241,252,250,244,249,0,294],
[252,263,258,231,252,247,274,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,285,275,260,291,268,277,276],
[270,0,295,272,277,289,264,268,265],
[265,255,0,259,247,276,247,261,251],
[275,278,291,0,282,281,261,272,283],
[290,273,303,268,0,291,283,266,292],
[259,261,274,269,259,0,251,258,251],
[282,286,303,289,267,299,0,289,286],
[273,282,289,278,284,292,261,0,272],
[274,285,299,267,258,299,264,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,224,270,227,283,247,255,250],
[287,0,256,282,278,304,279,298,280],
[326,294,0,270,287,307,300,303,292],
[280,268,280,0,269,303,279,280,284],
[323,272,263,281,0,299,317,287,283],
[267,246,243,247,251,0,264,246,242],
[303,271,250,271,233,286,0,269,254],
[295,252,247,270,263,304,281,0,271],
[300,270,258,266,267,308,296,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,265,245,249,267,306,281,270],
[274,0,282,276,265,267,300,292,302],
[285,268,0,277,281,280,284,293,304],
[305,274,273,0,277,275,288,288,315],
[301,285,269,273,0,290,295,294,260],
[283,283,270,275,260,0,292,288,279],
[244,250,266,262,255,258,0,242,255],
[269,258,257,262,256,262,308,0,266],
[280,248,246,235,290,271,295,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,310,276,283,257,263,276,278],
[258,0,263,255,252,254,259,275,282],
[240,287,0,263,262,256,272,277,269],
[274,295,287,0,287,262,278,276,281],
[267,298,288,263,0,268,261,285,282],
[293,296,294,288,282,0,267,287,286],
[287,291,278,272,289,283,0,285,292],
[274,275,273,274,265,263,265,0,276],
[272,268,281,269,268,264,258,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,265,268,276,295,269,268,276],
[292,0,280,278,287,261,263,264,245],
[285,270,0,272,291,284,266,262,269],
[282,272,278,0,277,273,291,246,256],
[274,263,259,273,0,257,252,257,260],
[255,289,266,277,293,0,277,282,259],
[281,287,284,259,298,273,0,252,261],
[282,286,288,304,293,268,298,0,271],
[274,305,281,294,290,291,289,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,278,258,283,259,283,282,274],
[258,0,270,282,291,275,285,295,278],
[272,280,0,266,269,252,259,278,265],
[292,268,284,0,293,269,266,278,268],
[267,259,281,257,0,243,273,280,272],
[291,275,298,281,307,0,269,297,292],
[267,265,291,284,277,281,0,283,285],
[268,255,272,272,270,253,267,0,241],
[276,272,285,282,278,258,265,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,242,288,217,249,250,256,275],
[280,0,247,288,226,262,231,264,275],
[308,303,0,320,271,276,259,310,342],
[262,262,230,0,220,249,245,266,314],
[333,324,279,330,0,277,269,326,338],
[301,288,274,301,273,0,280,286,304],
[300,319,291,305,281,270,0,301,315],
[294,286,240,284,224,264,249,0,309],
[275,275,208,236,212,246,235,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,301,290,272,292,296,270,301],
[239,0,264,258,242,276,266,259,275],
[249,286,0,279,272,279,277,268,297],
[260,292,271,0,272,283,289,288,293],
[278,308,278,278,0,284,272,282,293],
[258,274,271,267,266,0,269,271,276],
[254,284,273,261,278,281,0,269,275],
[280,291,282,262,268,279,281,0,292],
[249,275,253,257,257,274,275,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,295,273,282,261,292,267,260],
[274,0,292,270,278,245,285,273,284],
[255,258,0,242,240,268,256,297,252],
[277,280,308,0,293,244,298,281,277],
[268,272,310,257,0,266,295,271,276],
[289,305,282,306,284,0,271,298,296],
[258,265,294,252,255,279,0,279,294],
[283,277,253,269,279,252,271,0,250],
[290,266,298,273,274,254,256,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,267,273,267,267,270,261,258],
[291,0,291,259,284,281,298,281,292],
[283,259,0,278,289,272,285,252,275],
[277,291,272,0,278,283,292,280,277],
[283,266,261,272,0,275,263,274,266],
[283,269,278,267,275,0,295,279,263],
[280,252,265,258,287,255,0,269,252],
[289,269,298,270,276,271,281,0,281],
[292,258,275,273,284,287,298,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,260,274,244,258,262,254,254],
[295,0,285,283,276,285,284,288,270],
[290,265,0,265,244,257,280,270,262],
[276,267,285,0,239,279,276,286,274],
[306,274,306,311,0,289,303,292,287],
[292,265,293,271,261,0,270,285,279],
[288,266,270,274,247,280,0,296,259],
[296,262,280,264,258,265,254,0,268],
[296,280,288,276,263,271,291,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,279,281,268,274,281,276,281],
[276,0,283,286,291,272,277,275,279],
[271,267,0,270,281,263,262,266,272],
[269,264,280,0,268,260,270,267,274],
[282,259,269,282,0,276,260,278,282],
[276,278,287,290,274,0,294,299,279],
[269,273,288,280,290,256,0,278,276],
[274,275,284,283,272,251,272,0,275],
[269,271,278,276,268,271,274,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,295,283,306,266,300,285,286],
[255,0,249,270,267,254,276,261,267],
[255,301,0,276,283,279,295,272,287],
[267,280,274,0,289,260,282,268,284],
[244,283,267,261,0,251,273,272,275],
[284,296,271,290,299,0,291,291,282],
[250,274,255,268,277,259,0,253,257],
[265,289,278,282,278,259,297,0,272],
[264,283,263,266,275,268,293,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,266,280,269,287,270,278,274],
[264,0,260,283,274,281,279,288,279],
[284,290,0,289,273,295,280,284,294],
[270,267,261,0,284,284,276,289,287],
[281,276,277,266,0,276,277,269,276],
[263,269,255,266,274,0,257,267,265],
[280,271,270,274,273,293,0,280,276],
[272,262,266,261,281,283,270,0,269],
[276,271,256,263,274,285,274,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,254,264,283,286,249,277,278],
[274,0,284,282,287,307,304,274,272],
[296,266,0,273,305,286,299,274,273],
[286,268,277,0,276,277,284,282,279],
[267,263,245,274,0,285,277,267,251],
[264,243,264,273,265,0,284,273,251],
[301,246,251,266,273,266,0,261,261],
[273,276,276,268,283,277,289,0,276],
[272,278,277,271,299,299,289,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,281,282,275,282,284,305,300],
[275,0,271,284,257,275,274,281,278],
[269,279,0,280,270,266,270,287,275],
[268,266,270,0,262,268,266,300,287],
[275,293,280,288,0,266,285,288,306],
[268,275,284,282,284,0,292,297,288],
[266,276,280,284,265,258,0,276,295],
[245,269,263,250,262,253,274,0,252],
[250,272,275,263,244,262,255,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,281,319,278,343,292,320,269],
[257,0,270,264,250,316,265,291,236],
[269,280,0,305,221,293,264,285,259],
[231,286,245,0,217,314,253,276,255],
[272,300,329,333,0,307,330,323,314],
[207,234,257,236,243,0,228,230,222],
[258,285,286,297,220,322,0,284,256],
[230,259,265,274,227,320,266,0,244],
[281,314,291,295,236,328,294,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,273,288,266,269,267,251,269],
[262,0,245,265,234,288,264,250,250],
[277,305,0,285,289,266,270,289,266],
[262,285,265,0,275,261,257,263,261],
[284,316,261,275,0,296,260,290,290],
[281,262,284,289,254,0,266,267,276],
[283,286,280,293,290,284,0,258,289],
[299,300,261,287,260,283,292,0,281],
[281,300,284,289,260,274,261,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,257,272,241,287,267,243,280],
[270,0,256,275,239,285,254,247,274],
[293,294,0,300,260,269,269,279,283],
[278,275,250,0,246,269,276,254,271],
[309,311,290,304,0,288,292,270,295],
[263,265,281,281,262,0,257,256,275],
[283,296,281,274,258,293,0,292,289],
[307,303,271,296,280,294,258,0,286],
[270,276,267,279,255,275,261,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,259,284,265,250,267,264,299],
[293,0,276,282,293,257,264,260,266],
[291,274,0,292,290,274,282,262,299],
[266,268,258,0,272,255,225,226,247],
[285,257,260,278,0,236,253,260,257],
[300,293,276,295,314,0,281,261,290],
[283,286,268,325,297,269,0,255,289],
[286,290,288,324,290,289,295,0,275],
[251,284,251,303,293,260,261,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,303,266,295,302,276,289,304],
[266,0,274,274,272,273,283,262,269],
[247,276,0,266,273,277,254,264,272],
[284,276,284,0,304,305,265,299,297],
[255,278,277,246,0,293,259,254,279],
[248,277,273,245,257,0,240,257,274],
[274,267,296,285,291,310,0,283,276],
[261,288,286,251,296,293,267,0,292],
[246,281,278,253,271,276,274,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,274,284,272,278,275,253,253],
[278,0,274,265,264,256,288,252,271],
[276,276,0,272,279,274,301,267,271],
[266,285,278,0,269,284,278,272,258],
[278,286,271,281,0,262,282,267,286],
[272,294,276,266,288,0,297,276,267],
[275,262,249,272,268,253,0,256,265],
[297,298,283,278,283,274,294,0,282],
[297,279,279,292,264,283,285,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,244,256,255,243,269,258,275],
[281,0,265,241,278,242,301,278,293],
[306,285,0,272,273,268,287,300,304],
[294,309,278,0,278,269,300,307,312],
[295,272,277,272,0,279,289,313,305],
[307,308,282,281,271,0,298,319,298],
[281,249,263,250,261,252,0,279,296],
[292,272,250,243,237,231,271,0,266],
[275,257,246,238,245,252,254,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,299,277,284,285,268,287,262],
[270,0,291,252,263,266,268,260,256],
[251,259,0,244,253,266,272,250,264],
[273,298,306,0,267,282,283,287,284],
[266,287,297,283,0,273,268,301,269],
[265,284,284,268,277,0,283,287,271],
[282,282,278,267,282,267,0,275,294],
[263,290,300,263,249,263,275,0,256],
[288,294,286,266,281,279,256,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,282,277,279,276,237,284,267],
[296,0,290,246,301,293,257,292,290],
[268,260,0,228,264,249,250,284,259],
[273,304,322,0,301,246,299,299,288],
[271,249,286,249,0,257,229,267,248],
[274,257,301,304,293,0,258,306,294],
[313,293,300,251,321,292,0,289,259],
[266,258,266,251,283,244,261,0,278],
[283,260,291,262,302,256,291,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,274,301,289,306,260,358,301],
[234,0,251,271,218,260,241,304,266],
[276,299,0,262,252,268,279,323,280],
[249,279,288,0,245,263,265,300,280],
[261,332,298,305,0,303,287,313,318],
[244,290,282,287,247,0,252,302,285],
[290,309,271,285,263,298,0,331,332],
[192,246,227,250,237,248,219,0,249],
[249,284,270,270,232,265,218,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,273,268,273,261,281,263,270],
[301,0,280,284,294,278,268,292,284],
[277,270,0,267,269,273,275,277,292],
[282,266,283,0,281,257,278,275,263],
[277,256,281,269,0,267,266,273,262],
[289,272,277,293,283,0,284,277,286],
[269,282,275,272,284,266,0,274,257],
[287,258,273,275,277,273,276,0,277],
[280,266,258,287,288,264,293,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,268,257,253,249,253,262,278],
[285,0,311,296,292,275,297,280,308],
[282,239,0,261,273,252,279,257,274],
[293,254,289,0,279,273,294,278,310],
[297,258,277,271,0,267,277,279,318],
[301,275,298,277,283,0,283,294,291],
[297,253,271,256,273,267,0,287,301],
[288,270,293,272,271,256,263,0,283],
[272,242,276,240,232,259,249,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,281,265,307,308,255,268,277],
[249,0,260,268,294,279,273,262,268],
[269,290,0,248,314,278,272,250,268],
[285,282,302,0,303,304,279,293,271],
[243,256,236,247,0,268,259,238,251],
[242,271,272,246,282,0,245,259,248],
[295,277,278,271,291,305,0,262,261],
[282,288,300,257,312,291,288,0,273],
[273,282,282,279,299,302,289,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,314,259,278,263,224,220,223],
[274,0,312,270,257,223,205,234,220],
[236,238,0,270,200,166,242,214,145],
[291,280,280,0,237,222,223,239,219],
[272,293,350,313,0,298,277,290,182],
[287,327,384,328,252,0,293,309,220],
[326,345,308,327,273,257,0,235,292],
[330,316,336,311,260,241,315,0,240],
[327,330,405,331,368,330,258,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,301,280,318,259,277,282,289],
[263,0,304,272,293,285,260,262,252],
[249,246,0,279,285,254,263,267,251],
[270,278,271,0,306,280,258,255,285],
[232,257,265,244,0,254,239,264,251],
[291,265,296,270,296,0,274,289,295],
[273,290,287,292,311,276,0,281,272],
[268,288,283,295,286,261,269,0,256],
[261,298,299,265,299,255,278,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,279,270,245,284,256,288,241],
[284,0,295,279,259,282,255,285,272],
[271,255,0,291,253,279,257,256,241],
[280,271,259,0,267,287,264,289,278],
[305,291,297,283,0,286,282,287,273],
[266,268,271,263,264,0,255,297,252],
[294,295,293,286,268,295,0,293,277],
[262,265,294,261,263,253,257,0,268],
[309,278,309,272,277,298,273,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,267,271,271,273,274,287,245],
[280,0,286,266,267,279,288,292,273],
[283,264,0,278,260,262,268,279,272],
[279,284,272,0,273,279,282,287,272],
[279,283,290,277,0,283,286,296,275],
[277,271,288,271,267,0,275,284,271],
[276,262,282,268,264,275,0,287,268],
[263,258,271,263,254,266,263,0,249],
[305,277,278,278,275,279,282,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,278,282,300,298,300,292,293],
[283,0,265,272,302,286,270,275,273],
[272,285,0,274,297,299,299,281,280],
[268,278,276,0,294,292,295,266,294],
[250,248,253,256,0,253,274,246,288],
[252,264,251,258,297,0,288,263,282],
[250,280,251,255,276,262,0,257,278],
[258,275,269,284,304,287,293,0,283],
[257,277,270,256,262,268,272,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,279,278,265,253,288,270,266],
[256,0,269,254,254,250,266,252,263],
[271,281,0,272,273,261,277,266,274],
[272,296,278,0,263,261,278,274,275],
[285,296,277,287,0,266,276,280,287],
[297,300,289,289,284,0,275,290,300],
[262,284,273,272,274,275,0,267,267],
[280,298,284,276,270,260,283,0,296],
[284,287,276,275,263,250,283,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,305,280,278,270,272,280,274],
[294,0,313,277,314,277,271,278,285],
[245,237,0,264,265,250,263,260,249],
[270,273,286,0,284,257,275,260,265],
[272,236,285,266,0,252,270,275,252],
[280,273,300,293,298,0,278,266,288],
[278,279,287,275,280,272,0,285,280],
[270,272,290,290,275,284,265,0,276],
[276,265,301,285,298,262,270,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,316,281,273,279,287,298,286],
[269,0,289,287,262,284,276,270,277],
[234,261,0,283,286,246,268,273,267],
[269,263,267,0,272,269,270,310,252],
[277,288,264,278,0,280,284,297,272],
[271,266,304,281,270,0,307,278,278],
[263,274,282,280,266,243,0,266,269],
[252,280,277,240,253,272,284,0,276],
[264,273,283,298,278,272,281,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,291,294,239,291,332,335,332],
[265,0,260,254,275,235,283,286,300],
[259,290,0,301,295,261,299,331,301],
[256,296,249,0,227,242,271,309,300],
[311,275,255,323,0,294,318,328,316],
[259,315,289,308,256,0,308,284,309],
[218,267,251,279,232,242,0,232,276],
[215,264,219,241,222,266,318,0,282],
[218,250,249,250,234,241,274,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,236,282,310,324,205,316,300],
[255,0,235,230,193,243,179,238,230],
[314,315,0,307,253,319,287,350,256],
[268,320,243,0,244,245,242,298,247],
[240,357,297,306,0,325,253,327,313],
[226,307,231,305,225,0,162,263,210],
[345,371,263,308,297,388,0,416,285],
[234,312,200,252,223,287,134,0,239],
[250,320,294,303,237,340,265,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,254,277,263,240,250,273,234],
[294,0,276,307,284,280,276,289,263],
[296,274,0,293,266,265,259,281,252],
[273,243,257,0,255,261,256,301,247],
[287,266,284,295,0,269,294,286,283],
[310,270,285,289,281,0,260,288,271],
[300,274,291,294,256,290,0,296,284],
[277,261,269,249,264,262,254,0,252],
[316,287,298,303,267,279,266,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,293,276,271,289,284,272,286],
[277,0,278,282,277,279,259,275,254],
[257,272,0,287,280,281,268,270,272],
[274,268,263,0,274,267,274,264,267],
[279,273,270,276,0,282,282,257,274],
[261,271,269,283,268,0,290,273,272],
[266,291,282,276,268,260,0,270,259],
[278,275,280,286,293,277,280,0,281],
[264,296,278,283,276,278,291,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,354,248,293,235,289,283,279],
[264,0,350,281,280,276,331,339,307],
[196,200,0,227,205,211,292,250,193],
[302,269,323,0,214,249,312,311,268],
[257,270,345,336,0,221,307,331,317],
[315,274,339,301,329,0,303,325,280],
[261,219,258,238,243,247,0,274,219],
[267,211,300,239,219,225,276,0,200],
[271,243,357,282,233,270,331,350,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,310,251,283,275,264,286,294],
[284,0,274,242,303,262,258,297,280],
[240,276,0,298,300,278,300,279,302],
[299,308,252,0,310,296,314,262,273],
[267,247,250,240,0,279,253,250,273],
[275,288,272,254,271,0,260,266,288],
[286,292,250,236,297,290,0,258,304],
[264,253,271,288,300,284,292,0,293],
[256,270,248,277,277,262,246,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,272,279,289,294,273,271,276],
[276,0,269,240,266,297,257,266,274],
[278,281,0,273,313,301,272,282,286],
[271,310,277,0,286,297,281,270,261],
[261,284,237,264,0,294,267,267,269],
[256,253,249,253,256,0,249,256,257],
[277,293,278,269,283,301,0,267,260],
[279,284,268,280,283,294,283,0,283],
[274,276,264,289,281,293,290,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,273,246,268,267,239,260,271],
[277,0,304,279,272,294,267,277,266],
[277,246,0,255,277,317,263,280,269],
[304,271,295,0,299,307,271,273,271],
[282,278,273,251,0,293,269,245,265],
[283,256,233,243,257,0,239,255,279],
[311,283,287,279,281,311,0,237,265],
[290,273,270,277,305,295,313,0,282],
[279,284,281,279,285,271,285,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,413,413,275,413,413,140,413],
[137,0,140,140,0,0,0,0,140],
[137,410,0,550,0,275,138,0,273],
[137,410,0,0,0,138,138,0,138],
[275,550,550,550,0,550,550,415,550],
[137,550,275,412,0,0,138,0,413],
[137,550,412,412,0,412,0,137,550],
[410,550,550,550,135,550,413,0,550],
[137,410,277,412,0,137,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,263,241,290,258,259,267,281],
[264,0,252,273,286,304,282,300,274],
[287,298,0,250,293,319,296,290,290],
[309,277,300,0,311,289,252,293,303],
[260,264,257,239,0,273,240,263,272],
[292,246,231,261,277,0,252,288,258],
[291,268,254,298,310,298,0,288,284],
[283,250,260,257,287,262,262,0,272],
[269,276,260,247,278,292,266,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,268,273,258,271,268,269,261],
[276,0,269,276,263,271,259,271,268],
[282,281,0,273,288,295,266,270,243],
[277,274,277,0,269,263,268,283,261],
[292,287,262,281,0,278,267,269,278],
[279,279,255,287,272,0,274,273,248],
[282,291,284,282,283,276,0,293,261],
[281,279,280,267,281,277,257,0,256],
[289,282,307,289,272,302,289,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,288,303,272,305,291,248,274],
[300,0,290,332,298,274,315,275,295],
[262,260,0,282,250,274,283,250,278],
[247,218,268,0,257,270,279,253,242],
[278,252,300,293,0,301,303,272,262],
[245,276,276,280,249,0,251,239,250],
[259,235,267,271,247,299,0,250,256],
[302,275,300,297,278,311,300,0,289],
[276,255,272,308,288,300,294,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,275,271,276,252,256,258,248],
[258,0,255,278,256,269,280,240,262],
[275,295,0,271,291,268,266,254,246],
[279,272,279,0,297,286,270,276,255],
[274,294,259,253,0,265,262,263,280],
[298,281,282,264,285,0,264,266,270],
[294,270,284,280,288,286,0,260,302],
[292,310,296,274,287,284,290,0,302],
[302,288,304,295,270,280,248,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,263,262,265,271,283,280,269],
[286,0,289,286,277,290,298,285,274],
[287,261,0,287,275,270,284,288,267],
[288,264,263,0,294,280,292,276,282],
[285,273,275,256,0,269,278,284,282],
[279,260,280,270,281,0,282,274,276],
[267,252,266,258,272,268,0,273,260],
[270,265,262,274,266,276,277,0,264],
[281,276,283,268,268,274,290,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,282,297,278,273,277,292,274],
[247,0,261,251,246,273,279,244,242],
[268,289,0,272,296,279,268,285,287],
[253,299,278,0,287,289,309,296,255],
[272,304,254,263,0,270,266,277,240],
[277,277,271,261,280,0,283,274,240],
[273,271,282,241,284,267,0,257,245],
[258,306,265,254,273,276,293,0,238],
[276,308,263,295,310,310,305,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,269,279,287,304,256,280,287],
[255,0,265,268,285,275,271,260,290],
[281,285,0,282,284,285,274,269,307],
[271,282,268,0,279,270,272,266,306],
[263,265,266,271,0,264,242,264,279],
[246,275,265,280,286,0,259,262,302],
[294,279,276,278,308,291,0,273,295],
[270,290,281,284,286,288,277,0,285],
[263,260,243,244,271,248,255,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,285,288,281,268,261,295,263],
[249,0,248,273,256,271,250,267,253],
[265,302,0,294,287,258,271,283,274],
[262,277,256,0,264,259,252,282,261],
[269,294,263,286,0,272,262,271,269],
[282,279,292,291,278,0,277,283,265],
[289,300,279,298,288,273,0,299,286],
[255,283,267,268,279,267,251,0,270],
[287,297,276,289,281,285,264,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,287,282,288,271,268,258,282],
[275,0,275,286,286,279,273,287,291],
[263,275,0,282,276,299,286,284,289],
[268,264,268,0,298,266,260,276,282],
[262,264,274,252,0,281,256,275,256],
[279,271,251,284,269,0,288,285,297],
[282,277,264,290,294,262,0,275,277],
[292,263,266,274,275,265,275,0,280],
[268,259,261,268,294,253,273,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,277,286,268,293,269,261,297],
[288,0,282,297,286,301,286,268,297],
[273,268,0,281,296,288,276,264,293],
[264,253,269,0,271,283,276,275,282],
[282,264,254,279,0,298,276,249,290],
[257,249,262,267,252,0,267,244,269],
[281,264,274,274,274,283,0,269,297],
[289,282,286,275,301,306,281,0,280],
[253,253,257,268,260,281,253,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,246,271,264,257,255,280,260],
[287,0,243,229,257,238,254,237,245],
[304,307,0,270,295,252,298,281,277],
[279,321,280,0,307,272,294,317,276],
[286,293,255,243,0,238,272,286,228],
[293,312,298,278,312,0,301,304,272],
[295,296,252,256,278,249,0,292,270],
[270,313,269,233,264,246,258,0,257],
[290,305,273,274,322,278,280,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,341,283,255,286,236,252,281],
[297,0,327,282,273,313,280,295,270],
[209,223,0,255,254,287,252,264,238],
[267,268,295,0,298,215,253,279,282],
[295,277,296,252,0,285,266,240,311],
[264,237,263,335,265,0,204,246,248],
[314,270,298,297,284,346,0,269,271],
[298,255,286,271,310,304,281,0,272],
[269,280,312,268,239,302,279,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,239,314,156,237,288,339,263],
[338,0,210,314,339,236,235,261,314],
[311,340,0,309,206,315,286,312,236],
[236,236,241,0,184,189,241,266,240],
[394,211,344,366,0,264,291,344,369],
[313,314,235,361,286,0,209,288,236],
[262,315,264,309,259,341,0,367,260],
[211,289,238,284,206,262,183,0,260],
[287,236,314,310,181,314,290,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,306,250,307,276,232,237,261],
[302,0,356,290,336,365,282,289,267],
[244,194,0,216,245,283,272,250,254],
[300,260,334,0,291,303,281,257,278],
[243,214,305,259,0,230,188,263,240],
[274,185,267,247,320,0,241,214,258],
[318,268,278,269,362,309,0,243,230],
[313,261,300,293,287,336,307,0,287],
[289,283,296,272,310,292,320,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,262,274,295,297,264,272,292],
[266,0,271,275,288,299,258,280,265],
[288,279,0,280,295,303,262,265,265],
[276,275,270,0,260,278,267,284,247],
[255,262,255,290,0,271,245,261,253],
[253,251,247,272,279,0,258,269,235],
[286,292,288,283,305,292,0,287,275],
[278,270,285,266,289,281,263,0,265],
[258,285,285,303,297,315,275,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,287,343,279,306,288,241,298],
[228,0,259,328,227,267,277,253,265],
[263,291,0,282,252,278,276,282,270],
[207,222,268,0,172,253,241,213,228],
[271,323,298,378,0,309,280,295,293],
[244,283,272,297,241,0,264,261,257],
[262,273,274,309,270,286,0,255,284],
[309,297,268,337,255,289,295,0,265],
[252,285,280,322,257,293,266,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,245,284,273,284,282,234,295],
[284,0,284,267,272,287,277,267,293],
[305,266,0,297,282,293,266,269,276],
[266,283,253,0,289,277,284,262,299],
[277,278,268,261,0,257,270,251,265],
[266,263,257,273,293,0,251,223,290],
[268,273,284,266,280,299,0,295,267],
[316,283,281,288,299,327,255,0,270],
[255,257,274,251,285,260,283,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,262,270,256,258,262,270,288],
[277,0,266,262,253,266,257,270,281],
[288,284,0,291,278,280,268,288,299],
[280,288,259,0,266,289,263,273,298],
[294,297,272,284,0,281,267,271,277],
[292,284,270,261,269,0,266,262,267],
[288,293,282,287,283,284,0,255,292],
[280,280,262,277,279,288,295,0,281],
[262,269,251,252,273,283,258,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,271,283,277,283,263,285,266],
[279,0,270,286,284,295,252,287,276],
[279,280,0,288,275,298,276,277,279],
[267,264,262,0,278,275,267,273,264],
[273,266,275,272,0,272,257,280,266],
[267,255,252,275,278,0,257,267,258],
[287,298,274,283,293,293,0,301,275],
[265,263,273,277,270,283,249,0,233],
[284,274,271,286,284,292,275,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,278,293,267,279,266,294,262],
[273,0,268,282,270,272,271,288,278],
[272,282,0,305,275,306,282,283,261],
[257,268,245,0,273,271,258,264,237],
[283,280,275,277,0,264,282,279,245],
[271,278,244,279,286,0,252,279,255],
[284,279,268,292,268,298,0,315,276],
[256,262,267,286,271,271,235,0,233],
[288,272,289,313,305,295,274,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,271,285,261,262,285,289,275],
[262,0,288,284,276,271,279,282,274],
[279,262,0,281,273,262,265,275,269],
[265,266,269,0,267,262,269,275,277],
[289,274,277,283,0,282,292,269,277],
[288,279,288,288,268,0,285,290,282],
[265,271,285,281,258,265,0,278,266],
[261,268,275,275,281,260,272,0,272],
[275,276,281,273,273,268,284,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,290,232,280,324,263,305,274],
[257,0,273,244,212,333,272,245,254],
[260,277,0,171,170,260,214,213,228],
[318,306,379,0,273,366,271,275,283],
[270,338,380,277,0,411,334,321,257],
[226,217,290,184,139,0,169,243,229],
[287,278,336,279,216,381,0,369,227],
[245,305,337,275,229,307,181,0,274],
[276,296,322,267,293,321,323,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,289,277,271,288,262,281,264],
[262,0,278,255,270,282,272,279,268],
[261,272,0,290,288,284,280,274,273],
[273,295,260,0,292,276,283,293,275],
[279,280,262,258,0,295,286,276,283],
[262,268,266,274,255,0,273,276,253],
[288,278,270,267,264,277,0,267,278],
[269,271,276,257,274,274,283,0,255],
[286,282,277,275,267,297,272,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,284,304,298,313,295,322,271],
[273,0,278,285,293,315,307,328,308],
[266,272,0,267,285,287,267,316,287],
[246,265,283,0,260,293,251,292,249],
[252,257,265,290,0,274,285,293,273],
[237,235,263,257,276,0,254,277,270],
[255,243,283,299,265,296,0,296,279],
[228,222,234,258,257,273,254,0,244],
[279,242,263,301,277,280,271,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,290,280,294,292,275,306,269],
[260,0,278,258,274,272,257,276,265],
[260,272,0,268,269,284,268,295,271],
[270,292,282,0,282,277,277,307,274],
[256,276,281,268,0,287,266,303,251],
[258,278,266,273,263,0,265,285,264],
[275,293,282,273,284,285,0,291,281],
[244,274,255,243,247,265,259,0,254],
[281,285,279,276,299,286,269,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,273,294,275,272,279,288,282],
[251,0,256,267,277,235,290,268,228],
[277,294,0,293,301,298,293,296,273],
[256,283,257,0,291,266,302,261,263],
[275,273,249,259,0,263,267,250,265],
[278,315,252,284,287,0,279,280,267],
[271,260,257,248,283,271,0,247,246],
[262,282,254,289,300,270,303,0,278],
[268,322,277,287,285,283,304,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,279,294,288,280,274,269,276],
[256,0,270,274,276,267,286,264,269],
[271,280,0,277,274,270,289,260,278],
[256,276,273,0,274,272,270,241,249],
[262,274,276,276,0,272,286,270,269],
[270,283,280,278,278,0,273,276,255],
[276,264,261,280,264,277,0,261,261],
[281,286,290,309,280,274,289,0,282],
[274,281,272,301,281,295,289,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,285,256,271,291,271,265,280],
[253,0,282,276,257,278,281,246,276],
[265,268,0,253,268,283,250,256,282],
[294,274,297,0,266,265,265,277,272],
[279,293,282,284,0,324,278,255,279],
[259,272,267,285,226,0,247,257,278],
[279,269,300,285,272,303,0,251,275],
[285,304,294,273,295,293,299,0,284],
[270,274,268,278,271,272,275,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,284,206,304,300,225,243,229],
[304,0,209,187,341,285,264,266,211],
[266,341,0,319,339,380,304,341,321],
[344,363,231,0,360,396,340,286,288],
[246,209,211,190,0,226,206,224,149],
[250,265,170,154,324,0,251,229,213],
[325,286,246,210,344,299,0,302,230],
[307,284,209,264,326,321,248,0,248],
[321,339,229,262,401,337,320,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,279,299,286,284,293,290,273],
[266,0,277,288,284,292,291,291,294],
[271,273,0,289,273,294,285,311,303],
[251,262,261,0,257,280,274,309,259],
[264,266,277,293,0,279,284,301,247],
[266,258,256,270,271,0,270,291,267],
[257,259,265,276,266,280,0,312,294],
[260,259,239,241,249,259,238,0,264],
[277,256,247,291,303,283,256,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,248,234,247,263,267,232,293],
[292,0,266,267,280,306,296,248,294],
[302,284,0,264,273,276,274,263,289],
[316,283,286,0,272,303,245,269,304],
[303,270,277,278,0,285,280,277,308],
[287,244,274,247,265,0,256,243,321],
[283,254,276,305,270,294,0,290,320],
[318,302,287,281,273,307,260,0,294],
[257,256,261,246,242,229,230,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,283,285,278,289,289,276,254],
[280,0,287,290,276,286,291,274,277],
[267,263,0,275,275,277,299,280,267],
[265,260,275,0,258,286,277,273,267],
[272,274,275,292,0,271,295,288,273],
[261,264,273,264,279,0,281,266,261],
[261,259,251,273,255,269,0,279,251],
[274,276,270,277,262,284,271,0,261],
[296,273,283,283,277,289,299,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,222,283,255,238,246,258,260],
[274,0,243,283,260,236,281,254,256],
[328,307,0,300,278,298,278,262,261],
[267,267,250,0,232,247,271,295,244],
[295,290,272,318,0,267,267,275,264],
[312,314,252,303,283,0,302,309,302],
[304,269,272,279,283,248,0,290,244],
[292,296,288,255,275,241,260,0,279],
[290,294,289,306,286,248,306,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,276,259,289,285,287,278,289],
[285,0,310,281,301,280,252,271,304],
[274,240,0,265,279,258,239,252,274],
[291,269,285,0,290,273,267,262,264],
[261,249,271,260,0,252,264,249,275],
[265,270,292,277,298,0,253,292,291],
[263,298,311,283,286,297,0,279,312],
[272,279,298,288,301,258,271,0,301],
[261,246,276,286,275,259,238,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,290,294,306,302,268,305,306],
[281,0,285,279,289,287,268,285,269],
[260,265,0,236,279,283,238,274,270],
[256,271,314,0,232,284,253,279,290],
[244,261,271,318,0,281,276,303,293],
[248,263,267,266,269,0,253,296,274],
[282,282,312,297,274,297,0,294,292],
[245,265,276,271,247,254,256,0,276],
[244,281,280,260,257,276,258,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,269,293,326,328,286,300,297],
[245,0,265,247,283,322,250,254,261],
[281,285,0,255,292,309,269,279,280],
[257,303,295,0,319,309,278,267,302],
[224,267,258,231,0,268,264,265,265],
[222,228,241,241,282,0,241,241,233],
[264,300,281,272,286,309,0,269,279],
[250,296,271,283,285,309,281,0,281],
[253,289,270,248,285,317,271,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,281,275,285,273,261,270,267],
[251,0,270,262,258,269,265,259,255],
[269,280,0,268,276,275,269,264,258],
[275,288,282,0,279,290,271,260,264],
[265,292,274,271,0,265,287,259,263],
[277,281,275,260,285,0,292,272,271],
[289,285,281,279,263,258,0,277,279],
[280,291,286,290,291,278,273,0,285],
[283,295,292,286,287,279,271,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,263,293,262,277,274,272,271],
[290,0,283,296,275,289,263,278,260],
[287,267,0,277,266,258,276,265,262],
[257,254,273,0,249,257,259,272,244],
[288,275,284,301,0,263,278,285,279],
[273,261,292,293,287,0,287,279,267],
[276,287,274,291,272,263,0,272,253],
[278,272,285,278,265,271,278,0,249],
[279,290,288,306,271,283,297,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,277,308,287,257,267,284,256],
[294,0,297,314,270,288,285,257,284],
[273,253,0,300,250,273,267,288,276],
[242,236,250,0,239,264,264,254,257],
[263,280,300,311,0,254,269,280,287],
[293,262,277,286,296,0,273,288,292],
[283,265,283,286,281,277,0,297,279],
[266,293,262,296,270,262,253,0,266],
[294,266,274,293,263,258,271,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,300,271,315,281,314,303,262],
[255,0,319,265,285,285,279,288,278],
[250,231,0,285,270,261,253,293,246],
[279,285,265,0,268,286,261,269,271],
[235,265,280,282,0,264,258,289,247],
[269,265,289,264,286,0,259,262,250],
[236,271,297,289,292,291,0,323,266],
[247,262,257,281,261,288,227,0,251],
[288,272,304,279,303,300,284,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,282,282,309,269,227,255,310],
[292,0,298,258,298,292,253,252,289],
[268,252,0,262,301,281,285,254,249],
[268,292,288,0,239,283,295,282,289],
[241,252,249,311,0,278,262,239,275],
[281,258,269,267,272,0,283,253,269],
[323,297,265,255,288,267,0,229,281],
[295,298,296,268,311,297,321,0,282],
[240,261,301,261,275,281,269,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,264,291,284,294,268,288,269],
[280,0,273,286,300,281,273,277,293],
[286,277,0,284,295,274,253,276,295],
[259,264,266,0,280,277,247,262,274],
[266,250,255,270,0,281,256,260,277],
[256,269,276,273,269,0,243,255,258],
[282,277,297,303,294,307,0,269,307],
[262,273,274,288,290,295,281,0,281],
[281,257,255,276,273,292,243,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,295,261,288,298,272,285,280],
[280,0,313,288,296,275,296,324,283],
[255,237,0,280,248,252,284,294,238],
[289,262,270,0,256,288,272,300,242],
[262,254,302,294,0,295,289,312,300],
[252,275,298,262,255,0,254,312,264],
[278,254,266,278,261,296,0,318,253],
[265,226,256,250,238,238,232,0,219],
[270,267,312,308,250,286,297,331,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,258,267,277,280,287,275,278],
[286,0,272,275,274,293,299,280,305],
[292,278,0,262,271,285,278,269,304],
[283,275,288,0,274,285,296,293,303],
[273,276,279,276,0,282,295,282,302],
[270,257,265,265,268,0,262,263,283],
[263,251,272,254,255,288,0,278,289],
[275,270,281,257,268,287,272,0,283],
[272,245,246,247,248,267,261,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,255,295,299,271,271,278,304],
[310,0,277,288,295,268,308,293,290],
[295,273,0,300,329,295,298,294,309],
[255,262,250,0,281,245,274,266,286],
[251,255,221,269,0,268,252,281,285],
[279,282,255,305,282,0,302,281,315],
[279,242,252,276,298,248,0,276,297],
[272,257,256,284,269,269,274,0,313],
[246,260,241,264,265,235,253,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,278,260,264,257,277,273,254],
[268,0,274,252,258,251,276,261,253],
[272,276,0,261,282,263,286,272,265],
[290,298,289,0,280,268,284,293,275],
[286,292,268,270,0,260,279,274,275],
[293,299,287,282,290,0,286,285,268],
[273,274,264,266,271,264,0,272,259],
[277,289,278,257,276,265,278,0,269],
[296,297,285,275,275,282,291,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,276,272,283,306,299,282,290],
[260,0,276,281,281,289,279,266,267],
[274,274,0,285,263,286,276,294,306],
[278,269,265,0,264,300,302,254,268],
[267,269,287,286,0,286,269,252,269],
[244,261,264,250,264,0,259,287,271],
[251,271,274,248,281,291,0,280,291],
[268,284,256,296,298,263,270,0,268],
[260,283,244,282,281,279,259,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,273,253,264,255,269,284,258],
[270,0,287,275,288,259,272,285,284],
[277,263,0,272,277,260,282,287,271],
[297,275,278,0,270,283,280,305,280],
[286,262,273,280,0,258,296,279,287],
[295,291,290,267,292,0,300,295,288],
[281,278,268,270,254,250,0,274,266],
[266,265,263,245,271,255,276,0,258],
[292,266,279,270,263,262,284,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,275,311,276,298,289,281,289],
[264,0,272,265,292,263,295,309,276],
[275,278,0,274,303,281,278,268,283],
[239,285,276,0,250,266,275,258,257],
[274,258,247,300,0,302,272,301,291],
[252,287,269,284,248,0,266,289,278],
[261,255,272,275,278,284,0,278,250],
[269,241,282,292,249,261,272,0,272],
[261,274,267,293,259,272,300,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,286,302,284,266,297,273,291],
[274,0,274,287,284,283,253,259,302],
[264,276,0,270,271,275,261,271,293],
[248,263,280,0,281,272,285,254,266],
[266,266,279,269,0,270,250,246,233],
[284,267,275,278,280,0,260,278,255],
[253,297,289,265,300,290,0,258,258],
[277,291,279,296,304,272,292,0,277],
[259,248,257,284,317,295,292,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,294,301,300,284,305,289,274],
[228,0,271,260,274,264,270,256,253],
[256,279,0,281,270,266,282,267,272],
[249,290,269,0,271,285,279,277,269],
[250,276,280,279,0,274,274,283,268],
[266,286,284,265,276,0,274,265,269],
[245,280,268,271,276,276,0,283,275],
[261,294,283,273,267,285,267,0,260],
[276,297,278,281,282,281,275,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,273,255,230,318,249,227,270],
[278,0,280,259,313,316,279,297,316],
[277,270,0,262,259,298,297,212,284],
[295,291,288,0,297,317,315,261,301],
[320,237,291,253,0,248,251,247,322],
[232,234,252,233,302,0,232,182,320],
[301,271,253,235,299,318,0,266,339],
[323,253,338,289,303,368,284,0,343],
[280,234,266,249,228,230,211,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,292,265,270,285,282,266,290],
[238,0,288,266,264,283,280,255,280],
[258,262,0,262,260,255,278,250,279],
[285,284,288,0,267,301,288,280,281],
[280,286,290,283,0,293,267,269,307],
[265,267,295,249,257,0,262,248,288],
[268,270,272,262,283,288,0,274,262],
[284,295,300,270,281,302,276,0,278],
[260,270,271,269,243,262,288,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,301,290,292,244,289,265,316],
[306,0,299,321,275,283,319,243,269],
[249,251,0,281,236,242,257,227,273],
[260,229,269,0,262,248,251,239,288],
[258,275,314,288,0,259,287,232,314],
[306,267,308,302,291,0,279,297,332],
[261,231,293,299,263,271,0,266,324],
[285,307,323,311,318,253,284,0,333],
[234,281,277,262,236,218,226,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,251,265,261,270,278,272,279],
[267,0,268,267,282,274,287,263,263],
[299,282,0,275,288,279,285,279,286],
[285,283,275,0,273,296,260,258,278],
[289,268,262,277,0,277,281,277,285],
[280,276,271,254,273,0,277,265,269],
[272,263,265,290,269,273,0,284,273],
[278,287,271,292,273,285,266,0,285],
[271,287,264,272,265,281,277,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,299,299,293,300,294,276,280],
[275,0,289,284,290,310,311,272,286],
[251,261,0,290,263,291,290,259,276],
[251,266,260,0,285,286,255,258,259],
[257,260,287,265,0,293,280,236,284],
[250,240,259,264,257,0,277,257,273],
[256,239,260,295,270,273,0,242,255],
[274,278,291,292,314,293,308,0,285],
[270,264,274,291,266,277,295,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,269,254,257,279,290,270,266],
[279,0,297,276,274,285,281,291,289],
[281,253,0,275,280,273,268,271,263],
[296,274,275,0,265,276,265,285,273],
[293,276,270,285,0,284,278,276,278],
[271,265,277,274,266,0,292,262,280],
[260,269,282,285,272,258,0,272,272],
[280,259,279,265,274,288,278,0,261],
[284,261,287,277,272,270,278,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,284,275,276,282,276,282,255],
[280,0,260,293,270,283,255,286,286],
[266,290,0,281,272,276,275,283,303],
[275,257,269,0,269,275,275,284,273],
[274,280,278,281,0,292,290,290,273],
[268,267,274,275,258,0,273,286,269],
[274,295,275,275,260,277,0,272,261],
[268,264,267,266,260,264,278,0,248],
[295,264,247,277,277,281,289,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,286,284,284,270,281,278,280],
[270,0,282,268,284,298,260,272,271],
[264,268,0,276,271,269,266,278,277],
[266,282,274,0,278,267,274,266,271],
[266,266,279,272,0,270,278,265,285],
[280,252,281,283,280,0,279,274,275],
[269,290,284,276,272,271,0,280,291],
[272,278,272,284,285,276,270,0,279],
[270,279,273,279,265,275,259,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,251,292,277,275,276,261,277],
[259,0,245,270,280,260,266,264,264],
[299,305,0,285,279,291,294,285,273],
[258,280,265,0,257,261,261,256,267],
[273,270,271,293,0,278,258,269,278],
[275,290,259,289,272,0,286,272,270],
[274,284,256,289,292,264,0,267,273],
[289,286,265,294,281,278,283,0,268],
[273,286,277,283,272,280,277,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,281,290,277,294,281,274,298],
[274,0,277,267,271,293,262,268,273],
[269,273,0,280,275,304,287,271,284],
[260,283,270,0,274,291,273,287,285],
[273,279,275,276,0,297,276,290,270],
[256,257,246,259,253,0,273,244,268],
[269,288,263,277,274,277,0,269,284],
[276,282,279,263,260,306,281,0,290],
[252,277,266,265,280,282,266,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,269,270,276,268,262,277,284],
[238,0,279,291,285,247,256,230,261],
[281,271,0,301,282,258,263,243,228],
[280,259,249,0,273,257,282,250,269],
[274,265,268,277,0,260,251,248,255],
[282,303,292,293,290,0,274,262,258],
[288,294,287,268,299,276,0,283,312],
[273,320,307,300,302,288,267,0,298],
[266,289,322,281,295,292,238,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,228,315,303,239,340,244,273],
[260,0,260,273,278,263,308,284,267],
[322,290,0,305,292,284,304,280,266],
[235,277,245,0,254,256,305,265,243],
[247,272,258,296,0,259,295,267,282],
[311,287,266,294,291,0,288,261,245],
[210,242,246,245,255,262,0,251,276],
[306,266,270,285,283,289,299,0,303],
[277,283,284,307,268,305,274,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,267,281,265,267,284,277,270],
[272,0,271,298,283,271,287,292,294],
[283,279,0,290,290,276,302,275,299],
[269,252,260,0,256,269,277,272,272],
[285,267,260,294,0,269,292,261,271],
[283,279,274,281,281,0,300,279,275],
[266,263,248,273,258,250,0,263,264],
[273,258,275,278,289,271,287,0,278],
[280,256,251,278,279,275,286,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,278,279,261,260,266,273,256],
[272,0,280,270,280,271,291,307,284],
[272,270,0,277,277,264,285,282,272],
[271,280,273,0,273,267,284,276,284],
[289,270,273,277,0,285,281,287,274],
[290,279,286,283,265,0,307,276,276],
[284,259,265,266,269,243,0,271,261],
[277,243,268,274,263,274,279,0,259],
[294,266,278,266,276,274,289,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,297,300,354,292,275,293,319],
[262,0,275,280,328,291,253,268,296],
[253,275,0,273,310,269,283,272,299],
[250,270,277,0,320,267,251,279,302],
[196,222,240,230,0,260,233,236,267],
[258,259,281,283,290,0,274,264,274],
[275,297,267,299,317,276,0,279,321],
[257,282,278,271,314,286,271,0,302],
[231,254,251,248,283,276,229,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,260,272,248,264,263,244,250],
[293,0,268,286,269,277,287,286,263],
[290,282,0,288,274,257,260,286,265],
[278,264,262,0,258,268,278,275,266],
[302,281,276,292,0,269,280,279,285],
[286,273,293,282,281,0,282,287,258],
[287,263,290,272,270,268,0,275,262],
[306,264,264,275,271,263,275,0,284],
[300,287,285,284,265,292,288,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,268,297,296,282,275,276,276],
[266,0,255,255,273,268,259,248,261],
[282,295,0,258,277,268,279,267,265],
[253,295,292,0,287,285,288,255,262],
[254,277,273,263,0,265,261,278,254],
[268,282,282,265,285,0,281,284,275],
[275,291,271,262,289,269,0,275,254],
[274,302,283,295,272,266,275,0,280],
[274,289,285,288,296,275,296,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,295,300,272,336,282,238,273],
[303,0,288,297,282,330,252,243,270],
[255,262,0,314,250,321,287,252,281],
[250,253,236,0,247,314,236,249,272],
[278,268,300,303,0,316,241,251,299],
[214,220,229,236,234,0,209,193,212],
[268,298,263,314,309,341,0,249,300],
[312,307,298,301,299,357,301,0,275],
[277,280,269,278,251,338,250,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,280,266,249,255,258,259,267],
[274,0,251,272,260,250,244,253,255],
[270,299,0,271,253,249,266,258,250],
[284,278,279,0,248,252,272,268,252],
[301,290,297,302,0,264,284,280,278],
[295,300,301,298,286,0,288,263,287],
[292,306,284,278,266,262,0,275,274],
[291,297,292,282,270,287,275,0,285],
[283,295,300,298,272,263,276,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,269,274,267,253,241,273,234],
[284,0,259,269,253,264,299,280,261],
[281,291,0,327,270,268,274,294,286],
[276,281,223,0,287,244,283,274,227],
[283,297,280,263,0,267,291,276,278],
[297,286,282,306,283,0,282,310,267],
[309,251,276,267,259,268,0,319,253],
[277,270,256,276,274,240,231,0,226],
[316,289,264,323,272,283,297,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,255,261,242,274,188,233,253],
[323,0,287,269,270,255,225,249,270],
[295,263,0,287,251,243,239,299,257],
[289,281,263,0,298,236,264,308,303],
[308,280,299,252,0,254,241,277,240],
[276,295,307,314,296,0,252,301,349],
[362,325,311,286,309,298,0,356,259],
[317,301,251,242,273,249,194,0,222],
[297,280,293,247,310,201,291,328,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,264,270,248,260,251,240,257],
[285,0,275,274,239,276,297,262,266],
[286,275,0,279,285,302,280,278,294],
[280,276,271,0,250,279,275,280,276],
[302,311,265,300,0,285,284,269,295],
[290,274,248,271,265,0,273,259,257],
[299,253,270,275,266,277,0,260,280],
[310,288,272,270,281,291,290,0,275],
[293,284,256,274,255,293,270,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,297,251,245,266,261,301,279],
[251,0,254,265,252,242,225,267,272],
[253,296,0,257,263,271,254,269,275],
[299,285,293,0,252,274,274,310,281],
[305,298,287,298,0,269,275,293,303],
[284,308,279,276,281,0,269,260,284],
[289,325,296,276,275,281,0,278,308],
[249,283,281,240,257,290,272,0,285],
[271,278,275,269,247,266,242,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,276,286,292,287,282,283,252],
[277,0,265,270,297,300,283,299,263],
[274,285,0,278,307,276,298,288,281],
[264,280,272,0,308,287,277,283,280],
[258,253,243,242,0,269,265,260,260],
[263,250,274,263,281,0,263,281,276],
[268,267,252,273,285,287,0,268,265],
[267,251,262,267,290,269,282,0,267],
[298,287,269,270,290,274,285,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,277,300,273,268,291,278,276],
[264,0,269,273,260,264,281,264,264],
[273,281,0,287,268,272,276,258,286],
[250,277,263,0,269,254,289,264,302],
[277,290,282,281,0,277,267,277,304],
[282,286,278,296,273,0,279,281,293],
[259,269,274,261,283,271,0,261,284],
[272,286,292,286,273,269,289,0,286],
[274,286,264,248,246,257,266,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,259,255,269,263,260,231,238],
[289,0,277,257,258,303,324,277,290],
[291,273,0,276,276,287,286,255,267],
[295,293,274,0,264,291,291,265,258],
[281,292,274,286,0,264,291,240,257],
[287,247,263,259,286,0,286,238,289],
[290,226,264,259,259,264,0,234,236],
[319,273,295,285,310,312,316,0,269],
[312,260,283,292,293,261,314,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,260,281,252,276,267,285,261],
[298,0,290,285,287,285,282,293,275],
[290,260,0,282,261,282,280,298,255],
[269,265,268,0,252,253,264,330,260],
[298,263,289,298,0,285,278,316,272],
[274,265,268,297,265,0,266,309,267],
[283,268,270,286,272,284,0,298,279],
[265,257,252,220,234,241,252,0,241],
[289,275,295,290,278,283,271,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,274,265,254,233,257,228,257],
[275,0,264,282,283,251,269,252,269],
[276,286,0,275,295,275,284,255,272],
[285,268,275,0,297,272,268,269,274],
[296,267,255,253,0,247,251,231,274],
[317,299,275,278,303,0,277,279,291],
[293,281,266,282,299,273,0,272,306],
[322,298,295,281,319,271,278,0,293],
[293,281,278,276,276,259,244,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,310,307,308,314,275,289,320],
[243,0,275,268,277,298,256,285,284],
[240,275,0,264,254,288,267,273,265],
[243,282,286,0,263,286,260,279,294],
[242,273,296,287,0,286,266,278,272],
[236,252,262,264,264,0,258,262,275],
[275,294,283,290,284,292,0,284,288],
[261,265,277,271,272,288,266,0,274],
[230,266,285,256,278,275,262,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,276,278,251,259,264,246,239],
[311,0,312,317,305,345,290,264,271],
[274,238,0,317,269,278,240,244,273],
[272,233,233,0,244,251,259,236,259],
[299,245,281,306,0,286,255,275,269],
[291,205,272,299,264,0,269,267,260],
[286,260,310,291,295,281,0,264,265],
[304,286,306,314,275,283,286,0,314],
[311,279,277,291,281,290,285,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,265,288,267,281,262,245,245],
[279,0,300,254,257,309,312,247,256],
[285,250,0,282,256,297,255,266,272],
[262,296,268,0,280,307,248,249,273],
[283,293,294,270,0,278,267,290,286],
[269,241,253,243,272,0,250,264,273],
[288,238,295,302,283,300,0,263,270],
[305,303,284,301,260,286,287,0,245],
[305,294,278,277,264,277,280,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,288,280,254,271,271,274,270],
[291,0,275,270,266,262,291,271,286],
[262,275,0,274,249,275,280,276,270],
[270,280,276,0,272,267,271,267,276],
[296,284,301,278,0,265,306,291,294],
[279,288,275,283,285,0,297,276,288],
[279,259,270,279,244,253,0,267,256],
[276,279,274,283,259,274,283,0,264],
[280,264,280,274,256,262,294,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,281,271,292,291,257,254,248],
[298,0,293,285,288,302,280,282,271],
[269,257,0,267,280,295,250,258,239],
[279,265,283,0,290,286,260,269,252],
[258,262,270,260,0,279,260,265,250],
[259,248,255,264,271,0,245,252,241],
[293,270,300,290,290,305,0,285,280],
[296,268,292,281,285,298,265,0,259],
[302,279,311,298,300,309,270,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,275,284,257,267,287,283,269],
[298,0,282,292,278,275,274,287,290],
[275,268,0,278,255,269,263,273,263],
[266,258,272,0,247,285,265,262,276],
[293,272,295,303,0,282,269,295,281],
[283,275,281,265,268,0,250,282,277],
[263,276,287,285,281,300,0,275,293],
[267,263,277,288,255,268,275,0,260],
[281,260,287,274,269,273,257,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,280,267,274,280,300,271,286],
[284,0,293,287,264,293,295,288,293],
[270,257,0,276,262,274,272,255,261],
[283,263,274,0,272,279,277,294,277],
[276,286,288,278,0,285,285,266,278],
[270,257,276,271,265,0,268,257,246],
[250,255,278,273,265,282,0,266,255],
[279,262,295,256,284,293,284,0,271],
[264,257,289,273,272,304,295,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,266,252,277,264,274,270,275],
[259,0,265,269,269,280,275,292,258],
[284,285,0,274,272,268,294,290,274],
[298,281,276,0,272,292,285,289,279],
[273,281,278,278,0,278,277,276,278],
[286,270,282,258,272,0,273,283,270],
[276,275,256,265,273,277,0,279,281],
[280,258,260,261,274,267,271,0,274],
[275,292,276,271,272,280,269,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,287,249,250,276,306,301,249],
[271,0,253,263,269,263,305,295,248],
[263,297,0,237,280,263,294,321,231],
[301,287,313,0,274,290,283,307,307],
[300,281,270,276,0,304,284,300,258],
[274,287,287,260,246,0,288,297,250],
[244,245,256,267,266,262,0,280,249],
[249,255,229,243,250,253,270,0,235],
[301,302,319,243,292,300,301,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,306,300,275,306,281,288,286],
[257,0,291,271,279,280,266,285,264],
[244,259,0,269,268,293,261,255,223],
[250,279,281,0,269,288,272,270,266],
[275,271,282,281,0,273,268,285,257],
[244,270,257,262,277,0,267,267,256],
[269,284,289,278,282,283,0,289,259],
[262,265,295,280,265,283,261,0,265],
[264,286,327,284,293,294,291,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,264,272,274,295,260,254,270],
[320,0,277,295,295,270,249,265,281],
[286,273,0,295,289,292,269,307,309],
[278,255,255,0,270,296,284,256,277],
[276,255,261,280,0,271,262,247,286],
[255,280,258,254,279,0,271,269,268],
[290,301,281,266,288,279,0,286,298],
[296,285,243,294,303,281,264,0,274],
[280,269,241,273,264,282,252,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,292,275,292,289,324,288,242],
[229,0,352,288,276,237,327,214,275],
[258,198,0,244,242,277,263,245,273],
[275,262,306,0,290,278,340,233,288],
[258,274,308,260,0,283,291,288,259],
[261,313,273,272,267,0,307,273,239],
[226,223,287,210,259,243,0,225,267],
[262,336,305,317,262,277,325,0,319],
[308,275,277,262,291,311,283,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,300,357,301,389,270,220,272],
[246,0,221,357,302,281,301,278,413],
[250,329,0,354,274,334,221,247,329],
[193,193,196,0,111,168,137,194,138],
[249,248,276,439,0,195,302,250,220],
[161,269,216,382,355,0,273,189,299],
[280,249,329,413,248,277,0,334,276],
[330,272,303,356,300,361,216,0,328],
[278,137,221,412,330,251,274,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,284,266,282,267,262,269,279],
[269,0,269,260,271,259,242,262,305],
[266,281,0,260,266,265,249,254,303],
[284,290,290,0,291,295,270,285,304],
[268,279,284,259,0,288,272,258,286],
[283,291,285,255,262,0,246,261,306],
[288,308,301,280,278,304,0,275,305],
[281,288,296,265,292,289,275,0,278],
[271,245,247,246,264,244,245,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,278,285,291,270,294,261,284],
[287,0,266,309,294,283,296,290,286],
[272,284,0,292,282,284,302,293,279],
[265,241,258,0,274,279,284,256,266],
[259,256,268,276,0,272,293,264,257],
[280,267,266,271,278,0,299,268,271],
[256,254,248,266,257,251,0,258,270],
[289,260,257,294,286,282,292,0,274],
[266,264,271,284,293,279,280,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,285,299,251,270,297,275,254],
[267,0,314,298,301,292,304,273,266],
[265,236,0,306,251,274,279,250,243],
[251,252,244,0,251,227,260,259,244],
[299,249,299,299,0,270,294,280,262],
[280,258,276,323,280,0,294,261,270],
[253,246,271,290,256,256,0,259,233],
[275,277,300,291,270,289,291,0,281],
[296,284,307,306,288,280,317,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,318,295,257,286,287,284,282],
[277,0,288,304,324,291,268,288,273],
[232,262,0,239,233,245,236,231,220],
[255,246,311,0,246,208,299,203,224],
[293,226,317,304,0,287,271,247,246],
[264,259,305,342,263,0,306,277,261],
[263,282,314,251,279,244,0,297,255],
[266,262,319,347,303,273,253,0,262],
[268,277,330,326,304,289,295,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,291,293,287,287,285,291,273],
[257,0,259,300,275,284,276,288,268],
[259,291,0,301,268,267,278,288,267],
[257,250,249,0,283,272,250,269,248],
[263,275,282,267,0,265,263,287,262],
[263,266,283,278,285,0,256,296,283],
[265,274,272,300,287,294,0,272,279],
[259,262,262,281,263,254,278,0,265],
[277,282,283,302,288,267,271,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,273,273,323,287,286,272,284],
[285,0,238,266,266,269,290,277,294],
[277,312,0,279,273,293,280,289,306],
[277,284,271,0,293,291,283,283,308],
[227,284,277,257,0,276,259,271,282],
[263,281,257,259,274,0,271,247,249],
[264,260,270,267,291,279,0,267,271],
[278,273,261,267,279,303,283,0,287],
[266,256,244,242,268,301,279,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,262,311,287,312,275,282,280],
[314,0,266,306,292,280,299,306,299],
[288,284,0,302,275,320,294,316,285],
[239,244,248,0,246,276,277,289,253],
[263,258,275,304,0,302,291,295,308],
[238,270,230,274,248,0,281,258,257],
[275,251,256,273,259,269,0,299,283],
[268,244,234,261,255,292,251,0,283],
[270,251,265,297,242,293,267,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,294,282,276,305,308,279,254],
[252,0,288,264,243,292,266,271,244],
[256,262,0,292,267,298,300,270,253],
[268,286,258,0,254,283,277,277,232],
[274,307,283,296,0,294,295,272,262],
[245,258,252,267,256,0,255,270,270],
[242,284,250,273,255,295,0,257,255],
[271,279,280,273,278,280,293,0,291],
[296,306,297,318,288,280,295,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,285,299,263,273,265,261,269],
[282,0,294,309,262,278,289,267,281],
[265,256,0,286,275,263,265,264,281],
[251,241,264,0,262,269,258,260,259],
[287,288,275,288,0,292,288,279,292],
[277,272,287,281,258,0,248,274,295],
[285,261,285,292,262,302,0,273,283],
[289,283,286,290,271,276,277,0,286],
[281,269,269,291,258,255,267,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,233,265,244,258,267,286,264],
[292,0,279,246,268,300,278,278,273],
[317,271,0,285,283,292,296,281,293],
[285,304,265,0,259,283,289,269,286],
[306,282,267,291,0,296,307,299,300],
[292,250,258,267,254,0,272,277,273],
[283,272,254,261,243,278,0,286,295],
[264,272,269,281,251,273,264,0,273],
[286,277,257,264,250,277,255,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,291,285,266,276,288,274,273],
[279,0,308,281,306,273,283,290,274],
[259,242,0,289,278,257,279,276,264],
[265,269,261,0,273,266,286,279,269],
[284,244,272,277,0,271,283,262,257],
[274,277,293,284,279,0,285,270,280],
[262,267,271,264,267,265,0,267,262],
[276,260,274,271,288,280,283,0,263],
[277,276,286,281,293,270,288,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,274,263,270,269,271,281,277],
[275,0,298,281,283,274,261,277,280],
[276,252,0,262,255,239,243,272,275],
[287,269,288,0,287,269,249,249,306],
[280,267,295,263,0,244,266,270,302],
[281,276,311,281,306,0,280,269,285],
[279,289,307,301,284,270,0,268,330],
[269,273,278,301,280,281,282,0,284],
[273,270,275,244,248,265,220,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,280,281,320,271,284,291,281],
[247,0,258,273,257,265,260,264,264],
[270,292,0,265,294,277,284,272,275],
[269,277,285,0,259,272,277,287,291],
[230,293,256,291,0,266,258,272,253],
[279,285,273,278,284,0,279,288,273],
[266,290,266,273,292,271,0,266,273],
[259,286,278,263,278,262,284,0,249],
[269,286,275,259,297,277,277,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,267,265,221,238,239,267,257],
[292,0,311,289,254,275,266,289,260],
[283,239,0,259,250,244,234,265,258],
[285,261,291,0,245,259,252,272,253],
[329,296,300,305,0,261,256,287,269],
[312,275,306,291,289,0,276,287,293],
[311,284,316,298,294,274,0,289,282],
[283,261,285,278,263,263,261,0,254],
[293,290,292,297,281,257,268,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,274,273,284,267,281,291,300],
[264,0,274,273,277,256,275,289,285],
[276,276,0,268,291,276,274,290,302],
[277,277,282,0,284,258,284,300,286],
[266,273,259,266,0,265,270,280,282],
[283,294,274,292,285,0,283,289,303],
[269,275,276,266,280,267,0,290,283],
[259,261,260,250,270,261,260,0,274],
[250,265,248,264,268,247,267,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,343,346,344,316,263,217,397],
[234,0,340,342,364,288,317,288,366],
[207,210,0,317,207,237,210,238,289],
[204,208,233,0,231,231,257,157,206],
[206,186,343,319,0,292,342,266,291],
[234,262,313,319,258,0,261,292,317],
[287,233,340,293,208,289,0,317,368],
[333,262,312,393,284,258,233,0,314],
[153,184,261,344,259,233,182,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,287,277,272,275,294,304,287],
[293,0,257,279,284,261,297,304,264],
[263,293,0,297,305,272,304,299,300],
[273,271,253,0,303,239,287,302,279],
[278,266,245,247,0,260,281,287,234],
[275,289,278,311,290,0,303,293,269],
[256,253,246,263,269,247,0,294,252],
[246,246,251,248,263,257,256,0,255],
[263,286,250,271,316,281,298,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,273,342,278,277,353,272,345],
[246,0,362,400,194,311,288,313,292],
[277,188,0,329,243,311,240,242,294],
[208,150,221,0,240,207,205,156,224],
[272,356,307,310,0,343,339,345,274],
[273,239,239,343,207,0,323,257,293],
[197,262,310,345,211,227,0,248,246],
[278,237,308,394,205,293,302,0,276],
[205,258,256,326,276,257,304,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,293,285,271,291,296,268,267],
[274,0,285,290,295,293,300,285,282],
[257,265,0,282,275,274,288,272,290],
[265,260,268,0,283,277,289,265,244],
[279,255,275,267,0,283,294,261,251],
[259,257,276,273,267,0,295,268,283],
[254,250,262,261,256,255,0,252,246],
[282,265,278,285,289,282,298,0,275],
[283,268,260,306,299,267,304,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,271,311,312,293,272,270,294],
[267,0,273,328,317,277,269,272,284],
[279,277,0,289,297,297,293,264,293],
[239,222,261,0,293,233,236,244,257],
[238,233,253,257,0,253,255,234,243],
[257,273,253,317,297,0,278,278,285],
[278,281,257,314,295,272,0,251,272],
[280,278,286,306,316,272,299,0,295],
[256,266,257,293,307,265,278,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,291,275,308,278,299,271,293],
[288,0,272,270,310,263,267,288,263],
[259,278,0,310,335,286,295,272,264],
[275,280,240,0,280,256,251,256,250],
[242,240,215,270,0,241,253,242,236],
[272,287,264,294,309,0,278,278,275],
[251,283,255,299,297,272,0,295,262],
[279,262,278,294,308,272,255,0,280],
[257,287,286,300,314,275,288,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,268,293,282,266,267,268,267],
[289,0,299,284,289,286,279,275,273],
[282,251,0,262,275,287,286,294,275],
[257,266,288,0,270,266,269,284,261],
[268,261,275,280,0,279,274,280,260],
[284,264,263,284,271,0,274,295,285],
[283,271,264,281,276,276,0,279,266],
[282,275,256,266,270,255,271,0,256],
[283,277,275,289,290,265,284,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,323,239,276,267,231,213,239],
[311,0,330,291,284,311,295,275,278],
[227,220,0,240,255,262,260,240,277],
[311,259,310,0,298,300,312,256,249],
[274,266,295,252,0,310,271,220,253],
[283,239,288,250,240,0,241,235,255],
[319,255,290,238,279,309,0,226,232],
[337,275,310,294,330,315,324,0,296],
[311,272,273,301,297,295,318,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,303,263,288,279,281,317,283],
[231,0,262,267,224,266,234,278,208],
[247,288,0,261,260,281,279,294,273],
[287,283,289,0,268,291,270,290,269],
[262,326,290,282,0,312,286,312,280],
[271,284,269,259,238,0,253,311,247],
[269,316,271,280,264,297,0,317,280],
[233,272,256,260,238,239,233,0,253],
[267,342,277,281,270,303,270,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,289,268,320,280,250,282,261],
[261,0,260,293,295,287,248,291,272],
[261,290,0,246,284,295,283,275,276],
[282,257,304,0,340,305,318,303,274],
[230,255,266,210,0,298,247,253,262],
[270,263,255,245,252,0,260,256,253],
[300,302,267,232,303,290,0,266,284],
[268,259,275,247,297,294,284,0,266],
[289,278,274,276,288,297,266,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,270,298,279,268,276,279,275],
[269,0,274,285,289,277,273,277,262],
[280,276,0,292,285,274,290,275,275],
[252,265,258,0,266,250,262,272,263],
[271,261,265,284,0,272,286,280,272],
[282,273,276,300,278,0,284,276,282],
[274,277,260,288,264,266,0,277,267],
[271,273,275,278,270,274,273,0,275],
[275,288,275,287,278,268,283,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,298,276,294,288,297,304,260],
[249,0,255,257,293,257,275,286,280],
[252,295,0,279,271,258,303,279,261],
[274,293,271,0,287,258,307,302,288],
[256,257,279,263,0,248,300,283,267],
[262,293,292,292,302,0,295,314,264],
[253,275,247,243,250,255,0,267,236],
[246,264,271,248,267,236,283,0,239],
[290,270,289,262,283,286,314,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,288,274,278,248,269,261,286],
[279,0,317,270,272,258,280,274,288],
[262,233,0,288,251,240,261,221,258],
[276,280,262,0,270,249,268,219,280],
[272,278,299,280,0,254,253,281,283],
[302,292,310,301,296,0,328,268,291],
[281,270,289,282,297,222,0,257,290],
[289,276,329,331,269,282,293,0,291],
[264,262,292,270,267,259,260,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,274,285,318,271,288,292,272],
[261,0,230,252,285,259,244,220,216],
[276,320,0,263,309,260,294,300,273],
[265,298,287,0,316,292,263,277,281],
[232,265,241,234,0,259,228,258,228],
[279,291,290,258,291,0,268,244,241],
[262,306,256,287,322,282,0,274,288],
[258,330,250,273,292,306,276,0,269],
[278,334,277,269,322,309,262,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,282,271,272,289,258,270,261],
[266,0,274,269,264,310,293,272,264],
[268,276,0,289,249,286,269,287,285],
[279,281,261,0,249,315,286,270,235],
[278,286,301,301,0,279,270,297,279],
[261,240,264,235,271,0,238,277,264],
[292,257,281,264,280,312,0,279,283],
[280,278,263,280,253,273,271,0,286],
[289,286,265,315,271,286,267,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,274,274,259,252,250,265,264],
[285,0,280,290,288,270,268,276,271],
[276,270,0,273,260,267,273,276,278],
[276,260,277,0,266,280,281,252,271],
[291,262,290,284,0,285,271,281,266],
[298,280,283,270,265,0,289,273,294],
[300,282,277,269,279,261,0,261,266],
[285,274,274,298,269,277,289,0,281],
[286,279,272,279,284,256,284,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,276,285,306,264,261,261,285],
[237,0,273,283,272,260,269,227,265],
[274,277,0,291,279,238,274,235,247],
[265,267,259,0,278,247,261,212,262],
[244,278,271,272,0,239,250,251,225],
[286,290,312,303,311,0,282,277,274],
[289,281,276,289,300,268,0,261,284],
[289,323,315,338,299,273,289,0,289],
[265,285,303,288,325,276,266,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,279,216,220,282,282,264,233],
[300,0,286,299,256,283,239,282,222],
[271,264,0,299,286,283,239,264,207],
[334,251,251,0,303,252,273,265,287],
[330,294,264,247,0,329,313,313,233],
[268,267,267,298,221,0,289,265,210],
[268,311,311,277,237,261,0,293,251],
[286,268,286,285,237,285,257,0,286],
[317,328,343,263,317,340,299,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,251,264,272,251,280,251,262],
[299,0,273,278,283,278,285,264,301],
[299,277,0,287,268,283,280,260,301],
[286,272,263,0,263,258,287,261,287],
[278,267,282,287,0,269,290,277,266],
[299,272,267,292,281,0,293,271,309],
[270,265,270,263,260,257,0,254,267],
[299,286,290,289,273,279,296,0,305],
[288,249,249,263,284,241,283,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,275,293,286,282,291,299,288],
[259,0,267,267,265,296,267,271,280],
[275,283,0,298,285,297,277,289,302],
[257,283,252,0,259,275,276,263,261],
[264,285,265,291,0,269,273,281,287],
[268,254,253,275,281,0,263,273,279],
[259,283,273,274,277,287,0,275,275],
[251,279,261,287,269,277,275,0,285],
[262,270,248,289,263,271,275,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,288,287,267,284,283,273,284],
[270,0,285,293,278,282,268,284,291],
[262,265,0,273,272,273,280,258,271],
[263,257,277,0,264,261,257,254,274],
[283,272,278,286,0,277,276,283,299],
[266,268,277,289,273,0,261,275,284],
[267,282,270,293,274,289,0,281,300],
[277,266,292,296,267,275,269,0,282],
[266,259,279,276,251,266,250,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,275,230,180,226,277,277,319],
[275,0,277,231,227,275,278,416,275],
[275,273,0,230,230,270,325,324,275],
[320,319,320,0,318,319,275,276,321],
[370,323,320,232,0,365,280,370,322],
[324,275,280,231,185,0,279,280,325],
[273,272,225,275,270,271,0,411,365],
[273,134,226,274,180,270,139,0,365],
[231,275,275,229,228,225,185,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,274,290,290,275,290,287,301],
[258,0,263,278,276,269,284,282,268],
[276,287,0,289,275,267,294,288,278],
[260,272,261,0,264,267,269,269,263],
[260,274,275,286,0,266,279,268,285],
[275,281,283,283,284,0,285,284,272],
[260,266,256,281,271,265,0,267,270],
[263,268,262,281,282,266,283,0,275],
[249,282,272,287,265,278,280,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,265,250,265,264,270,245,259],
[286,0,285,294,282,292,271,285,282],
[285,265,0,278,248,274,262,277,286],
[300,256,272,0,285,272,290,281,303],
[285,268,302,265,0,284,278,275,278],
[286,258,276,278,266,0,270,270,285],
[280,279,288,260,272,280,0,284,289],
[305,265,273,269,275,280,266,0,257],
[291,268,264,247,272,265,261,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,280,275,305,362,308,279,285],
[233,0,286,265,243,278,244,277,212],
[270,264,0,261,270,336,304,246,243],
[275,285,289,0,293,303,265,292,236],
[245,307,280,257,0,316,296,288,241],
[188,272,214,247,234,0,250,249,241],
[242,306,246,285,254,300,0,256,244],
[271,273,304,258,262,301,294,0,210],
[265,338,307,314,309,309,306,340,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,268,308,303,313,288,310,295],
[259,0,261,276,265,266,255,292,254],
[282,289,0,280,268,305,272,309,284],
[242,274,270,0,273,251,262,283,259],
[247,285,282,277,0,268,264,286,263],
[237,284,245,299,282,0,275,293,268],
[262,295,278,288,286,275,0,285,267],
[240,258,241,267,264,257,265,0,237],
[255,296,266,291,287,282,283,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,273,259,263,266,275,281,261],
[271,0,279,285,257,291,283,297,279],
[277,271,0,283,272,286,265,286,293],
[291,265,267,0,275,276,270,283,281],
[287,293,278,275,0,293,280,293,311],
[284,259,264,274,257,0,253,261,263],
[275,267,285,280,270,297,0,276,268],
[269,253,264,267,257,289,274,0,272],
[289,271,257,269,239,287,282,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,270,278,271,272,278,301,258],
[269,0,223,272,243,237,232,259,222],
[280,327,0,266,282,256,249,298,269],
[272,278,284,0,249,256,286,324,284],
[279,307,268,301,0,274,286,318,296],
[278,313,294,294,276,0,303,284,252],
[272,318,301,264,264,247,0,269,242],
[249,291,252,226,232,266,281,0,256],
[292,328,281,266,254,298,308,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,256,282,277,283,270,304,290],
[283,0,272,316,286,296,293,295,285],
[294,278,0,291,287,290,256,288,285],
[268,234,259,0,268,285,272,267,275],
[273,264,263,282,0,319,283,299,326],
[267,254,260,265,231,0,255,282,281],
[280,257,294,278,267,295,0,304,275],
[246,255,262,283,251,268,246,0,276],
[260,265,265,275,224,269,275,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,266,281,251,286,281,261,265],
[276,0,255,274,269,269,283,263,260],
[284,295,0,298,263,283,270,275,281],
[269,276,252,0,247,273,283,265,276],
[299,281,287,303,0,287,273,270,279],
[264,281,267,277,263,0,279,259,259],
[269,267,280,267,277,271,0,255,257],
[289,287,275,285,280,291,295,0,274],
[285,290,269,274,271,291,293,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,249,265,265,254,245,261,247],
[289,0,263,262,277,263,268,253,275],
[301,287,0,268,275,281,276,268,259],
[285,288,282,0,284,283,273,265,271],
[285,273,275,266,0,248,265,277,272],
[296,287,269,267,302,0,285,269,265],
[305,282,274,277,285,265,0,275,252],
[289,297,282,285,273,281,275,0,277],
[303,275,291,279,278,285,298,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,276,289,252,265,261,271,278],
[287,0,271,295,276,276,272,283,276],
[274,279,0,282,259,266,274,276,284],
[261,255,268,0,252,253,270,261,264],
[298,274,291,298,0,281,289,269,299],
[285,274,284,297,269,0,271,279,293],
[289,278,276,280,261,279,0,268,271],
[279,267,274,289,281,271,282,0,284],
[272,274,266,286,251,257,279,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,278,279,251,273,275,282,270],
[289,0,277,276,270,277,259,275,262],
[272,273,0,284,259,261,266,276,275],
[271,274,266,0,265,261,277,291,279],
[299,280,291,285,0,280,278,275,278],
[277,273,289,289,270,0,279,290,276],
[275,291,284,273,272,271,0,276,281],
[268,275,274,259,275,260,274,0,245],
[280,288,275,271,272,274,269,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,275,325,306,329,295,284,280],
[255,0,272,293,276,316,255,275,245],
[275,278,0,288,319,325,296,294,277],
[225,257,262,0,261,283,250,279,233],
[244,274,231,289,0,288,273,249,247],
[221,234,225,267,262,0,235,243,227],
[255,295,254,300,277,315,0,280,254],
[266,275,256,271,301,307,270,0,255],
[270,305,273,317,303,323,296,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,368,281,267,279,244,280,317,243],
[182,0,244,291,232,236,256,296,265],
[269,306,0,284,267,258,222,305,271],
[283,259,266,0,304,280,295,331,280],
[271,318,283,246,0,273,219,257,257],
[306,314,292,270,277,0,253,317,245],
[270,294,328,255,331,297,0,329,305],
[233,254,245,219,293,233,221,0,256],
[307,285,279,270,293,305,245,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,283,276,263,274,271,268,286],
[266,0,285,295,261,274,268,265,297],
[267,265,0,288,263,278,296,269,307],
[274,255,262,0,248,274,271,274,290],
[287,289,287,302,0,266,289,260,272],
[276,276,272,276,284,0,287,280,303],
[279,282,254,279,261,263,0,289,274],
[282,285,281,276,290,270,261,0,278],
[264,253,243,260,278,247,276,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,252,290,280,250,265,249,290],
[288,0,272,280,276,282,301,284,286],
[298,278,0,271,280,273,278,287,289],
[260,270,279,0,266,258,268,283,275],
[270,274,270,284,0,254,277,276,272],
[300,268,277,292,296,0,291,289,306],
[285,249,272,282,273,259,0,289,273],
[301,266,263,267,274,261,261,0,276],
[260,264,261,275,278,244,277,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,247,282,261,213,313,287,301],
[243,0,227,241,311,282,303,258,321],
[303,323,0,252,301,271,324,271,339],
[268,309,298,0,312,276,277,281,347],
[289,239,249,238,0,250,280,270,306],
[337,268,279,274,300,0,344,271,365],
[237,247,226,273,270,206,0,233,304],
[263,292,279,269,280,279,317,0,322],
[249,229,211,203,244,185,246,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,292,291,266,292,272,251,260],
[277,0,294,257,280,292,257,263,259],
[258,256,0,282,266,266,269,278,247],
[259,293,268,0,259,257,270,267,249],
[284,270,284,291,0,287,257,252,266],
[258,258,284,293,263,0,272,258,256],
[278,293,281,280,293,278,0,240,267],
[299,287,272,283,298,292,310,0,278],
[290,291,303,301,284,294,283,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,314,323,278,305,334,269,285],
[241,0,257,263,254,238,258,281,262],
[236,293,0,269,192,249,251,283,281],
[227,287,281,0,223,214,260,198,237],
[272,296,358,327,0,269,282,251,278],
[245,312,301,336,281,0,283,296,314],
[216,292,299,290,268,267,0,263,223],
[281,269,267,352,299,254,287,0,290],
[265,288,269,313,272,236,327,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,289,301,281,289,264,287,294],
[255,0,264,228,254,260,257,284,249],
[261,286,0,244,244,290,255,254,243],
[249,322,306,0,275,306,294,303,289],
[269,296,306,275,0,299,276,298,253],
[261,290,260,244,251,0,271,273,262],
[286,293,295,256,274,279,0,265,267],
[263,266,296,247,252,277,285,0,263],
[256,301,307,261,297,288,283,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,265,272,268,262,280,259,263],
[276,0,284,264,264,278,285,277,278],
[285,266,0,257,265,273,279,269,271],
[278,286,293,0,274,285,288,279,275],
[282,286,285,276,0,283,287,273,270],
[288,272,277,265,267,0,296,269,273],
[270,265,271,262,263,254,0,273,263],
[291,273,281,271,277,281,277,0,275],
[287,272,279,275,280,277,287,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,262,272,304,262,315,289,273],
[280,0,278,292,274,276,292,261,277],
[288,272,0,272,268,286,298,285,280],
[278,258,278,0,259,261,297,265,286],
[246,276,282,291,0,249,321,268,256],
[288,274,264,289,301,0,319,281,309],
[235,258,252,253,229,231,0,251,256],
[261,289,265,285,282,269,299,0,263],
[277,273,270,264,294,241,294,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,282,269,280,287,261,277,274],
[260,0,287,265,292,279,278,261,295],
[268,263,0,263,296,273,255,275,267],
[281,285,287,0,294,288,272,271,280],
[270,258,254,256,0,274,263,253,251],
[263,271,277,262,276,0,262,272,280],
[289,272,295,278,287,288,0,261,286],
[273,289,275,279,297,278,289,0,281],
[276,255,283,270,299,270,264,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,295,281,278,262,307,281,303],
[252,0,256,274,246,265,264,261,272],
[255,294,0,274,264,268,281,267,295],
[269,276,276,0,265,261,280,281,279],
[272,304,286,285,0,281,287,278,280],
[288,285,282,289,269,0,289,273,278],
[243,286,269,270,263,261,0,288,283],
[269,289,283,269,272,277,262,0,283],
[247,278,255,271,270,272,267,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,291,257,279,267,252,254,287],
[298,0,282,261,276,273,280,258,301],
[259,268,0,248,271,272,257,253,279],
[293,289,302,0,273,309,304,284,295],
[271,274,279,277,0,276,283,265,285],
[283,277,278,241,274,0,264,268,289],
[298,270,293,246,267,286,0,271,281],
[296,292,297,266,285,282,279,0,279],
[263,249,271,255,265,261,269,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,248,244,248,272,262,273,263],
[294,0,279,274,268,265,274,299,262],
[302,271,0,286,275,289,290,325,298],
[306,276,264,0,300,255,273,307,292],
[302,282,275,250,0,290,286,295,294],
[278,285,261,295,260,0,267,291,275],
[288,276,260,277,264,283,0,307,271],
[277,251,225,243,255,259,243,0,236],
[287,288,252,258,256,275,279,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,270,274,269,284,265,267,262],
[270,0,264,263,260,260,257,267,269],
[280,286,0,286,249,277,273,261,290],
[276,287,264,0,275,277,260,270,296],
[281,290,301,275,0,299,281,278,290],
[266,290,273,273,251,0,280,278,298],
[285,293,277,290,269,270,0,271,270],
[283,283,289,280,272,272,279,0,303],
[288,281,260,254,260,252,280,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,266,299,296,278,298,274,308],
[248,0,300,283,286,263,297,270,319],
[284,250,0,269,283,262,294,248,303],
[251,267,281,0,270,260,292,254,298],
[254,264,267,280,0,270,274,283,270],
[272,287,288,290,280,0,283,249,307],
[252,253,256,258,276,267,0,218,269],
[276,280,302,296,267,301,332,0,290],
[242,231,247,252,280,243,281,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,259,258,262,263,277,269,289],
[279,0,269,256,284,267,273,257,279],
[291,281,0,285,277,273,283,270,271],
[292,294,265,0,291,280,261,284,260],
[288,266,273,259,0,280,265,263,267],
[287,283,277,270,270,0,265,277,281],
[273,277,267,289,285,285,0,271,288],
[281,293,280,266,287,273,279,0,268],
[261,271,279,290,283,269,262,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,258,274,264,278,269,285,252],
[277,0,254,271,292,282,266,275,281],
[292,296,0,279,290,285,262,302,274],
[276,279,271,0,275,269,261,302,262],
[286,258,260,275,0,293,262,297,273],
[272,268,265,281,257,0,261,277,277],
[281,284,288,289,288,289,0,302,250],
[265,275,248,248,253,273,248,0,267],
[298,269,276,288,277,273,300,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,280,255,309,244,295,305,296],
[256,0,241,206,292,224,240,222,184],
[270,309,0,256,342,275,287,286,306],
[295,344,294,0,335,240,284,296,289],
[241,258,208,215,0,252,267,248,252],
[306,326,275,310,298,0,278,316,275],
[255,310,263,266,283,272,0,255,292],
[245,328,264,254,302,234,295,0,290],
[254,366,244,261,298,275,258,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,270,298,316,292,286,298,271],
[264,0,274,284,286,276,277,260,256],
[280,276,0,280,301,275,268,284,266],
[252,266,270,0,289,298,257,271,275],
[234,264,249,261,0,284,258,278,252],
[258,274,275,252,266,0,268,262,247],
[264,273,282,293,292,282,0,293,284],
[252,290,266,279,272,288,257,0,263],
[279,294,284,275,298,303,266,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,195,193,221,275,274,304,223],
[273,0,246,217,274,217,272,358,246],
[355,304,0,245,304,274,243,384,303],
[357,333,305,0,361,305,245,469,304],
[329,276,246,189,0,246,217,302,301],
[275,333,276,245,304,0,328,329,249],
[276,278,307,305,333,222,0,334,223],
[246,192,166,81,248,221,216,0,193],
[327,304,247,246,249,301,327,357,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,285,308,277,284,267,301,301],
[256,0,255,271,261,231,262,299,278],
[265,295,0,291,268,259,255,268,284],
[242,279,259,0,270,264,266,299,275],
[273,289,282,280,0,274,263,286,279],
[266,319,291,286,276,0,298,310,292],
[283,288,295,284,287,252,0,294,288],
[249,251,282,251,264,240,256,0,254],
[249,272,266,275,271,258,262,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,300,226,302,265,244,284,299],
[228,0,247,239,273,228,196,244,207],
[250,303,0,246,296,256,295,280,272],
[324,311,304,0,326,295,289,274,287],
[248,277,254,224,0,273,269,200,211],
[285,322,294,255,277,0,241,271,266],
[306,354,255,261,281,309,0,287,263],
[266,306,270,276,350,279,263,0,292],
[251,343,278,263,339,284,287,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,290,264,260,278,272,262,281],
[259,0,273,253,269,268,265,262,277],
[260,277,0,258,266,289,272,267,281],
[286,297,292,0,286,290,293,274,295],
[290,281,284,264,0,288,271,272,296],
[272,282,261,260,262,0,274,270,275],
[278,285,278,257,279,276,0,280,294],
[288,288,283,276,278,280,270,0,282],
[269,273,269,255,254,275,256,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,268,296,270,284,284,269,276],
[273,0,260,282,268,291,265,273,271],
[282,290,0,294,283,282,278,280,272],
[254,268,256,0,250,267,263,259,251],
[280,282,267,300,0,285,272,267,282],
[266,259,268,283,265,0,264,253,258],
[266,285,272,287,278,286,0,243,263],
[281,277,270,291,283,297,307,0,284],
[274,279,278,299,268,292,287,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,265,279,265,308,286,248,305],
[245,0,279,252,265,294,272,268,279],
[285,271,0,259,266,337,295,262,282],
[271,298,291,0,300,299,293,283,282],
[285,285,284,250,0,297,281,267,270],
[242,256,213,251,253,0,260,238,255],
[264,278,255,257,269,290,0,252,271],
[302,282,288,267,283,312,298,0,269],
[245,271,268,268,280,295,279,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,271,285,271,265,264,288,284],
[257,0,267,271,250,243,249,273,272],
[279,283,0,292,280,275,263,276,274],
[265,279,258,0,266,255,244,277,275],
[279,300,270,284,0,279,271,281,303],
[285,307,275,295,271,0,284,278,285],
[286,301,287,306,279,266,0,295,302],
[262,277,274,273,269,272,255,0,273],
[266,278,276,275,247,265,248,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,301,276,285,278,278,274,293],
[264,0,272,270,258,246,257,259,276],
[249,278,0,279,275,256,278,260,274],
[274,280,271,0,295,257,255,279,278],
[265,292,275,255,0,254,278,273,280],
[272,304,294,293,296,0,287,288,303],
[272,293,272,295,272,263,0,268,292],
[276,291,290,271,277,262,282,0,286],
[257,274,276,272,270,247,258,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,356,300,336,299,282,274,245],
[294,0,326,265,335,294,277,326,255],
[194,224,0,182,247,200,202,228,208],
[250,285,368,0,335,270,246,285,197],
[214,215,303,215,0,243,284,203,215],
[251,256,350,280,307,0,306,269,281],
[268,273,348,304,266,244,0,286,203],
[276,224,322,265,347,281,264,0,255],
[305,295,342,353,335,269,347,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,280,281,268,263,265,263,253],
[265,0,276,264,259,287,265,273,256],
[270,274,0,271,257,288,264,259,270],
[269,286,279,0,257,273,263,268,276],
[282,291,293,293,0,293,289,262,280],
[287,263,262,277,257,0,291,268,249],
[285,285,286,287,261,259,0,283,271],
[287,277,291,282,288,282,267,0,263],
[297,294,280,274,270,301,279,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,218,163,54,327,274,217,108],
[333,0,221,222,112,329,277,111,163],
[332,329,0,165,277,383,329,220,218],
[387,328,385,0,275,437,331,218,273],
[496,438,273,275,0,384,383,274,382],
[223,221,167,113,166,0,277,223,166],
[276,273,221,219,167,273,0,273,164],
[333,439,330,332,276,327,277,0,273],
[442,387,332,277,168,384,386,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,293,263,282,267,245,270,276],
[288,0,289,277,301,271,269,279,281],
[257,261,0,261,276,262,261,267,268],
[287,273,289,0,292,267,267,272,290],
[268,249,274,258,0,255,277,275,268],
[283,279,288,283,295,0,264,271,281],
[305,281,289,283,273,286,0,288,275],
[280,271,283,278,275,279,262,0,268],
[274,269,282,260,282,269,275,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,272,284,279,276,267,270,272],
[285,0,284,278,273,269,267,275,267],
[278,266,0,270,259,277,262,262,266],
[266,272,280,0,250,273,263,260,274],
[271,277,291,300,0,282,278,293,276],
[274,281,273,277,268,0,266,278,266],
[283,283,288,287,272,284,0,279,279],
[280,275,288,290,257,272,271,0,287],
[278,283,284,276,274,284,271,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,288,271,299,298,272,269,299],
[267,0,286,275,319,288,282,282,299],
[262,264,0,269,301,293,270,275,287],
[279,275,281,0,294,270,253,264,296],
[251,231,249,256,0,258,230,249,246],
[252,262,257,280,292,0,242,257,283],
[278,268,280,297,320,308,0,287,291],
[281,268,275,286,301,293,263,0,298],
[251,251,263,254,304,267,259,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,261,241,236,248,268,258,243],
[289,0,272,269,271,261,263,269,279],
[289,278,0,264,269,268,274,273,266],
[309,281,286,0,278,299,271,302,293],
[314,279,281,272,0,296,281,287,285],
[302,289,282,251,254,0,273,275,273],
[282,287,276,279,269,277,0,273,280],
[292,281,277,248,263,275,277,0,273],
[307,271,284,257,265,277,270,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,292,285,286,265,284,269,272],
[278,0,294,283,290,265,264,281,279],
[258,256,0,270,281,269,274,264,266],
[265,267,280,0,268,265,282,287,272],
[264,260,269,282,0,264,287,273,271],
[285,285,281,285,286,0,290,273,275],
[266,286,276,268,263,260,0,266,260],
[281,269,286,263,277,277,284,0,278],
[278,271,284,278,279,275,290,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,270,279,276,272,284,286,278],
[272,0,294,271,266,277,277,294,269],
[280,256,0,276,267,271,293,282,266],
[271,279,274,0,286,274,287,290,275],
[274,284,283,264,0,293,291,305,271],
[278,273,279,276,257,0,285,302,280],
[266,273,257,263,259,265,0,264,258],
[264,256,268,260,245,248,286,0,254],
[272,281,284,275,279,270,292,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,295,269,269,298,265,285,253],
[258,0,307,239,262,285,283,264,260],
[255,243,0,246,277,246,250,256,256],
[281,311,304,0,279,284,284,286,248],
[281,288,273,271,0,273,272,287,266],
[252,265,304,266,277,0,277,271,259],
[285,267,300,266,278,273,0,266,250],
[265,286,294,264,263,279,284,0,277],
[297,290,294,302,284,291,300,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,245,267,268,246,278,255,241],
[303,0,288,284,265,284,287,250,276],
[305,262,0,269,245,268,268,263,271],
[283,266,281,0,282,274,276,259,269],
[282,285,305,268,0,283,296,287,266],
[304,266,282,276,267,0,288,273,269],
[272,263,282,274,254,262,0,253,267],
[295,300,287,291,263,277,297,0,283],
[309,274,279,281,284,281,283,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,279,269,287,298,265,274,259],
[294,0,275,287,257,308,278,286,281],
[271,275,0,287,244,308,289,308,256],
[281,263,263,0,247,287,278,274,290],
[263,293,306,303,0,303,284,290,292],
[252,242,242,263,247,0,246,239,252],
[285,272,261,272,266,304,0,272,269],
[276,264,242,276,260,311,278,0,259],
[291,269,294,260,258,298,281,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,267,262,306,281,267,250,277],
[274,0,293,279,283,273,276,279,271],
[283,257,0,272,278,288,274,270,283],
[288,271,278,0,289,281,283,288,304],
[244,267,272,261,0,235,250,273,267],
[269,277,262,269,315,0,294,268,271],
[283,274,276,267,300,256,0,263,279],
[300,271,280,262,277,282,287,0,260],
[273,279,267,246,283,279,271,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,274,257,297,262,250,247,274],
[274,0,318,269,294,270,272,282,279],
[276,232,0,274,280,272,288,266,264],
[293,281,276,0,290,257,282,254,276],
[253,256,270,260,0,280,250,268,253],
[288,280,278,293,270,0,248,264,256],
[300,278,262,268,300,302,0,267,279],
[303,268,284,296,282,286,283,0,292],
[276,271,286,274,297,294,271,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,284,310,291,308,308,275,285],
[248,0,262,270,279,262,281,259,260],
[266,288,0,285,280,276,299,254,268],
[240,280,265,0,276,278,276,255,257],
[259,271,270,274,0,273,307,252,279],
[242,288,274,272,277,0,292,266,260],
[242,269,251,274,243,258,0,253,247],
[275,291,296,295,298,284,297,0,275],
[265,290,282,293,271,290,303,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,260,287,259,285,305,257,278],
[260,0,269,263,245,258,290,265,285],
[290,281,0,288,267,276,301,282,299],
[263,287,262,0,257,269,297,258,310],
[291,305,283,293,0,291,312,269,287],
[265,292,274,281,259,0,310,284,276],
[245,260,249,253,238,240,0,259,274],
[293,285,268,292,281,266,291,0,295],
[272,265,251,240,263,274,276,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,280,295,287,277,262,270,267],
[252,0,241,258,251,285,239,248,242],
[270,309,0,286,276,295,276,280,274],
[255,292,264,0,264,272,257,244,256],
[263,299,274,286,0,282,261,253,251],
[273,265,255,278,268,0,245,241,238],
[288,311,274,293,289,305,0,295,286],
[280,302,270,306,297,309,255,0,279],
[283,308,276,294,299,312,264,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,295,295,258,331,181,221,295],
[328,0,221,440,328,403,290,292,366],
[255,329,0,438,365,366,287,327,437],
[255,110,112,0,255,294,145,220,186],
[292,222,185,295,0,331,254,221,259],
[219,147,184,256,219,0,180,292,220],
[369,260,263,405,296,370,0,296,224],
[329,258,223,330,329,258,254,0,295],
[255,184,113,364,291,330,326,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,262,270,296,280,245,285,313],
[245,0,278,296,303,252,245,293,315],
[288,272,0,297,283,256,250,289,300],
[280,254,253,0,270,260,253,288,318],
[254,247,267,280,0,216,246,291,301],
[270,298,294,290,334,0,287,300,345],
[305,305,300,297,304,263,0,285,332],
[265,257,261,262,259,250,265,0,300],
[237,235,250,232,249,205,218,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,364,248,277,308,294,255,268],
[262,0,333,278,272,254,326,301,255],
[186,217,0,251,258,272,251,276,228],
[302,272,299,0,284,309,315,256,329],
[273,278,292,266,0,320,284,258,290],
[242,296,278,241,230,0,277,220,261],
[256,224,299,235,266,273,0,227,259],
[295,249,274,294,292,330,323,0,299],
[282,295,322,221,260,289,291,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,277,301,296,294,299,298,271],
[261,0,261,256,257,282,271,276,257],
[273,289,0,291,276,300,264,307,267],
[249,294,259,0,273,265,282,287,277],
[254,293,274,277,0,285,294,301,295],
[256,268,250,285,265,0,263,272,279],
[251,279,286,268,256,287,0,287,280],
[252,274,243,263,249,278,263,0,256],
[279,293,283,273,255,271,270,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,284,284,297,307,241,296,273],
[284,0,304,277,283,327,310,309,269],
[266,246,0,280,287,293,286,256,287],
[266,273,270,0,258,310,212,262,242],
[253,267,263,292,0,306,264,313,293],
[243,223,257,240,244,0,230,271,206],
[309,240,264,338,286,320,0,294,283],
[254,241,294,288,237,279,256,0,291],
[277,281,263,308,257,344,267,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,269,270,232,239,274,253,225],
[299,0,249,277,286,270,269,274,216],
[281,301,0,285,299,260,282,294,249],
[280,273,265,0,248,264,275,289,217],
[318,264,251,302,0,260,290,309,275],
[311,280,290,286,290,0,321,301,271],
[276,281,268,275,260,229,0,262,240],
[297,276,256,261,241,249,288,0,232],
[325,334,301,333,275,279,310,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,268,276,267,285,281,285,261],
[286,0,270,287,285,304,278,298,301],
[282,280,0,279,263,296,276,288,298],
[274,263,271,0,271,282,268,268,276],
[283,265,287,279,0,285,265,278,287],
[265,246,254,268,265,0,253,266,274],
[269,272,274,282,285,297,0,292,283],
[265,252,262,282,272,284,258,0,275],
[289,249,252,274,263,276,267,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,259,270,277,290,284,296,290],
[271,0,244,271,263,277,241,257,246],
[291,306,0,307,286,272,277,287,274],
[280,279,243,0,279,271,256,259,269],
[273,287,264,271,0,294,279,299,270],
[260,273,278,279,256,0,232,270,290],
[266,309,273,294,271,318,0,270,288],
[254,293,263,291,251,280,280,0,261],
[260,304,276,281,280,260,262,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,309,278,292,290,294,281,289],
[278,0,277,237,258,291,276,274,257],
[241,273,0,242,276,284,272,261,267],
[272,313,308,0,286,292,301,288,310],
[258,292,274,264,0,277,290,259,287],
[260,259,266,258,273,0,280,265,270],
[256,274,278,249,260,270,0,288,295],
[269,276,289,262,291,285,262,0,282],
[261,293,283,240,263,280,255,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,271,237,307,258,244,253,245],
[287,0,276,255,294,288,266,257,240],
[279,274,0,276,307,287,258,268,254],
[313,295,274,0,344,299,281,278,276],
[243,256,243,206,0,253,225,221,211],
[292,262,263,251,297,0,231,256,233],
[306,284,292,269,325,319,0,277,254],
[297,293,282,272,329,294,273,0,272],
[305,310,296,274,339,317,296,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,260,235,265,253,260,257,245],
[286,0,295,278,275,281,282,282,258],
[290,255,0,269,266,256,260,260,241],
[315,272,281,0,277,275,284,274,258],
[285,275,284,273,0,266,285,278,271],
[297,269,294,275,284,0,284,271,276],
[290,268,290,266,265,266,0,276,248],
[293,268,290,276,272,279,274,0,252],
[305,292,309,292,279,274,302,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,262,264,258,270,247,270,271],
[294,0,281,261,244,283,264,292,298],
[288,269,0,273,271,281,251,295,288],
[286,289,277,0,275,279,274,299,300],
[292,306,279,275,0,282,277,312,306],
[280,267,269,271,268,0,302,292,314],
[303,286,299,276,273,248,0,295,296],
[280,258,255,251,238,258,255,0,277],
[279,252,262,250,244,236,254,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,235,287,288,260,244,255,252],
[277,0,257,286,317,300,266,257,276],
[315,293,0,255,330,289,304,323,278],
[263,264,295,0,312,260,283,295,252],
[262,233,220,238,0,231,285,250,254],
[290,250,261,290,319,0,289,273,248],
[306,284,246,267,265,261,0,316,232],
[295,293,227,255,300,277,234,0,264],
[298,274,272,298,296,302,318,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,258,250,278,293,297,273,282],
[269,0,269,277,277,269,293,266,287],
[292,281,0,273,290,289,282,262,289],
[300,273,277,0,283,295,300,277,299],
[272,273,260,267,0,287,282,267,299],
[257,281,261,255,263,0,279,263,290],
[253,257,268,250,268,271,0,260,272],
[277,284,288,273,283,287,290,0,286],
[268,263,261,251,251,260,278,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,269,263,269,261,285,280,282],
[272,0,294,280,262,262,269,267,286],
[281,256,0,257,263,267,271,278,256],
[287,270,293,0,273,290,294,271,268],
[281,288,287,277,0,270,286,279,268],
[289,288,283,260,280,0,285,272,272],
[265,281,279,256,264,265,0,259,256],
[270,283,272,279,271,278,291,0,273],
[268,264,294,282,282,278,294,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,285,273,296,305,268,256,306],
[268,0,290,281,277,306,275,282,333],
[265,260,0,253,285,258,278,244,301],
[277,269,297,0,298,270,267,271,328],
[254,273,265,252,0,288,265,272,305],
[245,244,292,280,262,0,247,257,265],
[282,275,272,283,285,303,0,289,316],
[294,268,306,279,278,293,261,0,309],
[244,217,249,222,245,285,234,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,271,284,277,303,277,294,291],
[269,0,281,279,250,256,266,264,265],
[279,269,0,286,277,273,260,283,291],
[266,271,264,0,248,280,266,287,274],
[273,300,273,302,0,281,283,281,308],
[247,294,277,270,269,0,272,275,273],
[273,284,290,284,267,278,0,308,304],
[256,286,267,263,269,275,242,0,295],
[259,285,259,276,242,277,246,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,309,263,286,272,282,294,266],
[275,0,292,277,274,280,298,299,278],
[241,258,0,253,252,251,264,243,269],
[287,273,297,0,279,268,287,304,272],
[264,276,298,271,0,264,256,282,267],
[278,270,299,282,286,0,271,285,273],
[268,252,286,263,294,279,0,274,260],
[256,251,307,246,268,265,276,0,265],
[284,272,281,278,283,277,290,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,284,266,287,276,269,276,266],
[281,0,257,289,285,284,268,265,254],
[266,293,0,285,286,289,271,276,259],
[284,261,265,0,279,271,266,277,251],
[263,265,264,271,0,266,258,259,259],
[274,266,261,279,284,0,257,260,246],
[281,282,279,284,292,293,0,290,272],
[274,285,274,273,291,290,260,0,280],
[284,296,291,299,291,304,278,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,311,306,294,286,301,298,268],
[256,0,261,270,274,255,297,253,253],
[239,289,0,261,275,263,276,271,275],
[244,280,289,0,286,256,285,286,258],
[256,276,275,264,0,269,290,269,274],
[264,295,287,294,281,0,291,267,262],
[249,253,274,265,260,259,0,255,255],
[252,297,279,264,281,283,295,0,284],
[282,297,275,292,276,288,295,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,244,263,264,231,249,231,239],
[268,0,242,253,254,256,255,271,262],
[306,308,0,269,271,263,276,290,254],
[287,297,281,0,269,272,266,270,283],
[286,296,279,281,0,295,258,287,270],
[319,294,287,278,255,0,268,265,263],
[301,295,274,284,292,282,0,276,265],
[319,279,260,280,263,285,274,0,286],
[311,288,296,267,280,287,285,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,309,280,306,287,332,325,310],
[296,0,292,268,302,293,324,309,281],
[241,258,0,274,256,260,305,302,245],
[270,282,276,0,235,311,312,300,259],
[244,248,294,315,0,306,319,277,286],
[263,257,290,239,244,0,342,259,208],
[218,226,245,238,231,208,0,283,226],
[225,241,248,250,273,291,267,0,258],
[240,269,305,291,264,342,324,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,281,274,304,290,288,290,354],
[277,0,269,279,284,280,256,282,264],
[269,281,0,282,257,242,247,271,253],
[276,271,268,0,282,251,279,278,304],
[246,266,293,268,0,273,243,279,275],
[260,270,308,299,277,0,280,290,276],
[262,294,303,271,307,270,0,303,307],
[260,268,279,272,271,260,247,0,265],
[196,286,297,246,275,274,243,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,291,256,256,314,307,284,295],
[264,0,274,270,220,270,342,318,263],
[259,276,0,265,251,280,319,293,266],
[294,280,285,0,256,282,321,263,263],
[294,330,299,294,0,332,366,273,290],
[236,280,270,268,218,0,283,246,266],
[243,208,231,229,184,267,0,250,265],
[266,232,257,287,277,304,300,0,280],
[255,287,284,287,260,284,285,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,260,290,286,281,324,277,278],
[280,0,251,270,267,281,289,278,259],
[290,299,0,295,262,283,302,283,287],
[260,280,255,0,271,267,308,288,263],
[264,283,288,279,0,267,300,279,272],
[269,269,267,283,283,0,303,271,257],
[226,261,248,242,250,247,0,244,252],
[273,272,267,262,271,279,306,0,259],
[272,291,263,287,278,293,298,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,278,268,276,286,299,293,298],
[270,0,280,279,268,286,280,292,306],
[272,270,0,290,277,287,298,292,306],
[282,271,260,0,256,282,290,291,277],
[274,282,273,294,0,283,292,296,282],
[264,264,263,268,267,0,284,271,272],
[251,270,252,260,258,266,0,261,267],
[257,258,258,259,254,279,289,0,280],
[252,244,244,273,268,278,283,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,302,285,277,262,280,288,291],
[287,0,297,277,297,275,266,272,296],
[248,253,0,256,248,225,250,249,263],
[265,273,294,0,259,255,293,301,291],
[273,253,302,291,0,275,244,295,258],
[288,275,325,295,275,0,275,286,305],
[270,284,300,257,306,275,0,292,286],
[262,278,301,249,255,264,258,0,292],
[259,254,287,259,292,245,264,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,291,275,288,276,295,268,308],
[286,0,299,283,258,288,280,269,278],
[259,251,0,259,256,250,280,268,290],
[275,267,291,0,283,303,312,274,294],
[262,292,294,267,0,297,299,273,315],
[274,262,300,247,253,0,294,256,259],
[255,270,270,238,251,256,0,283,283],
[282,281,282,276,277,294,267,0,317],
[242,272,260,256,235,291,267,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,259,250,293,256,259,232,248],
[302,0,275,294,308,282,253,255,282],
[291,275,0,292,282,314,290,262,244],
[300,256,258,0,301,268,273,241,259],
[257,242,268,249,0,222,239,238,233],
[294,268,236,282,328,0,270,269,263],
[291,297,260,277,311,280,0,247,269],
[318,295,288,309,312,281,303,0,270],
[302,268,306,291,317,287,281,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,276,293,272,276,290,275,288],
[264,0,255,260,247,275,284,262,252],
[274,295,0,279,261,277,282,266,270],
[257,290,271,0,261,274,276,255,260],
[278,303,289,289,0,275,292,294,277],
[274,275,273,276,275,0,283,274,277],
[260,266,268,274,258,267,0,259,253],
[275,288,284,295,256,276,291,0,267],
[262,298,280,290,273,273,297,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,278,250,288,275,267,279,295],
[273,0,261,272,257,278,253,276,273],
[272,289,0,262,299,276,265,247,263],
[300,278,288,0,281,268,279,297,273],
[262,293,251,269,0,275,270,271,278],
[275,272,274,282,275,0,266,270,292],
[283,297,285,271,280,284,0,293,289],
[271,274,303,253,279,280,257,0,253],
[255,277,287,277,272,258,261,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,286,276,268,266,285,287,291],
[263,0,286,283,277,279,278,279,287],
[264,264,0,255,262,264,262,259,275],
[274,267,295,0,264,279,285,282,275],
[282,273,288,286,0,264,280,274,298],
[284,271,286,271,286,0,278,287,285],
[265,272,288,265,270,272,0,278,288],
[263,271,291,268,276,263,272,0,286],
[259,263,275,275,252,265,262,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,247,273,252,258,280,277,247],
[323,0,288,324,272,290,310,288,276],
[303,262,0,299,258,275,285,275,272],
[277,226,251,0,260,275,262,263,245],
[298,278,292,290,0,277,293,281,267],
[292,260,275,275,273,0,287,284,257],
[270,240,265,288,257,263,0,259,238],
[273,262,275,287,269,266,291,0,251],
[303,274,278,305,283,293,312,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,317,297,265,289,269,284,296],
[247,0,255,273,233,266,221,268,262],
[233,295,0,297,238,306,236,291,270],
[253,277,253,0,226,273,226,267,246],
[285,317,312,324,0,313,275,294,269],
[261,284,244,277,237,0,236,288,257],
[281,329,314,324,275,314,0,290,290],
[266,282,259,283,256,262,260,0,279],
[254,288,280,304,281,293,260,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,270,265,297,258,292,278,255],
[290,0,264,295,304,282,306,306,295],
[280,286,0,280,308,285,282,288,273],
[285,255,270,0,267,261,279,299,264],
[253,246,242,283,0,262,253,275,256],
[292,268,265,289,288,0,269,301,262],
[258,244,268,271,297,281,0,263,270],
[272,244,262,251,275,249,287,0,273],
[295,255,277,286,294,288,280,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,260,266,256,271,264,267,261],
[303,0,292,298,272,291,282,283,285],
[290,258,0,253,262,263,271,269,259],
[284,252,297,0,265,268,277,273,255],
[294,278,288,285,0,276,290,273,273],
[279,259,287,282,274,0,258,272,280],
[286,268,279,273,260,292,0,283,277],
[283,267,281,277,277,278,267,0,282],
[289,265,291,295,277,270,273,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,314,274,299,294,275,297,296],
[301,0,373,316,338,341,290,314,265],
[236,177,0,238,269,245,246,256,220],
[276,234,312,0,296,290,271,297,268],
[251,212,281,254,0,267,247,290,225],
[256,209,305,260,283,0,225,259,225],
[275,260,304,279,303,325,0,275,260],
[253,236,294,253,260,291,275,0,200],
[254,285,330,282,325,325,290,350,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,254,236,231,226,287,256,245],
[295,0,296,250,288,285,301,287,272],
[296,254,0,254,259,274,270,265,257],
[314,300,296,0,278,299,288,292,266],
[319,262,291,272,0,257,298,274,264],
[324,265,276,251,293,0,306,291,282],
[263,249,280,262,252,244,0,254,248],
[294,263,285,258,276,259,296,0,258],
[305,278,293,284,286,268,302,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,298,268,278,271,307,283,263],
[252,0,298,284,249,276,257,275,291],
[252,252,0,250,258,267,264,267,235],
[282,266,300,0,270,269,261,313,262],
[272,301,292,280,0,268,300,298,275],
[279,274,283,281,282,0,272,256,302],
[243,293,286,289,250,278,0,273,289],
[267,275,283,237,252,294,277,0,270],
[287,259,315,288,275,248,261,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,284,261,243,302,259,245,252],
[299,0,288,266,285,309,278,297,292],
[266,262,0,269,246,257,243,261,259],
[289,284,281,0,268,310,283,282,272],
[307,265,304,282,0,305,274,289,277],
[248,241,293,240,245,0,250,236,240],
[291,272,307,267,276,300,0,261,279],
[305,253,289,268,261,314,289,0,258],
[298,258,291,278,273,310,271,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,301,293,275,275,277,285,278],
[267,0,280,262,258,285,257,279,243],
[249,270,0,264,256,265,263,262,246],
[257,288,286,0,271,276,258,263,262],
[275,292,294,279,0,281,257,286,263],
[275,265,285,274,269,0,258,284,261],
[273,293,287,292,293,292,0,270,250],
[265,271,288,287,264,266,280,0,263],
[272,307,304,288,287,289,300,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,273,257,277,261,254,288,284],
[291,0,275,276,301,279,279,288,274],
[277,275,0,261,293,275,265,269,252],
[293,274,289,0,254,264,260,275,259],
[273,249,257,296,0,268,275,279,266],
[289,271,275,286,282,0,253,292,260],
[296,271,285,290,275,297,0,307,287],
[262,262,281,275,271,258,243,0,262],
[266,276,298,291,284,290,263,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,256,284,287,272,287,278,305],
[253,0,251,281,262,262,272,269,263],
[294,299,0,265,283,286,287,286,289],
[266,269,285,0,284,278,280,305,289],
[263,288,267,266,0,248,282,269,284],
[278,288,264,272,302,0,283,272,299],
[263,278,263,270,268,267,0,267,264],
[272,281,264,245,281,278,283,0,294],
[245,287,261,261,266,251,286,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,340,275,272,344,307,412,309,241],
[210,0,170,104,244,240,208,209,139],
[275,380,0,311,312,276,415,312,278],
[278,446,239,0,378,344,412,378,171],
[206,306,238,172,0,272,276,244,136],
[243,310,274,206,278,0,311,242,173],
[138,342,135,138,274,239,0,206,139],
[241,341,238,172,306,308,344,0,206],
[309,411,272,379,414,377,411,344,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,272,265,278,282,247,298,289],
[273,0,273,297,271,291,251,296,278],
[278,277,0,291,280,286,262,306,288],
[285,253,259,0,265,269,263,303,276],
[272,279,270,285,0,284,283,324,290],
[268,259,264,281,266,0,260,290,273],
[303,299,288,287,267,290,0,314,294],
[252,254,244,247,226,260,236,0,271],
[261,272,262,274,260,277,256,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,282,284,276,248,261,273,257],
[291,0,302,302,295,268,277,306,279],
[268,248,0,264,279,271,257,284,285],
[266,248,286,0,271,259,244,276,252],
[274,255,271,279,0,248,240,268,265],
[302,282,279,291,302,0,256,300,288],
[289,273,293,306,310,294,0,297,289],
[277,244,266,274,282,250,253,0,261],
[293,271,265,298,285,262,261,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,281,301,282,285,272,278,284],
[263,0,266,294,250,288,275,252,285],
[269,284,0,274,241,278,259,266,296],
[249,256,276,0,244,287,260,278,261],
[268,300,309,306,0,288,277,303,309],
[265,262,272,263,262,0,247,268,284],
[278,275,291,290,273,303,0,294,296],
[272,298,284,272,247,282,256,0,282],
[266,265,254,289,241,266,254,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,281,292,267,281,273,281,270],
[267,0,273,278,264,287,286,266,259],
[269,277,0,302,293,317,277,271,277],
[258,272,248,0,296,282,289,245,279],
[283,286,257,254,0,302,277,271,290],
[269,263,233,268,248,0,263,254,282],
[277,264,273,261,273,287,0,249,273],
[269,284,279,305,279,296,301,0,275],
[280,291,273,271,260,268,277,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,271,285,286,275,271,275,292],
[273,0,254,271,276,268,262,264,259],
[279,296,0,290,295,269,276,272,275],
[265,279,260,0,286,253,258,263,270],
[264,274,255,264,0,256,263,267,266],
[275,282,281,297,294,0,281,273,279],
[279,288,274,292,287,269,0,274,269],
[275,286,278,287,283,277,276,0,269],
[258,291,275,280,284,271,281,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,277,273,368,335,278,369,337],
[278,0,219,306,336,305,307,278,308],
[273,331,0,331,394,331,366,334,367],
[277,244,219,0,337,335,279,308,339],
[182,214,156,213,0,276,217,305,214],
[215,245,219,215,274,0,247,246,186],
[272,243,184,271,333,303,0,303,337],
[181,272,216,242,245,304,247,0,305],
[213,242,183,211,336,364,213,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,279,281,287,293,267,284,289],
[261,0,268,270,299,280,267,285,285],
[271,282,0,273,296,290,275,298,309],
[269,280,277,0,304,286,282,290,290],
[263,251,254,246,0,266,251,273,271],
[257,270,260,264,284,0,274,270,271],
[283,283,275,268,299,276,0,292,294],
[266,265,252,260,277,280,258,0,262],
[261,265,241,260,279,279,256,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,267,274,273,257,287,270,239],
[282,0,275,280,279,295,245,296,266],
[283,275,0,291,260,262,276,304,277],
[276,270,259,0,275,282,252,285,270],
[277,271,290,275,0,307,257,301,286],
[293,255,288,268,243,0,282,279,243],
[263,305,274,298,293,268,0,315,257],
[280,254,246,265,249,271,235,0,265],
[311,284,273,280,264,307,293,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,245,295,280,279,269,270,281],
[270,0,263,292,256,258,256,284,261],
[305,287,0,296,282,281,286,299,273],
[255,258,254,0,268,259,254,295,280],
[270,294,268,282,0,268,274,302,290],
[271,292,269,291,282,0,258,280,294],
[281,294,264,296,276,292,0,291,279],
[280,266,251,255,248,270,259,0,256],
[269,289,277,270,260,256,271,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,264,305,265,284,272,278,263],
[261,0,298,299,279,266,269,277,265],
[286,252,0,270,254,266,255,274,247],
[245,251,280,0,239,276,261,254,246],
[285,271,296,311,0,290,280,284,277],
[266,284,284,274,260,0,254,275,248],
[278,281,295,289,270,296,0,280,267],
[272,273,276,296,266,275,270,0,243],
[287,285,303,304,273,302,283,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,288,279,288,284,276,286,272],
[260,0,280,265,274,273,282,290,272],
[262,270,0,267,283,286,285,303,276],
[271,285,283,0,274,281,282,290,275],
[262,276,267,276,0,283,257,274,257],
[266,277,264,269,267,0,257,280,264],
[274,268,265,268,293,293,0,287,262],
[264,260,247,260,276,270,263,0,261],
[278,278,274,275,293,286,288,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,279,269,282,285,281,277,266],
[265,0,270,261,256,270,282,250,259],
[271,280,0,284,288,260,287,266,288],
[281,289,266,0,260,272,283,270,270],
[268,294,262,290,0,270,286,277,268],
[265,280,290,278,280,0,296,260,283],
[269,268,263,267,264,254,0,258,271],
[273,300,284,280,273,290,292,0,301],
[284,291,262,280,282,267,279,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,275,289,286,258,271,275,286],
[270,0,261,312,298,272,275,271,292],
[275,289,0,308,286,283,281,285,295],
[261,238,242,0,252,255,254,254,274],
[264,252,264,298,0,279,264,276,300],
[292,278,267,295,271,0,285,275,290],
[279,275,269,296,286,265,0,269,274],
[275,279,265,296,274,275,281,0,282],
[264,258,255,276,250,260,276,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,252,256,272,267,272,290,313],
[254,0,217,256,274,243,235,233,326],
[298,333,0,274,288,290,295,295,332],
[294,294,276,0,298,274,271,267,302],
[278,276,262,252,0,248,287,252,304],
[283,307,260,276,302,0,261,267,310],
[278,315,255,279,263,289,0,264,308],
[260,317,255,283,298,283,286,0,301],
[237,224,218,248,246,240,242,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,296,281,274,295,289,297,288],
[271,0,283,277,294,270,263,273,271],
[254,267,0,286,285,251,268,263,277],
[269,273,264,0,266,267,277,277,271],
[276,256,265,284,0,262,273,270,277],
[255,280,299,283,288,0,275,255,284],
[261,287,282,273,277,275,0,280,271],
[253,277,287,273,280,295,270,0,274],
[262,279,273,279,273,266,279,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,251,275,275,268,268,264,259],
[270,0,265,269,262,278,283,265,261],
[299,285,0,297,275,286,294,283,268],
[275,281,253,0,263,269,271,264,257],
[275,288,275,287,0,279,273,252,268],
[282,272,264,281,271,0,285,277,274],
[282,267,256,279,277,265,0,269,268],
[286,285,267,286,298,273,281,0,290],
[291,289,282,293,282,276,282,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,274,289,292,300,284,283,286],
[252,0,267,285,288,283,280,284,276],
[276,283,0,278,282,298,288,290,272],
[261,265,272,0,269,275,276,263,261],
[258,262,268,281,0,269,260,280,286],
[250,267,252,275,281,0,256,282,274],
[266,270,262,274,290,294,0,285,275],
[267,266,260,287,270,268,265,0,277],
[264,274,278,289,264,276,275,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,298,237,264,288,258,226,261],
[293,0,285,261,261,286,282,246,277],
[252,265,0,238,295,292,265,240,258],
[313,289,312,0,272,324,296,291,296],
[286,289,255,278,0,253,246,276,278],
[262,264,258,226,297,0,249,278,279],
[292,268,285,254,304,301,0,234,307],
[324,304,310,259,274,272,316,0,273],
[289,273,292,254,272,271,243,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,192,310,222,247,243,257,331],
[296,0,206,223,277,245,236,248,305],
[358,344,0,289,291,272,289,341,328],
[240,327,261,0,295,263,232,234,302],
[328,273,259,255,0,260,253,324,258],
[303,305,278,287,290,0,285,271,318],
[307,314,261,318,297,265,0,314,302],
[293,302,209,316,226,279,236,0,290],
[219,245,222,248,292,232,248,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,243,298,283,278,268,275,321],
[266,0,249,282,260,269,290,245,293],
[307,301,0,345,310,226,328,312,330],
[252,268,205,0,309,223,286,266,327],
[267,290,240,241,0,235,277,289,312],
[272,281,324,327,315,0,299,319,320],
[282,260,222,264,273,251,0,250,330],
[275,305,238,284,261,231,300,0,343],
[229,257,220,223,238,230,220,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,298,251,274,300,301,264,304],
[265,0,290,254,289,281,266,264,263],
[252,260,0,243,271,269,281,260,264],
[299,296,307,0,296,318,314,268,299],
[276,261,279,254,0,294,310,280,262],
[250,269,281,232,256,0,276,262,250],
[249,284,269,236,240,274,0,238,252],
[286,286,290,282,270,288,312,0,281],
[246,287,286,251,288,300,298,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,257,309,249,293,279,258,297],
[236,0,239,274,223,253,236,243,272],
[293,311,0,273,264,288,260,302,287],
[241,276,277,0,262,263,234,289,259],
[301,327,286,288,0,285,263,314,286],
[257,297,262,287,265,0,223,255,234],
[271,314,290,316,287,327,0,311,308],
[292,307,248,261,236,295,239,0,248],
[253,278,263,291,264,316,242,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,246,311,260,278,272,270,272],
[308,0,282,306,250,305,289,288,261],
[304,268,0,310,262,310,272,295,284],
[239,244,240,0,268,302,263,272,272],
[290,300,288,282,0,302,297,301,265],
[272,245,240,248,248,0,254,272,255],
[278,261,278,287,253,296,0,307,249],
[280,262,255,278,249,278,243,0,255],
[278,289,266,278,285,295,301,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,261,253,298,277,248,282,245],
[276,0,259,254,266,278,259,260,254],
[289,291,0,264,311,283,266,282,277],
[297,296,286,0,286,302,277,299,269],
[252,284,239,264,0,270,244,263,265],
[273,272,267,248,280,0,268,280,262],
[302,291,284,273,306,282,0,307,294],
[268,290,268,251,287,270,243,0,279],
[305,296,273,281,285,288,256,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,291,303,284,260,290,240,268],
[268,0,294,314,307,259,316,275,304],
[259,256,0,277,297,246,294,238,276],
[247,236,273,0,291,237,274,236,272],
[266,243,253,259,0,211,286,221,243],
[290,291,304,313,339,0,275,278,290],
[260,234,256,276,264,275,0,245,250],
[310,275,312,314,329,272,305,0,317],
[282,246,274,278,307,260,300,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,278,288,261,269,264,264,269],
[290,0,263,277,258,257,289,267,259],
[272,287,0,303,284,267,281,288,277],
[262,273,247,0,246,265,275,266,285],
[289,292,266,304,0,280,294,285,269],
[281,293,283,285,270,0,297,286,277],
[286,261,269,275,256,253,0,270,260],
[286,283,262,284,265,264,280,0,267],
[281,291,273,265,281,273,290,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,271,267,277,265,285,277,277],
[280,0,273,271,266,266,279,274,259],
[279,277,0,259,270,275,281,283,273],
[283,279,291,0,282,282,297,294,271],
[273,284,280,268,0,267,267,274,281],
[285,284,275,268,283,0,286,282,276],
[265,271,269,253,283,264,0,268,269],
[273,276,267,256,276,268,282,0,278],
[273,291,277,279,269,274,281,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,295,267,298,276,280,282,294],
[257,0,290,270,278,280,279,282,276],
[255,260,0,254,280,254,268,280,274],
[283,280,296,0,274,266,272,290,286],
[252,272,270,276,0,280,276,307,281],
[274,270,296,284,270,0,281,275,288],
[270,271,282,278,274,269,0,286,298],
[268,268,270,260,243,275,264,0,271],
[256,274,276,264,269,262,252,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,275,307,278,270,302,270,305],
[274,0,264,281,270,254,254,238,261],
[275,286,0,312,268,254,291,241,287],
[243,269,238,0,257,230,242,240,275],
[272,280,282,293,0,256,266,275,282],
[280,296,296,320,294,0,293,271,324],
[248,296,259,308,284,257,0,253,297],
[280,312,309,310,275,279,297,0,294],
[245,289,263,275,268,226,253,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,257,277,287,293,264,280,300],
[237,0,246,256,247,249,267,233,246],
[293,304,0,291,279,283,258,252,284],
[273,294,259,0,263,312,293,264,270],
[263,303,271,287,0,281,298,271,289],
[257,301,267,238,269,0,237,255,247],
[286,283,292,257,252,313,0,262,301],
[270,317,298,286,279,295,288,0,274],
[250,304,266,280,261,303,249,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,275,262,275,262,283,261,252],
[266,0,251,264,238,263,267,232,265],
[275,299,0,296,257,284,300,259,290],
[288,286,254,0,253,268,290,270,275],
[275,312,293,297,0,280,317,273,295],
[288,287,266,282,270,0,285,277,286],
[267,283,250,260,233,265,0,242,265],
[289,318,291,280,277,273,308,0,284],
[298,285,260,275,255,264,285,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,275,296,292,268,261,278,276],
[258,0,276,290,283,258,259,269,266],
[275,274,0,305,288,271,277,285,273],
[254,260,245,0,279,247,246,258,257],
[258,267,262,271,0,246,259,260,265],
[282,292,279,303,304,0,291,273,286],
[289,291,273,304,291,259,0,277,292],
[272,281,265,292,290,277,273,0,279],
[274,284,277,293,285,264,258,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,272,259,280,282,276,304,284],
[280,0,261,271,278,282,279,290,285],
[278,289,0,291,273,250,275,309,271],
[291,279,259,0,283,274,284,284,277],
[270,272,277,267,0,269,281,288,286],
[268,268,300,276,281,0,291,294,272],
[274,271,275,266,269,259,0,293,271],
[246,260,241,266,262,256,257,0,259],
[266,265,279,273,264,278,279,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,277,288,275,282,275,278,296],
[260,0,262,266,265,270,256,257,274],
[273,288,0,280,274,284,260,278,299],
[262,284,270,0,268,282,261,299,273],
[275,285,276,282,0,275,273,273,276],
[268,280,266,268,275,0,263,291,292],
[275,294,290,289,277,287,0,279,294],
[272,293,272,251,277,259,271,0,270],
[254,276,251,277,274,258,256,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,274,294,294,283,265,288,261],
[280,0,268,261,279,273,271,271,261],
[276,282,0,273,270,268,259,273,254],
[256,289,277,0,287,287,270,291,279],
[256,271,280,263,0,267,283,280,267],
[267,277,282,263,283,0,269,283,256],
[285,279,291,280,267,281,0,283,274],
[262,279,277,259,270,267,267,0,279],
[289,289,296,271,283,294,276,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,256,268,272,269,288,281,262],
[266,0,277,265,278,259,284,255,265],
[294,273,0,273,283,286,293,276,271],
[282,285,277,0,284,286,283,289,269],
[278,272,267,266,0,258,277,262,256],
[281,291,264,264,292,0,291,281,286],
[262,266,257,267,273,259,0,264,256],
[269,295,274,261,288,269,286,0,277],
[288,285,279,281,294,264,294,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,280,259,261,320,290,274,263],
[246,0,266,288,270,306,282,285,303],
[270,284,0,256,275,298,248,265,263],
[291,262,294,0,265,299,268,273,281],
[289,280,275,285,0,321,269,287,281],
[230,244,252,251,229,0,238,252,258],
[260,268,302,282,281,312,0,289,294],
[276,265,285,277,263,298,261,0,270],
[287,247,287,269,269,292,256,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,254,281,278,276,263,274,262],
[274,0,278,297,286,269,280,287,283],
[296,272,0,298,258,268,277,274,281],
[269,253,252,0,254,272,268,263,250],
[272,264,292,296,0,268,287,283,276],
[274,281,282,278,282,0,286,278,284],
[287,270,273,282,263,264,0,260,260],
[276,263,276,287,267,272,290,0,287],
[288,267,269,300,274,266,290,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,274,283,258,262,248,263,262],
[275,0,265,304,263,285,278,267,266],
[276,285,0,282,273,276,265,263,262],
[267,246,268,0,280,266,266,255,242],
[292,287,277,270,0,276,278,271,286],
[288,265,274,284,274,0,284,273,265],
[302,272,285,284,272,266,0,276,266],
[287,283,287,295,279,277,274,0,276],
[288,284,288,308,264,285,284,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,257,289,287,294,264,288,335],
[250,0,245,278,248,256,255,273,280],
[293,305,0,280,263,277,248,280,333],
[261,272,270,0,252,255,232,252,281],
[263,302,287,298,0,294,265,288,320],
[256,294,273,295,256,0,284,256,276],
[286,295,302,318,285,266,0,301,313],
[262,277,270,298,262,294,249,0,272],
[215,270,217,269,230,274,237,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,290,284,271,296,283,278,294],
[276,0,294,275,286,293,273,283,296],
[260,256,0,270,265,281,273,280,288],
[266,275,280,0,277,297,270,275,282],
[279,264,285,273,0,277,270,282,285],
[254,257,269,253,273,0,253,282,278],
[267,277,277,280,280,297,0,285,290],
[272,267,270,275,268,268,265,0,299],
[256,254,262,268,265,272,260,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,198,220,237,259,313,254,276],
[296,0,239,293,310,348,262,253,293],
[352,311,0,256,274,331,294,294,382],
[330,257,294,0,384,297,386,333,311],
[313,240,276,166,0,333,296,204,236],
[291,202,219,253,217,0,257,202,257],
[237,288,256,164,254,293,0,256,271],
[296,297,256,217,346,348,294,0,293],
[274,257,168,239,314,293,279,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,265,281,266,262,273,269,275],
[288,0,272,286,275,281,298,292,303],
[285,278,0,277,271,270,284,281,279],
[269,264,273,0,259,273,282,272,270],
[284,275,279,291,0,285,290,285,283],
[288,269,280,277,265,0,279,271,271],
[277,252,266,268,260,271,0,283,277],
[281,258,269,278,265,279,267,0,275],
[275,247,271,280,267,279,273,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,304,328,270,314,293,316,311],
[278,0,293,294,272,313,326,285,276],
[246,257,0,262,260,316,311,280,272],
[222,256,288,0,244,295,278,287,285],
[280,278,290,306,0,331,323,252,304],
[236,237,234,255,219,0,255,256,291],
[257,224,239,272,227,295,0,278,277],
[234,265,270,263,298,294,272,0,292],
[239,274,278,265,246,259,273,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,269,290,277,284,273,275,288],
[262,0,266,278,278,276,269,272,274],
[281,284,0,282,290,278,270,261,271],
[260,272,268,0,278,262,277,271,278],
[273,272,260,272,0,280,284,276,285],
[266,274,272,288,270,0,283,273,265],
[277,281,280,273,266,267,0,271,273],
[275,278,289,279,274,277,279,0,279],
[262,276,279,272,265,285,277,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,238,251,231,242,233,238,243],
[295,0,255,263,262,260,245,263,272],
[312,295,0,268,265,290,254,276,271],
[299,287,282,0,255,260,296,294,262],
[319,288,285,295,0,264,263,285,285],
[308,290,260,290,286,0,265,268,277],
[317,305,296,254,287,285,0,273,307],
[312,287,274,256,265,282,277,0,277],
[307,278,279,288,265,273,243,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,278,284,283,295,301,302,280],
[275,0,259,262,271,269,288,294,271],
[272,291,0,274,242,266,303,299,268],
[266,288,276,0,288,313,302,305,318],
[267,279,308,262,0,267,296,290,293],
[255,281,284,237,283,0,273,282,264],
[249,262,247,248,254,277,0,257,227],
[248,256,251,245,260,268,293,0,294],
[270,279,282,232,257,286,323,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,283,269,263,254,259,275,273],
[284,0,282,261,273,278,281,274,285],
[267,268,0,260,257,230,270,267,282],
[281,289,290,0,284,275,274,290,273],
[287,277,293,266,0,282,293,284,269],
[296,272,320,275,268,0,289,278,312],
[291,269,280,276,257,261,0,273,271],
[275,276,283,260,266,272,277,0,258],
[277,265,268,277,281,238,279,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,351,329,310,275,274,288,350,307],
[199,0,223,220,171,212,188,224,220],
[221,327,0,208,209,227,200,276,211],
[240,330,342,0,327,330,229,315,286],
[275,379,341,223,0,288,291,275,272],
[276,338,323,220,262,0,252,277,249],
[262,362,350,321,259,298,0,299,323],
[200,326,274,235,275,273,251,0,260],
[243,330,339,264,278,301,227,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,299,254,239,223,224,216,198],
[239,0,287,245,229,227,241,206,199],
[251,263,0,240,264,191,234,256,168],
[296,305,310,0,294,237,264,284,255],
[311,321,286,256,0,240,295,215,215],
[327,323,359,313,310,0,296,261,285],
[326,309,316,286,255,254,0,230,256],
[334,344,294,266,335,289,320,0,193],
[352,351,382,295,335,265,294,357,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,261,273,293,247,302,271,294],
[250,0,238,245,265,240,268,256,265],
[289,312,0,277,311,274,298,303,282],
[277,305,273,0,322,274,290,290,274],
[257,285,239,228,0,254,238,261,227],
[303,310,276,276,296,0,288,269,283],
[248,282,252,260,312,262,0,271,282],
[279,294,247,260,289,281,279,0,278],
[256,285,268,276,323,267,268,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,298,277,285,295,263,285,287],
[285,0,327,273,291,305,283,308,286],
[252,223,0,222,275,264,259,277,268],
[273,277,328,0,299,300,294,297,296],
[265,259,275,251,0,282,270,283,258],
[255,245,286,250,268,0,282,272,276],
[287,267,291,256,280,268,0,293,265],
[265,242,273,253,267,278,257,0,258],
[263,264,282,254,292,274,285,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,275,275,284,252,275,272,296],
[266,0,279,260,279,277,289,248,305],
[275,271,0,270,292,260,291,272,318],
[275,290,280,0,282,256,278,262,307],
[266,271,258,268,0,251,279,268,291],
[298,273,290,294,299,0,293,300,312],
[275,261,259,272,271,257,0,266,288],
[278,302,278,288,282,250,284,0,309],
[254,245,232,243,259,238,262,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,247,295,268,274,288,303,258],
[294,0,240,296,281,274,256,245,242],
[303,310,0,288,294,286,296,281,267],
[255,254,262,0,263,296,239,247,258],
[282,269,256,287,0,257,287,249,281],
[276,276,264,254,293,0,275,208,270],
[262,294,254,311,263,275,0,258,253],
[247,305,269,303,301,342,292,0,281],
[292,308,283,292,269,280,297,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,258,274,268,262,258,262,279],
[275,0,297,278,277,282,268,282,283],
[292,253,0,268,269,263,263,264,269],
[276,272,282,0,274,276,279,280,268],
[282,273,281,276,0,272,262,280,270],
[288,268,287,274,278,0,278,286,273],
[292,282,287,271,288,272,0,289,277],
[288,268,286,270,270,264,261,0,267],
[271,267,281,282,280,277,273,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,244,310,312,307,263,299,254],
[320,0,327,310,278,329,281,255,256],
[306,223,0,257,278,278,265,263,263],
[240,240,293,0,269,263,261,246,272],
[238,272,272,281,0,292,319,277,273],
[243,221,272,287,258,0,232,279,254],
[287,269,285,289,231,318,0,283,277],
[251,295,287,304,273,271,267,0,263],
[296,294,287,278,277,296,273,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,285,263,283,269,276,274,286],
[277,0,304,291,288,275,293,280,267],
[265,246,0,251,275,257,265,281,262],
[287,259,299,0,297,270,287,281,276],
[267,262,275,253,0,259,244,261,274],
[281,275,293,280,291,0,295,297,275],
[274,257,285,263,306,255,0,281,270],
[276,270,269,269,289,253,269,0,269],
[264,283,288,274,276,275,280,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,283,275,282,261,275,263,286],
[280,0,263,277,286,270,283,281,297],
[267,287,0,279,271,276,302,288,286],
[275,273,271,0,286,271,276,271,271],
[268,264,279,264,0,252,273,278,300],
[289,280,274,279,298,0,273,271,289],
[275,267,248,274,277,277,0,277,270],
[287,269,262,279,272,279,273,0,279],
[264,253,264,279,250,261,280,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,282,247,278,256,283,269,275],
[286,0,272,269,271,281,320,276,272],
[268,278,0,273,264,268,270,256,275],
[303,281,277,0,282,258,291,272,253],
[272,279,286,268,0,270,265,257,276],
[294,269,282,292,280,0,318,290,271],
[267,230,280,259,285,232,0,265,243],
[281,274,294,278,293,260,285,0,278],
[275,278,275,297,274,279,307,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,270,289,276,303,284,286,275],
[261,0,267,279,257,284,274,255,284],
[280,283,0,292,267,284,281,280,271],
[261,271,258,0,266,275,268,263,282],
[274,293,283,284,0,280,286,272,280],
[247,266,266,275,270,0,274,268,277],
[266,276,269,282,264,276,0,279,274],
[264,295,270,287,278,282,271,0,280],
[275,266,279,268,270,273,276,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,275,275,292,264,256,268,300],
[259,0,276,237,277,265,220,225,266],
[275,274,0,264,284,266,273,259,294],
[275,313,286,0,303,291,269,280,291],
[258,273,266,247,0,264,259,244,257],
[286,285,284,259,286,0,255,234,284],
[294,330,277,281,291,295,0,267,294],
[282,325,291,270,306,316,283,0,275],
[250,284,256,259,293,266,256,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,294,282,249,311,259,289,264],
[247,0,267,288,260,284,258,258,277],
[256,283,0,258,244,275,253,268,262],
[268,262,292,0,267,278,247,271,263],
[301,290,306,283,0,311,291,288,271],
[239,266,275,272,239,0,266,264,257],
[291,292,297,303,259,284,0,313,280],
[261,292,282,279,262,286,237,0,252],
[286,273,288,287,279,293,270,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,279,341,279,267,261,301,275],
[307,0,315,355,304,262,306,297,333],
[271,235,0,358,301,257,282,268,298],
[209,195,192,0,226,222,228,242,227],
[271,246,249,324,0,227,252,253,260],
[283,288,293,328,323,0,252,311,333],
[289,244,268,322,298,298,0,264,286],
[249,253,282,308,297,239,286,0,322],
[275,217,252,323,290,217,264,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,204,167,209,196,203,233,244],
[277,0,204,181,257,268,243,255,203],
[346,346,0,284,268,275,319,326,316],
[383,369,266,0,304,276,310,349,282],
[341,293,282,246,0,278,273,323,252],
[354,282,275,274,272,0,289,334,306],
[347,307,231,240,277,261,0,279,292],
[317,295,224,201,227,216,271,0,267],
[306,347,234,268,298,244,258,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,300,284,278,270,290,301,297],
[256,0,271,284,268,266,277,293,297],
[250,279,0,290,277,288,294,290,297],
[266,266,260,0,275,264,277,290,280],
[272,282,273,275,0,274,287,288,275],
[280,284,262,286,276,0,289,283,283],
[260,273,256,273,263,261,0,275,279],
[249,257,260,260,262,267,275,0,260],
[253,253,253,270,275,267,271,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,265,271,292,279,268,304,306],
[281,0,272,256,263,254,275,286,297],
[285,278,0,275,280,271,279,267,293],
[279,294,275,0,289,281,275,277,301],
[258,287,270,261,0,271,268,271,279],
[271,296,279,269,279,0,261,281,291],
[282,275,271,275,282,289,0,283,277],
[246,264,283,273,279,269,267,0,273],
[244,253,257,249,271,259,273,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,347,316,320,349,253,281,304,302],
[203,0,283,352,283,270,266,237,301],
[234,267,0,255,254,204,250,203,234],
[230,198,295,0,295,251,312,317,331],
[201,267,296,255,0,234,248,253,301],
[297,280,346,299,316,0,247,250,314],
[269,284,300,238,302,303,0,254,354],
[246,313,347,233,297,300,296,0,365],
[248,249,316,219,249,236,196,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,270,261,291,290,288,291,277],
[259,0,265,264,270,274,278,275,263],
[280,285,0,266,296,291,282,292,279],
[289,286,284,0,264,295,290,272,275],
[259,280,254,286,0,289,290,293,266],
[260,276,259,255,261,0,285,283,265],
[262,272,268,260,260,265,0,267,264],
[259,275,258,278,257,267,283,0,269],
[273,287,271,275,284,285,286,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,279,308,274,277,263,270,290],
[274,0,281,304,269,265,274,285,268],
[271,269,0,277,264,284,268,275,279],
[242,246,273,0,257,277,256,256,271],
[276,281,286,293,0,272,275,271,273],
[273,285,266,273,278,0,259,264,285],
[287,276,282,294,275,291,0,287,284],
[280,265,275,294,279,286,263,0,280],
[260,282,271,279,277,265,266,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,280,252,269,266,267,272,287],
[285,0,284,267,277,282,298,288,299],
[270,266,0,265,265,278,261,278,285],
[298,283,285,0,274,282,279,275,293],
[281,273,285,276,0,274,278,275,308],
[284,268,272,268,276,0,269,272,272],
[283,252,289,271,272,281,0,280,270],
[278,262,272,275,275,278,270,0,287],
[263,251,265,257,242,278,280,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,272,267,241,269,243,250,269],
[283,0,300,263,270,302,302,270,276],
[278,250,0,264,254,283,257,256,250],
[283,287,286,0,261,284,256,241,277],
[309,280,296,289,0,322,295,275,276],
[281,248,267,266,228,0,247,247,280],
[307,248,293,294,255,303,0,251,280],
[300,280,294,309,275,303,299,0,294],
[281,274,300,273,274,270,270,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,271,280,291,263,281,250,260],
[267,0,268,282,274,235,290,209,235],
[279,282,0,268,293,279,270,255,276],
[270,268,282,0,277,251,283,237,228],
[259,276,257,273,0,242,289,258,245],
[287,315,271,299,308,0,304,272,281],
[269,260,280,267,261,246,0,270,237],
[300,341,295,313,292,278,280,0,271],
[290,315,274,322,305,269,313,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,251,244,257,287,290,256,242],
[285,0,274,283,296,334,326,278,304],
[299,276,0,266,300,275,311,272,285],
[306,267,284,0,283,298,328,270,290],
[293,254,250,267,0,257,296,245,236],
[263,216,275,252,293,0,318,257,291],
[260,224,239,222,254,232,0,203,210],
[294,272,278,280,305,293,347,0,291],
[308,246,265,260,314,259,340,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,384,269,272,283,287,241,253],
[256,0,327,285,273,184,273,301,240],
[166,223,0,238,227,243,239,254,211],
[281,265,312,0,239,302,300,331,281],
[278,277,323,311,0,240,263,345,252],
[267,366,307,248,310,0,342,294,264],
[263,277,311,250,287,208,0,323,251],
[309,249,296,219,205,256,227,0,189],
[297,310,339,269,298,286,299,361,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,265,247,245,255,248,234,239],
[301,0,247,260,249,267,275,243,263],
[285,303,0,273,280,289,301,292,254],
[303,290,277,0,269,295,293,292,276],
[305,301,270,281,0,292,283,289,271],
[295,283,261,255,258,0,283,250,237],
[302,275,249,257,267,267,0,269,255],
[316,307,258,258,261,300,281,0,245],
[311,287,296,274,279,313,295,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,266,315,308,294,289,267,261],
[271,0,256,287,297,285,287,277,243],
[284,294,0,295,304,304,294,268,275],
[235,263,255,0,266,260,279,250,264],
[242,253,246,284,0,286,275,270,236],
[256,265,246,290,264,0,280,243,255],
[261,263,256,271,275,270,0,260,262],
[283,273,282,300,280,307,290,0,252],
[289,307,275,286,314,295,288,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,309,247,267,263,267,264,273],
[294,0,325,284,294,277,277,281,273],
[241,225,0,246,270,255,287,232,270],
[303,266,304,0,300,295,282,268,289],
[283,256,280,250,0,248,272,259,276],
[287,273,295,255,302,0,283,260,238],
[283,273,263,268,278,267,0,259,245],
[286,269,318,282,291,290,291,0,258],
[277,277,280,261,274,312,305,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,336,281,338,312,276,242,288],
[236,0,270,277,322,257,248,250,272],
[214,280,0,267,278,253,235,241,242],
[269,273,283,0,286,282,258,258,287],
[212,228,272,264,0,282,206,231,238],
[238,293,297,268,268,0,266,258,286],
[274,302,315,292,344,284,0,295,267],
[308,300,309,292,319,292,255,0,283],
[262,278,308,263,312,264,283,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,260,247,299,223,232,237,255],
[294,0,314,258,321,287,281,285,295],
[290,236,0,239,265,204,226,227,234],
[303,292,311,0,310,273,237,274,292],
[251,229,285,240,0,230,242,213,250],
[327,263,346,277,320,0,271,252,274],
[318,269,324,313,308,279,0,300,298],
[313,265,323,276,337,298,250,0,333],
[295,255,316,258,300,276,252,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,279,278,254,259,272,284,262],
[260,0,256,257,257,262,267,268,261],
[271,294,0,262,251,257,272,273,255],
[272,293,288,0,274,266,276,286,281],
[296,293,299,276,0,273,283,286,287],
[291,288,293,284,277,0,254,283,271],
[278,283,278,274,267,296,0,288,275],
[266,282,277,264,264,267,262,0,274],
[288,289,295,269,263,279,275,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,199,268,247,281,302,349,350],
[305,0,261,368,266,322,265,328,288],
[351,289,0,290,227,263,308,353,311],
[282,182,260,0,222,300,284,344,262],
[303,284,323,328,0,260,325,410,307],
[269,228,287,250,290,0,329,291,270],
[248,285,242,266,225,221,0,328,351],
[201,222,197,206,140,259,222,0,205],
[200,262,239,288,243,280,199,345,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,274,278,282,280,275,275,278],
[270,0,281,299,281,266,286,285,275],
[276,269,0,306,268,263,275,277,291],
[272,251,244,0,257,263,264,267,263],
[268,269,282,293,0,263,266,269,280],
[270,284,287,287,287,0,276,259,287],
[275,264,275,286,284,274,0,291,294],
[275,265,273,283,281,291,259,0,271],
[272,275,259,287,270,263,256,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,309,259,289,288,258,270,277],
[269,0,315,278,300,311,286,296,276],
[241,235,0,251,270,279,250,248,252],
[291,272,299,0,286,298,286,276,278],
[261,250,280,264,0,289,269,269,261],
[262,239,271,252,261,0,247,267,253],
[292,264,300,264,281,303,0,268,265],
[280,254,302,274,281,283,282,0,273],
[273,274,298,272,289,297,285,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,267,284,259,243,243,283,277],
[266,0,276,299,253,253,259,294,308],
[283,274,0,311,261,273,276,311,306],
[266,251,239,0,245,242,205,266,252],
[291,297,289,305,0,273,269,306,299],
[307,297,277,308,277,0,266,298,303],
[307,291,274,345,281,284,0,304,330],
[267,256,239,284,244,252,246,0,273],
[273,242,244,298,251,247,220,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,256,236,272,256,274,258,276],
[280,0,296,277,264,292,310,274,284],
[294,254,0,262,268,289,274,294,296],
[314,273,288,0,279,294,310,285,296],
[278,286,282,271,0,296,299,296,288],
[294,258,261,256,254,0,278,241,285],
[276,240,276,240,251,272,0,294,292],
[292,276,256,265,254,309,256,0,268],
[274,266,254,254,262,265,258,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,260,258,294,273,282,274,244],
[310,0,273,289,294,280,287,294,249],
[290,277,0,301,275,263,268,279,269],
[292,261,249,0,274,260,253,266,264],
[256,256,275,276,0,285,276,277,237],
[277,270,287,290,265,0,288,256,290],
[268,263,282,297,274,262,0,292,284],
[276,256,271,284,273,294,258,0,256],
[306,301,281,286,313,260,266,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,297,304,261,299,250,279,270],
[264,0,293,292,263,301,294,286,275],
[253,257,0,286,234,285,269,260,253],
[246,258,264,0,239,278,247,263,275],
[289,287,316,311,0,310,292,275,286],
[251,249,265,272,240,0,274,253,273],
[300,256,281,303,258,276,0,243,265],
[271,264,290,287,275,297,307,0,295],
[280,275,297,275,264,277,285,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,285,276,300,277,273,288,302],
[245,0,234,261,264,229,243,261,277],
[265,316,0,274,280,256,264,284,305],
[274,289,276,0,273,246,272,292,289],
[250,286,270,277,0,260,258,267,282],
[273,321,294,304,290,0,295,291,313],
[277,307,286,278,292,255,0,287,290],
[262,289,266,258,283,259,263,0,293],
[248,273,245,261,268,237,260,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,266,265,241,253,237,280,260],
[294,0,285,286,282,285,250,280,276],
[284,265,0,290,268,283,248,267,251],
[285,264,260,0,257,267,276,279,246],
[309,268,282,293,0,313,264,309,264],
[297,265,267,283,237,0,270,273,240],
[313,300,302,274,286,280,0,289,260],
[270,270,283,271,241,277,261,0,267],
[290,274,299,304,286,310,290,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,174,203,259,231,171,319,228],
[264,0,291,263,377,230,290,349,229],
[376,259,0,289,376,318,322,406,288],
[347,287,261,0,375,346,320,405,317],
[291,173,174,175,0,291,317,289,200],
[319,320,232,204,259,0,202,319,199],
[379,260,228,230,233,348,0,348,259],
[231,201,144,145,261,231,202,0,203],
[322,321,262,233,350,351,291,347,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,316,332,220,330,260,316,306],
[278,0,316,278,238,252,221,208,225],
[234,234,0,233,251,289,290,262,236],
[218,272,317,0,276,263,262,248,262],
[330,312,299,274,0,303,302,259,249],
[220,298,261,287,247,0,244,247,291],
[290,329,260,288,248,306,0,221,236],
[234,342,288,302,291,303,329,0,305],
[244,325,314,288,301,259,314,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,287,291,290,270,286,291,276],
[271,0,279,291,274,276,264,274,275],
[263,271,0,292,256,273,267,306,291],
[259,259,258,0,256,259,274,282,271],
[260,276,294,294,0,321,280,289,276],
[280,274,277,291,229,0,285,283,296],
[264,286,283,276,270,265,0,309,286],
[259,276,244,268,261,267,241,0,274],
[274,275,259,279,274,254,264,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,304,281,279,291,297,271,294],
[286,0,287,272,283,274,281,268,285],
[246,263,0,257,274,273,274,268,266],
[269,278,293,0,299,278,299,276,306],
[271,267,276,251,0,295,275,259,278],
[259,276,277,272,255,0,290,263,264],
[253,269,276,251,275,260,0,269,275],
[279,282,282,274,291,287,281,0,268],
[256,265,284,244,272,286,275,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,276,287,235,243,283,277,254],
[295,0,322,298,275,267,306,306,263],
[274,228,0,275,244,247,277,263,265],
[263,252,275,0,214,233,288,272,232],
[315,275,306,336,0,284,332,307,287],
[307,283,303,317,266,0,301,295,279],
[267,244,273,262,218,249,0,277,250],
[273,244,287,278,243,255,273,0,257],
[296,287,285,318,263,271,300,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,277,264,271,269,253,259,275],
[290,0,263,274,277,272,264,273,279],
[273,287,0,276,287,277,270,266,291],
[286,276,274,0,261,268,253,283,275],
[279,273,263,289,0,275,268,267,280],
[281,278,273,282,275,0,256,266,289],
[297,286,280,297,282,294,0,275,287],
[291,277,284,267,283,284,275,0,294],
[275,271,259,275,270,261,263,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,274,283,268,301,289,258,282],
[270,0,261,258,268,288,284,259,258],
[276,289,0,310,249,285,305,287,280],
[267,292,240,0,291,283,278,268,263],
[282,282,301,259,0,311,285,253,287],
[249,262,265,267,239,0,244,266,270],
[261,266,245,272,265,306,0,262,253],
[292,291,263,282,297,284,288,0,280],
[268,292,270,287,263,280,297,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,270,259,336,265,281,296,261],
[296,0,276,263,305,285,274,298,270],
[280,274,0,280,306,291,292,293,285],
[291,287,270,0,307,260,283,294,280],
[214,245,244,243,0,252,265,272,254],
[285,265,259,290,298,0,301,311,282],
[269,276,258,267,285,249,0,262,280],
[254,252,257,256,278,239,288,0,245],
[289,280,265,270,296,268,270,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,237,237,276,238,267,285,221],
[317,0,268,293,334,294,280,301,339],
[313,282,0,265,325,281,267,318,266],
[313,257,285,0,311,306,262,276,306],
[274,216,225,239,0,220,282,276,321],
[312,256,269,244,330,0,275,301,338],
[283,270,283,288,268,275,0,301,260],
[265,249,232,274,274,249,249,0,268],
[329,211,284,244,229,212,290,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,271,293,272,277,284,275,288],
[264,0,277,292,274,252,296,239,252],
[279,273,0,279,284,260,273,273,254],
[257,258,271,0,258,233,262,235,272],
[278,276,266,292,0,238,260,275,257],
[273,298,290,317,312,0,305,291,280],
[266,254,277,288,290,245,0,247,275],
[275,311,277,315,275,259,303,0,271],
[262,298,296,278,293,270,275,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,281,276,262,284,291,296,272],
[263,0,255,235,241,250,268,268,221],
[269,295,0,281,254,265,277,298,264],
[274,315,269,0,279,285,284,304,274],
[288,309,296,271,0,276,296,286,298],
[266,300,285,265,274,0,288,303,260],
[259,282,273,266,254,262,0,278,244],
[254,282,252,246,264,247,272,0,256],
[278,329,286,276,252,290,306,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,316,259,291,316,295,254,282],
[290,0,316,307,278,288,272,282,298],
[234,234,0,208,210,223,202,189,220],
[291,243,342,0,261,282,312,288,312],
[259,272,340,289,0,287,298,328,307],
[234,262,327,268,263,0,279,275,279],
[255,278,348,238,252,271,0,251,285],
[296,268,361,262,222,275,299,0,306],
[268,252,330,238,243,271,265,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,264,271,283,287,278,262,281],
[256,0,264,270,261,287,264,289,263],
[286,286,0,280,278,276,268,275,268],
[279,280,270,0,278,272,264,271,260],
[267,289,272,272,0,270,263,273,287],
[263,263,274,278,280,0,256,273,265],
[272,286,282,286,287,294,0,269,288],
[288,261,275,279,277,277,281,0,279],
[269,287,282,290,263,285,262,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,277,276,276,275,288,275,266],
[268,0,264,256,292,267,262,266,265],
[273,286,0,267,284,277,279,264,294],
[274,294,283,0,287,264,269,280,254],
[274,258,266,263,0,252,260,260,258],
[275,283,273,286,298,0,296,278,278],
[262,288,271,281,290,254,0,271,273],
[275,284,286,270,290,272,279,0,262],
[284,285,256,296,292,272,277,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,273,274,253,274,273,265,255],
[266,0,271,289,270,276,283,277,258],
[277,279,0,285,271,261,271,281,272],
[276,261,265,0,276,274,263,286,267],
[297,280,279,274,0,281,279,287,276],
[276,274,289,276,269,0,264,274,264],
[277,267,279,287,271,286,0,280,268],
[285,273,269,264,263,276,270,0,254],
[295,292,278,283,274,286,282,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,260,320,320,283,277,249,323],
[255,0,261,293,240,232,260,242,306],
[290,289,0,288,275,310,250,301,326],
[230,257,262,0,299,260,264,264,285],
[230,310,275,251,0,272,263,252,308],
[267,318,240,290,278,0,272,252,316],
[273,290,300,286,287,278,0,262,294],
[301,308,249,286,298,298,288,0,297],
[227,244,224,265,242,234,256,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,271,262,252,266,250,259,253],
[290,0,275,272,265,256,248,254,265],
[279,275,0,270,275,265,269,284,274],
[288,278,280,0,271,272,268,276,272],
[298,285,275,279,0,269,255,261,275],
[284,294,285,278,281,0,267,279,267],
[300,302,281,282,295,283,0,259,297],
[291,296,266,274,289,271,291,0,268],
[297,285,276,278,275,283,253,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,277,288,284,292,284,269,281],
[265,0,259,277,294,276,269,263,279],
[273,291,0,287,285,285,269,264,300],
[262,273,263,0,280,269,275,261,264],
[266,256,265,270,0,285,271,263,265],
[258,274,265,281,265,0,275,262,272],
[266,281,281,275,279,275,0,286,292],
[281,287,286,289,287,288,264,0,288],
[269,271,250,286,285,278,258,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,264,271,285,273,293,280,290],
[275,0,273,283,283,284,315,288,306],
[286,277,0,272,285,284,304,299,301],
[279,267,278,0,263,264,279,284,285],
[265,267,265,287,0,299,297,265,293],
[277,266,266,286,251,0,291,270,280],
[257,235,246,271,253,259,0,259,271],
[270,262,251,266,285,280,291,0,285],
[260,244,249,265,257,270,279,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,280,280,266,273,282,258,270],
[267,0,272,261,254,278,273,260,256],
[270,278,0,254,271,276,272,247,269],
[270,289,296,0,289,285,292,264,285],
[284,296,279,261,0,275,289,264,272],
[277,272,274,265,275,0,272,266,272],
[268,277,278,258,261,278,0,264,257],
[292,290,303,286,286,284,286,0,272],
[280,294,281,265,278,278,293,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,221,281,313,306,276,294,261],
[312,0,288,291,332,300,307,294,270],
[329,262,0,327,294,315,300,282,301],
[269,259,223,0,335,254,284,292,280],
[237,218,256,215,0,268,245,250,248],
[244,250,235,296,282,0,265,263,267],
[274,243,250,266,305,285,0,263,257],
[256,256,268,258,300,287,287,0,262],
[289,280,249,270,302,283,293,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,287,293,256,324,333,353,313],
[266,0,302,269,291,337,285,298,255],
[263,248,0,279,280,337,279,338,295],
[257,281,271,0,298,315,284,329,282],
[294,259,270,252,0,271,314,320,281],
[226,213,213,235,279,0,289,275,270],
[217,265,271,266,236,261,0,308,243],
[197,252,212,221,230,275,242,0,244],
[237,295,255,268,269,280,307,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,328,275,288,286,309,304,310,310],
[222,0,239,255,246,270,270,274,260],
[275,311,0,294,283,307,299,290,303],
[262,295,256,0,295,312,290,301,280],
[264,304,267,255,0,286,292,272,301],
[241,280,243,238,264,0,264,254,256],
[246,280,251,260,258,286,0,261,268],
[240,276,260,249,278,296,289,0,267],
[240,290,247,270,249,294,282,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,279,274,267,285,262,271,289],
[268,0,262,266,269,274,260,262,259],
[271,288,0,273,287,279,257,277,277],
[276,284,277,0,294,297,258,272,280],
[283,281,263,256,0,265,250,271,261],
[265,276,271,253,285,0,262,275,278],
[288,290,293,292,300,288,0,267,279],
[279,288,273,278,279,275,283,0,281],
[261,291,273,270,289,272,271,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,275,282,257,308,259,327,217],
[297,0,249,323,323,299,298,304,287],
[275,301,0,299,315,295,263,283,277],
[268,227,251,0,291,292,304,304,276],
[293,227,235,259,0,297,266,311,238],
[242,251,255,258,253,0,225,287,229],
[291,252,287,246,284,325,0,302,298],
[223,246,267,246,239,263,248,0,213],
[333,263,273,274,312,321,252,337,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,250,286,272,305,283,277,254],
[278,0,276,293,267,302,308,307,275],
[300,274,0,311,311,282,313,341,313],
[264,257,239,0,279,288,243,289,283],
[278,283,239,271,0,315,256,303,303],
[245,248,268,262,235,0,260,273,283],
[267,242,237,307,294,290,0,317,249],
[273,243,209,261,247,277,233,0,232],
[296,275,237,267,247,267,301,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,284,283,295,300,273,280,263],
[274,0,286,299,295,310,279,287,256],
[266,264,0,276,275,285,264,280,278],
[267,251,274,0,272,305,286,275,252],
[255,255,275,278,0,284,276,269,266],
[250,240,265,245,266,0,279,249,273],
[277,271,286,264,274,271,0,247,288],
[270,263,270,275,281,301,303,0,260],
[287,294,272,298,284,277,262,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,265,293,290,283,281,282,288],
[271,0,275,274,276,280,262,285,268],
[285,275,0,289,274,266,281,287,268],
[257,276,261,0,281,276,275,284,267],
[260,274,276,269,0,273,263,273,262],
[267,270,284,274,277,0,285,267,247],
[269,288,269,275,287,265,0,264,275],
[268,265,263,266,277,283,286,0,286],
[262,282,282,283,288,303,275,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,276,271,273,283,342,275,275],
[280,0,288,280,265,289,293,271,278],
[274,262,0,279,268,260,331,253,245],
[279,270,271,0,276,258,301,263,274],
[277,285,282,274,0,256,326,282,280],
[267,261,290,292,294,0,320,272,289],
[208,257,219,249,224,230,0,246,259],
[275,279,297,287,268,278,304,0,280],
[275,272,305,276,270,261,291,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,273,280,273,331,329,307,343],
[232,0,271,259,258,303,273,277,290],
[277,279,0,274,259,277,289,276,296],
[270,291,276,0,295,302,285,281,292],
[277,292,291,255,0,303,301,323,288],
[219,247,273,248,247,0,226,258,248],
[221,277,261,265,249,324,0,262,297],
[243,273,274,269,227,292,288,0,309],
[207,260,254,258,262,302,253,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,263,234,268,275,272,248,275],
[303,0,284,295,277,275,310,290,290],
[287,266,0,273,270,259,294,270,281],
[316,255,277,0,273,262,288,268,292],
[282,273,280,277,0,263,314,258,299],
[275,275,291,288,287,0,285,259,299],
[278,240,256,262,236,265,0,238,276],
[302,260,280,282,292,291,312,0,293],
[275,260,269,258,251,251,274,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,278,270,285,288,281,272,275],
[257,0,265,266,283,279,265,279,244],
[272,285,0,266,277,282,275,283,265],
[280,284,284,0,286,287,274,273,250],
[265,267,273,264,0,259,275,270,254],
[262,271,268,263,291,0,267,273,259],
[269,285,275,276,275,283,0,282,255],
[278,271,267,277,280,277,268,0,244],
[275,306,285,300,296,291,295,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,276,278,278,312,295,274,255],
[268,0,265,267,264,275,265,277,266],
[274,285,0,285,277,288,319,291,286],
[272,283,265,0,262,293,277,277,272],
[272,286,273,288,0,295,281,290,249],
[238,275,262,257,255,0,273,269,249],
[255,285,231,273,269,277,0,274,251],
[276,273,259,273,260,281,276,0,281],
[295,284,264,278,301,301,299,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,287,267,246,279,261,260,266],
[291,0,300,270,270,280,276,260,279],
[263,250,0,248,253,271,270,264,266],
[283,280,302,0,296,284,284,257,276],
[304,280,297,254,0,287,300,284,307],
[271,270,279,266,263,0,277,276,289],
[289,274,280,266,250,273,0,289,284],
[290,290,286,293,266,274,261,0,310],
[284,271,284,274,243,261,266,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,281,293,304,302,298,268,281],
[266,0,271,285,293,283,287,267,266],
[269,279,0,291,282,266,287,269,274],
[257,265,259,0,265,254,274,246,248],
[246,257,268,285,0,276,292,277,280],
[248,267,284,296,274,0,285,238,262],
[252,263,263,276,258,265,0,257,262],
[282,283,281,304,273,312,293,0,275],
[269,284,276,302,270,288,288,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,252,247,278,287,252,265,248],
[309,0,263,272,278,304,276,283,286],
[298,287,0,261,286,294,279,305,257],
[303,278,289,0,289,265,293,264,247],
[272,272,264,261,0,276,254,272,245],
[263,246,256,285,274,0,265,290,245],
[298,274,271,257,296,285,0,273,285],
[285,267,245,286,278,260,277,0,255],
[302,264,293,303,305,305,265,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,262,265,237,288,261,260,281],
[323,0,302,274,285,295,289,306,292],
[288,248,0,291,259,273,266,260,294],
[285,276,259,0,241,280,254,281,270],
[313,265,291,309,0,288,302,299,322],
[262,255,277,270,262,0,270,276,277],
[289,261,284,296,248,280,0,282,298],
[290,244,290,269,251,274,268,0,265],
[269,258,256,280,228,273,252,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,289,280,288,280,262,292,285],
[286,0,279,278,281,256,288,286,305],
[261,271,0,281,267,262,282,292,292],
[270,272,269,0,273,269,281,303,293],
[262,269,283,277,0,275,281,260,310],
[270,294,288,281,275,0,273,277,302],
[288,262,268,269,269,277,0,276,304],
[258,264,258,247,290,273,274,0,308],
[265,245,258,257,240,248,246,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,266,282,276,267,289,269,281],
[256,0,245,259,271,256,271,241,273],
[284,305,0,271,283,275,276,283,288],
[268,291,279,0,285,279,267,266,295],
[274,279,267,265,0,282,279,252,280],
[283,294,275,271,268,0,285,277,292],
[261,279,274,283,271,265,0,274,272],
[281,309,267,284,298,273,276,0,274],
[269,277,262,255,270,258,278,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,296,302,292,319,301,266,288],
[232,0,267,278,274,259,274,215,250],
[254,283,0,270,279,284,287,274,274],
[248,272,280,0,286,274,287,281,275],
[258,276,271,264,0,298,294,263,231],
[231,291,266,276,252,0,269,248,252],
[249,276,263,263,256,281,0,258,257],
[284,335,276,269,287,302,292,0,275],
[262,300,276,275,319,298,293,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,262,284,266,278,270,284,258],
[296,0,278,291,280,274,301,278,264],
[288,272,0,298,281,289,296,297,260],
[266,259,252,0,276,261,278,280,262],
[284,270,269,274,0,282,282,272,252],
[272,276,261,289,268,0,270,282,268],
[280,249,254,272,268,280,0,280,250],
[266,272,253,270,278,268,270,0,275],
[292,286,290,288,298,282,300,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,285,297,283,285,296,292,276],
[278,0,287,281,289,277,276,296,270],
[265,263,0,271,279,275,259,279,270],
[253,269,279,0,289,266,257,267,258],
[267,261,271,261,0,280,251,278,275],
[265,273,275,284,270,0,273,277,265],
[254,274,291,293,299,277,0,289,271],
[258,254,271,283,272,273,261,0,266],
[274,280,280,292,275,285,279,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,275,279,295,267,270,295,268],
[275,0,284,265,304,264,278,292,275],
[275,266,0,272,279,276,276,282,266],
[271,285,278,0,285,288,280,296,260],
[255,246,271,265,0,289,286,268,254],
[283,286,274,262,261,0,253,289,271],
[280,272,274,270,264,297,0,296,260],
[255,258,268,254,282,261,254,0,255],
[282,275,284,290,296,279,290,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,294,295,283,260,293,285,307],
[265,0,283,276,275,248,270,274,278],
[256,267,0,275,273,255,263,268,300],
[255,274,275,0,281,268,270,280,271],
[267,275,277,269,0,254,257,260,285],
[290,302,295,282,296,0,270,289,270],
[257,280,287,280,293,280,0,275,285],
[265,276,282,270,290,261,275,0,296],
[243,272,250,279,265,280,265,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,257,260,287,265,278,282,276],
[258,0,274,268,287,268,263,276,267],
[293,276,0,287,274,268,273,267,281],
[290,282,263,0,304,282,272,274,290],
[263,263,276,246,0,266,275,271,261],
[285,282,282,268,284,0,257,279,284],
[272,287,277,278,275,293,0,279,276],
[268,274,283,276,279,271,271,0,279],
[274,283,269,260,289,266,274,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,283,273,277,251,259,262,288],
[288,0,292,265,274,255,293,257,284],
[267,258,0,268,267,262,279,269,282],
[277,285,282,0,268,257,282,276,279],
[273,276,283,282,0,248,278,263,291],
[299,295,288,293,302,0,286,271,295],
[291,257,271,268,272,264,0,259,276],
[288,293,281,274,287,279,291,0,298],
[262,266,268,271,259,255,274,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,261,260,251,271,296,274,256],
[293,0,284,273,277,287,318,301,267],
[289,266,0,248,238,245,268,281,261],
[290,277,302,0,270,282,275,278,315],
[299,273,312,280,0,297,303,287,315],
[279,263,305,268,253,0,292,301,294],
[254,232,282,275,247,258,0,288,257],
[276,249,269,272,263,249,262,0,272],
[294,283,289,235,235,256,293,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,288,283,284,275,276,279,275],
[278,0,288,289,262,291,266,282,273],
[262,262,0,272,266,277,259,275,261],
[267,261,278,0,261,273,262,257,272],
[266,288,284,289,0,286,279,279,289],
[275,259,273,277,264,0,261,274,271],
[274,284,291,288,271,289,0,289,299],
[271,268,275,293,271,276,261,0,287],
[275,277,289,278,261,279,251,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,310,293,246,263,271,270,321],
[249,0,269,244,230,209,249,242,293],
[240,281,0,278,244,259,239,250,298],
[257,306,272,0,238,251,240,262,306],
[304,320,306,312,0,277,272,292,317],
[287,341,291,299,273,0,279,296,322],
[279,301,311,310,278,271,0,296,320],
[280,308,300,288,258,254,254,0,323],
[229,257,252,244,233,228,230,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,230,231,269,326,228,240,343],
[350,0,246,285,333,344,275,258,334],
[320,304,0,299,291,358,272,331,412],
[319,265,251,0,261,339,281,282,266],
[281,217,259,289,0,318,284,242,339],
[224,206,192,211,232,0,234,260,328],
[322,275,278,269,266,316,0,281,373],
[310,292,219,268,308,290,269,0,357],
[207,216,138,284,211,222,177,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,234,253,256,319,341,275,233],
[336,0,210,294,256,277,254,278,213],
[316,340,0,317,295,360,381,253,316],
[297,256,233,0,254,293,192,317,252],
[294,294,255,296,0,380,356,332,336],
[231,273,190,257,170,0,252,212,208],
[209,296,169,358,194,298,0,252,230],
[275,272,297,233,218,338,298,0,252],
[317,337,234,298,214,342,320,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,393,313,471,234,236,315,471],
[79,0,237,157,158,0,79,237,315],
[157,313,0,157,236,236,315,315,473],
[237,393,393,0,395,237,158,316,393],
[79,392,314,155,0,157,236,158,392],
[316,550,314,313,393,0,237,316,471],
[314,471,235,392,314,313,0,472,392],
[235,313,235,234,392,234,78,0,313],
[79,235,77,157,158,79,158,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,280,274,277,261,265,285,263],
[289,0,303,272,283,255,288,293,285],
[270,247,0,260,282,237,261,254,264],
[276,278,290,0,281,281,266,298,267],
[273,267,268,269,0,270,266,275,251],
[289,295,313,269,280,0,264,306,274],
[285,262,289,284,284,286,0,274,272],
[265,257,296,252,275,244,276,0,254],
[287,265,286,283,299,276,278,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,268,281,292,295,297,268,279],
[259,0,271,266,293,281,289,273,269],
[282,279,0,262,272,282,292,270,252],
[269,284,288,0,289,276,302,280,271],
[258,257,278,261,0,261,274,267,254],
[255,269,268,274,289,0,300,267,270],
[253,261,258,248,276,250,0,236,250],
[282,277,280,270,283,283,314,0,276],
[271,281,298,279,296,280,300,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,276,282,268,272,269,290,278],
[278,0,281,289,271,292,270,286,272],
[274,269,0,286,269,283,278,285,283],
[268,261,264,0,250,273,265,272,275],
[282,279,281,300,0,296,284,284,273],
[278,258,267,277,254,0,275,269,267],
[281,280,272,285,266,275,0,262,268],
[260,264,265,278,266,281,288,0,274],
[272,278,267,275,277,283,282,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,258,307,269,277,275,286,298],
[268,0,276,309,271,279,304,292,275],
[292,274,0,286,283,290,277,269,288],
[243,241,264,0,258,262,272,273,285],
[281,279,267,292,0,266,283,295,302],
[273,271,260,288,284,0,270,284,286],
[275,246,273,278,267,280,0,265,283],
[264,258,281,277,255,266,285,0,262],
[252,275,262,265,248,264,267,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,330,331,388,496,276,274,442],
[275,0,331,277,333,386,223,223,386],
[220,219,0,276,332,387,166,165,330],
[219,273,274,0,274,276,276,219,330],
[162,217,218,276,0,331,220,219,329],
[54,164,163,274,219,0,166,110,218],
[274,327,384,274,330,384,0,330,382],
[276,327,385,331,331,440,220,0,439],
[108,164,220,220,221,332,168,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,269,277,287,277,281,279,306],
[255,0,302,274,360,288,259,314,304],
[281,248,0,250,294,291,268,225,282],
[273,276,300,0,287,281,297,269,311],
[263,190,256,263,0,264,288,311,308],
[273,262,259,269,286,0,255,260,285],
[269,291,282,253,262,295,0,255,287],
[271,236,325,281,239,290,295,0,323],
[244,246,268,239,242,265,263,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,272,288,306,296,282,278,296],
[284,0,259,308,319,228,291,289,280],
[278,291,0,263,280,273,256,293,273],
[262,242,287,0,294,251,296,250,299],
[244,231,270,256,0,240,247,267,261],
[254,322,277,299,310,0,274,293,280],
[268,259,294,254,303,276,0,271,267],
[272,261,257,300,283,257,279,0,289],
[254,270,277,251,289,270,283,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,275,263,305,268,297,275,262],
[304,0,281,270,307,289,289,280,269],
[275,269,0,264,316,290,297,271,263],
[287,280,286,0,325,277,299,273,282],
[245,243,234,225,0,256,273,263,255],
[282,261,260,273,294,0,294,272,279],
[253,261,253,251,277,256,0,262,262],
[275,270,279,277,287,278,288,0,265],
[288,281,287,268,295,271,288,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,279,272,272,271,264,263,269],
[295,0,286,284,272,268,259,269,282],
[271,264,0,261,276,256,252,262,272],
[278,266,289,0,280,272,270,272,281],
[278,278,274,270,0,258,252,255,275],
[279,282,294,278,292,0,276,271,286],
[286,291,298,280,298,274,0,272,283],
[287,281,288,278,295,279,278,0,273],
[281,268,278,269,275,264,267,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 550, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_9_550.csv", index=False, header=False)